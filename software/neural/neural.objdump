
neural.elf:     file format elf32-littlenios2
neural.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000cf8fc memsz 0x000cf8fc flags r-x
    LOAD off    0x000d091c vaddr 0x100cf91c paddr 0x100d91b4 align 2**12
         filesz 0x00009898 memsz 0x00009898 flags rw-
    LOAD off    0x000daa4c vaddr 0x100e2a4c paddr 0x100e2a4c align 2**12
         filesz 0x00000000 memsz 0x000001f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000184fc  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000b71f0  1001872c  1001872c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00009898  100cf91c  100d91b4  000d091c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f0  100e2a4c  100e2a4c  000daa4c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000da1b4  2**0
                  CONTENTS
  7 .sdram        00000000  100e2c3c  100e2c3c  000da1b4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000da1b4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001438  00000000  00000000  000da1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e782  00000000  00000000  000db610  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b92f  00000000  00000000  00109d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d5fc  00000000  00000000  001156c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003240  00000000  00000000  00122cc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000480a  00000000  00000000  00125f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bb43  00000000  00000000  0012a70a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00136250  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b38  00000000  00000000  00136260  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0013be4e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0013be51  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0013be5d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0013be5e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0013be5f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0013be63  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0013be67  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0013be6b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0013be76  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0013be81  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0013be8c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000016  00000000  00000000  0013be96  2**0
                  CONTENTS, READONLY
 30 .jdi          000043c0  00000000  00000000  0013beac  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00081130  00000000  00000000  0014026c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
1001872c l    d  .rodata	00000000 .rodata
100cf91c l    d  .rwdata	00000000 .rwdata
100e2a4c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100e2c3c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../neural_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 formula.c
10000428 l     F .text	000000b8 printme
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 types.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 drand48.c
00000000 l    df *ABS*	00000000 erand48.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
100d761c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
10006020 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand48.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 s_ldexp.c
00000000 l    df *ABS*	00000000 s_scalbn.c
100d9118 l     O .rwdata	00000008 two54
100d9120 l     O .rwdata	00000008 twom54
100d9128 l     O .rwdata	00000008 huge
100d9130 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
10008cec l     F .text	000000f0 __sbprintf
1000af1c l     F .text	0000020c cvt
1000b128 l     F .text	00000140 exponent
100cf482 l     O .rodata	00000010 blanks.4403
100cf492 l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
100cf4a2 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
1000b410 l     F .text	000003c4 quorem
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000d764 l     F .text	000000f4 std
100e2a64 l     O .bss	00000004 __sfp_lock
100e2a68 l     O .bss	00000004 __sinit_lock
1000dc98 l     F .text	00000024 __fp_lock
1000dcbc l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
100d7e48 l     O .rwdata	00000038 lconv
100d7e80 l     O .rwdata	00000020 lc_ctype_charset
100d7ea0 l     O .rwdata	00000020 lc_message_charset
100e2a7c l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
100cf864 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
100112c4 l     F .text	00000050 lflush
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011c70 l     F .text	000000f0 __sbprintf
100cf8ba l     O .rodata	00000010 blanks.4348
100cf8ca l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
1001554c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
10015674 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100156a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
100159ac l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10015aa8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10015b94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10015d84 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100d915c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
100161b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10016300 l     F .text	00000038 alt_dev_reg
100d8068 l     O .rwdata	00001060 jtag_uart_0
100d90c8 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
100165f4 l     F .text	0000020c altera_avalon_jtag_uart_irq
10016800 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
100d9168 l     O .rwdata	00000009 hcinfo.2538
100d9174 l     O .rwdata	0000000a hcinfo.2551
100d9180 l     O .rwdata	00000009 hcinfo.2560
100d918c l     O .rwdata	0000000a hcinfo.2573
100d9198 l     O .rwdata	0000000a hcinfo.2586
100d91a4 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10017424 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001794c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10017aac l     F .text	00000050 alt_get_errno
10017afc l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
100e2aac l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
100e2aa8 g     O .bss	00000004 alt_instruction_exception_handler
10007234 g     F .text	00000050 putchar
10010dfc g     F .text	000000b0 _mprec_log10
10010f7c g     F .text	00000134 __any_on
1001381c g     F .text	00000078 _isatty_r
100cf83c g     O .rodata	00000028 __mprec_tinytens
10015cc0 g     F .text	0000007c alt_main
10007284 g     F .text	00000118 _puts_r
100e2b3c g     O .bss	00000100 alt_irq
10013894 g     F .text	00000088 _lseek_r
100d91b4 g       *ABS*	00000000 __flash_rwdata_start
100151e4 g     F .text	00000088 .hidden __eqdf2
1000ec54 g     F .text	00000080 _gettimeofday_r
100e2c3c g       *ABS*	00000000 __alt_heap_start
10007178 g     F .text	00000078 printf
100139a4 g     F .text	000000e4 _wcrtomb_r
10011900 g     F .text	000000a0 __sseek
1000db40 g     F .text	000000d8 __sinit
10013094 g     F .text	00000168 __swbuf_r
1000ecd4 g     F .text	00000084 _setlocale_r
1000d858 g     F .text	000000bc __sfmoreglue
10015d60 g     F .text	00000024 __malloc_unlock
10016e40 g     F .text	0000011c alt_hostfs_open
100029e0 g     F .text	00000440 .hidden __divsf3
100e2ad8 g     O .bss	00000028 layer_2
1000f3f8 g     F .text	00000208 memmove
1000db04 g     F .text	0000003c _cleanup
1000f600 g     F .text	00000130 _Balloc
10003930 g     F .text	00000070 .hidden __fixsfsi
1001526c g     F .text	000000dc .hidden __gtdf2
10017d50 g     F .text	00000024 altera_nios2_gen2_irq_init
1000d34c g     F .text	00000028 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1001379c g     F .text	00000080 _fstat_r
100e2a6c g     O .bss	00000004 errno
1000825c g     F .text	00000040 __srget
1001181c g     F .text	00000030 __seofread
100e2a94 g     O .bss	00000004 alt_argv
100e10f0 g       *ABS*	00000000 _gp
10001ee8 g     F .text	000002b8 backprop_layer_2
1000344c g     F .text	000004e4 .hidden __subsf3
100d7ee8 g     O .rwdata	00000180 alt_fd_list
10005e60 g     F .text	00000098 _getc_r
10005ef8 g     F .text	000000a4 getc
10017078 g     F .text	00000068 alt_hostfs_seek
100071f0 g     F .text	00000044 _putchar_r
10017d74 g     F .text	00000090 alt_find_dev
1000f270 g     F .text	00000188 memcpy
1000dac0 g     F .text	00000044 _cleanup_r
100153c8 g     F .text	000000dc .hidden __floatsidf
100175d8 g     F .text	00000084 alt_fs_reg
10017a30 g     F .text	0000007c alt_io_redirect
10004460 g     F .text	000000f4 .hidden __ltdf2
1001872c g       *ABS*	00000000 __DTOR_END__
1000739c g     F .text	00000040 puts
10017fec g     F .text	0000009c alt_exception_cause_generated_bad_addr
100e2a4c g     O .bss	00000004 total_runs
1001167c g     F .text	00000104 __fpclassifyd
1000026c g     F .text	00000038 sigmoid
10010ce0 g     F .text	0000011c __ratio
10011d60 g     F .text	00000058 __vfiprintf_internal
100d90f8 g     O .rwdata	00000004 to_isig_hw_port
10016a00 g     F .text	0000021c altera_avalon_jtag_uart_read
10005f9c g     F .text	00000040 malloc
10007114 g     F .text	00000064 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000245c g     F .text	00000064 .hidden __udivsi3
100159fc g     F .text	000000ac isatty
100cf74c g     O .rodata	000000c8 __mprec_tens
1000ed58 g     F .text	00000024 __locale_charset
1000829c g     F .text	000000cc ldexp
10002f54 g     F .text	000000c8 .hidden __lesf2
100e2a80 g     O .bss	00000008 alt_timezone
100e2a58 g     O .bss	00000004 __malloc_top_pad
100d913c g     O .rwdata	00000004 __mb_cur_max
1000ede0 g     F .text	00000028 _localeconv_r
1000fc60 g     F .text	00000058 __i2b
1000e4b8 g     F .text	000005e8 __sfvwrite_r
10008710 g     F .text	00000078 _sbrk_r
10016fa0 g     F .text	0000006c alt_hostfs_read
1001391c g     F .text	00000088 _read_r
100d9154 g     O .rwdata	00000004 alt_max_fd
10013344 g     F .text	0000012c _fclose_r
10001dcc g     F .text	0000011c eval_layer_2
1000d700 g     F .text	00000064 fflush
100e2a5c g     O .bss	00000004 __malloc_max_sbrked_mem
100056b8 g     F .text	00000110 .hidden __extendsfdf2
100003a8 g     F .text	00000080 debug
10003bb4 g     F .text	000008ac .hidden __adddf3
10002e20 g     F .text	00000078 .hidden __nesf2
1001089c g     F .text	00000204 __b2d
10014250 g     F .text	000005c4 .hidden __umoddi3
10015be4 g     F .text	000000dc lseek
100d910c g     O .rwdata	00000004 _global_impure_ptr
100075dc g     F .text	00000bf0 _realloc_r
100e2c3c g       *ABS*	00000000 __bss_end
1001785c g     F .text	000000f0 alt_iic_isr_register
100160a8 g     F .text	00000108 alt_tick
10013c54 g     F .text	000005fc .hidden __udivdi3
100136a4 g     F .text	00000088 _fputwc_r
100cf814 g     O .rodata	00000028 __mprec_bigtens
1000f958 g     F .text	0000018c __s2b
100154a4 g     F .text	000000a8 .hidden __floatunsidf
10010418 g     F .text	00000114 __mcmp
100021a0 g     F .text	00000164 free_layer_2
1000dce0 g     F .text	00000048 __fp_lock_all
10017810 g     F .text	0000004c alt_ic_irq_enabled
10001ad8 g     F .text	000002f4 init_layer_2
1001600c g     F .text	0000009c alt_alarm_stop
10008c34 g     F .text	00000050 strtol
100e2aa4 g     O .bss	00000004 alt_irq_active
10016f5c g     F .text	00000044 alt_hostfs_close
100000fc g     F .exceptions	000000d4 alt_irq_handler
100d7ec0 g     O .rwdata	00000028 alt_dev_null
10017404 g     F .text	00000020 alt_dcache_flush_all
1000fae4 g     F .text	00000090 __hi0bits
10015348 g     F .text	00000080 .hidden __fixdfsi
10005a74 g     F .text	00000048 calloc
100d91b4 g       *ABS*	00000000 __ram_rwdata_end
100d914c g     O .rwdata	00000008 alt_dev_list
10000614 g     F .text	00000134 parse_testing_data
10016200 g     F .text	00000100 write
100110b0 g     F .text	00000104 _putc_r
10002e98 g     F .text	000000bc .hidden __gtsf2
100cf91c g       *ABS*	00000000 __ram_rodata_end
100156f0 g     F .text	000000b8 fstat
10004460 g     F .text	000000f4 .hidden __ledf2
10005cc4 g     F .text	00000144 _erand48_r
100100a8 g     F .text	00000178 __pow5mult
10011db8 g     F .text	000012dc ___vfiprintf_internal_r
100e2a70 g     O .bss	00000004 __nlocale_changed
100024c0 g     F .text	00000058 .hidden __umodsi3
10000eb4 g     F .text	00000060 get_array_value
100e2c3c g       *ABS*	00000000 end
10005a34 g     F .text	00000040 _atoi_r
1001652c g     F .text	000000c8 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100d9104 g     O .rwdata	00000004 to_sw_sig
1001872c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10005970 g     F .text	00000064 .hidden __clzsi2
10016c1c g     F .text	00000224 altera_avalon_jtag_uart_write
1000dc18 g     F .text	00000020 __sfp_lock_acquire
1000f0b4 g     F .text	000001bc memchr
10008e34 g     F .text	000020e8 ___vfprintf_internal_r
1000dd70 g     F .text	00000570 _free_r
10000f68 g     F .text	000000a4 print_array
1000ed7c g     F .text	00000020 __locale_mb_cur_max
100d90f0 g     O .rwdata	00000004 to_sig_hw_port
100183f0 g     F .text	000001fc __call_exitprocs
100081cc g     F .text	00000090 __srget_r
100e2a74 g     O .bss	00000004 __mlocale_changed
100d9114 g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100e2a9c g     O .bss	00000004 _alt_tick_rate
10010220 g     F .text	000001f8 __lshift
100e2aa0 g     O .bss	00000004 _alt_nticks
10015dd4 g     F .text	00000104 read
10016370 g     F .text	00000058 alt_sys_init
100039a0 g     F .text	00000124 .hidden __floatsisf
10018258 g     F .text	00000198 __register_exitproc
100e2b00 g     O .bss	00000024 layer_1
1000fcb8 g     F .text	000003f0 __multiply
100168a8 g     F .text	00000068 altera_avalon_jtag_uart_close
100059d4 g     F .text	00000028 .hidden __mulsi3
100cf91c g       *ABS*	00000000 __ram_rwdata_start
1001872c g       *ABS*	00000000 __ram_rodata_start
100e2ab0 g     O .bss	00000028 __malloc_current_mallinfo
10002e20 g     F .text	00000078 .hidden __eqsf2
10010aa0 g     F .text	00000240 __d2b
100d667c g     O .rwdata	00000fa0 testing_data
10007594 g     F .text	00000048 realloc
100163c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10017f18 g     F .text	000000d4 alt_get_fd
100d90f4 g     O .rwdata	00000004 to_sig_sw_port
100132cc g     F .text	00000078 _close_r
10018124 g     F .text	00000134 memcmp
10016488 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100e2c3c g       *ABS*	00000000 __alt_stack_base
100164d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000b268 g     F .text	000001a8 __swsetup_r
10014814 g     F .text	000009d0 .hidden __divdf3
1000d914 g     F .text	000001ac __sfp
10010eac g     F .text	000000d0 __copybits
100d7a40 g     O .rwdata	00000408 __malloc_av_
1000dc78 g     F .text	00000020 __sinit_lock_release
10004554 g     F .text	00000868 .hidden __muldf3
10008810 g     F .text	00000044 srand48
10011780 g     F .text	0000009c __sread
10017e04 g     F .text	00000114 alt_find_file
100004e0 g     F .text	00000134 parse_training_data
10017474 g     F .text	000000a4 alt_dev_llist_insert
10015d3c g     F .text	00000024 __malloc_lock
10015f5c g     F .text	000000b0 sbrk
1000d678 g     F .text	00000088 _fflush_r
10005abc g     F .text	00000164 _calloc_r
10000d48 g     F .text	00000074 init_array
100157a8 g     F .text	00000204 gettimeofday
10001534 g     F .text	0000013c eval_layer_1
100e2a4c g       *ABS*	00000000 __bss_start
10006f50 g     F .text	000001c4 memset
100002dc g     F .text	00000088 err
10000748 g     F .text	00000600 main
100e2a98 g     O .bss	00000004 alt_envp
100e2a60 g     O .bss	00000004 __malloc_max_total_mem
10016428 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
100131fc g     F .text	00000048 __swbuf
10002f54 g     F .text	000000c8 .hidden __ltsf2
100119a0 g     F .text	00000054 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10013470 g     F .text	00000040 fclose
10008948 g     F .text	000002ec _strtol_r
100057c8 g     F .text	000001a8 .hidden __truncdfsf2
1000b7d4 g     F .text	00001b78 _dtoa_r
100063d4 g     F .text	00000b7c _malloc_r
10013bdc g     F .text	00000078 __ascii_wctomb
10008c84 g     F .text	00000068 time
100073dc g     F .text	000001b8 __dorand48
100d9158 g     O .rwdata	00000004 alt_errno
1000eaa0 g     F .text	000000d8 _fwalk
100111b4 g     F .text	00000110 putc
10002364 g     F .text	00000084 .hidden __divsi3
1000e2e0 g     F .text	000001d8 _malloc_trim_r
1001872c g       *ABS*	00000000 __CTOR_END__
1000301c g     F .text	00000430 .hidden __mulsf3
10011624 g     F .text	00000058 finite
100119f4 g     F .text	00000140 strcmp
1001872c g       *ABS*	00000000 __flash_rodata_start
1001872c g       *ABS*	00000000 __DTOR_LIST__
10011570 g     F .text	000000b4 copysign
100151e4 g     F .text	00000088 .hidden __nedf2
10016338 g     F .text	00000038 alt_irq_init
10015ed8 g     F .text	00000084 alt_release_fd
100cf31c g     O .rodata	00000100 .hidden __clz_tab
100e2a78 g     O .bss	00000004 _PathLocale
10018088 g     F .text	0000003c atexit
10002e98 g     F .text	000000bc .hidden __gesf2
100d9100 g     O .rwdata	00000004 to_hw_sig
10013244 g     F .text	00000088 _write_r
1000ee08 g     F .text	00000048 setlocale
100d9108 g     O .rwdata	00000004 _impure_ptr
100e2a90 g     O .bss	00000004 alt_argc
10005c20 g     F .text	00000054 _drand48_r
10005e08 g     F .text	00000058 erand48
1000d374 g     F .text	00000304 __sflush_r
10008368 g     F .text	000003a8 scalbn
10017578 g     F .text	00000060 _do_dtors
1000edc0 g     F .text	00000020 __locale_cjk_lang
1000100c g     F .text	00000090 print_float_array
10011314 g     F .text	0000025c __srefill_r
1000196c g     F .text	0000016c free_layer_1
10000020 g       .exceptions	00000000 alt_irq_entry
100107d0 g     F .text	000000cc __ulp
1000dd28 g     F .text	00000048 __fp_unlock_all
10001670 g     F .text	000002fc backprop_layer_1
100d9144 g     O .rwdata	00000008 alt_fs_list
1001700c g     F .text	0000006c alt_hostfs_write
100e2a88 g     O .bss	00000008 alt_resettime
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000ee50 g     F .text	00000038 localeconv
10000364 g     F .text	00000044 inv_err
1001767c g     F .text	00000050 alt_ic_isr_register
100002a4 g     F .text	00000038 inv_sigmoid
100e2b24 g     O .bss	0000000c target_vals
100d91b4 g       *ABS*	00000000 _edata
100e2c3c g       *ABS*	00000000 _end
100134b0 g     F .text	000001f4 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
10008788 g     F .text	00000088 _srand48_r
10016910 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10005c74 g     F .text	00000050 drand48
100cf91c g     O .rwdata	00006d60 training_data
1001776c g     F .text	000000a4 alt_ic_irq_disable
1001184c g     F .text	000000b4 __swrite
100e2b30 g     O .bss	0000000c attr_vals
100d9110 g     O .rwdata	00000004 __malloc_trim_threshold
100e2a50 g     O .bss	00000004 num_incorrect
1000ed9c g     F .text	00000024 __locale_msgcharset
100180c4 g     F .text	00000060 exit
1000eb78 g     F .text	000000dc _fwalk_reent
10003ac4 g     F .text	000000f0 .hidden __floatunsisf
1001052c g     F .text	000002a4 __mdiff
100023e8 g     F .text	00000074 .hidden __modsi3
100d9138 g     O .rwdata	00000004 __ctype_ptr__
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000dc38 g     F .text	00000020 __sfp_lock_release
1000109c g     F .text	00000114 dot_product_1
100011b0 g     F .text	000000d0 dot_product_2
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000f14 g     F .text	00000054 free_array
100059fc g     F .text	00000038 atoi
100d90fc g     O .rwdata	00000004 to_isig_sw_port
100e2a54 g     O .bss	00000004 curr_point
100cf622 g     O .rodata	00000101 _ctype_
10002304 g     F .text	00000060 .hidden __fixunssfsi
100186f8 g     F .text	00000034 _exit
100172c4 g     F .text	00000140 alt_alarm_start
100185ec g     F .text	0000010c .hidden __muldi3
1000ee88 g     F .text	0000022c __smakebuf_r
10008854 g     F .text	000000f4 strlen
10017bf0 g     F .text	00000160 open
1001526c g     F .text	000000dc .hidden __gedf2
100d9140 g     O .rwdata	00000004 __wctomb
10011b34 g     F .text	0000013c __sprint_r
1001765c g     F .text	00000020 alt_icache_flush_all
100d91b0 g     O .rwdata	00000004 alt_priority_mask
100176cc g     F .text	000000a0 alt_ic_irq_enable
10008ddc g     F .text	00000058 __vfprintf_internal
10013b78 g     F .text	00000064 _wctomb_r
10004dbc g     F .text	000008fc .hidden __subdf3
1000fb74 g     F .text	000000ec __lo0bits
100d9160 g     O .rwdata	00000008 alt_alarm_list
10017518 g     F .text	00000060 _do_ctors
10001280 g     F .text	000002b4 init_layer_1
10013a88 g     F .text	000000f0 wcrtomb
1001559c g     F .text	000000d8 close
10002518 g     F .text	000004c8 .hidden __addsf3
10000dbc g     F .text	000000f8 insert_array
10015b10 g     F .text	00000084 alt_load
1001372c g     F .text	00000070 fputwc
10005fdc g     F .text	00000044 free
1000dc58 g     F .text	00000020 __sinit_lock_acquire
1000f7ac g     F .text	000001ac __multadd
1000f730 g     F .text	0000007c _Bfree
100170e0 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008403b4 	movhi	r2,4110
10000140:	108acf04 	addi	r2,r2,11068
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008403b4 	movhi	r2,4110
10000158:	108acf04 	addi	r2,r2,11068
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0866e17 	ldw	r2,6584(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0866e17 	ldw	r2,6584(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068403b4 	movhi	gp,4110
    ori gp, gp, %lo(_gp)
1000023c:	d6843c14 	ori	gp,gp,4336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008403b4 	movhi	r2,4110
    ori r2, r2, %lo(__bss_start)
10000244:	108a9314 	ori	r2,r2,10828

    movhi r3, %hi(__bss_end)
10000248:	00c403b4 	movhi	r3,4110
    ori r3, r3, %lo(__bss_end)
1000024c:	18cb0f14 	ori	r3,r3,11324

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0015b100 	call	10015b10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0015cc00 	call	10015cc0 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <sigmoid>:
volatile float *to_sig_sw_port = (float *) 0x00000090;

volatile float *to_isig_hw_port = (float *) 0x000000c0;
volatile float *to_isig_sw_port = (float *) 0x000000d0;

float sigmoid(float x) {
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
10000278:	e13fff15 	stw	r4,-4(fp)
        	return approx / (1.0 + approx);
        } else {
        	return 1.0 / (1.0 + approx);
        }
    } else {
    	*to_sig_hw_port = x;
1000027c:	d0a00017 	ldw	r2,-32768(gp)
10000280:	e0ffff17 	ldw	r3,-4(fp)
10000284:	10c00015 	stw	r3,0(r2)
    	return *to_sig_sw_port;
10000288:	d0a00117 	ldw	r2,-32764(gp)
1000028c:	10c00017 	ldw	r3,0(r2)
10000290:	1805883a 	mov	r2,r3
    }
}
10000294:	e037883a 	mov	sp,fp
10000298:	df000017 	ldw	fp,0(sp)
1000029c:	dec00104 	addi	sp,sp,4
100002a0:	f800283a 	ret

100002a4 <inv_sigmoid>:

float inv_sigmoid(float x) {
100002a4:	defffe04 	addi	sp,sp,-8
100002a8:	df000115 	stw	fp,4(sp)
100002ac:	df000104 	addi	fp,sp,4
100002b0:	e13fff15 	stw	r4,-4(fp)
	if(!ON_FPGA) {
		return sigmoid(x) * (1 - sigmoid(x));
	} else {
		*to_isig_hw_port = x;
100002b4:	d0a00217 	ldw	r2,-32760(gp)
100002b8:	e0ffff17 	ldw	r3,-4(fp)
100002bc:	10c00015 	stw	r3,0(r2)
		return *to_isig_sw_port;
100002c0:	d0a00317 	ldw	r2,-32756(gp)
100002c4:	10c00017 	ldw	r3,0(r2)
100002c8:	1805883a 	mov	r2,r3
	}
}
100002cc:	e037883a 	mov	sp,fp
100002d0:	df000017 	ldw	fp,0(sp)
100002d4:	dec00104 	addi	sp,sp,4
100002d8:	f800283a 	ret

100002dc <err>:

float err(float o, float t) {
100002dc:	defffb04 	addi	sp,sp,-20
100002e0:	dfc00415 	stw	ra,16(sp)
100002e4:	df000315 	stw	fp,12(sp)
100002e8:	dc000215 	stw	r16,8(sp)
100002ec:	df000304 	addi	fp,sp,12
100002f0:	e13ffd15 	stw	r4,-12(fp)
100002f4:	e17ffe15 	stw	r5,-8(fp)
	return 0.5 * ((t - o) * (t - o));
100002f8:	e17ffd17 	ldw	r5,-12(fp)
100002fc:	e13ffe17 	ldw	r4,-8(fp)
10000300:	000344c0 	call	1000344c <__subsf3>
10000304:	1007883a 	mov	r3,r2
10000308:	1821883a 	mov	r16,r3
1000030c:	e17ffd17 	ldw	r5,-12(fp)
10000310:	e13ffe17 	ldw	r4,-8(fp)
10000314:	000344c0 	call	1000344c <__subsf3>
10000318:	1007883a 	mov	r3,r2
1000031c:	1805883a 	mov	r2,r3
10000320:	100b883a 	mov	r5,r2
10000324:	8009883a 	mov	r4,r16
10000328:	000301c0 	call	1000301c <__mulsf3>
1000032c:	1007883a 	mov	r3,r2
10000330:	1805883a 	mov	r2,r3
10000334:	014fc034 	movhi	r5,16128
10000338:	1009883a 	mov	r4,r2
1000033c:	000301c0 	call	1000301c <__mulsf3>
10000340:	1009883a 	mov	r4,r2
10000344:	2007883a 	mov	r3,r4
10000348:	1805883a 	mov	r2,r3
}
1000034c:	e6ffff04 	addi	sp,fp,-4
10000350:	dfc00217 	ldw	ra,8(sp)
10000354:	df000117 	ldw	fp,4(sp)
10000358:	dc000017 	ldw	r16,0(sp)
1000035c:	dec00304 	addi	sp,sp,12
10000360:	f800283a 	ret

10000364 <inv_err>:

float inv_err(float o, float t) {
10000364:	defffc04 	addi	sp,sp,-16
10000368:	dfc00315 	stw	ra,12(sp)
1000036c:	df000215 	stw	fp,8(sp)
10000370:	df000204 	addi	fp,sp,8
10000374:	e13ffe15 	stw	r4,-8(fp)
10000378:	e17fff15 	stw	r5,-4(fp)
	return (o - t);
1000037c:	e17fff17 	ldw	r5,-4(fp)
10000380:	e13ffe17 	ldw	r4,-8(fp)
10000384:	000344c0 	call	1000344c <__subsf3>
10000388:	1009883a 	mov	r4,r2
1000038c:	2007883a 	mov	r3,r4
10000390:	1805883a 	mov	r2,r3
}
10000394:	e037883a 	mov	sp,fp
10000398:	dfc00117 	ldw	ra,4(sp)
1000039c:	df000017 	ldw	fp,0(sp)
100003a0:	dec00204 	addi	sp,sp,8
100003a4:	f800283a 	ret

100003a8 <debug>:

void debug(float x) {
100003a8:	defffd04 	addi	sp,sp,-12
100003ac:	dfc00215 	stw	ra,8(sp)
100003b0:	df000115 	stw	fp,4(sp)
100003b4:	df000104 	addi	fp,sp,4
100003b8:	e13fff15 	stw	r4,-4(fp)
	printf("Floating Point:\n");
100003bc:	010400b4 	movhi	r4,4098
100003c0:	2121cb04 	addi	r4,r4,-30932
100003c4:	000739c0 	call	1000739c <puts>
	printf("%f : ", x);
100003c8:	e0bfff17 	ldw	r2,-4(fp)
100003cc:	1009883a 	mov	r4,r2
100003d0:	00056b80 	call	100056b8 <__extendsfdf2>
100003d4:	100d883a 	mov	r6,r2
100003d8:	180f883a 	mov	r7,r3
100003dc:	300b883a 	mov	r5,r6
100003e0:	380d883a 	mov	r6,r7
100003e4:	010400b4 	movhi	r4,4098
100003e8:	2121cf04 	addi	r4,r4,-30916
100003ec:	00071780 	call	10007178 <printf>
	printme(&x, sizeof(float));
100003f0:	01400104 	movi	r5,4
100003f4:	e13fff04 	addi	r4,fp,-4
100003f8:	00004280 	call	10000428 <printme>

	printf("Fixed Point:\n");
100003fc:	010400b4 	movhi	r4,4098
10000400:	2121d104 	addi	r4,r4,-30908
10000404:	000739c0 	call	1000739c <puts>
	// convert to fixed point
	printf("\n");
10000408:	01000284 	movi	r4,10
1000040c:	00072340 	call	10007234 <putchar>
}
10000410:	0001883a 	nop
10000414:	e037883a 	mov	sp,fp
10000418:	dfc00117 	ldw	ra,4(sp)
1000041c:	df000017 	ldw	fp,0(sp)
10000420:	dec00204 	addi	sp,sp,8
10000424:	f800283a 	ret

10000428 <printme>:

static void printme(void *c, size_t n) {
10000428:	defffa04 	addi	sp,sp,-24
1000042c:	dfc00515 	stw	ra,20(sp)
10000430:	df000415 	stw	fp,16(sp)
10000434:	df000404 	addi	fp,sp,16
10000438:	e13ffe15 	stw	r4,-8(fp)
1000043c:	e17fff15 	stw	r5,-4(fp)
	unsigned char *t = c;
10000440:	e0bffe17 	ldw	r2,-8(fp)
10000444:	e0bffd15 	stw	r2,-12(fp)
	if (c == NULL)
10000448:	e0bffe17 	ldw	r2,-8(fp)
1000044c:	10001e26 	beq	r2,zero,100004c8 <printme+0xa0>
		return;
	while (n > 0) {
10000450:	00001806 	br	100004b4 <printme+0x8c>
		int q;
		--n;
10000454:	e0bfff17 	ldw	r2,-4(fp)
10000458:	10bfffc4 	addi	r2,r2,-1
1000045c:	e0bfff15 	stw	r2,-4(fp)
		for(q = 0x80; q; q >>= 1)
10000460:	00802004 	movi	r2,128
10000464:	e0bffc15 	stw	r2,-16(fp)
10000468:	00001006 	br	100004ac <printme+0x84>
			printf("%x", !!(t[n] & q));
1000046c:	e0fffd17 	ldw	r3,-12(fp)
10000470:	e0bfff17 	ldw	r2,-4(fp)
10000474:	1885883a 	add	r2,r3,r2
10000478:	10800003 	ldbu	r2,0(r2)
1000047c:	10c03fcc 	andi	r3,r2,255
10000480:	e0bffc17 	ldw	r2,-16(fp)
10000484:	1884703a 	and	r2,r3,r2
10000488:	1004c03a 	cmpne	r2,r2,zero
1000048c:	10803fcc 	andi	r2,r2,255
10000490:	100b883a 	mov	r5,r2
10000494:	010400b4 	movhi	r4,4098
10000498:	2121d504 	addi	r4,r4,-30892
1000049c:	00071780 	call	10007178 <printf>
	if (c == NULL)
		return;
	while (n > 0) {
		int q;
		--n;
		for(q = 0x80; q; q >>= 1)
100004a0:	e0bffc17 	ldw	r2,-16(fp)
100004a4:	1005d07a 	srai	r2,r2,1
100004a8:	e0bffc15 	stw	r2,-16(fp)
100004ac:	e0bffc17 	ldw	r2,-16(fp)
100004b0:	103fee1e 	bne	r2,zero,1000046c <__alt_data_end+0xf800046c>

static void printme(void *c, size_t n) {
	unsigned char *t = c;
	if (c == NULL)
		return;
	while (n > 0) {
100004b4:	e0bfff17 	ldw	r2,-4(fp)
100004b8:	103fe61e 	bne	r2,zero,10000454 <__alt_data_end+0xf8000454>
		int q;
		--n;
		for(q = 0x80; q; q >>= 1)
			printf("%x", !!(t[n] & q));
	}
	printf("\n");
100004bc:	01000284 	movi	r4,10
100004c0:	00072340 	call	10007234 <putchar>
100004c4:	00000106 	br	100004cc <printme+0xa4>
}

static void printme(void *c, size_t n) {
	unsigned char *t = c;
	if (c == NULL)
		return;
100004c8:	0001883a 	nop
		--n;
		for(q = 0x80; q; q >>= 1)
			printf("%x", !!(t[n] & q));
	}
	printf("\n");
}
100004cc:	e037883a 	mov	sp,fp
100004d0:	dfc00117 	ldw	ra,4(sp)
100004d4:	df000017 	ldw	fp,0(sp)
100004d8:	dec00204 	addi	sp,sp,8
100004dc:	f800283a 	ret

100004e0 <parse_training_data>:

uint32_t	curr_point;
uint32_t 	total_runs;
uint32_t	num_incorrect;

int parse_training_data() {
100004e0:	defff904 	addi	sp,sp,-28
100004e4:	dfc00615 	stw	ra,24(sp)
100004e8:	df000515 	stw	fp,20(sp)
100004ec:	df000504 	addi	fp,sp,20
	// reset dataset
	init_array(&target_vals, INITIAL_ARR_SIZE);
100004f0:	0150b234 	movhi	r5,17096
100004f4:	010403b4 	movhi	r4,4110
100004f8:	210ac904 	addi	r4,r4,11044
100004fc:	0000d480 	call	10000d48 <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
10000500:	0150b234 	movhi	r5,17096
10000504:	010403b4 	movhi	r4,4110
10000508:	210acc04 	addi	r4,r4,11056
1000050c:	0000d480 	call	10000d48 <init_array>
	curr_point 		= 0;
10000510:	008403b4 	movhi	r2,4110
10000514:	108a9504 	addi	r2,r2,10836
10000518:	10000015 	stw	zero,0(r2)
	total_runs 		= 0;
1000051c:	008403b4 	movhi	r2,4110
10000520:	108a9304 	addi	r2,r2,10828
10000524:	10000015 	stw	zero,0(r2)
	num_incorrect 	= 0;
10000528:	008403b4 	movhi	r2,4110
1000052c:	108a9404 	addi	r2,r2,10832
10000530:	10000015 	stw	zero,0(r2)

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 7000; i++) {
10000534:	e03ffc15 	stw	zero,-16(fp)
10000538:	00002d06 	br	100005f0 <parse_training_data+0x110>
		line = training_data[i];
1000053c:	00840374 	movhi	r2,4109
10000540:	10be4704 	addi	r2,r2,-1764
10000544:	e0fffc17 	ldw	r3,-16(fp)
10000548:	18c7883a 	add	r3,r3,r3
1000054c:	18c7883a 	add	r3,r3,r3
10000550:	10c5883a 	add	r2,r2,r3
10000554:	10800017 	ldw	r2,0(r2)
10000558:	e0bffe15 	stw	r2,-8(fp)
		first_elem = 1;
1000055c:	00800044 	movi	r2,1
10000560:	e0bffb05 	stb	r2,-20(fp)

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000564:	e03ffd15 	stw	zero,-12(fp)
10000568:	00001b06 	br	100005d8 <parse_training_data+0xf8>
			int value = atoi(line + j);
1000056c:	e0bffd17 	ldw	r2,-12(fp)
10000570:	e0fffe17 	ldw	r3,-8(fp)
10000574:	1885883a 	add	r2,r3,r2
10000578:	1009883a 	mov	r4,r2
1000057c:	00059fc0 	call	100059fc <atoi>
10000580:	e0bfff15 	stw	r2,-4(fp)
			if (first_elem) {
10000584:	e0bffb03 	ldbu	r2,-20(fp)
10000588:	10000926 	beq	r2,zero,100005b0 <parse_training_data+0xd0>
				insert_array(&target_vals, value);
1000058c:	e13fff17 	ldw	r4,-4(fp)
10000590:	00039a00 	call	100039a0 <__floatsisf>
10000594:	1007883a 	mov	r3,r2
10000598:	180b883a 	mov	r5,r3
1000059c:	010403b4 	movhi	r4,4110
100005a0:	210ac904 	addi	r4,r4,11044
100005a4:	0000dbc0 	call	10000dbc <insert_array>
				first_elem = 0;
100005a8:	e03ffb05 	stb	zero,-20(fp)
100005ac:	00000706 	br	100005cc <parse_training_data+0xec>
			} else {
				insert_array(&attr_vals, value);
100005b0:	e13fff17 	ldw	r4,-4(fp)
100005b4:	00039a00 	call	100039a0 <__floatsisf>
100005b8:	1007883a 	mov	r3,r2
100005bc:	180b883a 	mov	r5,r3
100005c0:	010403b4 	movhi	r4,4110
100005c4:	210acc04 	addi	r4,r4,11056
100005c8:	0000dbc0 	call	10000dbc <insert_array>
	for(int i = 0; i < 7000; i++) {
		line = training_data[i];
		first_elem = 1;

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
100005cc:	e0bffd17 	ldw	r2,-12(fp)
100005d0:	10800084 	addi	r2,r2,2
100005d4:	e0bffd15 	stw	r2,-12(fp)
100005d8:	e0bffd17 	ldw	r2,-12(fp)
100005dc:	10803250 	cmplti	r2,r2,201
100005e0:	103fe21e 	bne	r2,zero,1000056c <__alt_data_end+0xf800056c>
	total_runs 		= 0;
	num_incorrect 	= 0;

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 7000; i++) {
100005e4:	e0bffc17 	ldw	r2,-16(fp)
100005e8:	10800044 	addi	r2,r2,1
100005ec:	e0bffc15 	stw	r2,-16(fp)
100005f0:	e0bffc17 	ldw	r2,-16(fp)
100005f4:	1086d610 	cmplti	r2,r2,7000
100005f8:	103fd01e 	bne	r2,zero,1000053c <__alt_data_end+0xf800053c>
				insert_array(&attr_vals, value);
			}
		}
	}

	return 0;
100005fc:	0005883a 	mov	r2,zero
}
10000600:	e037883a 	mov	sp,fp
10000604:	dfc00117 	ldw	ra,4(sp)
10000608:	df000017 	ldw	fp,0(sp)
1000060c:	dec00204 	addi	sp,sp,8
10000610:	f800283a 	ret

10000614 <parse_testing_data>:

int parse_testing_data() {
10000614:	defff904 	addi	sp,sp,-28
10000618:	dfc00615 	stw	ra,24(sp)
1000061c:	df000515 	stw	fp,20(sp)
10000620:	df000504 	addi	fp,sp,20
	// reset dataset
	init_array(&target_vals, INITIAL_ARR_SIZE);
10000624:	0150b234 	movhi	r5,17096
10000628:	010403b4 	movhi	r4,4110
1000062c:	210ac904 	addi	r4,r4,11044
10000630:	0000d480 	call	10000d48 <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
10000634:	0150b234 	movhi	r5,17096
10000638:	010403b4 	movhi	r4,4110
1000063c:	210acc04 	addi	r4,r4,11056
10000640:	0000d480 	call	10000d48 <init_array>
	curr_point 		= 0;
10000644:	008403b4 	movhi	r2,4110
10000648:	108a9504 	addi	r2,r2,10836
1000064c:	10000015 	stw	zero,0(r2)
	total_runs 		= 0;
10000650:	008403b4 	movhi	r2,4110
10000654:	108a9304 	addi	r2,r2,10828
10000658:	10000015 	stw	zero,0(r2)
	num_incorrect 	= 0;
1000065c:	008403b4 	movhi	r2,4110
10000660:	108a9404 	addi	r2,r2,10832
10000664:	10000015 	stw	zero,0(r2)

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 1000; i++) {
10000668:	e03ffc15 	stw	zero,-16(fp)
1000066c:	00002d06 	br	10000724 <parse_testing_data+0x110>
		line = testing_data[i];
10000670:	00840374 	movhi	r2,4109
10000674:	10999f04 	addi	r2,r2,26236
10000678:	e0fffc17 	ldw	r3,-16(fp)
1000067c:	18c7883a 	add	r3,r3,r3
10000680:	18c7883a 	add	r3,r3,r3
10000684:	10c5883a 	add	r2,r2,r3
10000688:	10800017 	ldw	r2,0(r2)
1000068c:	e0bffe15 	stw	r2,-8(fp)
		first_elem = 1;
10000690:	00800044 	movi	r2,1
10000694:	e0bffb05 	stb	r2,-20(fp)

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000698:	e03ffd15 	stw	zero,-12(fp)
1000069c:	00001b06 	br	1000070c <parse_testing_data+0xf8>
			int value = atoi(line + j);
100006a0:	e0bffd17 	ldw	r2,-12(fp)
100006a4:	e0fffe17 	ldw	r3,-8(fp)
100006a8:	1885883a 	add	r2,r3,r2
100006ac:	1009883a 	mov	r4,r2
100006b0:	00059fc0 	call	100059fc <atoi>
100006b4:	e0bfff15 	stw	r2,-4(fp)
			if (first_elem) {
100006b8:	e0bffb03 	ldbu	r2,-20(fp)
100006bc:	10000926 	beq	r2,zero,100006e4 <parse_testing_data+0xd0>
				insert_array(&target_vals, value);
100006c0:	e13fff17 	ldw	r4,-4(fp)
100006c4:	00039a00 	call	100039a0 <__floatsisf>
100006c8:	1007883a 	mov	r3,r2
100006cc:	180b883a 	mov	r5,r3
100006d0:	010403b4 	movhi	r4,4110
100006d4:	210ac904 	addi	r4,r4,11044
100006d8:	0000dbc0 	call	10000dbc <insert_array>
				first_elem = 0;
100006dc:	e03ffb05 	stb	zero,-20(fp)
100006e0:	00000706 	br	10000700 <parse_testing_data+0xec>
			} else {
				insert_array(&attr_vals, value);
100006e4:	e13fff17 	ldw	r4,-4(fp)
100006e8:	00039a00 	call	100039a0 <__floatsisf>
100006ec:	1007883a 	mov	r3,r2
100006f0:	180b883a 	mov	r5,r3
100006f4:	010403b4 	movhi	r4,4110
100006f8:	210acc04 	addi	r4,r4,11056
100006fc:	0000dbc0 	call	10000dbc <insert_array>
	for(int i = 0; i < 1000; i++) {
		line = testing_data[i];
		first_elem = 1;

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000700:	e0bffd17 	ldw	r2,-12(fp)
10000704:	10800084 	addi	r2,r2,2
10000708:	e0bffd15 	stw	r2,-12(fp)
1000070c:	e0bffd17 	ldw	r2,-12(fp)
10000710:	10803250 	cmplti	r2,r2,201
10000714:	103fe21e 	bne	r2,zero,100006a0 <__alt_data_end+0xf80006a0>
	total_runs 		= 0;
	num_incorrect 	= 0;

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 1000; i++) {
10000718:	e0bffc17 	ldw	r2,-16(fp)
1000071c:	10800044 	addi	r2,r2,1
10000720:	e0bffc15 	stw	r2,-16(fp)
10000724:	e0bffc17 	ldw	r2,-16(fp)
10000728:	1080fa10 	cmplti	r2,r2,1000
1000072c:	103fd01e 	bne	r2,zero,10000670 <__alt_data_end+0xf8000670>
				insert_array(&attr_vals, value);
			}
		}
	}

	return 0;
10000730:	0005883a 	mov	r2,zero
}
10000734:	e037883a 	mov	sp,fp
10000738:	dfc00117 	ldw	ra,4(sp)
1000073c:	df000017 	ldw	fp,0(sp)
10000740:	dec00204 	addi	sp,sp,8
10000744:	f800283a 	ret

10000748 <main>:

int main() {
10000748:	defff804 	addi	sp,sp,-32
1000074c:	dfc00715 	stw	ra,28(sp)
10000750:	df000615 	stw	fp,24(sp)
10000754:	dc000515 	stw	r16,20(sp)
10000758:	df000604 	addi	fp,sp,24
	printf("Initializing neural network...\n");
1000075c:	01040374 	movhi	r4,4109
10000760:	213c5f04 	addi	r4,r4,-3716
10000764:	000739c0 	call	1000739c <puts>
	*to_hw_sig = 1;
10000768:	d0a00417 	ldw	r2,-32752(gp)
1000076c:	00c00044 	movi	r3,1
10000770:	10c00005 	stb	r3,0(r2)
	srand48(time(NULL));
10000774:	0009883a 	mov	r4,zero
10000778:	0008c840 	call	10008c84 <time>
1000077c:	1009883a 	mov	r4,r2
10000780:	00088100 	call	10008810 <srand48>

	init_array(&target_vals, INITIAL_ARR_SIZE);
10000784:	0150b234 	movhi	r5,17096
10000788:	010403b4 	movhi	r4,4110
1000078c:	210ac904 	addi	r4,r4,11044
10000790:	0000d480 	call	10000d48 <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
10000794:	0150b234 	movhi	r5,17096
10000798:	010403b4 	movhi	r4,4110
1000079c:	210acc04 	addi	r4,r4,11056
100007a0:	0000d480 	call	10000d48 <init_array>

	init_layer_1(&layer_1, &attr_vals, curr_point, LAYER_1_NUM_NODES, 1);
100007a4:	008403b4 	movhi	r2,4110
100007a8:	108a9504 	addi	r2,r2,10836
100007ac:	10800017 	ldw	r2,0(r2)
100007b0:	1009883a 	mov	r4,r2
100007b4:	0003ac40 	call	10003ac4 <__floatunsisf>
100007b8:	1007883a 	mov	r3,r2
100007bc:	008fe034 	movhi	r2,16256
100007c0:	d8800015 	stw	r2,0(sp)
100007c4:	01d03034 	movhi	r7,16576
100007c8:	180d883a 	mov	r6,r3
100007cc:	014403b4 	movhi	r5,4110
100007d0:	294acc04 	addi	r5,r5,11056
100007d4:	010403b4 	movhi	r4,4110
100007d8:	210ac004 	addi	r4,r4,11008
100007dc:	00012800 	call	10001280 <init_layer_1>
	init_layer_2(&layer_2, layer_1.layer_out, curr_point, 1, 2, LAYER_1_NUM_NODES);
100007e0:	008403b4 	movhi	r2,4110
100007e4:	108ac004 	addi	r2,r2,11008
100007e8:	14000717 	ldw	r16,28(r2)
100007ec:	008403b4 	movhi	r2,4110
100007f0:	108a9504 	addi	r2,r2,10836
100007f4:	10800017 	ldw	r2,0(r2)
100007f8:	1009883a 	mov	r4,r2
100007fc:	0003ac40 	call	10003ac4 <__floatunsisf>
10000800:	1007883a 	mov	r3,r2
10000804:	00903034 	movhi	r2,16576
10000808:	d8800115 	stw	r2,4(sp)
1000080c:	00900034 	movhi	r2,16384
10000810:	d8800015 	stw	r2,0(sp)
10000814:	01cfe034 	movhi	r7,16256
10000818:	180d883a 	mov	r6,r3
1000081c:	800b883a 	mov	r5,r16
10000820:	010403b4 	movhi	r4,4110
10000824:	210ab604 	addi	r4,r4,10968
10000828:	0001ad80 	call	10001ad8 <init_layer_2>

	printf("Parsing training dataset...\n");
1000082c:	01040374 	movhi	r4,4109
10000830:	213c6704 	addi	r4,r4,-3684
10000834:	000739c0 	call	1000739c <puts>
	if(parse_training_data() == -1) {
10000838:	00004e00 	call	100004e0 <parse_training_data>
1000083c:	10bfffd8 	cmpnei	r2,r2,-1
10000840:	1000051e 	bne	r2,zero,10000858 <main+0x110>
		printf("Failed to parse dataset\n");
10000844:	01040374 	movhi	r4,4109
10000848:	213c6e04 	addi	r4,r4,-3656
1000084c:	000739c0 	call	1000739c <puts>
		return -1;
10000850:	00bfffc4 	movi	r2,-1
10000854:	00013606 	br	10000d30 <main+0x5e8>
	}

	printf("Starting training...\n");
10000858:	01040374 	movhi	r4,4109
1000085c:	213c7404 	addi	r4,r4,-3632
10000860:	000739c0 	call	1000739c <puts>
	float total_err = 0;
10000864:	e03ffc15 	stw	zero,-16(fp)
	while(1) {
		// set up the first layer and evaluate it
		layer_1.curr_point = curr_point;
10000868:	008403b4 	movhi	r2,4110
1000086c:	108a9504 	addi	r2,r2,10836
10000870:	10800017 	ldw	r2,0(r2)
10000874:	1009883a 	mov	r4,r2
10000878:	0003ac40 	call	10003ac4 <__floatunsisf>
1000087c:	1007883a 	mov	r3,r2
10000880:	008403b4 	movhi	r2,4110
10000884:	108ac004 	addi	r2,r2,11008
10000888:	10c00115 	stw	r3,4(r2)
		eval_layer_1(&layer_1);
1000088c:	010403b4 	movhi	r4,4110
10000890:	210ac004 	addi	r4,r4,11008
10000894:	00015340 	call	10001534 <eval_layer_1>

		// set up the second layer and evaluate it
		layer_2.curr_point = curr_point;
10000898:	008403b4 	movhi	r2,4110
1000089c:	108a9504 	addi	r2,r2,10836
100008a0:	10800017 	ldw	r2,0(r2)
100008a4:	1009883a 	mov	r4,r2
100008a8:	0003ac40 	call	10003ac4 <__floatunsisf>
100008ac:	1007883a 	mov	r3,r2
100008b0:	008403b4 	movhi	r2,4110
100008b4:	108ab604 	addi	r2,r2,10968
100008b8:	10c00115 	stw	r3,4(r2)
		eval_layer_2(&layer_2);
100008bc:	010403b4 	movhi	r4,4110
100008c0:	210ab604 	addi	r4,r4,10968
100008c4:	0001dcc0 	call	10001dcc <eval_layer_2>

		backprop_layer_2(&layer_2, get_array_value(&target_vals, curr_point));
100008c8:	008403b4 	movhi	r2,4110
100008cc:	108a9504 	addi	r2,r2,10836
100008d0:	10800017 	ldw	r2,0(r2)
100008d4:	100b883a 	mov	r5,r2
100008d8:	010403b4 	movhi	r4,4110
100008dc:	210ac904 	addi	r4,r4,11044
100008e0:	0000eb40 	call	10000eb4 <get_array_value>
100008e4:	1007883a 	mov	r3,r2
100008e8:	180b883a 	mov	r5,r3
100008ec:	010403b4 	movhi	r4,4110
100008f0:	210ab604 	addi	r4,r4,10968
100008f4:	0001ee80 	call	10001ee8 <backprop_layer_2>
		backprop_layer_1(&layer_1, &layer_2);
100008f8:	014403b4 	movhi	r5,4110
100008fc:	294ab604 	addi	r5,r5,10968
10000900:	010403b4 	movhi	r4,4110
10000904:	210ac004 	addi	r4,r4,11008
10000908:	00016700 	call	10001670 <backprop_layer_1>

		float curr_err = err(layer_2.layer_out[0], get_array_value(&target_vals, curr_point));
1000090c:	008403b4 	movhi	r2,4110
10000910:	108ab604 	addi	r2,r2,10968
10000914:	10800817 	ldw	r2,32(r2)
10000918:	14000017 	ldw	r16,0(r2)
1000091c:	008403b4 	movhi	r2,4110
10000920:	108a9504 	addi	r2,r2,10836
10000924:	10800017 	ldw	r2,0(r2)
10000928:	100b883a 	mov	r5,r2
1000092c:	010403b4 	movhi	r4,4110
10000930:	210ac904 	addi	r4,r4,11044
10000934:	0000eb40 	call	10000eb4 <get_array_value>
10000938:	1007883a 	mov	r3,r2
1000093c:	180b883a 	mov	r5,r3
10000940:	8009883a 	mov	r4,r16
10000944:	00002dc0 	call	100002dc <err>
10000948:	e0bffe15 	stw	r2,-8(fp)
		total_err += curr_err;
1000094c:	e17ffe17 	ldw	r5,-8(fp)
10000950:	e13ffc17 	ldw	r4,-16(fp)
10000954:	00025180 	call	10002518 <__addsf3>
10000958:	1007883a 	mov	r3,r2
1000095c:	e0fffc15 	stw	r3,-16(fp)
		if(total_runs % ITER_TO_CHECK == 0) {
10000960:	008403b4 	movhi	r2,4110
10000964:	108a9304 	addi	r2,r2,10828
10000968:	10800017 	ldw	r2,0(r2)
1000096c:	01400284 	movi	r5,10
10000970:	1009883a 	mov	r4,r2
10000974:	00024c00 	call	100024c0 <__umodsi3>
10000978:	1000401e 	bne	r2,zero,10000a7c <main+0x334>
			if((total_err / ITER_TO_CHECK) < CONVERGENCE_THRESHOLD) {
1000097c:	01504834 	movhi	r5,16672
10000980:	e13ffc17 	ldw	r4,-16(fp)
10000984:	00029e00 	call	100029e0 <__divsf3>
10000988:	1007883a 	mov	r3,r2
1000098c:	1805883a 	mov	r2,r3
10000990:	1009883a 	mov	r4,r2
10000994:	00056b80 	call	100056b8 <__extendsfdf2>
10000998:	1011883a 	mov	r8,r2
1000099c:	1813883a 	mov	r9,r3
100009a0:	0191ebb4 	movhi	r6,18350
100009a4:	31851ec4 	addi	r6,r6,5243
100009a8:	01cfe134 	movhi	r7,16260
100009ac:	39deb844 	addi	r7,r7,31457
100009b0:	4009883a 	mov	r4,r8
100009b4:	480b883a 	mov	r5,r9
100009b8:	00044600 	call	10004460 <__ledf2>
100009bc:	10001e0e 	bge	r2,zero,10000a38 <main+0x2f0>
				printf("Data has converged at the %dth run\n", total_runs);
100009c0:	008403b4 	movhi	r2,4110
100009c4:	108a9304 	addi	r2,r2,10828
100009c8:	10800017 	ldw	r2,0(r2)
100009cc:	100b883a 	mov	r5,r2
100009d0:	01040374 	movhi	r4,4109
100009d4:	213c7a04 	addi	r4,r4,-3608
100009d8:	00071780 	call	10007178 <printf>
				break;
100009dc:	0001883a 	nop
		if(curr_point >= target_vals.used) {
			curr_point = 0;
		}
	}

	printf("Done training! Press ENTER to begin testing the neural network.\n");
100009e0:	01040374 	movhi	r4,4109
100009e4:	213c8e04 	addi	r4,r4,-3528
100009e8:	000739c0 	call	1000739c <puts>
	getchar();
100009ec:	008403b4 	movhi	r2,4110
100009f0:	10a44204 	addi	r2,r2,-28408
100009f4:	10800017 	ldw	r2,0(r2)
100009f8:	10800117 	ldw	r2,4(r2)
100009fc:	1009883a 	mov	r4,r2
10000a00:	0005ef80 	call	10005ef8 <getc>

	// clean up arrays from training
	free_array(&target_vals);
10000a04:	010403b4 	movhi	r4,4110
10000a08:	210ac904 	addi	r4,r4,11044
10000a0c:	0000f140 	call	10000f14 <free_array>
	free_array(&attr_vals);
10000a10:	010403b4 	movhi	r4,4110
10000a14:	210acc04 	addi	r4,r4,11056
10000a18:	0000f140 	call	10000f14 <free_array>
	printf("Parsing testing dataset...\n");
10000a1c:	01040374 	movhi	r4,4109
10000a20:	213c9e04 	addi	r4,r4,-3464
10000a24:	000739c0 	call	1000739c <puts>
	if(parse_testing_data() == -1) {
10000a28:	00006140 	call	10000614 <parse_testing_data>
10000a2c:	10bfffd8 	cmpnei	r2,r2,-1
10000a30:	1000301e 	bne	r2,zero,10000af4 <main+0x3ac>
10000a34:	00002a06 	br	10000ae0 <main+0x398>
		if(total_runs % ITER_TO_CHECK == 0) {
			if((total_err / ITER_TO_CHECK) < CONVERGENCE_THRESHOLD) {
				printf("Data has converged at the %dth run\n", total_runs);
				break;
			}
			total_err = 0;
10000a38:	e03ffc15 	stw	zero,-16(fp)

			printf("Current iteration: %d\n", total_runs);
10000a3c:	008403b4 	movhi	r2,4110
10000a40:	108a9304 	addi	r2,r2,10828
10000a44:	10800017 	ldw	r2,0(r2)
10000a48:	100b883a 	mov	r5,r2
10000a4c:	01040374 	movhi	r4,4109
10000a50:	213c8304 	addi	r4,r4,-3572
10000a54:	00071780 	call	10007178 <printf>
			printf("Current error: %f\n\n", curr_err);
10000a58:	e13ffe17 	ldw	r4,-8(fp)
10000a5c:	00056b80 	call	100056b8 <__extendsfdf2>
10000a60:	100d883a 	mov	r6,r2
10000a64:	180f883a 	mov	r7,r3
10000a68:	300b883a 	mov	r5,r6
10000a6c:	380d883a 	mov	r6,r7
10000a70:	01040374 	movhi	r4,4109
10000a74:	213c8904 	addi	r4,r4,-3548
10000a78:	00071780 	call	10007178 <printf>
		}

		// move onto the next data entry
		total_runs++;
10000a7c:	008403b4 	movhi	r2,4110
10000a80:	108a9304 	addi	r2,r2,10828
10000a84:	10800017 	ldw	r2,0(r2)
10000a88:	10c00044 	addi	r3,r2,1
10000a8c:	008403b4 	movhi	r2,4110
10000a90:	108a9304 	addi	r2,r2,10828
10000a94:	10c00015 	stw	r3,0(r2)
		curr_point++;
10000a98:	008403b4 	movhi	r2,4110
10000a9c:	108a9504 	addi	r2,r2,10836
10000aa0:	10800017 	ldw	r2,0(r2)
10000aa4:	10c00044 	addi	r3,r2,1
10000aa8:	008403b4 	movhi	r2,4110
10000aac:	108a9504 	addi	r2,r2,10836
10000ab0:	10c00015 	stw	r3,0(r2)
		if(curr_point >= target_vals.used) {
10000ab4:	008403b4 	movhi	r2,4110
10000ab8:	108ac904 	addi	r2,r2,11044
10000abc:	10c00117 	ldw	r3,4(r2)
10000ac0:	008403b4 	movhi	r2,4110
10000ac4:	108a9504 	addi	r2,r2,10836
10000ac8:	10800017 	ldw	r2,0(r2)
10000acc:	10ff6636 	bltu	r2,r3,10000868 <__alt_data_end+0xf8000868>
			curr_point = 0;
10000ad0:	008403b4 	movhi	r2,4110
10000ad4:	108a9504 	addi	r2,r2,10836
10000ad8:	10000015 	stw	zero,0(r2)
		}
	}
10000adc:	003f6206 	br	10000868 <__alt_data_end+0xf8000868>
	// clean up arrays from training
	free_array(&target_vals);
	free_array(&attr_vals);
	printf("Parsing testing dataset...\n");
	if(parse_testing_data() == -1) {
		printf("Failed to parse dataset\n");
10000ae0:	01040374 	movhi	r4,4109
10000ae4:	213c6e04 	addi	r4,r4,-3656
10000ae8:	000739c0 	call	1000739c <puts>
		return -1;
10000aec:	00bfffc4 	movi	r2,-1
10000af0:	00008f06 	br	10000d30 <main+0x5e8>
	}

	// test here
	printf("Starting testing...\n");
10000af4:	01040374 	movhi	r4,4109
10000af8:	213ca504 	addi	r4,r4,-3436
10000afc:	000739c0 	call	1000739c <puts>
	while(curr_point < target_vals.used) {
10000b00:	00004406 	br	10000c14 <main+0x4cc>
		// set up the first layer and evaluate it
		layer_1.curr_point = curr_point;
10000b04:	008403b4 	movhi	r2,4110
10000b08:	108a9504 	addi	r2,r2,10836
10000b0c:	10800017 	ldw	r2,0(r2)
10000b10:	1009883a 	mov	r4,r2
10000b14:	0003ac40 	call	10003ac4 <__floatunsisf>
10000b18:	1007883a 	mov	r3,r2
10000b1c:	008403b4 	movhi	r2,4110
10000b20:	108ac004 	addi	r2,r2,11008
10000b24:	10c00115 	stw	r3,4(r2)
		eval_layer_1(&layer_1);
10000b28:	010403b4 	movhi	r4,4110
10000b2c:	210ac004 	addi	r4,r4,11008
10000b30:	00015340 	call	10001534 <eval_layer_1>

		// set up the second layer and evaluate it
		layer_2.curr_point = curr_point;
10000b34:	008403b4 	movhi	r2,4110
10000b38:	108a9504 	addi	r2,r2,10836
10000b3c:	10800017 	ldw	r2,0(r2)
10000b40:	1009883a 	mov	r4,r2
10000b44:	0003ac40 	call	10003ac4 <__floatunsisf>
10000b48:	1007883a 	mov	r3,r2
10000b4c:	008403b4 	movhi	r2,4110
10000b50:	108ab604 	addi	r2,r2,10968
10000b54:	10c00115 	stw	r3,4(r2)
		eval_layer_2(&layer_2);
10000b58:	010403b4 	movhi	r4,4110
10000b5c:	210ab604 	addi	r4,r4,10968
10000b60:	0001dcc0 	call	10001dcc <eval_layer_2>

		// round up or down
		float temp = 0;
10000b64:	e03ffd15 	stw	zero,-12(fp)
		if(layer_2.layer_out[0] >= 0.5) {
10000b68:	008403b4 	movhi	r2,4110
10000b6c:	108ab604 	addi	r2,r2,10968
10000b70:	10800817 	ldw	r2,32(r2)
10000b74:	10c00017 	ldw	r3,0(r2)
10000b78:	014fc034 	movhi	r5,16128
10000b7c:	1809883a 	mov	r4,r3
10000b80:	0002e980 	call	10002e98 <__gesf2>
10000b84:	10000216 	blt	r2,zero,10000b90 <main+0x448>
			temp = 1;
10000b88:	008fe034 	movhi	r2,16256
10000b8c:	e0bffd15 	stw	r2,-12(fp)
		}

		// check for validity of input
		if(temp != get_array_value(&target_vals, curr_point)) {
10000b90:	008403b4 	movhi	r2,4110
10000b94:	108a9504 	addi	r2,r2,10836
10000b98:	10800017 	ldw	r2,0(r2)
10000b9c:	100b883a 	mov	r5,r2
10000ba0:	010403b4 	movhi	r4,4110
10000ba4:	210ac904 	addi	r4,r4,11044
10000ba8:	0000eb40 	call	10000eb4 <get_array_value>
10000bac:	1007883a 	mov	r3,r2
10000bb0:	e17ffd17 	ldw	r5,-12(fp)
10000bb4:	1809883a 	mov	r4,r3
10000bb8:	0002e200 	call	10002e20 <__eqsf2>
10000bbc:	10000726 	beq	r2,zero,10000bdc <main+0x494>
			num_incorrect++;
10000bc0:	008403b4 	movhi	r2,4110
10000bc4:	108a9404 	addi	r2,r2,10832
10000bc8:	10800017 	ldw	r2,0(r2)
10000bcc:	10c00044 	addi	r3,r2,1
10000bd0:	008403b4 	movhi	r2,4110
10000bd4:	108a9404 	addi	r2,r2,10832
10000bd8:	10c00015 	stw	r3,0(r2)
		}

		// move onto the next data entry
		total_runs++;
10000bdc:	008403b4 	movhi	r2,4110
10000be0:	108a9304 	addi	r2,r2,10828
10000be4:	10800017 	ldw	r2,0(r2)
10000be8:	10c00044 	addi	r3,r2,1
10000bec:	008403b4 	movhi	r2,4110
10000bf0:	108a9304 	addi	r2,r2,10828
10000bf4:	10c00015 	stw	r3,0(r2)
		curr_point++;
10000bf8:	008403b4 	movhi	r2,4110
10000bfc:	108a9504 	addi	r2,r2,10836
10000c00:	10800017 	ldw	r2,0(r2)
10000c04:	10c00044 	addi	r3,r2,1
10000c08:	008403b4 	movhi	r2,4110
10000c0c:	108a9504 	addi	r2,r2,10836
10000c10:	10c00015 	stw	r3,0(r2)
		return -1;
	}

	// test here
	printf("Starting testing...\n");
	while(curr_point < target_vals.used) {
10000c14:	008403b4 	movhi	r2,4110
10000c18:	108ac904 	addi	r2,r2,11044
10000c1c:	10c00117 	ldw	r3,4(r2)
10000c20:	008403b4 	movhi	r2,4110
10000c24:	108a9504 	addi	r2,r2,10836
10000c28:	10800017 	ldw	r2,0(r2)
10000c2c:	10ffb536 	bltu	r2,r3,10000b04 <__alt_data_end+0xf8000b04>
		// move onto the next data entry
		total_runs++;
		curr_point++;
	}

	printf("Incorrectly classified from testing dataset: %d\n", num_incorrect);
10000c30:	008403b4 	movhi	r2,4110
10000c34:	108a9404 	addi	r2,r2,10832
10000c38:	10800017 	ldw	r2,0(r2)
10000c3c:	100b883a 	mov	r5,r2
10000c40:	01040374 	movhi	r4,4109
10000c44:	213caa04 	addi	r4,r4,-3416
10000c48:	00071780 	call	10007178 <printf>
	printf("Accuracy percentage: %0.2f%%\n", (1 - ((float) num_incorrect) / target_vals.used) * 100);
10000c4c:	008403b4 	movhi	r2,4110
10000c50:	108a9404 	addi	r2,r2,10832
10000c54:	10800017 	ldw	r2,0(r2)
10000c58:	1009883a 	mov	r4,r2
10000c5c:	0003ac40 	call	10003ac4 <__floatunsisf>
10000c60:	1021883a 	mov	r16,r2
10000c64:	008403b4 	movhi	r2,4110
10000c68:	108ac904 	addi	r2,r2,11044
10000c6c:	10800117 	ldw	r2,4(r2)
10000c70:	1009883a 	mov	r4,r2
10000c74:	0003ac40 	call	10003ac4 <__floatunsisf>
10000c78:	1007883a 	mov	r3,r2
10000c7c:	180b883a 	mov	r5,r3
10000c80:	8009883a 	mov	r4,r16
10000c84:	00029e00 	call	100029e0 <__divsf3>
10000c88:	1007883a 	mov	r3,r2
10000c8c:	1805883a 	mov	r2,r3
10000c90:	100b883a 	mov	r5,r2
10000c94:	010fe034 	movhi	r4,16256
10000c98:	000344c0 	call	1000344c <__subsf3>
10000c9c:	1007883a 	mov	r3,r2
10000ca0:	1805883a 	mov	r2,r3
10000ca4:	0150b234 	movhi	r5,17096
10000ca8:	1009883a 	mov	r4,r2
10000cac:	000301c0 	call	1000301c <__mulsf3>
10000cb0:	1007883a 	mov	r3,r2
10000cb4:	1805883a 	mov	r2,r3
10000cb8:	1009883a 	mov	r4,r2
10000cbc:	00056b80 	call	100056b8 <__extendsfdf2>
10000cc0:	100d883a 	mov	r6,r2
10000cc4:	180f883a 	mov	r7,r3
10000cc8:	300b883a 	mov	r5,r6
10000ccc:	380d883a 	mov	r6,r7
10000cd0:	01040374 	movhi	r4,4109
10000cd4:	213cb704 	addi	r4,r4,-3364
10000cd8:	00071780 	call	10007178 <printf>
	getchar();
10000cdc:	008403b4 	movhi	r2,4110
10000ce0:	10a44204 	addi	r2,r2,-28408
10000ce4:	10800017 	ldw	r2,0(r2)
10000ce8:	10800117 	ldw	r2,4(r2)
10000cec:	1009883a 	mov	r4,r2
10000cf0:	0005ef80 	call	10005ef8 <getc>

	*to_hw_sig = 0;
10000cf4:	d0a00417 	ldw	r2,-32752(gp)
10000cf8:	10000005 	stb	zero,0(r2)
	free_layer_1(&layer_1);
10000cfc:	010403b4 	movhi	r4,4110
10000d00:	210ac004 	addi	r4,r4,11008
10000d04:	000196c0 	call	1000196c <free_layer_1>
	free_layer_2(&layer_2);
10000d08:	010403b4 	movhi	r4,4110
10000d0c:	210ab604 	addi	r4,r4,10968
10000d10:	00021a00 	call	100021a0 <free_layer_2>
	free_array(&target_vals);
10000d14:	010403b4 	movhi	r4,4110
10000d18:	210ac904 	addi	r4,r4,11044
10000d1c:	0000f140 	call	10000f14 <free_array>
	free_array(&attr_vals);
10000d20:	010403b4 	movhi	r4,4110
10000d24:	210acc04 	addi	r4,r4,11056
10000d28:	0000f140 	call	10000f14 <free_array>

	return 0;
10000d2c:	0005883a 	mov	r2,zero
}
10000d30:	e6ffff04 	addi	sp,fp,-4
10000d34:	dfc00217 	ldw	ra,8(sp)
10000d38:	df000117 	ldw	fp,4(sp)
10000d3c:	dc000017 	ldw	r16,0(sp)
10000d40:	dec00304 	addi	sp,sp,12
10000d44:	f800283a 	ret

10000d48 <init_array>:
#include "types.h"

// dynamically sized array
void init_array(array_t * a, float initial_size) {
10000d48:	defffc04 	addi	sp,sp,-16
10000d4c:	dfc00315 	stw	ra,12(sp)
10000d50:	df000215 	stw	fp,8(sp)
10000d54:	df000204 	addi	fp,sp,8
10000d58:	e13ffe15 	stw	r4,-8(fp)
10000d5c:	e17fff15 	stw	r5,-4(fp)
    a->array = (float *) malloc(initial_size * sizeof(float));
10000d60:	01502034 	movhi	r5,16512
10000d64:	e13fff17 	ldw	r4,-4(fp)
10000d68:	000301c0 	call	1000301c <__mulsf3>
10000d6c:	1007883a 	mov	r3,r2
10000d70:	1805883a 	mov	r2,r3
10000d74:	1009883a 	mov	r4,r2
10000d78:	00023040 	call	10002304 <__fixunssfsi>
10000d7c:	1009883a 	mov	r4,r2
10000d80:	0005f9c0 	call	10005f9c <malloc>
10000d84:	1007883a 	mov	r3,r2
10000d88:	e0bffe17 	ldw	r2,-8(fp)
10000d8c:	10c00015 	stw	r3,0(r2)
    a->used = 0;
10000d90:	e0bffe17 	ldw	r2,-8(fp)
10000d94:	10000115 	stw	zero,4(r2)
    a->size = initial_size;
10000d98:	e0bffe17 	ldw	r2,-8(fp)
10000d9c:	e0ffff17 	ldw	r3,-4(fp)
10000da0:	10c00215 	stw	r3,8(r2)
}
10000da4:	0001883a 	nop
10000da8:	e037883a 	mov	sp,fp
10000dac:	dfc00117 	ldw	ra,4(sp)
10000db0:	df000017 	ldw	fp,0(sp)
10000db4:	dec00204 	addi	sp,sp,8
10000db8:	f800283a 	ret

10000dbc <insert_array>:

void insert_array(array_t * a, float element) {
10000dbc:	defffb04 	addi	sp,sp,-20
10000dc0:	dfc00415 	stw	ra,16(sp)
10000dc4:	df000315 	stw	fp,12(sp)
10000dc8:	dc000215 	stw	r16,8(sp)
10000dcc:	df000304 	addi	fp,sp,12
10000dd0:	e13ffd15 	stw	r4,-12(fp)
10000dd4:	e17ffe15 	stw	r5,-8(fp)
    if (a->used == a->size) {
10000dd8:	e0bffd17 	ldw	r2,-12(fp)
10000ddc:	10800117 	ldw	r2,4(r2)
10000de0:	1009883a 	mov	r4,r2
10000de4:	0003ac40 	call	10003ac4 <__floatunsisf>
10000de8:	1009883a 	mov	r4,r2
10000dec:	e0bffd17 	ldw	r2,-12(fp)
10000df0:	10c00217 	ldw	r3,8(r2)
10000df4:	180b883a 	mov	r5,r3
10000df8:	0002e200 	call	10002e20 <__eqsf2>
10000dfc:	10001a1e 	bne	r2,zero,10000e68 <insert_array+0xac>
        a->size *= 2;
10000e00:	e0fffd17 	ldw	r3,-12(fp)
10000e04:	18800217 	ldw	r2,8(r3)
10000e08:	100b883a 	mov	r5,r2
10000e0c:	1009883a 	mov	r4,r2
10000e10:	00025180 	call	10002518 <__addsf3>
10000e14:	1009883a 	mov	r4,r2
10000e18:	2007883a 	mov	r3,r4
10000e1c:	e0bffd17 	ldw	r2,-12(fp)
10000e20:	10c00215 	stw	r3,8(r2)
        a->array = (float *) realloc(a->array, a->size * sizeof(float));
10000e24:	e0bffd17 	ldw	r2,-12(fp)
10000e28:	14000017 	ldw	r16,0(r2)
10000e2c:	e0bffd17 	ldw	r2,-12(fp)
10000e30:	10c00217 	ldw	r3,8(r2)
10000e34:	01502034 	movhi	r5,16512
10000e38:	1809883a 	mov	r4,r3
10000e3c:	000301c0 	call	1000301c <__mulsf3>
10000e40:	1007883a 	mov	r3,r2
10000e44:	1805883a 	mov	r2,r3
10000e48:	1009883a 	mov	r4,r2
10000e4c:	00023040 	call	10002304 <__fixunssfsi>
10000e50:	100b883a 	mov	r5,r2
10000e54:	8009883a 	mov	r4,r16
10000e58:	00075940 	call	10007594 <realloc>
10000e5c:	1007883a 	mov	r3,r2
10000e60:	e0bffd17 	ldw	r2,-12(fp)
10000e64:	10c00015 	stw	r3,0(r2)
    }

    a->array[a->used++] = element;
10000e68:	e0bffd17 	ldw	r2,-12(fp)
10000e6c:	10c00017 	ldw	r3,0(r2)
10000e70:	e0bffd17 	ldw	r2,-12(fp)
10000e74:	10800117 	ldw	r2,4(r2)
10000e78:	11400044 	addi	r5,r2,1
10000e7c:	e13ffd17 	ldw	r4,-12(fp)
10000e80:	21400115 	stw	r5,4(r4)
10000e84:	1085883a 	add	r2,r2,r2
10000e88:	1085883a 	add	r2,r2,r2
10000e8c:	1885883a 	add	r2,r3,r2
10000e90:	e0fffe17 	ldw	r3,-8(fp)
10000e94:	10c00015 	stw	r3,0(r2)
}
10000e98:	0001883a 	nop
10000e9c:	e6ffff04 	addi	sp,fp,-4
10000ea0:	dfc00217 	ldw	ra,8(sp)
10000ea4:	df000117 	ldw	fp,4(sp)
10000ea8:	dc000017 	ldw	r16,0(sp)
10000eac:	dec00304 	addi	sp,sp,12
10000eb0:	f800283a 	ret

10000eb4 <get_array_value>:

float get_array_value(array_t * a, uint32_t idx) {
10000eb4:	defffd04 	addi	sp,sp,-12
10000eb8:	df000215 	stw	fp,8(sp)
10000ebc:	df000204 	addi	fp,sp,8
10000ec0:	e13ffe15 	stw	r4,-8(fp)
10000ec4:	e17fff15 	stw	r5,-4(fp)
    if(idx >= a->used) {
10000ec8:	e0bffe17 	ldw	r2,-8(fp)
10000ecc:	10800117 	ldw	r2,4(r2)
10000ed0:	e0ffff17 	ldw	r3,-4(fp)
10000ed4:	18800236 	bltu	r3,r2,10000ee0 <get_array_value+0x2c>
        return -1;
10000ed8:	00afe034 	movhi	r2,49024
10000edc:	00000706 	br	10000efc <get_array_value+0x48>
    } else {
        return a->array[idx];
10000ee0:	e0bffe17 	ldw	r2,-8(fp)
10000ee4:	10c00017 	ldw	r3,0(r2)
10000ee8:	e0bfff17 	ldw	r2,-4(fp)
10000eec:	1085883a 	add	r2,r2,r2
10000ef0:	1085883a 	add	r2,r2,r2
10000ef4:	1887883a 	add	r3,r3,r2
10000ef8:	18800017 	ldw	r2,0(r3)
10000efc:	1007883a 	mov	r3,r2
    }
}
10000f00:	1805883a 	mov	r2,r3
10000f04:	e037883a 	mov	sp,fp
10000f08:	df000017 	ldw	fp,0(sp)
10000f0c:	dec00104 	addi	sp,sp,4
10000f10:	f800283a 	ret

10000f14 <free_array>:

void free_array(array_t *a) {
10000f14:	defffd04 	addi	sp,sp,-12
10000f18:	dfc00215 	stw	ra,8(sp)
10000f1c:	df000115 	stw	fp,4(sp)
10000f20:	df000104 	addi	fp,sp,4
10000f24:	e13fff15 	stw	r4,-4(fp)
    free(a->array);
10000f28:	e0bfff17 	ldw	r2,-4(fp)
10000f2c:	10800017 	ldw	r2,0(r2)
10000f30:	1009883a 	mov	r4,r2
10000f34:	0005fdc0 	call	10005fdc <free>
    a->array = NULL;
10000f38:	e0bfff17 	ldw	r2,-4(fp)
10000f3c:	10000015 	stw	zero,0(r2)
    a->used = a->size = 0;
10000f40:	e0bfff17 	ldw	r2,-4(fp)
10000f44:	10000215 	stw	zero,8(r2)
10000f48:	e0bfff17 	ldw	r2,-4(fp)
10000f4c:	10000115 	stw	zero,4(r2)
}
10000f50:	0001883a 	nop
10000f54:	e037883a 	mov	sp,fp
10000f58:	dfc00117 	ldw	ra,4(sp)
10000f5c:	df000017 	ldw	fp,0(sp)
10000f60:	dec00204 	addi	sp,sp,8
10000f64:	f800283a 	ret

10000f68 <print_array>:

void print_array(array_t * a) {
10000f68:	defffc04 	addi	sp,sp,-16
10000f6c:	dfc00315 	stw	ra,12(sp)
10000f70:	df000215 	stw	fp,8(sp)
10000f74:	df000204 	addi	fp,sp,8
10000f78:	e13fff15 	stw	r4,-4(fp)
    printf("Size of array is %d\n", a->used);
10000f7c:	e0bfff17 	ldw	r2,-4(fp)
10000f80:	10800117 	ldw	r2,4(r2)
10000f84:	100b883a 	mov	r5,r2
10000f88:	01040374 	movhi	r4,4109
10000f8c:	213cbf04 	addi	r4,r4,-3332
10000f90:	00071780 	call	10007178 <printf>
    for(int i = 0; i < a->used; i++) {
10000f94:	e03ffe15 	stw	zero,-8(fp)
10000f98:	00001006 	br	10000fdc <print_array+0x74>
        printf("%d ", (uint32_t) a->array[i]);
10000f9c:	e0bfff17 	ldw	r2,-4(fp)
10000fa0:	10c00017 	ldw	r3,0(r2)
10000fa4:	e0bffe17 	ldw	r2,-8(fp)
10000fa8:	1085883a 	add	r2,r2,r2
10000fac:	1085883a 	add	r2,r2,r2
10000fb0:	1885883a 	add	r2,r3,r2
10000fb4:	10c00017 	ldw	r3,0(r2)
10000fb8:	1809883a 	mov	r4,r3
10000fbc:	00023040 	call	10002304 <__fixunssfsi>
10000fc0:	100b883a 	mov	r5,r2
10000fc4:	01040374 	movhi	r4,4109
10000fc8:	213cc504 	addi	r4,r4,-3308
10000fcc:	00071780 	call	10007178 <printf>
    a->used = a->size = 0;
}

void print_array(array_t * a) {
    printf("Size of array is %d\n", a->used);
    for(int i = 0; i < a->used; i++) {
10000fd0:	e0bffe17 	ldw	r2,-8(fp)
10000fd4:	10800044 	addi	r2,r2,1
10000fd8:	e0bffe15 	stw	r2,-8(fp)
10000fdc:	e0bfff17 	ldw	r2,-4(fp)
10000fe0:	10800117 	ldw	r2,4(r2)
10000fe4:	e0fffe17 	ldw	r3,-8(fp)
10000fe8:	18bfec36 	bltu	r3,r2,10000f9c <__alt_data_end+0xf8000f9c>
        printf("%d ", (uint32_t) a->array[i]);
    }
    printf("\n");
10000fec:	01000284 	movi	r4,10
10000ff0:	00072340 	call	10007234 <putchar>
}
10000ff4:	0001883a 	nop
10000ff8:	e037883a 	mov	sp,fp
10000ffc:	dfc00117 	ldw	ra,4(sp)
10001000:	df000017 	ldw	fp,0(sp)
10001004:	dec00204 	addi	sp,sp,8
10001008:	f800283a 	ret

1000100c <print_float_array>:

void print_float_array(float * arr, uint32_t size) {
1000100c:	defffb04 	addi	sp,sp,-20
10001010:	dfc00415 	stw	ra,16(sp)
10001014:	df000315 	stw	fp,12(sp)
10001018:	df000304 	addi	fp,sp,12
1000101c:	e13ffe15 	stw	r4,-8(fp)
10001020:	e17fff15 	stw	r5,-4(fp)
    for(int i = 0; i < size; i++) {
10001024:	e03ffd15 	stw	zero,-12(fp)
10001028:	00001306 	br	10001078 <print_float_array+0x6c>
        printf("%f ", arr[i]);
1000102c:	e0bffd17 	ldw	r2,-12(fp)
10001030:	1085883a 	add	r2,r2,r2
10001034:	1085883a 	add	r2,r2,r2
10001038:	1007883a 	mov	r3,r2
1000103c:	e0bffe17 	ldw	r2,-8(fp)
10001040:	10c5883a 	add	r2,r2,r3
10001044:	10c00017 	ldw	r3,0(r2)
10001048:	1809883a 	mov	r4,r3
1000104c:	00056b80 	call	100056b8 <__extendsfdf2>
10001050:	100d883a 	mov	r6,r2
10001054:	180f883a 	mov	r7,r3
10001058:	300b883a 	mov	r5,r6
1000105c:	380d883a 	mov	r6,r7
10001060:	01040374 	movhi	r4,4109
10001064:	213cc604 	addi	r4,r4,-3304
10001068:	00071780 	call	10007178 <printf>
    }
    printf("\n");
}

void print_float_array(float * arr, uint32_t size) {
    for(int i = 0; i < size; i++) {
1000106c:	e0bffd17 	ldw	r2,-12(fp)
10001070:	10800044 	addi	r2,r2,1
10001074:	e0bffd15 	stw	r2,-12(fp)
10001078:	e0fffd17 	ldw	r3,-12(fp)
1000107c:	e0bfff17 	ldw	r2,-4(fp)
10001080:	18bfea36 	bltu	r3,r2,1000102c <__alt_data_end+0xf800102c>
        printf("%f ", arr[i]);
    }
}
10001084:	0001883a 	nop
10001088:	e037883a 	mov	sp,fp
1000108c:	dfc00117 	ldw	ra,4(sp)
10001090:	df000017 	ldw	fp,0(sp)
10001094:	dec00204 	addi	sp,sp,8
10001098:	f800283a 	ret

1000109c <dot_product_1>:

float dot_product_1(array_t * arr1, float * arr2, float size, uint32_t curr_point) {
1000109c:	defff704 	addi	sp,sp,-36
100010a0:	dfc00815 	stw	ra,32(sp)
100010a4:	df000715 	stw	fp,28(sp)
100010a8:	dc000615 	stw	r16,24(sp)
100010ac:	df000704 	addi	fp,sp,28
100010b0:	e13ffb15 	stw	r4,-20(fp)
100010b4:	e17ffc15 	stw	r5,-16(fp)
100010b8:	e1bffd15 	stw	r6,-12(fp)
100010bc:	e1fffe15 	stw	r7,-8(fp)
    float total_sum = 0;
100010c0:	e03ff915 	stw	zero,-28(fp)
    for(int i = 0; i < size; i++) {
100010c4:	e03ffa15 	stw	zero,-24(fp)
100010c8:	00002906 	br	10001170 <dot_product_1+0xd4>
        total_sum += (get_array_value(arr1, size * curr_point + i) * arr2[i]);
100010cc:	e13ffe17 	ldw	r4,-8(fp)
100010d0:	0003ac40 	call	10003ac4 <__floatunsisf>
100010d4:	1007883a 	mov	r3,r2
100010d8:	e17ffd17 	ldw	r5,-12(fp)
100010dc:	1809883a 	mov	r4,r3
100010e0:	000301c0 	call	1000301c <__mulsf3>
100010e4:	1007883a 	mov	r3,r2
100010e8:	1821883a 	mov	r16,r3
100010ec:	e13ffa17 	ldw	r4,-24(fp)
100010f0:	00039a00 	call	100039a0 <__floatsisf>
100010f4:	1007883a 	mov	r3,r2
100010f8:	180b883a 	mov	r5,r3
100010fc:	8009883a 	mov	r4,r16
10001100:	00025180 	call	10002518 <__addsf3>
10001104:	1007883a 	mov	r3,r2
10001108:	1805883a 	mov	r2,r3
1000110c:	1009883a 	mov	r4,r2
10001110:	00023040 	call	10002304 <__fixunssfsi>
10001114:	100b883a 	mov	r5,r2
10001118:	e13ffb17 	ldw	r4,-20(fp)
1000111c:	0000eb40 	call	10000eb4 <get_array_value>
10001120:	1009883a 	mov	r4,r2
10001124:	e0bffa17 	ldw	r2,-24(fp)
10001128:	1085883a 	add	r2,r2,r2
1000112c:	1085883a 	add	r2,r2,r2
10001130:	1007883a 	mov	r3,r2
10001134:	e0bffc17 	ldw	r2,-16(fp)
10001138:	10c5883a 	add	r2,r2,r3
1000113c:	10c00017 	ldw	r3,0(r2)
10001140:	180b883a 	mov	r5,r3
10001144:	000301c0 	call	1000301c <__mulsf3>
10001148:	1007883a 	mov	r3,r2
1000114c:	1805883a 	mov	r2,r3
10001150:	100b883a 	mov	r5,r2
10001154:	e13ff917 	ldw	r4,-28(fp)
10001158:	00025180 	call	10002518 <__addsf3>
1000115c:	1007883a 	mov	r3,r2
10001160:	e0fff915 	stw	r3,-28(fp)
    }
}

float dot_product_1(array_t * arr1, float * arr2, float size, uint32_t curr_point) {
    float total_sum = 0;
    for(int i = 0; i < size; i++) {
10001164:	e0bffa17 	ldw	r2,-24(fp)
10001168:	10800044 	addi	r2,r2,1
1000116c:	e0bffa15 	stw	r2,-24(fp)
10001170:	e13ffa17 	ldw	r4,-24(fp)
10001174:	00039a00 	call	100039a0 <__floatsisf>
10001178:	1007883a 	mov	r3,r2
1000117c:	e17ffd17 	ldw	r5,-12(fp)
10001180:	1809883a 	mov	r4,r3
10001184:	0002f540 	call	10002f54 <__lesf2>
10001188:	103fd016 	blt	r2,zero,100010cc <__alt_data_end+0xf80010cc>
        total_sum += (get_array_value(arr1, size * curr_point + i) * arr2[i]);
    }

    return total_sum;
1000118c:	e0bff917 	ldw	r2,-28(fp)
10001190:	1007883a 	mov	r3,r2
}
10001194:	1805883a 	mov	r2,r3
10001198:	e6ffff04 	addi	sp,fp,-4
1000119c:	dfc00217 	ldw	ra,8(sp)
100011a0:	df000117 	ldw	fp,4(sp)
100011a4:	dc000017 	ldw	r16,0(sp)
100011a8:	dec00304 	addi	sp,sp,12
100011ac:	f800283a 	ret

100011b0 <dot_product_2>:

float dot_product_2(float * arr1, float * arr2, float size) {
100011b0:	defff904 	addi	sp,sp,-28
100011b4:	dfc00615 	stw	ra,24(sp)
100011b8:	df000515 	stw	fp,20(sp)
100011bc:	df000504 	addi	fp,sp,20
100011c0:	e13ffd15 	stw	r4,-12(fp)
100011c4:	e17ffe15 	stw	r5,-8(fp)
100011c8:	e1bfff15 	stw	r6,-4(fp)
    float total_sum = 0;
100011cc:	e03ffb15 	stw	zero,-20(fp)
    for(int i = 0; i < size; i++) {
100011d0:	e03ffc15 	stw	zero,-16(fp)
100011d4:	00001b06 	br	10001244 <dot_product_2+0x94>
        total_sum += (arr1[i] * arr2[i]);
100011d8:	e0bffc17 	ldw	r2,-16(fp)
100011dc:	1085883a 	add	r2,r2,r2
100011e0:	1085883a 	add	r2,r2,r2
100011e4:	1007883a 	mov	r3,r2
100011e8:	e0bffd17 	ldw	r2,-12(fp)
100011ec:	10c5883a 	add	r2,r2,r3
100011f0:	10c00017 	ldw	r3,0(r2)
100011f4:	e0bffc17 	ldw	r2,-16(fp)
100011f8:	1085883a 	add	r2,r2,r2
100011fc:	1085883a 	add	r2,r2,r2
10001200:	1009883a 	mov	r4,r2
10001204:	e0bffe17 	ldw	r2,-8(fp)
10001208:	1105883a 	add	r2,r2,r4
1000120c:	11000017 	ldw	r4,0(r2)
10001210:	200b883a 	mov	r5,r4
10001214:	1809883a 	mov	r4,r3
10001218:	000301c0 	call	1000301c <__mulsf3>
1000121c:	1007883a 	mov	r3,r2
10001220:	1805883a 	mov	r2,r3
10001224:	100b883a 	mov	r5,r2
10001228:	e13ffb17 	ldw	r4,-20(fp)
1000122c:	00025180 	call	10002518 <__addsf3>
10001230:	1007883a 	mov	r3,r2
10001234:	e0fffb15 	stw	r3,-20(fp)
    return total_sum;
}

float dot_product_2(float * arr1, float * arr2, float size) {
    float total_sum = 0;
    for(int i = 0; i < size; i++) {
10001238:	e0bffc17 	ldw	r2,-16(fp)
1000123c:	10800044 	addi	r2,r2,1
10001240:	e0bffc15 	stw	r2,-16(fp)
10001244:	e13ffc17 	ldw	r4,-16(fp)
10001248:	00039a00 	call	100039a0 <__floatsisf>
1000124c:	1007883a 	mov	r3,r2
10001250:	e17fff17 	ldw	r5,-4(fp)
10001254:	1809883a 	mov	r4,r3
10001258:	0002f540 	call	10002f54 <__lesf2>
1000125c:	103fde16 	blt	r2,zero,100011d8 <__alt_data_end+0xf80011d8>
        total_sum += (arr1[i] * arr2[i]);
    }

    return total_sum;
10001260:	e0bffb17 	ldw	r2,-20(fp)
10001264:	1007883a 	mov	r3,r2
}
10001268:	1805883a 	mov	r2,r3
1000126c:	e037883a 	mov	sp,fp
10001270:	dfc00117 	ldw	ra,4(sp)
10001274:	df000017 	ldw	fp,0(sp)
10001278:	dec00204 	addi	sp,sp,8
1000127c:	f800283a 	ret

10001280 <init_layer_1>:

// layers
void init_layer_1(layer_1_t * l, array_t * input_vals, float curr_point, float num_nodes, float layer_num) {
10001280:	defff504 	addi	sp,sp,-44
10001284:	dfc00a15 	stw	ra,40(sp)
10001288:	df000915 	stw	fp,36(sp)
1000128c:	dc000815 	stw	r16,32(sp)
10001290:	df000904 	addi	fp,sp,36
10001294:	e13ffb15 	stw	r4,-20(fp)
10001298:	e17ffc15 	stw	r5,-16(fp)
1000129c:	e1bffd15 	stw	r6,-12(fp)
100012a0:	e1fffe15 	stw	r7,-8(fp)
    l->input_vals = input_vals;
100012a4:	e0bffb17 	ldw	r2,-20(fp)
100012a8:	e0fffc17 	ldw	r3,-16(fp)
100012ac:	10c00015 	stw	r3,0(r2)
    l->curr_point = curr_point;
100012b0:	e0bffb17 	ldw	r2,-20(fp)
100012b4:	e0fffd17 	ldw	r3,-12(fp)
100012b8:	10c00115 	stw	r3,4(r2)
    l->num_nodes = num_nodes;
100012bc:	e0bffb17 	ldw	r2,-20(fp)
100012c0:	e0fffe17 	ldw	r3,-8(fp)
100012c4:	10c00215 	stw	r3,8(r2)
    l->layer_num = layer_num;
100012c8:	e0bffb17 	ldw	r2,-20(fp)
100012cc:	e0c00217 	ldw	r3,8(fp)
100012d0:	10c00315 	stw	r3,12(r2)

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
100012d4:	01502034 	movhi	r5,16512
100012d8:	e13ffe17 	ldw	r4,-8(fp)
100012dc:	000301c0 	call	1000301c <__mulsf3>
100012e0:	1007883a 	mov	r3,r2
100012e4:	1805883a 	mov	r2,r3
100012e8:	1009883a 	mov	r4,r2
100012ec:	00023040 	call	10002304 <__fixunssfsi>
100012f0:	1009883a 	mov	r4,r2
100012f4:	0005f9c0 	call	10005f9c <malloc>
100012f8:	1007883a 	mov	r3,r2
100012fc:	e0bffb17 	ldw	r2,-20(fp)
10001300:	10c00415 	stw	r3,16(r2)
    for(int i = 0; i < num_nodes; i++) {
10001304:	e03ff715 	stw	zero,-36(fp)
10001308:	00000c06 	br	1000133c <init_layer_1+0xbc>
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
1000130c:	e0bffb17 	ldw	r2,-20(fp)
10001310:	10c00417 	ldw	r3,16(r2)
10001314:	e0bff717 	ldw	r2,-36(fp)
10001318:	1085883a 	add	r2,r2,r2
1000131c:	1085883a 	add	r2,r2,r2
10001320:	18a1883a 	add	r16,r3,r2
10001324:	01006404 	movi	r4,400
10001328:	0005f9c0 	call	10005f9c <malloc>
1000132c:	80800015 	stw	r2,0(r16)
    l->curr_point = curr_point;
    l->num_nodes = num_nodes;
    l->layer_num = layer_num;

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001330:	e0bff717 	ldw	r2,-36(fp)
10001334:	10800044 	addi	r2,r2,1
10001338:	e0bff715 	stw	r2,-36(fp)
1000133c:	e13ff717 	ldw	r4,-36(fp)
10001340:	00039a00 	call	100039a0 <__floatsisf>
10001344:	1007883a 	mov	r3,r2
10001348:	e17ffe17 	ldw	r5,-8(fp)
1000134c:	1809883a 	mov	r4,r3
10001350:	0002f540 	call	10002f54 <__lesf2>
10001354:	103fed16 	blt	r2,zero,1000130c <__alt_data_end+0xf800130c>
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001358:	e03ff815 	stw	zero,-32(fp)
1000135c:	00001e06 	br	100013d8 <init_layer_1+0x158>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
10001360:	e03ff915 	stw	zero,-28(fp)
10001364:	00001606 	br	100013c0 <init_layer_1+0x140>
            l->weights[i][j] = drand48();
10001368:	e0bffb17 	ldw	r2,-20(fp)
1000136c:	10c00417 	ldw	r3,16(r2)
10001370:	e0bff817 	ldw	r2,-32(fp)
10001374:	1085883a 	add	r2,r2,r2
10001378:	1085883a 	add	r2,r2,r2
1000137c:	1885883a 	add	r2,r3,r2
10001380:	10c00017 	ldw	r3,0(r2)
10001384:	e0bff917 	ldw	r2,-28(fp)
10001388:	1085883a 	add	r2,r2,r2
1000138c:	1085883a 	add	r2,r2,r2
10001390:	18a1883a 	add	r16,r3,r2
10001394:	0005c740 	call	10005c74 <drand48>
10001398:	100b883a 	mov	r5,r2
1000139c:	180d883a 	mov	r6,r3
100013a0:	2809883a 	mov	r4,r5
100013a4:	300b883a 	mov	r5,r6
100013a8:	00057c80 	call	100057c8 <__truncdfsf2>
100013ac:	1007883a 	mov	r3,r2
100013b0:	80c00015 	stw	r3,0(r16)
    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100013b4:	e0bff917 	ldw	r2,-28(fp)
100013b8:	10800044 	addi	r2,r2,1
100013bc:	e0bff915 	stw	r2,-28(fp)
100013c0:	e0bff917 	ldw	r2,-28(fp)
100013c4:	10801910 	cmplti	r2,r2,100
100013c8:	103fe71e 	bne	r2,zero,10001368 <__alt_data_end+0xf8001368>

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
100013cc:	e0bff817 	ldw	r2,-32(fp)
100013d0:	10800044 	addi	r2,r2,1
100013d4:	e0bff815 	stw	r2,-32(fp)
100013d8:	e13ff817 	ldw	r4,-32(fp)
100013dc:	00039a00 	call	100039a0 <__floatsisf>
100013e0:	1007883a 	mov	r3,r2
100013e4:	e17ffe17 	ldw	r5,-8(fp)
100013e8:	1809883a 	mov	r4,r3
100013ec:	0002f540 	call	10002f54 <__lesf2>
100013f0:	103fdb16 	blt	r2,zero,10001360 <__alt_data_end+0xf8001360>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
100013f4:	e13ffe17 	ldw	r4,-8(fp)
100013f8:	00023040 	call	10002304 <__fixunssfsi>
100013fc:	01400104 	movi	r5,4
10001400:	1009883a 	mov	r4,r2
10001404:	0005a740 	call	10005a74 <calloc>
10001408:	1007883a 	mov	r3,r2
1000140c:	e0bffb17 	ldw	r2,-20(fp)
10001410:	10c00515 	stw	r3,20(r2)
    for(int i = 0; i < num_nodes; i++) {
10001414:	e03ffa15 	stw	zero,-24(fp)
10001418:	00000d06 	br	10001450 <init_layer_1+0x1d0>
        l->weight_deltas[i] = (float *) calloc(ATTRS_PER_ENTRY, sizeof(float));
1000141c:	e0bffb17 	ldw	r2,-20(fp)
10001420:	10c00517 	ldw	r3,20(r2)
10001424:	e0bffa17 	ldw	r2,-24(fp)
10001428:	1085883a 	add	r2,r2,r2
1000142c:	1085883a 	add	r2,r2,r2
10001430:	18a1883a 	add	r16,r3,r2
10001434:	01400104 	movi	r5,4
10001438:	01001904 	movi	r4,100
1000143c:	0005a740 	call	10005a74 <calloc>
10001440:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001444:	e0bffa17 	ldw	r2,-24(fp)
10001448:	10800044 	addi	r2,r2,1
1000144c:	e0bffa15 	stw	r2,-24(fp)
10001450:	e13ffa17 	ldw	r4,-24(fp)
10001454:	00039a00 	call	100039a0 <__floatsisf>
10001458:	1007883a 	mov	r3,r2
1000145c:	e17ffe17 	ldw	r5,-8(fp)
10001460:	1809883a 	mov	r4,r3
10001464:	0002f540 	call	10002f54 <__lesf2>
10001468:	103fec16 	blt	r2,zero,1000141c <__alt_data_end+0xf800141c>
        l->weight_deltas[i] = (float *) calloc(ATTRS_PER_ENTRY, sizeof(float));
    }

    l->layer_net = (float *) calloc(num_nodes, sizeof(float));
1000146c:	e13ffe17 	ldw	r4,-8(fp)
10001470:	00023040 	call	10002304 <__fixunssfsi>
10001474:	01400104 	movi	r5,4
10001478:	1009883a 	mov	r4,r2
1000147c:	0005a740 	call	10005a74 <calloc>
10001480:	1007883a 	mov	r3,r2
10001484:	e0bffb17 	ldw	r2,-20(fp)
10001488:	10c00615 	stw	r3,24(r2)
    l->layer_out = (float *) calloc(num_nodes, sizeof(float));
1000148c:	e13ffe17 	ldw	r4,-8(fp)
10001490:	00023040 	call	10002304 <__fixunssfsi>
10001494:	01400104 	movi	r5,4
10001498:	1009883a 	mov	r4,r2
1000149c:	0005a740 	call	10005a74 <calloc>
100014a0:	1007883a 	mov	r3,r2
100014a4:	e0bffb17 	ldw	r2,-20(fp)
100014a8:	10c00715 	stw	r3,28(r2)
    l->bias = (drand48() * 2) - 1;
100014ac:	0005c740 	call	10005c74 <drand48>
100014b0:	1011883a 	mov	r8,r2
100014b4:	1813883a 	mov	r9,r3
100014b8:	400d883a 	mov	r6,r8
100014bc:	480f883a 	mov	r7,r9
100014c0:	4009883a 	mov	r4,r8
100014c4:	480b883a 	mov	r5,r9
100014c8:	0003bb40 	call	10003bb4 <__adddf3>
100014cc:	1009883a 	mov	r4,r2
100014d0:	180b883a 	mov	r5,r3
100014d4:	2005883a 	mov	r2,r4
100014d8:	2807883a 	mov	r3,r5
100014dc:	000d883a 	mov	r6,zero
100014e0:	01cffc34 	movhi	r7,16368
100014e4:	1009883a 	mov	r4,r2
100014e8:	180b883a 	mov	r5,r3
100014ec:	0004dbc0 	call	10004dbc <__subdf3>
100014f0:	1009883a 	mov	r4,r2
100014f4:	180b883a 	mov	r5,r3
100014f8:	2005883a 	mov	r2,r4
100014fc:	2807883a 	mov	r3,r5
10001500:	1009883a 	mov	r4,r2
10001504:	180b883a 	mov	r5,r3
10001508:	00057c80 	call	100057c8 <__truncdfsf2>
1000150c:	1007883a 	mov	r3,r2
10001510:	e0bffb17 	ldw	r2,-20(fp)
10001514:	10c00815 	stw	r3,32(r2)
}
10001518:	0001883a 	nop
1000151c:	e6ffff04 	addi	sp,fp,-4
10001520:	dfc00217 	ldw	ra,8(sp)
10001524:	df000117 	ldw	fp,4(sp)
10001528:	dc000017 	ldw	r16,0(sp)
1000152c:	dec00304 	addi	sp,sp,12
10001530:	f800283a 	ret

10001534 <eval_layer_1>:

void eval_layer_1(layer_1_t * l) {
10001534:	defff904 	addi	sp,sp,-28
10001538:	dfc00615 	stw	ra,24(sp)
1000153c:	df000515 	stw	fp,20(sp)
10001540:	dc800415 	stw	r18,16(sp)
10001544:	dc400315 	stw	r17,12(sp)
10001548:	dc000215 	stw	r16,8(sp)
1000154c:	df000504 	addi	fp,sp,20
10001550:	e13ffc15 	stw	r4,-16(fp)
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001554:	e03ffb15 	stw	zero,-20(fp)
10001558:	00003406 	br	1000162c <eval_layer_1+0xf8>
        l->layer_net[i] = dot_product_1(l->input_vals, l->weights[i], ATTRS_PER_ENTRY, l->curr_point) + l->bias;
1000155c:	e0bffc17 	ldw	r2,-16(fp)
10001560:	10c00617 	ldw	r3,24(r2)
10001564:	e0bffb17 	ldw	r2,-20(fp)
10001568:	1085883a 	add	r2,r2,r2
1000156c:	1085883a 	add	r2,r2,r2
10001570:	18a1883a 	add	r16,r3,r2
10001574:	e0bffc17 	ldw	r2,-16(fp)
10001578:	14400017 	ldw	r17,0(r2)
1000157c:	e0bffc17 	ldw	r2,-16(fp)
10001580:	10c00417 	ldw	r3,16(r2)
10001584:	e0bffb17 	ldw	r2,-20(fp)
10001588:	1085883a 	add	r2,r2,r2
1000158c:	1085883a 	add	r2,r2,r2
10001590:	1885883a 	add	r2,r3,r2
10001594:	14800017 	ldw	r18,0(r2)
10001598:	e0bffc17 	ldw	r2,-16(fp)
1000159c:	10c00117 	ldw	r3,4(r2)
100015a0:	1809883a 	mov	r4,r3
100015a4:	00023040 	call	10002304 <__fixunssfsi>
100015a8:	100f883a 	mov	r7,r2
100015ac:	0190b234 	movhi	r6,17096
100015b0:	900b883a 	mov	r5,r18
100015b4:	8809883a 	mov	r4,r17
100015b8:	000109c0 	call	1000109c <dot_product_1>
100015bc:	1009883a 	mov	r4,r2
100015c0:	e0bffc17 	ldw	r2,-16(fp)
100015c4:	10c00817 	ldw	r3,32(r2)
100015c8:	180b883a 	mov	r5,r3
100015cc:	00025180 	call	10002518 <__addsf3>
100015d0:	1007883a 	mov	r3,r2
100015d4:	1805883a 	mov	r2,r3
100015d8:	80800015 	stw	r2,0(r16)
        l->layer_out[i] = sigmoid(l->layer_net[i]);
100015dc:	e0bffc17 	ldw	r2,-16(fp)
100015e0:	10c00717 	ldw	r3,28(r2)
100015e4:	e0bffb17 	ldw	r2,-20(fp)
100015e8:	1085883a 	add	r2,r2,r2
100015ec:	1085883a 	add	r2,r2,r2
100015f0:	18a1883a 	add	r16,r3,r2
100015f4:	e0bffc17 	ldw	r2,-16(fp)
100015f8:	10c00617 	ldw	r3,24(r2)
100015fc:	e0bffb17 	ldw	r2,-20(fp)
10001600:	1085883a 	add	r2,r2,r2
10001604:	1085883a 	add	r2,r2,r2
10001608:	1885883a 	add	r2,r3,r2
1000160c:	10c00017 	ldw	r3,0(r2)
10001610:	1809883a 	mov	r4,r3
10001614:	000026c0 	call	1000026c <sigmoid>
10001618:	1007883a 	mov	r3,r2
1000161c:	80c00015 	stw	r3,0(r16)
}

void eval_layer_1(layer_1_t * l) {
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001620:	e0bffb17 	ldw	r2,-20(fp)
10001624:	10800044 	addi	r2,r2,1
10001628:	e0bffb15 	stw	r2,-20(fp)
1000162c:	e13ffb17 	ldw	r4,-20(fp)
10001630:	00039a00 	call	100039a0 <__floatsisf>
10001634:	1009883a 	mov	r4,r2
10001638:	e0bffc17 	ldw	r2,-16(fp)
1000163c:	10c00217 	ldw	r3,8(r2)
10001640:	180b883a 	mov	r5,r3
10001644:	0002f540 	call	10002f54 <__lesf2>
10001648:	103fc416 	blt	r2,zero,1000155c <__alt_data_end+0xf800155c>
        l->layer_net[i] = dot_product_1(l->input_vals, l->weights[i], ATTRS_PER_ENTRY, l->curr_point) + l->bias;
        l->layer_out[i] = sigmoid(l->layer_net[i]);
    }

    return;
1000164c:	0001883a 	nop
}
10001650:	e6fffd04 	addi	sp,fp,-12
10001654:	dfc00417 	ldw	ra,16(sp)
10001658:	df000317 	ldw	fp,12(sp)
1000165c:	dc800217 	ldw	r18,8(sp)
10001660:	dc400117 	ldw	r17,4(sp)
10001664:	dc000017 	ldw	r16,0(sp)
10001668:	dec00504 	addi	sp,sp,20
1000166c:	f800283a 	ret

10001670 <backprop_layer_1>:

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
10001670:	defff304 	addi	sp,sp,-52
10001674:	dfc00c15 	stw	ra,48(sp)
10001678:	df000b15 	stw	fp,44(sp)
1000167c:	dd800a15 	stw	r22,40(sp)
10001680:	dd400915 	stw	r21,36(sp)
10001684:	dd000815 	stw	r20,32(sp)
10001688:	dcc00715 	stw	r19,28(sp)
1000168c:	dc800615 	stw	r18,24(sp)
10001690:	dc400515 	stw	r17,20(sp)
10001694:	dc000415 	stw	r16,16(sp)
10001698:	df000b04 	addi	fp,sp,44
1000169c:	e13ff715 	stw	r4,-36(fp)
100016a0:	e17ff815 	stw	r5,-32(fp)
    for(int i = 0; i < l->num_nodes; i++) {
100016a4:	e03ff515 	stw	zero,-44(fp)
100016a8:	00009b06 	br	10001918 <backprop_layer_1+0x2a8>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100016ac:	e03ff615 	stw	zero,-40(fp)
100016b0:	00009306 	br	10001900 <backprop_layer_1+0x290>
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * other->weight_deltas[0][i] * get_array_value(l->input_vals, (l->curr_point * ATTRS_PER_ENTRY + j)) * other->weights[0][i] * inv_sigmoid(l->layer_out[i]));
100016b4:	e0bff717 	ldw	r2,-36(fp)
100016b8:	10c00417 	ldw	r3,16(r2)
100016bc:	e0bff517 	ldw	r2,-44(fp)
100016c0:	1085883a 	add	r2,r2,r2
100016c4:	1085883a 	add	r2,r2,r2
100016c8:	1885883a 	add	r2,r3,r2
100016cc:	10c00017 	ldw	r3,0(r2)
100016d0:	e0bff617 	ldw	r2,-40(fp)
100016d4:	1085883a 	add	r2,r2,r2
100016d8:	1085883a 	add	r2,r2,r2
100016dc:	18a9883a 	add	r20,r3,r2
100016e0:	e0bff717 	ldw	r2,-36(fp)
100016e4:	10c00417 	ldw	r3,16(r2)
100016e8:	e0bff517 	ldw	r2,-44(fp)
100016ec:	1085883a 	add	r2,r2,r2
100016f0:	1085883a 	add	r2,r2,r2
100016f4:	1885883a 	add	r2,r3,r2
100016f8:	10c00017 	ldw	r3,0(r2)
100016fc:	e0bff617 	ldw	r2,-40(fp)
10001700:	1085883a 	add	r2,r2,r2
10001704:	1085883a 	add	r2,r2,r2
10001708:	1885883a 	add	r2,r3,r2
1000170c:	10c00017 	ldw	r3,0(r2)
10001710:	1809883a 	mov	r4,r3
10001714:	00056b80 	call	100056b8 <__extendsfdf2>
10001718:	1021883a 	mov	r16,r2
1000171c:	1823883a 	mov	r17,r3
10001720:	e0bff817 	ldw	r2,-32(fp)
10001724:	10800617 	ldw	r2,24(r2)
10001728:	10c00017 	ldw	r3,0(r2)
1000172c:	e0bff517 	ldw	r2,-44(fp)
10001730:	1085883a 	add	r2,r2,r2
10001734:	1085883a 	add	r2,r2,r2
10001738:	1885883a 	add	r2,r3,r2
1000173c:	10c00017 	ldw	r3,0(r2)
10001740:	1809883a 	mov	r4,r3
10001744:	00056b80 	call	100056b8 <__extendsfdf2>
10001748:	1011883a 	mov	r8,r2
1000174c:	1813883a 	mov	r9,r3
10001750:	01a666b4 	movhi	r6,39322
10001754:	31a66684 	addi	r6,r6,-26214
10001758:	01cff2b4 	movhi	r7,16330
1000175c:	39e66644 	addi	r7,r7,-26215
10001760:	4009883a 	mov	r4,r8
10001764:	480b883a 	mov	r5,r9
10001768:	00045540 	call	10004554 <__muldf3>
1000176c:	1009883a 	mov	r4,r2
10001770:	180b883a 	mov	r5,r3
10001774:	2025883a 	mov	r18,r4
10001778:	2827883a 	mov	r19,r5
1000177c:	e0bff717 	ldw	r2,-36(fp)
10001780:	15400017 	ldw	r21,0(r2)
10001784:	e0bff717 	ldw	r2,-36(fp)
10001788:	10c00117 	ldw	r3,4(r2)
1000178c:	0150b234 	movhi	r5,17096
10001790:	1809883a 	mov	r4,r3
10001794:	000301c0 	call	1000301c <__mulsf3>
10001798:	1007883a 	mov	r3,r2
1000179c:	182d883a 	mov	r22,r3
100017a0:	e13ff617 	ldw	r4,-40(fp)
100017a4:	00039a00 	call	100039a0 <__floatsisf>
100017a8:	1007883a 	mov	r3,r2
100017ac:	180b883a 	mov	r5,r3
100017b0:	b009883a 	mov	r4,r22
100017b4:	00025180 	call	10002518 <__addsf3>
100017b8:	1007883a 	mov	r3,r2
100017bc:	1805883a 	mov	r2,r3
100017c0:	1009883a 	mov	r4,r2
100017c4:	00023040 	call	10002304 <__fixunssfsi>
100017c8:	100b883a 	mov	r5,r2
100017cc:	a809883a 	mov	r4,r21
100017d0:	0000eb40 	call	10000eb4 <get_array_value>
100017d4:	1007883a 	mov	r3,r2
100017d8:	1809883a 	mov	r4,r3
100017dc:	00056b80 	call	100056b8 <__extendsfdf2>
100017e0:	1009883a 	mov	r4,r2
100017e4:	180b883a 	mov	r5,r3
100017e8:	200d883a 	mov	r6,r4
100017ec:	280f883a 	mov	r7,r5
100017f0:	9009883a 	mov	r4,r18
100017f4:	980b883a 	mov	r5,r19
100017f8:	00045540 	call	10004554 <__muldf3>
100017fc:	1009883a 	mov	r4,r2
10001800:	180b883a 	mov	r5,r3
10001804:	2025883a 	mov	r18,r4
10001808:	2827883a 	mov	r19,r5
1000180c:	e0bff817 	ldw	r2,-32(fp)
10001810:	10800517 	ldw	r2,20(r2)
10001814:	10c00017 	ldw	r3,0(r2)
10001818:	e0bff517 	ldw	r2,-44(fp)
1000181c:	1085883a 	add	r2,r2,r2
10001820:	1085883a 	add	r2,r2,r2
10001824:	1885883a 	add	r2,r3,r2
10001828:	10c00017 	ldw	r3,0(r2)
1000182c:	1809883a 	mov	r4,r3
10001830:	00056b80 	call	100056b8 <__extendsfdf2>
10001834:	1009883a 	mov	r4,r2
10001838:	180b883a 	mov	r5,r3
1000183c:	200d883a 	mov	r6,r4
10001840:	280f883a 	mov	r7,r5
10001844:	9009883a 	mov	r4,r18
10001848:	980b883a 	mov	r5,r19
1000184c:	00045540 	call	10004554 <__muldf3>
10001850:	1009883a 	mov	r4,r2
10001854:	180b883a 	mov	r5,r3
10001858:	2025883a 	mov	r18,r4
1000185c:	2827883a 	mov	r19,r5
10001860:	e0bff717 	ldw	r2,-36(fp)
10001864:	10c00717 	ldw	r3,28(r2)
10001868:	e0bff517 	ldw	r2,-44(fp)
1000186c:	1085883a 	add	r2,r2,r2
10001870:	1085883a 	add	r2,r2,r2
10001874:	1885883a 	add	r2,r3,r2
10001878:	10c00017 	ldw	r3,0(r2)
1000187c:	1809883a 	mov	r4,r3
10001880:	00002a40 	call	100002a4 <inv_sigmoid>
10001884:	1007883a 	mov	r3,r2
10001888:	1809883a 	mov	r4,r3
1000188c:	00056b80 	call	100056b8 <__extendsfdf2>
10001890:	1009883a 	mov	r4,r2
10001894:	180b883a 	mov	r5,r3
10001898:	200d883a 	mov	r6,r4
1000189c:	280f883a 	mov	r7,r5
100018a0:	9009883a 	mov	r4,r18
100018a4:	980b883a 	mov	r5,r19
100018a8:	00045540 	call	10004554 <__muldf3>
100018ac:	1009883a 	mov	r4,r2
100018b0:	180b883a 	mov	r5,r3
100018b4:	2005883a 	mov	r2,r4
100018b8:	2807883a 	mov	r3,r5
100018bc:	100d883a 	mov	r6,r2
100018c0:	180f883a 	mov	r7,r3
100018c4:	8009883a 	mov	r4,r16
100018c8:	880b883a 	mov	r5,r17
100018cc:	0004dbc0 	call	10004dbc <__subdf3>
100018d0:	1009883a 	mov	r4,r2
100018d4:	180b883a 	mov	r5,r3
100018d8:	2005883a 	mov	r2,r4
100018dc:	2807883a 	mov	r3,r5
100018e0:	1009883a 	mov	r4,r2
100018e4:	180b883a 	mov	r5,r3
100018e8:	00057c80 	call	100057c8 <__truncdfsf2>
100018ec:	1007883a 	mov	r3,r2
100018f0:	a0c00015 	stw	r3,0(r20)
    return;
}

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
    for(int i = 0; i < l->num_nodes; i++) {
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100018f4:	e0bff617 	ldw	r2,-40(fp)
100018f8:	10800044 	addi	r2,r2,1
100018fc:	e0bff615 	stw	r2,-40(fp)
10001900:	e0bff617 	ldw	r2,-40(fp)
10001904:	10801910 	cmplti	r2,r2,100
10001908:	103f6a1e 	bne	r2,zero,100016b4 <__alt_data_end+0xf80016b4>

    return;
}

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
    for(int i = 0; i < l->num_nodes; i++) {
1000190c:	e0bff517 	ldw	r2,-44(fp)
10001910:	10800044 	addi	r2,r2,1
10001914:	e0bff515 	stw	r2,-44(fp)
10001918:	e13ff517 	ldw	r4,-44(fp)
1000191c:	00039a00 	call	100039a0 <__floatsisf>
10001920:	1009883a 	mov	r4,r2
10001924:	e0bff717 	ldw	r2,-36(fp)
10001928:	10c00217 	ldw	r3,8(r2)
1000192c:	180b883a 	mov	r5,r3
10001930:	0002f540 	call	10002f54 <__lesf2>
10001934:	103f5d16 	blt	r2,zero,100016ac <__alt_data_end+0xf80016ac>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * other->weight_deltas[0][i] * get_array_value(l->input_vals, (l->curr_point * ATTRS_PER_ENTRY + j)) * other->weights[0][i] * inv_sigmoid(l->layer_out[i]));
        }
    }
    return;
10001938:	0001883a 	nop
}
1000193c:	e6fff904 	addi	sp,fp,-28
10001940:	dfc00817 	ldw	ra,32(sp)
10001944:	df000717 	ldw	fp,28(sp)
10001948:	dd800617 	ldw	r22,24(sp)
1000194c:	dd400517 	ldw	r21,20(sp)
10001950:	dd000417 	ldw	r20,16(sp)
10001954:	dcc00317 	ldw	r19,12(sp)
10001958:	dc800217 	ldw	r18,8(sp)
1000195c:	dc400117 	ldw	r17,4(sp)
10001960:	dc000017 	ldw	r16,0(sp)
10001964:	dec00904 	addi	sp,sp,36
10001968:	f800283a 	ret

1000196c <free_layer_1>:

void free_layer_1(layer_1_t * l) {
1000196c:	defffb04 	addi	sp,sp,-20
10001970:	dfc00415 	stw	ra,16(sp)
10001974:	df000315 	stw	fp,12(sp)
10001978:	df000304 	addi	fp,sp,12
1000197c:	e13fff15 	stw	r4,-4(fp)
    free_array(l->input_vals);
10001980:	e0bfff17 	ldw	r2,-4(fp)
10001984:	10800017 	ldw	r2,0(r2)
10001988:	1009883a 	mov	r4,r2
1000198c:	0000f140 	call	10000f14 <free_array>

    for(int i = 0; i < l->num_nodes; i++) {
10001990:	e03ffd15 	stw	zero,-12(fp)
10001994:	00000c06 	br	100019c8 <free_layer_1+0x5c>
        free(l->weights[i]);
10001998:	e0bfff17 	ldw	r2,-4(fp)
1000199c:	10c00417 	ldw	r3,16(r2)
100019a0:	e0bffd17 	ldw	r2,-12(fp)
100019a4:	1085883a 	add	r2,r2,r2
100019a8:	1085883a 	add	r2,r2,r2
100019ac:	1885883a 	add	r2,r3,r2
100019b0:	10800017 	ldw	r2,0(r2)
100019b4:	1009883a 	mov	r4,r2
100019b8:	0005fdc0 	call	10005fdc <free>
}

void free_layer_1(layer_1_t * l) {
    free_array(l->input_vals);

    for(int i = 0; i < l->num_nodes; i++) {
100019bc:	e0bffd17 	ldw	r2,-12(fp)
100019c0:	10800044 	addi	r2,r2,1
100019c4:	e0bffd15 	stw	r2,-12(fp)
100019c8:	e13ffd17 	ldw	r4,-12(fp)
100019cc:	00039a00 	call	100039a0 <__floatsisf>
100019d0:	1009883a 	mov	r4,r2
100019d4:	e0bfff17 	ldw	r2,-4(fp)
100019d8:	10c00217 	ldw	r3,8(r2)
100019dc:	180b883a 	mov	r5,r3
100019e0:	0002f540 	call	10002f54 <__lesf2>
100019e4:	103fec16 	blt	r2,zero,10001998 <__alt_data_end+0xf8001998>
        free(l->weights[i]);
    }
    free(l->weights);
100019e8:	e0bfff17 	ldw	r2,-4(fp)
100019ec:	10800417 	ldw	r2,16(r2)
100019f0:	1009883a 	mov	r4,r2
100019f4:	0005fdc0 	call	10005fdc <free>
    l->weights = NULL;
100019f8:	e0bfff17 	ldw	r2,-4(fp)
100019fc:	10000415 	stw	zero,16(r2)

    for(int i = 0; i < l->num_nodes; i++) {
10001a00:	e03ffe15 	stw	zero,-8(fp)
10001a04:	00000c06 	br	10001a38 <free_layer_1+0xcc>
        free(l->weight_deltas[i]);
10001a08:	e0bfff17 	ldw	r2,-4(fp)
10001a0c:	10c00517 	ldw	r3,20(r2)
10001a10:	e0bffe17 	ldw	r2,-8(fp)
10001a14:	1085883a 	add	r2,r2,r2
10001a18:	1085883a 	add	r2,r2,r2
10001a1c:	1885883a 	add	r2,r3,r2
10001a20:	10800017 	ldw	r2,0(r2)
10001a24:	1009883a 	mov	r4,r2
10001a28:	0005fdc0 	call	10005fdc <free>
        free(l->weights[i]);
    }
    free(l->weights);
    l->weights = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
10001a2c:	e0bffe17 	ldw	r2,-8(fp)
10001a30:	10800044 	addi	r2,r2,1
10001a34:	e0bffe15 	stw	r2,-8(fp)
10001a38:	e13ffe17 	ldw	r4,-8(fp)
10001a3c:	00039a00 	call	100039a0 <__floatsisf>
10001a40:	1009883a 	mov	r4,r2
10001a44:	e0bfff17 	ldw	r2,-4(fp)
10001a48:	10c00217 	ldw	r3,8(r2)
10001a4c:	180b883a 	mov	r5,r3
10001a50:	0002f540 	call	10002f54 <__lesf2>
10001a54:	103fec16 	blt	r2,zero,10001a08 <__alt_data_end+0xf8001a08>
        free(l->weight_deltas[i]);
    }
    free(l->weight_deltas);
10001a58:	e0bfff17 	ldw	r2,-4(fp)
10001a5c:	10800517 	ldw	r2,20(r2)
10001a60:	1009883a 	mov	r4,r2
10001a64:	0005fdc0 	call	10005fdc <free>
    l->weight_deltas = NULL;
10001a68:	e0bfff17 	ldw	r2,-4(fp)
10001a6c:	10000515 	stw	zero,20(r2)

    free(l->layer_net);
10001a70:	e0bfff17 	ldw	r2,-4(fp)
10001a74:	10800617 	ldw	r2,24(r2)
10001a78:	1009883a 	mov	r4,r2
10001a7c:	0005fdc0 	call	10005fdc <free>
    l->layer_net = NULL;
10001a80:	e0bfff17 	ldw	r2,-4(fp)
10001a84:	10000615 	stw	zero,24(r2)

    free(l->layer_out);
10001a88:	e0bfff17 	ldw	r2,-4(fp)
10001a8c:	10800717 	ldw	r2,28(r2)
10001a90:	1009883a 	mov	r4,r2
10001a94:	0005fdc0 	call	10005fdc <free>
    l->layer_out = NULL;
10001a98:	e0bfff17 	ldw	r2,-4(fp)
10001a9c:	10000715 	stw	zero,28(r2)

    l->curr_point = 0;
10001aa0:	e0bfff17 	ldw	r2,-4(fp)
10001aa4:	10000115 	stw	zero,4(r2)
    l->num_nodes = 0;
10001aa8:	e0bfff17 	ldw	r2,-4(fp)
10001aac:	10000215 	stw	zero,8(r2)
    l->layer_num = 0;
10001ab0:	e0bfff17 	ldw	r2,-4(fp)
10001ab4:	10000315 	stw	zero,12(r2)
    l->bias = 0;
10001ab8:	e0bfff17 	ldw	r2,-4(fp)
10001abc:	10000815 	stw	zero,32(r2)
}
10001ac0:	0001883a 	nop
10001ac4:	e037883a 	mov	sp,fp
10001ac8:	dfc00117 	ldw	ra,4(sp)
10001acc:	df000017 	ldw	fp,0(sp)
10001ad0:	dec00204 	addi	sp,sp,8
10001ad4:	f800283a 	ret

10001ad8 <init_layer_2>:

void init_layer_2(layer_2_t * l, float * input_vals, float curr_point, float num_nodes, float layer_num, float input_num_nodes) {
10001ad8:	defff504 	addi	sp,sp,-44
10001adc:	dfc00a15 	stw	ra,40(sp)
10001ae0:	df000915 	stw	fp,36(sp)
10001ae4:	dc000815 	stw	r16,32(sp)
10001ae8:	df000904 	addi	fp,sp,36
10001aec:	e13ffb15 	stw	r4,-20(fp)
10001af0:	e17ffc15 	stw	r5,-16(fp)
10001af4:	e1bffd15 	stw	r6,-12(fp)
10001af8:	e1fffe15 	stw	r7,-8(fp)
    l->input_vals = input_vals;
10001afc:	e0bffb17 	ldw	r2,-20(fp)
10001b00:	e0fffc17 	ldw	r3,-16(fp)
10001b04:	10c00015 	stw	r3,0(r2)
    l->curr_point = curr_point;
10001b08:	e0bffb17 	ldw	r2,-20(fp)
10001b0c:	e0fffd17 	ldw	r3,-12(fp)
10001b10:	10c00115 	stw	r3,4(r2)
    l->num_nodes = num_nodes;
10001b14:	e0bffb17 	ldw	r2,-20(fp)
10001b18:	e0fffe17 	ldw	r3,-8(fp)
10001b1c:	10c00215 	stw	r3,8(r2)
    l->layer_num = layer_num;
10001b20:	e0bffb17 	ldw	r2,-20(fp)
10001b24:	e0c00217 	ldw	r3,8(fp)
10001b28:	10c00315 	stw	r3,12(r2)
    l->input_num_nodes = input_num_nodes;
10001b2c:	e0bffb17 	ldw	r2,-20(fp)
10001b30:	e0c00317 	ldw	r3,12(fp)
10001b34:	10c00415 	stw	r3,16(r2)

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
10001b38:	01502034 	movhi	r5,16512
10001b3c:	e13ffe17 	ldw	r4,-8(fp)
10001b40:	000301c0 	call	1000301c <__mulsf3>
10001b44:	1007883a 	mov	r3,r2
10001b48:	1805883a 	mov	r2,r3
10001b4c:	1009883a 	mov	r4,r2
10001b50:	00023040 	call	10002304 <__fixunssfsi>
10001b54:	1009883a 	mov	r4,r2
10001b58:	0005f9c0 	call	10005f9c <malloc>
10001b5c:	1007883a 	mov	r3,r2
10001b60:	e0bffb17 	ldw	r2,-20(fp)
10001b64:	10c00515 	stw	r3,20(r2)
    for(int i = 0; i < num_nodes; i++) {
10001b68:	e03ff715 	stw	zero,-36(fp)
10001b6c:	00001306 	br	10001bbc <init_layer_2+0xe4>
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
10001b70:	e0bffb17 	ldw	r2,-20(fp)
10001b74:	10c00517 	ldw	r3,20(r2)
10001b78:	e0bff717 	ldw	r2,-36(fp)
10001b7c:	1085883a 	add	r2,r2,r2
10001b80:	1085883a 	add	r2,r2,r2
10001b84:	18a1883a 	add	r16,r3,r2
10001b88:	01502034 	movhi	r5,16512
10001b8c:	e1000317 	ldw	r4,12(fp)
10001b90:	000301c0 	call	1000301c <__mulsf3>
10001b94:	1007883a 	mov	r3,r2
10001b98:	1805883a 	mov	r2,r3
10001b9c:	1009883a 	mov	r4,r2
10001ba0:	00023040 	call	10002304 <__fixunssfsi>
10001ba4:	1009883a 	mov	r4,r2
10001ba8:	0005f9c0 	call	10005f9c <malloc>
10001bac:	80800015 	stw	r2,0(r16)
    l->num_nodes = num_nodes;
    l->layer_num = layer_num;
    l->input_num_nodes = input_num_nodes;

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001bb0:	e0bff717 	ldw	r2,-36(fp)
10001bb4:	10800044 	addi	r2,r2,1
10001bb8:	e0bff715 	stw	r2,-36(fp)
10001bbc:	e13ff717 	ldw	r4,-36(fp)
10001bc0:	00039a00 	call	100039a0 <__floatsisf>
10001bc4:	1007883a 	mov	r3,r2
10001bc8:	e17ffe17 	ldw	r5,-8(fp)
10001bcc:	1809883a 	mov	r4,r3
10001bd0:	0002f540 	call	10002f54 <__lesf2>
10001bd4:	103fe616 	blt	r2,zero,10001b70 <__alt_data_end+0xf8001b70>
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001bd8:	e03ff815 	stw	zero,-32(fp)
10001bdc:	00002206 	br	10001c68 <init_layer_2+0x190>
        for(int j = 0; j < input_num_nodes; j++) {
10001be0:	e03ff915 	stw	zero,-28(fp)
10001be4:	00001606 	br	10001c40 <init_layer_2+0x168>
            l->weights[i][j] = drand48();
10001be8:	e0bffb17 	ldw	r2,-20(fp)
10001bec:	10c00517 	ldw	r3,20(r2)
10001bf0:	e0bff817 	ldw	r2,-32(fp)
10001bf4:	1085883a 	add	r2,r2,r2
10001bf8:	1085883a 	add	r2,r2,r2
10001bfc:	1885883a 	add	r2,r3,r2
10001c00:	10c00017 	ldw	r3,0(r2)
10001c04:	e0bff917 	ldw	r2,-28(fp)
10001c08:	1085883a 	add	r2,r2,r2
10001c0c:	1085883a 	add	r2,r2,r2
10001c10:	18a1883a 	add	r16,r3,r2
10001c14:	0005c740 	call	10005c74 <drand48>
10001c18:	100b883a 	mov	r5,r2
10001c1c:	180d883a 	mov	r6,r3
10001c20:	2809883a 	mov	r4,r5
10001c24:	300b883a 	mov	r5,r6
10001c28:	00057c80 	call	100057c8 <__truncdfsf2>
10001c2c:	1007883a 	mov	r3,r2
10001c30:	80c00015 	stw	r3,0(r16)
    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
        for(int j = 0; j < input_num_nodes; j++) {
10001c34:	e0bff917 	ldw	r2,-28(fp)
10001c38:	10800044 	addi	r2,r2,1
10001c3c:	e0bff915 	stw	r2,-28(fp)
10001c40:	e13ff917 	ldw	r4,-28(fp)
10001c44:	00039a00 	call	100039a0 <__floatsisf>
10001c48:	1007883a 	mov	r3,r2
10001c4c:	e1400317 	ldw	r5,12(fp)
10001c50:	1809883a 	mov	r4,r3
10001c54:	0002f540 	call	10002f54 <__lesf2>
10001c58:	103fe316 	blt	r2,zero,10001be8 <__alt_data_end+0xf8001be8>

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001c5c:	e0bff817 	ldw	r2,-32(fp)
10001c60:	10800044 	addi	r2,r2,1
10001c64:	e0bff815 	stw	r2,-32(fp)
10001c68:	e13ff817 	ldw	r4,-32(fp)
10001c6c:	00039a00 	call	100039a0 <__floatsisf>
10001c70:	1007883a 	mov	r3,r2
10001c74:	e17ffe17 	ldw	r5,-8(fp)
10001c78:	1809883a 	mov	r4,r3
10001c7c:	0002f540 	call	10002f54 <__lesf2>
10001c80:	103fd716 	blt	r2,zero,10001be0 <__alt_data_end+0xf8001be0>
        for(int j = 0; j < input_num_nodes; j++) {
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
10001c84:	e13ffe17 	ldw	r4,-8(fp)
10001c88:	00023040 	call	10002304 <__fixunssfsi>
10001c8c:	01400104 	movi	r5,4
10001c90:	1009883a 	mov	r4,r2
10001c94:	0005a740 	call	10005a74 <calloc>
10001c98:	1007883a 	mov	r3,r2
10001c9c:	e0bffb17 	ldw	r2,-20(fp)
10001ca0:	10c00615 	stw	r3,24(r2)
    for(int i = 0; i < num_nodes; i++) {
10001ca4:	e03ffa15 	stw	zero,-24(fp)
10001ca8:	00000f06 	br	10001ce8 <init_layer_2+0x210>
        l->weight_deltas[i] = (float *) calloc(input_num_nodes, sizeof(float));
10001cac:	e0bffb17 	ldw	r2,-20(fp)
10001cb0:	10c00617 	ldw	r3,24(r2)
10001cb4:	e0bffa17 	ldw	r2,-24(fp)
10001cb8:	1085883a 	add	r2,r2,r2
10001cbc:	1085883a 	add	r2,r2,r2
10001cc0:	18a1883a 	add	r16,r3,r2
10001cc4:	e1000317 	ldw	r4,12(fp)
10001cc8:	00023040 	call	10002304 <__fixunssfsi>
10001ccc:	01400104 	movi	r5,4
10001cd0:	1009883a 	mov	r4,r2
10001cd4:	0005a740 	call	10005a74 <calloc>
10001cd8:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001cdc:	e0bffa17 	ldw	r2,-24(fp)
10001ce0:	10800044 	addi	r2,r2,1
10001ce4:	e0bffa15 	stw	r2,-24(fp)
10001ce8:	e13ffa17 	ldw	r4,-24(fp)
10001cec:	00039a00 	call	100039a0 <__floatsisf>
10001cf0:	1007883a 	mov	r3,r2
10001cf4:	e17ffe17 	ldw	r5,-8(fp)
10001cf8:	1809883a 	mov	r4,r3
10001cfc:	0002f540 	call	10002f54 <__lesf2>
10001d00:	103fea16 	blt	r2,zero,10001cac <__alt_data_end+0xf8001cac>
        l->weight_deltas[i] = (float *) calloc(input_num_nodes, sizeof(float));
    }

    l->layer_net = (float *) calloc(num_nodes, sizeof(float));
10001d04:	e13ffe17 	ldw	r4,-8(fp)
10001d08:	00023040 	call	10002304 <__fixunssfsi>
10001d0c:	01400104 	movi	r5,4
10001d10:	1009883a 	mov	r4,r2
10001d14:	0005a740 	call	10005a74 <calloc>
10001d18:	1007883a 	mov	r3,r2
10001d1c:	e0bffb17 	ldw	r2,-20(fp)
10001d20:	10c00715 	stw	r3,28(r2)
    l->layer_out = (float *) calloc(num_nodes, sizeof(float));
10001d24:	e13ffe17 	ldw	r4,-8(fp)
10001d28:	00023040 	call	10002304 <__fixunssfsi>
10001d2c:	01400104 	movi	r5,4
10001d30:	1009883a 	mov	r4,r2
10001d34:	0005a740 	call	10005a74 <calloc>
10001d38:	1007883a 	mov	r3,r2
10001d3c:	e0bffb17 	ldw	r2,-20(fp)
10001d40:	10c00815 	stw	r3,32(r2)
    l->bias = (drand48() * 2) - 1;
10001d44:	0005c740 	call	10005c74 <drand48>
10001d48:	1011883a 	mov	r8,r2
10001d4c:	1813883a 	mov	r9,r3
10001d50:	400d883a 	mov	r6,r8
10001d54:	480f883a 	mov	r7,r9
10001d58:	4009883a 	mov	r4,r8
10001d5c:	480b883a 	mov	r5,r9
10001d60:	0003bb40 	call	10003bb4 <__adddf3>
10001d64:	1009883a 	mov	r4,r2
10001d68:	180b883a 	mov	r5,r3
10001d6c:	2005883a 	mov	r2,r4
10001d70:	2807883a 	mov	r3,r5
10001d74:	000d883a 	mov	r6,zero
10001d78:	01cffc34 	movhi	r7,16368
10001d7c:	1009883a 	mov	r4,r2
10001d80:	180b883a 	mov	r5,r3
10001d84:	0004dbc0 	call	10004dbc <__subdf3>
10001d88:	1009883a 	mov	r4,r2
10001d8c:	180b883a 	mov	r5,r3
10001d90:	2005883a 	mov	r2,r4
10001d94:	2807883a 	mov	r3,r5
10001d98:	1009883a 	mov	r4,r2
10001d9c:	180b883a 	mov	r5,r3
10001da0:	00057c80 	call	100057c8 <__truncdfsf2>
10001da4:	1007883a 	mov	r3,r2
10001da8:	e0bffb17 	ldw	r2,-20(fp)
10001dac:	10c00915 	stw	r3,36(r2)
}
10001db0:	0001883a 	nop
10001db4:	e6ffff04 	addi	sp,fp,-4
10001db8:	dfc00217 	ldw	ra,8(sp)
10001dbc:	df000117 	ldw	fp,4(sp)
10001dc0:	dc000017 	ldw	r16,0(sp)
10001dc4:	dec00304 	addi	sp,sp,12
10001dc8:	f800283a 	ret

10001dcc <eval_layer_2>:

void eval_layer_2(layer_2_t * l) {
10001dcc:	defffb04 	addi	sp,sp,-20
10001dd0:	dfc00415 	stw	ra,16(sp)
10001dd4:	df000315 	stw	fp,12(sp)
10001dd8:	dc000215 	stw	r16,8(sp)
10001ddc:	df000304 	addi	fp,sp,12
10001de0:	e13ffe15 	stw	r4,-8(fp)
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001de4:	e03ffd15 	stw	zero,-12(fp)
10001de8:	00003006 	br	10001eac <eval_layer_2+0xe0>
        l->layer_net[i] = dot_product_2(l->input_vals, l->weights[i], l->input_num_nodes) + l->bias;
10001dec:	e0bffe17 	ldw	r2,-8(fp)
10001df0:	10c00717 	ldw	r3,28(r2)
10001df4:	e0bffd17 	ldw	r2,-12(fp)
10001df8:	1085883a 	add	r2,r2,r2
10001dfc:	1085883a 	add	r2,r2,r2
10001e00:	18a1883a 	add	r16,r3,r2
10001e04:	e0bffe17 	ldw	r2,-8(fp)
10001e08:	11000017 	ldw	r4,0(r2)
10001e0c:	e0bffe17 	ldw	r2,-8(fp)
10001e10:	10c00517 	ldw	r3,20(r2)
10001e14:	e0bffd17 	ldw	r2,-12(fp)
10001e18:	1085883a 	add	r2,r2,r2
10001e1c:	1085883a 	add	r2,r2,r2
10001e20:	1885883a 	add	r2,r3,r2
10001e24:	10c00017 	ldw	r3,0(r2)
10001e28:	e0bffe17 	ldw	r2,-8(fp)
10001e2c:	11400417 	ldw	r5,16(r2)
10001e30:	280d883a 	mov	r6,r5
10001e34:	180b883a 	mov	r5,r3
10001e38:	00011b00 	call	100011b0 <dot_product_2>
10001e3c:	1009883a 	mov	r4,r2
10001e40:	e0bffe17 	ldw	r2,-8(fp)
10001e44:	10c00917 	ldw	r3,36(r2)
10001e48:	180b883a 	mov	r5,r3
10001e4c:	00025180 	call	10002518 <__addsf3>
10001e50:	1007883a 	mov	r3,r2
10001e54:	1805883a 	mov	r2,r3
10001e58:	80800015 	stw	r2,0(r16)
        l->layer_out[i] = sigmoid(l->layer_net[i]);
10001e5c:	e0bffe17 	ldw	r2,-8(fp)
10001e60:	10c00817 	ldw	r3,32(r2)
10001e64:	e0bffd17 	ldw	r2,-12(fp)
10001e68:	1085883a 	add	r2,r2,r2
10001e6c:	1085883a 	add	r2,r2,r2
10001e70:	18a1883a 	add	r16,r3,r2
10001e74:	e0bffe17 	ldw	r2,-8(fp)
10001e78:	10c00717 	ldw	r3,28(r2)
10001e7c:	e0bffd17 	ldw	r2,-12(fp)
10001e80:	1085883a 	add	r2,r2,r2
10001e84:	1085883a 	add	r2,r2,r2
10001e88:	1885883a 	add	r2,r3,r2
10001e8c:	10c00017 	ldw	r3,0(r2)
10001e90:	1809883a 	mov	r4,r3
10001e94:	000026c0 	call	1000026c <sigmoid>
10001e98:	1007883a 	mov	r3,r2
10001e9c:	80c00015 	stw	r3,0(r16)
}

void eval_layer_2(layer_2_t * l) {
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001ea0:	e0bffd17 	ldw	r2,-12(fp)
10001ea4:	10800044 	addi	r2,r2,1
10001ea8:	e0bffd15 	stw	r2,-12(fp)
10001eac:	e13ffd17 	ldw	r4,-12(fp)
10001eb0:	00039a00 	call	100039a0 <__floatsisf>
10001eb4:	1009883a 	mov	r4,r2
10001eb8:	e0bffe17 	ldw	r2,-8(fp)
10001ebc:	10c00217 	ldw	r3,8(r2)
10001ec0:	180b883a 	mov	r5,r3
10001ec4:	0002f540 	call	10002f54 <__lesf2>
10001ec8:	103fc816 	blt	r2,zero,10001dec <__alt_data_end+0xf8001dec>
        l->layer_net[i] = dot_product_2(l->input_vals, l->weights[i], l->input_num_nodes) + l->bias;
        l->layer_out[i] = sigmoid(l->layer_net[i]);
    }

    return;
10001ecc:	0001883a 	nop
}
10001ed0:	e6ffff04 	addi	sp,fp,-4
10001ed4:	dfc00217 	ldw	ra,8(sp)
10001ed8:	df000117 	ldw	fp,4(sp)
10001edc:	dc000017 	ldw	r16,0(sp)
10001ee0:	dec00304 	addi	sp,sp,12
10001ee4:	f800283a 	ret

10001ee8 <backprop_layer_2>:

void backprop_layer_2(layer_2_t * l, float other) {
10001ee8:	defff504 	addi	sp,sp,-44
10001eec:	dfc00a15 	stw	ra,40(sp)
10001ef0:	df000915 	stw	fp,36(sp)
10001ef4:	dd000815 	stw	r20,32(sp)
10001ef8:	dcc00715 	stw	r19,28(sp)
10001efc:	dc800615 	stw	r18,24(sp)
10001f00:	dc400515 	stw	r17,20(sp)
10001f04:	dc000415 	stw	r16,16(sp)
10001f08:	df000904 	addi	fp,sp,36
10001f0c:	e13ff915 	stw	r4,-28(fp)
10001f10:	e17ffa15 	stw	r5,-24(fp)
    for(int i = 0; i < l->num_nodes; i++) {
10001f14:	e03ff715 	stw	zero,-36(fp)
10001f18:	00008e06 	br	10002154 <backprop_layer_2+0x26c>
        for(int j = 0; j < l->input_num_nodes; j++) {
10001f1c:	e03ff815 	stw	zero,-32(fp)
10001f20:	00008106 	br	10002128 <backprop_layer_2+0x240>
            l->weight_deltas[i][j] = inv_sigmoid(l->layer_out[i]) * inv_err(l->layer_out[i], other);
10001f24:	e0bff917 	ldw	r2,-28(fp)
10001f28:	10c00617 	ldw	r3,24(r2)
10001f2c:	e0bff717 	ldw	r2,-36(fp)
10001f30:	1085883a 	add	r2,r2,r2
10001f34:	1085883a 	add	r2,r2,r2
10001f38:	1885883a 	add	r2,r3,r2
10001f3c:	10c00017 	ldw	r3,0(r2)
10001f40:	e0bff817 	ldw	r2,-32(fp)
10001f44:	1085883a 	add	r2,r2,r2
10001f48:	1085883a 	add	r2,r2,r2
10001f4c:	18a1883a 	add	r16,r3,r2
10001f50:	e0bff917 	ldw	r2,-28(fp)
10001f54:	10c00817 	ldw	r3,32(r2)
10001f58:	e0bff717 	ldw	r2,-36(fp)
10001f5c:	1085883a 	add	r2,r2,r2
10001f60:	1085883a 	add	r2,r2,r2
10001f64:	1885883a 	add	r2,r3,r2
10001f68:	10c00017 	ldw	r3,0(r2)
10001f6c:	1809883a 	mov	r4,r3
10001f70:	00002a40 	call	100002a4 <inv_sigmoid>
10001f74:	1023883a 	mov	r17,r2
10001f78:	e0bff917 	ldw	r2,-28(fp)
10001f7c:	10c00817 	ldw	r3,32(r2)
10001f80:	e0bff717 	ldw	r2,-36(fp)
10001f84:	1085883a 	add	r2,r2,r2
10001f88:	1085883a 	add	r2,r2,r2
10001f8c:	1885883a 	add	r2,r3,r2
10001f90:	10c00017 	ldw	r3,0(r2)
10001f94:	e17ffa17 	ldw	r5,-24(fp)
10001f98:	1809883a 	mov	r4,r3
10001f9c:	00003640 	call	10000364 <inv_err>
10001fa0:	1007883a 	mov	r3,r2
10001fa4:	180b883a 	mov	r5,r3
10001fa8:	8809883a 	mov	r4,r17
10001fac:	000301c0 	call	1000301c <__mulsf3>
10001fb0:	1007883a 	mov	r3,r2
10001fb4:	1805883a 	mov	r2,r3
10001fb8:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * l->weight_deltas[i][j] * l->input_vals[j]);
10001fbc:	e0bff917 	ldw	r2,-28(fp)
10001fc0:	10c00517 	ldw	r3,20(r2)
10001fc4:	e0bff717 	ldw	r2,-36(fp)
10001fc8:	1085883a 	add	r2,r2,r2
10001fcc:	1085883a 	add	r2,r2,r2
10001fd0:	1885883a 	add	r2,r3,r2
10001fd4:	10c00017 	ldw	r3,0(r2)
10001fd8:	e0bff817 	ldw	r2,-32(fp)
10001fdc:	1085883a 	add	r2,r2,r2
10001fe0:	1085883a 	add	r2,r2,r2
10001fe4:	18a9883a 	add	r20,r3,r2
10001fe8:	e0bff917 	ldw	r2,-28(fp)
10001fec:	10c00517 	ldw	r3,20(r2)
10001ff0:	e0bff717 	ldw	r2,-36(fp)
10001ff4:	1085883a 	add	r2,r2,r2
10001ff8:	1085883a 	add	r2,r2,r2
10001ffc:	1885883a 	add	r2,r3,r2
10002000:	10c00017 	ldw	r3,0(r2)
10002004:	e0bff817 	ldw	r2,-32(fp)
10002008:	1085883a 	add	r2,r2,r2
1000200c:	1085883a 	add	r2,r2,r2
10002010:	1885883a 	add	r2,r3,r2
10002014:	10c00017 	ldw	r3,0(r2)
10002018:	1809883a 	mov	r4,r3
1000201c:	00056b80 	call	100056b8 <__extendsfdf2>
10002020:	1021883a 	mov	r16,r2
10002024:	1823883a 	mov	r17,r3
10002028:	e0bff917 	ldw	r2,-28(fp)
1000202c:	10c00617 	ldw	r3,24(r2)
10002030:	e0bff717 	ldw	r2,-36(fp)
10002034:	1085883a 	add	r2,r2,r2
10002038:	1085883a 	add	r2,r2,r2
1000203c:	1885883a 	add	r2,r3,r2
10002040:	10c00017 	ldw	r3,0(r2)
10002044:	e0bff817 	ldw	r2,-32(fp)
10002048:	1085883a 	add	r2,r2,r2
1000204c:	1085883a 	add	r2,r2,r2
10002050:	1885883a 	add	r2,r3,r2
10002054:	10c00017 	ldw	r3,0(r2)
10002058:	1809883a 	mov	r4,r3
1000205c:	00056b80 	call	100056b8 <__extendsfdf2>
10002060:	1011883a 	mov	r8,r2
10002064:	1813883a 	mov	r9,r3
10002068:	01a666b4 	movhi	r6,39322
1000206c:	31a66684 	addi	r6,r6,-26214
10002070:	01cff2b4 	movhi	r7,16330
10002074:	39e66644 	addi	r7,r7,-26215
10002078:	4009883a 	mov	r4,r8
1000207c:	480b883a 	mov	r5,r9
10002080:	00045540 	call	10004554 <__muldf3>
10002084:	1009883a 	mov	r4,r2
10002088:	180b883a 	mov	r5,r3
1000208c:	2025883a 	mov	r18,r4
10002090:	2827883a 	mov	r19,r5
10002094:	e0bff917 	ldw	r2,-28(fp)
10002098:	10c00017 	ldw	r3,0(r2)
1000209c:	e0bff817 	ldw	r2,-32(fp)
100020a0:	1085883a 	add	r2,r2,r2
100020a4:	1085883a 	add	r2,r2,r2
100020a8:	1885883a 	add	r2,r3,r2
100020ac:	10c00017 	ldw	r3,0(r2)
100020b0:	1809883a 	mov	r4,r3
100020b4:	00056b80 	call	100056b8 <__extendsfdf2>
100020b8:	1009883a 	mov	r4,r2
100020bc:	180b883a 	mov	r5,r3
100020c0:	200d883a 	mov	r6,r4
100020c4:	280f883a 	mov	r7,r5
100020c8:	9009883a 	mov	r4,r18
100020cc:	980b883a 	mov	r5,r19
100020d0:	00045540 	call	10004554 <__muldf3>
100020d4:	1009883a 	mov	r4,r2
100020d8:	180b883a 	mov	r5,r3
100020dc:	2005883a 	mov	r2,r4
100020e0:	2807883a 	mov	r3,r5
100020e4:	100d883a 	mov	r6,r2
100020e8:	180f883a 	mov	r7,r3
100020ec:	8009883a 	mov	r4,r16
100020f0:	880b883a 	mov	r5,r17
100020f4:	0004dbc0 	call	10004dbc <__subdf3>
100020f8:	1009883a 	mov	r4,r2
100020fc:	180b883a 	mov	r5,r3
10002100:	2005883a 	mov	r2,r4
10002104:	2807883a 	mov	r3,r5
10002108:	1009883a 	mov	r4,r2
1000210c:	180b883a 	mov	r5,r3
10002110:	00057c80 	call	100057c8 <__truncdfsf2>
10002114:	1007883a 	mov	r3,r2
10002118:	a0c00015 	stw	r3,0(r20)
    return;
}

void backprop_layer_2(layer_2_t * l, float other) {
    for(int i = 0; i < l->num_nodes; i++) {
        for(int j = 0; j < l->input_num_nodes; j++) {
1000211c:	e0bff817 	ldw	r2,-32(fp)
10002120:	10800044 	addi	r2,r2,1
10002124:	e0bff815 	stw	r2,-32(fp)
10002128:	e13ff817 	ldw	r4,-32(fp)
1000212c:	00039a00 	call	100039a0 <__floatsisf>
10002130:	1009883a 	mov	r4,r2
10002134:	e0bff917 	ldw	r2,-28(fp)
10002138:	10c00417 	ldw	r3,16(r2)
1000213c:	180b883a 	mov	r5,r3
10002140:	0002f540 	call	10002f54 <__lesf2>
10002144:	103f7716 	blt	r2,zero,10001f24 <__alt_data_end+0xf8001f24>

    return;
}

void backprop_layer_2(layer_2_t * l, float other) {
    for(int i = 0; i < l->num_nodes; i++) {
10002148:	e0bff717 	ldw	r2,-36(fp)
1000214c:	10800044 	addi	r2,r2,1
10002150:	e0bff715 	stw	r2,-36(fp)
10002154:	e13ff717 	ldw	r4,-36(fp)
10002158:	00039a00 	call	100039a0 <__floatsisf>
1000215c:	1009883a 	mov	r4,r2
10002160:	e0bff917 	ldw	r2,-28(fp)
10002164:	10c00217 	ldw	r3,8(r2)
10002168:	180b883a 	mov	r5,r3
1000216c:	0002f540 	call	10002f54 <__lesf2>
10002170:	103f6a16 	blt	r2,zero,10001f1c <__alt_data_end+0xf8001f1c>
        for(int j = 0; j < l->input_num_nodes; j++) {
            l->weight_deltas[i][j] = inv_sigmoid(l->layer_out[i]) * inv_err(l->layer_out[i], other);
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * l->weight_deltas[i][j] * l->input_vals[j]);
        }
    }
    return;
10002174:	0001883a 	nop
}
10002178:	e6fffb04 	addi	sp,fp,-20
1000217c:	dfc00617 	ldw	ra,24(sp)
10002180:	df000517 	ldw	fp,20(sp)
10002184:	dd000417 	ldw	r20,16(sp)
10002188:	dcc00317 	ldw	r19,12(sp)
1000218c:	dc800217 	ldw	r18,8(sp)
10002190:	dc400117 	ldw	r17,4(sp)
10002194:	dc000017 	ldw	r16,0(sp)
10002198:	dec00704 	addi	sp,sp,28
1000219c:	f800283a 	ret

100021a0 <free_layer_2>:

void free_layer_2(layer_2_t * l) {
100021a0:	defffb04 	addi	sp,sp,-20
100021a4:	dfc00415 	stw	ra,16(sp)
100021a8:	df000315 	stw	fp,12(sp)
100021ac:	df000304 	addi	fp,sp,12
100021b0:	e13fff15 	stw	r4,-4(fp)
    l->input_vals = NULL;
100021b4:	e0bfff17 	ldw	r2,-4(fp)
100021b8:	10000015 	stw	zero,0(r2)

    for(int i = 0; i < l->num_nodes; i++) {
100021bc:	e03ffd15 	stw	zero,-12(fp)
100021c0:	00000c06 	br	100021f4 <free_layer_2+0x54>
        free(l->weights[i]);
100021c4:	e0bfff17 	ldw	r2,-4(fp)
100021c8:	10c00517 	ldw	r3,20(r2)
100021cc:	e0bffd17 	ldw	r2,-12(fp)
100021d0:	1085883a 	add	r2,r2,r2
100021d4:	1085883a 	add	r2,r2,r2
100021d8:	1885883a 	add	r2,r3,r2
100021dc:	10800017 	ldw	r2,0(r2)
100021e0:	1009883a 	mov	r4,r2
100021e4:	0005fdc0 	call	10005fdc <free>
}

void free_layer_2(layer_2_t * l) {
    l->input_vals = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
100021e8:	e0bffd17 	ldw	r2,-12(fp)
100021ec:	10800044 	addi	r2,r2,1
100021f0:	e0bffd15 	stw	r2,-12(fp)
100021f4:	e13ffd17 	ldw	r4,-12(fp)
100021f8:	00039a00 	call	100039a0 <__floatsisf>
100021fc:	1009883a 	mov	r4,r2
10002200:	e0bfff17 	ldw	r2,-4(fp)
10002204:	10c00217 	ldw	r3,8(r2)
10002208:	180b883a 	mov	r5,r3
1000220c:	0002f540 	call	10002f54 <__lesf2>
10002210:	103fec16 	blt	r2,zero,100021c4 <__alt_data_end+0xf80021c4>
        free(l->weights[i]);
    }
    free(l->weights);
10002214:	e0bfff17 	ldw	r2,-4(fp)
10002218:	10800517 	ldw	r2,20(r2)
1000221c:	1009883a 	mov	r4,r2
10002220:	0005fdc0 	call	10005fdc <free>
    l->weights = NULL;
10002224:	e0bfff17 	ldw	r2,-4(fp)
10002228:	10000515 	stw	zero,20(r2)

    for(int i = 0; i < l->num_nodes; i++) {
1000222c:	e03ffe15 	stw	zero,-8(fp)
10002230:	00000c06 	br	10002264 <free_layer_2+0xc4>
        free(l->weight_deltas[i]);
10002234:	e0bfff17 	ldw	r2,-4(fp)
10002238:	10c00617 	ldw	r3,24(r2)
1000223c:	e0bffe17 	ldw	r2,-8(fp)
10002240:	1085883a 	add	r2,r2,r2
10002244:	1085883a 	add	r2,r2,r2
10002248:	1885883a 	add	r2,r3,r2
1000224c:	10800017 	ldw	r2,0(r2)
10002250:	1009883a 	mov	r4,r2
10002254:	0005fdc0 	call	10005fdc <free>
        free(l->weights[i]);
    }
    free(l->weights);
    l->weights = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
10002258:	e0bffe17 	ldw	r2,-8(fp)
1000225c:	10800044 	addi	r2,r2,1
10002260:	e0bffe15 	stw	r2,-8(fp)
10002264:	e13ffe17 	ldw	r4,-8(fp)
10002268:	00039a00 	call	100039a0 <__floatsisf>
1000226c:	1009883a 	mov	r4,r2
10002270:	e0bfff17 	ldw	r2,-4(fp)
10002274:	10c00217 	ldw	r3,8(r2)
10002278:	180b883a 	mov	r5,r3
1000227c:	0002f540 	call	10002f54 <__lesf2>
10002280:	103fec16 	blt	r2,zero,10002234 <__alt_data_end+0xf8002234>
        free(l->weight_deltas[i]);
    }
    free(l->weight_deltas);
10002284:	e0bfff17 	ldw	r2,-4(fp)
10002288:	10800617 	ldw	r2,24(r2)
1000228c:	1009883a 	mov	r4,r2
10002290:	0005fdc0 	call	10005fdc <free>
    l->weight_deltas = NULL;
10002294:	e0bfff17 	ldw	r2,-4(fp)
10002298:	10000615 	stw	zero,24(r2)

    free(l->layer_net);
1000229c:	e0bfff17 	ldw	r2,-4(fp)
100022a0:	10800717 	ldw	r2,28(r2)
100022a4:	1009883a 	mov	r4,r2
100022a8:	0005fdc0 	call	10005fdc <free>
    l->layer_net = NULL;
100022ac:	e0bfff17 	ldw	r2,-4(fp)
100022b0:	10000715 	stw	zero,28(r2)

    free(l->layer_out);
100022b4:	e0bfff17 	ldw	r2,-4(fp)
100022b8:	10800817 	ldw	r2,32(r2)
100022bc:	1009883a 	mov	r4,r2
100022c0:	0005fdc0 	call	10005fdc <free>
    l->layer_out = NULL;
100022c4:	e0bfff17 	ldw	r2,-4(fp)
100022c8:	10000815 	stw	zero,32(r2)

    l->curr_point = 0;
100022cc:	e0bfff17 	ldw	r2,-4(fp)
100022d0:	10000115 	stw	zero,4(r2)
    l->num_nodes = 0;
100022d4:	e0bfff17 	ldw	r2,-4(fp)
100022d8:	10000215 	stw	zero,8(r2)
    l->layer_num = 0;
100022dc:	e0bfff17 	ldw	r2,-4(fp)
100022e0:	10000315 	stw	zero,12(r2)
    l->bias = 0;
100022e4:	e0bfff17 	ldw	r2,-4(fp)
100022e8:	10000915 	stw	zero,36(r2)
100022ec:	0001883a 	nop
100022f0:	e037883a 	mov	sp,fp
100022f4:	dfc00117 	ldw	ra,4(sp)
100022f8:	df000017 	ldw	fp,0(sp)
100022fc:	dec00204 	addi	sp,sp,8
10002300:	f800283a 	ret

10002304 <__fixunssfsi>:
10002304:	defffd04 	addi	sp,sp,-12
10002308:	dc000015 	stw	r16,0(sp)
1000230c:	0413c034 	movhi	r16,20224
10002310:	800b883a 	mov	r5,r16
10002314:	dc400115 	stw	r17,4(sp)
10002318:	dfc00215 	stw	ra,8(sp)
1000231c:	2023883a 	mov	r17,r4
10002320:	0002e980 	call	10002e98 <__gesf2>
10002324:	1000070e 	bge	r2,zero,10002344 <__fixunssfsi+0x40>
10002328:	8809883a 	mov	r4,r17
1000232c:	00039300 	call	10003930 <__fixsfsi>
10002330:	dfc00217 	ldw	ra,8(sp)
10002334:	dc400117 	ldw	r17,4(sp)
10002338:	dc000017 	ldw	r16,0(sp)
1000233c:	dec00304 	addi	sp,sp,12
10002340:	f800283a 	ret
10002344:	800b883a 	mov	r5,r16
10002348:	8809883a 	mov	r4,r17
1000234c:	000344c0 	call	1000344c <__subsf3>
10002350:	1009883a 	mov	r4,r2
10002354:	00039300 	call	10003930 <__fixsfsi>
10002358:	00e00034 	movhi	r3,32768
1000235c:	10c5883a 	add	r2,r2,r3
10002360:	003ff306 	br	10002330 <__alt_data_end+0xf8002330>

10002364 <__divsi3>:
10002364:	20001b16 	blt	r4,zero,100023d4 <__divsi3+0x70>
10002368:	000f883a 	mov	r7,zero
1000236c:	28001616 	blt	r5,zero,100023c8 <__divsi3+0x64>
10002370:	200d883a 	mov	r6,r4
10002374:	29001a2e 	bgeu	r5,r4,100023e0 <__divsi3+0x7c>
10002378:	00800804 	movi	r2,32
1000237c:	00c00044 	movi	r3,1
10002380:	00000106 	br	10002388 <__divsi3+0x24>
10002384:	10000d26 	beq	r2,zero,100023bc <__divsi3+0x58>
10002388:	294b883a 	add	r5,r5,r5
1000238c:	10bfffc4 	addi	r2,r2,-1
10002390:	18c7883a 	add	r3,r3,r3
10002394:	293ffb36 	bltu	r5,r4,10002384 <__alt_data_end+0xf8002384>
10002398:	0005883a 	mov	r2,zero
1000239c:	18000726 	beq	r3,zero,100023bc <__divsi3+0x58>
100023a0:	0005883a 	mov	r2,zero
100023a4:	31400236 	bltu	r6,r5,100023b0 <__divsi3+0x4c>
100023a8:	314dc83a 	sub	r6,r6,r5
100023ac:	10c4b03a 	or	r2,r2,r3
100023b0:	1806d07a 	srli	r3,r3,1
100023b4:	280ad07a 	srli	r5,r5,1
100023b8:	183ffa1e 	bne	r3,zero,100023a4 <__alt_data_end+0xf80023a4>
100023bc:	38000126 	beq	r7,zero,100023c4 <__divsi3+0x60>
100023c0:	0085c83a 	sub	r2,zero,r2
100023c4:	f800283a 	ret
100023c8:	014bc83a 	sub	r5,zero,r5
100023cc:	39c0005c 	xori	r7,r7,1
100023d0:	003fe706 	br	10002370 <__alt_data_end+0xf8002370>
100023d4:	0109c83a 	sub	r4,zero,r4
100023d8:	01c00044 	movi	r7,1
100023dc:	003fe306 	br	1000236c <__alt_data_end+0xf800236c>
100023e0:	00c00044 	movi	r3,1
100023e4:	003fee06 	br	100023a0 <__alt_data_end+0xf80023a0>

100023e8 <__modsi3>:
100023e8:	20001716 	blt	r4,zero,10002448 <__modsi3+0x60>
100023ec:	000f883a 	mov	r7,zero
100023f0:	2005883a 	mov	r2,r4
100023f4:	28001216 	blt	r5,zero,10002440 <__modsi3+0x58>
100023f8:	2900162e 	bgeu	r5,r4,10002454 <__modsi3+0x6c>
100023fc:	01800804 	movi	r6,32
10002400:	00c00044 	movi	r3,1
10002404:	00000106 	br	1000240c <__modsi3+0x24>
10002408:	30000a26 	beq	r6,zero,10002434 <__modsi3+0x4c>
1000240c:	294b883a 	add	r5,r5,r5
10002410:	31bfffc4 	addi	r6,r6,-1
10002414:	18c7883a 	add	r3,r3,r3
10002418:	293ffb36 	bltu	r5,r4,10002408 <__alt_data_end+0xf8002408>
1000241c:	18000526 	beq	r3,zero,10002434 <__modsi3+0x4c>
10002420:	1806d07a 	srli	r3,r3,1
10002424:	11400136 	bltu	r2,r5,1000242c <__modsi3+0x44>
10002428:	1145c83a 	sub	r2,r2,r5
1000242c:	280ad07a 	srli	r5,r5,1
10002430:	183ffb1e 	bne	r3,zero,10002420 <__alt_data_end+0xf8002420>
10002434:	38000126 	beq	r7,zero,1000243c <__modsi3+0x54>
10002438:	0085c83a 	sub	r2,zero,r2
1000243c:	f800283a 	ret
10002440:	014bc83a 	sub	r5,zero,r5
10002444:	003fec06 	br	100023f8 <__alt_data_end+0xf80023f8>
10002448:	0109c83a 	sub	r4,zero,r4
1000244c:	01c00044 	movi	r7,1
10002450:	003fe706 	br	100023f0 <__alt_data_end+0xf80023f0>
10002454:	00c00044 	movi	r3,1
10002458:	003ff106 	br	10002420 <__alt_data_end+0xf8002420>

1000245c <__udivsi3>:
1000245c:	200d883a 	mov	r6,r4
10002460:	2900152e 	bgeu	r5,r4,100024b8 <__udivsi3+0x5c>
10002464:	28001416 	blt	r5,zero,100024b8 <__udivsi3+0x5c>
10002468:	00800804 	movi	r2,32
1000246c:	00c00044 	movi	r3,1
10002470:	00000206 	br	1000247c <__udivsi3+0x20>
10002474:	10000e26 	beq	r2,zero,100024b0 <__udivsi3+0x54>
10002478:	28000516 	blt	r5,zero,10002490 <__udivsi3+0x34>
1000247c:	294b883a 	add	r5,r5,r5
10002480:	10bfffc4 	addi	r2,r2,-1
10002484:	18c7883a 	add	r3,r3,r3
10002488:	293ffa36 	bltu	r5,r4,10002474 <__alt_data_end+0xf8002474>
1000248c:	18000826 	beq	r3,zero,100024b0 <__udivsi3+0x54>
10002490:	0005883a 	mov	r2,zero
10002494:	31400236 	bltu	r6,r5,100024a0 <__udivsi3+0x44>
10002498:	314dc83a 	sub	r6,r6,r5
1000249c:	10c4b03a 	or	r2,r2,r3
100024a0:	1806d07a 	srli	r3,r3,1
100024a4:	280ad07a 	srli	r5,r5,1
100024a8:	183ffa1e 	bne	r3,zero,10002494 <__alt_data_end+0xf8002494>
100024ac:	f800283a 	ret
100024b0:	0005883a 	mov	r2,zero
100024b4:	f800283a 	ret
100024b8:	00c00044 	movi	r3,1
100024bc:	003ff406 	br	10002490 <__alt_data_end+0xf8002490>

100024c0 <__umodsi3>:
100024c0:	2005883a 	mov	r2,r4
100024c4:	2900122e 	bgeu	r5,r4,10002510 <__umodsi3+0x50>
100024c8:	28001116 	blt	r5,zero,10002510 <__umodsi3+0x50>
100024cc:	01800804 	movi	r6,32
100024d0:	00c00044 	movi	r3,1
100024d4:	00000206 	br	100024e0 <__umodsi3+0x20>
100024d8:	30000c26 	beq	r6,zero,1000250c <__umodsi3+0x4c>
100024dc:	28000516 	blt	r5,zero,100024f4 <__umodsi3+0x34>
100024e0:	294b883a 	add	r5,r5,r5
100024e4:	31bfffc4 	addi	r6,r6,-1
100024e8:	18c7883a 	add	r3,r3,r3
100024ec:	293ffa36 	bltu	r5,r4,100024d8 <__alt_data_end+0xf80024d8>
100024f0:	18000626 	beq	r3,zero,1000250c <__umodsi3+0x4c>
100024f4:	1806d07a 	srli	r3,r3,1
100024f8:	11400136 	bltu	r2,r5,10002500 <__umodsi3+0x40>
100024fc:	1145c83a 	sub	r2,r2,r5
10002500:	280ad07a 	srli	r5,r5,1
10002504:	183ffb1e 	bne	r3,zero,100024f4 <__alt_data_end+0xf80024f4>
10002508:	f800283a 	ret
1000250c:	f800283a 	ret
10002510:	00c00044 	movi	r3,1
10002514:	003ff706 	br	100024f4 <__alt_data_end+0xf80024f4>

10002518 <__addsf3>:
10002518:	defffc04 	addi	sp,sp,-16
1000251c:	2004d7fa 	srli	r2,r4,31
10002520:	280cd5fa 	srli	r6,r5,23
10002524:	dc000015 	stw	r16,0(sp)
10002528:	00c02034 	movhi	r3,128
1000252c:	2020d5fa 	srli	r16,r4,23
10002530:	280ed7fa 	srli	r7,r5,31
10002534:	18ffffc4 	addi	r3,r3,-1
10002538:	dc400115 	stw	r17,4(sp)
1000253c:	1908703a 	and	r4,r3,r4
10002540:	194a703a 	and	r5,r3,r5
10002544:	dfc00315 	stw	ra,12(sp)
10002548:	dc800215 	stw	r18,8(sp)
1000254c:	14403fcc 	andi	r17,r2,255
10002550:	84003fcc 	andi	r16,r16,255
10002554:	200890fa 	slli	r4,r4,3
10002558:	31803fcc 	andi	r6,r6,255
1000255c:	280a90fa 	slli	r5,r5,3
10002560:	89c05026 	beq	r17,r7,100026a4 <__addsf3+0x18c>
10002564:	8185c83a 	sub	r2,r16,r6
10002568:	00807a0e 	bge	zero,r2,10002754 <__addsf3+0x23c>
1000256c:	30001e1e 	bne	r6,zero,100025e8 <__addsf3+0xd0>
10002570:	28006d1e 	bne	r5,zero,10002728 <__addsf3+0x210>
10002574:	208001cc 	andi	r2,r4,7
10002578:	10000426 	beq	r2,zero,1000258c <__addsf3+0x74>
1000257c:	208003cc 	andi	r2,r4,15
10002580:	00c00104 	movi	r3,4
10002584:	10c00126 	beq	r2,r3,1000258c <__addsf3+0x74>
10002588:	20c9883a 	add	r4,r4,r3
1000258c:	2081002c 	andhi	r2,r4,1024
10002590:	10003926 	beq	r2,zero,10002678 <__addsf3+0x160>
10002594:	84000044 	addi	r16,r16,1
10002598:	00803fc4 	movi	r2,255
1000259c:	80807826 	beq	r16,r2,10002780 <__addsf3+0x268>
100025a0:	200891ba 	slli	r4,r4,6
100025a4:	8805883a 	mov	r2,r17
100025a8:	2008d27a 	srli	r4,r4,9
100025ac:	84003fcc 	andi	r16,r16,255
100025b0:	800695fa 	slli	r3,r16,23
100025b4:	10803fcc 	andi	r2,r2,255
100025b8:	04002034 	movhi	r16,128
100025bc:	843fffc4 	addi	r16,r16,-1
100025c0:	100497fa 	slli	r2,r2,31
100025c4:	2408703a 	and	r4,r4,r16
100025c8:	20e0b03a 	or	r16,r4,r3
100025cc:	8084b03a 	or	r2,r16,r2
100025d0:	dfc00317 	ldw	ra,12(sp)
100025d4:	dc800217 	ldw	r18,8(sp)
100025d8:	dc400117 	ldw	r17,4(sp)
100025dc:	dc000017 	ldw	r16,0(sp)
100025e0:	dec00404 	addi	sp,sp,16
100025e4:	f800283a 	ret
100025e8:	00c03fc4 	movi	r3,255
100025ec:	80ffe126 	beq	r16,r3,10002574 <__alt_data_end+0xf8002574>
100025f0:	29410034 	orhi	r5,r5,1024
100025f4:	00c006c4 	movi	r3,27
100025f8:	18807516 	blt	r3,r2,100027d0 <__addsf3+0x2b8>
100025fc:	00c00804 	movi	r3,32
10002600:	1887c83a 	sub	r3,r3,r2
10002604:	28c6983a 	sll	r3,r5,r3
10002608:	288ad83a 	srl	r5,r5,r2
1000260c:	1804c03a 	cmpne	r2,r3,zero
10002610:	288ab03a 	or	r5,r5,r2
10002614:	2149c83a 	sub	r4,r4,r5
10002618:	2081002c 	andhi	r2,r4,1024
1000261c:	10001426 	beq	r2,zero,10002670 <__addsf3+0x158>
10002620:	04810034 	movhi	r18,1024
10002624:	94bfffc4 	addi	r18,r18,-1
10002628:	24a4703a 	and	r18,r4,r18
1000262c:	9009883a 	mov	r4,r18
10002630:	00059700 	call	10005970 <__clzsi2>
10002634:	10bffec4 	addi	r2,r2,-5
10002638:	90a4983a 	sll	r18,r18,r2
1000263c:	14005416 	blt	r2,r16,10002790 <__addsf3+0x278>
10002640:	1405c83a 	sub	r2,r2,r16
10002644:	11000044 	addi	r4,r2,1
10002648:	00800804 	movi	r2,32
1000264c:	1105c83a 	sub	r2,r2,r4
10002650:	9084983a 	sll	r2,r18,r2
10002654:	9124d83a 	srl	r18,r18,r4
10002658:	0021883a 	mov	r16,zero
1000265c:	1008c03a 	cmpne	r4,r2,zero
10002660:	9108b03a 	or	r4,r18,r4
10002664:	003fc306 	br	10002574 <__alt_data_end+0xf8002574>
10002668:	1000db26 	beq	r2,zero,100029d8 <__addsf3+0x4c0>
1000266c:	1009883a 	mov	r4,r2
10002670:	208001cc 	andi	r2,r4,7
10002674:	103fc11e 	bne	r2,zero,1000257c <__alt_data_end+0xf800257c>
10002678:	2006d0fa 	srli	r3,r4,3
1000267c:	01003fc4 	movi	r4,255
10002680:	8805883a 	mov	r2,r17
10002684:	8100241e 	bne	r16,r4,10002718 <__addsf3+0x200>
10002688:	18006e26 	beq	r3,zero,10002844 <__addsf3+0x32c>
1000268c:	19001034 	orhi	r4,r3,64
10002690:	00c02034 	movhi	r3,128
10002694:	18ffffc4 	addi	r3,r3,-1
10002698:	043fffc4 	movi	r16,-1
1000269c:	20c8703a 	and	r4,r4,r3
100026a0:	003fc206 	br	100025ac <__alt_data_end+0xf80025ac>
100026a4:	8187c83a 	sub	r3,r16,r6
100026a8:	00c03e0e 	bge	zero,r3,100027a4 <__addsf3+0x28c>
100026ac:	30002326 	beq	r6,zero,1000273c <__addsf3+0x224>
100026b0:	01803fc4 	movi	r6,255
100026b4:	81bfaf26 	beq	r16,r6,10002574 <__alt_data_end+0xf8002574>
100026b8:	29410034 	orhi	r5,r5,1024
100026bc:	018006c4 	movi	r6,27
100026c0:	30c07416 	blt	r6,r3,10002894 <__addsf3+0x37c>
100026c4:	01800804 	movi	r6,32
100026c8:	30cdc83a 	sub	r6,r6,r3
100026cc:	298c983a 	sll	r6,r5,r6
100026d0:	28cad83a 	srl	r5,r5,r3
100026d4:	3006c03a 	cmpne	r3,r6,zero
100026d8:	28cab03a 	or	r5,r5,r3
100026dc:	2149883a 	add	r4,r4,r5
100026e0:	20c1002c 	andhi	r3,r4,1024
100026e4:	183fe226 	beq	r3,zero,10002670 <__alt_data_end+0xf8002670>
100026e8:	84000044 	addi	r16,r16,1
100026ec:	00c03fc4 	movi	r3,255
100026f0:	80c05426 	beq	r16,r3,10002844 <__addsf3+0x32c>
100026f4:	00bf0034 	movhi	r2,64512
100026f8:	10bfffc4 	addi	r2,r2,-1
100026fc:	20c0004c 	andi	r3,r4,1
10002700:	2088703a 	and	r4,r4,r2
10002704:	2008d07a 	srli	r4,r4,1
10002708:	20c8b03a 	or	r4,r4,r3
1000270c:	003f9906 	br	10002574 <__alt_data_end+0xf8002574>
10002710:	0007883a 	mov	r3,zero
10002714:	0005883a 	mov	r2,zero
10002718:	01002034 	movhi	r4,128
1000271c:	213fffc4 	addi	r4,r4,-1
10002720:	1908703a 	and	r4,r3,r4
10002724:	003fa106 	br	100025ac <__alt_data_end+0xf80025ac>
10002728:	10bfffc4 	addi	r2,r2,-1
1000272c:	103fb926 	beq	r2,zero,10002614 <__alt_data_end+0xf8002614>
10002730:	00c03fc4 	movi	r3,255
10002734:	80ffaf1e 	bne	r16,r3,100025f4 <__alt_data_end+0xf80025f4>
10002738:	003f8e06 	br	10002574 <__alt_data_end+0xf8002574>
1000273c:	283f8d26 	beq	r5,zero,10002574 <__alt_data_end+0xf8002574>
10002740:	18ffffc4 	addi	r3,r3,-1
10002744:	183fe526 	beq	r3,zero,100026dc <__alt_data_end+0xf80026dc>
10002748:	01803fc4 	movi	r6,255
1000274c:	81bfdb1e 	bne	r16,r6,100026bc <__alt_data_end+0xf80026bc>
10002750:	003f8806 	br	10002574 <__alt_data_end+0xf8002574>
10002754:	1000201e 	bne	r2,zero,100027d8 <__addsf3+0x2c0>
10002758:	80800044 	addi	r2,r16,1
1000275c:	10803fcc 	andi	r2,r2,255
10002760:	01800044 	movi	r6,1
10002764:	3080450e 	bge	r6,r2,1000287c <__addsf3+0x364>
10002768:	2165c83a 	sub	r18,r4,r5
1000276c:	90c1002c 	andhi	r3,r18,1024
10002770:	18002b26 	beq	r3,zero,10002820 <__addsf3+0x308>
10002774:	2925c83a 	sub	r18,r5,r4
10002778:	3823883a 	mov	r17,r7
1000277c:	003fab06 	br	1000262c <__alt_data_end+0xf800262c>
10002780:	8805883a 	mov	r2,r17
10002784:	043fffc4 	movi	r16,-1
10002788:	0009883a 	mov	r4,zero
1000278c:	003f8706 	br	100025ac <__alt_data_end+0xf80025ac>
10002790:	013f0034 	movhi	r4,64512
10002794:	213fffc4 	addi	r4,r4,-1
10002798:	80a1c83a 	sub	r16,r16,r2
1000279c:	9108703a 	and	r4,r18,r4
100027a0:	003f7406 	br	10002574 <__alt_data_end+0xf8002574>
100027a4:	1800411e 	bne	r3,zero,100028ac <__addsf3+0x394>
100027a8:	80c00044 	addi	r3,r16,1
100027ac:	19c03fcc 	andi	r7,r3,255
100027b0:	01800044 	movi	r6,1
100027b4:	31c0260e 	bge	r6,r7,10002850 <__addsf3+0x338>
100027b8:	01803fc4 	movi	r6,255
100027bc:	19802126 	beq	r3,r6,10002844 <__addsf3+0x32c>
100027c0:	2149883a 	add	r4,r4,r5
100027c4:	2008d07a 	srli	r4,r4,1
100027c8:	1821883a 	mov	r16,r3
100027cc:	003f6906 	br	10002574 <__alt_data_end+0xf8002574>
100027d0:	01400044 	movi	r5,1
100027d4:	003f8f06 	br	10002614 <__alt_data_end+0xf8002614>
100027d8:	8000151e 	bne	r16,zero,10002830 <__addsf3+0x318>
100027dc:	20002f26 	beq	r4,zero,1000289c <__addsf3+0x384>
100027e0:	0084303a 	nor	r2,zero,r2
100027e4:	10000a26 	beq	r2,zero,10002810 <__addsf3+0x2f8>
100027e8:	00c03fc4 	movi	r3,255
100027ec:	30c02b26 	beq	r6,r3,1000289c <__addsf3+0x384>
100027f0:	00c006c4 	movi	r3,27
100027f4:	18806d16 	blt	r3,r2,100029ac <__addsf3+0x494>
100027f8:	00c00804 	movi	r3,32
100027fc:	1887c83a 	sub	r3,r3,r2
10002800:	20c6983a 	sll	r3,r4,r3
10002804:	2084d83a 	srl	r2,r4,r2
10002808:	1808c03a 	cmpne	r4,r3,zero
1000280c:	1108b03a 	or	r4,r2,r4
10002810:	2909c83a 	sub	r4,r5,r4
10002814:	3021883a 	mov	r16,r6
10002818:	3823883a 	mov	r17,r7
1000281c:	003f7e06 	br	10002618 <__alt_data_end+0xf8002618>
10002820:	903f821e 	bne	r18,zero,1000262c <__alt_data_end+0xf800262c>
10002824:	0005883a 	mov	r2,zero
10002828:	0021883a 	mov	r16,zero
1000282c:	003fba06 	br	10002718 <__alt_data_end+0xf8002718>
10002830:	00c03fc4 	movi	r3,255
10002834:	30c01926 	beq	r6,r3,1000289c <__addsf3+0x384>
10002838:	0085c83a 	sub	r2,zero,r2
1000283c:	21010034 	orhi	r4,r4,1024
10002840:	003feb06 	br	100027f0 <__alt_data_end+0xf80027f0>
10002844:	043fffc4 	movi	r16,-1
10002848:	0009883a 	mov	r4,zero
1000284c:	003f5706 	br	100025ac <__alt_data_end+0xf80025ac>
10002850:	80004a1e 	bne	r16,zero,1000297c <__addsf3+0x464>
10002854:	20005926 	beq	r4,zero,100029bc <__addsf3+0x4a4>
10002858:	283f4626 	beq	r5,zero,10002574 <__alt_data_end+0xf8002574>
1000285c:	2149883a 	add	r4,r4,r5
10002860:	2081002c 	andhi	r2,r4,1024
10002864:	103f8226 	beq	r2,zero,10002670 <__alt_data_end+0xf8002670>
10002868:	00bf0034 	movhi	r2,64512
1000286c:	10bfffc4 	addi	r2,r2,-1
10002870:	3021883a 	mov	r16,r6
10002874:	2088703a 	and	r4,r4,r2
10002878:	003f3e06 	br	10002574 <__alt_data_end+0xf8002574>
1000287c:	8000121e 	bne	r16,zero,100028c8 <__addsf3+0x3b0>
10002880:	2000261e 	bne	r4,zero,1000291c <__addsf3+0x404>
10002884:	283fa226 	beq	r5,zero,10002710 <__alt_data_end+0xf8002710>
10002888:	2809883a 	mov	r4,r5
1000288c:	3823883a 	mov	r17,r7
10002890:	003f3806 	br	10002574 <__alt_data_end+0xf8002574>
10002894:	01400044 	movi	r5,1
10002898:	003f9006 	br	100026dc <__alt_data_end+0xf80026dc>
1000289c:	2809883a 	mov	r4,r5
100028a0:	3021883a 	mov	r16,r6
100028a4:	3823883a 	mov	r17,r7
100028a8:	003f3206 	br	10002574 <__alt_data_end+0xf8002574>
100028ac:	80000c1e 	bne	r16,zero,100028e0 <__addsf3+0x3c8>
100028b0:	20002f26 	beq	r4,zero,10002970 <__addsf3+0x458>
100028b4:	00c6303a 	nor	r3,zero,r3
100028b8:	18002b1e 	bne	r3,zero,10002968 <__addsf3+0x450>
100028bc:	2149883a 	add	r4,r4,r5
100028c0:	3021883a 	mov	r16,r6
100028c4:	003f8606 	br	100026e0 <__alt_data_end+0xf80026e0>
100028c8:	20001b1e 	bne	r4,zero,10002938 <__addsf3+0x420>
100028cc:	28003926 	beq	r5,zero,100029b4 <__addsf3+0x49c>
100028d0:	2809883a 	mov	r4,r5
100028d4:	3823883a 	mov	r17,r7
100028d8:	04003fc4 	movi	r16,255
100028dc:	003f2506 	br	10002574 <__alt_data_end+0xf8002574>
100028e0:	01c03fc4 	movi	r7,255
100028e4:	31c02226 	beq	r6,r7,10002970 <__addsf3+0x458>
100028e8:	00c7c83a 	sub	r3,zero,r3
100028ec:	21010034 	orhi	r4,r4,1024
100028f0:	01c006c4 	movi	r7,27
100028f4:	38c03616 	blt	r7,r3,100029d0 <__addsf3+0x4b8>
100028f8:	01c00804 	movi	r7,32
100028fc:	38cfc83a 	sub	r7,r7,r3
10002900:	21ce983a 	sll	r7,r4,r7
10002904:	20c6d83a 	srl	r3,r4,r3
10002908:	3808c03a 	cmpne	r4,r7,zero
1000290c:	1906b03a 	or	r3,r3,r4
10002910:	1949883a 	add	r4,r3,r5
10002914:	3021883a 	mov	r16,r6
10002918:	003f7106 	br	100026e0 <__alt_data_end+0xf80026e0>
1000291c:	283f1526 	beq	r5,zero,10002574 <__alt_data_end+0xf8002574>
10002920:	2145c83a 	sub	r2,r4,r5
10002924:	10c1002c 	andhi	r3,r2,1024
10002928:	183f4f26 	beq	r3,zero,10002668 <__alt_data_end+0xf8002668>
1000292c:	2909c83a 	sub	r4,r5,r4
10002930:	3823883a 	mov	r17,r7
10002934:	003f0f06 	br	10002574 <__alt_data_end+0xf8002574>
10002938:	28001a26 	beq	r5,zero,100029a4 <__addsf3+0x48c>
1000293c:	2008d0fa 	srli	r4,r4,3
10002940:	2080102c 	andhi	r2,r4,64
10002944:	10000526 	beq	r2,zero,1000295c <__addsf3+0x444>
10002948:	280ad0fa 	srli	r5,r5,3
1000294c:	2880102c 	andhi	r2,r5,64
10002950:	1000021e 	bne	r2,zero,1000295c <__addsf3+0x444>
10002954:	2809883a 	mov	r4,r5
10002958:	3823883a 	mov	r17,r7
1000295c:	200890fa 	slli	r4,r4,3
10002960:	04003fc4 	movi	r16,255
10002964:	003f0306 	br	10002574 <__alt_data_end+0xf8002574>
10002968:	01c03fc4 	movi	r7,255
1000296c:	31ffe01e 	bne	r6,r7,100028f0 <__alt_data_end+0xf80028f0>
10002970:	2809883a 	mov	r4,r5
10002974:	3021883a 	mov	r16,r6
10002978:	003efe06 	br	10002574 <__alt_data_end+0xf8002574>
1000297c:	20001126 	beq	r4,zero,100029c4 <__addsf3+0x4ac>
10002980:	28000826 	beq	r5,zero,100029a4 <__addsf3+0x48c>
10002984:	2008d0fa 	srli	r4,r4,3
10002988:	2080102c 	andhi	r2,r4,64
1000298c:	103ff326 	beq	r2,zero,1000295c <__alt_data_end+0xf800295c>
10002990:	280ad0fa 	srli	r5,r5,3
10002994:	2880102c 	andhi	r2,r5,64
10002998:	103ff01e 	bne	r2,zero,1000295c <__alt_data_end+0xf800295c>
1000299c:	2809883a 	mov	r4,r5
100029a0:	003fee06 	br	1000295c <__alt_data_end+0xf800295c>
100029a4:	04003fc4 	movi	r16,255
100029a8:	003ef206 	br	10002574 <__alt_data_end+0xf8002574>
100029ac:	01000044 	movi	r4,1
100029b0:	003f9706 	br	10002810 <__alt_data_end+0xf8002810>
100029b4:	0005883a 	mov	r2,zero
100029b8:	003f3406 	br	1000268c <__alt_data_end+0xf800268c>
100029bc:	2809883a 	mov	r4,r5
100029c0:	003eec06 	br	10002574 <__alt_data_end+0xf8002574>
100029c4:	2809883a 	mov	r4,r5
100029c8:	04003fc4 	movi	r16,255
100029cc:	003ee906 	br	10002574 <__alt_data_end+0xf8002574>
100029d0:	00c00044 	movi	r3,1
100029d4:	003fce06 	br	10002910 <__alt_data_end+0xf8002910>
100029d8:	0005883a 	mov	r2,zero
100029dc:	003f4e06 	br	10002718 <__alt_data_end+0xf8002718>

100029e0 <__divsf3>:
100029e0:	defff504 	addi	sp,sp,-44
100029e4:	2004d5fa 	srli	r2,r4,23
100029e8:	dcc00415 	stw	r19,16(sp)
100029ec:	2026d7fa 	srli	r19,r4,31
100029f0:	01c02034 	movhi	r7,128
100029f4:	dd800715 	stw	r22,28(sp)
100029f8:	dd000515 	stw	r20,20(sp)
100029fc:	dc800315 	stw	r18,12(sp)
10002a00:	39ffffc4 	addi	r7,r7,-1
10002a04:	dfc00a15 	stw	ra,40(sp)
10002a08:	df000915 	stw	fp,36(sp)
10002a0c:	ddc00815 	stw	r23,32(sp)
10002a10:	dd400615 	stw	r21,24(sp)
10002a14:	dc400215 	stw	r17,8(sp)
10002a18:	dc000115 	stw	r16,4(sp)
10002a1c:	15003fcc 	andi	r20,r2,255
10002a20:	3924703a 	and	r18,r7,r4
10002a24:	9d803fcc 	andi	r22,r19,255
10002a28:	a0005226 	beq	r20,zero,10002b74 <__divsf3+0x194>
10002a2c:	00803fc4 	movi	r2,255
10002a30:	a0802e26 	beq	r20,r2,10002aec <__divsf3+0x10c>
10002a34:	91002034 	orhi	r4,r18,128
10002a38:	202490fa 	slli	r18,r4,3
10002a3c:	a53fe044 	addi	r20,r20,-127
10002a40:	0021883a 	mov	r16,zero
10002a44:	002f883a 	mov	r23,zero
10002a48:	2804d5fa 	srli	r2,r5,23
10002a4c:	282ad7fa 	srli	r21,r5,31
10002a50:	01c02034 	movhi	r7,128
10002a54:	39ffffc4 	addi	r7,r7,-1
10002a58:	10803fcc 	andi	r2,r2,255
10002a5c:	3962703a 	and	r17,r7,r5
10002a60:	af003fcc 	andi	fp,r21,255
10002a64:	10004a26 	beq	r2,zero,10002b90 <__divsf3+0x1b0>
10002a68:	00c03fc4 	movi	r3,255
10002a6c:	10c04526 	beq	r2,r3,10002b84 <__divsf3+0x1a4>
10002a70:	89402034 	orhi	r5,r17,128
10002a74:	282290fa 	slli	r17,r5,3
10002a78:	10bfe044 	addi	r2,r2,-127
10002a7c:	000b883a 	mov	r5,zero
10002a80:	2c20b03a 	or	r16,r5,r16
10002a84:	802090ba 	slli	r16,r16,2
10002a88:	00c40034 	movhi	r3,4096
10002a8c:	18caab04 	addi	r3,r3,10924
10002a90:	80e1883a 	add	r16,r16,r3
10002a94:	80c00017 	ldw	r3,0(r16)
10002a98:	9d48f03a 	xor	r4,r19,r21
10002a9c:	200d883a 	mov	r6,r4
10002aa0:	22003fcc 	andi	r8,r4,255
10002aa4:	a085c83a 	sub	r2,r20,r2
10002aa8:	1800683a 	jmp	r3
10002aac:	10002c90 	cmplti	zero,r2,178
10002ab0:	10002b14 	ori	zero,r2,172
10002ab4:	10002c84 	addi	zero,r2,178
10002ab8:	10002b00 	call	110002b0 <__alt_heap_start+0xf1d674>
10002abc:	10002c84 	addi	zero,r2,178
10002ac0:	10002c5c 	xori	zero,r2,177
10002ac4:	10002c84 	addi	zero,r2,178
10002ac8:	10002b00 	call	110002b0 <__alt_heap_start+0xf1d674>
10002acc:	10002b14 	ori	zero,r2,172
10002ad0:	10002b14 	ori	zero,r2,172
10002ad4:	10002c5c 	xori	zero,r2,177
10002ad8:	10002b00 	call	110002b0 <__alt_heap_start+0xf1d674>
10002adc:	10002d70 	cmpltui	zero,r2,181
10002ae0:	10002d70 	cmpltui	zero,r2,181
10002ae4:	10002d70 	cmpltui	zero,r2,181
10002ae8:	10002d24 	muli	zero,r2,180
10002aec:	9000581e 	bne	r18,zero,10002c50 <__divsf3+0x270>
10002af0:	04000204 	movi	r16,8
10002af4:	05c00084 	movi	r23,2
10002af8:	003fd306 	br	10002a48 <__alt_data_end+0xf8002a48>
10002afc:	0023883a 	mov	r17,zero
10002b00:	e02d883a 	mov	r22,fp
10002b04:	282f883a 	mov	r23,r5
10002b08:	00c00084 	movi	r3,2
10002b0c:	b8c08f1e 	bne	r23,r3,10002d4c <__divsf3+0x36c>
10002b10:	b011883a 	mov	r8,r22
10002b14:	4180004c 	andi	r6,r8,1
10002b18:	013fffc4 	movi	r4,-1
10002b1c:	000f883a 	mov	r7,zero
10002b20:	21003fcc 	andi	r4,r4,255
10002b24:	200895fa 	slli	r4,r4,23
10002b28:	30803fcc 	andi	r2,r6,255
10002b2c:	00c02034 	movhi	r3,128
10002b30:	100497fa 	slli	r2,r2,31
10002b34:	18ffffc4 	addi	r3,r3,-1
10002b38:	38c6703a 	and	r3,r7,r3
10002b3c:	1906b03a 	or	r3,r3,r4
10002b40:	1884b03a 	or	r2,r3,r2
10002b44:	dfc00a17 	ldw	ra,40(sp)
10002b48:	df000917 	ldw	fp,36(sp)
10002b4c:	ddc00817 	ldw	r23,32(sp)
10002b50:	dd800717 	ldw	r22,28(sp)
10002b54:	dd400617 	ldw	r21,24(sp)
10002b58:	dd000517 	ldw	r20,20(sp)
10002b5c:	dcc00417 	ldw	r19,16(sp)
10002b60:	dc800317 	ldw	r18,12(sp)
10002b64:	dc400217 	ldw	r17,8(sp)
10002b68:	dc000117 	ldw	r16,4(sp)
10002b6c:	dec00b04 	addi	sp,sp,44
10002b70:	f800283a 	ret
10002b74:	90002b1e 	bne	r18,zero,10002c24 <__divsf3+0x244>
10002b78:	04000104 	movi	r16,4
10002b7c:	05c00044 	movi	r23,1
10002b80:	003fb106 	br	10002a48 <__alt_data_end+0xf8002a48>
10002b84:	8800251e 	bne	r17,zero,10002c1c <__divsf3+0x23c>
10002b88:	01400084 	movi	r5,2
10002b8c:	00000206 	br	10002b98 <__divsf3+0x1b8>
10002b90:	88001a1e 	bne	r17,zero,10002bfc <__divsf3+0x21c>
10002b94:	01400044 	movi	r5,1
10002b98:	8160b03a 	or	r16,r16,r5
10002b9c:	802090ba 	slli	r16,r16,2
10002ba0:	00c40034 	movhi	r3,4096
10002ba4:	18caef04 	addi	r3,r3,11196
10002ba8:	80e1883a 	add	r16,r16,r3
10002bac:	80c00017 	ldw	r3,0(r16)
10002bb0:	9d50f03a 	xor	r8,r19,r21
10002bb4:	a085c83a 	sub	r2,r20,r2
10002bb8:	1800683a 	jmp	r3
10002bbc:	10002b14 	ori	zero,r2,172
10002bc0:	10002b14 	ori	zero,r2,172
10002bc4:	10002d60 	cmpeqi	zero,r2,181
10002bc8:	10002afc 	xorhi	zero,r2,171
10002bcc:	10002d60 	cmpeqi	zero,r2,181
10002bd0:	10002c5c 	xori	zero,r2,177
10002bd4:	10002d60 	cmpeqi	zero,r2,181
10002bd8:	10002afc 	xorhi	zero,r2,171
10002bdc:	10002b14 	ori	zero,r2,172
10002be0:	10002b14 	ori	zero,r2,172
10002be4:	10002c5c 	xori	zero,r2,177
10002be8:	10002afc 	xorhi	zero,r2,171
10002bec:	10002d70 	cmpltui	zero,r2,181
10002bf0:	10002d70 	cmpltui	zero,r2,181
10002bf4:	10002d70 	cmpltui	zero,r2,181
10002bf8:	10002d88 	cmpgei	zero,r2,182
10002bfc:	8809883a 	mov	r4,r17
10002c00:	00059700 	call	10005970 <__clzsi2>
10002c04:	10fffec4 	addi	r3,r2,-5
10002c08:	88e2983a 	sll	r17,r17,r3
10002c0c:	00ffe284 	movi	r3,-118
10002c10:	1885c83a 	sub	r2,r3,r2
10002c14:	000b883a 	mov	r5,zero
10002c18:	003f9906 	br	10002a80 <__alt_data_end+0xf8002a80>
10002c1c:	014000c4 	movi	r5,3
10002c20:	003f9706 	br	10002a80 <__alt_data_end+0xf8002a80>
10002c24:	9009883a 	mov	r4,r18
10002c28:	d9400015 	stw	r5,0(sp)
10002c2c:	00059700 	call	10005970 <__clzsi2>
10002c30:	10fffec4 	addi	r3,r2,-5
10002c34:	053fe284 	movi	r20,-118
10002c38:	90e4983a 	sll	r18,r18,r3
10002c3c:	a0a9c83a 	sub	r20,r20,r2
10002c40:	0021883a 	mov	r16,zero
10002c44:	002f883a 	mov	r23,zero
10002c48:	d9400017 	ldw	r5,0(sp)
10002c4c:	003f7e06 	br	10002a48 <__alt_data_end+0xf8002a48>
10002c50:	04000304 	movi	r16,12
10002c54:	05c000c4 	movi	r23,3
10002c58:	003f7b06 	br	10002a48 <__alt_data_end+0xf8002a48>
10002c5c:	01c02034 	movhi	r7,128
10002c60:	000d883a 	mov	r6,zero
10002c64:	39ffffc4 	addi	r7,r7,-1
10002c68:	013fffc4 	movi	r4,-1
10002c6c:	003fac06 	br	10002b20 <__alt_data_end+0xf8002b20>
10002c70:	01400044 	movi	r5,1
10002c74:	2909c83a 	sub	r4,r5,r4
10002c78:	008006c4 	movi	r2,27
10002c7c:	11004b0e 	bge	r2,r4,10002dac <__divsf3+0x3cc>
10002c80:	414c703a 	and	r6,r8,r5
10002c84:	0009883a 	mov	r4,zero
10002c88:	000f883a 	mov	r7,zero
10002c8c:	003fa406 	br	10002b20 <__alt_data_end+0xf8002b20>
10002c90:	9006917a 	slli	r3,r18,5
10002c94:	880e917a 	slli	r7,r17,5
10002c98:	19c0372e 	bgeu	r3,r7,10002d78 <__divsf3+0x398>
10002c9c:	10bfffc4 	addi	r2,r2,-1
10002ca0:	010006c4 	movi	r4,27
10002ca4:	000b883a 	mov	r5,zero
10002ca8:	180d883a 	mov	r6,r3
10002cac:	294b883a 	add	r5,r5,r5
10002cb0:	18c7883a 	add	r3,r3,r3
10002cb4:	30000116 	blt	r6,zero,10002cbc <__divsf3+0x2dc>
10002cb8:	19c00236 	bltu	r3,r7,10002cc4 <__divsf3+0x2e4>
10002cbc:	19c7c83a 	sub	r3,r3,r7
10002cc0:	29400054 	ori	r5,r5,1
10002cc4:	213fffc4 	addi	r4,r4,-1
10002cc8:	203ff71e 	bne	r4,zero,10002ca8 <__alt_data_end+0xf8002ca8>
10002ccc:	1806c03a 	cmpne	r3,r3,zero
10002cd0:	1962b03a 	or	r17,r3,r5
10002cd4:	11001fc4 	addi	r4,r2,127
10002cd8:	013fe50e 	bge	zero,r4,10002c70 <__alt_data_end+0xf8002c70>
10002cdc:	88c001cc 	andi	r3,r17,7
10002ce0:	18000426 	beq	r3,zero,10002cf4 <__divsf3+0x314>
10002ce4:	88c003cc 	andi	r3,r17,15
10002ce8:	01400104 	movi	r5,4
10002cec:	19400126 	beq	r3,r5,10002cf4 <__divsf3+0x314>
10002cf0:	8963883a 	add	r17,r17,r5
10002cf4:	88c2002c 	andhi	r3,r17,2048
10002cf8:	18000426 	beq	r3,zero,10002d0c <__divsf3+0x32c>
10002cfc:	11002004 	addi	r4,r2,128
10002d00:	00be0034 	movhi	r2,63488
10002d04:	10bfffc4 	addi	r2,r2,-1
10002d08:	88a2703a 	and	r17,r17,r2
10002d0c:	00803f84 	movi	r2,254
10002d10:	113f8016 	blt	r2,r4,10002b14 <__alt_data_end+0xf8002b14>
10002d14:	880e91ba 	slli	r7,r17,6
10002d18:	4180004c 	andi	r6,r8,1
10002d1c:	380ed27a 	srli	r7,r7,9
10002d20:	003f7f06 	br	10002b20 <__alt_data_end+0xf8002b20>
10002d24:	9080102c 	andhi	r2,r18,64
10002d28:	10000226 	beq	r2,zero,10002d34 <__divsf3+0x354>
10002d2c:	8880102c 	andhi	r2,r17,64
10002d30:	10001826 	beq	r2,zero,10002d94 <__divsf3+0x3b4>
10002d34:	00802034 	movhi	r2,128
10002d38:	91c01034 	orhi	r7,r18,64
10002d3c:	10bfffc4 	addi	r2,r2,-1
10002d40:	980d883a 	mov	r6,r19
10002d44:	388e703a 	and	r7,r7,r2
10002d48:	003fc706 	br	10002c68 <__alt_data_end+0xf8002c68>
10002d4c:	00c000c4 	movi	r3,3
10002d50:	b8c02d26 	beq	r23,r3,10002e08 <__divsf3+0x428>
10002d54:	00c00044 	movi	r3,1
10002d58:	b011883a 	mov	r8,r22
10002d5c:	b8ffdd1e 	bne	r23,r3,10002cd4 <__alt_data_end+0xf8002cd4>
10002d60:	4180004c 	andi	r6,r8,1
10002d64:	0009883a 	mov	r4,zero
10002d68:	000f883a 	mov	r7,zero
10002d6c:	003f6c06 	br	10002b20 <__alt_data_end+0xf8002b20>
10002d70:	9023883a 	mov	r17,r18
10002d74:	003f6406 	br	10002b08 <__alt_data_end+0xf8002b08>
10002d78:	19c7c83a 	sub	r3,r3,r7
10002d7c:	01000684 	movi	r4,26
10002d80:	01400044 	movi	r5,1
10002d84:	003fc806 	br	10002ca8 <__alt_data_end+0xf8002ca8>
10002d88:	9080102c 	andhi	r2,r18,64
10002d8c:	103fe926 	beq	r2,zero,10002d34 <__alt_data_end+0xf8002d34>
10002d90:	0023883a 	mov	r17,zero
10002d94:	00802034 	movhi	r2,128
10002d98:	89c01034 	orhi	r7,r17,64
10002d9c:	10bfffc4 	addi	r2,r2,-1
10002da0:	a80d883a 	mov	r6,r21
10002da4:	388e703a 	and	r7,r7,r2
10002da8:	003faf06 	br	10002c68 <__alt_data_end+0xf8002c68>
10002dac:	00800804 	movi	r2,32
10002db0:	1105c83a 	sub	r2,r2,r4
10002db4:	8884983a 	sll	r2,r17,r2
10002db8:	890ad83a 	srl	r5,r17,r4
10002dbc:	1004c03a 	cmpne	r2,r2,zero
10002dc0:	288ab03a 	or	r5,r5,r2
10002dc4:	288001cc 	andi	r2,r5,7
10002dc8:	10000426 	beq	r2,zero,10002ddc <__divsf3+0x3fc>
10002dcc:	288003cc 	andi	r2,r5,15
10002dd0:	00c00104 	movi	r3,4
10002dd4:	10c00126 	beq	r2,r3,10002ddc <__divsf3+0x3fc>
10002dd8:	28cb883a 	add	r5,r5,r3
10002ddc:	2881002c 	andhi	r2,r5,1024
10002de0:	10000426 	beq	r2,zero,10002df4 <__divsf3+0x414>
10002de4:	4180004c 	andi	r6,r8,1
10002de8:	01000044 	movi	r4,1
10002dec:	000f883a 	mov	r7,zero
10002df0:	003f4b06 	br	10002b20 <__alt_data_end+0xf8002b20>
10002df4:	280a91ba 	slli	r5,r5,6
10002df8:	4180004c 	andi	r6,r8,1
10002dfc:	0009883a 	mov	r4,zero
10002e00:	280ed27a 	srli	r7,r5,9
10002e04:	003f4606 	br	10002b20 <__alt_data_end+0xf8002b20>
10002e08:	00802034 	movhi	r2,128
10002e0c:	89c01034 	orhi	r7,r17,64
10002e10:	10bfffc4 	addi	r2,r2,-1
10002e14:	b00d883a 	mov	r6,r22
10002e18:	388e703a 	and	r7,r7,r2
10002e1c:	003f9206 	br	10002c68 <__alt_data_end+0xf8002c68>

10002e20 <__eqsf2>:
10002e20:	2006d5fa 	srli	r3,r4,23
10002e24:	280cd5fa 	srli	r6,r5,23
10002e28:	01c02034 	movhi	r7,128
10002e2c:	39ffffc4 	addi	r7,r7,-1
10002e30:	18c03fcc 	andi	r3,r3,255
10002e34:	02003fc4 	movi	r8,255
10002e38:	3904703a 	and	r2,r7,r4
10002e3c:	31803fcc 	andi	r6,r6,255
10002e40:	394e703a 	and	r7,r7,r5
10002e44:	2008d7fa 	srli	r4,r4,31
10002e48:	280ad7fa 	srli	r5,r5,31
10002e4c:	1a000d26 	beq	r3,r8,10002e84 <__eqsf2+0x64>
10002e50:	02003fc4 	movi	r8,255
10002e54:	32000826 	beq	r6,r8,10002e78 <__eqsf2+0x58>
10002e58:	19800226 	beq	r3,r6,10002e64 <__eqsf2+0x44>
10002e5c:	00800044 	movi	r2,1
10002e60:	f800283a 	ret
10002e64:	11fffd1e 	bne	r2,r7,10002e5c <__alt_data_end+0xf8002e5c>
10002e68:	21400926 	beq	r4,r5,10002e90 <__eqsf2+0x70>
10002e6c:	183ffb1e 	bne	r3,zero,10002e5c <__alt_data_end+0xf8002e5c>
10002e70:	1004c03a 	cmpne	r2,r2,zero
10002e74:	f800283a 	ret
10002e78:	383ff726 	beq	r7,zero,10002e58 <__alt_data_end+0xf8002e58>
10002e7c:	00800044 	movi	r2,1
10002e80:	f800283a 	ret
10002e84:	103ff226 	beq	r2,zero,10002e50 <__alt_data_end+0xf8002e50>
10002e88:	00800044 	movi	r2,1
10002e8c:	f800283a 	ret
10002e90:	0005883a 	mov	r2,zero
10002e94:	f800283a 	ret

10002e98 <__gesf2>:
10002e98:	2004d5fa 	srli	r2,r4,23
10002e9c:	2806d5fa 	srli	r3,r5,23
10002ea0:	01802034 	movhi	r6,128
10002ea4:	31bfffc4 	addi	r6,r6,-1
10002ea8:	10803fcc 	andi	r2,r2,255
10002eac:	01c03fc4 	movi	r7,255
10002eb0:	3110703a 	and	r8,r6,r4
10002eb4:	18c03fcc 	andi	r3,r3,255
10002eb8:	314c703a 	and	r6,r6,r5
10002ebc:	2008d7fa 	srli	r4,r4,31
10002ec0:	280ad7fa 	srli	r5,r5,31
10002ec4:	11c01926 	beq	r2,r7,10002f2c <__gesf2+0x94>
10002ec8:	01c03fc4 	movi	r7,255
10002ecc:	19c00f26 	beq	r3,r7,10002f0c <__gesf2+0x74>
10002ed0:	1000061e 	bne	r2,zero,10002eec <__gesf2+0x54>
10002ed4:	400f003a 	cmpeq	r7,r8,zero
10002ed8:	1800071e 	bne	r3,zero,10002ef8 <__gesf2+0x60>
10002edc:	3000061e 	bne	r6,zero,10002ef8 <__gesf2+0x60>
10002ee0:	0005883a 	mov	r2,zero
10002ee4:	40000e1e 	bne	r8,zero,10002f20 <__gesf2+0x88>
10002ee8:	f800283a 	ret
10002eec:	18000a1e 	bne	r3,zero,10002f18 <__gesf2+0x80>
10002ef0:	30000b26 	beq	r6,zero,10002f20 <__gesf2+0x88>
10002ef4:	000f883a 	mov	r7,zero
10002ef8:	29403fcc 	andi	r5,r5,255
10002efc:	38000726 	beq	r7,zero,10002f1c <__gesf2+0x84>
10002f00:	28000826 	beq	r5,zero,10002f24 <__gesf2+0x8c>
10002f04:	00800044 	movi	r2,1
10002f08:	f800283a 	ret
10002f0c:	303ff026 	beq	r6,zero,10002ed0 <__alt_data_end+0xf8002ed0>
10002f10:	00bfff84 	movi	r2,-2
10002f14:	f800283a 	ret
10002f18:	29403fcc 	andi	r5,r5,255
10002f1c:	21400526 	beq	r4,r5,10002f34 <__gesf2+0x9c>
10002f20:	203ff826 	beq	r4,zero,10002f04 <__alt_data_end+0xf8002f04>
10002f24:	00bfffc4 	movi	r2,-1
10002f28:	f800283a 	ret
10002f2c:	403fe626 	beq	r8,zero,10002ec8 <__alt_data_end+0xf8002ec8>
10002f30:	003ff706 	br	10002f10 <__alt_data_end+0xf8002f10>
10002f34:	18bffa16 	blt	r3,r2,10002f20 <__alt_data_end+0xf8002f20>
10002f38:	10c00216 	blt	r2,r3,10002f44 <__gesf2+0xac>
10002f3c:	323ff836 	bltu	r6,r8,10002f20 <__alt_data_end+0xf8002f20>
10002f40:	4180022e 	bgeu	r8,r6,10002f4c <__gesf2+0xb4>
10002f44:	203fef1e 	bne	r4,zero,10002f04 <__alt_data_end+0xf8002f04>
10002f48:	003ff606 	br	10002f24 <__alt_data_end+0xf8002f24>
10002f4c:	0005883a 	mov	r2,zero
10002f50:	f800283a 	ret

10002f54 <__lesf2>:
10002f54:	2004d5fa 	srli	r2,r4,23
10002f58:	280cd5fa 	srli	r6,r5,23
10002f5c:	00c02034 	movhi	r3,128
10002f60:	18ffffc4 	addi	r3,r3,-1
10002f64:	10803fcc 	andi	r2,r2,255
10002f68:	01c03fc4 	movi	r7,255
10002f6c:	1910703a 	and	r8,r3,r4
10002f70:	31803fcc 	andi	r6,r6,255
10002f74:	1946703a 	and	r3,r3,r5
10002f78:	2008d7fa 	srli	r4,r4,31
10002f7c:	280ad7fa 	srli	r5,r5,31
10002f80:	11c01b26 	beq	r2,r7,10002ff0 <__lesf2+0x9c>
10002f84:	01c03fc4 	movi	r7,255
10002f88:	31c01126 	beq	r6,r7,10002fd0 <__lesf2+0x7c>
10002f8c:	1000071e 	bne	r2,zero,10002fac <__lesf2+0x58>
10002f90:	400f003a 	cmpeq	r7,r8,zero
10002f94:	21003fcc 	andi	r4,r4,255
10002f98:	3000081e 	bne	r6,zero,10002fbc <__lesf2+0x68>
10002f9c:	1800071e 	bne	r3,zero,10002fbc <__lesf2+0x68>
10002fa0:	0005883a 	mov	r2,zero
10002fa4:	40000f1e 	bne	r8,zero,10002fe4 <__lesf2+0x90>
10002fa8:	f800283a 	ret
10002fac:	21003fcc 	andi	r4,r4,255
10002fb0:	30000a1e 	bne	r6,zero,10002fdc <__lesf2+0x88>
10002fb4:	18000b26 	beq	r3,zero,10002fe4 <__lesf2+0x90>
10002fb8:	000f883a 	mov	r7,zero
10002fbc:	29403fcc 	andi	r5,r5,255
10002fc0:	38000726 	beq	r7,zero,10002fe0 <__lesf2+0x8c>
10002fc4:	28000826 	beq	r5,zero,10002fe8 <__lesf2+0x94>
10002fc8:	00800044 	movi	r2,1
10002fcc:	f800283a 	ret
10002fd0:	183fee26 	beq	r3,zero,10002f8c <__alt_data_end+0xf8002f8c>
10002fd4:	00800084 	movi	r2,2
10002fd8:	f800283a 	ret
10002fdc:	29403fcc 	andi	r5,r5,255
10002fe0:	21400626 	beq	r4,r5,10002ffc <__lesf2+0xa8>
10002fe4:	203ff826 	beq	r4,zero,10002fc8 <__alt_data_end+0xf8002fc8>
10002fe8:	00bfffc4 	movi	r2,-1
10002fec:	f800283a 	ret
10002ff0:	403fe426 	beq	r8,zero,10002f84 <__alt_data_end+0xf8002f84>
10002ff4:	00800084 	movi	r2,2
10002ff8:	f800283a 	ret
10002ffc:	30bff916 	blt	r6,r2,10002fe4 <__alt_data_end+0xf8002fe4>
10003000:	11800216 	blt	r2,r6,1000300c <__lesf2+0xb8>
10003004:	1a3ff736 	bltu	r3,r8,10002fe4 <__alt_data_end+0xf8002fe4>
10003008:	40c0022e 	bgeu	r8,r3,10003014 <__lesf2+0xc0>
1000300c:	203fee1e 	bne	r4,zero,10002fc8 <__alt_data_end+0xf8002fc8>
10003010:	003ff506 	br	10002fe8 <__alt_data_end+0xf8002fe8>
10003014:	0005883a 	mov	r2,zero
10003018:	f800283a 	ret

1000301c <__mulsf3>:
1000301c:	defff504 	addi	sp,sp,-44
10003020:	dc000115 	stw	r16,4(sp)
10003024:	2020d5fa 	srli	r16,r4,23
10003028:	dd400615 	stw	r21,24(sp)
1000302c:	202ad7fa 	srli	r21,r4,31
10003030:	dc800315 	stw	r18,12(sp)
10003034:	04802034 	movhi	r18,128
10003038:	df000915 	stw	fp,36(sp)
1000303c:	dd000515 	stw	r20,20(sp)
10003040:	94bfffc4 	addi	r18,r18,-1
10003044:	dfc00a15 	stw	ra,40(sp)
10003048:	ddc00815 	stw	r23,32(sp)
1000304c:	dd800715 	stw	r22,28(sp)
10003050:	dcc00415 	stw	r19,16(sp)
10003054:	dc400215 	stw	r17,8(sp)
10003058:	84003fcc 	andi	r16,r16,255
1000305c:	9124703a 	and	r18,r18,r4
10003060:	a829883a 	mov	r20,r21
10003064:	af003fcc 	andi	fp,r21,255
10003068:	80005426 	beq	r16,zero,100031bc <__mulsf3+0x1a0>
1000306c:	00803fc4 	movi	r2,255
10003070:	80802f26 	beq	r16,r2,10003130 <__mulsf3+0x114>
10003074:	91002034 	orhi	r4,r18,128
10003078:	202490fa 	slli	r18,r4,3
1000307c:	843fe044 	addi	r16,r16,-127
10003080:	0023883a 	mov	r17,zero
10003084:	002f883a 	mov	r23,zero
10003088:	2804d5fa 	srli	r2,r5,23
1000308c:	282cd7fa 	srli	r22,r5,31
10003090:	01002034 	movhi	r4,128
10003094:	213fffc4 	addi	r4,r4,-1
10003098:	10803fcc 	andi	r2,r2,255
1000309c:	2166703a 	and	r19,r4,r5
100030a0:	b1803fcc 	andi	r6,r22,255
100030a4:	10004c26 	beq	r2,zero,100031d8 <__mulsf3+0x1bc>
100030a8:	00c03fc4 	movi	r3,255
100030ac:	10c04726 	beq	r2,r3,100031cc <__mulsf3+0x1b0>
100030b0:	99002034 	orhi	r4,r19,128
100030b4:	202690fa 	slli	r19,r4,3
100030b8:	10bfe044 	addi	r2,r2,-127
100030bc:	0007883a 	mov	r3,zero
100030c0:	80a1883a 	add	r16,r16,r2
100030c4:	010003c4 	movi	r4,15
100030c8:	1c44b03a 	or	r2,r3,r17
100030cc:	b56af03a 	xor	r21,r22,r21
100030d0:	81c00044 	addi	r7,r16,1
100030d4:	20806b36 	bltu	r4,r2,10003284 <__mulsf3+0x268>
100030d8:	100490ba 	slli	r2,r2,2
100030dc:	01040034 	movhi	r4,4096
100030e0:	210c3c04 	addi	r4,r4,12528
100030e4:	1105883a 	add	r2,r2,r4
100030e8:	10800017 	ldw	r2,0(r2)
100030ec:	1000683a 	jmp	r2
100030f0:	10003284 	addi	zero,r2,202
100030f4:	10003144 	addi	zero,r2,197
100030f8:	10003144 	addi	zero,r2,197
100030fc:	10003140 	call	11000314 <__alt_heap_start+0xf1d6d8>
10003100:	10003268 	cmpgeui	zero,r2,201
10003104:	10003268 	cmpgeui	zero,r2,201
10003108:	10003254 	ori	zero,r2,201
1000310c:	10003140 	call	11000314 <__alt_heap_start+0xf1d6d8>
10003110:	10003268 	cmpgeui	zero,r2,201
10003114:	10003254 	ori	zero,r2,201
10003118:	10003268 	cmpgeui	zero,r2,201
1000311c:	10003140 	call	11000314 <__alt_heap_start+0xf1d6d8>
10003120:	10003274 	orhi	zero,r2,201
10003124:	10003274 	orhi	zero,r2,201
10003128:	10003274 	orhi	zero,r2,201
1000312c:	10003384 	addi	zero,r2,206
10003130:	90003b1e 	bne	r18,zero,10003220 <__mulsf3+0x204>
10003134:	04400204 	movi	r17,8
10003138:	05c00084 	movi	r23,2
1000313c:	003fd206 	br	10003088 <__alt_data_end+0xf8003088>
10003140:	302b883a 	mov	r21,r6
10003144:	00800084 	movi	r2,2
10003148:	18802626 	beq	r3,r2,100031e4 <__mulsf3+0x1c8>
1000314c:	008000c4 	movi	r2,3
10003150:	1880b826 	beq	r3,r2,10003434 <__mulsf3+0x418>
10003154:	00800044 	movi	r2,1
10003158:	1880af1e 	bne	r3,r2,10003418 <__mulsf3+0x3fc>
1000315c:	a829883a 	mov	r20,r21
10003160:	0007883a 	mov	r3,zero
10003164:	0009883a 	mov	r4,zero
10003168:	18803fcc 	andi	r2,r3,255
1000316c:	100695fa 	slli	r3,r2,23
10003170:	a0803fcc 	andi	r2,r20,255
10003174:	100a97fa 	slli	r5,r2,31
10003178:	00802034 	movhi	r2,128
1000317c:	10bfffc4 	addi	r2,r2,-1
10003180:	2084703a 	and	r2,r4,r2
10003184:	10c4b03a 	or	r2,r2,r3
10003188:	1144b03a 	or	r2,r2,r5
1000318c:	dfc00a17 	ldw	ra,40(sp)
10003190:	df000917 	ldw	fp,36(sp)
10003194:	ddc00817 	ldw	r23,32(sp)
10003198:	dd800717 	ldw	r22,28(sp)
1000319c:	dd400617 	ldw	r21,24(sp)
100031a0:	dd000517 	ldw	r20,20(sp)
100031a4:	dcc00417 	ldw	r19,16(sp)
100031a8:	dc800317 	ldw	r18,12(sp)
100031ac:	dc400217 	ldw	r17,8(sp)
100031b0:	dc000117 	ldw	r16,4(sp)
100031b4:	dec00b04 	addi	sp,sp,44
100031b8:	f800283a 	ret
100031bc:	90000d1e 	bne	r18,zero,100031f4 <__mulsf3+0x1d8>
100031c0:	04400104 	movi	r17,4
100031c4:	05c00044 	movi	r23,1
100031c8:	003faf06 	br	10003088 <__alt_data_end+0xf8003088>
100031cc:	9806c03a 	cmpne	r3,r19,zero
100031d0:	18c00084 	addi	r3,r3,2
100031d4:	003fba06 	br	100030c0 <__alt_data_end+0xf80030c0>
100031d8:	9800141e 	bne	r19,zero,1000322c <__mulsf3+0x210>
100031dc:	00c00044 	movi	r3,1
100031e0:	003fb706 	br	100030c0 <__alt_data_end+0xf80030c0>
100031e4:	a829883a 	mov	r20,r21
100031e8:	00ffffc4 	movi	r3,-1
100031ec:	0009883a 	mov	r4,zero
100031f0:	003fdd06 	br	10003168 <__alt_data_end+0xf8003168>
100031f4:	9009883a 	mov	r4,r18
100031f8:	d9400015 	stw	r5,0(sp)
100031fc:	00059700 	call	10005970 <__clzsi2>
10003200:	10fffec4 	addi	r3,r2,-5
10003204:	043fe284 	movi	r16,-118
10003208:	90e4983a 	sll	r18,r18,r3
1000320c:	80a1c83a 	sub	r16,r16,r2
10003210:	0023883a 	mov	r17,zero
10003214:	002f883a 	mov	r23,zero
10003218:	d9400017 	ldw	r5,0(sp)
1000321c:	003f9a06 	br	10003088 <__alt_data_end+0xf8003088>
10003220:	04400304 	movi	r17,12
10003224:	05c000c4 	movi	r23,3
10003228:	003f9706 	br	10003088 <__alt_data_end+0xf8003088>
1000322c:	9809883a 	mov	r4,r19
10003230:	d9800015 	stw	r6,0(sp)
10003234:	00059700 	call	10005970 <__clzsi2>
10003238:	10fffec4 	addi	r3,r2,-5
1000323c:	98e6983a 	sll	r19,r19,r3
10003240:	00ffe284 	movi	r3,-118
10003244:	1885c83a 	sub	r2,r3,r2
10003248:	d9800017 	ldw	r6,0(sp)
1000324c:	0007883a 	mov	r3,zero
10003250:	003f9b06 	br	100030c0 <__alt_data_end+0xf80030c0>
10003254:	01002034 	movhi	r4,128
10003258:	0029883a 	mov	r20,zero
1000325c:	213fffc4 	addi	r4,r4,-1
10003260:	00ffffc4 	movi	r3,-1
10003264:	003fc006 	br	10003168 <__alt_data_end+0xf8003168>
10003268:	9027883a 	mov	r19,r18
1000326c:	b807883a 	mov	r3,r23
10003270:	003fb406 	br	10003144 <__alt_data_end+0xf8003144>
10003274:	9027883a 	mov	r19,r18
10003278:	e02b883a 	mov	r21,fp
1000327c:	b807883a 	mov	r3,r23
10003280:	003fb006 	br	10003144 <__alt_data_end+0xf8003144>
10003284:	9028d43a 	srli	r20,r18,16
10003288:	982cd43a 	srli	r22,r19,16
1000328c:	94bfffcc 	andi	r18,r18,65535
10003290:	9cffffcc 	andi	r19,r19,65535
10003294:	980b883a 	mov	r5,r19
10003298:	9009883a 	mov	r4,r18
1000329c:	d9c00015 	stw	r7,0(sp)
100032a0:	00059d40 	call	100059d4 <__mulsi3>
100032a4:	a00b883a 	mov	r5,r20
100032a8:	9809883a 	mov	r4,r19
100032ac:	1023883a 	mov	r17,r2
100032b0:	00059d40 	call	100059d4 <__mulsi3>
100032b4:	a009883a 	mov	r4,r20
100032b8:	b00b883a 	mov	r5,r22
100032bc:	1027883a 	mov	r19,r2
100032c0:	00059d40 	call	100059d4 <__mulsi3>
100032c4:	b00b883a 	mov	r5,r22
100032c8:	9009883a 	mov	r4,r18
100032cc:	1029883a 	mov	r20,r2
100032d0:	00059d40 	call	100059d4 <__mulsi3>
100032d4:	8806d43a 	srli	r3,r17,16
100032d8:	14c5883a 	add	r2,r2,r19
100032dc:	d9c00017 	ldw	r7,0(sp)
100032e0:	1885883a 	add	r2,r3,r2
100032e4:	14c0022e 	bgeu	r2,r19,100032f0 <__mulsf3+0x2d4>
100032e8:	00c00074 	movhi	r3,1
100032ec:	a0e9883a 	add	r20,r20,r3
100032f0:	1026943a 	slli	r19,r2,16
100032f4:	8c7fffcc 	andi	r17,r17,65535
100032f8:	1004d43a 	srli	r2,r2,16
100032fc:	9c63883a 	add	r17,r19,r17
10003300:	882691ba 	slli	r19,r17,6
10003304:	1505883a 	add	r2,r2,r20
10003308:	8822d6ba 	srli	r17,r17,26
1000330c:	100891ba 	slli	r4,r2,6
10003310:	9826c03a 	cmpne	r19,r19,zero
10003314:	9c62b03a 	or	r17,r19,r17
10003318:	8926b03a 	or	r19,r17,r4
1000331c:	9882002c 	andhi	r2,r19,2048
10003320:	10000426 	beq	r2,zero,10003334 <__mulsf3+0x318>
10003324:	9804d07a 	srli	r2,r19,1
10003328:	9900004c 	andi	r4,r19,1
1000332c:	3821883a 	mov	r16,r7
10003330:	1126b03a 	or	r19,r2,r4
10003334:	80c01fc4 	addi	r3,r16,127
10003338:	00c0210e 	bge	zero,r3,100033c0 <__mulsf3+0x3a4>
1000333c:	988001cc 	andi	r2,r19,7
10003340:	10000426 	beq	r2,zero,10003354 <__mulsf3+0x338>
10003344:	988003cc 	andi	r2,r19,15
10003348:	01000104 	movi	r4,4
1000334c:	11000126 	beq	r2,r4,10003354 <__mulsf3+0x338>
10003350:	9927883a 	add	r19,r19,r4
10003354:	9882002c 	andhi	r2,r19,2048
10003358:	10000426 	beq	r2,zero,1000336c <__mulsf3+0x350>
1000335c:	00be0034 	movhi	r2,63488
10003360:	10bfffc4 	addi	r2,r2,-1
10003364:	80c02004 	addi	r3,r16,128
10003368:	98a6703a 	and	r19,r19,r2
1000336c:	00803f84 	movi	r2,254
10003370:	10ff9c16 	blt	r2,r3,100031e4 <__alt_data_end+0xf80031e4>
10003374:	980891ba 	slli	r4,r19,6
10003378:	a829883a 	mov	r20,r21
1000337c:	2008d27a 	srli	r4,r4,9
10003380:	003f7906 	br	10003168 <__alt_data_end+0xf8003168>
10003384:	9080102c 	andhi	r2,r18,64
10003388:	10000826 	beq	r2,zero,100033ac <__mulsf3+0x390>
1000338c:	9880102c 	andhi	r2,r19,64
10003390:	1000061e 	bne	r2,zero,100033ac <__mulsf3+0x390>
10003394:	00802034 	movhi	r2,128
10003398:	99001034 	orhi	r4,r19,64
1000339c:	10bfffc4 	addi	r2,r2,-1
100033a0:	b029883a 	mov	r20,r22
100033a4:	2088703a 	and	r4,r4,r2
100033a8:	003fad06 	br	10003260 <__alt_data_end+0xf8003260>
100033ac:	00802034 	movhi	r2,128
100033b0:	91001034 	orhi	r4,r18,64
100033b4:	10bfffc4 	addi	r2,r2,-1
100033b8:	2088703a 	and	r4,r4,r2
100033bc:	003fa806 	br	10003260 <__alt_data_end+0xf8003260>
100033c0:	00800044 	movi	r2,1
100033c4:	10c7c83a 	sub	r3,r2,r3
100033c8:	008006c4 	movi	r2,27
100033cc:	10ff6316 	blt	r2,r3,1000315c <__alt_data_end+0xf800315c>
100033d0:	00800804 	movi	r2,32
100033d4:	10c5c83a 	sub	r2,r2,r3
100033d8:	9884983a 	sll	r2,r19,r2
100033dc:	98c6d83a 	srl	r3,r19,r3
100033e0:	1004c03a 	cmpne	r2,r2,zero
100033e4:	1884b03a 	or	r2,r3,r2
100033e8:	10c001cc 	andi	r3,r2,7
100033ec:	18000426 	beq	r3,zero,10003400 <__mulsf3+0x3e4>
100033f0:	10c003cc 	andi	r3,r2,15
100033f4:	01000104 	movi	r4,4
100033f8:	19000126 	beq	r3,r4,10003400 <__mulsf3+0x3e4>
100033fc:	1105883a 	add	r2,r2,r4
10003400:	10c1002c 	andhi	r3,r2,1024
10003404:	18000626 	beq	r3,zero,10003420 <__mulsf3+0x404>
10003408:	a829883a 	mov	r20,r21
1000340c:	00c00044 	movi	r3,1
10003410:	0009883a 	mov	r4,zero
10003414:	003f5406 	br	10003168 <__alt_data_end+0xf8003168>
10003418:	3821883a 	mov	r16,r7
1000341c:	003fc506 	br	10003334 <__alt_data_end+0xf8003334>
10003420:	100491ba 	slli	r2,r2,6
10003424:	a829883a 	mov	r20,r21
10003428:	0007883a 	mov	r3,zero
1000342c:	1008d27a 	srli	r4,r2,9
10003430:	003f4d06 	br	10003168 <__alt_data_end+0xf8003168>
10003434:	00802034 	movhi	r2,128
10003438:	99001034 	orhi	r4,r19,64
1000343c:	10bfffc4 	addi	r2,r2,-1
10003440:	a829883a 	mov	r20,r21
10003444:	2088703a 	and	r4,r4,r2
10003448:	003f8506 	br	10003260 <__alt_data_end+0xf8003260>

1000344c <__subsf3>:
1000344c:	defffc04 	addi	sp,sp,-16
10003450:	280cd5fa 	srli	r6,r5,23
10003454:	dc000015 	stw	r16,0(sp)
10003458:	01c02034 	movhi	r7,128
1000345c:	2020d5fa 	srli	r16,r4,23
10003460:	39ffffc4 	addi	r7,r7,-1
10003464:	3906703a 	and	r3,r7,r4
10003468:	dc400115 	stw	r17,4(sp)
1000346c:	394e703a 	and	r7,r7,r5
10003470:	2022d7fa 	srli	r17,r4,31
10003474:	dfc00315 	stw	ra,12(sp)
10003478:	dc800215 	stw	r18,8(sp)
1000347c:	31803fcc 	andi	r6,r6,255
10003480:	01003fc4 	movi	r4,255
10003484:	84003fcc 	andi	r16,r16,255
10003488:	180690fa 	slli	r3,r3,3
1000348c:	2804d7fa 	srli	r2,r5,31
10003490:	380e90fa 	slli	r7,r7,3
10003494:	31006d26 	beq	r6,r4,1000364c <__subsf3+0x200>
10003498:	1080005c 	xori	r2,r2,1
1000349c:	8189c83a 	sub	r4,r16,r6
100034a0:	14404f26 	beq	r2,r17,100035e0 <__subsf3+0x194>
100034a4:	0100770e 	bge	zero,r4,10003684 <__subsf3+0x238>
100034a8:	30001e1e 	bne	r6,zero,10003524 <__subsf3+0xd8>
100034ac:	38006a1e 	bne	r7,zero,10003658 <__subsf3+0x20c>
100034b0:	188001cc 	andi	r2,r3,7
100034b4:	10000426 	beq	r2,zero,100034c8 <__subsf3+0x7c>
100034b8:	188003cc 	andi	r2,r3,15
100034bc:	01000104 	movi	r4,4
100034c0:	11000126 	beq	r2,r4,100034c8 <__subsf3+0x7c>
100034c4:	1907883a 	add	r3,r3,r4
100034c8:	1881002c 	andhi	r2,r3,1024
100034cc:	10003926 	beq	r2,zero,100035b4 <__subsf3+0x168>
100034d0:	84000044 	addi	r16,r16,1
100034d4:	00803fc4 	movi	r2,255
100034d8:	80807526 	beq	r16,r2,100036b0 <__subsf3+0x264>
100034dc:	180691ba 	slli	r3,r3,6
100034e0:	8880004c 	andi	r2,r17,1
100034e4:	180ad27a 	srli	r5,r3,9
100034e8:	84003fcc 	andi	r16,r16,255
100034ec:	800695fa 	slli	r3,r16,23
100034f0:	10803fcc 	andi	r2,r2,255
100034f4:	01002034 	movhi	r4,128
100034f8:	213fffc4 	addi	r4,r4,-1
100034fc:	100497fa 	slli	r2,r2,31
10003500:	2920703a 	and	r16,r5,r4
10003504:	80e0b03a 	or	r16,r16,r3
10003508:	8084b03a 	or	r2,r16,r2
1000350c:	dfc00317 	ldw	ra,12(sp)
10003510:	dc800217 	ldw	r18,8(sp)
10003514:	dc400117 	ldw	r17,4(sp)
10003518:	dc000017 	ldw	r16,0(sp)
1000351c:	dec00404 	addi	sp,sp,16
10003520:	f800283a 	ret
10003524:	00803fc4 	movi	r2,255
10003528:	80bfe126 	beq	r16,r2,100034b0 <__alt_data_end+0xf80034b0>
1000352c:	39c10034 	orhi	r7,r7,1024
10003530:	008006c4 	movi	r2,27
10003534:	11007416 	blt	r2,r4,10003708 <__subsf3+0x2bc>
10003538:	00800804 	movi	r2,32
1000353c:	1105c83a 	sub	r2,r2,r4
10003540:	3884983a 	sll	r2,r7,r2
10003544:	390ed83a 	srl	r7,r7,r4
10003548:	1008c03a 	cmpne	r4,r2,zero
1000354c:	390eb03a 	or	r7,r7,r4
10003550:	19c7c83a 	sub	r3,r3,r7
10003554:	1881002c 	andhi	r2,r3,1024
10003558:	10001426 	beq	r2,zero,100035ac <__subsf3+0x160>
1000355c:	04810034 	movhi	r18,1024
10003560:	94bfffc4 	addi	r18,r18,-1
10003564:	1ca4703a 	and	r18,r3,r18
10003568:	9009883a 	mov	r4,r18
1000356c:	00059700 	call	10005970 <__clzsi2>
10003570:	10bffec4 	addi	r2,r2,-5
10003574:	90a4983a 	sll	r18,r18,r2
10003578:	14005116 	blt	r2,r16,100036c0 <__subsf3+0x274>
1000357c:	1405c83a 	sub	r2,r2,r16
10003580:	10c00044 	addi	r3,r2,1
10003584:	00800804 	movi	r2,32
10003588:	10c5c83a 	sub	r2,r2,r3
1000358c:	9084983a 	sll	r2,r18,r2
10003590:	90e4d83a 	srl	r18,r18,r3
10003594:	0021883a 	mov	r16,zero
10003598:	1006c03a 	cmpne	r3,r2,zero
1000359c:	90c6b03a 	or	r3,r18,r3
100035a0:	003fc306 	br	100034b0 <__alt_data_end+0xf80034b0>
100035a4:	2000e026 	beq	r4,zero,10003928 <__subsf3+0x4dc>
100035a8:	2007883a 	mov	r3,r4
100035ac:	188001cc 	andi	r2,r3,7
100035b0:	103fc11e 	bne	r2,zero,100034b8 <__alt_data_end+0xf80034b8>
100035b4:	180ad0fa 	srli	r5,r3,3
100035b8:	00c03fc4 	movi	r3,255
100035bc:	8880004c 	andi	r2,r17,1
100035c0:	80c0031e 	bne	r16,r3,100035d0 <__subsf3+0x184>
100035c4:	28006d26 	beq	r5,zero,1000377c <__subsf3+0x330>
100035c8:	29401034 	orhi	r5,r5,64
100035cc:	043fffc4 	movi	r16,-1
100035d0:	00c02034 	movhi	r3,128
100035d4:	18ffffc4 	addi	r3,r3,-1
100035d8:	28ca703a 	and	r5,r5,r3
100035dc:	003fc206 	br	100034e8 <__alt_data_end+0xf80034e8>
100035e0:	01003c0e 	bge	zero,r4,100036d4 <__subsf3+0x288>
100035e4:	30002126 	beq	r6,zero,1000366c <__subsf3+0x220>
100035e8:	01403fc4 	movi	r5,255
100035ec:	817fb026 	beq	r16,r5,100034b0 <__alt_data_end+0xf80034b0>
100035f0:	39c10034 	orhi	r7,r7,1024
100035f4:	014006c4 	movi	r5,27
100035f8:	29007416 	blt	r5,r4,100037cc <__subsf3+0x380>
100035fc:	01400804 	movi	r5,32
10003600:	290bc83a 	sub	r5,r5,r4
10003604:	394a983a 	sll	r5,r7,r5
10003608:	390ed83a 	srl	r7,r7,r4
1000360c:	2808c03a 	cmpne	r4,r5,zero
10003610:	390eb03a 	or	r7,r7,r4
10003614:	19c7883a 	add	r3,r3,r7
10003618:	1901002c 	andhi	r4,r3,1024
1000361c:	20003826 	beq	r4,zero,10003700 <__subsf3+0x2b4>
10003620:	84000044 	addi	r16,r16,1
10003624:	01003fc4 	movi	r4,255
10003628:	81005426 	beq	r16,r4,1000377c <__subsf3+0x330>
1000362c:	1023883a 	mov	r17,r2
10003630:	00bf0034 	movhi	r2,64512
10003634:	10bfffc4 	addi	r2,r2,-1
10003638:	1900004c 	andi	r4,r3,1
1000363c:	1886703a 	and	r3,r3,r2
10003640:	1806d07a 	srli	r3,r3,1
10003644:	1906b03a 	or	r3,r3,r4
10003648:	003f9906 	br	100034b0 <__alt_data_end+0xf80034b0>
1000364c:	383f9226 	beq	r7,zero,10003498 <__alt_data_end+0xf8003498>
10003650:	10803fcc 	andi	r2,r2,255
10003654:	003f9106 	br	1000349c <__alt_data_end+0xf800349c>
10003658:	213fffc4 	addi	r4,r4,-1
1000365c:	203fbc26 	beq	r4,zero,10003550 <__alt_data_end+0xf8003550>
10003660:	00803fc4 	movi	r2,255
10003664:	80bfb21e 	bne	r16,r2,10003530 <__alt_data_end+0xf8003530>
10003668:	003f9106 	br	100034b0 <__alt_data_end+0xf80034b0>
1000366c:	383f9026 	beq	r7,zero,100034b0 <__alt_data_end+0xf80034b0>
10003670:	213fffc4 	addi	r4,r4,-1
10003674:	203fe726 	beq	r4,zero,10003614 <__alt_data_end+0xf8003614>
10003678:	01403fc4 	movi	r5,255
1000367c:	817fdd1e 	bne	r16,r5,100035f4 <__alt_data_end+0xf80035f4>
10003680:	003f8b06 	br	100034b0 <__alt_data_end+0xf80034b0>
10003684:	2000221e 	bne	r4,zero,10003710 <__subsf3+0x2c4>
10003688:	81000044 	addi	r4,r16,1
1000368c:	21003fcc 	andi	r4,r4,255
10003690:	01400044 	movi	r5,1
10003694:	2900470e 	bge	r5,r4,100037b4 <__subsf3+0x368>
10003698:	19e5c83a 	sub	r18,r3,r7
1000369c:	9141002c 	andhi	r5,r18,1024
100036a0:	28002d26 	beq	r5,zero,10003758 <__subsf3+0x30c>
100036a4:	38e5c83a 	sub	r18,r7,r3
100036a8:	1023883a 	mov	r17,r2
100036ac:	003fae06 	br	10003568 <__alt_data_end+0xf8003568>
100036b0:	8880004c 	andi	r2,r17,1
100036b4:	043fffc4 	movi	r16,-1
100036b8:	000b883a 	mov	r5,zero
100036bc:	003f8a06 	br	100034e8 <__alt_data_end+0xf80034e8>
100036c0:	00ff0034 	movhi	r3,64512
100036c4:	18ffffc4 	addi	r3,r3,-1
100036c8:	80a1c83a 	sub	r16,r16,r2
100036cc:	90c6703a 	and	r3,r18,r3
100036d0:	003f7706 	br	100034b0 <__alt_data_end+0xf80034b0>
100036d4:	2000431e 	bne	r4,zero,100037e4 <__subsf3+0x398>
100036d8:	81000044 	addi	r4,r16,1
100036dc:	21803fcc 	andi	r6,r4,255
100036e0:	01400044 	movi	r5,1
100036e4:	2980280e 	bge	r5,r6,10003788 <__subsf3+0x33c>
100036e8:	01403fc4 	movi	r5,255
100036ec:	21402326 	beq	r4,r5,1000377c <__subsf3+0x330>
100036f0:	19c7883a 	add	r3,r3,r7
100036f4:	1806d07a 	srli	r3,r3,1
100036f8:	2021883a 	mov	r16,r4
100036fc:	003f6c06 	br	100034b0 <__alt_data_end+0xf80034b0>
10003700:	1023883a 	mov	r17,r2
10003704:	003fa906 	br	100035ac <__alt_data_end+0xf80035ac>
10003708:	01c00044 	movi	r7,1
1000370c:	003f9006 	br	10003550 <__alt_data_end+0xf8003550>
10003710:	8000151e 	bne	r16,zero,10003768 <__subsf3+0x31c>
10003714:	18002f26 	beq	r3,zero,100037d4 <__subsf3+0x388>
10003718:	0108303a 	nor	r4,zero,r4
1000371c:	20000a26 	beq	r4,zero,10003748 <__subsf3+0x2fc>
10003720:	01403fc4 	movi	r5,255
10003724:	31402b26 	beq	r6,r5,100037d4 <__subsf3+0x388>
10003728:	014006c4 	movi	r5,27
1000372c:	29006e16 	blt	r5,r4,100038e8 <__subsf3+0x49c>
10003730:	01400804 	movi	r5,32
10003734:	290bc83a 	sub	r5,r5,r4
10003738:	194a983a 	sll	r5,r3,r5
1000373c:	1908d83a 	srl	r4,r3,r4
10003740:	2806c03a 	cmpne	r3,r5,zero
10003744:	20c6b03a 	or	r3,r4,r3
10003748:	38c7c83a 	sub	r3,r7,r3
1000374c:	3021883a 	mov	r16,r6
10003750:	1023883a 	mov	r17,r2
10003754:	003f7f06 	br	10003554 <__alt_data_end+0xf8003554>
10003758:	903f831e 	bne	r18,zero,10003568 <__alt_data_end+0xf8003568>
1000375c:	0005883a 	mov	r2,zero
10003760:	0021883a 	mov	r16,zero
10003764:	003f9a06 	br	100035d0 <__alt_data_end+0xf80035d0>
10003768:	01403fc4 	movi	r5,255
1000376c:	31401926 	beq	r6,r5,100037d4 <__subsf3+0x388>
10003770:	0109c83a 	sub	r4,zero,r4
10003774:	18c10034 	orhi	r3,r3,1024
10003778:	003feb06 	br	10003728 <__alt_data_end+0xf8003728>
1000377c:	043fffc4 	movi	r16,-1
10003780:	000b883a 	mov	r5,zero
10003784:	003f5806 	br	100034e8 <__alt_data_end+0xf80034e8>
10003788:	8000481e 	bne	r16,zero,100038ac <__subsf3+0x460>
1000378c:	18006226 	beq	r3,zero,10003918 <__subsf3+0x4cc>
10003790:	383f4726 	beq	r7,zero,100034b0 <__alt_data_end+0xf80034b0>
10003794:	19c7883a 	add	r3,r3,r7
10003798:	1881002c 	andhi	r2,r3,1024
1000379c:	103f8326 	beq	r2,zero,100035ac <__alt_data_end+0xf80035ac>
100037a0:	00bf0034 	movhi	r2,64512
100037a4:	10bfffc4 	addi	r2,r2,-1
100037a8:	2821883a 	mov	r16,r5
100037ac:	1886703a 	and	r3,r3,r2
100037b0:	003f3f06 	br	100034b0 <__alt_data_end+0xf80034b0>
100037b4:	80001c1e 	bne	r16,zero,10003828 <__subsf3+0x3dc>
100037b8:	1800261e 	bne	r3,zero,10003854 <__subsf3+0x408>
100037bc:	38004c26 	beq	r7,zero,100038f0 <__subsf3+0x4a4>
100037c0:	3807883a 	mov	r3,r7
100037c4:	1023883a 	mov	r17,r2
100037c8:	003f3906 	br	100034b0 <__alt_data_end+0xf80034b0>
100037cc:	01c00044 	movi	r7,1
100037d0:	003f9006 	br	10003614 <__alt_data_end+0xf8003614>
100037d4:	3807883a 	mov	r3,r7
100037d8:	3021883a 	mov	r16,r6
100037dc:	1023883a 	mov	r17,r2
100037e0:	003f3306 	br	100034b0 <__alt_data_end+0xf80034b0>
100037e4:	8000161e 	bne	r16,zero,10003840 <__subsf3+0x3f4>
100037e8:	18002d26 	beq	r3,zero,100038a0 <__subsf3+0x454>
100037ec:	0108303a 	nor	r4,zero,r4
100037f0:	20000a26 	beq	r4,zero,1000381c <__subsf3+0x3d0>
100037f4:	01403fc4 	movi	r5,255
100037f8:	31402926 	beq	r6,r5,100038a0 <__subsf3+0x454>
100037fc:	014006c4 	movi	r5,27
10003800:	29004716 	blt	r5,r4,10003920 <__subsf3+0x4d4>
10003804:	01400804 	movi	r5,32
10003808:	290bc83a 	sub	r5,r5,r4
1000380c:	194a983a 	sll	r5,r3,r5
10003810:	1908d83a 	srl	r4,r3,r4
10003814:	2806c03a 	cmpne	r3,r5,zero
10003818:	20c6b03a 	or	r3,r4,r3
1000381c:	19c7883a 	add	r3,r3,r7
10003820:	3021883a 	mov	r16,r6
10003824:	003f7c06 	br	10003618 <__alt_data_end+0xf8003618>
10003828:	1800111e 	bne	r3,zero,10003870 <__subsf3+0x424>
1000382c:	38003326 	beq	r7,zero,100038fc <__subsf3+0x4b0>
10003830:	3807883a 	mov	r3,r7
10003834:	1023883a 	mov	r17,r2
10003838:	04003fc4 	movi	r16,255
1000383c:	003f1c06 	br	100034b0 <__alt_data_end+0xf80034b0>
10003840:	01403fc4 	movi	r5,255
10003844:	31401626 	beq	r6,r5,100038a0 <__subsf3+0x454>
10003848:	0109c83a 	sub	r4,zero,r4
1000384c:	18c10034 	orhi	r3,r3,1024
10003850:	003fea06 	br	100037fc <__alt_data_end+0xf80037fc>
10003854:	383f1626 	beq	r7,zero,100034b0 <__alt_data_end+0xf80034b0>
10003858:	19c9c83a 	sub	r4,r3,r7
1000385c:	2141002c 	andhi	r5,r4,1024
10003860:	283f5026 	beq	r5,zero,100035a4 <__alt_data_end+0xf80035a4>
10003864:	38c7c83a 	sub	r3,r7,r3
10003868:	1023883a 	mov	r17,r2
1000386c:	003f1006 	br	100034b0 <__alt_data_end+0xf80034b0>
10003870:	38001b26 	beq	r7,zero,100038e0 <__subsf3+0x494>
10003874:	1806d0fa 	srli	r3,r3,3
10003878:	1900102c 	andhi	r4,r3,64
1000387c:	20000526 	beq	r4,zero,10003894 <__subsf3+0x448>
10003880:	380ed0fa 	srli	r7,r7,3
10003884:	3900102c 	andhi	r4,r7,64
10003888:	2000021e 	bne	r4,zero,10003894 <__subsf3+0x448>
1000388c:	3807883a 	mov	r3,r7
10003890:	1023883a 	mov	r17,r2
10003894:	180690fa 	slli	r3,r3,3
10003898:	04003fc4 	movi	r16,255
1000389c:	003f0406 	br	100034b0 <__alt_data_end+0xf80034b0>
100038a0:	3807883a 	mov	r3,r7
100038a4:	3021883a 	mov	r16,r6
100038a8:	003f0106 	br	100034b0 <__alt_data_end+0xf80034b0>
100038ac:	18001726 	beq	r3,zero,1000390c <__subsf3+0x4c0>
100038b0:	38000b26 	beq	r7,zero,100038e0 <__subsf3+0x494>
100038b4:	1806d0fa 	srli	r3,r3,3
100038b8:	1900102c 	andhi	r4,r3,64
100038bc:	20000426 	beq	r4,zero,100038d0 <__subsf3+0x484>
100038c0:	380ed0fa 	srli	r7,r7,3
100038c4:	3900102c 	andhi	r4,r7,64
100038c8:	2000011e 	bne	r4,zero,100038d0 <__subsf3+0x484>
100038cc:	3807883a 	mov	r3,r7
100038d0:	180690fa 	slli	r3,r3,3
100038d4:	1023883a 	mov	r17,r2
100038d8:	04003fc4 	movi	r16,255
100038dc:	003ef406 	br	100034b0 <__alt_data_end+0xf80034b0>
100038e0:	04003fc4 	movi	r16,255
100038e4:	003ef206 	br	100034b0 <__alt_data_end+0xf80034b0>
100038e8:	00c00044 	movi	r3,1
100038ec:	003f9606 	br	10003748 <__alt_data_end+0xf8003748>
100038f0:	000b883a 	mov	r5,zero
100038f4:	0005883a 	mov	r2,zero
100038f8:	003f3506 	br	100035d0 <__alt_data_end+0xf80035d0>
100038fc:	01402034 	movhi	r5,128
10003900:	297fffc4 	addi	r5,r5,-1
10003904:	0005883a 	mov	r2,zero
10003908:	003f2f06 	br	100035c8 <__alt_data_end+0xf80035c8>
1000390c:	3807883a 	mov	r3,r7
10003910:	04003fc4 	movi	r16,255
10003914:	003ee606 	br	100034b0 <__alt_data_end+0xf80034b0>
10003918:	3807883a 	mov	r3,r7
1000391c:	003ee406 	br	100034b0 <__alt_data_end+0xf80034b0>
10003920:	00c00044 	movi	r3,1
10003924:	003fbd06 	br	1000381c <__alt_data_end+0xf800381c>
10003928:	0005883a 	mov	r2,zero
1000392c:	003f2806 	br	100035d0 <__alt_data_end+0xf80035d0>

10003930 <__fixsfsi>:
10003930:	200ad5fa 	srli	r5,r4,23
10003934:	00c02034 	movhi	r3,128
10003938:	18ffffc4 	addi	r3,r3,-1
1000393c:	29403fcc 	andi	r5,r5,255
10003940:	00801f84 	movi	r2,126
10003944:	1906703a 	and	r3,r3,r4
10003948:	2008d7fa 	srli	r4,r4,31
1000394c:	11400e0e 	bge	r2,r5,10003988 <__fixsfsi+0x58>
10003950:	00802744 	movi	r2,157
10003954:	11400816 	blt	r2,r5,10003978 <__fixsfsi+0x48>
10003958:	00802544 	movi	r2,149
1000395c:	18c02034 	orhi	r3,r3,128
10003960:	11400b0e 	bge	r2,r5,10003990 <__fixsfsi+0x60>
10003964:	28bfda84 	addi	r2,r5,-150
10003968:	1884983a 	sll	r2,r3,r2
1000396c:	20000726 	beq	r4,zero,1000398c <__fixsfsi+0x5c>
10003970:	0085c83a 	sub	r2,zero,r2
10003974:	f800283a 	ret
10003978:	00a00034 	movhi	r2,32768
1000397c:	10bfffc4 	addi	r2,r2,-1
10003980:	2085883a 	add	r2,r4,r2
10003984:	f800283a 	ret
10003988:	0005883a 	mov	r2,zero
1000398c:	f800283a 	ret
10003990:	00802584 	movi	r2,150
10003994:	1145c83a 	sub	r2,r2,r5
10003998:	1884d83a 	srl	r2,r3,r2
1000399c:	003ff306 	br	1000396c <__alt_data_end+0xf800396c>

100039a0 <__floatsisf>:
100039a0:	defffd04 	addi	sp,sp,-12
100039a4:	dfc00215 	stw	ra,8(sp)
100039a8:	dc400115 	stw	r17,4(sp)
100039ac:	dc000015 	stw	r16,0(sp)
100039b0:	20003526 	beq	r4,zero,10003a88 <__floatsisf+0xe8>
100039b4:	2021883a 	mov	r16,r4
100039b8:	2022d7fa 	srli	r17,r4,31
100039bc:	20003616 	blt	r4,zero,10003a98 <__floatsisf+0xf8>
100039c0:	8009883a 	mov	r4,r16
100039c4:	00059700 	call	10005970 <__clzsi2>
100039c8:	00c02784 	movi	r3,158
100039cc:	1887c83a 	sub	r3,r3,r2
100039d0:	01002584 	movi	r4,150
100039d4:	20c01416 	blt	r4,r3,10003a28 <__floatsisf+0x88>
100039d8:	20c9c83a 	sub	r4,r4,r3
100039dc:	8120983a 	sll	r16,r16,r4
100039e0:	00802034 	movhi	r2,128
100039e4:	10bfffc4 	addi	r2,r2,-1
100039e8:	8809883a 	mov	r4,r17
100039ec:	80a0703a 	and	r16,r16,r2
100039f0:	18803fcc 	andi	r2,r3,255
100039f4:	100695fa 	slli	r3,r2,23
100039f8:	20803fcc 	andi	r2,r4,255
100039fc:	100897fa 	slli	r4,r2,31
10003a00:	00802034 	movhi	r2,128
10003a04:	10bfffc4 	addi	r2,r2,-1
10003a08:	8084703a 	and	r2,r16,r2
10003a0c:	10c4b03a 	or	r2,r2,r3
10003a10:	1104b03a 	or	r2,r2,r4
10003a14:	dfc00217 	ldw	ra,8(sp)
10003a18:	dc400117 	ldw	r17,4(sp)
10003a1c:	dc000017 	ldw	r16,0(sp)
10003a20:	dec00304 	addi	sp,sp,12
10003a24:	f800283a 	ret
10003a28:	01002644 	movi	r4,153
10003a2c:	20c01c16 	blt	r4,r3,10003aa0 <__floatsisf+0x100>
10003a30:	20c9c83a 	sub	r4,r4,r3
10003a34:	8120983a 	sll	r16,r16,r4
10003a38:	013f0034 	movhi	r4,64512
10003a3c:	213fffc4 	addi	r4,r4,-1
10003a40:	814001cc 	andi	r5,r16,7
10003a44:	8108703a 	and	r4,r16,r4
10003a48:	28000426 	beq	r5,zero,10003a5c <__floatsisf+0xbc>
10003a4c:	840003cc 	andi	r16,r16,15
10003a50:	01400104 	movi	r5,4
10003a54:	81400126 	beq	r16,r5,10003a5c <__floatsisf+0xbc>
10003a58:	2149883a 	add	r4,r4,r5
10003a5c:	2141002c 	andhi	r5,r4,1024
10003a60:	28000526 	beq	r5,zero,10003a78 <__floatsisf+0xd8>
10003a64:	00c027c4 	movi	r3,159
10003a68:	1887c83a 	sub	r3,r3,r2
10003a6c:	00bf0034 	movhi	r2,64512
10003a70:	10bfffc4 	addi	r2,r2,-1
10003a74:	2088703a 	and	r4,r4,r2
10003a78:	202091ba 	slli	r16,r4,6
10003a7c:	8809883a 	mov	r4,r17
10003a80:	8020d27a 	srli	r16,r16,9
10003a84:	003fda06 	br	100039f0 <__alt_data_end+0xf80039f0>
10003a88:	0009883a 	mov	r4,zero
10003a8c:	0007883a 	mov	r3,zero
10003a90:	0021883a 	mov	r16,zero
10003a94:	003fd606 	br	100039f0 <__alt_data_end+0xf80039f0>
10003a98:	0121c83a 	sub	r16,zero,r4
10003a9c:	003fc806 	br	100039c0 <__alt_data_end+0xf80039c0>
10003aa0:	01002e44 	movi	r4,185
10003aa4:	20c9c83a 	sub	r4,r4,r3
10003aa8:	01400144 	movi	r5,5
10003aac:	8108983a 	sll	r4,r16,r4
10003ab0:	288bc83a 	sub	r5,r5,r2
10003ab4:	8160d83a 	srl	r16,r16,r5
10003ab8:	2008c03a 	cmpne	r4,r4,zero
10003abc:	8120b03a 	or	r16,r16,r4
10003ac0:	003fdd06 	br	10003a38 <__alt_data_end+0xf8003a38>

10003ac4 <__floatunsisf>:
10003ac4:	defffe04 	addi	sp,sp,-8
10003ac8:	dfc00115 	stw	ra,4(sp)
10003acc:	dc000015 	stw	r16,0(sp)
10003ad0:	20002c26 	beq	r4,zero,10003b84 <__floatunsisf+0xc0>
10003ad4:	2021883a 	mov	r16,r4
10003ad8:	00059700 	call	10005970 <__clzsi2>
10003adc:	00c02784 	movi	r3,158
10003ae0:	1887c83a 	sub	r3,r3,r2
10003ae4:	01002584 	movi	r4,150
10003ae8:	20c00f16 	blt	r4,r3,10003b28 <__floatunsisf+0x64>
10003aec:	20c9c83a 	sub	r4,r4,r3
10003af0:	8108983a 	sll	r4,r16,r4
10003af4:	00802034 	movhi	r2,128
10003af8:	10bfffc4 	addi	r2,r2,-1
10003afc:	2088703a 	and	r4,r4,r2
10003b00:	18803fcc 	andi	r2,r3,255
10003b04:	100695fa 	slli	r3,r2,23
10003b08:	00802034 	movhi	r2,128
10003b0c:	10bfffc4 	addi	r2,r2,-1
10003b10:	2084703a 	and	r2,r4,r2
10003b14:	10c4b03a 	or	r2,r2,r3
10003b18:	dfc00117 	ldw	ra,4(sp)
10003b1c:	dc000017 	ldw	r16,0(sp)
10003b20:	dec00204 	addi	sp,sp,8
10003b24:	f800283a 	ret
10003b28:	01002644 	movi	r4,153
10003b2c:	20c01816 	blt	r4,r3,10003b90 <__floatunsisf+0xcc>
10003b30:	20c9c83a 	sub	r4,r4,r3
10003b34:	8108983a 	sll	r4,r16,r4
10003b38:	017f0034 	movhi	r5,64512
10003b3c:	297fffc4 	addi	r5,r5,-1
10003b40:	218001cc 	andi	r6,r4,7
10003b44:	214a703a 	and	r5,r4,r5
10003b48:	30000426 	beq	r6,zero,10003b5c <__floatunsisf+0x98>
10003b4c:	210003cc 	andi	r4,r4,15
10003b50:	01800104 	movi	r6,4
10003b54:	21800126 	beq	r4,r6,10003b5c <__floatunsisf+0x98>
10003b58:	298b883a 	add	r5,r5,r6
10003b5c:	2901002c 	andhi	r4,r5,1024
10003b60:	20000526 	beq	r4,zero,10003b78 <__floatunsisf+0xb4>
10003b64:	00c027c4 	movi	r3,159
10003b68:	1887c83a 	sub	r3,r3,r2
10003b6c:	00bf0034 	movhi	r2,64512
10003b70:	10bfffc4 	addi	r2,r2,-1
10003b74:	288a703a 	and	r5,r5,r2
10003b78:	280891ba 	slli	r4,r5,6
10003b7c:	2008d27a 	srli	r4,r4,9
10003b80:	003fdf06 	br	10003b00 <__alt_data_end+0xf8003b00>
10003b84:	0007883a 	mov	r3,zero
10003b88:	0009883a 	mov	r4,zero
10003b8c:	003fdc06 	br	10003b00 <__alt_data_end+0xf8003b00>
10003b90:	01402e44 	movi	r5,185
10003b94:	28cbc83a 	sub	r5,r5,r3
10003b98:	01000144 	movi	r4,5
10003b9c:	2089c83a 	sub	r4,r4,r2
10003ba0:	814a983a 	sll	r5,r16,r5
10003ba4:	8108d83a 	srl	r4,r16,r4
10003ba8:	2820c03a 	cmpne	r16,r5,zero
10003bac:	2408b03a 	or	r4,r4,r16
10003bb0:	003fe106 	br	10003b38 <__alt_data_end+0xf8003b38>

10003bb4 <__adddf3>:
10003bb4:	02c00434 	movhi	r11,16
10003bb8:	5affffc4 	addi	r11,r11,-1
10003bbc:	2806d7fa 	srli	r3,r5,31
10003bc0:	2ad4703a 	and	r10,r5,r11
10003bc4:	3ad2703a 	and	r9,r7,r11
10003bc8:	3804d53a 	srli	r2,r7,20
10003bcc:	3018d77a 	srli	r12,r6,29
10003bd0:	280ad53a 	srli	r5,r5,20
10003bd4:	501490fa 	slli	r10,r10,3
10003bd8:	2010d77a 	srli	r8,r4,29
10003bdc:	481290fa 	slli	r9,r9,3
10003be0:	380ed7fa 	srli	r7,r7,31
10003be4:	defffb04 	addi	sp,sp,-20
10003be8:	dc800215 	stw	r18,8(sp)
10003bec:	dc400115 	stw	r17,4(sp)
10003bf0:	dc000015 	stw	r16,0(sp)
10003bf4:	dfc00415 	stw	ra,16(sp)
10003bf8:	dcc00315 	stw	r19,12(sp)
10003bfc:	1c803fcc 	andi	r18,r3,255
10003c00:	2c01ffcc 	andi	r16,r5,2047
10003c04:	5210b03a 	or	r8,r10,r8
10003c08:	202290fa 	slli	r17,r4,3
10003c0c:	1081ffcc 	andi	r2,r2,2047
10003c10:	4b12b03a 	or	r9,r9,r12
10003c14:	300c90fa 	slli	r6,r6,3
10003c18:	91c07526 	beq	r18,r7,10003df0 <__adddf3+0x23c>
10003c1c:	8087c83a 	sub	r3,r16,r2
10003c20:	00c0ab0e 	bge	zero,r3,10003ed0 <__adddf3+0x31c>
10003c24:	10002a1e 	bne	r2,zero,10003cd0 <__adddf3+0x11c>
10003c28:	4984b03a 	or	r2,r9,r6
10003c2c:	1000961e 	bne	r2,zero,10003e88 <__adddf3+0x2d4>
10003c30:	888001cc 	andi	r2,r17,7
10003c34:	10000726 	beq	r2,zero,10003c54 <__adddf3+0xa0>
10003c38:	888003cc 	andi	r2,r17,15
10003c3c:	00c00104 	movi	r3,4
10003c40:	10c00426 	beq	r2,r3,10003c54 <__adddf3+0xa0>
10003c44:	88c7883a 	add	r3,r17,r3
10003c48:	1c63803a 	cmpltu	r17,r3,r17
10003c4c:	4451883a 	add	r8,r8,r17
10003c50:	1823883a 	mov	r17,r3
10003c54:	4080202c 	andhi	r2,r8,128
10003c58:	10005926 	beq	r2,zero,10003dc0 <__adddf3+0x20c>
10003c5c:	84000044 	addi	r16,r16,1
10003c60:	0081ffc4 	movi	r2,2047
10003c64:	8080ba26 	beq	r16,r2,10003f50 <__adddf3+0x39c>
10003c68:	00bfe034 	movhi	r2,65408
10003c6c:	10bfffc4 	addi	r2,r2,-1
10003c70:	4090703a 	and	r8,r8,r2
10003c74:	4004977a 	slli	r2,r8,29
10003c78:	4010927a 	slli	r8,r8,9
10003c7c:	8822d0fa 	srli	r17,r17,3
10003c80:	8401ffcc 	andi	r16,r16,2047
10003c84:	4010d33a 	srli	r8,r8,12
10003c88:	9007883a 	mov	r3,r18
10003c8c:	1444b03a 	or	r2,r2,r17
10003c90:	8401ffcc 	andi	r16,r16,2047
10003c94:	8020953a 	slli	r16,r16,20
10003c98:	18c03fcc 	andi	r3,r3,255
10003c9c:	01000434 	movhi	r4,16
10003ca0:	213fffc4 	addi	r4,r4,-1
10003ca4:	180697fa 	slli	r3,r3,31
10003ca8:	4110703a 	and	r8,r8,r4
10003cac:	4410b03a 	or	r8,r8,r16
10003cb0:	40c6b03a 	or	r3,r8,r3
10003cb4:	dfc00417 	ldw	ra,16(sp)
10003cb8:	dcc00317 	ldw	r19,12(sp)
10003cbc:	dc800217 	ldw	r18,8(sp)
10003cc0:	dc400117 	ldw	r17,4(sp)
10003cc4:	dc000017 	ldw	r16,0(sp)
10003cc8:	dec00504 	addi	sp,sp,20
10003ccc:	f800283a 	ret
10003cd0:	0081ffc4 	movi	r2,2047
10003cd4:	80bfd626 	beq	r16,r2,10003c30 <__alt_data_end+0xf8003c30>
10003cd8:	4a402034 	orhi	r9,r9,128
10003cdc:	00800e04 	movi	r2,56
10003ce0:	10c09f16 	blt	r2,r3,10003f60 <__adddf3+0x3ac>
10003ce4:	008007c4 	movi	r2,31
10003ce8:	10c0c216 	blt	r2,r3,10003ff4 <__adddf3+0x440>
10003cec:	00800804 	movi	r2,32
10003cf0:	10c5c83a 	sub	r2,r2,r3
10003cf4:	488a983a 	sll	r5,r9,r2
10003cf8:	30c8d83a 	srl	r4,r6,r3
10003cfc:	3084983a 	sll	r2,r6,r2
10003d00:	48c6d83a 	srl	r3,r9,r3
10003d04:	290cb03a 	or	r6,r5,r4
10003d08:	1004c03a 	cmpne	r2,r2,zero
10003d0c:	308cb03a 	or	r6,r6,r2
10003d10:	898dc83a 	sub	r6,r17,r6
10003d14:	89a3803a 	cmpltu	r17,r17,r6
10003d18:	40d1c83a 	sub	r8,r8,r3
10003d1c:	4451c83a 	sub	r8,r8,r17
10003d20:	3023883a 	mov	r17,r6
10003d24:	4080202c 	andhi	r2,r8,128
10003d28:	10002326 	beq	r2,zero,10003db8 <__adddf3+0x204>
10003d2c:	04c02034 	movhi	r19,128
10003d30:	9cffffc4 	addi	r19,r19,-1
10003d34:	44e6703a 	and	r19,r8,r19
10003d38:	98007626 	beq	r19,zero,10003f14 <__adddf3+0x360>
10003d3c:	9809883a 	mov	r4,r19
10003d40:	00059700 	call	10005970 <__clzsi2>
10003d44:	10fffe04 	addi	r3,r2,-8
10003d48:	010007c4 	movi	r4,31
10003d4c:	20c07716 	blt	r4,r3,10003f2c <__adddf3+0x378>
10003d50:	00800804 	movi	r2,32
10003d54:	10c5c83a 	sub	r2,r2,r3
10003d58:	8884d83a 	srl	r2,r17,r2
10003d5c:	98d0983a 	sll	r8,r19,r3
10003d60:	88e2983a 	sll	r17,r17,r3
10003d64:	1204b03a 	or	r2,r2,r8
10003d68:	1c007416 	blt	r3,r16,10003f3c <__adddf3+0x388>
10003d6c:	1c21c83a 	sub	r16,r3,r16
10003d70:	82000044 	addi	r8,r16,1
10003d74:	00c007c4 	movi	r3,31
10003d78:	1a009116 	blt	r3,r8,10003fc0 <__adddf3+0x40c>
10003d7c:	00c00804 	movi	r3,32
10003d80:	1a07c83a 	sub	r3,r3,r8
10003d84:	8a08d83a 	srl	r4,r17,r8
10003d88:	88e2983a 	sll	r17,r17,r3
10003d8c:	10c6983a 	sll	r3,r2,r3
10003d90:	1210d83a 	srl	r8,r2,r8
10003d94:	8804c03a 	cmpne	r2,r17,zero
10003d98:	1906b03a 	or	r3,r3,r4
10003d9c:	18a2b03a 	or	r17,r3,r2
10003da0:	0021883a 	mov	r16,zero
10003da4:	003fa206 	br	10003c30 <__alt_data_end+0xf8003c30>
10003da8:	1890b03a 	or	r8,r3,r2
10003dac:	40017d26 	beq	r8,zero,100043a4 <__adddf3+0x7f0>
10003db0:	1011883a 	mov	r8,r2
10003db4:	1823883a 	mov	r17,r3
10003db8:	888001cc 	andi	r2,r17,7
10003dbc:	103f9e1e 	bne	r2,zero,10003c38 <__alt_data_end+0xf8003c38>
10003dc0:	4004977a 	slli	r2,r8,29
10003dc4:	8822d0fa 	srli	r17,r17,3
10003dc8:	4010d0fa 	srli	r8,r8,3
10003dcc:	9007883a 	mov	r3,r18
10003dd0:	1444b03a 	or	r2,r2,r17
10003dd4:	0101ffc4 	movi	r4,2047
10003dd8:	81002426 	beq	r16,r4,10003e6c <__adddf3+0x2b8>
10003ddc:	8120703a 	and	r16,r16,r4
10003de0:	01000434 	movhi	r4,16
10003de4:	213fffc4 	addi	r4,r4,-1
10003de8:	4110703a 	and	r8,r8,r4
10003dec:	003fa806 	br	10003c90 <__alt_data_end+0xf8003c90>
10003df0:	8089c83a 	sub	r4,r16,r2
10003df4:	01005e0e 	bge	zero,r4,10003f70 <__adddf3+0x3bc>
10003df8:	10002b26 	beq	r2,zero,10003ea8 <__adddf3+0x2f4>
10003dfc:	0081ffc4 	movi	r2,2047
10003e00:	80bf8b26 	beq	r16,r2,10003c30 <__alt_data_end+0xf8003c30>
10003e04:	4a402034 	orhi	r9,r9,128
10003e08:	00800e04 	movi	r2,56
10003e0c:	1100a40e 	bge	r2,r4,100040a0 <__adddf3+0x4ec>
10003e10:	498cb03a 	or	r6,r9,r6
10003e14:	300ac03a 	cmpne	r5,r6,zero
10003e18:	0013883a 	mov	r9,zero
10003e1c:	2c4b883a 	add	r5,r5,r17
10003e20:	2c63803a 	cmpltu	r17,r5,r17
10003e24:	4a11883a 	add	r8,r9,r8
10003e28:	8a11883a 	add	r8,r17,r8
10003e2c:	2823883a 	mov	r17,r5
10003e30:	4080202c 	andhi	r2,r8,128
10003e34:	103fe026 	beq	r2,zero,10003db8 <__alt_data_end+0xf8003db8>
10003e38:	84000044 	addi	r16,r16,1
10003e3c:	0081ffc4 	movi	r2,2047
10003e40:	8080d226 	beq	r16,r2,1000418c <__adddf3+0x5d8>
10003e44:	00bfe034 	movhi	r2,65408
10003e48:	10bfffc4 	addi	r2,r2,-1
10003e4c:	4090703a 	and	r8,r8,r2
10003e50:	880ad07a 	srli	r5,r17,1
10003e54:	400897fa 	slli	r4,r8,31
10003e58:	88c0004c 	andi	r3,r17,1
10003e5c:	28e2b03a 	or	r17,r5,r3
10003e60:	4010d07a 	srli	r8,r8,1
10003e64:	2462b03a 	or	r17,r4,r17
10003e68:	003f7106 	br	10003c30 <__alt_data_end+0xf8003c30>
10003e6c:	4088b03a 	or	r4,r8,r2
10003e70:	20014526 	beq	r4,zero,10004388 <__adddf3+0x7d4>
10003e74:	01000434 	movhi	r4,16
10003e78:	42000234 	orhi	r8,r8,8
10003e7c:	213fffc4 	addi	r4,r4,-1
10003e80:	4110703a 	and	r8,r8,r4
10003e84:	003f8206 	br	10003c90 <__alt_data_end+0xf8003c90>
10003e88:	18ffffc4 	addi	r3,r3,-1
10003e8c:	1800491e 	bne	r3,zero,10003fb4 <__adddf3+0x400>
10003e90:	898bc83a 	sub	r5,r17,r6
10003e94:	8963803a 	cmpltu	r17,r17,r5
10003e98:	4251c83a 	sub	r8,r8,r9
10003e9c:	4451c83a 	sub	r8,r8,r17
10003ea0:	2823883a 	mov	r17,r5
10003ea4:	003f9f06 	br	10003d24 <__alt_data_end+0xf8003d24>
10003ea8:	4984b03a 	or	r2,r9,r6
10003eac:	103f6026 	beq	r2,zero,10003c30 <__alt_data_end+0xf8003c30>
10003eb0:	213fffc4 	addi	r4,r4,-1
10003eb4:	2000931e 	bne	r4,zero,10004104 <__adddf3+0x550>
10003eb8:	898d883a 	add	r6,r17,r6
10003ebc:	3463803a 	cmpltu	r17,r6,r17
10003ec0:	4251883a 	add	r8,r8,r9
10003ec4:	8a11883a 	add	r8,r17,r8
10003ec8:	3023883a 	mov	r17,r6
10003ecc:	003fd806 	br	10003e30 <__alt_data_end+0xf8003e30>
10003ed0:	1800541e 	bne	r3,zero,10004024 <__adddf3+0x470>
10003ed4:	80800044 	addi	r2,r16,1
10003ed8:	1081ffcc 	andi	r2,r2,2047
10003edc:	00c00044 	movi	r3,1
10003ee0:	1880a00e 	bge	r3,r2,10004164 <__adddf3+0x5b0>
10003ee4:	8989c83a 	sub	r4,r17,r6
10003ee8:	8905803a 	cmpltu	r2,r17,r4
10003eec:	4267c83a 	sub	r19,r8,r9
10003ef0:	98a7c83a 	sub	r19,r19,r2
10003ef4:	9880202c 	andhi	r2,r19,128
10003ef8:	10006326 	beq	r2,zero,10004088 <__adddf3+0x4d4>
10003efc:	3463c83a 	sub	r17,r6,r17
10003f00:	4a07c83a 	sub	r3,r9,r8
10003f04:	344d803a 	cmpltu	r6,r6,r17
10003f08:	19a7c83a 	sub	r19,r3,r6
10003f0c:	3825883a 	mov	r18,r7
10003f10:	983f8a1e 	bne	r19,zero,10003d3c <__alt_data_end+0xf8003d3c>
10003f14:	8809883a 	mov	r4,r17
10003f18:	00059700 	call	10005970 <__clzsi2>
10003f1c:	10800804 	addi	r2,r2,32
10003f20:	10fffe04 	addi	r3,r2,-8
10003f24:	010007c4 	movi	r4,31
10003f28:	20ff890e 	bge	r4,r3,10003d50 <__alt_data_end+0xf8003d50>
10003f2c:	10bff604 	addi	r2,r2,-40
10003f30:	8884983a 	sll	r2,r17,r2
10003f34:	0023883a 	mov	r17,zero
10003f38:	1c3f8c0e 	bge	r3,r16,10003d6c <__alt_data_end+0xf8003d6c>
10003f3c:	023fe034 	movhi	r8,65408
10003f40:	423fffc4 	addi	r8,r8,-1
10003f44:	80e1c83a 	sub	r16,r16,r3
10003f48:	1210703a 	and	r8,r2,r8
10003f4c:	003f3806 	br	10003c30 <__alt_data_end+0xf8003c30>
10003f50:	9007883a 	mov	r3,r18
10003f54:	0011883a 	mov	r8,zero
10003f58:	0005883a 	mov	r2,zero
10003f5c:	003f4c06 	br	10003c90 <__alt_data_end+0xf8003c90>
10003f60:	498cb03a 	or	r6,r9,r6
10003f64:	300cc03a 	cmpne	r6,r6,zero
10003f68:	0007883a 	mov	r3,zero
10003f6c:	003f6806 	br	10003d10 <__alt_data_end+0xf8003d10>
10003f70:	20009c1e 	bne	r4,zero,100041e4 <__adddf3+0x630>
10003f74:	80800044 	addi	r2,r16,1
10003f78:	1141ffcc 	andi	r5,r2,2047
10003f7c:	01000044 	movi	r4,1
10003f80:	2140670e 	bge	r4,r5,10004120 <__adddf3+0x56c>
10003f84:	0101ffc4 	movi	r4,2047
10003f88:	11007f26 	beq	r2,r4,10004188 <__adddf3+0x5d4>
10003f8c:	898d883a 	add	r6,r17,r6
10003f90:	4247883a 	add	r3,r8,r9
10003f94:	3451803a 	cmpltu	r8,r6,r17
10003f98:	40d1883a 	add	r8,r8,r3
10003f9c:	402297fa 	slli	r17,r8,31
10003fa0:	300cd07a 	srli	r6,r6,1
10003fa4:	4010d07a 	srli	r8,r8,1
10003fa8:	1021883a 	mov	r16,r2
10003fac:	89a2b03a 	or	r17,r17,r6
10003fb0:	003f1f06 	br	10003c30 <__alt_data_end+0xf8003c30>
10003fb4:	0081ffc4 	movi	r2,2047
10003fb8:	80bf481e 	bne	r16,r2,10003cdc <__alt_data_end+0xf8003cdc>
10003fbc:	003f1c06 	br	10003c30 <__alt_data_end+0xf8003c30>
10003fc0:	843ff844 	addi	r16,r16,-31
10003fc4:	01000804 	movi	r4,32
10003fc8:	1406d83a 	srl	r3,r2,r16
10003fcc:	41005026 	beq	r8,r4,10004110 <__adddf3+0x55c>
10003fd0:	01001004 	movi	r4,64
10003fd4:	2211c83a 	sub	r8,r4,r8
10003fd8:	1204983a 	sll	r2,r2,r8
10003fdc:	88a2b03a 	or	r17,r17,r2
10003fe0:	8822c03a 	cmpne	r17,r17,zero
10003fe4:	1c62b03a 	or	r17,r3,r17
10003fe8:	0011883a 	mov	r8,zero
10003fec:	0021883a 	mov	r16,zero
10003ff0:	003f7106 	br	10003db8 <__alt_data_end+0xf8003db8>
10003ff4:	193ff804 	addi	r4,r3,-32
10003ff8:	00800804 	movi	r2,32
10003ffc:	4908d83a 	srl	r4,r9,r4
10004000:	18804526 	beq	r3,r2,10004118 <__adddf3+0x564>
10004004:	00801004 	movi	r2,64
10004008:	10c5c83a 	sub	r2,r2,r3
1000400c:	4886983a 	sll	r3,r9,r2
10004010:	198cb03a 	or	r6,r3,r6
10004014:	300cc03a 	cmpne	r6,r6,zero
10004018:	218cb03a 	or	r6,r4,r6
1000401c:	0007883a 	mov	r3,zero
10004020:	003f3b06 	br	10003d10 <__alt_data_end+0xf8003d10>
10004024:	80002a26 	beq	r16,zero,100040d0 <__adddf3+0x51c>
10004028:	0101ffc4 	movi	r4,2047
1000402c:	11006826 	beq	r2,r4,100041d0 <__adddf3+0x61c>
10004030:	00c7c83a 	sub	r3,zero,r3
10004034:	42002034 	orhi	r8,r8,128
10004038:	01000e04 	movi	r4,56
1000403c:	20c07c16 	blt	r4,r3,10004230 <__adddf3+0x67c>
10004040:	010007c4 	movi	r4,31
10004044:	20c0da16 	blt	r4,r3,100043b0 <__adddf3+0x7fc>
10004048:	01000804 	movi	r4,32
1000404c:	20c9c83a 	sub	r4,r4,r3
10004050:	4114983a 	sll	r10,r8,r4
10004054:	88cad83a 	srl	r5,r17,r3
10004058:	8908983a 	sll	r4,r17,r4
1000405c:	40c6d83a 	srl	r3,r8,r3
10004060:	5162b03a 	or	r17,r10,r5
10004064:	2008c03a 	cmpne	r4,r4,zero
10004068:	8922b03a 	or	r17,r17,r4
1000406c:	3463c83a 	sub	r17,r6,r17
10004070:	48c7c83a 	sub	r3,r9,r3
10004074:	344d803a 	cmpltu	r6,r6,r17
10004078:	1991c83a 	sub	r8,r3,r6
1000407c:	1021883a 	mov	r16,r2
10004080:	3825883a 	mov	r18,r7
10004084:	003f2706 	br	10003d24 <__alt_data_end+0xf8003d24>
10004088:	24d0b03a 	or	r8,r4,r19
1000408c:	40001b1e 	bne	r8,zero,100040fc <__adddf3+0x548>
10004090:	0005883a 	mov	r2,zero
10004094:	0007883a 	mov	r3,zero
10004098:	0021883a 	mov	r16,zero
1000409c:	003f4d06 	br	10003dd4 <__alt_data_end+0xf8003dd4>
100040a0:	008007c4 	movi	r2,31
100040a4:	11003c16 	blt	r2,r4,10004198 <__adddf3+0x5e4>
100040a8:	00800804 	movi	r2,32
100040ac:	1105c83a 	sub	r2,r2,r4
100040b0:	488e983a 	sll	r7,r9,r2
100040b4:	310ad83a 	srl	r5,r6,r4
100040b8:	3084983a 	sll	r2,r6,r2
100040bc:	4912d83a 	srl	r9,r9,r4
100040c0:	394ab03a 	or	r5,r7,r5
100040c4:	1004c03a 	cmpne	r2,r2,zero
100040c8:	288ab03a 	or	r5,r5,r2
100040cc:	003f5306 	br	10003e1c <__alt_data_end+0xf8003e1c>
100040d0:	4448b03a 	or	r4,r8,r17
100040d4:	20003e26 	beq	r4,zero,100041d0 <__adddf3+0x61c>
100040d8:	00c6303a 	nor	r3,zero,r3
100040dc:	18003a1e 	bne	r3,zero,100041c8 <__adddf3+0x614>
100040e0:	3463c83a 	sub	r17,r6,r17
100040e4:	4a07c83a 	sub	r3,r9,r8
100040e8:	344d803a 	cmpltu	r6,r6,r17
100040ec:	1991c83a 	sub	r8,r3,r6
100040f0:	1021883a 	mov	r16,r2
100040f4:	3825883a 	mov	r18,r7
100040f8:	003f0a06 	br	10003d24 <__alt_data_end+0xf8003d24>
100040fc:	2023883a 	mov	r17,r4
10004100:	003f0d06 	br	10003d38 <__alt_data_end+0xf8003d38>
10004104:	0081ffc4 	movi	r2,2047
10004108:	80bf3f1e 	bne	r16,r2,10003e08 <__alt_data_end+0xf8003e08>
1000410c:	003ec806 	br	10003c30 <__alt_data_end+0xf8003c30>
10004110:	0005883a 	mov	r2,zero
10004114:	003fb106 	br	10003fdc <__alt_data_end+0xf8003fdc>
10004118:	0007883a 	mov	r3,zero
1000411c:	003fbc06 	br	10004010 <__alt_data_end+0xf8004010>
10004120:	4444b03a 	or	r2,r8,r17
10004124:	8000871e 	bne	r16,zero,10004344 <__adddf3+0x790>
10004128:	1000ba26 	beq	r2,zero,10004414 <__adddf3+0x860>
1000412c:	4984b03a 	or	r2,r9,r6
10004130:	103ebf26 	beq	r2,zero,10003c30 <__alt_data_end+0xf8003c30>
10004134:	8985883a 	add	r2,r17,r6
10004138:	4247883a 	add	r3,r8,r9
1000413c:	1451803a 	cmpltu	r8,r2,r17
10004140:	40d1883a 	add	r8,r8,r3
10004144:	40c0202c 	andhi	r3,r8,128
10004148:	1023883a 	mov	r17,r2
1000414c:	183f1a26 	beq	r3,zero,10003db8 <__alt_data_end+0xf8003db8>
10004150:	00bfe034 	movhi	r2,65408
10004154:	10bfffc4 	addi	r2,r2,-1
10004158:	2021883a 	mov	r16,r4
1000415c:	4090703a 	and	r8,r8,r2
10004160:	003eb306 	br	10003c30 <__alt_data_end+0xf8003c30>
10004164:	4444b03a 	or	r2,r8,r17
10004168:	8000291e 	bne	r16,zero,10004210 <__adddf3+0x65c>
1000416c:	10004b1e 	bne	r2,zero,1000429c <__adddf3+0x6e8>
10004170:	4990b03a 	or	r8,r9,r6
10004174:	40008b26 	beq	r8,zero,100043a4 <__adddf3+0x7f0>
10004178:	4811883a 	mov	r8,r9
1000417c:	3023883a 	mov	r17,r6
10004180:	3825883a 	mov	r18,r7
10004184:	003eaa06 	br	10003c30 <__alt_data_end+0xf8003c30>
10004188:	1021883a 	mov	r16,r2
1000418c:	0011883a 	mov	r8,zero
10004190:	0005883a 	mov	r2,zero
10004194:	003f0f06 	br	10003dd4 <__alt_data_end+0xf8003dd4>
10004198:	217ff804 	addi	r5,r4,-32
1000419c:	00800804 	movi	r2,32
100041a0:	494ad83a 	srl	r5,r9,r5
100041a4:	20807d26 	beq	r4,r2,1000439c <__adddf3+0x7e8>
100041a8:	00801004 	movi	r2,64
100041ac:	1109c83a 	sub	r4,r2,r4
100041b0:	4912983a 	sll	r9,r9,r4
100041b4:	498cb03a 	or	r6,r9,r6
100041b8:	300cc03a 	cmpne	r6,r6,zero
100041bc:	298ab03a 	or	r5,r5,r6
100041c0:	0013883a 	mov	r9,zero
100041c4:	003f1506 	br	10003e1c <__alt_data_end+0xf8003e1c>
100041c8:	0101ffc4 	movi	r4,2047
100041cc:	113f9a1e 	bne	r2,r4,10004038 <__alt_data_end+0xf8004038>
100041d0:	4811883a 	mov	r8,r9
100041d4:	3023883a 	mov	r17,r6
100041d8:	1021883a 	mov	r16,r2
100041dc:	3825883a 	mov	r18,r7
100041e0:	003e9306 	br	10003c30 <__alt_data_end+0xf8003c30>
100041e4:	8000161e 	bne	r16,zero,10004240 <__adddf3+0x68c>
100041e8:	444ab03a 	or	r5,r8,r17
100041ec:	28005126 	beq	r5,zero,10004334 <__adddf3+0x780>
100041f0:	0108303a 	nor	r4,zero,r4
100041f4:	20004d1e 	bne	r4,zero,1000432c <__adddf3+0x778>
100041f8:	89a3883a 	add	r17,r17,r6
100041fc:	4253883a 	add	r9,r8,r9
10004200:	898d803a 	cmpltu	r6,r17,r6
10004204:	3251883a 	add	r8,r6,r9
10004208:	1021883a 	mov	r16,r2
1000420c:	003f0806 	br	10003e30 <__alt_data_end+0xf8003e30>
10004210:	1000301e 	bne	r2,zero,100042d4 <__adddf3+0x720>
10004214:	4984b03a 	or	r2,r9,r6
10004218:	10007126 	beq	r2,zero,100043e0 <__adddf3+0x82c>
1000421c:	4811883a 	mov	r8,r9
10004220:	3023883a 	mov	r17,r6
10004224:	3825883a 	mov	r18,r7
10004228:	0401ffc4 	movi	r16,2047
1000422c:	003e8006 	br	10003c30 <__alt_data_end+0xf8003c30>
10004230:	4462b03a 	or	r17,r8,r17
10004234:	8822c03a 	cmpne	r17,r17,zero
10004238:	0007883a 	mov	r3,zero
1000423c:	003f8b06 	br	1000406c <__alt_data_end+0xf800406c>
10004240:	0141ffc4 	movi	r5,2047
10004244:	11403b26 	beq	r2,r5,10004334 <__adddf3+0x780>
10004248:	0109c83a 	sub	r4,zero,r4
1000424c:	42002034 	orhi	r8,r8,128
10004250:	01400e04 	movi	r5,56
10004254:	29006716 	blt	r5,r4,100043f4 <__adddf3+0x840>
10004258:	014007c4 	movi	r5,31
1000425c:	29007016 	blt	r5,r4,10004420 <__adddf3+0x86c>
10004260:	01400804 	movi	r5,32
10004264:	290bc83a 	sub	r5,r5,r4
10004268:	4154983a 	sll	r10,r8,r5
1000426c:	890ed83a 	srl	r7,r17,r4
10004270:	894a983a 	sll	r5,r17,r5
10004274:	4108d83a 	srl	r4,r8,r4
10004278:	51e2b03a 	or	r17,r10,r7
1000427c:	280ac03a 	cmpne	r5,r5,zero
10004280:	8962b03a 	or	r17,r17,r5
10004284:	89a3883a 	add	r17,r17,r6
10004288:	2253883a 	add	r9,r4,r9
1000428c:	898d803a 	cmpltu	r6,r17,r6
10004290:	3251883a 	add	r8,r6,r9
10004294:	1021883a 	mov	r16,r2
10004298:	003ee506 	br	10003e30 <__alt_data_end+0xf8003e30>
1000429c:	4984b03a 	or	r2,r9,r6
100042a0:	103e6326 	beq	r2,zero,10003c30 <__alt_data_end+0xf8003c30>
100042a4:	8987c83a 	sub	r3,r17,r6
100042a8:	88c9803a 	cmpltu	r4,r17,r3
100042ac:	4245c83a 	sub	r2,r8,r9
100042b0:	1105c83a 	sub	r2,r2,r4
100042b4:	1100202c 	andhi	r4,r2,128
100042b8:	203ebb26 	beq	r4,zero,10003da8 <__alt_data_end+0xf8003da8>
100042bc:	3463c83a 	sub	r17,r6,r17
100042c0:	4a07c83a 	sub	r3,r9,r8
100042c4:	344d803a 	cmpltu	r6,r6,r17
100042c8:	1991c83a 	sub	r8,r3,r6
100042cc:	3825883a 	mov	r18,r7
100042d0:	003e5706 	br	10003c30 <__alt_data_end+0xf8003c30>
100042d4:	4984b03a 	or	r2,r9,r6
100042d8:	10002e26 	beq	r2,zero,10004394 <__adddf3+0x7e0>
100042dc:	4004d0fa 	srli	r2,r8,3
100042e0:	8822d0fa 	srli	r17,r17,3
100042e4:	4010977a 	slli	r8,r8,29
100042e8:	10c0022c 	andhi	r3,r2,8
100042ec:	4462b03a 	or	r17,r8,r17
100042f0:	18000826 	beq	r3,zero,10004314 <__adddf3+0x760>
100042f4:	4808d0fa 	srli	r4,r9,3
100042f8:	20c0022c 	andhi	r3,r4,8
100042fc:	1800051e 	bne	r3,zero,10004314 <__adddf3+0x760>
10004300:	300cd0fa 	srli	r6,r6,3
10004304:	4806977a 	slli	r3,r9,29
10004308:	2005883a 	mov	r2,r4
1000430c:	3825883a 	mov	r18,r7
10004310:	19a2b03a 	or	r17,r3,r6
10004314:	8810d77a 	srli	r8,r17,29
10004318:	100490fa 	slli	r2,r2,3
1000431c:	882290fa 	slli	r17,r17,3
10004320:	0401ffc4 	movi	r16,2047
10004324:	4090b03a 	or	r8,r8,r2
10004328:	003e4106 	br	10003c30 <__alt_data_end+0xf8003c30>
1000432c:	0141ffc4 	movi	r5,2047
10004330:	117fc71e 	bne	r2,r5,10004250 <__alt_data_end+0xf8004250>
10004334:	4811883a 	mov	r8,r9
10004338:	3023883a 	mov	r17,r6
1000433c:	1021883a 	mov	r16,r2
10004340:	003e3b06 	br	10003c30 <__alt_data_end+0xf8003c30>
10004344:	10002f26 	beq	r2,zero,10004404 <__adddf3+0x850>
10004348:	4984b03a 	or	r2,r9,r6
1000434c:	10001126 	beq	r2,zero,10004394 <__adddf3+0x7e0>
10004350:	4004d0fa 	srli	r2,r8,3
10004354:	8822d0fa 	srli	r17,r17,3
10004358:	4010977a 	slli	r8,r8,29
1000435c:	10c0022c 	andhi	r3,r2,8
10004360:	4462b03a 	or	r17,r8,r17
10004364:	183feb26 	beq	r3,zero,10004314 <__alt_data_end+0xf8004314>
10004368:	4808d0fa 	srli	r4,r9,3
1000436c:	20c0022c 	andhi	r3,r4,8
10004370:	183fe81e 	bne	r3,zero,10004314 <__alt_data_end+0xf8004314>
10004374:	300cd0fa 	srli	r6,r6,3
10004378:	4806977a 	slli	r3,r9,29
1000437c:	2005883a 	mov	r2,r4
10004380:	19a2b03a 	or	r17,r3,r6
10004384:	003fe306 	br	10004314 <__alt_data_end+0xf8004314>
10004388:	0011883a 	mov	r8,zero
1000438c:	0005883a 	mov	r2,zero
10004390:	003e3f06 	br	10003c90 <__alt_data_end+0xf8003c90>
10004394:	0401ffc4 	movi	r16,2047
10004398:	003e2506 	br	10003c30 <__alt_data_end+0xf8003c30>
1000439c:	0013883a 	mov	r9,zero
100043a0:	003f8406 	br	100041b4 <__alt_data_end+0xf80041b4>
100043a4:	0005883a 	mov	r2,zero
100043a8:	0007883a 	mov	r3,zero
100043ac:	003e8906 	br	10003dd4 <__alt_data_end+0xf8003dd4>
100043b0:	197ff804 	addi	r5,r3,-32
100043b4:	01000804 	movi	r4,32
100043b8:	414ad83a 	srl	r5,r8,r5
100043bc:	19002426 	beq	r3,r4,10004450 <__adddf3+0x89c>
100043c0:	01001004 	movi	r4,64
100043c4:	20c7c83a 	sub	r3,r4,r3
100043c8:	40c6983a 	sll	r3,r8,r3
100043cc:	1c46b03a 	or	r3,r3,r17
100043d0:	1806c03a 	cmpne	r3,r3,zero
100043d4:	28e2b03a 	or	r17,r5,r3
100043d8:	0007883a 	mov	r3,zero
100043dc:	003f2306 	br	1000406c <__alt_data_end+0xf800406c>
100043e0:	0007883a 	mov	r3,zero
100043e4:	5811883a 	mov	r8,r11
100043e8:	00bfffc4 	movi	r2,-1
100043ec:	0401ffc4 	movi	r16,2047
100043f0:	003e7806 	br	10003dd4 <__alt_data_end+0xf8003dd4>
100043f4:	4462b03a 	or	r17,r8,r17
100043f8:	8822c03a 	cmpne	r17,r17,zero
100043fc:	0009883a 	mov	r4,zero
10004400:	003fa006 	br	10004284 <__alt_data_end+0xf8004284>
10004404:	4811883a 	mov	r8,r9
10004408:	3023883a 	mov	r17,r6
1000440c:	0401ffc4 	movi	r16,2047
10004410:	003e0706 	br	10003c30 <__alt_data_end+0xf8003c30>
10004414:	4811883a 	mov	r8,r9
10004418:	3023883a 	mov	r17,r6
1000441c:	003e0406 	br	10003c30 <__alt_data_end+0xf8003c30>
10004420:	21fff804 	addi	r7,r4,-32
10004424:	01400804 	movi	r5,32
10004428:	41ced83a 	srl	r7,r8,r7
1000442c:	21400a26 	beq	r4,r5,10004458 <__adddf3+0x8a4>
10004430:	01401004 	movi	r5,64
10004434:	2909c83a 	sub	r4,r5,r4
10004438:	4108983a 	sll	r4,r8,r4
1000443c:	2448b03a 	or	r4,r4,r17
10004440:	2008c03a 	cmpne	r4,r4,zero
10004444:	3922b03a 	or	r17,r7,r4
10004448:	0009883a 	mov	r4,zero
1000444c:	003f8d06 	br	10004284 <__alt_data_end+0xf8004284>
10004450:	0007883a 	mov	r3,zero
10004454:	003fdd06 	br	100043cc <__alt_data_end+0xf80043cc>
10004458:	0009883a 	mov	r4,zero
1000445c:	003ff706 	br	1000443c <__alt_data_end+0xf800443c>

10004460 <__ledf2>:
10004460:	2804d53a 	srli	r2,r5,20
10004464:	3810d53a 	srli	r8,r7,20
10004468:	00c00434 	movhi	r3,16
1000446c:	18ffffc4 	addi	r3,r3,-1
10004470:	1081ffcc 	andi	r2,r2,2047
10004474:	0241ffc4 	movi	r9,2047
10004478:	28d4703a 	and	r10,r5,r3
1000447c:	4201ffcc 	andi	r8,r8,2047
10004480:	38c6703a 	and	r3,r7,r3
10004484:	280ad7fa 	srli	r5,r5,31
10004488:	380ed7fa 	srli	r7,r7,31
1000448c:	12401f26 	beq	r2,r9,1000450c <__ledf2+0xac>
10004490:	0241ffc4 	movi	r9,2047
10004494:	42401426 	beq	r8,r9,100044e8 <__ledf2+0x88>
10004498:	1000091e 	bne	r2,zero,100044c0 <__ledf2+0x60>
1000449c:	2296b03a 	or	r11,r4,r10
100044a0:	5813003a 	cmpeq	r9,r11,zero
100044a4:	29403fcc 	andi	r5,r5,255
100044a8:	40000a1e 	bne	r8,zero,100044d4 <__ledf2+0x74>
100044ac:	30d8b03a 	or	r12,r6,r3
100044b0:	6000081e 	bne	r12,zero,100044d4 <__ledf2+0x74>
100044b4:	0005883a 	mov	r2,zero
100044b8:	5800111e 	bne	r11,zero,10004500 <__ledf2+0xa0>
100044bc:	f800283a 	ret
100044c0:	29403fcc 	andi	r5,r5,255
100044c4:	40000c1e 	bne	r8,zero,100044f8 <__ledf2+0x98>
100044c8:	30d2b03a 	or	r9,r6,r3
100044cc:	48000c26 	beq	r9,zero,10004500 <__ledf2+0xa0>
100044d0:	0013883a 	mov	r9,zero
100044d4:	39c03fcc 	andi	r7,r7,255
100044d8:	48000826 	beq	r9,zero,100044fc <__ledf2+0x9c>
100044dc:	38001126 	beq	r7,zero,10004524 <__ledf2+0xc4>
100044e0:	00800044 	movi	r2,1
100044e4:	f800283a 	ret
100044e8:	30d2b03a 	or	r9,r6,r3
100044ec:	483fea26 	beq	r9,zero,10004498 <__alt_data_end+0xf8004498>
100044f0:	00800084 	movi	r2,2
100044f4:	f800283a 	ret
100044f8:	39c03fcc 	andi	r7,r7,255
100044fc:	39400726 	beq	r7,r5,1000451c <__ledf2+0xbc>
10004500:	2800081e 	bne	r5,zero,10004524 <__ledf2+0xc4>
10004504:	00800044 	movi	r2,1
10004508:	f800283a 	ret
1000450c:	2292b03a 	or	r9,r4,r10
10004510:	483fdf26 	beq	r9,zero,10004490 <__alt_data_end+0xf8004490>
10004514:	00800084 	movi	r2,2
10004518:	f800283a 	ret
1000451c:	4080030e 	bge	r8,r2,1000452c <__ledf2+0xcc>
10004520:	383fef26 	beq	r7,zero,100044e0 <__alt_data_end+0xf80044e0>
10004524:	00bfffc4 	movi	r2,-1
10004528:	f800283a 	ret
1000452c:	123feb16 	blt	r2,r8,100044dc <__alt_data_end+0xf80044dc>
10004530:	1abff336 	bltu	r3,r10,10004500 <__alt_data_end+0xf8004500>
10004534:	50c00326 	beq	r10,r3,10004544 <__ledf2+0xe4>
10004538:	50c0042e 	bgeu	r10,r3,1000454c <__ledf2+0xec>
1000453c:	283fe81e 	bne	r5,zero,100044e0 <__alt_data_end+0xf80044e0>
10004540:	003ff806 	br	10004524 <__alt_data_end+0xf8004524>
10004544:	313fee36 	bltu	r6,r4,10004500 <__alt_data_end+0xf8004500>
10004548:	21bffc36 	bltu	r4,r6,1000453c <__alt_data_end+0xf800453c>
1000454c:	0005883a 	mov	r2,zero
10004550:	f800283a 	ret

10004554 <__muldf3>:
10004554:	deffee04 	addi	sp,sp,-72
10004558:	dd000c15 	stw	r20,48(sp)
1000455c:	2828d53a 	srli	r20,r5,20
10004560:	ddc00f15 	stw	r23,60(sp)
10004564:	282ed7fa 	srli	r23,r5,31
10004568:	dc000815 	stw	r16,32(sp)
1000456c:	04000434 	movhi	r16,16
10004570:	dcc00b15 	stw	r19,44(sp)
10004574:	843fffc4 	addi	r16,r16,-1
10004578:	dfc01115 	stw	ra,68(sp)
1000457c:	df001015 	stw	fp,64(sp)
10004580:	dd800e15 	stw	r22,56(sp)
10004584:	dd400d15 	stw	r21,52(sp)
10004588:	dc800a15 	stw	r18,40(sp)
1000458c:	dc400915 	stw	r17,36(sp)
10004590:	a501ffcc 	andi	r20,r20,2047
10004594:	2c20703a 	and	r16,r5,r16
10004598:	b827883a 	mov	r19,r23
1000459c:	ba403fcc 	andi	r9,r23,255
100045a0:	a0006026 	beq	r20,zero,10004724 <__muldf3+0x1d0>
100045a4:	0081ffc4 	movi	r2,2047
100045a8:	202d883a 	mov	r22,r4
100045ac:	a0803626 	beq	r20,r2,10004688 <__muldf3+0x134>
100045b0:	84000434 	orhi	r16,r16,16
100045b4:	200ad77a 	srli	r5,r4,29
100045b8:	800690fa 	slli	r3,r16,3
100045bc:	202c90fa 	slli	r22,r4,3
100045c0:	a53f0044 	addi	r20,r20,-1023
100045c4:	28e0b03a 	or	r16,r5,r3
100045c8:	002b883a 	mov	r21,zero
100045cc:	000b883a 	mov	r5,zero
100045d0:	3806d53a 	srli	r3,r7,20
100045d4:	3838d7fa 	srli	fp,r7,31
100045d8:	04400434 	movhi	r17,16
100045dc:	8c7fffc4 	addi	r17,r17,-1
100045e0:	18c1ffcc 	andi	r3,r3,2047
100045e4:	3025883a 	mov	r18,r6
100045e8:	3c62703a 	and	r17,r7,r17
100045ec:	e2803fcc 	andi	r10,fp,255
100045f0:	18006d26 	beq	r3,zero,100047a8 <__muldf3+0x254>
100045f4:	0081ffc4 	movi	r2,2047
100045f8:	18806526 	beq	r3,r2,10004790 <__muldf3+0x23c>
100045fc:	8c400434 	orhi	r17,r17,16
10004600:	300ed77a 	srli	r7,r6,29
10004604:	880890fa 	slli	r4,r17,3
10004608:	302490fa 	slli	r18,r6,3
1000460c:	18ff0044 	addi	r3,r3,-1023
10004610:	3922b03a 	or	r17,r7,r4
10004614:	000f883a 	mov	r7,zero
10004618:	a0c7883a 	add	r3,r20,r3
1000461c:	3d48b03a 	or	r4,r7,r21
10004620:	008003c4 	movi	r2,15
10004624:	e5ccf03a 	xor	r6,fp,r23
10004628:	1a000044 	addi	r8,r3,1
1000462c:	11009b36 	bltu	r2,r4,1000489c <__muldf3+0x348>
10004630:	200890ba 	slli	r4,r4,2
10004634:	00840034 	movhi	r2,4096
10004638:	10919204 	addi	r2,r2,17992
1000463c:	2089883a 	add	r4,r4,r2
10004640:	20800017 	ldw	r2,0(r4)
10004644:	1000683a 	jmp	r2
10004648:	1000489c 	xori	zero,r2,290
1000464c:	100046a8 	cmpgeui	zero,r2,282
10004650:	100046a8 	cmpgeui	zero,r2,282
10004654:	100046a4 	muli	zero,r2,282
10004658:	10004878 	rdprs	zero,r2,289
1000465c:	10004878 	rdprs	zero,r2,289
10004660:	10004860 	cmpeqi	zero,r2,289
10004664:	100046a4 	muli	zero,r2,282
10004668:	10004878 	rdprs	zero,r2,289
1000466c:	10004860 	cmpeqi	zero,r2,289
10004670:	10004878 	rdprs	zero,r2,289
10004674:	100046a4 	muli	zero,r2,282
10004678:	10004888 	cmpgei	zero,r2,290
1000467c:	10004888 	cmpgei	zero,r2,290
10004680:	10004888 	cmpgei	zero,r2,290
10004684:	10004be4 	muli	zero,r2,303
10004688:	2404b03a 	or	r2,r4,r16
1000468c:	1000711e 	bne	r2,zero,10004854 <__muldf3+0x300>
10004690:	05400204 	movi	r21,8
10004694:	0021883a 	mov	r16,zero
10004698:	002d883a 	mov	r22,zero
1000469c:	01400084 	movi	r5,2
100046a0:	003fcb06 	br	100045d0 <__alt_data_end+0xf80045d0>
100046a4:	500d883a 	mov	r6,r10
100046a8:	00800084 	movi	r2,2
100046ac:	38805926 	beq	r7,r2,10004814 <__muldf3+0x2c0>
100046b0:	008000c4 	movi	r2,3
100046b4:	3881ba26 	beq	r7,r2,10004da0 <__muldf3+0x84c>
100046b8:	00800044 	movi	r2,1
100046bc:	3881951e 	bne	r7,r2,10004d14 <__muldf3+0x7c0>
100046c0:	3027883a 	mov	r19,r6
100046c4:	0005883a 	mov	r2,zero
100046c8:	0021883a 	mov	r16,zero
100046cc:	002d883a 	mov	r22,zero
100046d0:	1004953a 	slli	r2,r2,20
100046d4:	98c03fcc 	andi	r3,r19,255
100046d8:	04400434 	movhi	r17,16
100046dc:	8c7fffc4 	addi	r17,r17,-1
100046e0:	180697fa 	slli	r3,r3,31
100046e4:	8460703a 	and	r16,r16,r17
100046e8:	80a0b03a 	or	r16,r16,r2
100046ec:	80c6b03a 	or	r3,r16,r3
100046f0:	b005883a 	mov	r2,r22
100046f4:	dfc01117 	ldw	ra,68(sp)
100046f8:	df001017 	ldw	fp,64(sp)
100046fc:	ddc00f17 	ldw	r23,60(sp)
10004700:	dd800e17 	ldw	r22,56(sp)
10004704:	dd400d17 	ldw	r21,52(sp)
10004708:	dd000c17 	ldw	r20,48(sp)
1000470c:	dcc00b17 	ldw	r19,44(sp)
10004710:	dc800a17 	ldw	r18,40(sp)
10004714:	dc400917 	ldw	r17,36(sp)
10004718:	dc000817 	ldw	r16,32(sp)
1000471c:	dec01204 	addi	sp,sp,72
10004720:	f800283a 	ret
10004724:	2404b03a 	or	r2,r4,r16
10004728:	202b883a 	mov	r21,r4
1000472c:	10004426 	beq	r2,zero,10004840 <__muldf3+0x2ec>
10004730:	80015026 	beq	r16,zero,10004c74 <__muldf3+0x720>
10004734:	8009883a 	mov	r4,r16
10004738:	d9800715 	stw	r6,28(sp)
1000473c:	d9c00215 	stw	r7,8(sp)
10004740:	da400415 	stw	r9,16(sp)
10004744:	00059700 	call	10005970 <__clzsi2>
10004748:	d9800717 	ldw	r6,28(sp)
1000474c:	d9c00217 	ldw	r7,8(sp)
10004750:	da400417 	ldw	r9,16(sp)
10004754:	10fffd44 	addi	r3,r2,-11
10004758:	01000704 	movi	r4,28
1000475c:	20c14116 	blt	r4,r3,10004c64 <__muldf3+0x710>
10004760:	01000744 	movi	r4,29
10004764:	15bffe04 	addi	r22,r2,-8
10004768:	20c9c83a 	sub	r4,r4,r3
1000476c:	85a0983a 	sll	r16,r16,r22
10004770:	a908d83a 	srl	r4,r21,r4
10004774:	adac983a 	sll	r22,r21,r22
10004778:	2420b03a 	or	r16,r4,r16
1000477c:	053f0084 	movi	r20,-1022
10004780:	a0e9c83a 	sub	r20,r20,r3
10004784:	002b883a 	mov	r21,zero
10004788:	000b883a 	mov	r5,zero
1000478c:	003f9006 	br	100045d0 <__alt_data_end+0xf80045d0>
10004790:	3444b03a 	or	r2,r6,r17
10004794:	1000281e 	bne	r2,zero,10004838 <__muldf3+0x2e4>
10004798:	0023883a 	mov	r17,zero
1000479c:	0025883a 	mov	r18,zero
100047a0:	01c00084 	movi	r7,2
100047a4:	003f9c06 	br	10004618 <__alt_data_end+0xf8004618>
100047a8:	3444b03a 	or	r2,r6,r17
100047ac:	10001e26 	beq	r2,zero,10004828 <__muldf3+0x2d4>
100047b0:	88012026 	beq	r17,zero,10004c34 <__muldf3+0x6e0>
100047b4:	8809883a 	mov	r4,r17
100047b8:	d9400215 	stw	r5,8(sp)
100047bc:	d9800715 	stw	r6,28(sp)
100047c0:	da400415 	stw	r9,16(sp)
100047c4:	da800315 	stw	r10,12(sp)
100047c8:	00059700 	call	10005970 <__clzsi2>
100047cc:	d9400217 	ldw	r5,8(sp)
100047d0:	d9800717 	ldw	r6,28(sp)
100047d4:	da400417 	ldw	r9,16(sp)
100047d8:	da800317 	ldw	r10,12(sp)
100047dc:	113ffd44 	addi	r4,r2,-11
100047e0:	00c00704 	movi	r3,28
100047e4:	19010f16 	blt	r3,r4,10004c24 <__muldf3+0x6d0>
100047e8:	00c00744 	movi	r3,29
100047ec:	14bffe04 	addi	r18,r2,-8
100047f0:	1907c83a 	sub	r3,r3,r4
100047f4:	8ca2983a 	sll	r17,r17,r18
100047f8:	30c6d83a 	srl	r3,r6,r3
100047fc:	34a4983a 	sll	r18,r6,r18
10004800:	1c62b03a 	or	r17,r3,r17
10004804:	00ff0084 	movi	r3,-1022
10004808:	1907c83a 	sub	r3,r3,r4
1000480c:	000f883a 	mov	r7,zero
10004810:	003f8106 	br	10004618 <__alt_data_end+0xf8004618>
10004814:	3027883a 	mov	r19,r6
10004818:	0081ffc4 	movi	r2,2047
1000481c:	0021883a 	mov	r16,zero
10004820:	002d883a 	mov	r22,zero
10004824:	003faa06 	br	100046d0 <__alt_data_end+0xf80046d0>
10004828:	0023883a 	mov	r17,zero
1000482c:	0025883a 	mov	r18,zero
10004830:	01c00044 	movi	r7,1
10004834:	003f7806 	br	10004618 <__alt_data_end+0xf8004618>
10004838:	01c000c4 	movi	r7,3
1000483c:	003f7606 	br	10004618 <__alt_data_end+0xf8004618>
10004840:	05400104 	movi	r21,4
10004844:	0021883a 	mov	r16,zero
10004848:	002d883a 	mov	r22,zero
1000484c:	01400044 	movi	r5,1
10004850:	003f5f06 	br	100045d0 <__alt_data_end+0xf80045d0>
10004854:	05400304 	movi	r21,12
10004858:	014000c4 	movi	r5,3
1000485c:	003f5c06 	br	100045d0 <__alt_data_end+0xf80045d0>
10004860:	04000434 	movhi	r16,16
10004864:	0027883a 	mov	r19,zero
10004868:	843fffc4 	addi	r16,r16,-1
1000486c:	05bfffc4 	movi	r22,-1
10004870:	0081ffc4 	movi	r2,2047
10004874:	003f9606 	br	100046d0 <__alt_data_end+0xf80046d0>
10004878:	8023883a 	mov	r17,r16
1000487c:	b025883a 	mov	r18,r22
10004880:	280f883a 	mov	r7,r5
10004884:	003f8806 	br	100046a8 <__alt_data_end+0xf80046a8>
10004888:	8023883a 	mov	r17,r16
1000488c:	b025883a 	mov	r18,r22
10004890:	480d883a 	mov	r6,r9
10004894:	280f883a 	mov	r7,r5
10004898:	003f8306 	br	100046a8 <__alt_data_end+0xf80046a8>
1000489c:	b028d43a 	srli	r20,r22,16
100048a0:	902ed43a 	srli	r23,r18,16
100048a4:	b5bfffcc 	andi	r22,r22,65535
100048a8:	94bfffcc 	andi	r18,r18,65535
100048ac:	b00b883a 	mov	r5,r22
100048b0:	9009883a 	mov	r4,r18
100048b4:	d8c00515 	stw	r3,20(sp)
100048b8:	d9800715 	stw	r6,28(sp)
100048bc:	da000615 	stw	r8,24(sp)
100048c0:	00059d40 	call	100059d4 <__mulsi3>
100048c4:	a00b883a 	mov	r5,r20
100048c8:	9009883a 	mov	r4,r18
100048cc:	1027883a 	mov	r19,r2
100048d0:	00059d40 	call	100059d4 <__mulsi3>
100048d4:	b80b883a 	mov	r5,r23
100048d8:	a009883a 	mov	r4,r20
100048dc:	102b883a 	mov	r21,r2
100048e0:	00059d40 	call	100059d4 <__mulsi3>
100048e4:	b809883a 	mov	r4,r23
100048e8:	b00b883a 	mov	r5,r22
100048ec:	1039883a 	mov	fp,r2
100048f0:	00059d40 	call	100059d4 <__mulsi3>
100048f4:	9808d43a 	srli	r4,r19,16
100048f8:	1545883a 	add	r2,r2,r21
100048fc:	d8c00517 	ldw	r3,20(sp)
10004900:	2085883a 	add	r2,r4,r2
10004904:	d9800717 	ldw	r6,28(sp)
10004908:	da000617 	ldw	r8,24(sp)
1000490c:	1540022e 	bgeu	r2,r21,10004918 <__muldf3+0x3c4>
10004910:	01000074 	movhi	r4,1
10004914:	e139883a 	add	fp,fp,r4
10004918:	100e943a 	slli	r7,r2,16
1000491c:	1004d43a 	srli	r2,r2,16
10004920:	882ad43a 	srli	r21,r17,16
10004924:	9cffffcc 	andi	r19,r19,65535
10004928:	8c7fffcc 	andi	r17,r17,65535
1000492c:	3ce7883a 	add	r19,r7,r19
10004930:	b00b883a 	mov	r5,r22
10004934:	8809883a 	mov	r4,r17
10004938:	d8c00515 	stw	r3,20(sp)
1000493c:	d9800715 	stw	r6,28(sp)
10004940:	da000615 	stw	r8,24(sp)
10004944:	dcc00115 	stw	r19,4(sp)
10004948:	d8800015 	stw	r2,0(sp)
1000494c:	00059d40 	call	100059d4 <__mulsi3>
10004950:	a00b883a 	mov	r5,r20
10004954:	8809883a 	mov	r4,r17
10004958:	d8800215 	stw	r2,8(sp)
1000495c:	00059d40 	call	100059d4 <__mulsi3>
10004960:	a009883a 	mov	r4,r20
10004964:	a80b883a 	mov	r5,r21
10004968:	1027883a 	mov	r19,r2
1000496c:	00059d40 	call	100059d4 <__mulsi3>
10004970:	a809883a 	mov	r4,r21
10004974:	b00b883a 	mov	r5,r22
10004978:	1029883a 	mov	r20,r2
1000497c:	00059d40 	call	100059d4 <__mulsi3>
10004980:	d9c00217 	ldw	r7,8(sp)
10004984:	14c5883a 	add	r2,r2,r19
10004988:	d8c00517 	ldw	r3,20(sp)
1000498c:	3808d43a 	srli	r4,r7,16
10004990:	d9800717 	ldw	r6,28(sp)
10004994:	da000617 	ldw	r8,24(sp)
10004998:	2085883a 	add	r2,r4,r2
1000499c:	14c0022e 	bgeu	r2,r19,100049a8 <__muldf3+0x454>
100049a0:	01000074 	movhi	r4,1
100049a4:	a129883a 	add	r20,r20,r4
100049a8:	1012d43a 	srli	r9,r2,16
100049ac:	1004943a 	slli	r2,r2,16
100049b0:	802cd43a 	srli	r22,r16,16
100049b4:	843fffcc 	andi	r16,r16,65535
100049b8:	3cffffcc 	andi	r19,r7,65535
100049bc:	9009883a 	mov	r4,r18
100049c0:	800b883a 	mov	r5,r16
100049c4:	4d29883a 	add	r20,r9,r20
100049c8:	d8c00515 	stw	r3,20(sp)
100049cc:	d9800715 	stw	r6,28(sp)
100049d0:	da000615 	stw	r8,24(sp)
100049d4:	14e7883a 	add	r19,r2,r19
100049d8:	00059d40 	call	100059d4 <__mulsi3>
100049dc:	9009883a 	mov	r4,r18
100049e0:	b00b883a 	mov	r5,r22
100049e4:	d8800315 	stw	r2,12(sp)
100049e8:	00059d40 	call	100059d4 <__mulsi3>
100049ec:	b809883a 	mov	r4,r23
100049f0:	b00b883a 	mov	r5,r22
100049f4:	d8800215 	stw	r2,8(sp)
100049f8:	00059d40 	call	100059d4 <__mulsi3>
100049fc:	b80b883a 	mov	r5,r23
10004a00:	8009883a 	mov	r4,r16
10004a04:	d8800415 	stw	r2,16(sp)
10004a08:	00059d40 	call	100059d4 <__mulsi3>
10004a0c:	da800317 	ldw	r10,12(sp)
10004a10:	d9c00217 	ldw	r7,8(sp)
10004a14:	d9000017 	ldw	r4,0(sp)
10004a18:	502ed43a 	srli	r23,r10,16
10004a1c:	11c5883a 	add	r2,r2,r7
10004a20:	24e5883a 	add	r18,r4,r19
10004a24:	b885883a 	add	r2,r23,r2
10004a28:	d8c00517 	ldw	r3,20(sp)
10004a2c:	d9800717 	ldw	r6,28(sp)
10004a30:	da000617 	ldw	r8,24(sp)
10004a34:	da400417 	ldw	r9,16(sp)
10004a38:	11c0022e 	bgeu	r2,r7,10004a44 <__muldf3+0x4f0>
10004a3c:	01000074 	movhi	r4,1
10004a40:	4913883a 	add	r9,r9,r4
10004a44:	100ed43a 	srli	r7,r2,16
10004a48:	1004943a 	slli	r2,r2,16
10004a4c:	55ffffcc 	andi	r23,r10,65535
10004a50:	3a53883a 	add	r9,r7,r9
10004a54:	8809883a 	mov	r4,r17
10004a58:	800b883a 	mov	r5,r16
10004a5c:	d8c00515 	stw	r3,20(sp)
10004a60:	d9800715 	stw	r6,28(sp)
10004a64:	da000615 	stw	r8,24(sp)
10004a68:	da400415 	stw	r9,16(sp)
10004a6c:	15ef883a 	add	r23,r2,r23
10004a70:	00059d40 	call	100059d4 <__mulsi3>
10004a74:	8809883a 	mov	r4,r17
10004a78:	b00b883a 	mov	r5,r22
10004a7c:	d8800215 	stw	r2,8(sp)
10004a80:	00059d40 	call	100059d4 <__mulsi3>
10004a84:	b00b883a 	mov	r5,r22
10004a88:	a809883a 	mov	r4,r21
10004a8c:	d8800315 	stw	r2,12(sp)
10004a90:	00059d40 	call	100059d4 <__mulsi3>
10004a94:	8009883a 	mov	r4,r16
10004a98:	a80b883a 	mov	r5,r21
10004a9c:	1023883a 	mov	r17,r2
10004aa0:	00059d40 	call	100059d4 <__mulsi3>
10004aa4:	d9c00217 	ldw	r7,8(sp)
10004aa8:	da800317 	ldw	r10,12(sp)
10004aac:	d8c00517 	ldw	r3,20(sp)
10004ab0:	3808d43a 	srli	r4,r7,16
10004ab4:	1285883a 	add	r2,r2,r10
10004ab8:	d9800717 	ldw	r6,28(sp)
10004abc:	2085883a 	add	r2,r4,r2
10004ac0:	da000617 	ldw	r8,24(sp)
10004ac4:	da400417 	ldw	r9,16(sp)
10004ac8:	1280022e 	bgeu	r2,r10,10004ad4 <__muldf3+0x580>
10004acc:	01000074 	movhi	r4,1
10004ad0:	8923883a 	add	r17,r17,r4
10004ad4:	1008943a 	slli	r4,r2,16
10004ad8:	39ffffcc 	andi	r7,r7,65535
10004adc:	e4b9883a 	add	fp,fp,r18
10004ae0:	21cf883a 	add	r7,r4,r7
10004ae4:	e4e7803a 	cmpltu	r19,fp,r19
10004ae8:	3d0f883a 	add	r7,r7,r20
10004aec:	bf39883a 	add	fp,r23,fp
10004af0:	99c9883a 	add	r4,r19,r7
10004af4:	e5ef803a 	cmpltu	r23,fp,r23
10004af8:	490b883a 	add	r5,r9,r4
10004afc:	1004d43a 	srli	r2,r2,16
10004b00:	b965883a 	add	r18,r23,r5
10004b04:	24c9803a 	cmpltu	r4,r4,r19
10004b08:	3d29803a 	cmpltu	r20,r7,r20
10004b0c:	a128b03a 	or	r20,r20,r4
10004b10:	95ef803a 	cmpltu	r23,r18,r23
10004b14:	2a53803a 	cmpltu	r9,r5,r9
10004b18:	a0a9883a 	add	r20,r20,r2
10004b1c:	4deeb03a 	or	r23,r9,r23
10004b20:	a5ef883a 	add	r23,r20,r23
10004b24:	bc63883a 	add	r17,r23,r17
10004b28:	e004927a 	slli	r2,fp,9
10004b2c:	d9000117 	ldw	r4,4(sp)
10004b30:	882e927a 	slli	r23,r17,9
10004b34:	9022d5fa 	srli	r17,r18,23
10004b38:	e038d5fa 	srli	fp,fp,23
10004b3c:	1104b03a 	or	r2,r2,r4
10004b40:	9024927a 	slli	r18,r18,9
10004b44:	1004c03a 	cmpne	r2,r2,zero
10004b48:	bc62b03a 	or	r17,r23,r17
10004b4c:	1738b03a 	or	fp,r2,fp
10004b50:	8880402c 	andhi	r2,r17,256
10004b54:	e4a4b03a 	or	r18,fp,r18
10004b58:	10000726 	beq	r2,zero,10004b78 <__muldf3+0x624>
10004b5c:	9006d07a 	srli	r3,r18,1
10004b60:	880497fa 	slli	r2,r17,31
10004b64:	9480004c 	andi	r18,r18,1
10004b68:	8822d07a 	srli	r17,r17,1
10004b6c:	1ca4b03a 	or	r18,r3,r18
10004b70:	14a4b03a 	or	r18,r2,r18
10004b74:	4007883a 	mov	r3,r8
10004b78:	1880ffc4 	addi	r2,r3,1023
10004b7c:	0080460e 	bge	zero,r2,10004c98 <__muldf3+0x744>
10004b80:	910001cc 	andi	r4,r18,7
10004b84:	20000726 	beq	r4,zero,10004ba4 <__muldf3+0x650>
10004b88:	910003cc 	andi	r4,r18,15
10004b8c:	01400104 	movi	r5,4
10004b90:	21400426 	beq	r4,r5,10004ba4 <__muldf3+0x650>
10004b94:	9149883a 	add	r4,r18,r5
10004b98:	24a5803a 	cmpltu	r18,r4,r18
10004b9c:	8ca3883a 	add	r17,r17,r18
10004ba0:	2025883a 	mov	r18,r4
10004ba4:	8900402c 	andhi	r4,r17,256
10004ba8:	20000426 	beq	r4,zero,10004bbc <__muldf3+0x668>
10004bac:	18810004 	addi	r2,r3,1024
10004bb0:	00ffc034 	movhi	r3,65280
10004bb4:	18ffffc4 	addi	r3,r3,-1
10004bb8:	88e2703a 	and	r17,r17,r3
10004bbc:	00c1ff84 	movi	r3,2046
10004bc0:	18bf1416 	blt	r3,r2,10004814 <__alt_data_end+0xf8004814>
10004bc4:	882c977a 	slli	r22,r17,29
10004bc8:	9024d0fa 	srli	r18,r18,3
10004bcc:	8822927a 	slli	r17,r17,9
10004bd0:	1081ffcc 	andi	r2,r2,2047
10004bd4:	b4acb03a 	or	r22,r22,r18
10004bd8:	8820d33a 	srli	r16,r17,12
10004bdc:	3027883a 	mov	r19,r6
10004be0:	003ebb06 	br	100046d0 <__alt_data_end+0xf80046d0>
10004be4:	8080022c 	andhi	r2,r16,8
10004be8:	10000926 	beq	r2,zero,10004c10 <__muldf3+0x6bc>
10004bec:	8880022c 	andhi	r2,r17,8
10004bf0:	1000071e 	bne	r2,zero,10004c10 <__muldf3+0x6bc>
10004bf4:	00800434 	movhi	r2,16
10004bf8:	8c000234 	orhi	r16,r17,8
10004bfc:	10bfffc4 	addi	r2,r2,-1
10004c00:	e027883a 	mov	r19,fp
10004c04:	80a0703a 	and	r16,r16,r2
10004c08:	902d883a 	mov	r22,r18
10004c0c:	003f1806 	br	10004870 <__alt_data_end+0xf8004870>
10004c10:	00800434 	movhi	r2,16
10004c14:	84000234 	orhi	r16,r16,8
10004c18:	10bfffc4 	addi	r2,r2,-1
10004c1c:	80a0703a 	and	r16,r16,r2
10004c20:	003f1306 	br	10004870 <__alt_data_end+0xf8004870>
10004c24:	147ff604 	addi	r17,r2,-40
10004c28:	3462983a 	sll	r17,r6,r17
10004c2c:	0025883a 	mov	r18,zero
10004c30:	003ef406 	br	10004804 <__alt_data_end+0xf8004804>
10004c34:	3009883a 	mov	r4,r6
10004c38:	d9400215 	stw	r5,8(sp)
10004c3c:	d9800715 	stw	r6,28(sp)
10004c40:	da400415 	stw	r9,16(sp)
10004c44:	da800315 	stw	r10,12(sp)
10004c48:	00059700 	call	10005970 <__clzsi2>
10004c4c:	10800804 	addi	r2,r2,32
10004c50:	da800317 	ldw	r10,12(sp)
10004c54:	da400417 	ldw	r9,16(sp)
10004c58:	d9800717 	ldw	r6,28(sp)
10004c5c:	d9400217 	ldw	r5,8(sp)
10004c60:	003ede06 	br	100047dc <__alt_data_end+0xf80047dc>
10004c64:	143ff604 	addi	r16,r2,-40
10004c68:	ac20983a 	sll	r16,r21,r16
10004c6c:	002d883a 	mov	r22,zero
10004c70:	003ec206 	br	1000477c <__alt_data_end+0xf800477c>
10004c74:	d9800715 	stw	r6,28(sp)
10004c78:	d9c00215 	stw	r7,8(sp)
10004c7c:	da400415 	stw	r9,16(sp)
10004c80:	00059700 	call	10005970 <__clzsi2>
10004c84:	10800804 	addi	r2,r2,32
10004c88:	da400417 	ldw	r9,16(sp)
10004c8c:	d9c00217 	ldw	r7,8(sp)
10004c90:	d9800717 	ldw	r6,28(sp)
10004c94:	003eaf06 	br	10004754 <__alt_data_end+0xf8004754>
10004c98:	00c00044 	movi	r3,1
10004c9c:	1887c83a 	sub	r3,r3,r2
10004ca0:	01000e04 	movi	r4,56
10004ca4:	20fe8616 	blt	r4,r3,100046c0 <__alt_data_end+0xf80046c0>
10004ca8:	010007c4 	movi	r4,31
10004cac:	20c01b16 	blt	r4,r3,10004d1c <__muldf3+0x7c8>
10004cb0:	00800804 	movi	r2,32
10004cb4:	10c5c83a 	sub	r2,r2,r3
10004cb8:	888a983a 	sll	r5,r17,r2
10004cbc:	90c8d83a 	srl	r4,r18,r3
10004cc0:	9084983a 	sll	r2,r18,r2
10004cc4:	88e2d83a 	srl	r17,r17,r3
10004cc8:	2906b03a 	or	r3,r5,r4
10004ccc:	1004c03a 	cmpne	r2,r2,zero
10004cd0:	1886b03a 	or	r3,r3,r2
10004cd4:	188001cc 	andi	r2,r3,7
10004cd8:	10000726 	beq	r2,zero,10004cf8 <__muldf3+0x7a4>
10004cdc:	188003cc 	andi	r2,r3,15
10004ce0:	01000104 	movi	r4,4
10004ce4:	11000426 	beq	r2,r4,10004cf8 <__muldf3+0x7a4>
10004ce8:	1805883a 	mov	r2,r3
10004cec:	10c00104 	addi	r3,r2,4
10004cf0:	1885803a 	cmpltu	r2,r3,r2
10004cf4:	88a3883a 	add	r17,r17,r2
10004cf8:	8880202c 	andhi	r2,r17,128
10004cfc:	10001c26 	beq	r2,zero,10004d70 <__muldf3+0x81c>
10004d00:	3027883a 	mov	r19,r6
10004d04:	00800044 	movi	r2,1
10004d08:	0021883a 	mov	r16,zero
10004d0c:	002d883a 	mov	r22,zero
10004d10:	003e6f06 	br	100046d0 <__alt_data_end+0xf80046d0>
10004d14:	4007883a 	mov	r3,r8
10004d18:	003f9706 	br	10004b78 <__alt_data_end+0xf8004b78>
10004d1c:	017ff844 	movi	r5,-31
10004d20:	2885c83a 	sub	r2,r5,r2
10004d24:	888ad83a 	srl	r5,r17,r2
10004d28:	00800804 	movi	r2,32
10004d2c:	18801a26 	beq	r3,r2,10004d98 <__muldf3+0x844>
10004d30:	01001004 	movi	r4,64
10004d34:	20c7c83a 	sub	r3,r4,r3
10004d38:	88e2983a 	sll	r17,r17,r3
10004d3c:	8ca4b03a 	or	r18,r17,r18
10004d40:	9004c03a 	cmpne	r2,r18,zero
10004d44:	2884b03a 	or	r2,r5,r2
10004d48:	144001cc 	andi	r17,r2,7
10004d4c:	88000d1e 	bne	r17,zero,10004d84 <__muldf3+0x830>
10004d50:	0021883a 	mov	r16,zero
10004d54:	102cd0fa 	srli	r22,r2,3
10004d58:	3027883a 	mov	r19,r6
10004d5c:	0005883a 	mov	r2,zero
10004d60:	b46cb03a 	or	r22,r22,r17
10004d64:	003e5a06 	br	100046d0 <__alt_data_end+0xf80046d0>
10004d68:	1007883a 	mov	r3,r2
10004d6c:	0023883a 	mov	r17,zero
10004d70:	8820927a 	slli	r16,r17,9
10004d74:	1805883a 	mov	r2,r3
10004d78:	8822977a 	slli	r17,r17,29
10004d7c:	8020d33a 	srli	r16,r16,12
10004d80:	003ff406 	br	10004d54 <__alt_data_end+0xf8004d54>
10004d84:	10c003cc 	andi	r3,r2,15
10004d88:	01000104 	movi	r4,4
10004d8c:	193ff626 	beq	r3,r4,10004d68 <__alt_data_end+0xf8004d68>
10004d90:	0023883a 	mov	r17,zero
10004d94:	003fd506 	br	10004cec <__alt_data_end+0xf8004cec>
10004d98:	0023883a 	mov	r17,zero
10004d9c:	003fe706 	br	10004d3c <__alt_data_end+0xf8004d3c>
10004da0:	00800434 	movhi	r2,16
10004da4:	8c000234 	orhi	r16,r17,8
10004da8:	10bfffc4 	addi	r2,r2,-1
10004dac:	3027883a 	mov	r19,r6
10004db0:	80a0703a 	and	r16,r16,r2
10004db4:	902d883a 	mov	r22,r18
10004db8:	003ead06 	br	10004870 <__alt_data_end+0xf8004870>

10004dbc <__subdf3>:
10004dbc:	02000434 	movhi	r8,16
10004dc0:	423fffc4 	addi	r8,r8,-1
10004dc4:	defffb04 	addi	sp,sp,-20
10004dc8:	2a14703a 	and	r10,r5,r8
10004dcc:	3812d53a 	srli	r9,r7,20
10004dd0:	3a10703a 	and	r8,r7,r8
10004dd4:	2006d77a 	srli	r3,r4,29
10004dd8:	3004d77a 	srli	r2,r6,29
10004ddc:	dc000015 	stw	r16,0(sp)
10004de0:	501490fa 	slli	r10,r10,3
10004de4:	2820d53a 	srli	r16,r5,20
10004de8:	401090fa 	slli	r8,r8,3
10004dec:	dc800215 	stw	r18,8(sp)
10004df0:	dc400115 	stw	r17,4(sp)
10004df4:	dfc00415 	stw	ra,16(sp)
10004df8:	202290fa 	slli	r17,r4,3
10004dfc:	dcc00315 	stw	r19,12(sp)
10004e00:	4a41ffcc 	andi	r9,r9,2047
10004e04:	0101ffc4 	movi	r4,2047
10004e08:	2824d7fa 	srli	r18,r5,31
10004e0c:	8401ffcc 	andi	r16,r16,2047
10004e10:	50c6b03a 	or	r3,r10,r3
10004e14:	380ed7fa 	srli	r7,r7,31
10004e18:	408ab03a 	or	r5,r8,r2
10004e1c:	300c90fa 	slli	r6,r6,3
10004e20:	49009626 	beq	r9,r4,1000507c <__subdf3+0x2c0>
10004e24:	39c0005c 	xori	r7,r7,1
10004e28:	8245c83a 	sub	r2,r16,r9
10004e2c:	3c807426 	beq	r7,r18,10005000 <__subdf3+0x244>
10004e30:	0080af0e 	bge	zero,r2,100050f0 <__subdf3+0x334>
10004e34:	48002a1e 	bne	r9,zero,10004ee0 <__subdf3+0x124>
10004e38:	2988b03a 	or	r4,r5,r6
10004e3c:	20009a1e 	bne	r4,zero,100050a8 <__subdf3+0x2ec>
10004e40:	888001cc 	andi	r2,r17,7
10004e44:	10000726 	beq	r2,zero,10004e64 <__subdf3+0xa8>
10004e48:	888003cc 	andi	r2,r17,15
10004e4c:	01000104 	movi	r4,4
10004e50:	11000426 	beq	r2,r4,10004e64 <__subdf3+0xa8>
10004e54:	890b883a 	add	r5,r17,r4
10004e58:	2c63803a 	cmpltu	r17,r5,r17
10004e5c:	1c47883a 	add	r3,r3,r17
10004e60:	2823883a 	mov	r17,r5
10004e64:	1880202c 	andhi	r2,r3,128
10004e68:	10005926 	beq	r2,zero,10004fd0 <__subdf3+0x214>
10004e6c:	84000044 	addi	r16,r16,1
10004e70:	0081ffc4 	movi	r2,2047
10004e74:	8080be26 	beq	r16,r2,10005170 <__subdf3+0x3b4>
10004e78:	017fe034 	movhi	r5,65408
10004e7c:	297fffc4 	addi	r5,r5,-1
10004e80:	1946703a 	and	r3,r3,r5
10004e84:	1804977a 	slli	r2,r3,29
10004e88:	1806927a 	slli	r3,r3,9
10004e8c:	8822d0fa 	srli	r17,r17,3
10004e90:	8401ffcc 	andi	r16,r16,2047
10004e94:	180ad33a 	srli	r5,r3,12
10004e98:	9100004c 	andi	r4,r18,1
10004e9c:	1444b03a 	or	r2,r2,r17
10004ea0:	80c1ffcc 	andi	r3,r16,2047
10004ea4:	1820953a 	slli	r16,r3,20
10004ea8:	20c03fcc 	andi	r3,r4,255
10004eac:	180897fa 	slli	r4,r3,31
10004eb0:	00c00434 	movhi	r3,16
10004eb4:	18ffffc4 	addi	r3,r3,-1
10004eb8:	28c6703a 	and	r3,r5,r3
10004ebc:	1c06b03a 	or	r3,r3,r16
10004ec0:	1906b03a 	or	r3,r3,r4
10004ec4:	dfc00417 	ldw	ra,16(sp)
10004ec8:	dcc00317 	ldw	r19,12(sp)
10004ecc:	dc800217 	ldw	r18,8(sp)
10004ed0:	dc400117 	ldw	r17,4(sp)
10004ed4:	dc000017 	ldw	r16,0(sp)
10004ed8:	dec00504 	addi	sp,sp,20
10004edc:	f800283a 	ret
10004ee0:	0101ffc4 	movi	r4,2047
10004ee4:	813fd626 	beq	r16,r4,10004e40 <__alt_data_end+0xf8004e40>
10004ee8:	29402034 	orhi	r5,r5,128
10004eec:	01000e04 	movi	r4,56
10004ef0:	2080a316 	blt	r4,r2,10005180 <__subdf3+0x3c4>
10004ef4:	010007c4 	movi	r4,31
10004ef8:	2080c616 	blt	r4,r2,10005214 <__subdf3+0x458>
10004efc:	01000804 	movi	r4,32
10004f00:	2089c83a 	sub	r4,r4,r2
10004f04:	2910983a 	sll	r8,r5,r4
10004f08:	308ed83a 	srl	r7,r6,r2
10004f0c:	3108983a 	sll	r4,r6,r4
10004f10:	2884d83a 	srl	r2,r5,r2
10004f14:	41ccb03a 	or	r6,r8,r7
10004f18:	2008c03a 	cmpne	r4,r4,zero
10004f1c:	310cb03a 	or	r6,r6,r4
10004f20:	898dc83a 	sub	r6,r17,r6
10004f24:	89a3803a 	cmpltu	r17,r17,r6
10004f28:	1887c83a 	sub	r3,r3,r2
10004f2c:	1c47c83a 	sub	r3,r3,r17
10004f30:	3023883a 	mov	r17,r6
10004f34:	1880202c 	andhi	r2,r3,128
10004f38:	10002326 	beq	r2,zero,10004fc8 <__subdf3+0x20c>
10004f3c:	04c02034 	movhi	r19,128
10004f40:	9cffffc4 	addi	r19,r19,-1
10004f44:	1ce6703a 	and	r19,r3,r19
10004f48:	98007a26 	beq	r19,zero,10005134 <__subdf3+0x378>
10004f4c:	9809883a 	mov	r4,r19
10004f50:	00059700 	call	10005970 <__clzsi2>
10004f54:	113ffe04 	addi	r4,r2,-8
10004f58:	00c007c4 	movi	r3,31
10004f5c:	19007b16 	blt	r3,r4,1000514c <__subdf3+0x390>
10004f60:	00800804 	movi	r2,32
10004f64:	1105c83a 	sub	r2,r2,r4
10004f68:	8884d83a 	srl	r2,r17,r2
10004f6c:	9906983a 	sll	r3,r19,r4
10004f70:	8922983a 	sll	r17,r17,r4
10004f74:	10c4b03a 	or	r2,r2,r3
10004f78:	24007816 	blt	r4,r16,1000515c <__subdf3+0x3a0>
10004f7c:	2421c83a 	sub	r16,r4,r16
10004f80:	80c00044 	addi	r3,r16,1
10004f84:	010007c4 	movi	r4,31
10004f88:	20c09516 	blt	r4,r3,100051e0 <__subdf3+0x424>
10004f8c:	01400804 	movi	r5,32
10004f90:	28cbc83a 	sub	r5,r5,r3
10004f94:	88c8d83a 	srl	r4,r17,r3
10004f98:	8962983a 	sll	r17,r17,r5
10004f9c:	114a983a 	sll	r5,r2,r5
10004fa0:	10c6d83a 	srl	r3,r2,r3
10004fa4:	8804c03a 	cmpne	r2,r17,zero
10004fa8:	290ab03a 	or	r5,r5,r4
10004fac:	28a2b03a 	or	r17,r5,r2
10004fb0:	0021883a 	mov	r16,zero
10004fb4:	003fa206 	br	10004e40 <__alt_data_end+0xf8004e40>
10004fb8:	2090b03a 	or	r8,r4,r2
10004fbc:	40018e26 	beq	r8,zero,100055f8 <__subdf3+0x83c>
10004fc0:	1007883a 	mov	r3,r2
10004fc4:	2023883a 	mov	r17,r4
10004fc8:	888001cc 	andi	r2,r17,7
10004fcc:	103f9e1e 	bne	r2,zero,10004e48 <__alt_data_end+0xf8004e48>
10004fd0:	1804977a 	slli	r2,r3,29
10004fd4:	8822d0fa 	srli	r17,r17,3
10004fd8:	1810d0fa 	srli	r8,r3,3
10004fdc:	9100004c 	andi	r4,r18,1
10004fe0:	1444b03a 	or	r2,r2,r17
10004fe4:	00c1ffc4 	movi	r3,2047
10004fe8:	80c02826 	beq	r16,r3,1000508c <__subdf3+0x2d0>
10004fec:	01400434 	movhi	r5,16
10004ff0:	297fffc4 	addi	r5,r5,-1
10004ff4:	80e0703a 	and	r16,r16,r3
10004ff8:	414a703a 	and	r5,r8,r5
10004ffc:	003fa806 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10005000:	0080630e 	bge	zero,r2,10005190 <__subdf3+0x3d4>
10005004:	48003026 	beq	r9,zero,100050c8 <__subdf3+0x30c>
10005008:	0101ffc4 	movi	r4,2047
1000500c:	813f8c26 	beq	r16,r4,10004e40 <__alt_data_end+0xf8004e40>
10005010:	29402034 	orhi	r5,r5,128
10005014:	01000e04 	movi	r4,56
10005018:	2080a90e 	bge	r4,r2,100052c0 <__subdf3+0x504>
1000501c:	298cb03a 	or	r6,r5,r6
10005020:	3012c03a 	cmpne	r9,r6,zero
10005024:	0005883a 	mov	r2,zero
10005028:	4c53883a 	add	r9,r9,r17
1000502c:	4c63803a 	cmpltu	r17,r9,r17
10005030:	10c7883a 	add	r3,r2,r3
10005034:	88c7883a 	add	r3,r17,r3
10005038:	4823883a 	mov	r17,r9
1000503c:	1880202c 	andhi	r2,r3,128
10005040:	1000d026 	beq	r2,zero,10005384 <__subdf3+0x5c8>
10005044:	84000044 	addi	r16,r16,1
10005048:	0081ffc4 	movi	r2,2047
1000504c:	8080fe26 	beq	r16,r2,10005448 <__subdf3+0x68c>
10005050:	00bfe034 	movhi	r2,65408
10005054:	10bfffc4 	addi	r2,r2,-1
10005058:	1886703a 	and	r3,r3,r2
1000505c:	880ad07a 	srli	r5,r17,1
10005060:	180497fa 	slli	r2,r3,31
10005064:	8900004c 	andi	r4,r17,1
10005068:	2922b03a 	or	r17,r5,r4
1000506c:	1806d07a 	srli	r3,r3,1
10005070:	1462b03a 	or	r17,r2,r17
10005074:	3825883a 	mov	r18,r7
10005078:	003f7106 	br	10004e40 <__alt_data_end+0xf8004e40>
1000507c:	2984b03a 	or	r2,r5,r6
10005080:	103f6826 	beq	r2,zero,10004e24 <__alt_data_end+0xf8004e24>
10005084:	39c03fcc 	andi	r7,r7,255
10005088:	003f6706 	br	10004e28 <__alt_data_end+0xf8004e28>
1000508c:	4086b03a 	or	r3,r8,r2
10005090:	18015226 	beq	r3,zero,100055dc <__subdf3+0x820>
10005094:	00c00434 	movhi	r3,16
10005098:	41400234 	orhi	r5,r8,8
1000509c:	18ffffc4 	addi	r3,r3,-1
100050a0:	28ca703a 	and	r5,r5,r3
100050a4:	003f7e06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
100050a8:	10bfffc4 	addi	r2,r2,-1
100050ac:	1000491e 	bne	r2,zero,100051d4 <__subdf3+0x418>
100050b0:	898fc83a 	sub	r7,r17,r6
100050b4:	89e3803a 	cmpltu	r17,r17,r7
100050b8:	1947c83a 	sub	r3,r3,r5
100050bc:	1c47c83a 	sub	r3,r3,r17
100050c0:	3823883a 	mov	r17,r7
100050c4:	003f9b06 	br	10004f34 <__alt_data_end+0xf8004f34>
100050c8:	2988b03a 	or	r4,r5,r6
100050cc:	203f5c26 	beq	r4,zero,10004e40 <__alt_data_end+0xf8004e40>
100050d0:	10bfffc4 	addi	r2,r2,-1
100050d4:	1000931e 	bne	r2,zero,10005324 <__subdf3+0x568>
100050d8:	898d883a 	add	r6,r17,r6
100050dc:	3463803a 	cmpltu	r17,r6,r17
100050e0:	1947883a 	add	r3,r3,r5
100050e4:	88c7883a 	add	r3,r17,r3
100050e8:	3023883a 	mov	r17,r6
100050ec:	003fd306 	br	1000503c <__alt_data_end+0xf800503c>
100050f0:	1000541e 	bne	r2,zero,10005244 <__subdf3+0x488>
100050f4:	80800044 	addi	r2,r16,1
100050f8:	1081ffcc 	andi	r2,r2,2047
100050fc:	01000044 	movi	r4,1
10005100:	2080a20e 	bge	r4,r2,1000538c <__subdf3+0x5d0>
10005104:	8989c83a 	sub	r4,r17,r6
10005108:	8905803a 	cmpltu	r2,r17,r4
1000510c:	1967c83a 	sub	r19,r3,r5
10005110:	98a7c83a 	sub	r19,r19,r2
10005114:	9880202c 	andhi	r2,r19,128
10005118:	10006326 	beq	r2,zero,100052a8 <__subdf3+0x4ec>
1000511c:	3463c83a 	sub	r17,r6,r17
10005120:	28c7c83a 	sub	r3,r5,r3
10005124:	344d803a 	cmpltu	r6,r6,r17
10005128:	19a7c83a 	sub	r19,r3,r6
1000512c:	3825883a 	mov	r18,r7
10005130:	983f861e 	bne	r19,zero,10004f4c <__alt_data_end+0xf8004f4c>
10005134:	8809883a 	mov	r4,r17
10005138:	00059700 	call	10005970 <__clzsi2>
1000513c:	10800804 	addi	r2,r2,32
10005140:	113ffe04 	addi	r4,r2,-8
10005144:	00c007c4 	movi	r3,31
10005148:	193f850e 	bge	r3,r4,10004f60 <__alt_data_end+0xf8004f60>
1000514c:	10bff604 	addi	r2,r2,-40
10005150:	8884983a 	sll	r2,r17,r2
10005154:	0023883a 	mov	r17,zero
10005158:	243f880e 	bge	r4,r16,10004f7c <__alt_data_end+0xf8004f7c>
1000515c:	00ffe034 	movhi	r3,65408
10005160:	18ffffc4 	addi	r3,r3,-1
10005164:	8121c83a 	sub	r16,r16,r4
10005168:	10c6703a 	and	r3,r2,r3
1000516c:	003f3406 	br	10004e40 <__alt_data_end+0xf8004e40>
10005170:	9100004c 	andi	r4,r18,1
10005174:	000b883a 	mov	r5,zero
10005178:	0005883a 	mov	r2,zero
1000517c:	003f4806 	br	10004ea0 <__alt_data_end+0xf8004ea0>
10005180:	298cb03a 	or	r6,r5,r6
10005184:	300cc03a 	cmpne	r6,r6,zero
10005188:	0005883a 	mov	r2,zero
1000518c:	003f6406 	br	10004f20 <__alt_data_end+0xf8004f20>
10005190:	10009a1e 	bne	r2,zero,100053fc <__subdf3+0x640>
10005194:	82400044 	addi	r9,r16,1
10005198:	4881ffcc 	andi	r2,r9,2047
1000519c:	02800044 	movi	r10,1
100051a0:	5080670e 	bge	r10,r2,10005340 <__subdf3+0x584>
100051a4:	0081ffc4 	movi	r2,2047
100051a8:	4880af26 	beq	r9,r2,10005468 <__subdf3+0x6ac>
100051ac:	898d883a 	add	r6,r17,r6
100051b0:	1945883a 	add	r2,r3,r5
100051b4:	3447803a 	cmpltu	r3,r6,r17
100051b8:	1887883a 	add	r3,r3,r2
100051bc:	182297fa 	slli	r17,r3,31
100051c0:	300cd07a 	srli	r6,r6,1
100051c4:	1806d07a 	srli	r3,r3,1
100051c8:	4821883a 	mov	r16,r9
100051cc:	89a2b03a 	or	r17,r17,r6
100051d0:	003f1b06 	br	10004e40 <__alt_data_end+0xf8004e40>
100051d4:	0101ffc4 	movi	r4,2047
100051d8:	813f441e 	bne	r16,r4,10004eec <__alt_data_end+0xf8004eec>
100051dc:	003f1806 	br	10004e40 <__alt_data_end+0xf8004e40>
100051e0:	843ff844 	addi	r16,r16,-31
100051e4:	01400804 	movi	r5,32
100051e8:	1408d83a 	srl	r4,r2,r16
100051ec:	19405026 	beq	r3,r5,10005330 <__subdf3+0x574>
100051f0:	01401004 	movi	r5,64
100051f4:	28c7c83a 	sub	r3,r5,r3
100051f8:	10c4983a 	sll	r2,r2,r3
100051fc:	88a2b03a 	or	r17,r17,r2
10005200:	8822c03a 	cmpne	r17,r17,zero
10005204:	2462b03a 	or	r17,r4,r17
10005208:	0007883a 	mov	r3,zero
1000520c:	0021883a 	mov	r16,zero
10005210:	003f6d06 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10005214:	11fff804 	addi	r7,r2,-32
10005218:	01000804 	movi	r4,32
1000521c:	29ced83a 	srl	r7,r5,r7
10005220:	11004526 	beq	r2,r4,10005338 <__subdf3+0x57c>
10005224:	01001004 	movi	r4,64
10005228:	2089c83a 	sub	r4,r4,r2
1000522c:	2904983a 	sll	r2,r5,r4
10005230:	118cb03a 	or	r6,r2,r6
10005234:	300cc03a 	cmpne	r6,r6,zero
10005238:	398cb03a 	or	r6,r7,r6
1000523c:	0005883a 	mov	r2,zero
10005240:	003f3706 	br	10004f20 <__alt_data_end+0xf8004f20>
10005244:	80002a26 	beq	r16,zero,100052f0 <__subdf3+0x534>
10005248:	0101ffc4 	movi	r4,2047
1000524c:	49006626 	beq	r9,r4,100053e8 <__subdf3+0x62c>
10005250:	0085c83a 	sub	r2,zero,r2
10005254:	18c02034 	orhi	r3,r3,128
10005258:	01000e04 	movi	r4,56
1000525c:	20807e16 	blt	r4,r2,10005458 <__subdf3+0x69c>
10005260:	010007c4 	movi	r4,31
10005264:	2080e716 	blt	r4,r2,10005604 <__subdf3+0x848>
10005268:	01000804 	movi	r4,32
1000526c:	2089c83a 	sub	r4,r4,r2
10005270:	1914983a 	sll	r10,r3,r4
10005274:	8890d83a 	srl	r8,r17,r2
10005278:	8908983a 	sll	r4,r17,r4
1000527c:	1884d83a 	srl	r2,r3,r2
10005280:	5222b03a 	or	r17,r10,r8
10005284:	2006c03a 	cmpne	r3,r4,zero
10005288:	88e2b03a 	or	r17,r17,r3
1000528c:	3463c83a 	sub	r17,r6,r17
10005290:	2885c83a 	sub	r2,r5,r2
10005294:	344d803a 	cmpltu	r6,r6,r17
10005298:	1187c83a 	sub	r3,r2,r6
1000529c:	4821883a 	mov	r16,r9
100052a0:	3825883a 	mov	r18,r7
100052a4:	003f2306 	br	10004f34 <__alt_data_end+0xf8004f34>
100052a8:	24d0b03a 	or	r8,r4,r19
100052ac:	40001b1e 	bne	r8,zero,1000531c <__subdf3+0x560>
100052b0:	0005883a 	mov	r2,zero
100052b4:	0009883a 	mov	r4,zero
100052b8:	0021883a 	mov	r16,zero
100052bc:	003f4906 	br	10004fe4 <__alt_data_end+0xf8004fe4>
100052c0:	010007c4 	movi	r4,31
100052c4:	20803a16 	blt	r4,r2,100053b0 <__subdf3+0x5f4>
100052c8:	01000804 	movi	r4,32
100052cc:	2089c83a 	sub	r4,r4,r2
100052d0:	2912983a 	sll	r9,r5,r4
100052d4:	3090d83a 	srl	r8,r6,r2
100052d8:	3108983a 	sll	r4,r6,r4
100052dc:	2884d83a 	srl	r2,r5,r2
100052e0:	4a12b03a 	or	r9,r9,r8
100052e4:	2008c03a 	cmpne	r4,r4,zero
100052e8:	4912b03a 	or	r9,r9,r4
100052ec:	003f4e06 	br	10005028 <__alt_data_end+0xf8005028>
100052f0:	1c48b03a 	or	r4,r3,r17
100052f4:	20003c26 	beq	r4,zero,100053e8 <__subdf3+0x62c>
100052f8:	0084303a 	nor	r2,zero,r2
100052fc:	1000381e 	bne	r2,zero,100053e0 <__subdf3+0x624>
10005300:	3463c83a 	sub	r17,r6,r17
10005304:	28c5c83a 	sub	r2,r5,r3
10005308:	344d803a 	cmpltu	r6,r6,r17
1000530c:	1187c83a 	sub	r3,r2,r6
10005310:	4821883a 	mov	r16,r9
10005314:	3825883a 	mov	r18,r7
10005318:	003f0606 	br	10004f34 <__alt_data_end+0xf8004f34>
1000531c:	2023883a 	mov	r17,r4
10005320:	003f0906 	br	10004f48 <__alt_data_end+0xf8004f48>
10005324:	0101ffc4 	movi	r4,2047
10005328:	813f3a1e 	bne	r16,r4,10005014 <__alt_data_end+0xf8005014>
1000532c:	003ec406 	br	10004e40 <__alt_data_end+0xf8004e40>
10005330:	0005883a 	mov	r2,zero
10005334:	003fb106 	br	100051fc <__alt_data_end+0xf80051fc>
10005338:	0005883a 	mov	r2,zero
1000533c:	003fbc06 	br	10005230 <__alt_data_end+0xf8005230>
10005340:	1c44b03a 	or	r2,r3,r17
10005344:	80008e1e 	bne	r16,zero,10005580 <__subdf3+0x7c4>
10005348:	1000c826 	beq	r2,zero,1000566c <__subdf3+0x8b0>
1000534c:	2984b03a 	or	r2,r5,r6
10005350:	103ebb26 	beq	r2,zero,10004e40 <__alt_data_end+0xf8004e40>
10005354:	8989883a 	add	r4,r17,r6
10005358:	1945883a 	add	r2,r3,r5
1000535c:	2447803a 	cmpltu	r3,r4,r17
10005360:	1887883a 	add	r3,r3,r2
10005364:	1880202c 	andhi	r2,r3,128
10005368:	2023883a 	mov	r17,r4
1000536c:	103f1626 	beq	r2,zero,10004fc8 <__alt_data_end+0xf8004fc8>
10005370:	00bfe034 	movhi	r2,65408
10005374:	10bfffc4 	addi	r2,r2,-1
10005378:	5021883a 	mov	r16,r10
1000537c:	1886703a 	and	r3,r3,r2
10005380:	003eaf06 	br	10004e40 <__alt_data_end+0xf8004e40>
10005384:	3825883a 	mov	r18,r7
10005388:	003f0f06 	br	10004fc8 <__alt_data_end+0xf8004fc8>
1000538c:	1c44b03a 	or	r2,r3,r17
10005390:	8000251e 	bne	r16,zero,10005428 <__subdf3+0x66c>
10005394:	1000661e 	bne	r2,zero,10005530 <__subdf3+0x774>
10005398:	2990b03a 	or	r8,r5,r6
1000539c:	40009626 	beq	r8,zero,100055f8 <__subdf3+0x83c>
100053a0:	2807883a 	mov	r3,r5
100053a4:	3023883a 	mov	r17,r6
100053a8:	3825883a 	mov	r18,r7
100053ac:	003ea406 	br	10004e40 <__alt_data_end+0xf8004e40>
100053b0:	127ff804 	addi	r9,r2,-32
100053b4:	01000804 	movi	r4,32
100053b8:	2a52d83a 	srl	r9,r5,r9
100053bc:	11008c26 	beq	r2,r4,100055f0 <__subdf3+0x834>
100053c0:	01001004 	movi	r4,64
100053c4:	2085c83a 	sub	r2,r4,r2
100053c8:	2884983a 	sll	r2,r5,r2
100053cc:	118cb03a 	or	r6,r2,r6
100053d0:	300cc03a 	cmpne	r6,r6,zero
100053d4:	4992b03a 	or	r9,r9,r6
100053d8:	0005883a 	mov	r2,zero
100053dc:	003f1206 	br	10005028 <__alt_data_end+0xf8005028>
100053e0:	0101ffc4 	movi	r4,2047
100053e4:	493f9c1e 	bne	r9,r4,10005258 <__alt_data_end+0xf8005258>
100053e8:	2807883a 	mov	r3,r5
100053ec:	3023883a 	mov	r17,r6
100053f0:	4821883a 	mov	r16,r9
100053f4:	3825883a 	mov	r18,r7
100053f8:	003e9106 	br	10004e40 <__alt_data_end+0xf8004e40>
100053fc:	80001f1e 	bne	r16,zero,1000547c <__subdf3+0x6c0>
10005400:	1c48b03a 	or	r4,r3,r17
10005404:	20005a26 	beq	r4,zero,10005570 <__subdf3+0x7b4>
10005408:	0084303a 	nor	r2,zero,r2
1000540c:	1000561e 	bne	r2,zero,10005568 <__subdf3+0x7ac>
10005410:	89a3883a 	add	r17,r17,r6
10005414:	1945883a 	add	r2,r3,r5
10005418:	898d803a 	cmpltu	r6,r17,r6
1000541c:	3087883a 	add	r3,r6,r2
10005420:	4821883a 	mov	r16,r9
10005424:	003f0506 	br	1000503c <__alt_data_end+0xf800503c>
10005428:	10002b1e 	bne	r2,zero,100054d8 <__subdf3+0x71c>
1000542c:	2984b03a 	or	r2,r5,r6
10005430:	10008026 	beq	r2,zero,10005634 <__subdf3+0x878>
10005434:	2807883a 	mov	r3,r5
10005438:	3023883a 	mov	r17,r6
1000543c:	3825883a 	mov	r18,r7
10005440:	0401ffc4 	movi	r16,2047
10005444:	003e7e06 	br	10004e40 <__alt_data_end+0xf8004e40>
10005448:	3809883a 	mov	r4,r7
1000544c:	0011883a 	mov	r8,zero
10005450:	0005883a 	mov	r2,zero
10005454:	003ee306 	br	10004fe4 <__alt_data_end+0xf8004fe4>
10005458:	1c62b03a 	or	r17,r3,r17
1000545c:	8822c03a 	cmpne	r17,r17,zero
10005460:	0005883a 	mov	r2,zero
10005464:	003f8906 	br	1000528c <__alt_data_end+0xf800528c>
10005468:	3809883a 	mov	r4,r7
1000546c:	4821883a 	mov	r16,r9
10005470:	0011883a 	mov	r8,zero
10005474:	0005883a 	mov	r2,zero
10005478:	003eda06 	br	10004fe4 <__alt_data_end+0xf8004fe4>
1000547c:	0101ffc4 	movi	r4,2047
10005480:	49003b26 	beq	r9,r4,10005570 <__subdf3+0x7b4>
10005484:	0085c83a 	sub	r2,zero,r2
10005488:	18c02034 	orhi	r3,r3,128
1000548c:	01000e04 	movi	r4,56
10005490:	20806e16 	blt	r4,r2,1000564c <__subdf3+0x890>
10005494:	010007c4 	movi	r4,31
10005498:	20807716 	blt	r4,r2,10005678 <__subdf3+0x8bc>
1000549c:	01000804 	movi	r4,32
100054a0:	2089c83a 	sub	r4,r4,r2
100054a4:	1914983a 	sll	r10,r3,r4
100054a8:	8890d83a 	srl	r8,r17,r2
100054ac:	8908983a 	sll	r4,r17,r4
100054b0:	1884d83a 	srl	r2,r3,r2
100054b4:	5222b03a 	or	r17,r10,r8
100054b8:	2006c03a 	cmpne	r3,r4,zero
100054bc:	88e2b03a 	or	r17,r17,r3
100054c0:	89a3883a 	add	r17,r17,r6
100054c4:	1145883a 	add	r2,r2,r5
100054c8:	898d803a 	cmpltu	r6,r17,r6
100054cc:	3087883a 	add	r3,r6,r2
100054d0:	4821883a 	mov	r16,r9
100054d4:	003ed906 	br	1000503c <__alt_data_end+0xf800503c>
100054d8:	2984b03a 	or	r2,r5,r6
100054dc:	10004226 	beq	r2,zero,100055e8 <__subdf3+0x82c>
100054e0:	1808d0fa 	srli	r4,r3,3
100054e4:	8822d0fa 	srli	r17,r17,3
100054e8:	1806977a 	slli	r3,r3,29
100054ec:	2080022c 	andhi	r2,r4,8
100054f0:	1c62b03a 	or	r17,r3,r17
100054f4:	10000826 	beq	r2,zero,10005518 <__subdf3+0x75c>
100054f8:	2812d0fa 	srli	r9,r5,3
100054fc:	4880022c 	andhi	r2,r9,8
10005500:	1000051e 	bne	r2,zero,10005518 <__subdf3+0x75c>
10005504:	300cd0fa 	srli	r6,r6,3
10005508:	2804977a 	slli	r2,r5,29
1000550c:	4809883a 	mov	r4,r9
10005510:	3825883a 	mov	r18,r7
10005514:	11a2b03a 	or	r17,r2,r6
10005518:	8806d77a 	srli	r3,r17,29
1000551c:	200890fa 	slli	r4,r4,3
10005520:	882290fa 	slli	r17,r17,3
10005524:	0401ffc4 	movi	r16,2047
10005528:	1906b03a 	or	r3,r3,r4
1000552c:	003e4406 	br	10004e40 <__alt_data_end+0xf8004e40>
10005530:	2984b03a 	or	r2,r5,r6
10005534:	103e4226 	beq	r2,zero,10004e40 <__alt_data_end+0xf8004e40>
10005538:	8989c83a 	sub	r4,r17,r6
1000553c:	8911803a 	cmpltu	r8,r17,r4
10005540:	1945c83a 	sub	r2,r3,r5
10005544:	1205c83a 	sub	r2,r2,r8
10005548:	1200202c 	andhi	r8,r2,128
1000554c:	403e9a26 	beq	r8,zero,10004fb8 <__alt_data_end+0xf8004fb8>
10005550:	3463c83a 	sub	r17,r6,r17
10005554:	28c5c83a 	sub	r2,r5,r3
10005558:	344d803a 	cmpltu	r6,r6,r17
1000555c:	1187c83a 	sub	r3,r2,r6
10005560:	3825883a 	mov	r18,r7
10005564:	003e3606 	br	10004e40 <__alt_data_end+0xf8004e40>
10005568:	0101ffc4 	movi	r4,2047
1000556c:	493fc71e 	bne	r9,r4,1000548c <__alt_data_end+0xf800548c>
10005570:	2807883a 	mov	r3,r5
10005574:	3023883a 	mov	r17,r6
10005578:	4821883a 	mov	r16,r9
1000557c:	003e3006 	br	10004e40 <__alt_data_end+0xf8004e40>
10005580:	10003626 	beq	r2,zero,1000565c <__subdf3+0x8a0>
10005584:	2984b03a 	or	r2,r5,r6
10005588:	10001726 	beq	r2,zero,100055e8 <__subdf3+0x82c>
1000558c:	1808d0fa 	srli	r4,r3,3
10005590:	8822d0fa 	srli	r17,r17,3
10005594:	1806977a 	slli	r3,r3,29
10005598:	2080022c 	andhi	r2,r4,8
1000559c:	1c62b03a 	or	r17,r3,r17
100055a0:	10000726 	beq	r2,zero,100055c0 <__subdf3+0x804>
100055a4:	2812d0fa 	srli	r9,r5,3
100055a8:	4880022c 	andhi	r2,r9,8
100055ac:	1000041e 	bne	r2,zero,100055c0 <__subdf3+0x804>
100055b0:	300cd0fa 	srli	r6,r6,3
100055b4:	2804977a 	slli	r2,r5,29
100055b8:	4809883a 	mov	r4,r9
100055bc:	11a2b03a 	or	r17,r2,r6
100055c0:	8806d77a 	srli	r3,r17,29
100055c4:	200890fa 	slli	r4,r4,3
100055c8:	882290fa 	slli	r17,r17,3
100055cc:	3825883a 	mov	r18,r7
100055d0:	1906b03a 	or	r3,r3,r4
100055d4:	0401ffc4 	movi	r16,2047
100055d8:	003e1906 	br	10004e40 <__alt_data_end+0xf8004e40>
100055dc:	000b883a 	mov	r5,zero
100055e0:	0005883a 	mov	r2,zero
100055e4:	003e2e06 	br	10004ea0 <__alt_data_end+0xf8004ea0>
100055e8:	0401ffc4 	movi	r16,2047
100055ec:	003e1406 	br	10004e40 <__alt_data_end+0xf8004e40>
100055f0:	0005883a 	mov	r2,zero
100055f4:	003f7506 	br	100053cc <__alt_data_end+0xf80053cc>
100055f8:	0005883a 	mov	r2,zero
100055fc:	0009883a 	mov	r4,zero
10005600:	003e7806 	br	10004fe4 <__alt_data_end+0xf8004fe4>
10005604:	123ff804 	addi	r8,r2,-32
10005608:	01000804 	movi	r4,32
1000560c:	1a10d83a 	srl	r8,r3,r8
10005610:	11002526 	beq	r2,r4,100056a8 <__subdf3+0x8ec>
10005614:	01001004 	movi	r4,64
10005618:	2085c83a 	sub	r2,r4,r2
1000561c:	1884983a 	sll	r2,r3,r2
10005620:	1444b03a 	or	r2,r2,r17
10005624:	1004c03a 	cmpne	r2,r2,zero
10005628:	40a2b03a 	or	r17,r8,r2
1000562c:	0005883a 	mov	r2,zero
10005630:	003f1606 	br	1000528c <__alt_data_end+0xf800528c>
10005634:	02000434 	movhi	r8,16
10005638:	0009883a 	mov	r4,zero
1000563c:	423fffc4 	addi	r8,r8,-1
10005640:	00bfffc4 	movi	r2,-1
10005644:	0401ffc4 	movi	r16,2047
10005648:	003e6606 	br	10004fe4 <__alt_data_end+0xf8004fe4>
1000564c:	1c62b03a 	or	r17,r3,r17
10005650:	8822c03a 	cmpne	r17,r17,zero
10005654:	0005883a 	mov	r2,zero
10005658:	003f9906 	br	100054c0 <__alt_data_end+0xf80054c0>
1000565c:	2807883a 	mov	r3,r5
10005660:	3023883a 	mov	r17,r6
10005664:	0401ffc4 	movi	r16,2047
10005668:	003df506 	br	10004e40 <__alt_data_end+0xf8004e40>
1000566c:	2807883a 	mov	r3,r5
10005670:	3023883a 	mov	r17,r6
10005674:	003df206 	br	10004e40 <__alt_data_end+0xf8004e40>
10005678:	123ff804 	addi	r8,r2,-32
1000567c:	01000804 	movi	r4,32
10005680:	1a10d83a 	srl	r8,r3,r8
10005684:	11000a26 	beq	r2,r4,100056b0 <__subdf3+0x8f4>
10005688:	01001004 	movi	r4,64
1000568c:	2085c83a 	sub	r2,r4,r2
10005690:	1884983a 	sll	r2,r3,r2
10005694:	1444b03a 	or	r2,r2,r17
10005698:	1004c03a 	cmpne	r2,r2,zero
1000569c:	40a2b03a 	or	r17,r8,r2
100056a0:	0005883a 	mov	r2,zero
100056a4:	003f8606 	br	100054c0 <__alt_data_end+0xf80054c0>
100056a8:	0005883a 	mov	r2,zero
100056ac:	003fdc06 	br	10005620 <__alt_data_end+0xf8005620>
100056b0:	0005883a 	mov	r2,zero
100056b4:	003ff706 	br	10005694 <__alt_data_end+0xf8005694>

100056b8 <__extendsfdf2>:
100056b8:	200ad5fa 	srli	r5,r4,23
100056bc:	defffd04 	addi	sp,sp,-12
100056c0:	dc400115 	stw	r17,4(sp)
100056c4:	29403fcc 	andi	r5,r5,255
100056c8:	29800044 	addi	r6,r5,1
100056cc:	04402034 	movhi	r17,128
100056d0:	dc000015 	stw	r16,0(sp)
100056d4:	8c7fffc4 	addi	r17,r17,-1
100056d8:	dfc00215 	stw	ra,8(sp)
100056dc:	31803fcc 	andi	r6,r6,255
100056e0:	00800044 	movi	r2,1
100056e4:	8922703a 	and	r17,r17,r4
100056e8:	2020d7fa 	srli	r16,r4,31
100056ec:	1180110e 	bge	r2,r6,10005734 <__extendsfdf2+0x7c>
100056f0:	880cd0fa 	srli	r6,r17,3
100056f4:	8822977a 	slli	r17,r17,29
100056f8:	2940e004 	addi	r5,r5,896
100056fc:	2941ffcc 	andi	r5,r5,2047
10005700:	2804953a 	slli	r2,r5,20
10005704:	01400434 	movhi	r5,16
10005708:	800697fa 	slli	r3,r16,31
1000570c:	297fffc4 	addi	r5,r5,-1
10005710:	314a703a 	and	r5,r6,r5
10005714:	288ab03a 	or	r5,r5,r2
10005718:	28c6b03a 	or	r3,r5,r3
1000571c:	8805883a 	mov	r2,r17
10005720:	dfc00217 	ldw	ra,8(sp)
10005724:	dc400117 	ldw	r17,4(sp)
10005728:	dc000017 	ldw	r16,0(sp)
1000572c:	dec00304 	addi	sp,sp,12
10005730:	f800283a 	ret
10005734:	2800111e 	bne	r5,zero,1000577c <__extendsfdf2+0xc4>
10005738:	88001c26 	beq	r17,zero,100057ac <__extendsfdf2+0xf4>
1000573c:	8809883a 	mov	r4,r17
10005740:	00059700 	call	10005970 <__clzsi2>
10005744:	00c00284 	movi	r3,10
10005748:	18801b16 	blt	r3,r2,100057b8 <__extendsfdf2+0x100>
1000574c:	018002c4 	movi	r6,11
10005750:	308dc83a 	sub	r6,r6,r2
10005754:	11000544 	addi	r4,r2,21
10005758:	8986d83a 	srl	r3,r17,r6
1000575c:	8922983a 	sll	r17,r17,r4
10005760:	0180e244 	movi	r6,905
10005764:	01400434 	movhi	r5,16
10005768:	3085c83a 	sub	r2,r6,r2
1000576c:	297fffc4 	addi	r5,r5,-1
10005770:	194c703a 	and	r6,r3,r5
10005774:	1141ffcc 	andi	r5,r2,2047
10005778:	003fe006 	br	100056fc <__alt_data_end+0xf80056fc>
1000577c:	88000826 	beq	r17,zero,100057a0 <__extendsfdf2+0xe8>
10005780:	880cd0fa 	srli	r6,r17,3
10005784:	00800434 	movhi	r2,16
10005788:	10bfffc4 	addi	r2,r2,-1
1000578c:	31800234 	orhi	r6,r6,8
10005790:	8822977a 	slli	r17,r17,29
10005794:	308c703a 	and	r6,r6,r2
10005798:	0141ffc4 	movi	r5,2047
1000579c:	003fd706 	br	100056fc <__alt_data_end+0xf80056fc>
100057a0:	0141ffc4 	movi	r5,2047
100057a4:	000d883a 	mov	r6,zero
100057a8:	003fd406 	br	100056fc <__alt_data_end+0xf80056fc>
100057ac:	000b883a 	mov	r5,zero
100057b0:	000d883a 	mov	r6,zero
100057b4:	003fd106 	br	100056fc <__alt_data_end+0xf80056fc>
100057b8:	11bffd44 	addi	r6,r2,-11
100057bc:	8986983a 	sll	r3,r17,r6
100057c0:	0023883a 	mov	r17,zero
100057c4:	003fe606 	br	10005760 <__alt_data_end+0xf8005760>

100057c8 <__truncdfsf2>:
100057c8:	2810d53a 	srli	r8,r5,20
100057cc:	01c00434 	movhi	r7,16
100057d0:	39ffffc4 	addi	r7,r7,-1
100057d4:	29ce703a 	and	r7,r5,r7
100057d8:	4201ffcc 	andi	r8,r8,2047
100057dc:	380e90fa 	slli	r7,r7,3
100057e0:	200cd77a 	srli	r6,r4,29
100057e4:	42400044 	addi	r9,r8,1
100057e8:	4a41ffcc 	andi	r9,r9,2047
100057ec:	00c00044 	movi	r3,1
100057f0:	280ad7fa 	srli	r5,r5,31
100057f4:	31ceb03a 	or	r7,r6,r7
100057f8:	200490fa 	slli	r2,r4,3
100057fc:	1a40230e 	bge	r3,r9,1000588c <__truncdfsf2+0xc4>
10005800:	40ff2004 	addi	r3,r8,-896
10005804:	01803f84 	movi	r6,254
10005808:	30c01516 	blt	r6,r3,10005860 <__truncdfsf2+0x98>
1000580c:	00c0380e 	bge	zero,r3,100058f0 <__truncdfsf2+0x128>
10005810:	200c91ba 	slli	r6,r4,6
10005814:	380e90fa 	slli	r7,r7,3
10005818:	1004d77a 	srli	r2,r2,29
1000581c:	300cc03a 	cmpne	r6,r6,zero
10005820:	31ccb03a 	or	r6,r6,r7
10005824:	308cb03a 	or	r6,r6,r2
10005828:	308001cc 	andi	r2,r6,7
1000582c:	10000426 	beq	r2,zero,10005840 <__truncdfsf2+0x78>
10005830:	308003cc 	andi	r2,r6,15
10005834:	01000104 	movi	r4,4
10005838:	11000126 	beq	r2,r4,10005840 <__truncdfsf2+0x78>
1000583c:	31800104 	addi	r6,r6,4
10005840:	3081002c 	andhi	r2,r6,1024
10005844:	10001626 	beq	r2,zero,100058a0 <__truncdfsf2+0xd8>
10005848:	18c00044 	addi	r3,r3,1
1000584c:	00803fc4 	movi	r2,255
10005850:	18800326 	beq	r3,r2,10005860 <__truncdfsf2+0x98>
10005854:	300c91ba 	slli	r6,r6,6
10005858:	300cd27a 	srli	r6,r6,9
1000585c:	00000206 	br	10005868 <__truncdfsf2+0xa0>
10005860:	00ffffc4 	movi	r3,-1
10005864:	000d883a 	mov	r6,zero
10005868:	18c03fcc 	andi	r3,r3,255
1000586c:	180895fa 	slli	r4,r3,23
10005870:	00c02034 	movhi	r3,128
10005874:	280a97fa 	slli	r5,r5,31
10005878:	18ffffc4 	addi	r3,r3,-1
1000587c:	30c6703a 	and	r3,r6,r3
10005880:	1906b03a 	or	r3,r3,r4
10005884:	1944b03a 	or	r2,r3,r5
10005888:	f800283a 	ret
1000588c:	40000b1e 	bne	r8,zero,100058bc <__truncdfsf2+0xf4>
10005890:	388cb03a 	or	r6,r7,r2
10005894:	0007883a 	mov	r3,zero
10005898:	30000426 	beq	r6,zero,100058ac <__truncdfsf2+0xe4>
1000589c:	01800144 	movi	r6,5
100058a0:	00803fc4 	movi	r2,255
100058a4:	300cd0fa 	srli	r6,r6,3
100058a8:	18800a26 	beq	r3,r2,100058d4 <__truncdfsf2+0x10c>
100058ac:	00802034 	movhi	r2,128
100058b0:	10bfffc4 	addi	r2,r2,-1
100058b4:	308c703a 	and	r6,r6,r2
100058b8:	003feb06 	br	10005868 <__alt_data_end+0xf8005868>
100058bc:	3888b03a 	or	r4,r7,r2
100058c0:	203fe726 	beq	r4,zero,10005860 <__alt_data_end+0xf8005860>
100058c4:	380c90fa 	slli	r6,r7,3
100058c8:	00c03fc4 	movi	r3,255
100058cc:	31808034 	orhi	r6,r6,512
100058d0:	003fd506 	br	10005828 <__alt_data_end+0xf8005828>
100058d4:	303fe226 	beq	r6,zero,10005860 <__alt_data_end+0xf8005860>
100058d8:	00802034 	movhi	r2,128
100058dc:	31801034 	orhi	r6,r6,64
100058e0:	10bfffc4 	addi	r2,r2,-1
100058e4:	00ffffc4 	movi	r3,-1
100058e8:	308c703a 	and	r6,r6,r2
100058ec:	003fde06 	br	10005868 <__alt_data_end+0xf8005868>
100058f0:	013ffa44 	movi	r4,-23
100058f4:	19000e16 	blt	r3,r4,10005930 <__truncdfsf2+0x168>
100058f8:	01000784 	movi	r4,30
100058fc:	20c9c83a 	sub	r4,r4,r3
10005900:	018007c4 	movi	r6,31
10005904:	39c02034 	orhi	r7,r7,128
10005908:	31000b16 	blt	r6,r4,10005938 <__truncdfsf2+0x170>
1000590c:	423f2084 	addi	r8,r8,-894
10005910:	120c983a 	sll	r6,r2,r8
10005914:	3a0e983a 	sll	r7,r7,r8
10005918:	1104d83a 	srl	r2,r2,r4
1000591c:	300cc03a 	cmpne	r6,r6,zero
10005920:	31ceb03a 	or	r7,r6,r7
10005924:	388cb03a 	or	r6,r7,r2
10005928:	0007883a 	mov	r3,zero
1000592c:	003fbe06 	br	10005828 <__alt_data_end+0xf8005828>
10005930:	0007883a 	mov	r3,zero
10005934:	003fd906 	br	1000589c <__alt_data_end+0xf800589c>
10005938:	01bfff84 	movi	r6,-2
1000593c:	30cdc83a 	sub	r6,r6,r3
10005940:	00c00804 	movi	r3,32
10005944:	398cd83a 	srl	r6,r7,r6
10005948:	20c00726 	beq	r4,r3,10005968 <__truncdfsf2+0x1a0>
1000594c:	423f2884 	addi	r8,r8,-862
10005950:	3a0e983a 	sll	r7,r7,r8
10005954:	3884b03a 	or	r2,r7,r2
10005958:	1004c03a 	cmpne	r2,r2,zero
1000595c:	118cb03a 	or	r6,r2,r6
10005960:	0007883a 	mov	r3,zero
10005964:	003fb006 	br	10005828 <__alt_data_end+0xf8005828>
10005968:	000f883a 	mov	r7,zero
1000596c:	003ff906 	br	10005954 <__alt_data_end+0xf8005954>

10005970 <__clzsi2>:
10005970:	00bfffd4 	movui	r2,65535
10005974:	11000536 	bltu	r2,r4,1000598c <__clzsi2+0x1c>
10005978:	00803fc4 	movi	r2,255
1000597c:	11000f36 	bltu	r2,r4,100059bc <__clzsi2+0x4c>
10005980:	00800804 	movi	r2,32
10005984:	0007883a 	mov	r3,zero
10005988:	00000506 	br	100059a0 <__clzsi2+0x30>
1000598c:	00804034 	movhi	r2,256
10005990:	10bfffc4 	addi	r2,r2,-1
10005994:	11000c2e 	bgeu	r2,r4,100059c8 <__clzsi2+0x58>
10005998:	00800204 	movi	r2,8
1000599c:	00c00604 	movi	r3,24
100059a0:	20c8d83a 	srl	r4,r4,r3
100059a4:	00c40374 	movhi	r3,4109
100059a8:	18fcc704 	addi	r3,r3,-3300
100059ac:	1909883a 	add	r4,r3,r4
100059b0:	20c00003 	ldbu	r3,0(r4)
100059b4:	10c5c83a 	sub	r2,r2,r3
100059b8:	f800283a 	ret
100059bc:	00800604 	movi	r2,24
100059c0:	00c00204 	movi	r3,8
100059c4:	003ff606 	br	100059a0 <__alt_data_end+0xf80059a0>
100059c8:	00800404 	movi	r2,16
100059cc:	1007883a 	mov	r3,r2
100059d0:	003ff306 	br	100059a0 <__alt_data_end+0xf80059a0>

100059d4 <__mulsi3>:
100059d4:	0005883a 	mov	r2,zero
100059d8:	20000726 	beq	r4,zero,100059f8 <__mulsi3+0x24>
100059dc:	20c0004c 	andi	r3,r4,1
100059e0:	2008d07a 	srli	r4,r4,1
100059e4:	18000126 	beq	r3,zero,100059ec <__mulsi3+0x18>
100059e8:	1145883a 	add	r2,r2,r5
100059ec:	294b883a 	add	r5,r5,r5
100059f0:	203ffa1e 	bne	r4,zero,100059dc <__alt_data_end+0xf80059dc>
100059f4:	f800283a 	ret
100059f8:	f800283a 	ret

100059fc <atoi>:

#ifndef _REENT_ONLY
int
_DEFUN (atoi, (s),
	_CONST char *s)
{
100059fc:	defffd04 	addi	sp,sp,-12
10005a00:	dfc00215 	stw	ra,8(sp)
10005a04:	df000115 	stw	fp,4(sp)
10005a08:	df000104 	addi	fp,sp,4
10005a0c:	e13fff15 	stw	r4,-4(fp)
  return (int) strtol (s, NULL, 10);
10005a10:	01800284 	movi	r6,10
10005a14:	000b883a 	mov	r5,zero
10005a18:	e13fff17 	ldw	r4,-4(fp)
10005a1c:	0008c340 	call	10008c34 <strtol>
}
10005a20:	e037883a 	mov	sp,fp
10005a24:	dfc00117 	ldw	ra,4(sp)
10005a28:	df000017 	ldw	fp,0(sp)
10005a2c:	dec00204 	addi	sp,sp,8
10005a30:	f800283a 	ret

10005a34 <_atoi_r>:

int
_DEFUN (_atoi_r, (s),
	struct _reent *ptr _AND
	_CONST char *s)
{
10005a34:	defffc04 	addi	sp,sp,-16
10005a38:	dfc00315 	stw	ra,12(sp)
10005a3c:	df000215 	stw	fp,8(sp)
10005a40:	df000204 	addi	fp,sp,8
10005a44:	e13ffe15 	stw	r4,-8(fp)
10005a48:	e17fff15 	stw	r5,-4(fp)
  return (int) _strtol_r (ptr, s, NULL, 10);
10005a4c:	01c00284 	movi	r7,10
10005a50:	000d883a 	mov	r6,zero
10005a54:	e17fff17 	ldw	r5,-4(fp)
10005a58:	e13ffe17 	ldw	r4,-8(fp)
10005a5c:	00089480 	call	10008948 <_strtol_r>
}
10005a60:	e037883a 	mov	sp,fp
10005a64:	dfc00117 	ldw	ra,4(sp)
10005a68:	df000017 	ldw	fp,0(sp)
10005a6c:	dec00204 	addi	sp,sp,8
10005a70:	f800283a 	ret

10005a74 <calloc>:

_PTR
_DEFUN (calloc, (n, size),
	size_t n _AND
	size_t size)
{
10005a74:	defffc04 	addi	sp,sp,-16
10005a78:	dfc00315 	stw	ra,12(sp)
10005a7c:	df000215 	stw	fp,8(sp)
10005a80:	df000204 	addi	fp,sp,8
10005a84:	e13ffe15 	stw	r4,-8(fp)
10005a88:	e17fff15 	stw	r5,-4(fp)
  return _calloc_r (_REENT, n, size);
10005a8c:	008403b4 	movhi	r2,4110
10005a90:	10a44204 	addi	r2,r2,-28408
10005a94:	10800017 	ldw	r2,0(r2)
10005a98:	e1bfff17 	ldw	r6,-4(fp)
10005a9c:	e17ffe17 	ldw	r5,-8(fp)
10005aa0:	1009883a 	mov	r4,r2
10005aa4:	0005abc0 	call	10005abc <_calloc_r>
}
10005aa8:	e037883a 	mov	sp,fp
10005aac:	dfc00117 	ldw	ra,4(sp)
10005ab0:	df000017 	ldw	fp,0(sp)
10005ab4:	dec00204 	addi	sp,sp,8
10005ab8:	f800283a 	ret

10005abc <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
10005abc:	defff504 	addi	sp,sp,-44
10005ac0:	dfc00a15 	stw	ra,40(sp)
10005ac4:	df000915 	stw	fp,36(sp)
10005ac8:	df000904 	addi	fp,sp,36
10005acc:	e13ffd15 	stw	r4,-12(fp)
10005ad0:	e17ffe15 	stw	r5,-8(fp)
10005ad4:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
10005ad8:	e17fff17 	ldw	r5,-4(fp)
10005adc:	e13ffe17 	ldw	r4,-8(fp)
10005ae0:	00059d40 	call	100059d4 <__mulsi3>
10005ae4:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
10005ae8:	e17ff817 	ldw	r5,-32(fp)
10005aec:	e13ffd17 	ldw	r4,-12(fp)
10005af0:	00063d40 	call	100063d4 <_malloc_r>
10005af4:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
10005af8:	e0bff917 	ldw	r2,-28(fp)
10005afc:	1000021e 	bne	r2,zero,10005b08 <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
10005b00:	0005883a 	mov	r2,zero
10005b04:	00004106 	br	10005c0c <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
10005b08:	e0bff917 	ldw	r2,-28(fp)
10005b0c:	10bffe04 	addi	r2,r2,-8
10005b10:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
10005b14:	e0bffa17 	ldw	r2,-24(fp)
10005b18:	10c00117 	ldw	r3,4(r2)
10005b1c:	00bfff04 	movi	r2,-4
10005b20:	1884703a 	and	r2,r3,r2
10005b24:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
10005b28:	e0bffb17 	ldw	r2,-20(fp)
10005b2c:	10bfff04 	addi	r2,r2,-4
10005b30:	e0bffc15 	stw	r2,-16(fp)
10005b34:	e0bffc17 	ldw	r2,-16(fp)
10005b38:	10800968 	cmpgeui	r2,r2,37
10005b3c:	10002e1e 	bne	r2,zero,10005bf8 <_calloc_r+0x13c>
10005b40:	e0bff917 	ldw	r2,-28(fp)
10005b44:	e0bff715 	stw	r2,-36(fp)
10005b48:	e0bffc17 	ldw	r2,-16(fp)
10005b4c:	10800530 	cmpltui	r2,r2,20
10005b50:	10001e1e 	bne	r2,zero,10005bcc <_calloc_r+0x110>
10005b54:	e0bff717 	ldw	r2,-36(fp)
10005b58:	10c00104 	addi	r3,r2,4
10005b5c:	e0fff715 	stw	r3,-36(fp)
10005b60:	10000015 	stw	zero,0(r2)
10005b64:	e0bff717 	ldw	r2,-36(fp)
10005b68:	10c00104 	addi	r3,r2,4
10005b6c:	e0fff715 	stw	r3,-36(fp)
10005b70:	10000015 	stw	zero,0(r2)
10005b74:	e0bffc17 	ldw	r2,-16(fp)
10005b78:	10800730 	cmpltui	r2,r2,28
10005b7c:	1000131e 	bne	r2,zero,10005bcc <_calloc_r+0x110>
10005b80:	e0bff717 	ldw	r2,-36(fp)
10005b84:	10c00104 	addi	r3,r2,4
10005b88:	e0fff715 	stw	r3,-36(fp)
10005b8c:	10000015 	stw	zero,0(r2)
10005b90:	e0bff717 	ldw	r2,-36(fp)
10005b94:	10c00104 	addi	r3,r2,4
10005b98:	e0fff715 	stw	r3,-36(fp)
10005b9c:	10000015 	stw	zero,0(r2)
10005ba0:	e0bffc17 	ldw	r2,-16(fp)
10005ba4:	10800930 	cmpltui	r2,r2,36
10005ba8:	1000081e 	bne	r2,zero,10005bcc <_calloc_r+0x110>
10005bac:	e0bff717 	ldw	r2,-36(fp)
10005bb0:	10c00104 	addi	r3,r2,4
10005bb4:	e0fff715 	stw	r3,-36(fp)
10005bb8:	10000015 	stw	zero,0(r2)
10005bbc:	e0bff717 	ldw	r2,-36(fp)
10005bc0:	10c00104 	addi	r3,r2,4
10005bc4:	e0fff715 	stw	r3,-36(fp)
10005bc8:	10000015 	stw	zero,0(r2)
10005bcc:	e0bff717 	ldw	r2,-36(fp)
10005bd0:	10c00104 	addi	r3,r2,4
10005bd4:	e0fff715 	stw	r3,-36(fp)
10005bd8:	10000015 	stw	zero,0(r2)
10005bdc:	e0bff717 	ldw	r2,-36(fp)
10005be0:	10c00104 	addi	r3,r2,4
10005be4:	e0fff715 	stw	r3,-36(fp)
10005be8:	10000015 	stw	zero,0(r2)
10005bec:	e0bff717 	ldw	r2,-36(fp)
10005bf0:	10000015 	stw	zero,0(r2)
10005bf4:	00000406 	br	10005c08 <_calloc_r+0x14c>
10005bf8:	e1bffc17 	ldw	r6,-16(fp)
10005bfc:	000b883a 	mov	r5,zero
10005c00:	e13ff917 	ldw	r4,-28(fp)
10005c04:	0006f500 	call	10006f50 <memset>
    return mem;
10005c08:	e0bff917 	ldw	r2,-28(fp)
  }
}
10005c0c:	e037883a 	mov	sp,fp
10005c10:	dfc00117 	ldw	ra,4(sp)
10005c14:	df000017 	ldw	fp,0(sp)
10005c18:	dec00204 	addi	sp,sp,8
10005c1c:	f800283a 	ret

10005c20 <_drand48_r>:
#include "rand48.h"

double
_DEFUN (_drand48_r, (r),
       struct _reent *r)
{
10005c20:	defffd04 	addi	sp,sp,-12
10005c24:	dfc00215 	stw	ra,8(sp)
10005c28:	df000115 	stw	fp,4(sp)
10005c2c:	df000104 	addi	fp,sp,4
10005c30:	e13fff15 	stw	r4,-4(fp)
  _REENT_CHECK_RAND48(r);
  return _erand48_r(r, __rand48_seed);
10005c34:	e0bfff17 	ldw	r2,-4(fp)
10005c38:	10802b04 	addi	r2,r2,172
10005c3c:	100b883a 	mov	r5,r2
10005c40:	e13fff17 	ldw	r4,-4(fp)
10005c44:	0005cc40 	call	10005cc4 <_erand48_r>
10005c48:	100b883a 	mov	r5,r2
10005c4c:	180d883a 	mov	r6,r3
10005c50:	2807883a 	mov	r3,r5
10005c54:	3009883a 	mov	r4,r6
}
10005c58:	1805883a 	mov	r2,r3
10005c5c:	2007883a 	mov	r3,r4
10005c60:	e037883a 	mov	sp,fp
10005c64:	dfc00117 	ldw	ra,4(sp)
10005c68:	df000017 	ldw	fp,0(sp)
10005c6c:	dec00204 	addi	sp,sp,8
10005c70:	f800283a 	ret

10005c74 <drand48>:

#ifndef _REENT_ONLY
double
_DEFUN_VOID (drand48)
{
10005c74:	defffe04 	addi	sp,sp,-8
10005c78:	dfc00115 	stw	ra,4(sp)
10005c7c:	df000015 	stw	fp,0(sp)
10005c80:	d839883a 	mov	fp,sp
  return _drand48_r (_REENT);
10005c84:	008403b4 	movhi	r2,4110
10005c88:	10a44204 	addi	r2,r2,-28408
10005c8c:	10800017 	ldw	r2,0(r2)
10005c90:	1009883a 	mov	r4,r2
10005c94:	0005c200 	call	10005c20 <_drand48_r>
10005c98:	100b883a 	mov	r5,r2
10005c9c:	180d883a 	mov	r6,r3
10005ca0:	2807883a 	mov	r3,r5
10005ca4:	3009883a 	mov	r4,r6
}
10005ca8:	1805883a 	mov	r2,r3
10005cac:	2007883a 	mov	r3,r4
10005cb0:	e037883a 	mov	sp,fp
10005cb4:	dfc00117 	ldw	ra,4(sp)
10005cb8:	df000017 	ldw	fp,0(sp)
10005cbc:	dec00204 	addi	sp,sp,8
10005cc0:	f800283a 	ret

10005cc4 <_erand48_r>:

double
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
10005cc4:	defffa04 	addi	sp,sp,-24
10005cc8:	dfc00515 	stw	ra,20(sp)
10005ccc:	df000415 	stw	fp,16(sp)
10005cd0:	dc400315 	stw	r17,12(sp)
10005cd4:	dc000215 	stw	r16,8(sp)
10005cd8:	df000404 	addi	fp,sp,16
10005cdc:	e13ffc15 	stw	r4,-16(fp)
10005ce0:	e17ffd15 	stw	r5,-12(fp)
  __dorand48(r, xseed);
10005ce4:	e17ffd17 	ldw	r5,-12(fp)
10005ce8:	e13ffc17 	ldw	r4,-16(fp)
10005cec:	00073dc0 	call	100073dc <__dorand48>
  return ldexp((double) xseed[0], -48) +
10005cf0:	e0bffd17 	ldw	r2,-12(fp)
10005cf4:	1080000b 	ldhu	r2,0(r2)
10005cf8:	10bfffcc 	andi	r2,r2,65535
10005cfc:	1009883a 	mov	r4,r2
10005d00:	00154a40 	call	100154a4 <__floatunsidf>
10005d04:	100f883a 	mov	r7,r2
10005d08:	1811883a 	mov	r8,r3
10005d0c:	01bff404 	movi	r6,-48
10005d10:	3809883a 	mov	r4,r7
10005d14:	400b883a 	mov	r5,r8
10005d18:	000829c0 	call	1000829c <ldexp>
10005d1c:	1021883a 	mov	r16,r2
10005d20:	1823883a 	mov	r17,r3
    ldexp((double) xseed[1], -32) +
10005d24:	e0bffd17 	ldw	r2,-12(fp)
10005d28:	10800084 	addi	r2,r2,2
10005d2c:	1080000b 	ldhu	r2,0(r2)
10005d30:	10bfffcc 	andi	r2,r2,65535
10005d34:	1009883a 	mov	r4,r2
10005d38:	00154a40 	call	100154a4 <__floatunsidf>
10005d3c:	100f883a 	mov	r7,r2
10005d40:	1811883a 	mov	r8,r3
10005d44:	01bff804 	movi	r6,-32
10005d48:	3809883a 	mov	r4,r7
10005d4c:	400b883a 	mov	r5,r8
10005d50:	000829c0 	call	1000829c <ldexp>
10005d54:	1009883a 	mov	r4,r2
10005d58:	180b883a 	mov	r5,r3
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
  __dorand48(r, xseed);
  return ldexp((double) xseed[0], -48) +
10005d5c:	200d883a 	mov	r6,r4
10005d60:	280f883a 	mov	r7,r5
10005d64:	8009883a 	mov	r4,r16
10005d68:	880b883a 	mov	r5,r17
10005d6c:	0003bb40 	call	10003bb4 <__adddf3>
10005d70:	1009883a 	mov	r4,r2
10005d74:	180b883a 	mov	r5,r3
10005d78:	2021883a 	mov	r16,r4
10005d7c:	2823883a 	mov	r17,r5
    ldexp((double) xseed[1], -32) +
    ldexp((double) xseed[2], -16);
10005d80:	e0bffd17 	ldw	r2,-12(fp)
10005d84:	10800104 	addi	r2,r2,4
10005d88:	1080000b 	ldhu	r2,0(r2)
10005d8c:	10bfffcc 	andi	r2,r2,65535
10005d90:	1009883a 	mov	r4,r2
10005d94:	00154a40 	call	100154a4 <__floatunsidf>
10005d98:	100f883a 	mov	r7,r2
10005d9c:	1811883a 	mov	r8,r3
10005da0:	01bffc04 	movi	r6,-16
10005da4:	3809883a 	mov	r4,r7
10005da8:	400b883a 	mov	r5,r8
10005dac:	000829c0 	call	1000829c <ldexp>
10005db0:	1009883a 	mov	r4,r2
10005db4:	180b883a 	mov	r5,r3
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
  __dorand48(r, xseed);
  return ldexp((double) xseed[0], -48) +
10005db8:	200d883a 	mov	r6,r4
10005dbc:	280f883a 	mov	r7,r5
10005dc0:	8009883a 	mov	r4,r16
10005dc4:	880b883a 	mov	r5,r17
10005dc8:	0003bb40 	call	10003bb4 <__adddf3>
10005dcc:	100f883a 	mov	r7,r2
10005dd0:	1811883a 	mov	r8,r3
10005dd4:	380b883a 	mov	r5,r7
10005dd8:	400d883a 	mov	r6,r8
10005ddc:	2807883a 	mov	r3,r5
10005de0:	3009883a 	mov	r4,r6
    ldexp((double) xseed[1], -32) +
    ldexp((double) xseed[2], -16);
}
10005de4:	1805883a 	mov	r2,r3
10005de8:	2007883a 	mov	r3,r4
10005dec:	e6fffe04 	addi	sp,fp,-8
10005df0:	dfc00317 	ldw	ra,12(sp)
10005df4:	df000217 	ldw	fp,8(sp)
10005df8:	dc400117 	ldw	r17,4(sp)
10005dfc:	dc000017 	ldw	r16,0(sp)
10005e00:	dec00404 	addi	sp,sp,16
10005e04:	f800283a 	ret

10005e08 <erand48>:

#ifndef _REENT_ONLY
double
_DEFUN (erand48, (xseed),
       unsigned short xseed[3])
{
10005e08:	defffd04 	addi	sp,sp,-12
10005e0c:	dfc00215 	stw	ra,8(sp)
10005e10:	df000115 	stw	fp,4(sp)
10005e14:	df000104 	addi	fp,sp,4
10005e18:	e13fff15 	stw	r4,-4(fp)
  return _erand48_r (_REENT, xseed);
10005e1c:	008403b4 	movhi	r2,4110
10005e20:	10a44204 	addi	r2,r2,-28408
10005e24:	10800017 	ldw	r2,0(r2)
10005e28:	e17fff17 	ldw	r5,-4(fp)
10005e2c:	1009883a 	mov	r4,r2
10005e30:	0005cc40 	call	10005cc4 <_erand48_r>
10005e34:	100b883a 	mov	r5,r2
10005e38:	180d883a 	mov	r6,r3
10005e3c:	2807883a 	mov	r3,r5
10005e40:	3009883a 	mov	r4,r6
}
10005e44:	1805883a 	mov	r2,r3
10005e48:	2007883a 	mov	r3,r4
10005e4c:	e037883a 	mov	sp,fp
10005e50:	dfc00117 	ldw	ra,4(sp)
10005e54:	df000017 	ldw	fp,0(sp)
10005e58:	dec00204 	addi	sp,sp,8
10005e5c:	f800283a 	ret

10005e60 <_getc_r>:

int
_DEFUN(_getc_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
10005e60:	defffa04 	addi	sp,sp,-24
10005e64:	dfc00515 	stw	ra,20(sp)
10005e68:	df000415 	stw	fp,16(sp)
10005e6c:	dc000315 	stw	r16,12(sp)
10005e70:	df000404 	addi	fp,sp,16
10005e74:	e13ffe15 	stw	r4,-8(fp)
10005e78:	2821883a 	mov	r16,r5
  int result;
  CHECK_INIT (ptr, fp);
10005e7c:	e0bffe17 	ldw	r2,-8(fp)
10005e80:	e0bffc15 	stw	r2,-16(fp)
10005e84:	e0bffc17 	ldw	r2,-16(fp)
10005e88:	10000526 	beq	r2,zero,10005ea0 <_getc_r+0x40>
10005e8c:	e0bffc17 	ldw	r2,-16(fp)
10005e90:	10800e17 	ldw	r2,56(r2)
10005e94:	1000021e 	bne	r2,zero,10005ea0 <_getc_r+0x40>
10005e98:	e13ffc17 	ldw	r4,-16(fp)
10005e9c:	000db400 	call	1000db40 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sgetc_r (ptr, fp);
10005ea0:	80800117 	ldw	r2,4(r16)
10005ea4:	10bfffc4 	addi	r2,r2,-1
10005ea8:	80800115 	stw	r2,4(r16)
10005eac:	80800117 	ldw	r2,4(r16)
10005eb0:	1000040e 	bge	r2,zero,10005ec4 <_getc_r+0x64>
10005eb4:	800b883a 	mov	r5,r16
10005eb8:	e13ffe17 	ldw	r4,-8(fp)
10005ebc:	00081cc0 	call	100081cc <__srget_r>
10005ec0:	00000506 	br	10005ed8 <_getc_r+0x78>
10005ec4:	80800017 	ldw	r2,0(r16)
10005ec8:	10c00044 	addi	r3,r2,1
10005ecc:	80c00015 	stw	r3,0(r16)
10005ed0:	10800003 	ldbu	r2,0(r2)
10005ed4:	10803fcc 	andi	r2,r2,255
10005ed8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
10005edc:	e0bffd17 	ldw	r2,-12(fp)
}
10005ee0:	e6ffff04 	addi	sp,fp,-4
10005ee4:	dfc00217 	ldw	ra,8(sp)
10005ee8:	df000117 	ldw	fp,4(sp)
10005eec:	dc000017 	ldw	r16,0(sp)
10005ef0:	dec00304 	addi	sp,sp,12
10005ef4:	f800283a 	ret

10005ef8 <getc>:
#ifndef _REENT_ONLY

int
_DEFUN(getc, (fp),
       register FILE *fp)
{
10005ef8:	defffa04 	addi	sp,sp,-24
10005efc:	dfc00515 	stw	ra,20(sp)
10005f00:	df000415 	stw	fp,16(sp)
10005f04:	dc000315 	stw	r16,12(sp)
10005f08:	df000404 	addi	fp,sp,16
10005f0c:	2021883a 	mov	r16,r4
  int result;
  struct _reent *reent = _REENT;
10005f10:	008403b4 	movhi	r2,4110
10005f14:	10a44204 	addi	r2,r2,-28408
10005f18:	10800017 	ldw	r2,0(r2)
10005f1c:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT (reent, fp);
10005f20:	e0bffc17 	ldw	r2,-16(fp)
10005f24:	e0bffd15 	stw	r2,-12(fp)
10005f28:	e0bffd17 	ldw	r2,-12(fp)
10005f2c:	10000526 	beq	r2,zero,10005f44 <getc+0x4c>
10005f30:	e0bffd17 	ldw	r2,-12(fp)
10005f34:	10800e17 	ldw	r2,56(r2)
10005f38:	1000021e 	bne	r2,zero,10005f44 <getc+0x4c>
10005f3c:	e13ffd17 	ldw	r4,-12(fp)
10005f40:	000db400 	call	1000db40 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sgetc_r (reent, fp);
10005f44:	80800117 	ldw	r2,4(r16)
10005f48:	10bfffc4 	addi	r2,r2,-1
10005f4c:	80800115 	stw	r2,4(r16)
10005f50:	80800117 	ldw	r2,4(r16)
10005f54:	1000040e 	bge	r2,zero,10005f68 <getc+0x70>
10005f58:	800b883a 	mov	r5,r16
10005f5c:	e13ffc17 	ldw	r4,-16(fp)
10005f60:	00081cc0 	call	100081cc <__srget_r>
10005f64:	00000506 	br	10005f7c <getc+0x84>
10005f68:	80800017 	ldw	r2,0(r16)
10005f6c:	10c00044 	addi	r3,r2,1
10005f70:	80c00015 	stw	r3,0(r16)
10005f74:	10800003 	ldbu	r2,0(r2)
10005f78:	10803fcc 	andi	r2,r2,255
10005f7c:	e0bffe15 	stw	r2,-8(fp)
  _newlib_flockfile_end (fp);
  return result;
10005f80:	e0bffe17 	ldw	r2,-8(fp)
}
10005f84:	e6ffff04 	addi	sp,fp,-4
10005f88:	dfc00217 	ldw	ra,8(sp)
10005f8c:	df000117 	ldw	fp,4(sp)
10005f90:	dc000017 	ldw	r16,0(sp)
10005f94:	dec00304 	addi	sp,sp,12
10005f98:	f800283a 	ret

10005f9c <malloc>:
#ifndef _REENT_ONLY

_PTR
_DEFUN (malloc, (nbytes),
	size_t nbytes)		/* get a block */
{
10005f9c:	defffd04 	addi	sp,sp,-12
10005fa0:	dfc00215 	stw	ra,8(sp)
10005fa4:	df000115 	stw	fp,4(sp)
10005fa8:	df000104 	addi	fp,sp,4
10005fac:	e13fff15 	stw	r4,-4(fp)
  return _malloc_r (_REENT, nbytes);
10005fb0:	008403b4 	movhi	r2,4110
10005fb4:	10a44204 	addi	r2,r2,-28408
10005fb8:	10800017 	ldw	r2,0(r2)
10005fbc:	e17fff17 	ldw	r5,-4(fp)
10005fc0:	1009883a 	mov	r4,r2
10005fc4:	00063d40 	call	100063d4 <_malloc_r>
}
10005fc8:	e037883a 	mov	sp,fp
10005fcc:	dfc00117 	ldw	ra,4(sp)
10005fd0:	df000017 	ldw	fp,0(sp)
10005fd4:	dec00204 	addi	sp,sp,8
10005fd8:	f800283a 	ret

10005fdc <free>:

void
_DEFUN (free, (aptr),
	_PTR aptr)
{
10005fdc:	defffd04 	addi	sp,sp,-12
10005fe0:	dfc00215 	stw	ra,8(sp)
10005fe4:	df000115 	stw	fp,4(sp)
10005fe8:	df000104 	addi	fp,sp,4
10005fec:	e13fff15 	stw	r4,-4(fp)
  _free_r (_REENT, aptr);
10005ff0:	008403b4 	movhi	r2,4110
10005ff4:	10a44204 	addi	r2,r2,-28408
10005ff8:	10800017 	ldw	r2,0(r2)
10005ffc:	e17fff17 	ldw	r5,-4(fp)
10006000:	1009883a 	mov	r4,r2
10006004:	000dd700 	call	1000dd70 <_free_r>
}
10006008:	0001883a 	nop
1000600c:	e037883a 	mov	sp,fp
10006010:	dfc00117 	ldw	ra,4(sp)
10006014:	df000017 	ldw	fp,0(sp)
10006018:	dec00204 	addi	sp,sp,8
1000601c:	f800283a 	ret

10006020 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
10006020:	defff104 	addi	sp,sp,-60
10006024:	dfc00e15 	stw	ra,56(sp)
10006028:	df000d15 	stw	fp,52(sp)
1000602c:	df000d04 	addi	fp,sp,52
10006030:	e13ffe15 	stw	r4,-8(fp)
10006034:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
10006038:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
1000603c:	00840374 	movhi	r2,4109
10006040:	109e9004 	addi	r2,r2,31296
10006044:	10800217 	ldw	r2,8(r2)
10006048:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
1000604c:	e0bff817 	ldw	r2,-32(fp)
10006050:	10c00117 	ldw	r3,4(r2)
10006054:	00bfff04 	movi	r2,-4
10006058:	1884703a 	and	r2,r3,r2
1000605c:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
10006060:	e0fff817 	ldw	r3,-32(fp)
10006064:	e0bff917 	ldw	r2,-28(fp)
10006068:	1885883a 	add	r2,r3,r2
1000606c:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
10006070:	d0c65a17 	ldw	r3,6504(gp)
10006074:	e0bfff17 	ldw	r2,-4(fp)
10006078:	1885883a 	add	r2,r3,r2
1000607c:	10800404 	addi	r2,r2,16
10006080:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
10006084:	00840004 	movi	r2,4096
10006088:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
1000608c:	d0a00917 	ldw	r2,-32732(gp)
10006090:	10bfffe0 	cmpeqi	r2,r2,-1
10006094:	1000081e 	bne	r2,zero,100060b8 <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
10006098:	e0fffb17 	ldw	r3,-20(fp)
1000609c:	e0bff617 	ldw	r2,-40(fp)
100060a0:	1885883a 	add	r2,r3,r2
100060a4:	10ffffc4 	addi	r3,r2,-1
100060a8:	e0bffb17 	ldw	r2,-20(fp)
100060ac:	0085c83a 	sub	r2,zero,r2
100060b0:	1884703a 	and	r2,r3,r2
100060b4:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
100060b8:	e0bff617 	ldw	r2,-40(fp)
100060bc:	100b883a 	mov	r5,r2
100060c0:	e13ffe17 	ldw	r4,-8(fp)
100060c4:	00087100 	call	10008710 <_sbrk_r>
100060c8:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
100060cc:	e0bff317 	ldw	r2,-52(fp)
100060d0:	10bfffe0 	cmpeqi	r2,r2,-1
100060d4:	1000b91e 	bne	r2,zero,100063bc <malloc_extend_top+0x39c>
100060d8:	e0fff317 	ldw	r3,-52(fp)
100060dc:	e0bffa17 	ldw	r2,-24(fp)
100060e0:	1880042e 	bgeu	r3,r2,100060f4 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
100060e4:	00840374 	movhi	r2,4109
100060e8:	109e9004 	addi	r2,r2,31296
100060ec:	e0fff817 	ldw	r3,-32(fp)
100060f0:	1880b21e 	bne	r3,r2,100063bc <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
100060f4:	008403b4 	movhi	r2,4110
100060f8:	108aac04 	addi	r2,r2,10928
100060fc:	10800017 	ldw	r2,0(r2)
10006100:	1007883a 	mov	r3,r2
10006104:	e0bff617 	ldw	r2,-40(fp)
10006108:	1885883a 	add	r2,r3,r2
1000610c:	1007883a 	mov	r3,r2
10006110:	008403b4 	movhi	r2,4110
10006114:	108aac04 	addi	r2,r2,10928
10006118:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
1000611c:	e0fff317 	ldw	r3,-52(fp)
10006120:	e0bffa17 	ldw	r2,-24(fp)
10006124:	1880101e 	bne	r3,r2,10006168 <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
10006128:	e0bffb17 	ldw	r2,-20(fp)
1000612c:	10ffffc4 	addi	r3,r2,-1
10006130:	e0bffa17 	ldw	r2,-24(fp)
10006134:	1884703a 	and	r2,r3,r2
10006138:	10000b1e 	bne	r2,zero,10006168 <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
1000613c:	e0fff617 	ldw	r3,-40(fp)
10006140:	e0bff917 	ldw	r2,-28(fp)
10006144:	1885883a 	add	r2,r3,r2
10006148:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
1000614c:	00840374 	movhi	r2,4109
10006150:	109e9004 	addi	r2,r2,31296
10006154:	10800217 	ldw	r2,8(r2)
10006158:	e0fffc17 	ldw	r3,-16(fp)
1000615c:	18c00054 	ori	r3,r3,1
10006160:	10c00115 	stw	r3,4(r2)
10006164:	00008006 	br	10006368 <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
10006168:	d0a00917 	ldw	r2,-32732(gp)
1000616c:	10bfffd8 	cmpnei	r2,r2,-1
10006170:	1000031e 	bne	r2,zero,10006180 <malloc_extend_top+0x160>
      sbrk_base = brk;
10006174:	e0bff317 	ldw	r2,-52(fp)
10006178:	d0a00915 	stw	r2,-32732(gp)
1000617c:	00000a06 	br	100061a8 <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
10006180:	008403b4 	movhi	r2,4110
10006184:	108aac04 	addi	r2,r2,10928
10006188:	10c00017 	ldw	r3,0(r2)
1000618c:	e13ff317 	ldw	r4,-52(fp)
10006190:	e0bffa17 	ldw	r2,-24(fp)
10006194:	2085c83a 	sub	r2,r4,r2
10006198:	1887883a 	add	r3,r3,r2
1000619c:	008403b4 	movhi	r2,4110
100061a0:	108aac04 	addi	r2,r2,10928
100061a4:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
100061a8:	e0bff317 	ldw	r2,-52(fp)
100061ac:	10800204 	addi	r2,r2,8
100061b0:	108001cc 	andi	r2,r2,7
100061b4:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
100061b8:	e0bffd17 	ldw	r2,-12(fp)
100061bc:	10000926 	beq	r2,zero,100061e4 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
100061c0:	00c00204 	movi	r3,8
100061c4:	e0bffd17 	ldw	r2,-12(fp)
100061c8:	1885c83a 	sub	r2,r3,r2
100061cc:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
100061d0:	e0fff317 	ldw	r3,-52(fp)
100061d4:	e0bff417 	ldw	r2,-48(fp)
100061d8:	1885883a 	add	r2,r3,r2
100061dc:	e0bff315 	stw	r2,-52(fp)
100061e0:	00000106 	br	100061e8 <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
100061e4:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
100061e8:	e0fff317 	ldw	r3,-52(fp)
100061ec:	e0bff617 	ldw	r2,-40(fp)
100061f0:	1885883a 	add	r2,r3,r2
100061f4:	1007883a 	mov	r3,r2
100061f8:	e0bffb17 	ldw	r2,-20(fp)
100061fc:	10bfffc4 	addi	r2,r2,-1
10006200:	1884703a 	and	r2,r3,r2
10006204:	e0fffb17 	ldw	r3,-20(fp)
10006208:	1885c83a 	sub	r2,r3,r2
1000620c:	e0fff417 	ldw	r3,-48(fp)
10006210:	1885883a 	add	r2,r3,r2
10006214:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
10006218:	e0bff417 	ldw	r2,-48(fp)
1000621c:	100b883a 	mov	r5,r2
10006220:	e13ffe17 	ldw	r4,-8(fp)
10006224:	00087100 	call	10008710 <_sbrk_r>
10006228:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
1000622c:	e0bff517 	ldw	r2,-44(fp)
10006230:	10bfffd8 	cmpnei	r2,r2,-1
10006234:	1000051e 	bne	r2,zero,1000624c <malloc_extend_top+0x22c>
      {
	correction = 0;
10006238:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
1000623c:	00800044 	movi	r2,1
10006240:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
10006244:	e0bff317 	ldw	r2,-52(fp)
10006248:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
1000624c:	008403b4 	movhi	r2,4110
10006250:	108aac04 	addi	r2,r2,10928
10006254:	10800017 	ldw	r2,0(r2)
10006258:	1007883a 	mov	r3,r2
1000625c:	e0bff417 	ldw	r2,-48(fp)
10006260:	1885883a 	add	r2,r3,r2
10006264:	1007883a 	mov	r3,r2
10006268:	008403b4 	movhi	r2,4110
1000626c:	108aac04 	addi	r2,r2,10928
10006270:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
10006274:	00840374 	movhi	r2,4109
10006278:	109e9004 	addi	r2,r2,31296
1000627c:	e0fff317 	ldw	r3,-52(fp)
10006280:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
10006284:	e0fff517 	ldw	r3,-44(fp)
10006288:	e0bff317 	ldw	r2,-52(fp)
1000628c:	1885c83a 	sub	r2,r3,r2
10006290:	1007883a 	mov	r3,r2
10006294:	e0bff417 	ldw	r2,-48(fp)
10006298:	1885883a 	add	r2,r3,r2
1000629c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
100062a0:	00840374 	movhi	r2,4109
100062a4:	109e9004 	addi	r2,r2,31296
100062a8:	10800217 	ldw	r2,8(r2)
100062ac:	e0fffc17 	ldw	r3,-16(fp)
100062b0:	18c00054 	ori	r3,r3,1
100062b4:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
100062b8:	00840374 	movhi	r2,4109
100062bc:	109e9004 	addi	r2,r2,31296
100062c0:	e0fff817 	ldw	r3,-32(fp)
100062c4:	18802826 	beq	r3,r2,10006368 <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
100062c8:	e0bff917 	ldw	r2,-28(fp)
100062cc:	10800428 	cmpgeui	r2,r2,16
100062d0:	1000061e 	bne	r2,zero,100062ec <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
100062d4:	00840374 	movhi	r2,4109
100062d8:	109e9004 	addi	r2,r2,31296
100062dc:	10800217 	ldw	r2,8(r2)
100062e0:	00c00044 	movi	r3,1
100062e4:	10c00115 	stw	r3,4(r2)
        return;
100062e8:	00003506 	br	100063c0 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
100062ec:	e0bff917 	ldw	r2,-28(fp)
100062f0:	10fffd04 	addi	r3,r2,-12
100062f4:	00bffe04 	movi	r2,-8
100062f8:	1884703a 	and	r2,r3,r2
100062fc:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
10006300:	e0bff817 	ldw	r2,-32(fp)
10006304:	10800117 	ldw	r2,4(r2)
10006308:	10c0004c 	andi	r3,r2,1
1000630c:	e0bff917 	ldw	r2,-28(fp)
10006310:	1886b03a 	or	r3,r3,r2
10006314:	e0bff817 	ldw	r2,-32(fp)
10006318:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
1000631c:	e0fff817 	ldw	r3,-32(fp)
10006320:	e0bff917 	ldw	r2,-28(fp)
10006324:	1885883a 	add	r2,r3,r2
10006328:	00c00144 	movi	r3,5
1000632c:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
10006330:	e0bff917 	ldw	r2,-28(fp)
10006334:	10800104 	addi	r2,r2,4
10006338:	e0fff817 	ldw	r3,-32(fp)
1000633c:	1885883a 	add	r2,r3,r2
10006340:	00c00144 	movi	r3,5
10006344:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
10006348:	e0bff917 	ldw	r2,-28(fp)
1000634c:	10800430 	cmpltui	r2,r2,16
10006350:	1000051e 	bne	r2,zero,10006368 <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
10006354:	e0bff817 	ldw	r2,-32(fp)
10006358:	10800204 	addi	r2,r2,8
1000635c:	100b883a 	mov	r5,r2
10006360:	e13ffe17 	ldw	r4,-8(fp)
10006364:	000dd700 	call	1000dd70 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
10006368:	008403b4 	movhi	r2,4110
1000636c:	108aac04 	addi	r2,r2,10928
10006370:	10800017 	ldw	r2,0(r2)
10006374:	1007883a 	mov	r3,r2
10006378:	d0865b17 	ldw	r2,6508(gp)
1000637c:	10c0042e 	bgeu	r2,r3,10006390 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
10006380:	008403b4 	movhi	r2,4110
10006384:	108aac04 	addi	r2,r2,10928
10006388:	10800017 	ldw	r2,0(r2)
1000638c:	d0865b15 	stw	r2,6508(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
10006390:	008403b4 	movhi	r2,4110
10006394:	108aac04 	addi	r2,r2,10928
10006398:	10800017 	ldw	r2,0(r2)
1000639c:	1007883a 	mov	r3,r2
100063a0:	d0865c17 	ldw	r2,6512(gp)
100063a4:	10c0062e 	bgeu	r2,r3,100063c0 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
100063a8:	008403b4 	movhi	r2,4110
100063ac:	108aac04 	addi	r2,r2,10928
100063b0:	10800017 	ldw	r2,0(r2)
100063b4:	d0865c15 	stw	r2,6512(gp)
100063b8:	00000106 	br	100063c0 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
100063bc:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
100063c0:	e037883a 	mov	sp,fp
100063c4:	dfc00117 	ldw	ra,4(sp)
100063c8:	df000017 	ldw	fp,0(sp)
100063cc:	dec00204 	addi	sp,sp,8
100063d0:	f800283a 	ret

100063d4 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
100063d4:	deffef04 	addi	sp,sp,-68
100063d8:	dfc01015 	stw	ra,64(sp)
100063dc:	df000f15 	stw	fp,60(sp)
100063e0:	df000f04 	addi	fp,sp,60
100063e4:	e13ffe15 	stw	r4,-8(fp)
100063e8:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
100063ec:	e0bfff17 	ldw	r2,-4(fp)
100063f0:	108002c4 	addi	r2,r2,11
100063f4:	108005f0 	cmpltui	r2,r2,23
100063f8:	1000051e 	bne	r2,zero,10006410 <_malloc_r+0x3c>
100063fc:	e0bfff17 	ldw	r2,-4(fp)
10006400:	10c002c4 	addi	r3,r2,11
10006404:	00bffe04 	movi	r2,-8
10006408:	1884703a 	and	r2,r3,r2
1000640c:	00000106 	br	10006414 <_malloc_r+0x40>
10006410:	00800404 	movi	r2,16
10006414:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
10006418:	e0bffa17 	ldw	r2,-24(fp)
1000641c:	10000316 	blt	r2,zero,1000642c <_malloc_r+0x58>
10006420:	e0fffa17 	ldw	r3,-24(fp)
10006424:	e0bfff17 	ldw	r2,-4(fp)
10006428:	1880052e 	bgeu	r3,r2,10006440 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
1000642c:	e0bffe17 	ldw	r2,-8(fp)
10006430:	00c00304 	movi	r3,12
10006434:	10c00015 	stw	r3,0(r2)
    return 0;
10006438:	0005883a 	mov	r2,zero
1000643c:	0002bf06 	br	10006f3c <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
10006440:	e13ffe17 	ldw	r4,-8(fp)
10006444:	0015d3c0 	call	10015d3c <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
10006448:	e0bffa17 	ldw	r2,-24(fp)
1000644c:	10807e28 	cmpgeui	r2,r2,504
10006450:	10003f1e 	bne	r2,zero,10006550 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
10006454:	e0bffa17 	ldw	r2,-24(fp)
10006458:	1004d0fa 	srli	r2,r2,3
1000645c:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
10006460:	e0bff217 	ldw	r2,-56(fp)
10006464:	10800044 	addi	r2,r2,1
10006468:	1085883a 	add	r2,r2,r2
1000646c:	1085883a 	add	r2,r2,r2
10006470:	1087883a 	add	r3,r2,r2
10006474:	00840374 	movhi	r2,4109
10006478:	109e9004 	addi	r2,r2,31296
1000647c:	1885883a 	add	r2,r3,r2
10006480:	10bffe04 	addi	r2,r2,-8
10006484:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
10006488:	e0bff917 	ldw	r2,-28(fp)
1000648c:	10800317 	ldw	r2,12(r2)
10006490:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
10006494:	e0fff117 	ldw	r3,-60(fp)
10006498:	e0bff917 	ldw	r2,-28(fp)
1000649c:	1880061e 	bne	r3,r2,100064b8 <_malloc_r+0xe4>
    {
      q = next_bin(q);
100064a0:	e0bff917 	ldw	r2,-28(fp)
100064a4:	10800204 	addi	r2,r2,8
100064a8:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
100064ac:	e0bff917 	ldw	r2,-28(fp)
100064b0:	10800317 	ldw	r2,12(r2)
100064b4:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
100064b8:	e0fff117 	ldw	r3,-60(fp)
100064bc:	e0bff917 	ldw	r2,-28(fp)
100064c0:	18801f26 	beq	r3,r2,10006540 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
100064c4:	e0bff117 	ldw	r2,-60(fp)
100064c8:	10c00117 	ldw	r3,4(r2)
100064cc:	00bfff04 	movi	r2,-4
100064d0:	1884703a 	and	r2,r3,r2
100064d4:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
100064d8:	e0bff117 	ldw	r2,-60(fp)
100064dc:	10800317 	ldw	r2,12(r2)
100064e0:	e0bff815 	stw	r2,-32(fp)
100064e4:	e0bff117 	ldw	r2,-60(fp)
100064e8:	10800217 	ldw	r2,8(r2)
100064ec:	e0bff715 	stw	r2,-36(fp)
100064f0:	e0bff717 	ldw	r2,-36(fp)
100064f4:	e0fff817 	ldw	r3,-32(fp)
100064f8:	10c00315 	stw	r3,12(r2)
100064fc:	e0bff817 	ldw	r2,-32(fp)
10006500:	e0fff717 	ldw	r3,-36(fp)
10006504:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
10006508:	e0fff117 	ldw	r3,-60(fp)
1000650c:	e0bffb17 	ldw	r2,-20(fp)
10006510:	1885883a 	add	r2,r3,r2
10006514:	e13ff117 	ldw	r4,-60(fp)
10006518:	e0fffb17 	ldw	r3,-20(fp)
1000651c:	20c7883a 	add	r3,r4,r3
10006520:	18c00117 	ldw	r3,4(r3)
10006524:	18c00054 	ori	r3,r3,1
10006528:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
1000652c:	e13ffe17 	ldw	r4,-8(fp)
10006530:	0015d600 	call	10015d60 <__malloc_unlock>
      return chunk2mem(victim);
10006534:	e0bff117 	ldw	r2,-60(fp)
10006538:	10800204 	addi	r2,r2,8
1000653c:	00027f06 	br	10006f3c <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
10006540:	e0bff217 	ldw	r2,-56(fp)
10006544:	10800084 	addi	r2,r2,2
10006548:	e0bff215 	stw	r2,-56(fp)
1000654c:	00007306 	br	1000671c <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
10006550:	e0bffa17 	ldw	r2,-24(fp)
10006554:	1004d27a 	srli	r2,r2,9
10006558:	1000031e 	bne	r2,zero,10006568 <_malloc_r+0x194>
1000655c:	e0bffa17 	ldw	r2,-24(fp)
10006560:	1004d0fa 	srli	r2,r2,3
10006564:	00002906 	br	1000660c <_malloc_r+0x238>
10006568:	e0bffa17 	ldw	r2,-24(fp)
1000656c:	1004d27a 	srli	r2,r2,9
10006570:	10800168 	cmpgeui	r2,r2,5
10006574:	1000041e 	bne	r2,zero,10006588 <_malloc_r+0x1b4>
10006578:	e0bffa17 	ldw	r2,-24(fp)
1000657c:	1004d1ba 	srli	r2,r2,6
10006580:	10800e04 	addi	r2,r2,56
10006584:	00002106 	br	1000660c <_malloc_r+0x238>
10006588:	e0bffa17 	ldw	r2,-24(fp)
1000658c:	1004d27a 	srli	r2,r2,9
10006590:	10800568 	cmpgeui	r2,r2,21
10006594:	1000041e 	bne	r2,zero,100065a8 <_malloc_r+0x1d4>
10006598:	e0bffa17 	ldw	r2,-24(fp)
1000659c:	1004d27a 	srli	r2,r2,9
100065a0:	108016c4 	addi	r2,r2,91
100065a4:	00001906 	br	1000660c <_malloc_r+0x238>
100065a8:	e0bffa17 	ldw	r2,-24(fp)
100065ac:	1004d27a 	srli	r2,r2,9
100065b0:	10801568 	cmpgeui	r2,r2,85
100065b4:	1000041e 	bne	r2,zero,100065c8 <_malloc_r+0x1f4>
100065b8:	e0bffa17 	ldw	r2,-24(fp)
100065bc:	1004d33a 	srli	r2,r2,12
100065c0:	10801b84 	addi	r2,r2,110
100065c4:	00001106 	br	1000660c <_malloc_r+0x238>
100065c8:	e0bffa17 	ldw	r2,-24(fp)
100065cc:	1004d27a 	srli	r2,r2,9
100065d0:	10805568 	cmpgeui	r2,r2,341
100065d4:	1000041e 	bne	r2,zero,100065e8 <_malloc_r+0x214>
100065d8:	e0bffa17 	ldw	r2,-24(fp)
100065dc:	1004d3fa 	srli	r2,r2,15
100065e0:	10801dc4 	addi	r2,r2,119
100065e4:	00000906 	br	1000660c <_malloc_r+0x238>
100065e8:	e0bffa17 	ldw	r2,-24(fp)
100065ec:	1004d27a 	srli	r2,r2,9
100065f0:	10815568 	cmpgeui	r2,r2,1365
100065f4:	1000041e 	bne	r2,zero,10006608 <_malloc_r+0x234>
100065f8:	e0bffa17 	ldw	r2,-24(fp)
100065fc:	1004d4ba 	srli	r2,r2,18
10006600:	10801f04 	addi	r2,r2,124
10006604:	00000106 	br	1000660c <_malloc_r+0x238>
10006608:	00801f84 	movi	r2,126
1000660c:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
10006610:	e0bff217 	ldw	r2,-56(fp)
10006614:	10800044 	addi	r2,r2,1
10006618:	1085883a 	add	r2,r2,r2
1000661c:	1085883a 	add	r2,r2,r2
10006620:	1087883a 	add	r3,r2,r2
10006624:	00840374 	movhi	r2,4109
10006628:	109e9004 	addi	r2,r2,31296
1000662c:	1885883a 	add	r2,r3,r2
10006630:	10bffe04 	addi	r2,r2,-8
10006634:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
10006638:	e0bff317 	ldw	r2,-52(fp)
1000663c:	10800317 	ldw	r2,12(r2)
10006640:	e0bff115 	stw	r2,-60(fp)
10006644:	00002f06 	br	10006704 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
10006648:	e0bff117 	ldw	r2,-60(fp)
1000664c:	10c00117 	ldw	r3,4(r2)
10006650:	00bfff04 	movi	r2,-4
10006654:	1884703a 	and	r2,r3,r2
10006658:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
1000665c:	e0fffb17 	ldw	r3,-20(fp)
10006660:	e0bffa17 	ldw	r2,-24(fp)
10006664:	1885c83a 	sub	r2,r3,r2
10006668:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
1000666c:	e0bff417 	ldw	r2,-48(fp)
10006670:	10800410 	cmplti	r2,r2,16
10006674:	1000041e 	bne	r2,zero,10006688 <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
10006678:	e0bff217 	ldw	r2,-56(fp)
1000667c:	10bfffc4 	addi	r2,r2,-1
10006680:	e0bff215 	stw	r2,-56(fp)
        break;   
10006684:	00002206 	br	10006710 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
10006688:	e0bff417 	ldw	r2,-48(fp)
1000668c:	10001a16 	blt	r2,zero,100066f8 <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
10006690:	e0bff117 	ldw	r2,-60(fp)
10006694:	10800317 	ldw	r2,12(r2)
10006698:	e0bff815 	stw	r2,-32(fp)
1000669c:	e0bff117 	ldw	r2,-60(fp)
100066a0:	10800217 	ldw	r2,8(r2)
100066a4:	e0bff715 	stw	r2,-36(fp)
100066a8:	e0bff717 	ldw	r2,-36(fp)
100066ac:	e0fff817 	ldw	r3,-32(fp)
100066b0:	10c00315 	stw	r3,12(r2)
100066b4:	e0bff817 	ldw	r2,-32(fp)
100066b8:	e0fff717 	ldw	r3,-36(fp)
100066bc:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
100066c0:	e0fff117 	ldw	r3,-60(fp)
100066c4:	e0bffb17 	ldw	r2,-20(fp)
100066c8:	1885883a 	add	r2,r3,r2
100066cc:	e13ff117 	ldw	r4,-60(fp)
100066d0:	e0fffb17 	ldw	r3,-20(fp)
100066d4:	20c7883a 	add	r3,r4,r3
100066d8:	18c00117 	ldw	r3,4(r3)
100066dc:	18c00054 	ori	r3,r3,1
100066e0:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
100066e4:	e13ffe17 	ldw	r4,-8(fp)
100066e8:	0015d600 	call	10015d60 <__malloc_unlock>
        return chunk2mem(victim);
100066ec:	e0bff117 	ldw	r2,-60(fp)
100066f0:	10800204 	addi	r2,r2,8
100066f4:	00021106 	br	10006f3c <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
100066f8:	e0bff117 	ldw	r2,-60(fp)
100066fc:	10800317 	ldw	r2,12(r2)
10006700:	e0bff115 	stw	r2,-60(fp)
10006704:	e0fff117 	ldw	r3,-60(fp)
10006708:	e0bff317 	ldw	r2,-52(fp)
1000670c:	18bfce1e 	bne	r3,r2,10006648 <__alt_data_end+0xf8006648>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
10006710:	e0bff217 	ldw	r2,-56(fp)
10006714:	10800044 	addi	r2,r2,1
10006718:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
1000671c:	00840374 	movhi	r2,4109
10006720:	109e9204 	addi	r2,r2,31304
10006724:	10800217 	ldw	r2,8(r2)
10006728:	e0bff115 	stw	r2,-60(fp)
1000672c:	00840374 	movhi	r2,4109
10006730:	109e9204 	addi	r2,r2,31304
10006734:	e0fff117 	ldw	r3,-60(fp)
10006738:	1880e626 	beq	r3,r2,10006ad4 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
1000673c:	e0bff117 	ldw	r2,-60(fp)
10006740:	10c00117 	ldw	r3,4(r2)
10006744:	00bfff04 	movi	r2,-4
10006748:	1884703a 	and	r2,r3,r2
1000674c:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
10006750:	e0fffb17 	ldw	r3,-20(fp)
10006754:	e0bffa17 	ldw	r2,-24(fp)
10006758:	1885c83a 	sub	r2,r3,r2
1000675c:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
10006760:	e0bff417 	ldw	r2,-48(fp)
10006764:	10800410 	cmplti	r2,r2,16
10006768:	1000271e 	bne	r2,zero,10006808 <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
1000676c:	e0fff117 	ldw	r3,-60(fp)
10006770:	e0bffa17 	ldw	r2,-24(fp)
10006774:	1885883a 	add	r2,r3,r2
10006778:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
1000677c:	e0bffa17 	ldw	r2,-24(fp)
10006780:	10c00054 	ori	r3,r2,1
10006784:	e0bff117 	ldw	r2,-60(fp)
10006788:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
1000678c:	00c40374 	movhi	r3,4109
10006790:	18de9204 	addi	r3,r3,31304
10006794:	00840374 	movhi	r2,4109
10006798:	109e9204 	addi	r2,r2,31304
1000679c:	e13ffc17 	ldw	r4,-16(fp)
100067a0:	11000315 	stw	r4,12(r2)
100067a4:	10800317 	ldw	r2,12(r2)
100067a8:	18800215 	stw	r2,8(r3)
100067ac:	00840374 	movhi	r2,4109
100067b0:	109e9204 	addi	r2,r2,31304
100067b4:	e0fffc17 	ldw	r3,-16(fp)
100067b8:	18800315 	stw	r2,12(r3)
100067bc:	e0bffc17 	ldw	r2,-16(fp)
100067c0:	10c00317 	ldw	r3,12(r2)
100067c4:	e0bffc17 	ldw	r2,-16(fp)
100067c8:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
100067cc:	e0bff417 	ldw	r2,-48(fp)
100067d0:	10800054 	ori	r2,r2,1
100067d4:	1007883a 	mov	r3,r2
100067d8:	e0bffc17 	ldw	r2,-16(fp)
100067dc:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
100067e0:	e0bff417 	ldw	r2,-48(fp)
100067e4:	e0fffc17 	ldw	r3,-16(fp)
100067e8:	1885883a 	add	r2,r3,r2
100067ec:	e0fff417 	ldw	r3,-48(fp)
100067f0:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
100067f4:	e13ffe17 	ldw	r4,-8(fp)
100067f8:	0015d600 	call	10015d60 <__malloc_unlock>
      return chunk2mem(victim);
100067fc:	e0bff117 	ldw	r2,-60(fp)
10006800:	10800204 	addi	r2,r2,8
10006804:	0001cd06 	br	10006f3c <_malloc_r+0xb68>
    }

    clear_last_remainder;
10006808:	00c40374 	movhi	r3,4109
1000680c:	18de9204 	addi	r3,r3,31304
10006810:	00840374 	movhi	r2,4109
10006814:	109e9204 	addi	r2,r2,31304
10006818:	01040374 	movhi	r4,4109
1000681c:	211e9204 	addi	r4,r4,31304
10006820:	11000315 	stw	r4,12(r2)
10006824:	10800317 	ldw	r2,12(r2)
10006828:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
1000682c:	e0bff417 	ldw	r2,-48(fp)
10006830:	10000e16 	blt	r2,zero,1000686c <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
10006834:	e0fff117 	ldw	r3,-60(fp)
10006838:	e0bffb17 	ldw	r2,-20(fp)
1000683c:	1885883a 	add	r2,r3,r2
10006840:	e13ff117 	ldw	r4,-60(fp)
10006844:	e0fffb17 	ldw	r3,-20(fp)
10006848:	20c7883a 	add	r3,r4,r3
1000684c:	18c00117 	ldw	r3,4(r3)
10006850:	18c00054 	ori	r3,r3,1
10006854:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
10006858:	e13ffe17 	ldw	r4,-8(fp)
1000685c:	0015d600 	call	10015d60 <__malloc_unlock>
      return chunk2mem(victim);
10006860:	e0bff117 	ldw	r2,-60(fp)
10006864:	10800204 	addi	r2,r2,8
10006868:	0001b406 	br	10006f3c <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
1000686c:	e0bffb17 	ldw	r2,-20(fp)
10006870:	10808028 	cmpgeui	r2,r2,512
10006874:	10002c1e 	bne	r2,zero,10006928 <_malloc_r+0x554>
10006878:	e0bffb17 	ldw	r2,-20(fp)
1000687c:	1004d0fa 	srli	r2,r2,3
10006880:	e0bffd15 	stw	r2,-12(fp)
10006884:	00c40374 	movhi	r3,4109
10006888:	18de9004 	addi	r3,r3,31296
1000688c:	00840374 	movhi	r2,4109
10006890:	109e9004 	addi	r2,r2,31296
10006894:	11000117 	ldw	r4,4(r2)
10006898:	e0bffd17 	ldw	r2,-12(fp)
1000689c:	1000010e 	bge	r2,zero,100068a4 <_malloc_r+0x4d0>
100068a0:	108000c4 	addi	r2,r2,3
100068a4:	1005d0ba 	srai	r2,r2,2
100068a8:	100b883a 	mov	r5,r2
100068ac:	00800044 	movi	r2,1
100068b0:	1144983a 	sll	r2,r2,r5
100068b4:	2084b03a 	or	r2,r4,r2
100068b8:	18800115 	stw	r2,4(r3)
100068bc:	e0bffd17 	ldw	r2,-12(fp)
100068c0:	10800044 	addi	r2,r2,1
100068c4:	1085883a 	add	r2,r2,r2
100068c8:	1085883a 	add	r2,r2,r2
100068cc:	1087883a 	add	r3,r2,r2
100068d0:	00840374 	movhi	r2,4109
100068d4:	109e9004 	addi	r2,r2,31296
100068d8:	1885883a 	add	r2,r3,r2
100068dc:	10bffe04 	addi	r2,r2,-8
100068e0:	e0bff815 	stw	r2,-32(fp)
100068e4:	e0bff817 	ldw	r2,-32(fp)
100068e8:	10800217 	ldw	r2,8(r2)
100068ec:	e0bff715 	stw	r2,-36(fp)
100068f0:	e0bff117 	ldw	r2,-60(fp)
100068f4:	e0fff817 	ldw	r3,-32(fp)
100068f8:	10c00315 	stw	r3,12(r2)
100068fc:	e0bff117 	ldw	r2,-60(fp)
10006900:	e0fff717 	ldw	r3,-36(fp)
10006904:	10c00215 	stw	r3,8(r2)
10006908:	e0bff817 	ldw	r2,-32(fp)
1000690c:	e0fff117 	ldw	r3,-60(fp)
10006910:	10c00215 	stw	r3,8(r2)
10006914:	e0bff817 	ldw	r2,-32(fp)
10006918:	10c00217 	ldw	r3,8(r2)
1000691c:	e0bff717 	ldw	r2,-36(fp)
10006920:	10c00315 	stw	r3,12(r2)
10006924:	00006b06 	br	10006ad4 <_malloc_r+0x700>
10006928:	e0bffb17 	ldw	r2,-20(fp)
1000692c:	1004d27a 	srli	r2,r2,9
10006930:	1000031e 	bne	r2,zero,10006940 <_malloc_r+0x56c>
10006934:	e0bffb17 	ldw	r2,-20(fp)
10006938:	1004d0fa 	srli	r2,r2,3
1000693c:	00002906 	br	100069e4 <_malloc_r+0x610>
10006940:	e0bffb17 	ldw	r2,-20(fp)
10006944:	1004d27a 	srli	r2,r2,9
10006948:	10800168 	cmpgeui	r2,r2,5
1000694c:	1000041e 	bne	r2,zero,10006960 <_malloc_r+0x58c>
10006950:	e0bffb17 	ldw	r2,-20(fp)
10006954:	1004d1ba 	srli	r2,r2,6
10006958:	10800e04 	addi	r2,r2,56
1000695c:	00002106 	br	100069e4 <_malloc_r+0x610>
10006960:	e0bffb17 	ldw	r2,-20(fp)
10006964:	1004d27a 	srli	r2,r2,9
10006968:	10800568 	cmpgeui	r2,r2,21
1000696c:	1000041e 	bne	r2,zero,10006980 <_malloc_r+0x5ac>
10006970:	e0bffb17 	ldw	r2,-20(fp)
10006974:	1004d27a 	srli	r2,r2,9
10006978:	108016c4 	addi	r2,r2,91
1000697c:	00001906 	br	100069e4 <_malloc_r+0x610>
10006980:	e0bffb17 	ldw	r2,-20(fp)
10006984:	1004d27a 	srli	r2,r2,9
10006988:	10801568 	cmpgeui	r2,r2,85
1000698c:	1000041e 	bne	r2,zero,100069a0 <_malloc_r+0x5cc>
10006990:	e0bffb17 	ldw	r2,-20(fp)
10006994:	1004d33a 	srli	r2,r2,12
10006998:	10801b84 	addi	r2,r2,110
1000699c:	00001106 	br	100069e4 <_malloc_r+0x610>
100069a0:	e0bffb17 	ldw	r2,-20(fp)
100069a4:	1004d27a 	srli	r2,r2,9
100069a8:	10805568 	cmpgeui	r2,r2,341
100069ac:	1000041e 	bne	r2,zero,100069c0 <_malloc_r+0x5ec>
100069b0:	e0bffb17 	ldw	r2,-20(fp)
100069b4:	1004d3fa 	srli	r2,r2,15
100069b8:	10801dc4 	addi	r2,r2,119
100069bc:	00000906 	br	100069e4 <_malloc_r+0x610>
100069c0:	e0bffb17 	ldw	r2,-20(fp)
100069c4:	1004d27a 	srli	r2,r2,9
100069c8:	10815568 	cmpgeui	r2,r2,1365
100069cc:	1000041e 	bne	r2,zero,100069e0 <_malloc_r+0x60c>
100069d0:	e0bffb17 	ldw	r2,-20(fp)
100069d4:	1004d4ba 	srli	r2,r2,18
100069d8:	10801f04 	addi	r2,r2,124
100069dc:	00000106 	br	100069e4 <_malloc_r+0x610>
100069e0:	00801f84 	movi	r2,126
100069e4:	e0bffd15 	stw	r2,-12(fp)
100069e8:	e0bffd17 	ldw	r2,-12(fp)
100069ec:	10800044 	addi	r2,r2,1
100069f0:	1085883a 	add	r2,r2,r2
100069f4:	1085883a 	add	r2,r2,r2
100069f8:	1087883a 	add	r3,r2,r2
100069fc:	00840374 	movhi	r2,4109
10006a00:	109e9004 	addi	r2,r2,31296
10006a04:	1885883a 	add	r2,r3,r2
10006a08:	10bffe04 	addi	r2,r2,-8
10006a0c:	e0bff815 	stw	r2,-32(fp)
10006a10:	e0bff817 	ldw	r2,-32(fp)
10006a14:	10800217 	ldw	r2,8(r2)
10006a18:	e0bff715 	stw	r2,-36(fp)
10006a1c:	e0fff717 	ldw	r3,-36(fp)
10006a20:	e0bff817 	ldw	r2,-32(fp)
10006a24:	1880121e 	bne	r3,r2,10006a70 <_malloc_r+0x69c>
10006a28:	00c40374 	movhi	r3,4109
10006a2c:	18de9004 	addi	r3,r3,31296
10006a30:	00840374 	movhi	r2,4109
10006a34:	109e9004 	addi	r2,r2,31296
10006a38:	11000117 	ldw	r4,4(r2)
10006a3c:	e0bffd17 	ldw	r2,-12(fp)
10006a40:	1000010e 	bge	r2,zero,10006a48 <_malloc_r+0x674>
10006a44:	108000c4 	addi	r2,r2,3
10006a48:	1005d0ba 	srai	r2,r2,2
10006a4c:	100b883a 	mov	r5,r2
10006a50:	00800044 	movi	r2,1
10006a54:	1144983a 	sll	r2,r2,r5
10006a58:	2084b03a 	or	r2,r4,r2
10006a5c:	18800115 	stw	r2,4(r3)
10006a60:	00000f06 	br	10006aa0 <_malloc_r+0x6cc>
10006a64:	e0bff717 	ldw	r2,-36(fp)
10006a68:	10800217 	ldw	r2,8(r2)
10006a6c:	e0bff715 	stw	r2,-36(fp)
10006a70:	e0fff717 	ldw	r3,-36(fp)
10006a74:	e0bff817 	ldw	r2,-32(fp)
10006a78:	18800626 	beq	r3,r2,10006a94 <_malloc_r+0x6c0>
10006a7c:	e0bff717 	ldw	r2,-36(fp)
10006a80:	10c00117 	ldw	r3,4(r2)
10006a84:	00bfff04 	movi	r2,-4
10006a88:	1884703a 	and	r2,r3,r2
10006a8c:	e0fffb17 	ldw	r3,-20(fp)
10006a90:	18bff436 	bltu	r3,r2,10006a64 <__alt_data_end+0xf8006a64>
10006a94:	e0bff717 	ldw	r2,-36(fp)
10006a98:	10800317 	ldw	r2,12(r2)
10006a9c:	e0bff815 	stw	r2,-32(fp)
10006aa0:	e0bff117 	ldw	r2,-60(fp)
10006aa4:	e0fff817 	ldw	r3,-32(fp)
10006aa8:	10c00315 	stw	r3,12(r2)
10006aac:	e0bff117 	ldw	r2,-60(fp)
10006ab0:	e0fff717 	ldw	r3,-36(fp)
10006ab4:	10c00215 	stw	r3,8(r2)
10006ab8:	e0bff817 	ldw	r2,-32(fp)
10006abc:	e0fff117 	ldw	r3,-60(fp)
10006ac0:	10c00215 	stw	r3,8(r2)
10006ac4:	e0bff817 	ldw	r2,-32(fp)
10006ac8:	10c00217 	ldw	r3,8(r2)
10006acc:	e0bff717 	ldw	r2,-36(fp)
10006ad0:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
10006ad4:	e0bff217 	ldw	r2,-56(fp)
10006ad8:	1000010e 	bge	r2,zero,10006ae0 <_malloc_r+0x70c>
10006adc:	108000c4 	addi	r2,r2,3
10006ae0:	1005d0ba 	srai	r2,r2,2
10006ae4:	1007883a 	mov	r3,r2
10006ae8:	00800044 	movi	r2,1
10006aec:	10c4983a 	sll	r2,r2,r3
10006af0:	e0bff515 	stw	r2,-44(fp)
10006af4:	00840374 	movhi	r2,4109
10006af8:	109e9004 	addi	r2,r2,31296
10006afc:	10c00117 	ldw	r3,4(r2)
10006b00:	e0bff517 	ldw	r2,-44(fp)
10006b04:	1880c636 	bltu	r3,r2,10006e20 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
10006b08:	00840374 	movhi	r2,4109
10006b0c:	109e9004 	addi	r2,r2,31296
10006b10:	10c00117 	ldw	r3,4(r2)
10006b14:	e0bff517 	ldw	r2,-44(fp)
10006b18:	1884703a 	and	r2,r3,r2
10006b1c:	1000151e 	bne	r2,zero,10006b74 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
10006b20:	e0fff217 	ldw	r3,-56(fp)
10006b24:	00bfff04 	movi	r2,-4
10006b28:	1884703a 	and	r2,r3,r2
10006b2c:	10800104 	addi	r2,r2,4
10006b30:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
10006b34:	e0bff517 	ldw	r2,-44(fp)
10006b38:	1085883a 	add	r2,r2,r2
10006b3c:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
10006b40:	00000606 	br	10006b5c <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
10006b44:	e0bff217 	ldw	r2,-56(fp)
10006b48:	10800104 	addi	r2,r2,4
10006b4c:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
10006b50:	e0bff517 	ldw	r2,-44(fp)
10006b54:	1085883a 	add	r2,r2,r2
10006b58:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
10006b5c:	00840374 	movhi	r2,4109
10006b60:	109e9004 	addi	r2,r2,31296
10006b64:	10c00117 	ldw	r3,4(r2)
10006b68:	e0bff517 	ldw	r2,-44(fp)
10006b6c:	1884703a 	and	r2,r3,r2
10006b70:	103ff426 	beq	r2,zero,10006b44 <__alt_data_end+0xf8006b44>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
10006b74:	e0bff217 	ldw	r2,-56(fp)
10006b78:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
10006b7c:	e0bff217 	ldw	r2,-56(fp)
10006b80:	10800044 	addi	r2,r2,1
10006b84:	1085883a 	add	r2,r2,r2
10006b88:	1085883a 	add	r2,r2,r2
10006b8c:	1087883a 	add	r3,r2,r2
10006b90:	00840374 	movhi	r2,4109
10006b94:	109e9004 	addi	r2,r2,31296
10006b98:	1885883a 	add	r2,r3,r2
10006b9c:	10bffe04 	addi	r2,r2,-8
10006ba0:	e0bff315 	stw	r2,-52(fp)
10006ba4:	e0bff317 	ldw	r2,-52(fp)
10006ba8:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
10006bac:	e0bff317 	ldw	r2,-52(fp)
10006bb0:	10800317 	ldw	r2,12(r2)
10006bb4:	e0bff115 	stw	r2,-60(fp)
10006bb8:	00005e06 	br	10006d34 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
10006bbc:	e0bff117 	ldw	r2,-60(fp)
10006bc0:	10c00117 	ldw	r3,4(r2)
10006bc4:	00bfff04 	movi	r2,-4
10006bc8:	1884703a 	and	r2,r3,r2
10006bcc:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
10006bd0:	e0fffb17 	ldw	r3,-20(fp)
10006bd4:	e0bffa17 	ldw	r2,-24(fp)
10006bd8:	1885c83a 	sub	r2,r3,r2
10006bdc:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
10006be0:	e0bff417 	ldw	r2,-48(fp)
10006be4:	10800410 	cmplti	r2,r2,16
10006be8:	1000331e 	bne	r2,zero,10006cb8 <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
10006bec:	e0fff117 	ldw	r3,-60(fp)
10006bf0:	e0bffa17 	ldw	r2,-24(fp)
10006bf4:	1885883a 	add	r2,r3,r2
10006bf8:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
10006bfc:	e0bffa17 	ldw	r2,-24(fp)
10006c00:	10c00054 	ori	r3,r2,1
10006c04:	e0bff117 	ldw	r2,-60(fp)
10006c08:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
10006c0c:	e0bff117 	ldw	r2,-60(fp)
10006c10:	10800317 	ldw	r2,12(r2)
10006c14:	e0bff815 	stw	r2,-32(fp)
10006c18:	e0bff117 	ldw	r2,-60(fp)
10006c1c:	10800217 	ldw	r2,8(r2)
10006c20:	e0bff715 	stw	r2,-36(fp)
10006c24:	e0bff717 	ldw	r2,-36(fp)
10006c28:	e0fff817 	ldw	r3,-32(fp)
10006c2c:	10c00315 	stw	r3,12(r2)
10006c30:	e0bff817 	ldw	r2,-32(fp)
10006c34:	e0fff717 	ldw	r3,-36(fp)
10006c38:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
10006c3c:	00c40374 	movhi	r3,4109
10006c40:	18de9204 	addi	r3,r3,31304
10006c44:	00840374 	movhi	r2,4109
10006c48:	109e9204 	addi	r2,r2,31304
10006c4c:	e13ffc17 	ldw	r4,-16(fp)
10006c50:	11000315 	stw	r4,12(r2)
10006c54:	10800317 	ldw	r2,12(r2)
10006c58:	18800215 	stw	r2,8(r3)
10006c5c:	00840374 	movhi	r2,4109
10006c60:	109e9204 	addi	r2,r2,31304
10006c64:	e0fffc17 	ldw	r3,-16(fp)
10006c68:	18800315 	stw	r2,12(r3)
10006c6c:	e0bffc17 	ldw	r2,-16(fp)
10006c70:	10c00317 	ldw	r3,12(r2)
10006c74:	e0bffc17 	ldw	r2,-16(fp)
10006c78:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
10006c7c:	e0bff417 	ldw	r2,-48(fp)
10006c80:	10800054 	ori	r2,r2,1
10006c84:	1007883a 	mov	r3,r2
10006c88:	e0bffc17 	ldw	r2,-16(fp)
10006c8c:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
10006c90:	e0bff417 	ldw	r2,-48(fp)
10006c94:	e0fffc17 	ldw	r3,-16(fp)
10006c98:	1885883a 	add	r2,r3,r2
10006c9c:	e0fff417 	ldw	r3,-48(fp)
10006ca0:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
10006ca4:	e13ffe17 	ldw	r4,-8(fp)
10006ca8:	0015d600 	call	10015d60 <__malloc_unlock>
            return chunk2mem(victim);
10006cac:	e0bff117 	ldw	r2,-60(fp)
10006cb0:	10800204 	addi	r2,r2,8
10006cb4:	0000a106 	br	10006f3c <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
10006cb8:	e0bff417 	ldw	r2,-48(fp)
10006cbc:	10001a16 	blt	r2,zero,10006d28 <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
10006cc0:	e0fff117 	ldw	r3,-60(fp)
10006cc4:	e0bffb17 	ldw	r2,-20(fp)
10006cc8:	1885883a 	add	r2,r3,r2
10006ccc:	e13ff117 	ldw	r4,-60(fp)
10006cd0:	e0fffb17 	ldw	r3,-20(fp)
10006cd4:	20c7883a 	add	r3,r4,r3
10006cd8:	18c00117 	ldw	r3,4(r3)
10006cdc:	18c00054 	ori	r3,r3,1
10006ce0:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
10006ce4:	e0bff117 	ldw	r2,-60(fp)
10006ce8:	10800317 	ldw	r2,12(r2)
10006cec:	e0bff815 	stw	r2,-32(fp)
10006cf0:	e0bff117 	ldw	r2,-60(fp)
10006cf4:	10800217 	ldw	r2,8(r2)
10006cf8:	e0bff715 	stw	r2,-36(fp)
10006cfc:	e0bff717 	ldw	r2,-36(fp)
10006d00:	e0fff817 	ldw	r3,-32(fp)
10006d04:	10c00315 	stw	r3,12(r2)
10006d08:	e0bff817 	ldw	r2,-32(fp)
10006d0c:	e0fff717 	ldw	r3,-36(fp)
10006d10:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
10006d14:	e13ffe17 	ldw	r4,-8(fp)
10006d18:	0015d600 	call	10015d60 <__malloc_unlock>
            return chunk2mem(victim);
10006d1c:	e0bff117 	ldw	r2,-60(fp)
10006d20:	10800204 	addi	r2,r2,8
10006d24:	00008506 	br	10006f3c <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
10006d28:	e0bff117 	ldw	r2,-60(fp)
10006d2c:	10800317 	ldw	r2,12(r2)
10006d30:	e0bff115 	stw	r2,-60(fp)
10006d34:	e0fff117 	ldw	r3,-60(fp)
10006d38:	e0bff317 	ldw	r2,-52(fp)
10006d3c:	18bf9f1e 	bne	r3,r2,10006bbc <__alt_data_end+0xf8006bbc>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
10006d40:	e0bff317 	ldw	r2,-52(fp)
10006d44:	10800204 	addi	r2,r2,8
10006d48:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
10006d4c:	e0bff217 	ldw	r2,-56(fp)
10006d50:	10800044 	addi	r2,r2,1
10006d54:	e0bff215 	stw	r2,-56(fp)
10006d58:	e0bff217 	ldw	r2,-56(fp)
10006d5c:	108000cc 	andi	r2,r2,3
10006d60:	103f921e 	bne	r2,zero,10006bac <__alt_data_end+0xf8006bac>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
10006d64:	e0bff617 	ldw	r2,-40(fp)
10006d68:	108000cc 	andi	r2,r2,3
10006d6c:	10000a1e 	bne	r2,zero,10006d98 <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
10006d70:	00840374 	movhi	r2,4109
10006d74:	109e9004 	addi	r2,r2,31296
10006d78:	00c40374 	movhi	r3,4109
10006d7c:	18de9004 	addi	r3,r3,31296
10006d80:	19000117 	ldw	r4,4(r3)
10006d84:	e0fff517 	ldw	r3,-44(fp)
10006d88:	00c6303a 	nor	r3,zero,r3
10006d8c:	20c6703a 	and	r3,r4,r3
10006d90:	10c00115 	stw	r3,4(r2)
          break;
10006d94:	00000a06 	br	10006dc0 <_malloc_r+0x9ec>
        }
        --startidx;
10006d98:	e0bff617 	ldw	r2,-40(fp)
10006d9c:	10bfffc4 	addi	r2,r2,-1
10006da0:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
10006da4:	e0bff917 	ldw	r2,-28(fp)
10006da8:	10bffe04 	addi	r2,r2,-8
10006dac:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
10006db0:	e0bff917 	ldw	r2,-28(fp)
10006db4:	10c00217 	ldw	r3,8(r2)
10006db8:	e0bff917 	ldw	r2,-28(fp)
10006dbc:	18bfe926 	beq	r3,r2,10006d64 <__alt_data_end+0xf8006d64>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
10006dc0:	e0bff517 	ldw	r2,-44(fp)
10006dc4:	1085883a 	add	r2,r2,r2
10006dc8:	e0bff515 	stw	r2,-44(fp)
10006dcc:	00840374 	movhi	r2,4109
10006dd0:	109e9004 	addi	r2,r2,31296
10006dd4:	10c00117 	ldw	r3,4(r2)
10006dd8:	e0bff517 	ldw	r2,-44(fp)
10006ddc:	18801036 	bltu	r3,r2,10006e20 <_malloc_r+0xa4c>
10006de0:	e0bff517 	ldw	r2,-44(fp)
10006de4:	10000e26 	beq	r2,zero,10006e20 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
10006de8:	00000606 	br	10006e04 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
10006dec:	e0bff217 	ldw	r2,-56(fp)
10006df0:	10800104 	addi	r2,r2,4
10006df4:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
10006df8:	e0bff517 	ldw	r2,-44(fp)
10006dfc:	1085883a 	add	r2,r2,r2
10006e00:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
10006e04:	00840374 	movhi	r2,4109
10006e08:	109e9004 	addi	r2,r2,31296
10006e0c:	10c00117 	ldw	r3,4(r2)
10006e10:	e0bff517 	ldw	r2,-44(fp)
10006e14:	1884703a 	and	r2,r3,r2
10006e18:	103ff426 	beq	r2,zero,10006dec <__alt_data_end+0xf8006dec>
          block <<= 1;
        }
      }
      else
        break;
    }
10006e1c:	003f5506 	br	10006b74 <__alt_data_end+0xf8006b74>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
10006e20:	00840374 	movhi	r2,4109
10006e24:	109e9004 	addi	r2,r2,31296
10006e28:	10800217 	ldw	r2,8(r2)
10006e2c:	10c00117 	ldw	r3,4(r2)
10006e30:	00bfff04 	movi	r2,-4
10006e34:	1886703a 	and	r3,r3,r2
10006e38:	e0bffa17 	ldw	r2,-24(fp)
10006e3c:	1885c83a 	sub	r2,r3,r2
10006e40:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
10006e44:	00840374 	movhi	r2,4109
10006e48:	109e9004 	addi	r2,r2,31296
10006e4c:	10800217 	ldw	r2,8(r2)
10006e50:	10c00117 	ldw	r3,4(r2)
10006e54:	00bfff04 	movi	r2,-4
10006e58:	1886703a 	and	r3,r3,r2
10006e5c:	e0bffa17 	ldw	r2,-24(fp)
10006e60:	18800336 	bltu	r3,r2,10006e70 <_malloc_r+0xa9c>
10006e64:	e0bff417 	ldw	r2,-48(fp)
10006e68:	10800408 	cmpgei	r2,r2,16
10006e6c:	10001b1e 	bne	r2,zero,10006edc <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
10006e70:	e17ffa17 	ldw	r5,-24(fp)
10006e74:	e13ffe17 	ldw	r4,-8(fp)
10006e78:	00060200 	call	10006020 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
10006e7c:	00840374 	movhi	r2,4109
10006e80:	109e9004 	addi	r2,r2,31296
10006e84:	10800217 	ldw	r2,8(r2)
10006e88:	10c00117 	ldw	r3,4(r2)
10006e8c:	00bfff04 	movi	r2,-4
10006e90:	1886703a 	and	r3,r3,r2
10006e94:	e0bffa17 	ldw	r2,-24(fp)
10006e98:	1885c83a 	sub	r2,r3,r2
10006e9c:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
10006ea0:	00840374 	movhi	r2,4109
10006ea4:	109e9004 	addi	r2,r2,31296
10006ea8:	10800217 	ldw	r2,8(r2)
10006eac:	10c00117 	ldw	r3,4(r2)
10006eb0:	00bfff04 	movi	r2,-4
10006eb4:	1886703a 	and	r3,r3,r2
10006eb8:	e0bffa17 	ldw	r2,-24(fp)
10006ebc:	18800336 	bltu	r3,r2,10006ecc <_malloc_r+0xaf8>
10006ec0:	e0bff417 	ldw	r2,-48(fp)
10006ec4:	10800408 	cmpgei	r2,r2,16
10006ec8:	1000041e 	bne	r2,zero,10006edc <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
10006ecc:	e13ffe17 	ldw	r4,-8(fp)
10006ed0:	0015d600 	call	10015d60 <__malloc_unlock>
      return 0; /* propagate failure */
10006ed4:	0005883a 	mov	r2,zero
10006ed8:	00001806 	br	10006f3c <_malloc_r+0xb68>
    }
  }

  victim = top;
10006edc:	00840374 	movhi	r2,4109
10006ee0:	109e9004 	addi	r2,r2,31296
10006ee4:	10800217 	ldw	r2,8(r2)
10006ee8:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
10006eec:	e0bffa17 	ldw	r2,-24(fp)
10006ef0:	10c00054 	ori	r3,r2,1
10006ef4:	e0bff117 	ldw	r2,-60(fp)
10006ef8:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
10006efc:	00840374 	movhi	r2,4109
10006f00:	109e9004 	addi	r2,r2,31296
10006f04:	e13ff117 	ldw	r4,-60(fp)
10006f08:	e0fffa17 	ldw	r3,-24(fp)
10006f0c:	20c7883a 	add	r3,r4,r3
10006f10:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
10006f14:	00840374 	movhi	r2,4109
10006f18:	109e9004 	addi	r2,r2,31296
10006f1c:	10800217 	ldw	r2,8(r2)
10006f20:	e0fff417 	ldw	r3,-48(fp)
10006f24:	18c00054 	ori	r3,r3,1
10006f28:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
10006f2c:	e13ffe17 	ldw	r4,-8(fp)
10006f30:	0015d600 	call	10015d60 <__malloc_unlock>
  return chunk2mem(victim);
10006f34:	e0bff117 	ldw	r2,-60(fp)
10006f38:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
10006f3c:	e037883a 	mov	sp,fp
10006f40:	dfc00117 	ldw	ra,4(sp)
10006f44:	df000017 	ldw	fp,0(sp)
10006f48:	dec00204 	addi	sp,sp,8
10006f4c:	f800283a 	ret

10006f50 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
10006f50:	defff704 	addi	sp,sp,-36
10006f54:	df000815 	stw	fp,32(sp)
10006f58:	df000804 	addi	fp,sp,32
10006f5c:	e13ffd15 	stw	r4,-12(fp)
10006f60:	e17ffe15 	stw	r5,-8(fp)
10006f64:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
10006f68:	e0bffd17 	ldw	r2,-12(fp)
10006f6c:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
10006f70:	e0bffe17 	ldw	r2,-8(fp)
10006f74:	10803fcc 	andi	r2,r2,255
10006f78:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
10006f7c:	00000c06 	br	10006fb0 <memset+0x60>
    {
      if (n--)
10006f80:	e0bfff17 	ldw	r2,-4(fp)
10006f84:	10ffffc4 	addi	r3,r2,-1
10006f88:	e0ffff15 	stw	r3,-4(fp)
10006f8c:	10000626 	beq	r2,zero,10006fa8 <memset+0x58>
        *s++ = (char) c;
10006f90:	e0bff817 	ldw	r2,-32(fp)
10006f94:	10c00044 	addi	r3,r2,1
10006f98:	e0fff815 	stw	r3,-32(fp)
10006f9c:	e0fffe17 	ldw	r3,-8(fp)
10006fa0:	10c00005 	stb	r3,0(r2)
10006fa4:	00000206 	br	10006fb0 <memset+0x60>
      else
        return m;
10006fa8:	e0bffd17 	ldw	r2,-12(fp)
10006fac:	00005506 	br	10007104 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
10006fb0:	e0bff817 	ldw	r2,-32(fp)
10006fb4:	108000cc 	andi	r2,r2,3
10006fb8:	103ff11e 	bne	r2,zero,10006f80 <__alt_data_end+0xf8006f80>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
10006fbc:	e0bfff17 	ldw	r2,-4(fp)
10006fc0:	10800130 	cmpltui	r2,r2,4
10006fc4:	10004a1e 	bne	r2,zero,100070f0 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
10006fc8:	e0bff817 	ldw	r2,-32(fp)
10006fcc:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
10006fd0:	e0bffc17 	ldw	r2,-16(fp)
10006fd4:	1006923a 	slli	r3,r2,8
10006fd8:	e0bffc17 	ldw	r2,-16(fp)
10006fdc:	1884b03a 	or	r2,r3,r2
10006fe0:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
10006fe4:	e0bffa17 	ldw	r2,-24(fp)
10006fe8:	1004943a 	slli	r2,r2,16
10006fec:	e0fffa17 	ldw	r3,-24(fp)
10006ff0:	1884b03a 	or	r2,r3,r2
10006ff4:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
10006ff8:	00800804 	movi	r2,32
10006ffc:	e0bff915 	stw	r2,-28(fp)
10007000:	00000906 	br	10007028 <memset+0xd8>
        buffer = (buffer << i) | buffer;
10007004:	e0fffa17 	ldw	r3,-24(fp)
10007008:	e0bff917 	ldw	r2,-28(fp)
1000700c:	1884983a 	sll	r2,r3,r2
10007010:	e0fffa17 	ldw	r3,-24(fp)
10007014:	1884b03a 	or	r2,r3,r2
10007018:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000701c:	e0bff917 	ldw	r2,-28(fp)
10007020:	1085883a 	add	r2,r2,r2
10007024:	e0bff915 	stw	r2,-28(fp)
10007028:	e0bff917 	ldw	r2,-28(fp)
1000702c:	10800830 	cmpltui	r2,r2,32
10007030:	103ff41e 	bne	r2,zero,10007004 <__alt_data_end+0xf8007004>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
10007034:	00001706 	br	10007094 <memset+0x144>
        {
          *aligned_addr++ = buffer;
10007038:	e0bffb17 	ldw	r2,-20(fp)
1000703c:	10c00104 	addi	r3,r2,4
10007040:	e0fffb15 	stw	r3,-20(fp)
10007044:	e0fffa17 	ldw	r3,-24(fp)
10007048:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
1000704c:	e0bffb17 	ldw	r2,-20(fp)
10007050:	10c00104 	addi	r3,r2,4
10007054:	e0fffb15 	stw	r3,-20(fp)
10007058:	e0fffa17 	ldw	r3,-24(fp)
1000705c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007060:	e0bffb17 	ldw	r2,-20(fp)
10007064:	10c00104 	addi	r3,r2,4
10007068:	e0fffb15 	stw	r3,-20(fp)
1000706c:	e0fffa17 	ldw	r3,-24(fp)
10007070:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007074:	e0bffb17 	ldw	r2,-20(fp)
10007078:	10c00104 	addi	r3,r2,4
1000707c:	e0fffb15 	stw	r3,-20(fp)
10007080:	e0fffa17 	ldw	r3,-24(fp)
10007084:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
10007088:	e0bfff17 	ldw	r2,-4(fp)
1000708c:	10bffc04 	addi	r2,r2,-16
10007090:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
10007094:	e0bfff17 	ldw	r2,-4(fp)
10007098:	10800428 	cmpgeui	r2,r2,16
1000709c:	103fe61e 	bne	r2,zero,10007038 <__alt_data_end+0xf8007038>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
100070a0:	00000806 	br	100070c4 <memset+0x174>
        {
          *aligned_addr++ = buffer;
100070a4:	e0bffb17 	ldw	r2,-20(fp)
100070a8:	10c00104 	addi	r3,r2,4
100070ac:	e0fffb15 	stw	r3,-20(fp)
100070b0:	e0fffa17 	ldw	r3,-24(fp)
100070b4:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
100070b8:	e0bfff17 	ldw	r2,-4(fp)
100070bc:	10bfff04 	addi	r2,r2,-4
100070c0:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
100070c4:	e0bfff17 	ldw	r2,-4(fp)
100070c8:	10800128 	cmpgeui	r2,r2,4
100070cc:	103ff51e 	bne	r2,zero,100070a4 <__alt_data_end+0xf80070a4>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
100070d0:	e0bffb17 	ldw	r2,-20(fp)
100070d4:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
100070d8:	00000506 	br	100070f0 <memset+0x1a0>
    *s++ = (char) c;
100070dc:	e0bff817 	ldw	r2,-32(fp)
100070e0:	10c00044 	addi	r3,r2,1
100070e4:	e0fff815 	stw	r3,-32(fp)
100070e8:	e0fffe17 	ldw	r3,-8(fp)
100070ec:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
100070f0:	e0bfff17 	ldw	r2,-4(fp)
100070f4:	10ffffc4 	addi	r3,r2,-1
100070f8:	e0ffff15 	stw	r3,-4(fp)
100070fc:	103ff71e 	bne	r2,zero,100070dc <__alt_data_end+0xf80070dc>
    *s++ = (char) c;

  return m;
10007100:	e0bffd17 	ldw	r2,-12(fp)
}
10007104:	e037883a 	mov	sp,fp
10007108:	df000017 	ldw	fp,0(sp)
1000710c:	dec00104 	addi	sp,sp,4
10007110:	f800283a 	ret

10007114 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
10007114:	defff804 	addi	sp,sp,-32
10007118:	dfc00515 	stw	ra,20(sp)
1000711c:	df000415 	stw	fp,16(sp)
10007120:	df000404 	addi	fp,sp,16
10007124:	e13ffe15 	stw	r4,-8(fp)
10007128:	e17fff15 	stw	r5,-4(fp)
1000712c:	e1800215 	stw	r6,8(fp)
10007130:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
10007134:	e0800204 	addi	r2,fp,8
10007138:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
1000713c:	e0bffe17 	ldw	r2,-8(fp)
10007140:	10800217 	ldw	r2,8(r2)
10007144:	e0fffd17 	ldw	r3,-12(fp)
10007148:	180f883a 	mov	r7,r3
1000714c:	e1bfff17 	ldw	r6,-4(fp)
10007150:	100b883a 	mov	r5,r2
10007154:	e13ffe17 	ldw	r4,-8(fp)
10007158:	0008e340 	call	10008e34 <___vfprintf_internal_r>
1000715c:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
10007160:	e0bffc17 	ldw	r2,-16(fp)
}
10007164:	e037883a 	mov	sp,fp
10007168:	dfc00117 	ldw	ra,4(sp)
1000716c:	df000017 	ldw	fp,0(sp)
10007170:	dec00404 	addi	sp,sp,16
10007174:	f800283a 	ret

10007178 <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
10007178:	defff704 	addi	sp,sp,-36
1000717c:	dfc00515 	stw	ra,20(sp)
10007180:	df000415 	stw	fp,16(sp)
10007184:	df000404 	addi	fp,sp,16
10007188:	e13fff15 	stw	r4,-4(fp)
1000718c:	e1400215 	stw	r5,8(fp)
10007190:	e1800315 	stw	r6,12(fp)
10007194:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
10007198:	008403b4 	movhi	r2,4110
1000719c:	10a44204 	addi	r2,r2,-28408
100071a0:	10800017 	ldw	r2,0(r2)
100071a4:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
100071a8:	e0800204 	addi	r2,fp,8
100071ac:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
100071b0:	008403b4 	movhi	r2,4110
100071b4:	10a44204 	addi	r2,r2,-28408
100071b8:	10800017 	ldw	r2,0(r2)
100071bc:	10800217 	ldw	r2,8(r2)
100071c0:	e0fffe17 	ldw	r3,-8(fp)
100071c4:	180d883a 	mov	r6,r3
100071c8:	e17fff17 	ldw	r5,-4(fp)
100071cc:	1009883a 	mov	r4,r2
100071d0:	0008ddc0 	call	10008ddc <__vfprintf_internal>
100071d4:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
100071d8:	e0bffd17 	ldw	r2,-12(fp)
}
100071dc:	e037883a 	mov	sp,fp
100071e0:	dfc00117 	ldw	ra,4(sp)
100071e4:	df000017 	ldw	fp,0(sp)
100071e8:	dec00504 	addi	sp,sp,20
100071ec:	f800283a 	ret

100071f0 <_putchar_r>:

int
_DEFUN(_putchar_r, (ptr, c),
       struct _reent *ptr _AND
       int c)
{
100071f0:	defffc04 	addi	sp,sp,-16
100071f4:	dfc00315 	stw	ra,12(sp)
100071f8:	df000215 	stw	fp,8(sp)
100071fc:	df000204 	addi	fp,sp,8
10007200:	e13ffe15 	stw	r4,-8(fp)
10007204:	e17fff15 	stw	r5,-4(fp)
  _REENT_SMALL_CHECK_INIT (ptr);
  return _putc_r (ptr, c, _stdout_r (ptr));
10007208:	e0bffe17 	ldw	r2,-8(fp)
1000720c:	10800217 	ldw	r2,8(r2)
10007210:	100d883a 	mov	r6,r2
10007214:	e17fff17 	ldw	r5,-4(fp)
10007218:	e13ffe17 	ldw	r4,-8(fp)
1000721c:	00110b00 	call	100110b0 <_putc_r>
}
10007220:	e037883a 	mov	sp,fp
10007224:	dfc00117 	ldw	ra,4(sp)
10007228:	df000017 	ldw	fp,0(sp)
1000722c:	dec00204 	addi	sp,sp,8
10007230:	f800283a 	ret

10007234 <putchar>:
#ifndef _REENT_ONLY

int
_DEFUN(putchar, (c),
       int c)
{
10007234:	defffc04 	addi	sp,sp,-16
10007238:	dfc00315 	stw	ra,12(sp)
1000723c:	df000215 	stw	fp,8(sp)
10007240:	df000204 	addi	fp,sp,8
10007244:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
10007248:	008403b4 	movhi	r2,4110
1000724c:	10a44204 	addi	r2,r2,-28408
10007250:	10800017 	ldw	r2,0(r2)
10007254:	e0bffe15 	stw	r2,-8(fp)

  _REENT_SMALL_CHECK_INIT (reent);
  return _putc_r (reent, c, _stdout_r (reent));
10007258:	e0bffe17 	ldw	r2,-8(fp)
1000725c:	10800217 	ldw	r2,8(r2)
10007260:	100d883a 	mov	r6,r2
10007264:	e17fff17 	ldw	r5,-4(fp)
10007268:	e13ffe17 	ldw	r4,-8(fp)
1000726c:	00110b00 	call	100110b0 <_putc_r>
}
10007270:	e037883a 	mov	sp,fp
10007274:	dfc00117 	ldw	ra,4(sp)
10007278:	df000017 	ldw	fp,0(sp)
1000727c:	dec00204 	addi	sp,sp,8
10007280:	f800283a 	ret

10007284 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
10007284:	defff104 	addi	sp,sp,-60
10007288:	dfc00e15 	stw	ra,56(sp)
1000728c:	df000d15 	stw	fp,52(sp)
10007290:	df000d04 	addi	fp,sp,52
10007294:	e13ffe15 	stw	r4,-8(fp)
10007298:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
1000729c:	e13fff17 	ldw	r4,-4(fp)
100072a0:	00088540 	call	10008854 <strlen>
100072a4:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
100072a8:	e0bfff17 	ldw	r2,-4(fp)
100072ac:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
100072b0:	e0bff317 	ldw	r2,-52(fp)
100072b4:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
100072b8:	00840374 	movhi	r2,4109
100072bc:	10bd0804 	addi	r2,r2,-3040
100072c0:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
100072c4:	00800044 	movi	r2,1
100072c8:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
100072cc:	e0bff317 	ldw	r2,-52(fp)
100072d0:	10800044 	addi	r2,r2,1
100072d4:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
100072d8:	e0bffa04 	addi	r2,fp,-24
100072dc:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
100072e0:	00800084 	movi	r2,2
100072e4:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
100072e8:	e0bffe17 	ldw	r2,-8(fp)
100072ec:	e0bff415 	stw	r2,-48(fp)
100072f0:	e0bff417 	ldw	r2,-48(fp)
100072f4:	10000526 	beq	r2,zero,1000730c <_puts_r+0x88>
100072f8:	e0bff417 	ldw	r2,-48(fp)
100072fc:	10800e17 	ldw	r2,56(r2)
10007300:	1000021e 	bne	r2,zero,1000730c <_puts_r+0x88>
10007304:	e13ff417 	ldw	r4,-48(fp)
10007308:	000db400 	call	1000db40 <__sinit>
  fp = _stdout_r (ptr);
1000730c:	e0bffe17 	ldw	r2,-8(fp)
10007310:	10800217 	ldw	r2,8(r2)
10007314:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
10007318:	e0bff517 	ldw	r2,-44(fp)
1000731c:	1080030b 	ldhu	r2,12(r2)
10007320:	10bfffcc 	andi	r2,r2,65535
10007324:	1088000c 	andi	r2,r2,8192
10007328:	10000c1e 	bne	r2,zero,1000735c <_puts_r+0xd8>
1000732c:	e0bff517 	ldw	r2,-44(fp)
10007330:	1080030b 	ldhu	r2,12(r2)
10007334:	10880014 	ori	r2,r2,8192
10007338:	1007883a 	mov	r3,r2
1000733c:	e0bff517 	ldw	r2,-44(fp)
10007340:	10c0030d 	sth	r3,12(r2)
10007344:	e0bff517 	ldw	r2,-44(fp)
10007348:	10c01917 	ldw	r3,100(r2)
1000734c:	00b7ffc4 	movi	r2,-8193
10007350:	1886703a 	and	r3,r3,r2
10007354:	e0bff517 	ldw	r2,-44(fp)
10007358:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
1000735c:	e0bff704 	addi	r2,fp,-36
10007360:	100d883a 	mov	r6,r2
10007364:	e17ff517 	ldw	r5,-44(fp)
10007368:	e13ffe17 	ldw	r4,-8(fp)
1000736c:	000e4b80 	call	1000e4b8 <__sfvwrite_r>
10007370:	10000226 	beq	r2,zero,1000737c <_puts_r+0xf8>
10007374:	00bfffc4 	movi	r2,-1
10007378:	00000106 	br	10007380 <_puts_r+0xfc>
1000737c:	00800284 	movi	r2,10
10007380:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
10007384:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
10007388:	e037883a 	mov	sp,fp
1000738c:	dfc00117 	ldw	ra,4(sp)
10007390:	df000017 	ldw	fp,0(sp)
10007394:	dec00204 	addi	sp,sp,8
10007398:	f800283a 	ret

1000739c <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
1000739c:	defffd04 	addi	sp,sp,-12
100073a0:	dfc00215 	stw	ra,8(sp)
100073a4:	df000115 	stw	fp,4(sp)
100073a8:	df000104 	addi	fp,sp,4
100073ac:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
100073b0:	008403b4 	movhi	r2,4110
100073b4:	10a44204 	addi	r2,r2,-28408
100073b8:	10800017 	ldw	r2,0(r2)
100073bc:	e17fff17 	ldw	r5,-4(fp)
100073c0:	1009883a 	mov	r4,r2
100073c4:	00072840 	call	10007284 <_puts_r>
}
100073c8:	e037883a 	mov	sp,fp
100073cc:	dfc00117 	ldw	ra,4(sp)
100073d0:	df000017 	ldw	fp,0(sp)
100073d4:	dec00204 	addi	sp,sp,8
100073d8:	f800283a 	ret

100073dc <__dorand48>:

void
_DEFUN (__dorand48, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
100073dc:	defff904 	addi	sp,sp,-28
100073e0:	dfc00615 	stw	ra,24(sp)
100073e4:	df000515 	stw	fp,20(sp)
100073e8:	dc000415 	stw	r16,16(sp)
100073ec:	df000504 	addi	fp,sp,20
100073f0:	e13ffd15 	stw	r4,-12(fp)
100073f4:	e17ffe15 	stw	r5,-8(fp)
  unsigned long accu;
  unsigned short temp[2];

  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
100073f8:	e0bffd17 	ldw	r2,-12(fp)
100073fc:	10802c8b 	ldhu	r2,178(r2)
10007400:	10ffffcc 	andi	r3,r2,65535
10007404:	e0bffe17 	ldw	r2,-8(fp)
10007408:	1080000b 	ldhu	r2,0(r2)
1000740c:	10bfffcc 	andi	r2,r2,65535
10007410:	100b883a 	mov	r5,r2
10007414:	1809883a 	mov	r4,r3
10007418:	00059d40 	call	100059d4 <__mulsi3>
1000741c:	1007883a 	mov	r3,r2
    (unsigned long) __rand48_add;
10007420:	e0bffd17 	ldw	r2,-12(fp)
10007424:	10802e0b 	ldhu	r2,184(r2)
10007428:	10bfffcc 	andi	r2,r2,65535
{
  unsigned long accu;
  unsigned short temp[2];

  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
1000742c:	1885883a 	add	r2,r3,r2
10007430:	e0bffb15 	stw	r2,-20(fp)
    (unsigned long) __rand48_add;
  temp[0] = (unsigned short) accu;     /* lower 16 bits */
10007434:	e0bffb17 	ldw	r2,-20(fp)
10007438:	e0bffc0d 	sth	r2,-16(fp)
  accu >>= sizeof(unsigned short) * 8;
1000743c:	e0bffb17 	ldw	r2,-20(fp)
10007440:	1004d43a 	srli	r2,r2,16
10007444:	e0bffb15 	stw	r2,-20(fp)
  accu += (unsigned long) __rand48_mult[0] * (unsigned long) xseed[1] +
10007448:	e0bffd17 	ldw	r2,-12(fp)
1000744c:	10802c8b 	ldhu	r2,178(r2)
10007450:	10ffffcc 	andi	r3,r2,65535
10007454:	e0bffe17 	ldw	r2,-8(fp)
10007458:	10800084 	addi	r2,r2,2
1000745c:	1080000b 	ldhu	r2,0(r2)
10007460:	10bfffcc 	andi	r2,r2,65535
10007464:	100b883a 	mov	r5,r2
10007468:	1809883a 	mov	r4,r3
1000746c:	00059d40 	call	100059d4 <__mulsi3>
10007470:	1021883a 	mov	r16,r2
    (unsigned long) __rand48_mult[1] * (unsigned long) xseed[0];
10007474:	e0bffd17 	ldw	r2,-12(fp)
10007478:	10802d0b 	ldhu	r2,180(r2)
1000747c:	10ffffcc 	andi	r3,r2,65535
10007480:	e0bffe17 	ldw	r2,-8(fp)
10007484:	1080000b 	ldhu	r2,0(r2)
10007488:	10bfffcc 	andi	r2,r2,65535
1000748c:	100b883a 	mov	r5,r2
10007490:	1809883a 	mov	r4,r3
10007494:	00059d40 	call	100059d4 <__mulsi3>
  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
    (unsigned long) __rand48_add;
  temp[0] = (unsigned short) accu;     /* lower 16 bits */
  accu >>= sizeof(unsigned short) * 8;
  accu += (unsigned long) __rand48_mult[0] * (unsigned long) xseed[1] +
10007498:	8085883a 	add	r2,r16,r2
1000749c:	e0fffb17 	ldw	r3,-20(fp)
100074a0:	1885883a 	add	r2,r3,r2
100074a4:	e0bffb15 	stw	r2,-20(fp)
    (unsigned long) __rand48_mult[1] * (unsigned long) xseed[0];
  temp[1] = (unsigned short) accu;     /* middle 16 bits */
100074a8:	e0bffb17 	ldw	r2,-20(fp)
100074ac:	e0bffc8d 	sth	r2,-14(fp)
  accu >>= sizeof(unsigned short) * 8;
100074b0:	e0bffb17 	ldw	r2,-20(fp)
100074b4:	1004d43a 	srli	r2,r2,16
100074b8:	e0bffb15 	stw	r2,-20(fp)
  accu += __rand48_mult[0] * xseed[2] + __rand48_mult[1] * xseed[1] + __rand48_mult[2] * xseed[0];
100074bc:	e0bffd17 	ldw	r2,-12(fp)
100074c0:	10802c8b 	ldhu	r2,178(r2)
100074c4:	10ffffcc 	andi	r3,r2,65535
100074c8:	e0bffe17 	ldw	r2,-8(fp)
100074cc:	10800104 	addi	r2,r2,4
100074d0:	1080000b 	ldhu	r2,0(r2)
100074d4:	10bfffcc 	andi	r2,r2,65535
100074d8:	100b883a 	mov	r5,r2
100074dc:	1809883a 	mov	r4,r3
100074e0:	00059d40 	call	100059d4 <__mulsi3>
100074e4:	1021883a 	mov	r16,r2
100074e8:	e0bffd17 	ldw	r2,-12(fp)
100074ec:	10802d0b 	ldhu	r2,180(r2)
100074f0:	10ffffcc 	andi	r3,r2,65535
100074f4:	e0bffe17 	ldw	r2,-8(fp)
100074f8:	10800084 	addi	r2,r2,2
100074fc:	1080000b 	ldhu	r2,0(r2)
10007500:	10bfffcc 	andi	r2,r2,65535
10007504:	100b883a 	mov	r5,r2
10007508:	1809883a 	mov	r4,r3
1000750c:	00059d40 	call	100059d4 <__mulsi3>
10007510:	80a1883a 	add	r16,r16,r2
10007514:	e0bffd17 	ldw	r2,-12(fp)
10007518:	10802d8b 	ldhu	r2,182(r2)
1000751c:	10ffffcc 	andi	r3,r2,65535
10007520:	e0bffe17 	ldw	r2,-8(fp)
10007524:	1080000b 	ldhu	r2,0(r2)
10007528:	10bfffcc 	andi	r2,r2,65535
1000752c:	100b883a 	mov	r5,r2
10007530:	1809883a 	mov	r4,r3
10007534:	00059d40 	call	100059d4 <__mulsi3>
10007538:	8085883a 	add	r2,r16,r2
1000753c:	1007883a 	mov	r3,r2
10007540:	e0bffb17 	ldw	r2,-20(fp)
10007544:	10c5883a 	add	r2,r2,r3
10007548:	e0bffb15 	stw	r2,-20(fp)
  xseed[0] = temp[0];
1000754c:	e0fffc0b 	ldhu	r3,-16(fp)
10007550:	e0bffe17 	ldw	r2,-8(fp)
10007554:	10c0000d 	sth	r3,0(r2)
  xseed[1] = temp[1];
10007558:	e0bffe17 	ldw	r2,-8(fp)
1000755c:	10800084 	addi	r2,r2,2
10007560:	e0fffc8b 	ldhu	r3,-14(fp)
10007564:	10c0000d 	sth	r3,0(r2)
  xseed[2] = (unsigned short) accu;
10007568:	e0bffe17 	ldw	r2,-8(fp)
1000756c:	10800104 	addi	r2,r2,4
10007570:	e0fffb17 	ldw	r3,-20(fp)
10007574:	10c0000d 	sth	r3,0(r2)
}
10007578:	0001883a 	nop
1000757c:	e6ffff04 	addi	sp,fp,-4
10007580:	dfc00217 	ldw	ra,8(sp)
10007584:	df000117 	ldw	fp,4(sp)
10007588:	dc000017 	ldw	r16,0(sp)
1000758c:	dec00304 	addi	sp,sp,12
10007590:	f800283a 	ret

10007594 <realloc>:

_PTR
_DEFUN (realloc, (ap, nbytes),
	_PTR ap _AND
	size_t nbytes)
{
10007594:	defffc04 	addi	sp,sp,-16
10007598:	dfc00315 	stw	ra,12(sp)
1000759c:	df000215 	stw	fp,8(sp)
100075a0:	df000204 	addi	fp,sp,8
100075a4:	e13ffe15 	stw	r4,-8(fp)
100075a8:	e17fff15 	stw	r5,-4(fp)
  return _realloc_r (_REENT, ap, nbytes);
100075ac:	008403b4 	movhi	r2,4110
100075b0:	10a44204 	addi	r2,r2,-28408
100075b4:	10800017 	ldw	r2,0(r2)
100075b8:	e1bfff17 	ldw	r6,-4(fp)
100075bc:	e17ffe17 	ldw	r5,-8(fp)
100075c0:	1009883a 	mov	r4,r2
100075c4:	00075dc0 	call	100075dc <_realloc_r>
}
100075c8:	e037883a 	mov	sp,fp
100075cc:	dfc00117 	ldw	ra,4(sp)
100075d0:	df000017 	ldw	fp,0(sp)
100075d4:	dec00204 	addi	sp,sp,8
100075d8:	f800283a 	ret

100075dc <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
100075dc:	deffe104 	addi	sp,sp,-124
100075e0:	dfc01e15 	stw	ra,120(sp)
100075e4:	df001d15 	stw	fp,116(sp)
100075e8:	df001d04 	addi	fp,sp,116
100075ec:	e13ffd15 	stw	r4,-12(fp)
100075f0:	e17ffe15 	stw	r5,-8(fp)
100075f4:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
100075f8:	e0bffe17 	ldw	r2,-8(fp)
100075fc:	1000041e 	bne	r2,zero,10007610 <_realloc_r+0x34>
10007600:	e17fff17 	ldw	r5,-4(fp)
10007604:	e13ffd17 	ldw	r4,-12(fp)
10007608:	00063d40 	call	100063d4 <_malloc_r>
1000760c:	0002ea06 	br	100081b8 <_realloc_r+0xbdc>

  MALLOC_LOCK;
10007610:	e13ffd17 	ldw	r4,-12(fp)
10007614:	0015d3c0 	call	10015d3c <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
10007618:	e0bffe17 	ldw	r2,-8(fp)
1000761c:	10bffe04 	addi	r2,r2,-8
10007620:	e0bfef15 	stw	r2,-68(fp)
10007624:	e0bfef17 	ldw	r2,-68(fp)
10007628:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
1000762c:	e0bfef17 	ldw	r2,-68(fp)
10007630:	10c00117 	ldw	r3,4(r2)
10007634:	00bfff04 	movi	r2,-4
10007638:	1884703a 	and	r2,r3,r2
1000763c:	e0bff015 	stw	r2,-64(fp)
10007640:	e0bff017 	ldw	r2,-64(fp)
10007644:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
10007648:	e0bfff17 	ldw	r2,-4(fp)
1000764c:	108002c4 	addi	r2,r2,11
10007650:	108005f0 	cmpltui	r2,r2,23
10007654:	1000051e 	bne	r2,zero,1000766c <_realloc_r+0x90>
10007658:	e0bfff17 	ldw	r2,-4(fp)
1000765c:	10c002c4 	addi	r3,r2,11
10007660:	00bffe04 	movi	r2,-8
10007664:	1884703a 	and	r2,r3,r2
10007668:	00000106 	br	10007670 <_realloc_r+0x94>
1000766c:	00800404 	movi	r2,16
10007670:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
10007674:	e0bff117 	ldw	r2,-60(fp)
10007678:	10000316 	blt	r2,zero,10007688 <_realloc_r+0xac>
1000767c:	e0fff117 	ldw	r3,-60(fp)
10007680:	e0bfff17 	ldw	r2,-4(fp)
10007684:	1880052e 	bgeu	r3,r2,1000769c <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
10007688:	e0bffd17 	ldw	r2,-12(fp)
1000768c:	00c00304 	movi	r3,12
10007690:	10c00015 	stw	r3,0(r2)
    return 0;
10007694:	0005883a 	mov	r2,zero
10007698:	0002c706 	br	100081b8 <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
1000769c:	e0fff017 	ldw	r3,-64(fp)
100076a0:	e0bff117 	ldw	r2,-60(fp)
100076a4:	18828b0e 	bge	r3,r2,100080d4 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
100076a8:	e0ffef17 	ldw	r3,-68(fp)
100076ac:	e0bff017 	ldw	r2,-64(fp)
100076b0:	1885883a 	add	r2,r3,r2
100076b4:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
100076b8:	00840374 	movhi	r2,4109
100076bc:	109e9004 	addi	r2,r2,31296
100076c0:	10c00217 	ldw	r3,8(r2)
100076c4:	e0bfe517 	ldw	r2,-108(fp)
100076c8:	18800926 	beq	r3,r2,100076f0 <_realloc_r+0x114>
100076cc:	e0bfe517 	ldw	r2,-108(fp)
100076d0:	10c00117 	ldw	r3,4(r2)
100076d4:	00bfff84 	movi	r2,-2
100076d8:	1884703a 	and	r2,r3,r2
100076dc:	e0ffe517 	ldw	r3,-108(fp)
100076e0:	1885883a 	add	r2,r3,r2
100076e4:	10800117 	ldw	r2,4(r2)
100076e8:	1080004c 	andi	r2,r2,1
100076ec:	1000461e 	bne	r2,zero,10007808 <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
100076f0:	e0bfe517 	ldw	r2,-108(fp)
100076f4:	10c00117 	ldw	r3,4(r2)
100076f8:	00bfff04 	movi	r2,-4
100076fc:	1884703a 	and	r2,r3,r2
10007700:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
10007704:	00840374 	movhi	r2,4109
10007708:	109e9004 	addi	r2,r2,31296
1000770c:	10c00217 	ldw	r3,8(r2)
10007710:	e0bfe517 	ldw	r2,-108(fp)
10007714:	1880251e 	bne	r3,r2,100077ac <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
10007718:	e0ffe617 	ldw	r3,-104(fp)
1000771c:	e0bfe417 	ldw	r2,-112(fp)
10007720:	1885883a 	add	r2,r3,r2
10007724:	1007883a 	mov	r3,r2
10007728:	e0bff117 	ldw	r2,-60(fp)
1000772c:	10800404 	addi	r2,r2,16
10007730:	18803816 	blt	r3,r2,10007814 <_realloc_r+0x238>
        {
          newsize += nextsize;
10007734:	e0ffe417 	ldw	r3,-112(fp)
10007738:	e0bfe617 	ldw	r2,-104(fp)
1000773c:	1885883a 	add	r2,r3,r2
10007740:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
10007744:	00840374 	movhi	r2,4109
10007748:	109e9004 	addi	r2,r2,31296
1000774c:	e13fef17 	ldw	r4,-68(fp)
10007750:	e0fff117 	ldw	r3,-60(fp)
10007754:	20c7883a 	add	r3,r4,r3
10007758:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
1000775c:	00840374 	movhi	r2,4109
10007760:	109e9004 	addi	r2,r2,31296
10007764:	10800217 	ldw	r2,8(r2)
10007768:	e13fe417 	ldw	r4,-112(fp)
1000776c:	e0fff117 	ldw	r3,-60(fp)
10007770:	20c7c83a 	sub	r3,r4,r3
10007774:	18c00054 	ori	r3,r3,1
10007778:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
1000777c:	e0bfef17 	ldw	r2,-68(fp)
10007780:	10800117 	ldw	r2,4(r2)
10007784:	10c0004c 	andi	r3,r2,1
10007788:	e0bff117 	ldw	r2,-60(fp)
1000778c:	1886b03a 	or	r3,r3,r2
10007790:	e0bfef17 	ldw	r2,-68(fp)
10007794:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
10007798:	e13ffd17 	ldw	r4,-12(fp)
1000779c:	0015d600 	call	10015d60 <__malloc_unlock>
          return chunk2mem(oldp);
100077a0:	e0bfef17 	ldw	r2,-68(fp)
100077a4:	10800204 	addi	r2,r2,8
100077a8:	00028306 	br	100081b8 <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
100077ac:	e0ffe617 	ldw	r3,-104(fp)
100077b0:	e0bfe417 	ldw	r2,-112(fp)
100077b4:	1885883a 	add	r2,r3,r2
100077b8:	1007883a 	mov	r3,r2
100077bc:	e0bff117 	ldw	r2,-60(fp)
100077c0:	18801416 	blt	r3,r2,10007814 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
100077c4:	e0bfe517 	ldw	r2,-108(fp)
100077c8:	10800317 	ldw	r2,12(r2)
100077cc:	e0bff215 	stw	r2,-56(fp)
100077d0:	e0bfe517 	ldw	r2,-108(fp)
100077d4:	10800217 	ldw	r2,8(r2)
100077d8:	e0bff315 	stw	r2,-52(fp)
100077dc:	e0bff317 	ldw	r2,-52(fp)
100077e0:	e0fff217 	ldw	r3,-56(fp)
100077e4:	10c00315 	stw	r3,12(r2)
100077e8:	e0bff217 	ldw	r2,-56(fp)
100077ec:	e0fff317 	ldw	r3,-52(fp)
100077f0:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
100077f4:	e0ffe417 	ldw	r3,-112(fp)
100077f8:	e0bfe617 	ldw	r2,-104(fp)
100077fc:	1885883a 	add	r2,r3,r2
10007800:	e0bfe415 	stw	r2,-112(fp)
        goto split;
10007804:	00023306 	br	100080d4 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
10007808:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
1000780c:	e03fe615 	stw	zero,-104(fp)
10007810:	00000106 	br	10007818 <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
10007814:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
10007818:	e0bfef17 	ldw	r2,-68(fp)
1000781c:	10800117 	ldw	r2,4(r2)
10007820:	1080004c 	andi	r2,r2,1
10007824:	1001a91e 	bne	r2,zero,10007ecc <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
10007828:	e0bfef17 	ldw	r2,-68(fp)
1000782c:	10800017 	ldw	r2,0(r2)
10007830:	0085c83a 	sub	r2,zero,r2
10007834:	e0ffef17 	ldw	r3,-68(fp)
10007838:	1885883a 	add	r2,r3,r2
1000783c:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
10007840:	e0bff417 	ldw	r2,-48(fp)
10007844:	10c00117 	ldw	r3,4(r2)
10007848:	00bfff04 	movi	r2,-4
1000784c:	1884703a 	and	r2,r3,r2
10007850:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
10007854:	e0bfe517 	ldw	r2,-108(fp)
10007858:	10012226 	beq	r2,zero,10007ce4 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
1000785c:	00840374 	movhi	r2,4109
10007860:	109e9004 	addi	r2,r2,31296
10007864:	10c00217 	ldw	r3,8(r2)
10007868:	e0bfe517 	ldw	r2,-108(fp)
1000786c:	1880951e 	bne	r3,r2,10007ac4 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
10007870:	e0ffe617 	ldw	r3,-104(fp)
10007874:	e0bff517 	ldw	r2,-44(fp)
10007878:	1887883a 	add	r3,r3,r2
1000787c:	e0bfe417 	ldw	r2,-112(fp)
10007880:	1885883a 	add	r2,r3,r2
10007884:	1007883a 	mov	r3,r2
10007888:	e0bff117 	ldw	r2,-60(fp)
1000788c:	10800404 	addi	r2,r2,16
10007890:	18811416 	blt	r3,r2,10007ce4 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
10007894:	e0bff417 	ldw	r2,-48(fp)
10007898:	10800317 	ldw	r2,12(r2)
1000789c:	e0bff215 	stw	r2,-56(fp)
100078a0:	e0bff417 	ldw	r2,-48(fp)
100078a4:	10800217 	ldw	r2,8(r2)
100078a8:	e0bff315 	stw	r2,-52(fp)
100078ac:	e0bff317 	ldw	r2,-52(fp)
100078b0:	e0fff217 	ldw	r3,-56(fp)
100078b4:	10c00315 	stw	r3,12(r2)
100078b8:	e0bff217 	ldw	r2,-56(fp)
100078bc:	e0fff317 	ldw	r3,-52(fp)
100078c0:	10c00215 	stw	r3,8(r2)
            newp = prev;
100078c4:	e0bff417 	ldw	r2,-48(fp)
100078c8:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
100078cc:	e0fff517 	ldw	r3,-44(fp)
100078d0:	e0bfe617 	ldw	r2,-104(fp)
100078d4:	1885883a 	add	r2,r3,r2
100078d8:	e0ffe417 	ldw	r3,-112(fp)
100078dc:	1885883a 	add	r2,r3,r2
100078e0:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
100078e4:	e0bfe317 	ldw	r2,-116(fp)
100078e8:	10800204 	addi	r2,r2,8
100078ec:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
100078f0:	e0bff017 	ldw	r2,-64(fp)
100078f4:	10bfff04 	addi	r2,r2,-4
100078f8:	e0bff715 	stw	r2,-36(fp)
100078fc:	e0bff717 	ldw	r2,-36(fp)
10007900:	10800968 	cmpgeui	r2,r2,37
10007904:	1000521e 	bne	r2,zero,10007a50 <_realloc_r+0x474>
10007908:	e0bffe17 	ldw	r2,-8(fp)
1000790c:	e0bfe715 	stw	r2,-100(fp)
10007910:	e0bff617 	ldw	r2,-40(fp)
10007914:	e0bfe815 	stw	r2,-96(fp)
10007918:	e0bff717 	ldw	r2,-36(fp)
1000791c:	10800530 	cmpltui	r2,r2,20
10007920:	1000361e 	bne	r2,zero,100079fc <_realloc_r+0x420>
10007924:	e0bfe817 	ldw	r2,-96(fp)
10007928:	10c00104 	addi	r3,r2,4
1000792c:	e0ffe815 	stw	r3,-96(fp)
10007930:	e0ffe717 	ldw	r3,-100(fp)
10007934:	19000104 	addi	r4,r3,4
10007938:	e13fe715 	stw	r4,-100(fp)
1000793c:	18c00017 	ldw	r3,0(r3)
10007940:	10c00015 	stw	r3,0(r2)
10007944:	e0bfe817 	ldw	r2,-96(fp)
10007948:	10c00104 	addi	r3,r2,4
1000794c:	e0ffe815 	stw	r3,-96(fp)
10007950:	e0ffe717 	ldw	r3,-100(fp)
10007954:	19000104 	addi	r4,r3,4
10007958:	e13fe715 	stw	r4,-100(fp)
1000795c:	18c00017 	ldw	r3,0(r3)
10007960:	10c00015 	stw	r3,0(r2)
10007964:	e0bff717 	ldw	r2,-36(fp)
10007968:	10800730 	cmpltui	r2,r2,28
1000796c:	1000231e 	bne	r2,zero,100079fc <_realloc_r+0x420>
10007970:	e0bfe817 	ldw	r2,-96(fp)
10007974:	10c00104 	addi	r3,r2,4
10007978:	e0ffe815 	stw	r3,-96(fp)
1000797c:	e0ffe717 	ldw	r3,-100(fp)
10007980:	19000104 	addi	r4,r3,4
10007984:	e13fe715 	stw	r4,-100(fp)
10007988:	18c00017 	ldw	r3,0(r3)
1000798c:	10c00015 	stw	r3,0(r2)
10007990:	e0bfe817 	ldw	r2,-96(fp)
10007994:	10c00104 	addi	r3,r2,4
10007998:	e0ffe815 	stw	r3,-96(fp)
1000799c:	e0ffe717 	ldw	r3,-100(fp)
100079a0:	19000104 	addi	r4,r3,4
100079a4:	e13fe715 	stw	r4,-100(fp)
100079a8:	18c00017 	ldw	r3,0(r3)
100079ac:	10c00015 	stw	r3,0(r2)
100079b0:	e0bff717 	ldw	r2,-36(fp)
100079b4:	10800930 	cmpltui	r2,r2,36
100079b8:	1000101e 	bne	r2,zero,100079fc <_realloc_r+0x420>
100079bc:	e0bfe817 	ldw	r2,-96(fp)
100079c0:	10c00104 	addi	r3,r2,4
100079c4:	e0ffe815 	stw	r3,-96(fp)
100079c8:	e0ffe717 	ldw	r3,-100(fp)
100079cc:	19000104 	addi	r4,r3,4
100079d0:	e13fe715 	stw	r4,-100(fp)
100079d4:	18c00017 	ldw	r3,0(r3)
100079d8:	10c00015 	stw	r3,0(r2)
100079dc:	e0bfe817 	ldw	r2,-96(fp)
100079e0:	10c00104 	addi	r3,r2,4
100079e4:	e0ffe815 	stw	r3,-96(fp)
100079e8:	e0ffe717 	ldw	r3,-100(fp)
100079ec:	19000104 	addi	r4,r3,4
100079f0:	e13fe715 	stw	r4,-100(fp)
100079f4:	18c00017 	ldw	r3,0(r3)
100079f8:	10c00015 	stw	r3,0(r2)
100079fc:	e0bfe817 	ldw	r2,-96(fp)
10007a00:	10c00104 	addi	r3,r2,4
10007a04:	e0ffe815 	stw	r3,-96(fp)
10007a08:	e0ffe717 	ldw	r3,-100(fp)
10007a0c:	19000104 	addi	r4,r3,4
10007a10:	e13fe715 	stw	r4,-100(fp)
10007a14:	18c00017 	ldw	r3,0(r3)
10007a18:	10c00015 	stw	r3,0(r2)
10007a1c:	e0bfe817 	ldw	r2,-96(fp)
10007a20:	10c00104 	addi	r3,r2,4
10007a24:	e0ffe815 	stw	r3,-96(fp)
10007a28:	e0ffe717 	ldw	r3,-100(fp)
10007a2c:	19000104 	addi	r4,r3,4
10007a30:	e13fe715 	stw	r4,-100(fp)
10007a34:	18c00017 	ldw	r3,0(r3)
10007a38:	10c00015 	stw	r3,0(r2)
10007a3c:	e0bfe717 	ldw	r2,-100(fp)
10007a40:	10c00017 	ldw	r3,0(r2)
10007a44:	e0bfe817 	ldw	r2,-96(fp)
10007a48:	10c00015 	stw	r3,0(r2)
10007a4c:	00000406 	br	10007a60 <_realloc_r+0x484>
10007a50:	e1bff717 	ldw	r6,-36(fp)
10007a54:	e17ffe17 	ldw	r5,-8(fp)
10007a58:	e13ff617 	ldw	r4,-40(fp)
10007a5c:	000f3f80 	call	1000f3f8 <memmove>
            top = chunk_at_offset(newp, nb);
10007a60:	00840374 	movhi	r2,4109
10007a64:	109e9004 	addi	r2,r2,31296
10007a68:	e13fe317 	ldw	r4,-116(fp)
10007a6c:	e0fff117 	ldw	r3,-60(fp)
10007a70:	20c7883a 	add	r3,r4,r3
10007a74:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
10007a78:	00840374 	movhi	r2,4109
10007a7c:	109e9004 	addi	r2,r2,31296
10007a80:	10800217 	ldw	r2,8(r2)
10007a84:	e13fe417 	ldw	r4,-112(fp)
10007a88:	e0fff117 	ldw	r3,-60(fp)
10007a8c:	20c7c83a 	sub	r3,r4,r3
10007a90:	18c00054 	ori	r3,r3,1
10007a94:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
10007a98:	e0bfe317 	ldw	r2,-116(fp)
10007a9c:	10800117 	ldw	r2,4(r2)
10007aa0:	10c0004c 	andi	r3,r2,1
10007aa4:	e0bff117 	ldw	r2,-60(fp)
10007aa8:	1886b03a 	or	r3,r3,r2
10007aac:	e0bfe317 	ldw	r2,-116(fp)
10007ab0:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
10007ab4:	e13ffd17 	ldw	r4,-12(fp)
10007ab8:	0015d600 	call	10015d60 <__malloc_unlock>
            return newmem;
10007abc:	e0bff617 	ldw	r2,-40(fp)
10007ac0:	0001bd06 	br	100081b8 <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
10007ac4:	e0ffe617 	ldw	r3,-104(fp)
10007ac8:	e0bff517 	ldw	r2,-44(fp)
10007acc:	1887883a 	add	r3,r3,r2
10007ad0:	e0bfe417 	ldw	r2,-112(fp)
10007ad4:	1885883a 	add	r2,r3,r2
10007ad8:	1007883a 	mov	r3,r2
10007adc:	e0bff117 	ldw	r2,-60(fp)
10007ae0:	18808016 	blt	r3,r2,10007ce4 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
10007ae4:	e0bfe517 	ldw	r2,-108(fp)
10007ae8:	10800317 	ldw	r2,12(r2)
10007aec:	e0bff215 	stw	r2,-56(fp)
10007af0:	e0bfe517 	ldw	r2,-108(fp)
10007af4:	10800217 	ldw	r2,8(r2)
10007af8:	e0bff315 	stw	r2,-52(fp)
10007afc:	e0bff317 	ldw	r2,-52(fp)
10007b00:	e0fff217 	ldw	r3,-56(fp)
10007b04:	10c00315 	stw	r3,12(r2)
10007b08:	e0bff217 	ldw	r2,-56(fp)
10007b0c:	e0fff317 	ldw	r3,-52(fp)
10007b10:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
10007b14:	e0bff417 	ldw	r2,-48(fp)
10007b18:	10800317 	ldw	r2,12(r2)
10007b1c:	e0bff215 	stw	r2,-56(fp)
10007b20:	e0bff417 	ldw	r2,-48(fp)
10007b24:	10800217 	ldw	r2,8(r2)
10007b28:	e0bff315 	stw	r2,-52(fp)
10007b2c:	e0bff317 	ldw	r2,-52(fp)
10007b30:	e0fff217 	ldw	r3,-56(fp)
10007b34:	10c00315 	stw	r3,12(r2)
10007b38:	e0bff217 	ldw	r2,-56(fp)
10007b3c:	e0fff317 	ldw	r3,-52(fp)
10007b40:	10c00215 	stw	r3,8(r2)
          newp = prev;
10007b44:	e0bff417 	ldw	r2,-48(fp)
10007b48:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
10007b4c:	e0ffe617 	ldw	r3,-104(fp)
10007b50:	e0bff517 	ldw	r2,-44(fp)
10007b54:	1885883a 	add	r2,r3,r2
10007b58:	e0ffe417 	ldw	r3,-112(fp)
10007b5c:	1885883a 	add	r2,r3,r2
10007b60:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
10007b64:	e0bfe317 	ldw	r2,-116(fp)
10007b68:	10800204 	addi	r2,r2,8
10007b6c:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007b70:	e0bff017 	ldw	r2,-64(fp)
10007b74:	10bfff04 	addi	r2,r2,-4
10007b78:	e0bff815 	stw	r2,-32(fp)
10007b7c:	e0bff817 	ldw	r2,-32(fp)
10007b80:	10800968 	cmpgeui	r2,r2,37
10007b84:	1000521e 	bne	r2,zero,10007cd0 <_realloc_r+0x6f4>
10007b88:	e0bffe17 	ldw	r2,-8(fp)
10007b8c:	e0bfe915 	stw	r2,-92(fp)
10007b90:	e0bff617 	ldw	r2,-40(fp)
10007b94:	e0bfea15 	stw	r2,-88(fp)
10007b98:	e0bff817 	ldw	r2,-32(fp)
10007b9c:	10800530 	cmpltui	r2,r2,20
10007ba0:	1000361e 	bne	r2,zero,10007c7c <_realloc_r+0x6a0>
10007ba4:	e0bfea17 	ldw	r2,-88(fp)
10007ba8:	10c00104 	addi	r3,r2,4
10007bac:	e0ffea15 	stw	r3,-88(fp)
10007bb0:	e0ffe917 	ldw	r3,-92(fp)
10007bb4:	19000104 	addi	r4,r3,4
10007bb8:	e13fe915 	stw	r4,-92(fp)
10007bbc:	18c00017 	ldw	r3,0(r3)
10007bc0:	10c00015 	stw	r3,0(r2)
10007bc4:	e0bfea17 	ldw	r2,-88(fp)
10007bc8:	10c00104 	addi	r3,r2,4
10007bcc:	e0ffea15 	stw	r3,-88(fp)
10007bd0:	e0ffe917 	ldw	r3,-92(fp)
10007bd4:	19000104 	addi	r4,r3,4
10007bd8:	e13fe915 	stw	r4,-92(fp)
10007bdc:	18c00017 	ldw	r3,0(r3)
10007be0:	10c00015 	stw	r3,0(r2)
10007be4:	e0bff817 	ldw	r2,-32(fp)
10007be8:	10800730 	cmpltui	r2,r2,28
10007bec:	1000231e 	bne	r2,zero,10007c7c <_realloc_r+0x6a0>
10007bf0:	e0bfea17 	ldw	r2,-88(fp)
10007bf4:	10c00104 	addi	r3,r2,4
10007bf8:	e0ffea15 	stw	r3,-88(fp)
10007bfc:	e0ffe917 	ldw	r3,-92(fp)
10007c00:	19000104 	addi	r4,r3,4
10007c04:	e13fe915 	stw	r4,-92(fp)
10007c08:	18c00017 	ldw	r3,0(r3)
10007c0c:	10c00015 	stw	r3,0(r2)
10007c10:	e0bfea17 	ldw	r2,-88(fp)
10007c14:	10c00104 	addi	r3,r2,4
10007c18:	e0ffea15 	stw	r3,-88(fp)
10007c1c:	e0ffe917 	ldw	r3,-92(fp)
10007c20:	19000104 	addi	r4,r3,4
10007c24:	e13fe915 	stw	r4,-92(fp)
10007c28:	18c00017 	ldw	r3,0(r3)
10007c2c:	10c00015 	stw	r3,0(r2)
10007c30:	e0bff817 	ldw	r2,-32(fp)
10007c34:	10800930 	cmpltui	r2,r2,36
10007c38:	1000101e 	bne	r2,zero,10007c7c <_realloc_r+0x6a0>
10007c3c:	e0bfea17 	ldw	r2,-88(fp)
10007c40:	10c00104 	addi	r3,r2,4
10007c44:	e0ffea15 	stw	r3,-88(fp)
10007c48:	e0ffe917 	ldw	r3,-92(fp)
10007c4c:	19000104 	addi	r4,r3,4
10007c50:	e13fe915 	stw	r4,-92(fp)
10007c54:	18c00017 	ldw	r3,0(r3)
10007c58:	10c00015 	stw	r3,0(r2)
10007c5c:	e0bfea17 	ldw	r2,-88(fp)
10007c60:	10c00104 	addi	r3,r2,4
10007c64:	e0ffea15 	stw	r3,-88(fp)
10007c68:	e0ffe917 	ldw	r3,-92(fp)
10007c6c:	19000104 	addi	r4,r3,4
10007c70:	e13fe915 	stw	r4,-92(fp)
10007c74:	18c00017 	ldw	r3,0(r3)
10007c78:	10c00015 	stw	r3,0(r2)
10007c7c:	e0bfea17 	ldw	r2,-88(fp)
10007c80:	10c00104 	addi	r3,r2,4
10007c84:	e0ffea15 	stw	r3,-88(fp)
10007c88:	e0ffe917 	ldw	r3,-92(fp)
10007c8c:	19000104 	addi	r4,r3,4
10007c90:	e13fe915 	stw	r4,-92(fp)
10007c94:	18c00017 	ldw	r3,0(r3)
10007c98:	10c00015 	stw	r3,0(r2)
10007c9c:	e0bfea17 	ldw	r2,-88(fp)
10007ca0:	10c00104 	addi	r3,r2,4
10007ca4:	e0ffea15 	stw	r3,-88(fp)
10007ca8:	e0ffe917 	ldw	r3,-92(fp)
10007cac:	19000104 	addi	r4,r3,4
10007cb0:	e13fe915 	stw	r4,-92(fp)
10007cb4:	18c00017 	ldw	r3,0(r3)
10007cb8:	10c00015 	stw	r3,0(r2)
10007cbc:	e0bfe917 	ldw	r2,-92(fp)
10007cc0:	10c00017 	ldw	r3,0(r2)
10007cc4:	e0bfea17 	ldw	r2,-88(fp)
10007cc8:	10c00015 	stw	r3,0(r2)
          goto split;
10007ccc:	00010106 	br	100080d4 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007cd0:	e1bff817 	ldw	r6,-32(fp)
10007cd4:	e17ffe17 	ldw	r5,-8(fp)
10007cd8:	e13ff617 	ldw	r4,-40(fp)
10007cdc:	000f3f80 	call	1000f3f8 <memmove>
          goto split;
10007ce0:	0000fc06 	br	100080d4 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
10007ce4:	e0bff417 	ldw	r2,-48(fp)
10007ce8:	10007826 	beq	r2,zero,10007ecc <_realloc_r+0x8f0>
10007cec:	e0fff517 	ldw	r3,-44(fp)
10007cf0:	e0bfe417 	ldw	r2,-112(fp)
10007cf4:	1885883a 	add	r2,r3,r2
10007cf8:	1007883a 	mov	r3,r2
10007cfc:	e0bff117 	ldw	r2,-60(fp)
10007d00:	18807216 	blt	r3,r2,10007ecc <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
10007d04:	e0bff417 	ldw	r2,-48(fp)
10007d08:	10800317 	ldw	r2,12(r2)
10007d0c:	e0bff215 	stw	r2,-56(fp)
10007d10:	e0bff417 	ldw	r2,-48(fp)
10007d14:	10800217 	ldw	r2,8(r2)
10007d18:	e0bff315 	stw	r2,-52(fp)
10007d1c:	e0bff317 	ldw	r2,-52(fp)
10007d20:	e0fff217 	ldw	r3,-56(fp)
10007d24:	10c00315 	stw	r3,12(r2)
10007d28:	e0bff217 	ldw	r2,-56(fp)
10007d2c:	e0fff317 	ldw	r3,-52(fp)
10007d30:	10c00215 	stw	r3,8(r2)
        newp = prev;
10007d34:	e0bff417 	ldw	r2,-48(fp)
10007d38:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
10007d3c:	e0ffe417 	ldw	r3,-112(fp)
10007d40:	e0bff517 	ldw	r2,-44(fp)
10007d44:	1885883a 	add	r2,r3,r2
10007d48:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
10007d4c:	e0bfe317 	ldw	r2,-116(fp)
10007d50:	10800204 	addi	r2,r2,8
10007d54:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007d58:	e0bff017 	ldw	r2,-64(fp)
10007d5c:	10bfff04 	addi	r2,r2,-4
10007d60:	e0bff915 	stw	r2,-28(fp)
10007d64:	e0bff917 	ldw	r2,-28(fp)
10007d68:	10800968 	cmpgeui	r2,r2,37
10007d6c:	1000521e 	bne	r2,zero,10007eb8 <_realloc_r+0x8dc>
10007d70:	e0bffe17 	ldw	r2,-8(fp)
10007d74:	e0bfeb15 	stw	r2,-84(fp)
10007d78:	e0bff617 	ldw	r2,-40(fp)
10007d7c:	e0bfec15 	stw	r2,-80(fp)
10007d80:	e0bff917 	ldw	r2,-28(fp)
10007d84:	10800530 	cmpltui	r2,r2,20
10007d88:	1000361e 	bne	r2,zero,10007e64 <_realloc_r+0x888>
10007d8c:	e0bfec17 	ldw	r2,-80(fp)
10007d90:	10c00104 	addi	r3,r2,4
10007d94:	e0ffec15 	stw	r3,-80(fp)
10007d98:	e0ffeb17 	ldw	r3,-84(fp)
10007d9c:	19000104 	addi	r4,r3,4
10007da0:	e13feb15 	stw	r4,-84(fp)
10007da4:	18c00017 	ldw	r3,0(r3)
10007da8:	10c00015 	stw	r3,0(r2)
10007dac:	e0bfec17 	ldw	r2,-80(fp)
10007db0:	10c00104 	addi	r3,r2,4
10007db4:	e0ffec15 	stw	r3,-80(fp)
10007db8:	e0ffeb17 	ldw	r3,-84(fp)
10007dbc:	19000104 	addi	r4,r3,4
10007dc0:	e13feb15 	stw	r4,-84(fp)
10007dc4:	18c00017 	ldw	r3,0(r3)
10007dc8:	10c00015 	stw	r3,0(r2)
10007dcc:	e0bff917 	ldw	r2,-28(fp)
10007dd0:	10800730 	cmpltui	r2,r2,28
10007dd4:	1000231e 	bne	r2,zero,10007e64 <_realloc_r+0x888>
10007dd8:	e0bfec17 	ldw	r2,-80(fp)
10007ddc:	10c00104 	addi	r3,r2,4
10007de0:	e0ffec15 	stw	r3,-80(fp)
10007de4:	e0ffeb17 	ldw	r3,-84(fp)
10007de8:	19000104 	addi	r4,r3,4
10007dec:	e13feb15 	stw	r4,-84(fp)
10007df0:	18c00017 	ldw	r3,0(r3)
10007df4:	10c00015 	stw	r3,0(r2)
10007df8:	e0bfec17 	ldw	r2,-80(fp)
10007dfc:	10c00104 	addi	r3,r2,4
10007e00:	e0ffec15 	stw	r3,-80(fp)
10007e04:	e0ffeb17 	ldw	r3,-84(fp)
10007e08:	19000104 	addi	r4,r3,4
10007e0c:	e13feb15 	stw	r4,-84(fp)
10007e10:	18c00017 	ldw	r3,0(r3)
10007e14:	10c00015 	stw	r3,0(r2)
10007e18:	e0bff917 	ldw	r2,-28(fp)
10007e1c:	10800930 	cmpltui	r2,r2,36
10007e20:	1000101e 	bne	r2,zero,10007e64 <_realloc_r+0x888>
10007e24:	e0bfec17 	ldw	r2,-80(fp)
10007e28:	10c00104 	addi	r3,r2,4
10007e2c:	e0ffec15 	stw	r3,-80(fp)
10007e30:	e0ffeb17 	ldw	r3,-84(fp)
10007e34:	19000104 	addi	r4,r3,4
10007e38:	e13feb15 	stw	r4,-84(fp)
10007e3c:	18c00017 	ldw	r3,0(r3)
10007e40:	10c00015 	stw	r3,0(r2)
10007e44:	e0bfec17 	ldw	r2,-80(fp)
10007e48:	10c00104 	addi	r3,r2,4
10007e4c:	e0ffec15 	stw	r3,-80(fp)
10007e50:	e0ffeb17 	ldw	r3,-84(fp)
10007e54:	19000104 	addi	r4,r3,4
10007e58:	e13feb15 	stw	r4,-84(fp)
10007e5c:	18c00017 	ldw	r3,0(r3)
10007e60:	10c00015 	stw	r3,0(r2)
10007e64:	e0bfec17 	ldw	r2,-80(fp)
10007e68:	10c00104 	addi	r3,r2,4
10007e6c:	e0ffec15 	stw	r3,-80(fp)
10007e70:	e0ffeb17 	ldw	r3,-84(fp)
10007e74:	19000104 	addi	r4,r3,4
10007e78:	e13feb15 	stw	r4,-84(fp)
10007e7c:	18c00017 	ldw	r3,0(r3)
10007e80:	10c00015 	stw	r3,0(r2)
10007e84:	e0bfec17 	ldw	r2,-80(fp)
10007e88:	10c00104 	addi	r3,r2,4
10007e8c:	e0ffec15 	stw	r3,-80(fp)
10007e90:	e0ffeb17 	ldw	r3,-84(fp)
10007e94:	19000104 	addi	r4,r3,4
10007e98:	e13feb15 	stw	r4,-84(fp)
10007e9c:	18c00017 	ldw	r3,0(r3)
10007ea0:	10c00015 	stw	r3,0(r2)
10007ea4:	e0bfeb17 	ldw	r2,-84(fp)
10007ea8:	10c00017 	ldw	r3,0(r2)
10007eac:	e0bfec17 	ldw	r2,-80(fp)
10007eb0:	10c00015 	stw	r3,0(r2)
        goto split;
10007eb4:	00008706 	br	100080d4 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007eb8:	e1bff917 	ldw	r6,-28(fp)
10007ebc:	e17ffe17 	ldw	r5,-8(fp)
10007ec0:	e13ff617 	ldw	r4,-40(fp)
10007ec4:	000f3f80 	call	1000f3f8 <memmove>
        goto split;
10007ec8:	00008206 	br	100080d4 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
10007ecc:	e17fff17 	ldw	r5,-4(fp)
10007ed0:	e13ffd17 	ldw	r4,-12(fp)
10007ed4:	00063d40 	call	100063d4 <_malloc_r>
10007ed8:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
10007edc:	e0bff617 	ldw	r2,-40(fp)
10007ee0:	1000041e 	bne	r2,zero,10007ef4 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
10007ee4:	e13ffd17 	ldw	r4,-12(fp)
10007ee8:	0015d600 	call	10015d60 <__malloc_unlock>
      return 0;
10007eec:	0005883a 	mov	r2,zero
10007ef0:	0000b106 	br	100081b8 <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
10007ef4:	e0bff617 	ldw	r2,-40(fp)
10007ef8:	10bffe04 	addi	r2,r2,-8
10007efc:	e0bfe315 	stw	r2,-116(fp)
10007f00:	e0bfef17 	ldw	r2,-68(fp)
10007f04:	10c00117 	ldw	r3,4(r2)
10007f08:	00bfff84 	movi	r2,-2
10007f0c:	1884703a 	and	r2,r3,r2
10007f10:	e0ffef17 	ldw	r3,-68(fp)
10007f14:	1885883a 	add	r2,r3,r2
10007f18:	e0ffe317 	ldw	r3,-116(fp)
10007f1c:	18800a1e 	bne	r3,r2,10007f48 <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
10007f20:	e0bfe317 	ldw	r2,-116(fp)
10007f24:	10c00117 	ldw	r3,4(r2)
10007f28:	00bfff04 	movi	r2,-4
10007f2c:	1884703a 	and	r2,r3,r2
10007f30:	e0ffe417 	ldw	r3,-112(fp)
10007f34:	1885883a 	add	r2,r3,r2
10007f38:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
10007f3c:	e0bfef17 	ldw	r2,-68(fp)
10007f40:	e0bfe315 	stw	r2,-116(fp)
      goto split;
10007f44:	00006306 	br	100080d4 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007f48:	e0bff017 	ldw	r2,-64(fp)
10007f4c:	10bfff04 	addi	r2,r2,-4
10007f50:	e0bffa15 	stw	r2,-24(fp)
10007f54:	e0bffa17 	ldw	r2,-24(fp)
10007f58:	10800968 	cmpgeui	r2,r2,37
10007f5c:	1000521e 	bne	r2,zero,100080a8 <_realloc_r+0xacc>
10007f60:	e0bffe17 	ldw	r2,-8(fp)
10007f64:	e0bfed15 	stw	r2,-76(fp)
10007f68:	e0bff617 	ldw	r2,-40(fp)
10007f6c:	e0bfee15 	stw	r2,-72(fp)
10007f70:	e0bffa17 	ldw	r2,-24(fp)
10007f74:	10800530 	cmpltui	r2,r2,20
10007f78:	1000361e 	bne	r2,zero,10008054 <_realloc_r+0xa78>
10007f7c:	e0bfee17 	ldw	r2,-72(fp)
10007f80:	10c00104 	addi	r3,r2,4
10007f84:	e0ffee15 	stw	r3,-72(fp)
10007f88:	e0ffed17 	ldw	r3,-76(fp)
10007f8c:	19000104 	addi	r4,r3,4
10007f90:	e13fed15 	stw	r4,-76(fp)
10007f94:	18c00017 	ldw	r3,0(r3)
10007f98:	10c00015 	stw	r3,0(r2)
10007f9c:	e0bfee17 	ldw	r2,-72(fp)
10007fa0:	10c00104 	addi	r3,r2,4
10007fa4:	e0ffee15 	stw	r3,-72(fp)
10007fa8:	e0ffed17 	ldw	r3,-76(fp)
10007fac:	19000104 	addi	r4,r3,4
10007fb0:	e13fed15 	stw	r4,-76(fp)
10007fb4:	18c00017 	ldw	r3,0(r3)
10007fb8:	10c00015 	stw	r3,0(r2)
10007fbc:	e0bffa17 	ldw	r2,-24(fp)
10007fc0:	10800730 	cmpltui	r2,r2,28
10007fc4:	1000231e 	bne	r2,zero,10008054 <_realloc_r+0xa78>
10007fc8:	e0bfee17 	ldw	r2,-72(fp)
10007fcc:	10c00104 	addi	r3,r2,4
10007fd0:	e0ffee15 	stw	r3,-72(fp)
10007fd4:	e0ffed17 	ldw	r3,-76(fp)
10007fd8:	19000104 	addi	r4,r3,4
10007fdc:	e13fed15 	stw	r4,-76(fp)
10007fe0:	18c00017 	ldw	r3,0(r3)
10007fe4:	10c00015 	stw	r3,0(r2)
10007fe8:	e0bfee17 	ldw	r2,-72(fp)
10007fec:	10c00104 	addi	r3,r2,4
10007ff0:	e0ffee15 	stw	r3,-72(fp)
10007ff4:	e0ffed17 	ldw	r3,-76(fp)
10007ff8:	19000104 	addi	r4,r3,4
10007ffc:	e13fed15 	stw	r4,-76(fp)
10008000:	18c00017 	ldw	r3,0(r3)
10008004:	10c00015 	stw	r3,0(r2)
10008008:	e0bffa17 	ldw	r2,-24(fp)
1000800c:	10800930 	cmpltui	r2,r2,36
10008010:	1000101e 	bne	r2,zero,10008054 <_realloc_r+0xa78>
10008014:	e0bfee17 	ldw	r2,-72(fp)
10008018:	10c00104 	addi	r3,r2,4
1000801c:	e0ffee15 	stw	r3,-72(fp)
10008020:	e0ffed17 	ldw	r3,-76(fp)
10008024:	19000104 	addi	r4,r3,4
10008028:	e13fed15 	stw	r4,-76(fp)
1000802c:	18c00017 	ldw	r3,0(r3)
10008030:	10c00015 	stw	r3,0(r2)
10008034:	e0bfee17 	ldw	r2,-72(fp)
10008038:	10c00104 	addi	r3,r2,4
1000803c:	e0ffee15 	stw	r3,-72(fp)
10008040:	e0ffed17 	ldw	r3,-76(fp)
10008044:	19000104 	addi	r4,r3,4
10008048:	e13fed15 	stw	r4,-76(fp)
1000804c:	18c00017 	ldw	r3,0(r3)
10008050:	10c00015 	stw	r3,0(r2)
10008054:	e0bfee17 	ldw	r2,-72(fp)
10008058:	10c00104 	addi	r3,r2,4
1000805c:	e0ffee15 	stw	r3,-72(fp)
10008060:	e0ffed17 	ldw	r3,-76(fp)
10008064:	19000104 	addi	r4,r3,4
10008068:	e13fed15 	stw	r4,-76(fp)
1000806c:	18c00017 	ldw	r3,0(r3)
10008070:	10c00015 	stw	r3,0(r2)
10008074:	e0bfee17 	ldw	r2,-72(fp)
10008078:	10c00104 	addi	r3,r2,4
1000807c:	e0ffee15 	stw	r3,-72(fp)
10008080:	e0ffed17 	ldw	r3,-76(fp)
10008084:	19000104 	addi	r4,r3,4
10008088:	e13fed15 	stw	r4,-76(fp)
1000808c:	18c00017 	ldw	r3,0(r3)
10008090:	10c00015 	stw	r3,0(r2)
10008094:	e0bfed17 	ldw	r2,-76(fp)
10008098:	10c00017 	ldw	r3,0(r2)
1000809c:	e0bfee17 	ldw	r2,-72(fp)
100080a0:	10c00015 	stw	r3,0(r2)
100080a4:	00000406 	br	100080b8 <_realloc_r+0xadc>
100080a8:	e1bffa17 	ldw	r6,-24(fp)
100080ac:	e17ffe17 	ldw	r5,-8(fp)
100080b0:	e13ff617 	ldw	r4,-40(fp)
100080b4:	000f3f80 	call	1000f3f8 <memmove>
    fREe(RCALL oldmem);
100080b8:	e17ffe17 	ldw	r5,-8(fp)
100080bc:	e13ffd17 	ldw	r4,-12(fp)
100080c0:	000dd700 	call	1000dd70 <_free_r>
    MALLOC_UNLOCK;
100080c4:	e13ffd17 	ldw	r4,-12(fp)
100080c8:	0015d600 	call	10015d60 <__malloc_unlock>
    return newmem;
100080cc:	e0bff617 	ldw	r2,-40(fp)
100080d0:	00003906 	br	100081b8 <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
100080d4:	e0ffe417 	ldw	r3,-112(fp)
100080d8:	e0bff117 	ldw	r2,-60(fp)
100080dc:	1885c83a 	sub	r2,r3,r2
100080e0:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
100080e4:	e0bffb17 	ldw	r2,-20(fp)
100080e8:	10800430 	cmpltui	r2,r2,16
100080ec:	10001e1e 	bne	r2,zero,10008168 <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
100080f0:	e0ffe317 	ldw	r3,-116(fp)
100080f4:	e0bff117 	ldw	r2,-60(fp)
100080f8:	1885883a 	add	r2,r3,r2
100080fc:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
10008100:	e0bfe317 	ldw	r2,-116(fp)
10008104:	10800117 	ldw	r2,4(r2)
10008108:	10c0004c 	andi	r3,r2,1
1000810c:	e0bff117 	ldw	r2,-60(fp)
10008110:	1886b03a 	or	r3,r3,r2
10008114:	e0bfe317 	ldw	r2,-116(fp)
10008118:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
1000811c:	e0bffb17 	ldw	r2,-20(fp)
10008120:	10c00054 	ori	r3,r2,1
10008124:	e0bffc17 	ldw	r2,-16(fp)
10008128:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
1000812c:	e0fffc17 	ldw	r3,-16(fp)
10008130:	e0bffb17 	ldw	r2,-20(fp)
10008134:	1885883a 	add	r2,r3,r2
10008138:	e13ffc17 	ldw	r4,-16(fp)
1000813c:	e0fffb17 	ldw	r3,-20(fp)
10008140:	20c7883a 	add	r3,r4,r3
10008144:	18c00117 	ldw	r3,4(r3)
10008148:	18c00054 	ori	r3,r3,1
1000814c:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
10008150:	e0bffc17 	ldw	r2,-16(fp)
10008154:	10800204 	addi	r2,r2,8
10008158:	100b883a 	mov	r5,r2
1000815c:	e13ffd17 	ldw	r4,-12(fp)
10008160:	000dd700 	call	1000dd70 <_free_r>
10008164:	00001006 	br	100081a8 <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
10008168:	e0bfe317 	ldw	r2,-116(fp)
1000816c:	10800117 	ldw	r2,4(r2)
10008170:	10c0004c 	andi	r3,r2,1
10008174:	e0bfe417 	ldw	r2,-112(fp)
10008178:	1886b03a 	or	r3,r3,r2
1000817c:	e0bfe317 	ldw	r2,-116(fp)
10008180:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
10008184:	e0ffe317 	ldw	r3,-116(fp)
10008188:	e0bfe417 	ldw	r2,-112(fp)
1000818c:	1885883a 	add	r2,r3,r2
10008190:	e13fe317 	ldw	r4,-116(fp)
10008194:	e0ffe417 	ldw	r3,-112(fp)
10008198:	20c7883a 	add	r3,r4,r3
1000819c:	18c00117 	ldw	r3,4(r3)
100081a0:	18c00054 	ori	r3,r3,1
100081a4:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
100081a8:	e13ffd17 	ldw	r4,-12(fp)
100081ac:	0015d600 	call	10015d60 <__malloc_unlock>
  return chunk2mem(newp);
100081b0:	e0bfe317 	ldw	r2,-116(fp)
100081b4:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
100081b8:	e037883a 	mov	sp,fp
100081bc:	dfc00117 	ldw	ra,4(sp)
100081c0:	df000017 	ldw	fp,0(sp)
100081c4:	dec00204 	addi	sp,sp,8
100081c8:	f800283a 	ret

100081cc <__srget_r>:

int
_DEFUN(__srget_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
100081cc:	defffb04 	addi	sp,sp,-20
100081d0:	dfc00415 	stw	ra,16(sp)
100081d4:	df000315 	stw	fp,12(sp)
100081d8:	dc000215 	stw	r16,8(sp)
100081dc:	df000304 	addi	fp,sp,12
100081e0:	e13ffe15 	stw	r4,-8(fp)
100081e4:	2821883a 	mov	r16,r5
  /* Ensure that any fake std stream is resolved before
     we call __srefill_r so we may access the true read buffer. */
  CHECK_INIT(ptr, fp);
100081e8:	e0bffe17 	ldw	r2,-8(fp)
100081ec:	e0bffd15 	stw	r2,-12(fp)
100081f0:	e0bffd17 	ldw	r2,-12(fp)
100081f4:	10000526 	beq	r2,zero,1000820c <__srget_r+0x40>
100081f8:	e0bffd17 	ldw	r2,-12(fp)
100081fc:	10800e17 	ldw	r2,56(r2)
10008200:	1000021e 	bne	r2,zero,1000820c <__srget_r+0x40>
10008204:	e13ffd17 	ldw	r4,-12(fp)
10008208:	000db400 	call	1000db40 <__sinit>

  if (__srefill_r (ptr, fp) == 0)
1000820c:	800b883a 	mov	r5,r16
10008210:	e13ffe17 	ldw	r4,-8(fp)
10008214:	00113140 	call	10011314 <__srefill_r>
10008218:	1000091e 	bne	r2,zero,10008240 <__srget_r+0x74>
    {
      fp->_r--;
1000821c:	80800117 	ldw	r2,4(r16)
10008220:	10bfffc4 	addi	r2,r2,-1
10008224:	80800115 	stw	r2,4(r16)
      return *fp->_p++;
10008228:	80800017 	ldw	r2,0(r16)
1000822c:	10c00044 	addi	r3,r2,1
10008230:	80c00015 	stw	r3,0(r16)
10008234:	10800003 	ldbu	r2,0(r2)
10008238:	10803fcc 	andi	r2,r2,255
1000823c:	00000106 	br	10008244 <__srget_r+0x78>
    }
  return EOF;
10008240:	00bfffc4 	movi	r2,-1
}
10008244:	e6ffff04 	addi	sp,fp,-4
10008248:	dfc00217 	ldw	ra,8(sp)
1000824c:	df000117 	ldw	fp,4(sp)
10008250:	dc000017 	ldw	r16,0(sp)
10008254:	dec00304 	addi	sp,sp,12
10008258:	f800283a 	ret

1000825c <__srget>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
_DEFUN(__srget, (fp),
       register FILE *fp)
{
1000825c:	defffe04 	addi	sp,sp,-8
10008260:	dfc00115 	stw	ra,4(sp)
10008264:	df000015 	stw	fp,0(sp)
10008268:	d839883a 	mov	fp,sp
1000826c:	2007883a 	mov	r3,r4
  return __srget_r (_REENT, fp);
10008270:	008403b4 	movhi	r2,4110
10008274:	10a44204 	addi	r2,r2,-28408
10008278:	10800017 	ldw	r2,0(r2)
1000827c:	180b883a 	mov	r5,r3
10008280:	1009883a 	mov	r4,r2
10008284:	00081cc0 	call	100081cc <__srget_r>
}
10008288:	e037883a 	mov	sp,fp
1000828c:	dfc00117 	ldw	ra,4(sp)
10008290:	df000017 	ldw	fp,0(sp)
10008294:	dec00204 	addi	sp,sp,8
10008298:	f800283a 	ret

1000829c <ldexp>:
	double ldexp(double value, int exp)
#else
	double ldexp(value, exp)
	double value; int exp;
#endif
{
1000829c:	defffb04 	addi	sp,sp,-20
100082a0:	dfc00415 	stw	ra,16(sp)
100082a4:	df000315 	stw	fp,12(sp)
100082a8:	df000304 	addi	fp,sp,12
100082ac:	e13ffd15 	stw	r4,-12(fp)
100082b0:	e17ffe15 	stw	r5,-8(fp)
100082b4:	e1bfff15 	stw	r6,-4(fp)
	if(!finite(value)||value==0.0) return value;
100082b8:	e13ffd17 	ldw	r4,-12(fp)
100082bc:	e17ffe17 	ldw	r5,-8(fp)
100082c0:	00116240 	call	10011624 <finite>
100082c4:	10000626 	beq	r2,zero,100082e0 <ldexp+0x44>
100082c8:	000d883a 	mov	r6,zero
100082cc:	000f883a 	mov	r7,zero
100082d0:	e13ffd17 	ldw	r4,-12(fp)
100082d4:	e17ffe17 	ldw	r5,-8(fp)
100082d8:	00151e40 	call	100151e4 <__eqdf2>
100082dc:	1000031e 	bne	r2,zero,100082ec <ldexp+0x50>
100082e0:	e0bffd17 	ldw	r2,-12(fp)
100082e4:	e0fffe17 	ldw	r3,-8(fp)
100082e8:	00001606 	br	10008344 <ldexp+0xa8>
	value = scalbn(value,exp);
100082ec:	e1bfff17 	ldw	r6,-4(fp)
100082f0:	e13ffd17 	ldw	r4,-12(fp)
100082f4:	e17ffe17 	ldw	r5,-8(fp)
100082f8:	00083680 	call	10008368 <scalbn>
100082fc:	e0bffd15 	stw	r2,-12(fp)
10008300:	e0fffe15 	stw	r3,-8(fp)
	if(!finite(value)||value==0.0) errno = ERANGE;
10008304:	e13ffd17 	ldw	r4,-12(fp)
10008308:	e17ffe17 	ldw	r5,-8(fp)
1000830c:	00116240 	call	10011624 <finite>
10008310:	10000626 	beq	r2,zero,1000832c <ldexp+0x90>
10008314:	000d883a 	mov	r6,zero
10008318:	000f883a 	mov	r7,zero
1000831c:	e13ffd17 	ldw	r4,-12(fp)
10008320:	e17ffe17 	ldw	r5,-8(fp)
10008324:	00151e40 	call	100151e4 <__eqdf2>
10008328:	1000041e 	bne	r2,zero,1000833c <ldexp+0xa0>
1000832c:	000d34c0 	call	1000d34c <__errno>
10008330:	1007883a 	mov	r3,r2
10008334:	00800884 	movi	r2,34
10008338:	18800015 	stw	r2,0(r3)
	return value;
1000833c:	e0bffd17 	ldw	r2,-12(fp)
10008340:	e0fffe17 	ldw	r3,-8(fp)
10008344:	1009883a 	mov	r4,r2
10008348:	180b883a 	mov	r5,r3
}
1000834c:	2005883a 	mov	r2,r4
10008350:	2807883a 	mov	r3,r5
10008354:	e037883a 	mov	sp,fp
10008358:	dfc00117 	ldw	ra,4(sp)
1000835c:	df000017 	ldw	fp,0(sp)
10008360:	dec00204 	addi	sp,sp,8
10008364:	f800283a 	ret

10008368 <scalbn>:
	double scalbn (double x, int n)
#else
	double scalbn (x,n)
	double x; int n;
#endif
{
10008368:	defff004 	addi	sp,sp,-64
1000836c:	dfc00f15 	stw	ra,60(sp)
10008370:	df000e15 	stw	fp,56(sp)
10008374:	df000e04 	addi	fp,sp,56
10008378:	e13ffd15 	stw	r4,-12(fp)
1000837c:	e17ffe15 	stw	r5,-8(fp)
10008380:	e1bfff15 	stw	r6,-4(fp)
	__int32_t  k,hx,lx;
	EXTRACT_WORDS(hx,lx,x);
10008384:	e0bffd17 	ldw	r2,-12(fp)
10008388:	e0bff515 	stw	r2,-44(fp)
1000838c:	e0bffe17 	ldw	r2,-8(fp)
10008390:	e0bff615 	stw	r2,-40(fp)
10008394:	e0bff617 	ldw	r2,-40(fp)
10008398:	e0bff315 	stw	r2,-52(fp)
1000839c:	e0bff517 	ldw	r2,-44(fp)
100083a0:	e0bff415 	stw	r2,-48(fp)
        k = (hx&0x7ff00000)>>20;		/* extract exponent */
100083a4:	e0bff317 	ldw	r2,-52(fp)
100083a8:	109ffc2c 	andhi	r2,r2,32752
100083ac:	1005d53a 	srai	r2,r2,20
100083b0:	e0bff215 	stw	r2,-56(fp)
        if (k==0) {				/* 0 or subnormal x */
100083b4:	e0bff217 	ldw	r2,-56(fp)
100083b8:	1000321e 	bne	r2,zero,10008484 <scalbn+0x11c>
            if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
100083bc:	e0fff317 	ldw	r3,-52(fp)
100083c0:	00a00034 	movhi	r2,32768
100083c4:	10bfffc4 	addi	r2,r2,-1
100083c8:	1886703a 	and	r3,r3,r2
100083cc:	e0bff417 	ldw	r2,-48(fp)
100083d0:	1884b03a 	or	r2,r3,r2
100083d4:	1000031e 	bne	r2,zero,100083e4 <scalbn+0x7c>
100083d8:	e0bffd17 	ldw	r2,-12(fp)
100083dc:	e0fffe17 	ldw	r3,-8(fp)
100083e0:	0000c206 	br	100086ec <scalbn+0x384>
	    x *= two54; 
100083e4:	0005883a 	mov	r2,zero
100083e8:	00d0d434 	movhi	r3,17232
100083ec:	100d883a 	mov	r6,r2
100083f0:	180f883a 	mov	r7,r3
100083f4:	e13ffd17 	ldw	r4,-12(fp)
100083f8:	e17ffe17 	ldw	r5,-8(fp)
100083fc:	00045540 	call	10004554 <__muldf3>
10008400:	1009883a 	mov	r4,r2
10008404:	180b883a 	mov	r5,r3
10008408:	e13ffd15 	stw	r4,-12(fp)
1000840c:	e17ffe15 	stw	r5,-8(fp)
	    GET_HIGH_WORD(hx,x);
10008410:	e0bffd17 	ldw	r2,-12(fp)
10008414:	e0bff715 	stw	r2,-36(fp)
10008418:	e0bffe17 	ldw	r2,-8(fp)
1000841c:	e0bff815 	stw	r2,-32(fp)
10008420:	e0bff817 	ldw	r2,-32(fp)
10008424:	e0bff315 	stw	r2,-52(fp)
	    k = ((hx&0x7ff00000)>>20) - 54; 
10008428:	e0bff317 	ldw	r2,-52(fp)
1000842c:	109ffc2c 	andhi	r2,r2,32752
10008430:	1005d53a 	srai	r2,r2,20
10008434:	10bff284 	addi	r2,r2,-54
10008438:	e0bff215 	stw	r2,-56(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
1000843c:	e0ffff17 	ldw	r3,-4(fp)
10008440:	00bffff4 	movhi	r2,65535
10008444:	108f2c04 	addi	r2,r2,15536
10008448:	18800e0e 	bge	r3,r2,10008484 <scalbn+0x11c>
1000844c:	00b0be74 	movhi	r2,49913
10008450:	10bcd644 	addi	r2,r2,-3239
10008454:	00c06974 	movhi	r3,421
10008458:	18db87c4 	addi	r3,r3,28191
1000845c:	e1bffd17 	ldw	r6,-12(fp)
10008460:	e1fffe17 	ldw	r7,-8(fp)
10008464:	1009883a 	mov	r4,r2
10008468:	180b883a 	mov	r5,r3
1000846c:	00045540 	call	10004554 <__muldf3>
10008470:	1009883a 	mov	r4,r2
10008474:	180b883a 	mov	r5,r3
10008478:	2005883a 	mov	r2,r4
1000847c:	2807883a 	mov	r3,r5
10008480:	00009a06 	br	100086ec <scalbn+0x384>
	    }
        if (k==0x7ff) return x+x;		/* NaN or Inf */
10008484:	e0bff217 	ldw	r2,-56(fp)
10008488:	1081ffd8 	cmpnei	r2,r2,2047
1000848c:	10000c1e 	bne	r2,zero,100084c0 <scalbn+0x158>
10008490:	e0bffd17 	ldw	r2,-12(fp)
10008494:	e0fffe17 	ldw	r3,-8(fp)
10008498:	100d883a 	mov	r6,r2
1000849c:	180f883a 	mov	r7,r3
100084a0:	1009883a 	mov	r4,r2
100084a4:	180b883a 	mov	r5,r3
100084a8:	0003bb40 	call	10003bb4 <__adddf3>
100084ac:	1009883a 	mov	r4,r2
100084b0:	180b883a 	mov	r5,r3
100084b4:	2005883a 	mov	r2,r4
100084b8:	2807883a 	mov	r3,r5
100084bc:	00008b06 	br	100086ec <scalbn+0x384>
        k = k+n; 
100084c0:	e0fff217 	ldw	r3,-56(fp)
100084c4:	e0bfff17 	ldw	r2,-4(fp)
100084c8:	1885883a 	add	r2,r3,r2
100084cc:	e0bff215 	stw	r2,-56(fp)
        if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
100084d0:	e0bff217 	ldw	r2,-56(fp)
100084d4:	1081ffd0 	cmplti	r2,r2,2047
100084d8:	1000191e 	bne	r2,zero,10008540 <scalbn+0x1d8>
100084dc:	00a20034 	movhi	r2,34816
100084e0:	109d6704 	addi	r2,r2,30108
100084e4:	00df8e34 	movhi	r3,32312
100084e8:	18f90f04 	addi	r3,r3,-7108
100084ec:	e1bffd17 	ldw	r6,-12(fp)
100084f0:	e1fffe17 	ldw	r7,-8(fp)
100084f4:	1009883a 	mov	r4,r2
100084f8:	180b883a 	mov	r5,r3
100084fc:	00115700 	call	10011570 <copysign>
10008500:	1011883a 	mov	r8,r2
10008504:	1813883a 	mov	r9,r3
10008508:	00a20034 	movhi	r2,34816
1000850c:	109d6704 	addi	r2,r2,30108
10008510:	00df8e34 	movhi	r3,32312
10008514:	18f90f04 	addi	r3,r3,-7108
10008518:	100d883a 	mov	r6,r2
1000851c:	180f883a 	mov	r7,r3
10008520:	4009883a 	mov	r4,r8
10008524:	480b883a 	mov	r5,r9
10008528:	00045540 	call	10004554 <__muldf3>
1000852c:	1009883a 	mov	r4,r2
10008530:	180b883a 	mov	r5,r3
10008534:	2005883a 	mov	r2,r4
10008538:	2807883a 	mov	r3,r5
1000853c:	00006b06 	br	100086ec <scalbn+0x384>
        if (k > 0) 				/* normal result */
10008540:	e0bff217 	ldw	r2,-56(fp)
10008544:	0080130e 	bge	zero,r2,10008594 <scalbn+0x22c>
	    {SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20)); return x;}
10008548:	e0bffd17 	ldw	r2,-12(fp)
1000854c:	e0bff915 	stw	r2,-28(fp)
10008550:	e0bffe17 	ldw	r2,-8(fp)
10008554:	e0bffa15 	stw	r2,-24(fp)
10008558:	e0fff317 	ldw	r3,-52(fp)
1000855c:	00a00434 	movhi	r2,32784
10008560:	10bfffc4 	addi	r2,r2,-1
10008564:	1884703a 	and	r2,r3,r2
10008568:	e0fff217 	ldw	r3,-56(fp)
1000856c:	1806953a 	slli	r3,r3,20
10008570:	10c4b03a 	or	r2,r2,r3
10008574:	e0bffa15 	stw	r2,-24(fp)
10008578:	e0bff917 	ldw	r2,-28(fp)
1000857c:	e0bffd15 	stw	r2,-12(fp)
10008580:	e0bffa17 	ldw	r2,-24(fp)
10008584:	e0bffe15 	stw	r2,-8(fp)
10008588:	e0bffd17 	ldw	r2,-12(fp)
1000858c:	e0fffe17 	ldw	r3,-8(fp)
10008590:	00005606 	br	100086ec <scalbn+0x384>
        if (k <= -54) {
10008594:	e0bff217 	ldw	r2,-56(fp)
10008598:	10bff2c8 	cmpgei	r2,r2,-53
1000859c:	1000351e 	bne	r2,zero,10008674 <scalbn+0x30c>
            if (n > 50000) 	/* in case integer overflow in n+k */
100085a0:	e0bfff17 	ldw	r2,-4(fp)
100085a4:	00f0d414 	movui	r3,50000
100085a8:	1880190e 	bge	r3,r2,10008610 <scalbn+0x2a8>
		return huge*copysign(huge,x);	/*overflow*/
100085ac:	00a20034 	movhi	r2,34816
100085b0:	109d6704 	addi	r2,r2,30108
100085b4:	00df8e34 	movhi	r3,32312
100085b8:	18f90f04 	addi	r3,r3,-7108
100085bc:	e1bffd17 	ldw	r6,-12(fp)
100085c0:	e1fffe17 	ldw	r7,-8(fp)
100085c4:	1009883a 	mov	r4,r2
100085c8:	180b883a 	mov	r5,r3
100085cc:	00115700 	call	10011570 <copysign>
100085d0:	1011883a 	mov	r8,r2
100085d4:	1813883a 	mov	r9,r3
100085d8:	00a20034 	movhi	r2,34816
100085dc:	109d6704 	addi	r2,r2,30108
100085e0:	00df8e34 	movhi	r3,32312
100085e4:	18f90f04 	addi	r3,r3,-7108
100085e8:	100d883a 	mov	r6,r2
100085ec:	180f883a 	mov	r7,r3
100085f0:	4009883a 	mov	r4,r8
100085f4:	480b883a 	mov	r5,r9
100085f8:	00045540 	call	10004554 <__muldf3>
100085fc:	1009883a 	mov	r4,r2
10008600:	180b883a 	mov	r5,r3
10008604:	2005883a 	mov	r2,r4
10008608:	2807883a 	mov	r3,r5
1000860c:	00003706 	br	100086ec <scalbn+0x384>
	    else return tiny*copysign(tiny,x); 	/*underflow*/
10008610:	00b0be74 	movhi	r2,49913
10008614:	10bcd644 	addi	r2,r2,-3239
10008618:	00c06974 	movhi	r3,421
1000861c:	18db87c4 	addi	r3,r3,28191
10008620:	e1bffd17 	ldw	r6,-12(fp)
10008624:	e1fffe17 	ldw	r7,-8(fp)
10008628:	1009883a 	mov	r4,r2
1000862c:	180b883a 	mov	r5,r3
10008630:	00115700 	call	10011570 <copysign>
10008634:	1011883a 	mov	r8,r2
10008638:	1813883a 	mov	r9,r3
1000863c:	00b0be74 	movhi	r2,49913
10008640:	10bcd644 	addi	r2,r2,-3239
10008644:	00c06974 	movhi	r3,421
10008648:	18db87c4 	addi	r3,r3,28191
1000864c:	100d883a 	mov	r6,r2
10008650:	180f883a 	mov	r7,r3
10008654:	4009883a 	mov	r4,r8
10008658:	480b883a 	mov	r5,r9
1000865c:	00045540 	call	10004554 <__muldf3>
10008660:	1009883a 	mov	r4,r2
10008664:	180b883a 	mov	r5,r3
10008668:	2005883a 	mov	r2,r4
1000866c:	2807883a 	mov	r3,r5
10008670:	00001e06 	br	100086ec <scalbn+0x384>
      }
        k += 54;				/* subnormal result */
10008674:	e0bff217 	ldw	r2,-56(fp)
10008678:	10800d84 	addi	r2,r2,54
1000867c:	e0bff215 	stw	r2,-56(fp)
	SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
10008680:	e0bffd17 	ldw	r2,-12(fp)
10008684:	e0bffb15 	stw	r2,-20(fp)
10008688:	e0bffe17 	ldw	r2,-8(fp)
1000868c:	e0bffc15 	stw	r2,-16(fp)
10008690:	e0fff317 	ldw	r3,-52(fp)
10008694:	00a00434 	movhi	r2,32784
10008698:	10bfffc4 	addi	r2,r2,-1
1000869c:	1884703a 	and	r2,r3,r2
100086a0:	e0fff217 	ldw	r3,-56(fp)
100086a4:	1806953a 	slli	r3,r3,20
100086a8:	10c4b03a 	or	r2,r2,r3
100086ac:	e0bffc15 	stw	r2,-16(fp)
100086b0:	e0bffb17 	ldw	r2,-20(fp)
100086b4:	e0bffd15 	stw	r2,-12(fp)
100086b8:	e0bffc17 	ldw	r2,-16(fp)
100086bc:	e0bffe15 	stw	r2,-8(fp)
        return x*twom54;
100086c0:	0005883a 	mov	r2,zero
100086c4:	00cf2434 	movhi	r3,15504
100086c8:	e1bffd17 	ldw	r6,-12(fp)
100086cc:	e1fffe17 	ldw	r7,-8(fp)
100086d0:	1009883a 	mov	r4,r2
100086d4:	180b883a 	mov	r5,r3
100086d8:	00045540 	call	10004554 <__muldf3>
100086dc:	1009883a 	mov	r4,r2
100086e0:	180b883a 	mov	r5,r3
100086e4:	2005883a 	mov	r2,r4
100086e8:	2807883a 	mov	r3,r5
100086ec:	1009883a 	mov	r4,r2
100086f0:	180b883a 	mov	r5,r3
}
100086f4:	2005883a 	mov	r2,r4
100086f8:	2807883a 	mov	r3,r5
100086fc:	e037883a 	mov	sp,fp
10008700:	dfc00117 	ldw	ra,4(sp)
10008704:	df000017 	ldw	fp,0(sp)
10008708:	dec00204 	addi	sp,sp,8
1000870c:	f800283a 	ret

10008710 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
10008710:	defffb04 	addi	sp,sp,-20
10008714:	dfc00415 	stw	ra,16(sp)
10008718:	df000315 	stw	fp,12(sp)
1000871c:	df000304 	addi	fp,sp,12
10008720:	e13ffe15 	stw	r4,-8(fp)
10008724:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
10008728:	008403b4 	movhi	r2,4110
1000872c:	108a9b04 	addi	r2,r2,10860
10008730:	10000015 	stw	zero,0(r2)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
10008734:	e13fff17 	ldw	r4,-4(fp)
10008738:	0015f5c0 	call	10015f5c <sbrk>
1000873c:	e0bffd15 	stw	r2,-12(fp)
10008740:	e0bffd17 	ldw	r2,-12(fp)
10008744:	10bfffd8 	cmpnei	r2,r2,-1
10008748:	1000091e 	bne	r2,zero,10008770 <_sbrk_r+0x60>
1000874c:	008403b4 	movhi	r2,4110
10008750:	108a9b04 	addi	r2,r2,10860
10008754:	10800017 	ldw	r2,0(r2)
10008758:	10000526 	beq	r2,zero,10008770 <_sbrk_r+0x60>
    ptr->_errno = errno;
1000875c:	008403b4 	movhi	r2,4110
10008760:	108a9b04 	addi	r2,r2,10860
10008764:	10c00017 	ldw	r3,0(r2)
10008768:	e0bffe17 	ldw	r2,-8(fp)
1000876c:	10c00015 	stw	r3,0(r2)
  return ret;
10008770:	e0bffd17 	ldw	r2,-12(fp)
}
10008774:	e037883a 	mov	sp,fp
10008778:	dfc00117 	ldw	ra,4(sp)
1000877c:	df000017 	ldw	fp,0(sp)
10008780:	dec00204 	addi	sp,sp,8
10008784:	f800283a 	ret

10008788 <_srand48_r>:

_VOID
_DEFUN (_srand48_r, (r, seed),
       struct _reent *r _AND
       long seed)
{
10008788:	defffd04 	addi	sp,sp,-12
1000878c:	df000215 	stw	fp,8(sp)
10008790:	df000204 	addi	fp,sp,8
10008794:	e13ffe15 	stw	r4,-8(fp)
10008798:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_RAND48(r);
  __rand48_seed[0] = _RAND48_SEED_0;
1000879c:	e0bffe17 	ldw	r2,-8(fp)
100087a0:	00ccc384 	movi	r3,13070
100087a4:	10c02b0d 	sth	r3,172(r2)
  __rand48_seed[1] = (unsigned short) seed;
100087a8:	e0bfff17 	ldw	r2,-4(fp)
100087ac:	1007883a 	mov	r3,r2
100087b0:	e0bffe17 	ldw	r2,-8(fp)
100087b4:	10c02b8d 	sth	r3,174(r2)
  __rand48_seed[2] = (unsigned short) ((unsigned long)seed >> 16);
100087b8:	e0bfff17 	ldw	r2,-4(fp)
100087bc:	1004d43a 	srli	r2,r2,16
100087c0:	1007883a 	mov	r3,r2
100087c4:	e0bffe17 	ldw	r2,-8(fp)
100087c8:	10c02c0d 	sth	r3,176(r2)
  __rand48_mult[0] = _RAND48_MULT_0;
100087cc:	e0bffe17 	ldw	r2,-8(fp)
100087d0:	00f99b44 	movi	r3,-6547
100087d4:	10c02c8d 	sth	r3,178(r2)
  __rand48_mult[1] = _RAND48_MULT_1;
100087d8:	e0bffe17 	ldw	r2,-8(fp)
100087dc:	00f7bb04 	movi	r3,-8468
100087e0:	10c02d0d 	sth	r3,180(r2)
  __rand48_mult[2] = _RAND48_MULT_2;
100087e4:	e0bffe17 	ldw	r2,-8(fp)
100087e8:	00c00144 	movi	r3,5
100087ec:	10c02d8d 	sth	r3,182(r2)
  __rand48_add = _RAND48_ADD;
100087f0:	e0bffe17 	ldw	r2,-8(fp)
100087f4:	00c002c4 	movi	r3,11
100087f8:	10c02e0d 	sth	r3,184(r2)
}
100087fc:	0001883a 	nop
10008800:	e037883a 	mov	sp,fp
10008804:	df000017 	ldw	fp,0(sp)
10008808:	dec00104 	addi	sp,sp,4
1000880c:	f800283a 	ret

10008810 <srand48>:

#ifndef _REENT_ONLY
_VOID
_DEFUN (srand48, (seed),
       long seed)
{
10008810:	defffd04 	addi	sp,sp,-12
10008814:	dfc00215 	stw	ra,8(sp)
10008818:	df000115 	stw	fp,4(sp)
1000881c:	df000104 	addi	fp,sp,4
10008820:	e13fff15 	stw	r4,-4(fp)
  _srand48_r (_REENT, seed);
10008824:	008403b4 	movhi	r2,4110
10008828:	10a44204 	addi	r2,r2,-28408
1000882c:	10800017 	ldw	r2,0(r2)
10008830:	e17fff17 	ldw	r5,-4(fp)
10008834:	1009883a 	mov	r4,r2
10008838:	00087880 	call	10008788 <_srand48_r>
}
1000883c:	0001883a 	nop
10008840:	e037883a 	mov	sp,fp
10008844:	dfc00117 	ldw	ra,4(sp)
10008848:	df000017 	ldw	fp,0(sp)
1000884c:	dec00204 	addi	sp,sp,8
10008850:	f800283a 	ret

10008854 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
10008854:	defffc04 	addi	sp,sp,-16
10008858:	df000315 	stw	fp,12(sp)
1000885c:	df000304 	addi	fp,sp,12
10008860:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
10008864:	e0bfff17 	ldw	r2,-4(fp)
10008868:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
1000886c:	00000d06 	br	100088a4 <strlen+0x50>
    {
      if (!*str)
10008870:	e0bfff17 	ldw	r2,-4(fp)
10008874:	10800003 	ldbu	r2,0(r2)
10008878:	10803fcc 	andi	r2,r2,255
1000887c:	1080201c 	xori	r2,r2,128
10008880:	10bfe004 	addi	r2,r2,-128
10008884:	1000041e 	bne	r2,zero,10008898 <strlen+0x44>
	return str - start;
10008888:	e0ffff17 	ldw	r3,-4(fp)
1000888c:	e0bffe17 	ldw	r2,-8(fp)
10008890:	1885c83a 	sub	r2,r3,r2
10008894:	00002806 	br	10008938 <strlen+0xe4>
      str++;
10008898:	e0bfff17 	ldw	r2,-4(fp)
1000889c:	10800044 	addi	r2,r2,1
100088a0:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
100088a4:	e0bfff17 	ldw	r2,-4(fp)
100088a8:	108000cc 	andi	r2,r2,3
100088ac:	103ff01e 	bne	r2,zero,10008870 <__alt_data_end+0xf8008870>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
100088b0:	e0bfff17 	ldw	r2,-4(fp)
100088b4:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
100088b8:	00000306 	br	100088c8 <strlen+0x74>
    aligned_addr++;
100088bc:	e0bffd17 	ldw	r2,-12(fp)
100088c0:	10800104 	addi	r2,r2,4
100088c4:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
100088c8:	e0bffd17 	ldw	r2,-12(fp)
100088cc:	10c00017 	ldw	r3,0(r2)
100088d0:	00bfbff4 	movhi	r2,65279
100088d4:	10bfbfc4 	addi	r2,r2,-257
100088d8:	1887883a 	add	r3,r3,r2
100088dc:	e0bffd17 	ldw	r2,-12(fp)
100088e0:	10800017 	ldw	r2,0(r2)
100088e4:	0084303a 	nor	r2,zero,r2
100088e8:	1886703a 	and	r3,r3,r2
100088ec:	00a02074 	movhi	r2,32897
100088f0:	10a02004 	addi	r2,r2,-32640
100088f4:	1884703a 	and	r2,r3,r2
100088f8:	103ff026 	beq	r2,zero,100088bc <__alt_data_end+0xf80088bc>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
100088fc:	e0bffd17 	ldw	r2,-12(fp)
10008900:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
10008904:	00000306 	br	10008914 <strlen+0xc0>
    str++;
10008908:	e0bfff17 	ldw	r2,-4(fp)
1000890c:	10800044 	addi	r2,r2,1
10008910:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
10008914:	e0bfff17 	ldw	r2,-4(fp)
10008918:	10800003 	ldbu	r2,0(r2)
1000891c:	10803fcc 	andi	r2,r2,255
10008920:	1080201c 	xori	r2,r2,128
10008924:	10bfe004 	addi	r2,r2,-128
10008928:	103ff71e 	bne	r2,zero,10008908 <__alt_data_end+0xf8008908>
    str++;
  return str - start;
1000892c:	e0ffff17 	ldw	r3,-4(fp)
10008930:	e0bffe17 	ldw	r2,-8(fp)
10008934:	1885c83a 	sub	r2,r3,r2
}
10008938:	e037883a 	mov	sp,fp
1000893c:	df000017 	ldw	fp,0(sp)
10008940:	dec00104 	addi	sp,sp,4
10008944:	f800283a 	ret

10008948 <_strtol_r>:
_DEFUN (_strtol_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
10008948:	defff304 	addi	sp,sp,-52
1000894c:	dfc00c15 	stw	ra,48(sp)
10008950:	df000b15 	stw	fp,44(sp)
10008954:	dd800a15 	stw	r22,40(sp)
10008958:	dd400915 	stw	r21,36(sp)
1000895c:	dd000815 	stw	r20,32(sp)
10008960:	dcc00715 	stw	r19,28(sp)
10008964:	dc800615 	stw	r18,24(sp)
10008968:	dc400515 	stw	r17,20(sp)
1000896c:	dc000415 	stw	r16,16(sp)
10008970:	df000b04 	addi	fp,sp,44
10008974:	e13ff515 	stw	r4,-44(fp)
10008978:	e17ff615 	stw	r5,-40(fp)
1000897c:	e1bff715 	stw	r6,-36(fp)
10008980:	e1fff815 	stw	r7,-32(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
10008984:	e47ff617 	ldw	r17,-40(fp)
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
10008988:	0029883a 	mov	r20,zero
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
1000898c:	8805883a 	mov	r2,r17
10008990:	14400044 	addi	r17,r2,1
10008994:	10800003 	ldbu	r2,0(r2)
10008998:	14003fcc 	andi	r16,r2,255
	} while (isspace(c));
1000899c:	008403b4 	movhi	r2,4110
100089a0:	10a44e04 	addi	r2,r2,-28360
100089a4:	10c00017 	ldw	r3,0(r2)
100089a8:	8005883a 	mov	r2,r16
100089ac:	10800044 	addi	r2,r2,1
100089b0:	1885883a 	add	r2,r3,r2
100089b4:	10800003 	ldbu	r2,0(r2)
100089b8:	10803fcc 	andi	r2,r2,255
100089bc:	1080020c 	andi	r2,r2,8
100089c0:	103ff21e 	bne	r2,zero,1000898c <__alt_data_end+0xf800898c>
	if (c == '-') {
100089c4:	80800b58 	cmpnei	r2,r16,45
100089c8:	1000061e 	bne	r2,zero,100089e4 <_strtol_r+0x9c>
		neg = 1;
100089cc:	05000044 	movi	r20,1
		c = *s++;
100089d0:	8805883a 	mov	r2,r17
100089d4:	14400044 	addi	r17,r2,1
100089d8:	10800003 	ldbu	r2,0(r2)
100089dc:	14003fcc 	andi	r16,r2,255
100089e0:	00000606 	br	100089fc <_strtol_r+0xb4>
	} else if (c == '+')
100089e4:	80800ad8 	cmpnei	r2,r16,43
100089e8:	1000041e 	bne	r2,zero,100089fc <_strtol_r+0xb4>
		c = *s++;
100089ec:	8805883a 	mov	r2,r17
100089f0:	14400044 	addi	r17,r2,1
100089f4:	10800003 	ldbu	r2,0(r2)
100089f8:	14003fcc 	andi	r16,r2,255
	if ((base == 0 || base == 16) &&
100089fc:	e0bff817 	ldw	r2,-32(fp)
10008a00:	10000326 	beq	r2,zero,10008a10 <_strtol_r+0xc8>
10008a04:	e0bff817 	ldw	r2,-32(fp)
10008a08:	10800418 	cmpnei	r2,r2,16
10008a0c:	1000101e 	bne	r2,zero,10008a50 <_strtol_r+0x108>
10008a10:	80800c18 	cmpnei	r2,r16,48
10008a14:	10000e1e 	bne	r2,zero,10008a50 <_strtol_r+0x108>
	    c == '0' && (*s == 'x' || *s == 'X')) {
10008a18:	88800003 	ldbu	r2,0(r17)
10008a1c:	10803fcc 	andi	r2,r2,255
10008a20:	10801e20 	cmpeqi	r2,r2,120
10008a24:	1000041e 	bne	r2,zero,10008a38 <_strtol_r+0xf0>
10008a28:	88800003 	ldbu	r2,0(r17)
10008a2c:	10803fcc 	andi	r2,r2,255
10008a30:	10801618 	cmpnei	r2,r2,88
10008a34:	1000061e 	bne	r2,zero,10008a50 <_strtol_r+0x108>
		c = s[1];
10008a38:	88800044 	addi	r2,r17,1
10008a3c:	10800003 	ldbu	r2,0(r2)
10008a40:	14003fcc 	andi	r16,r2,255
		s += 2;
10008a44:	8c400084 	addi	r17,r17,2
		base = 16;
10008a48:	00800404 	movi	r2,16
10008a4c:	e0bff815 	stw	r2,-32(fp)
	}
	if (base == 0)
10008a50:	e0bff817 	ldw	r2,-32(fp)
10008a54:	1000061e 	bne	r2,zero,10008a70 <_strtol_r+0x128>
		base = c == '0' ? 8 : 10;
10008a58:	80800c18 	cmpnei	r2,r16,48
10008a5c:	1000021e 	bne	r2,zero,10008a68 <_strtol_r+0x120>
10008a60:	00800204 	movi	r2,8
10008a64:	00000106 	br	10008a6c <_strtol_r+0x124>
10008a68:	00800284 	movi	r2,10
10008a6c:	e0bff815 	stw	r2,-32(fp)
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
10008a70:	a0000226 	beq	r20,zero,10008a7c <_strtol_r+0x134>
10008a74:	00a00034 	movhi	r2,32768
10008a78:	00000206 	br	10008a84 <_strtol_r+0x13c>
10008a7c:	00a00034 	movhi	r2,32768
10008a80:	10bfffc4 	addi	r2,r2,-1
10008a84:	102b883a 	mov	r21,r2
	cutlim = cutoff % (unsigned long)base;
10008a88:	e0bff817 	ldw	r2,-32(fp)
10008a8c:	100b883a 	mov	r5,r2
10008a90:	a809883a 	mov	r4,r21
10008a94:	00024c00 	call	100024c0 <__umodsi3>
10008a98:	102d883a 	mov	r22,r2
	cutoff /= (unsigned long)base;
10008a9c:	e0bff817 	ldw	r2,-32(fp)
10008aa0:	100b883a 	mov	r5,r2
10008aa4:	a809883a 	mov	r4,r21
10008aa8:	000245c0 	call	1000245c <__udivsi3>
10008aac:	102b883a 	mov	r21,r2
	for (acc = 0, any = 0;; c = *s++) {
10008ab0:	0025883a 	mov	r18,zero
10008ab4:	0027883a 	mov	r19,zero
		if (isdigit(c))
10008ab8:	008403b4 	movhi	r2,4110
10008abc:	10a44e04 	addi	r2,r2,-28360
10008ac0:	10c00017 	ldw	r3,0(r2)
10008ac4:	8005883a 	mov	r2,r16
10008ac8:	10800044 	addi	r2,r2,1
10008acc:	1885883a 	add	r2,r3,r2
10008ad0:	10800003 	ldbu	r2,0(r2)
10008ad4:	10803fcc 	andi	r2,r2,255
10008ad8:	1080010c 	andi	r2,r2,4
10008adc:	10000226 	beq	r2,zero,10008ae8 <_strtol_r+0x1a0>
			c -= '0';
10008ae0:	843ff404 	addi	r16,r16,-48
10008ae4:	00001906 	br	10008b4c <_strtol_r+0x204>
		else if (isalpha(c))
10008ae8:	008403b4 	movhi	r2,4110
10008aec:	10a44e04 	addi	r2,r2,-28360
10008af0:	10c00017 	ldw	r3,0(r2)
10008af4:	8005883a 	mov	r2,r16
10008af8:	10800044 	addi	r2,r2,1
10008afc:	1885883a 	add	r2,r3,r2
10008b00:	10800003 	ldbu	r2,0(r2)
10008b04:	10803fcc 	andi	r2,r2,255
10008b08:	108000cc 	andi	r2,r2,3
10008b0c:	10002426 	beq	r2,zero,10008ba0 <_strtol_r+0x258>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
10008b10:	008403b4 	movhi	r2,4110
10008b14:	10a44e04 	addi	r2,r2,-28360
10008b18:	10c00017 	ldw	r3,0(r2)
10008b1c:	8005883a 	mov	r2,r16
10008b20:	10800044 	addi	r2,r2,1
10008b24:	1885883a 	add	r2,r3,r2
10008b28:	10800003 	ldbu	r2,0(r2)
10008b2c:	10803fcc 	andi	r2,r2,255
10008b30:	108000cc 	andi	r2,r2,3
10008b34:	10800058 	cmpnei	r2,r2,1
10008b38:	1000021e 	bne	r2,zero,10008b44 <_strtol_r+0x1fc>
10008b3c:	00800dc4 	movi	r2,55
10008b40:	00000106 	br	10008b48 <_strtol_r+0x200>
10008b44:	008015c4 	movi	r2,87
10008b48:	80a1c83a 	sub	r16,r16,r2
		else
			break;
		if (c >= base)
10008b4c:	e0bff817 	ldw	r2,-32(fp)
10008b50:	8080150e 	bge	r16,r2,10008ba8 <_strtol_r+0x260>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
10008b54:	98000316 	blt	r19,zero,10008b64 <_strtol_r+0x21c>
10008b58:	ac800236 	bltu	r21,r18,10008b64 <_strtol_r+0x21c>
10008b5c:	9540031e 	bne	r18,r21,10008b6c <_strtol_r+0x224>
10008b60:	b400020e 	bge	r22,r16,10008b6c <_strtol_r+0x224>
			any = -1;
10008b64:	04ffffc4 	movi	r19,-1
10008b68:	00000806 	br	10008b8c <_strtol_r+0x244>
		else {
			any = 1;
10008b6c:	04c00044 	movi	r19,1
			acc *= base;
10008b70:	e0bff817 	ldw	r2,-32(fp)
10008b74:	100b883a 	mov	r5,r2
10008b78:	9009883a 	mov	r4,r18
10008b7c:	00059d40 	call	100059d4 <__mulsi3>
10008b80:	1025883a 	mov	r18,r2
			acc += c;
10008b84:	8005883a 	mov	r2,r16
10008b88:	90a5883a 	add	r18,r18,r2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
10008b8c:	8805883a 	mov	r2,r17
10008b90:	14400044 	addi	r17,r2,1
10008b94:	10800003 	ldbu	r2,0(r2)
10008b98:	14003fcc 	andi	r16,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
10008b9c:	003fc606 	br	10008ab8 <__alt_data_end+0xf8008ab8>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
10008ba0:	0001883a 	nop
10008ba4:	00000106 	br	10008bac <_strtol_r+0x264>
		if (c >= base)
			break;
10008ba8:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
10008bac:	98000a0e 	bge	r19,zero,10008bd8 <_strtol_r+0x290>
		acc = neg ? LONG_MIN : LONG_MAX;
10008bb0:	a0000226 	beq	r20,zero,10008bbc <_strtol_r+0x274>
10008bb4:	00a00034 	movhi	r2,32768
10008bb8:	00000206 	br	10008bc4 <_strtol_r+0x27c>
10008bbc:	00a00034 	movhi	r2,32768
10008bc0:	10bfffc4 	addi	r2,r2,-1
10008bc4:	1025883a 	mov	r18,r2
		rptr->_errno = ERANGE;
10008bc8:	e0bff517 	ldw	r2,-44(fp)
10008bcc:	00c00884 	movi	r3,34
10008bd0:	10c00015 	stw	r3,0(r2)
10008bd4:	00000206 	br	10008be0 <_strtol_r+0x298>
	} else if (neg)
10008bd8:	a0000126 	beq	r20,zero,10008be0 <_strtol_r+0x298>
		acc = -acc;
10008bdc:	04a5c83a 	sub	r18,zero,r18
	if (endptr != 0)
10008be0:	e0bff717 	ldw	r2,-36(fp)
10008be4:	10000626 	beq	r2,zero,10008c00 <_strtol_r+0x2b8>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
10008be8:	98000226 	beq	r19,zero,10008bf4 <_strtol_r+0x2ac>
10008bec:	88bfffc4 	addi	r2,r17,-1
10008bf0:	00000106 	br	10008bf8 <_strtol_r+0x2b0>
10008bf4:	e0bff617 	ldw	r2,-40(fp)
10008bf8:	e0fff717 	ldw	r3,-36(fp)
10008bfc:	18800015 	stw	r2,0(r3)
	return (acc);
10008c00:	9005883a 	mov	r2,r18
}
10008c04:	e6fff904 	addi	sp,fp,-28
10008c08:	dfc00817 	ldw	ra,32(sp)
10008c0c:	df000717 	ldw	fp,28(sp)
10008c10:	dd800617 	ldw	r22,24(sp)
10008c14:	dd400517 	ldw	r21,20(sp)
10008c18:	dd000417 	ldw	r20,16(sp)
10008c1c:	dcc00317 	ldw	r19,12(sp)
10008c20:	dc800217 	ldw	r18,8(sp)
10008c24:	dc400117 	ldw	r17,4(sp)
10008c28:	dc000017 	ldw	r16,0(sp)
10008c2c:	dec00904 	addi	sp,sp,36
10008c30:	f800283a 	ret

10008c34 <strtol>:
long
_DEFUN (strtol, (s, ptr, base),
	_CONST char *__restrict s _AND
	char **__restrict ptr _AND
	int base)
{
10008c34:	defffb04 	addi	sp,sp,-20
10008c38:	dfc00415 	stw	ra,16(sp)
10008c3c:	df000315 	stw	fp,12(sp)
10008c40:	df000304 	addi	fp,sp,12
10008c44:	e13ffd15 	stw	r4,-12(fp)
10008c48:	e17ffe15 	stw	r5,-8(fp)
10008c4c:	e1bfff15 	stw	r6,-4(fp)
	return _strtol_r (_REENT, s, ptr, base);
10008c50:	008403b4 	movhi	r2,4110
10008c54:	10a44204 	addi	r2,r2,-28408
10008c58:	10800017 	ldw	r2,0(r2)
10008c5c:	e1ffff17 	ldw	r7,-4(fp)
10008c60:	e1bffe17 	ldw	r6,-8(fp)
10008c64:	e17ffd17 	ldw	r5,-12(fp)
10008c68:	1009883a 	mov	r4,r2
10008c6c:	00089480 	call	10008948 <_strtol_r>
}
10008c70:	e037883a 	mov	sp,fp
10008c74:	dfc00117 	ldw	ra,4(sp)
10008c78:	df000017 	ldw	fp,0(sp)
10008c7c:	dec00204 	addi	sp,sp,8
10008c80:	f800283a 	ret

10008c84 <time>:
#include <sys/time.h>

time_t
_DEFUN (time, (t),
	time_t * t)
{
10008c84:	defffb04 	addi	sp,sp,-20
10008c88:	dfc00415 	stw	ra,16(sp)
10008c8c:	df000315 	stw	fp,12(sp)
10008c90:	df000304 	addi	fp,sp,12
10008c94:	e13fff15 	stw	r4,-4(fp)
  struct timeval now;

  if (_gettimeofday_r (_REENT, &now, NULL) >= 0)
10008c98:	008403b4 	movhi	r2,4110
10008c9c:	10a44204 	addi	r2,r2,-28408
10008ca0:	10800017 	ldw	r2,0(r2)
10008ca4:	000d883a 	mov	r6,zero
10008ca8:	e17ffd04 	addi	r5,fp,-12
10008cac:	1009883a 	mov	r4,r2
10008cb0:	000ec540 	call	1000ec54 <_gettimeofday_r>
10008cb4:	10000716 	blt	r2,zero,10008cd4 <time+0x50>
    {
      if (t)
10008cb8:	e0bfff17 	ldw	r2,-4(fp)
10008cbc:	10000326 	beq	r2,zero,10008ccc <time+0x48>
	*t = now.tv_sec;
10008cc0:	e0fffd17 	ldw	r3,-12(fp)
10008cc4:	e0bfff17 	ldw	r2,-4(fp)
10008cc8:	10c00015 	stw	r3,0(r2)
      return now.tv_sec;
10008ccc:	e0bffd17 	ldw	r2,-12(fp)
10008cd0:	00000106 	br	10008cd8 <time+0x54>
    }
  return -1;
10008cd4:	00bfffc4 	movi	r2,-1
}
10008cd8:	e037883a 	mov	sp,fp
10008cdc:	dfc00117 	ldw	ra,4(sp)
10008ce0:	df000017 	ldw	fp,0(sp)
10008ce4:	dec00204 	addi	sp,sp,8
10008ce8:	f800283a 	ret

10008cec <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
10008cec:	defedf04 	addi	sp,sp,-1156
10008cf0:	dfc12015 	stw	ra,1152(sp)
10008cf4:	df011f15 	stw	fp,1148(sp)
10008cf8:	dc011e15 	stw	r16,1144(sp)
10008cfc:	df011f04 	addi	fp,sp,1148
10008d00:	e13ffc15 	stw	r4,-16(fp)
10008d04:	2821883a 	mov	r16,r5
10008d08:	e1bffd15 	stw	r6,-12(fp)
10008d0c:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
10008d10:	80c0030b 	ldhu	r3,12(r16)
10008d14:	00bfff44 	movi	r2,-3
10008d18:	1884703a 	and	r2,r3,r2
10008d1c:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
10008d20:	80801917 	ldw	r2,100(r16)
10008d24:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
10008d28:	8080038b 	ldhu	r2,14(r16)
10008d2c:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
10008d30:	80800717 	ldw	r2,28(r16)
10008d34:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
10008d38:	80800917 	ldw	r2,36(r16)
10008d3c:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
10008d40:	e0befc04 	addi	r2,fp,-1040
10008d44:	e0bee215 	stw	r2,-1144(fp)
10008d48:	e0bee217 	ldw	r2,-1144(fp)
10008d4c:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
10008d50:	00810004 	movi	r2,1024
10008d54:	e0bee415 	stw	r2,-1136(fp)
10008d58:	e0bee417 	ldw	r2,-1136(fp)
10008d5c:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
10008d60:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
10008d64:	e0bee204 	addi	r2,fp,-1144
10008d68:	e1fffe17 	ldw	r7,-8(fp)
10008d6c:	e1bffd17 	ldw	r6,-12(fp)
10008d70:	100b883a 	mov	r5,r2
10008d74:	e13ffc17 	ldw	r4,-16(fp)
10008d78:	0008e340 	call	10008e34 <___vfprintf_internal_r>
10008d7c:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
10008d80:	e0bee117 	ldw	r2,-1148(fp)
10008d84:	10000716 	blt	r2,zero,10008da4 <__sbprintf+0xb8>
10008d88:	e0bee204 	addi	r2,fp,-1144
10008d8c:	100b883a 	mov	r5,r2
10008d90:	e13ffc17 	ldw	r4,-16(fp)
10008d94:	000d6780 	call	1000d678 <_fflush_r>
10008d98:	10000226 	beq	r2,zero,10008da4 <__sbprintf+0xb8>
		ret = EOF;
10008d9c:	00bfffc4 	movi	r2,-1
10008da0:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
10008da4:	e0bee50b 	ldhu	r2,-1132(fp)
10008da8:	10bfffcc 	andi	r2,r2,65535
10008dac:	1080100c 	andi	r2,r2,64
10008db0:	10000326 	beq	r2,zero,10008dc0 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
10008db4:	8080030b 	ldhu	r2,12(r16)
10008db8:	10801014 	ori	r2,r2,64
10008dbc:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
10008dc0:	e0bee117 	ldw	r2,-1148(fp)
}
10008dc4:	e6ffff04 	addi	sp,fp,-4
10008dc8:	dfc00217 	ldw	ra,8(sp)
10008dcc:	df000117 	ldw	fp,4(sp)
10008dd0:	dc000017 	ldw	r16,0(sp)
10008dd4:	dec00304 	addi	sp,sp,12
10008dd8:	f800283a 	ret

10008ddc <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
10008ddc:	defffa04 	addi	sp,sp,-24
10008de0:	dfc00515 	stw	ra,20(sp)
10008de4:	df000415 	stw	fp,16(sp)
10008de8:	df000404 	addi	fp,sp,16
10008dec:	e13ffd15 	stw	r4,-12(fp)
10008df0:	e17ffe15 	stw	r5,-8(fp)
10008df4:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
10008df8:	008403b4 	movhi	r2,4110
10008dfc:	10a44204 	addi	r2,r2,-28408
10008e00:	10800017 	ldw	r2,0(r2)
10008e04:	e1ffff17 	ldw	r7,-4(fp)
10008e08:	e1bffe17 	ldw	r6,-8(fp)
10008e0c:	e17ffd17 	ldw	r5,-12(fp)
10008e10:	1009883a 	mov	r4,r2
10008e14:	0008e340 	call	10008e34 <___vfprintf_internal_r>
10008e18:	e0bffc15 	stw	r2,-16(fp)
  return result;
10008e1c:	e0bffc17 	ldw	r2,-16(fp)
}
10008e20:	e037883a 	mov	sp,fp
10008e24:	dfc00117 	ldw	ra,4(sp)
10008e28:	df000017 	ldw	fp,0(sp)
10008e2c:	dec00204 	addi	sp,sp,8
10008e30:	f800283a 	ret

10008e34 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
10008e34:	deffa404 	addi	sp,sp,-368
10008e38:	dfc05b15 	stw	ra,364(sp)
10008e3c:	df005a15 	stw	fp,360(sp)
10008e40:	ddc05915 	stw	r23,356(sp)
10008e44:	dd805815 	stw	r22,352(sp)
10008e48:	dd405715 	stw	r21,348(sp)
10008e4c:	dd005615 	stw	r20,344(sp)
10008e50:	dcc05515 	stw	r19,340(sp)
10008e54:	dc805415 	stw	r18,336(sp)
10008e58:	dc405315 	stw	r17,332(sp)
10008e5c:	dc005215 	stw	r16,328(sp)
10008e60:	df005a04 	addi	fp,sp,360
10008e64:	e13fe615 	stw	r4,-104(fp)
10008e68:	e17fe715 	stw	r5,-100(fp)
10008e6c:	e1bfe815 	stw	r6,-96(fp)
10008e70:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
10008e74:	e13fe617 	ldw	r4,-104(fp)
10008e78:	000ede00 	call	1000ede0 <_localeconv_r>
10008e7c:	10800017 	ldw	r2,0(r2)
10008e80:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
10008e84:	e13fbb17 	ldw	r4,-276(fp)
10008e88:	00088540 	call	10008854 <strlen>
10008e8c:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
10008e90:	e03fc215 	stw	zero,-248(fp)
10008e94:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
10008e98:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
10008e9c:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
10008ea0:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
10008ea4:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
10008ea8:	e0bfe617 	ldw	r2,-104(fp)
10008eac:	e0bfbd15 	stw	r2,-268(fp)
10008eb0:	e0bfbd17 	ldw	r2,-268(fp)
10008eb4:	10000526 	beq	r2,zero,10008ecc <___vfprintf_internal_r+0x98>
10008eb8:	e0bfbd17 	ldw	r2,-268(fp)
10008ebc:	10800e17 	ldw	r2,56(r2)
10008ec0:	1000021e 	bne	r2,zero,10008ecc <___vfprintf_internal_r+0x98>
10008ec4:	e13fbd17 	ldw	r4,-268(fp)
10008ec8:	000db400 	call	1000db40 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
10008ecc:	e0bfe717 	ldw	r2,-100(fp)
10008ed0:	1080030b 	ldhu	r2,12(r2)
10008ed4:	10bfffcc 	andi	r2,r2,65535
10008ed8:	1088000c 	andi	r2,r2,8192
10008edc:	10000c1e 	bne	r2,zero,10008f10 <___vfprintf_internal_r+0xdc>
10008ee0:	e0bfe717 	ldw	r2,-100(fp)
10008ee4:	1080030b 	ldhu	r2,12(r2)
10008ee8:	10880014 	ori	r2,r2,8192
10008eec:	1007883a 	mov	r3,r2
10008ef0:	e0bfe717 	ldw	r2,-100(fp)
10008ef4:	10c0030d 	sth	r3,12(r2)
10008ef8:	e0bfe717 	ldw	r2,-100(fp)
10008efc:	10c01917 	ldw	r3,100(r2)
10008f00:	00b7ffc4 	movi	r2,-8193
10008f04:	1886703a 	and	r3,r3,r2
10008f08:	e0bfe717 	ldw	r2,-100(fp)
10008f0c:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
10008f10:	e0bfe717 	ldw	r2,-100(fp)
10008f14:	1080030b 	ldhu	r2,12(r2)
10008f18:	10bfffcc 	andi	r2,r2,65535
10008f1c:	1080020c 	andi	r2,r2,8
10008f20:	10000326 	beq	r2,zero,10008f30 <___vfprintf_internal_r+0xfc>
10008f24:	e0bfe717 	ldw	r2,-100(fp)
10008f28:	10800417 	ldw	r2,16(r2)
10008f2c:	1000061e 	bne	r2,zero,10008f48 <___vfprintf_internal_r+0x114>
10008f30:	e17fe717 	ldw	r5,-100(fp)
10008f34:	e13fe617 	ldw	r4,-104(fp)
10008f38:	000b2680 	call	1000b268 <__swsetup_r>
10008f3c:	10000226 	beq	r2,zero,10008f48 <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
10008f40:	00bfffc4 	movi	r2,-1
10008f44:	0007e806 	br	1000aee8 <___vfprintf_internal_r+0x20b4>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10008f48:	e0bfe717 	ldw	r2,-100(fp)
10008f4c:	1080030b 	ldhu	r2,12(r2)
10008f50:	10bfffcc 	andi	r2,r2,65535
10008f54:	1080068c 	andi	r2,r2,26
10008f58:	10800298 	cmpnei	r2,r2,10
10008f5c:	10000c1e 	bne	r2,zero,10008f90 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
10008f60:	e0bfe717 	ldw	r2,-100(fp)
10008f64:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10008f68:	10bfffcc 	andi	r2,r2,65535
10008f6c:	10a0001c 	xori	r2,r2,32768
10008f70:	10a00004 	addi	r2,r2,-32768
10008f74:	10000616 	blt	r2,zero,10008f90 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
10008f78:	e1ffe917 	ldw	r7,-92(fp)
10008f7c:	e1bfe817 	ldw	r6,-96(fp)
10008f80:	e17fe717 	ldw	r5,-100(fp)
10008f84:	e13fe617 	ldw	r4,-104(fp)
10008f88:	0008cec0 	call	10008cec <__sbprintf>
10008f8c:	0007d606 	br	1000aee8 <___vfprintf_internal_r+0x20b4>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
10008f90:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
10008f94:	e47fcb04 	addi	r17,fp,-212
10008f98:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
10008f9c:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
10008fa0:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
10008fa4:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
10008fa8:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10008fac:	00000106 	br	10008fb4 <___vfprintf_internal_r+0x180>
                    fmt += 1;
10008fb0:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10008fb4:	a8800003 	ldbu	r2,0(r21)
10008fb8:	10803fcc 	andi	r2,r2,255
10008fbc:	1080201c 	xori	r2,r2,128
10008fc0:	10bfe004 	addi	r2,r2,-128
10008fc4:	10000626 	beq	r2,zero,10008fe0 <___vfprintf_internal_r+0x1ac>
10008fc8:	a8800003 	ldbu	r2,0(r21)
10008fcc:	10803fcc 	andi	r2,r2,255
10008fd0:	1080201c 	xori	r2,r2,128
10008fd4:	10bfe004 	addi	r2,r2,-128
10008fd8:	10800958 	cmpnei	r2,r2,37
10008fdc:	103ff41e 	bne	r2,zero,10008fb0 <__alt_data_end+0xf8008fb0>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
10008fe0:	a807883a 	mov	r3,r21
10008fe4:	9005883a 	mov	r2,r18
10008fe8:	18a1c83a 	sub	r16,r3,r2
10008fec:	80001826 	beq	r16,zero,10009050 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
10008ff0:	8c800015 	stw	r18,0(r17)
10008ff4:	8005883a 	mov	r2,r16
10008ff8:	88800115 	stw	r2,4(r17)
10008ffc:	e0bfca17 	ldw	r2,-216(fp)
10009000:	8007883a 	mov	r3,r16
10009004:	10c5883a 	add	r2,r2,r3
10009008:	e0bfca15 	stw	r2,-216(fp)
1000900c:	8c400204 	addi	r17,r17,8
10009010:	e0bfc917 	ldw	r2,-220(fp)
10009014:	10800044 	addi	r2,r2,1
10009018:	e0bfc915 	stw	r2,-220(fp)
1000901c:	e0bfc917 	ldw	r2,-220(fp)
10009020:	10800210 	cmplti	r2,r2,8
10009024:	1000071e 	bne	r2,zero,10009044 <___vfprintf_internal_r+0x210>
10009028:	e0bfc804 	addi	r2,fp,-224
1000902c:	100d883a 	mov	r6,r2
10009030:	e17fe717 	ldw	r5,-100(fp)
10009034:	e13fe617 	ldw	r4,-104(fp)
10009038:	0011b340 	call	10011b34 <__sprint_r>
1000903c:	1007531e 	bne	r2,zero,1000ad8c <___vfprintf_internal_r+0x1f58>
10009040:	e47fcb04 	addi	r17,fp,-212
			ret += m;
10009044:	e0bfac17 	ldw	r2,-336(fp)
10009048:	1405883a 	add	r2,r2,r16
1000904c:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
10009050:	a8800003 	ldbu	r2,0(r21)
10009054:	10803fcc 	andi	r2,r2,255
10009058:	1080201c 	xori	r2,r2,128
1000905c:	10bfe004 	addi	r2,r2,-128
10009060:	10073c26 	beq	r2,zero,1000ad54 <___vfprintf_internal_r+0x1f20>
                    goto done;
#endif
		fmt_anchor = fmt;
10009064:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
10009068:	ad400044 	addi	r21,r21,1

		flags = 0;
1000906c:	0027883a 	mov	r19,zero
		dprec = 0;
10009070:	e03fb415 	stw	zero,-304(fp)
		width = 0;
10009074:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
10009078:	00bfffc4 	movi	r2,-1
1000907c:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
10009080:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
10009084:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
10009088:	a805883a 	mov	r2,r21
1000908c:	15400044 	addi	r21,r2,1
10009090:	10800003 	ldbu	r2,0(r2)
10009094:	15003fcc 	andi	r20,r2,255
10009098:	a500201c 	xori	r20,r20,128
1000909c:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
100090a0:	a0bff804 	addi	r2,r20,-32
100090a4:	10c01668 	cmpgeui	r3,r2,89
100090a8:	18034f1e 	bne	r3,zero,10009de8 <___vfprintf_internal_r+0xfb4>
100090ac:	100690ba 	slli	r3,r2,2
100090b0:	00840074 	movhi	r2,4097
100090b4:	10a43104 	addi	r2,r2,-28476
100090b8:	1885883a 	add	r2,r3,r2
100090bc:	10800017 	ldw	r2,0(r2)
100090c0:	1000683a 	jmp	r2
100090c4:	10009228 	cmpgeui	zero,r2,584
100090c8:	10009de8 	cmpgeui	zero,r2,631
100090cc:	10009de8 	cmpgeui	zero,r2,631
100090d0:	10009248 	cmpgei	zero,r2,585
100090d4:	10009de8 	cmpgeui	zero,r2,631
100090d8:	10009de8 	cmpgeui	zero,r2,631
100090dc:	10009de8 	cmpgeui	zero,r2,631
100090e0:	10009de8 	cmpgeui	zero,r2,631
100090e4:	10009de8 	cmpgeui	zero,r2,631
100090e8:	10009de8 	cmpgeui	zero,r2,631
100090ec:	10009250 	cmplti	zero,r2,585
100090f0:	10009284 	addi	zero,r2,586
100090f4:	10009de8 	cmpgeui	zero,r2,631
100090f8:	1000927c 	xorhi	zero,r2,585
100090fc:	10009290 	cmplti	zero,r2,586
10009100:	10009de8 	cmpgeui	zero,r2,631
10009104:	10009330 	cmpltui	zero,r2,588
10009108:	10009338 	rdprs	zero,r2,588
1000910c:	10009338 	rdprs	zero,r2,588
10009110:	10009338 	rdprs	zero,r2,588
10009114:	10009338 	rdprs	zero,r2,588
10009118:	10009338 	rdprs	zero,r2,588
1000911c:	10009338 	rdprs	zero,r2,588
10009120:	10009338 	rdprs	zero,r2,588
10009124:	10009338 	rdprs	zero,r2,588
10009128:	10009338 	rdprs	zero,r2,588
1000912c:	10009de8 	cmpgeui	zero,r2,631
10009130:	10009de8 	cmpgeui	zero,r2,631
10009134:	10009de8 	cmpgeui	zero,r2,631
10009138:	10009de8 	cmpgeui	zero,r2,631
1000913c:	10009de8 	cmpgeui	zero,r2,631
10009140:	10009de8 	cmpgeui	zero,r2,631
10009144:	10009de8 	cmpgeui	zero,r2,631
10009148:	10009de8 	cmpgeui	zero,r2,631
1000914c:	10009de8 	cmpgeui	zero,r2,631
10009150:	10009de8 	cmpgeui	zero,r2,631
10009154:	100093ec 	andhi	zero,r2,591
10009158:	100094ec 	andhi	zero,r2,595
1000915c:	10009de8 	cmpgeui	zero,r2,631
10009160:	100094ec 	andhi	zero,r2,595
10009164:	10009de8 	cmpgeui	zero,r2,631
10009168:	10009de8 	cmpgeui	zero,r2,631
1000916c:	10009de8 	cmpgeui	zero,r2,631
10009170:	10009de8 	cmpgeui	zero,r2,631
10009174:	10009380 	call	11000938 <__alt_heap_start+0xf1dcfc>
10009178:	10009de8 	cmpgeui	zero,r2,631
1000917c:	10009de8 	cmpgeui	zero,r2,631
10009180:	10009888 	cmpgei	zero,r2,610
10009184:	10009de8 	cmpgeui	zero,r2,631
10009188:	10009de8 	cmpgeui	zero,r2,631
1000918c:	10009de8 	cmpgeui	zero,r2,631
10009190:	10009de8 	cmpgeui	zero,r2,631
10009194:	10009de8 	cmpgeui	zero,r2,631
10009198:	10009a04 	addi	zero,r2,616
1000919c:	10009de8 	cmpgeui	zero,r2,631
100091a0:	10009de8 	cmpgeui	zero,r2,631
100091a4:	10009ac4 	addi	zero,r2,619
100091a8:	10009de8 	cmpgeui	zero,r2,631
100091ac:	10009de8 	cmpgeui	zero,r2,631
100091b0:	10009de8 	cmpgeui	zero,r2,631
100091b4:	10009de8 	cmpgeui	zero,r2,631
100091b8:	10009de8 	cmpgeui	zero,r2,631
100091bc:	10009de8 	cmpgeui	zero,r2,631
100091c0:	10009de8 	cmpgeui	zero,r2,631
100091c4:	10009de8 	cmpgeui	zero,r2,631
100091c8:	10009de8 	cmpgeui	zero,r2,631
100091cc:	10009de8 	cmpgeui	zero,r2,631
100091d0:	100093c4 	addi	zero,r2,591
100091d4:	100093f0 	cmpltui	zero,r2,591
100091d8:	100094ec 	andhi	zero,r2,595
100091dc:	100094ec 	andhi	zero,r2,595
100091e0:	100094ec 	andhi	zero,r2,595
100091e4:	10009388 	cmpgei	zero,r2,590
100091e8:	100093f0 	cmpltui	zero,r2,591
100091ec:	10009de8 	cmpgeui	zero,r2,631
100091f0:	10009de8 	cmpgeui	zero,r2,631
100091f4:	10009390 	cmplti	zero,r2,590
100091f8:	10009de8 	cmpgeui	zero,r2,631
100091fc:	100097e8 	cmpgeui	zero,r2,607
10009200:	1000988c 	andi	zero,r2,610
10009204:	1000992c 	andhi	zero,r2,612
10009208:	100093bc 	xorhi	zero,r2,590
1000920c:	10009de8 	cmpgeui	zero,r2,631
10009210:	10009974 	orhi	zero,r2,613
10009214:	10009de8 	cmpgeui	zero,r2,631
10009218:	10009a08 	cmpgei	zero,r2,616
1000921c:	10009de8 	cmpgeui	zero,r2,631
10009220:	10009de8 	cmpgeui	zero,r2,631
10009224:	10009ad4 	ori	zero,r2,619
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
10009228:	e0bfc103 	ldbu	r2,-252(fp)
1000922c:	10803fcc 	andi	r2,r2,255
10009230:	1080201c 	xori	r2,r2,128
10009234:	10bfe004 	addi	r2,r2,-128
10009238:	103f931e 	bne	r2,zero,10009088 <__alt_data_end+0xf8009088>
				sign = ' ';
1000923c:	00800804 	movi	r2,32
10009240:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
10009244:	003f9006 	br	10009088 <__alt_data_end+0xf8009088>
		case '#':
			flags |= ALT;
10009248:	9cc00054 	ori	r19,r19,1
			goto rflag;
1000924c:	003f8e06 	br	10009088 <__alt_data_end+0xf8009088>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
10009250:	e0bfe917 	ldw	r2,-92(fp)
10009254:	10c00104 	addi	r3,r2,4
10009258:	e0ffe915 	stw	r3,-92(fp)
1000925c:	10800017 	ldw	r2,0(r2)
10009260:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
10009264:	e0bfad17 	ldw	r2,-332(fp)
10009268:	10000116 	blt	r2,zero,10009270 <___vfprintf_internal_r+0x43c>
				goto rflag;
1000926c:	003f8606 	br	10009088 <__alt_data_end+0xf8009088>
			width = -width;
10009270:	e0bfad17 	ldw	r2,-332(fp)
10009274:	0085c83a 	sub	r2,zero,r2
10009278:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
1000927c:	9cc00114 	ori	r19,r19,4
			goto rflag;
10009280:	003f8106 	br	10009088 <__alt_data_end+0xf8009088>
		case '+':
			sign = '+';
10009284:	00800ac4 	movi	r2,43
10009288:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
1000928c:	003f7e06 	br	10009088 <__alt_data_end+0xf8009088>
		case '.':
			if ((ch = *fmt++) == '*') {
10009290:	a805883a 	mov	r2,r21
10009294:	15400044 	addi	r21,r2,1
10009298:	10800003 	ldbu	r2,0(r2)
1000929c:	15003fcc 	andi	r20,r2,255
100092a0:	a500201c 	xori	r20,r20,128
100092a4:	a53fe004 	addi	r20,r20,-128
100092a8:	a0800a98 	cmpnei	r2,r20,42
100092ac:	10000a1e 	bne	r2,zero,100092d8 <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
100092b0:	e0bfe917 	ldw	r2,-92(fp)
100092b4:	10c00104 	addi	r3,r2,4
100092b8:	e0ffe915 	stw	r3,-92(fp)
100092bc:	10800017 	ldw	r2,0(r2)
100092c0:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
100092c4:	e0bfae17 	ldw	r2,-328(fp)
100092c8:	103f6f0e 	bge	r2,zero,10009088 <__alt_data_end+0xf8009088>
					prec = -1;
100092cc:	00bfffc4 	movi	r2,-1
100092d0:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
100092d4:	003f6c06 	br	10009088 <__alt_data_end+0xf8009088>
			}
			n = 0;
100092d8:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
100092dc:	00000c06 	br	10009310 <___vfprintf_internal_r+0x4dc>
				n = 10 * n + to_digit (ch);
100092e0:	01400284 	movi	r5,10
100092e4:	8009883a 	mov	r4,r16
100092e8:	00059d40 	call	100059d4 <__mulsi3>
100092ec:	1007883a 	mov	r3,r2
100092f0:	a0bff404 	addi	r2,r20,-48
100092f4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
100092f8:	a805883a 	mov	r2,r21
100092fc:	15400044 	addi	r21,r2,1
10009300:	10800003 	ldbu	r2,0(r2)
10009304:	15003fcc 	andi	r20,r2,255
10009308:	a500201c 	xori	r20,r20,128
1000930c:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
10009310:	a0bff404 	addi	r2,r20,-48
10009314:	108002b0 	cmpltui	r2,r2,10
10009318:	103ff11e 	bne	r2,zero,100092e0 <__alt_data_end+0xf80092e0>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
1000931c:	8005883a 	mov	r2,r16
10009320:	1000010e 	bge	r2,zero,10009328 <___vfprintf_internal_r+0x4f4>
10009324:	00bfffc4 	movi	r2,-1
10009328:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
1000932c:	003f5c06 	br	100090a0 <__alt_data_end+0xf80090a0>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
10009330:	9cc02014 	ori	r19,r19,128
			goto rflag;
10009334:	003f5406 	br	10009088 <__alt_data_end+0xf8009088>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
10009338:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
1000933c:	01400284 	movi	r5,10
10009340:	8009883a 	mov	r4,r16
10009344:	00059d40 	call	100059d4 <__mulsi3>
10009348:	1007883a 	mov	r3,r2
1000934c:	a0bff404 	addi	r2,r20,-48
10009350:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10009354:	a805883a 	mov	r2,r21
10009358:	15400044 	addi	r21,r2,1
1000935c:	10800003 	ldbu	r2,0(r2)
10009360:	15003fcc 	andi	r20,r2,255
10009364:	a500201c 	xori	r20,r20,128
10009368:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
1000936c:	a0bff404 	addi	r2,r20,-48
10009370:	108002b0 	cmpltui	r2,r2,10
10009374:	103ff11e 	bne	r2,zero,1000933c <__alt_data_end+0xf800933c>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
10009378:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
1000937c:	003f4806 	br	100090a0 <__alt_data_end+0xf80090a0>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
10009380:	9cc00214 	ori	r19,r19,8
			goto rflag;
10009384:	003f4006 	br	10009088 <__alt_data_end+0xf8009088>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
10009388:	9cc01014 	ori	r19,r19,64
			goto rflag;
1000938c:	003f3e06 	br	10009088 <__alt_data_end+0xf8009088>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
10009390:	a8800003 	ldbu	r2,0(r21)
10009394:	10803fcc 	andi	r2,r2,255
10009398:	1080201c 	xori	r2,r2,128
1000939c:	10bfe004 	addi	r2,r2,-128
100093a0:	10801b18 	cmpnei	r2,r2,108
100093a4:	1000031e 	bne	r2,zero,100093b4 <___vfprintf_internal_r+0x580>
				fmt++;
100093a8:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
100093ac:	9cc00814 	ori	r19,r19,32
100093b0:	003f3506 	br	10009088 <__alt_data_end+0xf8009088>
			} else
#endif
				flags |= LONGINT;
100093b4:	9cc00414 	ori	r19,r19,16
			goto rflag;
100093b8:	003f3306 	br	10009088 <__alt_data_end+0xf8009088>
		case 'q': /* extension */
			flags |= QUADINT;
100093bc:	9cc00814 	ori	r19,r19,32
			goto rflag;
100093c0:	003f3106 	br	10009088 <__alt_data_end+0xf8009088>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
100093c4:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
100093c8:	e0bfe917 	ldw	r2,-92(fp)
100093cc:	10c00104 	addi	r3,r2,4
100093d0:	e0ffe915 	stw	r3,-92(fp)
100093d4:	10800017 	ldw	r2,0(r2)
100093d8:	90800005 	stb	r2,0(r18)
				size = 1;
100093dc:	00800044 	movi	r2,1
100093e0:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
100093e4:	e03fc105 	stb	zero,-252(fp)
			break;
100093e8:	00028806 	br	10009e0c <___vfprintf_internal_r+0xfd8>
		case 'D':  /* extension */
			flags |= LONGINT;
100093ec:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
100093f0:	9880080c 	andi	r2,r19,32
100093f4:	10000826 	beq	r2,zero,10009418 <___vfprintf_internal_r+0x5e4>
100093f8:	e13fe917 	ldw	r4,-92(fp)
100093fc:	20800204 	addi	r2,r4,8
10009400:	e0bfe915 	stw	r2,-92(fp)
10009404:	20800017 	ldw	r2,0(r4)
10009408:	20c00117 	ldw	r3,4(r4)
1000940c:	e0bfea15 	stw	r2,-88(fp)
10009410:	e0ffeb15 	stw	r3,-84(fp)
10009414:	00001e06 	br	10009490 <___vfprintf_internal_r+0x65c>
10009418:	9880040c 	andi	r2,r19,16
1000941c:	10000826 	beq	r2,zero,10009440 <___vfprintf_internal_r+0x60c>
10009420:	e0bfe917 	ldw	r2,-92(fp)
10009424:	10c00104 	addi	r3,r2,4
10009428:	e0ffe915 	stw	r3,-92(fp)
1000942c:	10800017 	ldw	r2,0(r2)
10009430:	e0bfea15 	stw	r2,-88(fp)
10009434:	1005d7fa 	srai	r2,r2,31
10009438:	e0bfeb15 	stw	r2,-84(fp)
1000943c:	00001406 	br	10009490 <___vfprintf_internal_r+0x65c>
10009440:	9880100c 	andi	r2,r19,64
10009444:	10000b26 	beq	r2,zero,10009474 <___vfprintf_internal_r+0x640>
10009448:	e0bfe917 	ldw	r2,-92(fp)
1000944c:	10c00104 	addi	r3,r2,4
10009450:	e0ffe915 	stw	r3,-92(fp)
10009454:	10800017 	ldw	r2,0(r2)
10009458:	10bfffcc 	andi	r2,r2,65535
1000945c:	10a0001c 	xori	r2,r2,32768
10009460:	10a00004 	addi	r2,r2,-32768
10009464:	e0bfea15 	stw	r2,-88(fp)
10009468:	1005d7fa 	srai	r2,r2,31
1000946c:	e0bfeb15 	stw	r2,-84(fp)
10009470:	00000706 	br	10009490 <___vfprintf_internal_r+0x65c>
10009474:	e0bfe917 	ldw	r2,-92(fp)
10009478:	10c00104 	addi	r3,r2,4
1000947c:	e0ffe915 	stw	r3,-92(fp)
10009480:	10800017 	ldw	r2,0(r2)
10009484:	e0bfea15 	stw	r2,-88(fp)
10009488:	1005d7fa 	srai	r2,r2,31
1000948c:	e0bfeb15 	stw	r2,-84(fp)
10009490:	e0bfea17 	ldw	r2,-88(fp)
10009494:	e0bfb115 	stw	r2,-316(fp)
10009498:	e0ffeb17 	ldw	r3,-84(fp)
1000949c:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
100094a0:	e0bfb117 	ldw	r2,-316(fp)
100094a4:	e0ffb217 	ldw	r3,-312(fp)
100094a8:	18000d0e 	bge	r3,zero,100094e0 <___vfprintf_internal_r+0x6ac>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
100094ac:	000f883a 	mov	r7,zero
100094b0:	0011883a 	mov	r8,zero
100094b4:	e13fb117 	ldw	r4,-316(fp)
100094b8:	e17fb217 	ldw	r5,-312(fp)
100094bc:	3905c83a 	sub	r2,r7,r4
100094c0:	388d803a 	cmpltu	r6,r7,r2
100094c4:	4147c83a 	sub	r3,r8,r5
100094c8:	1989c83a 	sub	r4,r3,r6
100094cc:	2007883a 	mov	r3,r4
100094d0:	e0bfb115 	stw	r2,-316(fp)
100094d4:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
100094d8:	00800b44 	movi	r2,45
100094dc:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
100094e0:	00800044 	movi	r2,1
100094e4:	e0bfb305 	stb	r2,-308(fp)
			goto number;
100094e8:	0001b706 	br	10009bc8 <___vfprintf_internal_r+0xd94>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
100094ec:	9880020c 	andi	r2,r19,8
100094f0:	10000826 	beq	r2,zero,10009514 <___vfprintf_internal_r+0x6e0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
100094f4:	e13fe917 	ldw	r4,-92(fp)
100094f8:	20800204 	addi	r2,r4,8
100094fc:	e0bfe915 	stw	r2,-92(fp)
10009500:	20800017 	ldw	r2,0(r4)
10009504:	20c00117 	ldw	r3,4(r4)
10009508:	e0bfc215 	stw	r2,-248(fp)
1000950c:	e0ffc315 	stw	r3,-244(fp)
10009510:	00000706 	br	10009530 <___vfprintf_internal_r+0x6fc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
10009514:	e13fe917 	ldw	r4,-92(fp)
10009518:	20800204 	addi	r2,r4,8
1000951c:	e0bfe915 	stw	r2,-92(fp)
10009520:	20800017 	ldw	r2,0(r4)
10009524:	20c00117 	ldw	r3,4(r4)
10009528:	e0bfc215 	stw	r2,-248(fp)
1000952c:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
10009530:	e0bfc217 	ldw	r2,-248(fp)
10009534:	e0ffc317 	ldw	r3,-244(fp)
10009538:	1009883a 	mov	r4,r2
1000953c:	180b883a 	mov	r5,r3
10009540:	001167c0 	call	1001167c <__fpclassifyd>
10009544:	10800058 	cmpnei	r2,r2,1
10009548:	1000161e 	bne	r2,zero,100095a4 <___vfprintf_internal_r+0x770>
				if (_fpvalue < 0)
1000954c:	e0bfc217 	ldw	r2,-248(fp)
10009550:	e0ffc317 	ldw	r3,-244(fp)
10009554:	000d883a 	mov	r6,zero
10009558:	000f883a 	mov	r7,zero
1000955c:	1009883a 	mov	r4,r2
10009560:	180b883a 	mov	r5,r3
10009564:	00044600 	call	10004460 <__ledf2>
10009568:	1000020e 	bge	r2,zero,10009574 <___vfprintf_internal_r+0x740>
					sign = '-';
1000956c:	00800b44 	movi	r2,45
10009570:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
10009574:	a0801208 	cmpgei	r2,r20,72
10009578:	1000031e 	bne	r2,zero,10009588 <___vfprintf_internal_r+0x754>
					cp = "INF";
1000957c:	04840374 	movhi	r18,4109
10009580:	94bd0904 	addi	r18,r18,-3036
10009584:	00000206 	br	10009590 <___vfprintf_internal_r+0x75c>
				else
					cp = "inf";
10009588:	04840374 	movhi	r18,4109
1000958c:	94bd0a04 	addi	r18,r18,-3032
				size = 3;
10009590:	008000c4 	movi	r2,3
10009594:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
10009598:	00bfdfc4 	movi	r2,-129
1000959c:	98a6703a 	and	r19,r19,r2
				break;
100095a0:	00021a06 	br	10009e0c <___vfprintf_internal_r+0xfd8>
			}
			if (isnan (_fpvalue)) {
100095a4:	e0bfc217 	ldw	r2,-248(fp)
100095a8:	e0ffc317 	ldw	r3,-244(fp)
100095ac:	1009883a 	mov	r4,r2
100095b0:	180b883a 	mov	r5,r3
100095b4:	001167c0 	call	1001167c <__fpclassifyd>
100095b8:	10000c1e 	bne	r2,zero,100095ec <___vfprintf_internal_r+0x7b8>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
100095bc:	a0801208 	cmpgei	r2,r20,72
100095c0:	1000031e 	bne	r2,zero,100095d0 <___vfprintf_internal_r+0x79c>
					cp = "NAN";
100095c4:	04840374 	movhi	r18,4109
100095c8:	94bd0b04 	addi	r18,r18,-3028
100095cc:	00000206 	br	100095d8 <___vfprintf_internal_r+0x7a4>
				else
					cp = "nan";
100095d0:	04840374 	movhi	r18,4109
100095d4:	94bd0c04 	addi	r18,r18,-3024
				size = 3;
100095d8:	008000c4 	movi	r2,3
100095dc:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
100095e0:	00bfdfc4 	movi	r2,-129
100095e4:	98a6703a 	and	r19,r19,r2
				break;
100095e8:	00020806 	br	10009e0c <___vfprintf_internal_r+0xfd8>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
100095ec:	e0bfae17 	ldw	r2,-328(fp)
100095f0:	10bfffd8 	cmpnei	r2,r2,-1
100095f4:	1000031e 	bne	r2,zero,10009604 <___vfprintf_internal_r+0x7d0>
				prec = DEFPREC;
100095f8:	00800184 	movi	r2,6
100095fc:	e0bfae15 	stw	r2,-328(fp)
10009600:	00000806 	br	10009624 <___vfprintf_internal_r+0x7f0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
10009604:	a08019e0 	cmpeqi	r2,r20,103
10009608:	1000021e 	bne	r2,zero,10009614 <___vfprintf_internal_r+0x7e0>
1000960c:	a08011d8 	cmpnei	r2,r20,71
10009610:	1000041e 	bne	r2,zero,10009624 <___vfprintf_internal_r+0x7f0>
10009614:	e0bfae17 	ldw	r2,-328(fp)
10009618:	1000021e 	bne	r2,zero,10009624 <___vfprintf_internal_r+0x7f0>
				prec = 1;
1000961c:	00800044 	movi	r2,1
10009620:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
10009624:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
10009628:	e0bfc217 	ldw	r2,-248(fp)
1000962c:	e0ffc317 	ldw	r3,-244(fp)
10009630:	dc800515 	stw	r18,20(sp)
10009634:	e13fc704 	addi	r4,fp,-228
10009638:	d9000415 	stw	r4,16(sp)
1000963c:	dd000315 	stw	r20,12(sp)
10009640:	e13fc404 	addi	r4,fp,-240
10009644:	d9000215 	stw	r4,8(sp)
10009648:	e13fc144 	addi	r4,fp,-251
1000964c:	d9000115 	stw	r4,4(sp)
10009650:	dcc00015 	stw	r19,0(sp)
10009654:	e1ffae17 	ldw	r7,-328(fp)
10009658:	100b883a 	mov	r5,r2
1000965c:	180d883a 	mov	r6,r3
10009660:	e13fe617 	ldw	r4,-104(fp)
10009664:	000af1c0 	call	1000af1c <cvt>
10009668:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
1000966c:	a08019e0 	cmpeqi	r2,r20,103
10009670:	1000021e 	bne	r2,zero,1000967c <___vfprintf_internal_r+0x848>
10009674:	a08011d8 	cmpnei	r2,r20,71
10009678:	1000091e 	bne	r2,zero,100096a0 <___vfprintf_internal_r+0x86c>
				if (expt <= -4 || expt > prec)
1000967c:	e0bfc417 	ldw	r2,-240(fp)
10009680:	10bfff50 	cmplti	r2,r2,-3
10009684:	1000031e 	bne	r2,zero,10009694 <___vfprintf_internal_r+0x860>
10009688:	e0bfc417 	ldw	r2,-240(fp)
1000968c:	e0ffae17 	ldw	r3,-328(fp)
10009690:	1880020e 	bge	r3,r2,1000969c <___vfprintf_internal_r+0x868>
					ch -= 2; /* 'e' or 'E' */
10009694:	a53fff84 	addi	r20,r20,-2
10009698:	00000106 	br	100096a0 <___vfprintf_internal_r+0x86c>
				else
					ch = 'g';
1000969c:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
100096a0:	a0801988 	cmpgei	r2,r20,102
100096a4:	1000171e 	bne	r2,zero,10009704 <___vfprintf_internal_r+0x8d0>
				--expt;
100096a8:	e0bfc417 	ldw	r2,-240(fp)
100096ac:	10bfffc4 	addi	r2,r2,-1
100096b0:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
100096b4:	e0bfc417 	ldw	r2,-240(fp)
100096b8:	e0ffc504 	addi	r3,fp,-236
100096bc:	a00d883a 	mov	r6,r20
100096c0:	100b883a 	mov	r5,r2
100096c4:	1809883a 	mov	r4,r3
100096c8:	000b1280 	call	1000b128 <exponent>
100096cc:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
100096d0:	e0bfc717 	ldw	r2,-228(fp)
100096d4:	e0ffaf17 	ldw	r3,-324(fp)
100096d8:	1885883a 	add	r2,r3,r2
100096dc:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
100096e0:	e0bfc717 	ldw	r2,-228(fp)
100096e4:	10800088 	cmpgei	r2,r2,2
100096e8:	1000021e 	bne	r2,zero,100096f4 <___vfprintf_internal_r+0x8c0>
100096ec:	9880004c 	andi	r2,r19,1
100096f0:	10003526 	beq	r2,zero,100097c8 <___vfprintf_internal_r+0x994>
					++size;
100096f4:	e0bfb617 	ldw	r2,-296(fp)
100096f8:	10800044 	addi	r2,r2,1
100096fc:	e0bfb615 	stw	r2,-296(fp)
10009700:	00003106 	br	100097c8 <___vfprintf_internal_r+0x994>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
10009704:	a0801998 	cmpnei	r2,r20,102
10009708:	1000181e 	bne	r2,zero,1000976c <___vfprintf_internal_r+0x938>
					if (expt > 0) {
1000970c:	e0bfc417 	ldw	r2,-240(fp)
10009710:	00800c0e 	bge	zero,r2,10009744 <___vfprintf_internal_r+0x910>
						size = expt;
10009714:	e0bfc417 	ldw	r2,-240(fp)
10009718:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
1000971c:	e0bfae17 	ldw	r2,-328(fp)
10009720:	1000021e 	bne	r2,zero,1000972c <___vfprintf_internal_r+0x8f8>
10009724:	9880004c 	andi	r2,r19,1
10009728:	10002526 	beq	r2,zero,100097c0 <___vfprintf_internal_r+0x98c>
							size += prec + 1;
1000972c:	e0bfae17 	ldw	r2,-328(fp)
10009730:	10800044 	addi	r2,r2,1
10009734:	e0ffb617 	ldw	r3,-296(fp)
10009738:	1885883a 	add	r2,r3,r2
1000973c:	e0bfb615 	stw	r2,-296(fp)
10009740:	00001f06 	br	100097c0 <___vfprintf_internal_r+0x98c>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
10009744:	e0bfae17 	ldw	r2,-328(fp)
10009748:	1000021e 	bne	r2,zero,10009754 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
1000974c:	9880004c 	andi	r2,r19,1
10009750:	10000326 	beq	r2,zero,10009760 <___vfprintf_internal_r+0x92c>
							  ? prec + 2
							  : 1;
10009754:	e0bfae17 	ldw	r2,-328(fp)
10009758:	10800084 	addi	r2,r2,2
1000975c:	00000106 	br	10009764 <___vfprintf_internal_r+0x930>
10009760:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
10009764:	e0bfb615 	stw	r2,-296(fp)
10009768:	00001506 	br	100097c0 <___vfprintf_internal_r+0x98c>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
1000976c:	e0ffc417 	ldw	r3,-240(fp)
10009770:	e0bfc717 	ldw	r2,-228(fp)
10009774:	18800816 	blt	r3,r2,10009798 <___vfprintf_internal_r+0x964>
					size = expt;
10009778:	e0bfc417 	ldw	r2,-240(fp)
1000977c:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
10009780:	9880004c 	andi	r2,r19,1
10009784:	10000e26 	beq	r2,zero,100097c0 <___vfprintf_internal_r+0x98c>
						++size;
10009788:	e0bfb617 	ldw	r2,-296(fp)
1000978c:	10800044 	addi	r2,r2,1
10009790:	e0bfb615 	stw	r2,-296(fp)
10009794:	00000a06 	br	100097c0 <___vfprintf_internal_r+0x98c>
				} else
					size = ndig + (expt > 0 ?
10009798:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
1000979c:	00800416 	blt	zero,r2,100097b0 <___vfprintf_internal_r+0x97c>
100097a0:	e0bfc417 	ldw	r2,-240(fp)
100097a4:	00c00084 	movi	r3,2
100097a8:	1885c83a 	sub	r2,r3,r2
100097ac:	00000106 	br	100097b4 <___vfprintf_internal_r+0x980>
100097b0:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
100097b4:	e0ffc717 	ldw	r3,-228(fp)
100097b8:	10c5883a 	add	r2,r2,r3
100097bc:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
100097c0:	e0bfc417 	ldw	r2,-240(fp)
100097c4:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
100097c8:	e0bfc143 	ldbu	r2,-251(fp)
100097cc:	10803fcc 	andi	r2,r2,255
100097d0:	1080201c 	xori	r2,r2,128
100097d4:	10bfe004 	addi	r2,r2,-128
100097d8:	10018b26 	beq	r2,zero,10009e08 <___vfprintf_internal_r+0xfd4>
				sign = '-';
100097dc:	00800b44 	movi	r2,45
100097e0:	e0bfc105 	stb	r2,-252(fp)
			break;
100097e4:	00018806 	br	10009e08 <___vfprintf_internal_r+0xfd4>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
100097e8:	9880080c 	andi	r2,r19,32
100097ec:	10000d26 	beq	r2,zero,10009824 <___vfprintf_internal_r+0x9f0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
100097f0:	e0bfe917 	ldw	r2,-92(fp)
100097f4:	10c00104 	addi	r3,r2,4
100097f8:	e0ffe915 	stw	r3,-92(fp)
100097fc:	10800017 	ldw	r2,0(r2)
10009800:	e0ffac17 	ldw	r3,-336(fp)
10009804:	e0fff015 	stw	r3,-64(fp)
10009808:	1807d7fa 	srai	r3,r3,31
1000980c:	e0fff115 	stw	r3,-60(fp)
10009810:	e0fff017 	ldw	r3,-64(fp)
10009814:	10c00015 	stw	r3,0(r2)
10009818:	e0fff117 	ldw	r3,-60(fp)
1000981c:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10009820:	00054b06 	br	1000ad50 <___vfprintf_internal_r+0x1f1c>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
10009824:	9880040c 	andi	r2,r19,16
10009828:	10000726 	beq	r2,zero,10009848 <___vfprintf_internal_r+0xa14>
				*GET_ARG (N, ap, long_ptr_t) = ret;
1000982c:	e0bfe917 	ldw	r2,-92(fp)
10009830:	10c00104 	addi	r3,r2,4
10009834:	e0ffe915 	stw	r3,-92(fp)
10009838:	10800017 	ldw	r2,0(r2)
1000983c:	e0ffac17 	ldw	r3,-336(fp)
10009840:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10009844:	00054206 	br	1000ad50 <___vfprintf_internal_r+0x1f1c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
10009848:	9880100c 	andi	r2,r19,64
1000984c:	10000726 	beq	r2,zero,1000986c <___vfprintf_internal_r+0xa38>
				*GET_ARG (N, ap, short_ptr_t) = ret;
10009850:	e0bfe917 	ldw	r2,-92(fp)
10009854:	10c00104 	addi	r3,r2,4
10009858:	e0ffe915 	stw	r3,-92(fp)
1000985c:	10800017 	ldw	r2,0(r2)
10009860:	e0ffac17 	ldw	r3,-336(fp)
10009864:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10009868:	00053906 	br	1000ad50 <___vfprintf_internal_r+0x1f1c>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
1000986c:	e0bfe917 	ldw	r2,-92(fp)
10009870:	10c00104 	addi	r3,r2,4
10009874:	e0ffe915 	stw	r3,-92(fp)
10009878:	10800017 	ldw	r2,0(r2)
1000987c:	e0ffac17 	ldw	r3,-336(fp)
10009880:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
10009884:	00053206 	br	1000ad50 <___vfprintf_internal_r+0x1f1c>
		case 'O': /* extension */
			flags |= LONGINT;
10009888:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
1000988c:	9880080c 	andi	r2,r19,32
10009890:	10000626 	beq	r2,zero,100098ac <___vfprintf_internal_r+0xa78>
10009894:	e0bfe917 	ldw	r2,-92(fp)
10009898:	10c00204 	addi	r3,r2,8
1000989c:	e0ffe915 	stw	r3,-92(fp)
100098a0:	15800017 	ldw	r22,0(r2)
100098a4:	15c00117 	ldw	r23,4(r2)
100098a8:	00001c06 	br	1000991c <___vfprintf_internal_r+0xae8>
100098ac:	9880040c 	andi	r2,r19,16
100098b0:	10000726 	beq	r2,zero,100098d0 <___vfprintf_internal_r+0xa9c>
100098b4:	e0bfe917 	ldw	r2,-92(fp)
100098b8:	10c00104 	addi	r3,r2,4
100098bc:	e0ffe915 	stw	r3,-92(fp)
100098c0:	10800017 	ldw	r2,0(r2)
100098c4:	102d883a 	mov	r22,r2
100098c8:	002f883a 	mov	r23,zero
100098cc:	00001306 	br	1000991c <___vfprintf_internal_r+0xae8>
100098d0:	9880100c 	andi	r2,r19,64
100098d4:	10000b26 	beq	r2,zero,10009904 <___vfprintf_internal_r+0xad0>
100098d8:	e0bfe917 	ldw	r2,-92(fp)
100098dc:	10c00104 	addi	r3,r2,4
100098e0:	e0ffe915 	stw	r3,-92(fp)
100098e4:	10800017 	ldw	r2,0(r2)
100098e8:	e0bff215 	stw	r2,-56(fp)
100098ec:	e03ff315 	stw	zero,-52(fp)
100098f0:	e0bff217 	ldw	r2,-56(fp)
100098f4:	15bfffcc 	andi	r22,r2,65535
100098f8:	e0fff317 	ldw	r3,-52(fp)
100098fc:	182e703a 	and	r23,r3,zero
10009900:	00000606 	br	1000991c <___vfprintf_internal_r+0xae8>
10009904:	e0bfe917 	ldw	r2,-92(fp)
10009908:	10c00104 	addi	r3,r2,4
1000990c:	e0ffe915 	stw	r3,-92(fp)
10009910:	10800017 	ldw	r2,0(r2)
10009914:	102d883a 	mov	r22,r2
10009918:	002f883a 	mov	r23,zero
1000991c:	e5bfb115 	stw	r22,-316(fp)
10009920:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
10009924:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
10009928:	0000a606 	br	10009bc4 <___vfprintf_internal_r+0xd90>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
1000992c:	e0bfe917 	ldw	r2,-92(fp)
10009930:	10c00104 	addi	r3,r2,4
10009934:	e0ffe915 	stw	r3,-92(fp)
10009938:	10800017 	ldw	r2,0(r2)
1000993c:	e0bfb115 	stw	r2,-316(fp)
10009940:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
10009944:	00800084 	movi	r2,2
10009948:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
1000994c:	00840374 	movhi	r2,4109
10009950:	10bd0d04 	addi	r2,r2,-3020
10009954:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
10009958:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
1000995c:	00800c04 	movi	r2,48
10009960:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
10009964:	05001e04 	movi	r20,120
10009968:	00801e04 	movi	r2,120
1000996c:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
10009970:	00009406 	br	10009bc4 <___vfprintf_internal_r+0xd90>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
10009974:	e0bfe917 	ldw	r2,-92(fp)
10009978:	10c00104 	addi	r3,r2,4
1000997c:	e0ffe915 	stw	r3,-92(fp)
10009980:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
10009984:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
10009988:	9000081e 	bne	r18,zero,100099ac <___vfprintf_internal_r+0xb78>
				cp = "(null)";
1000998c:	04840374 	movhi	r18,4109
10009990:	94bd1204 	addi	r18,r18,-3000
				size = ((unsigned) prec > 6U) ? 6 : prec;
10009994:	e0bfae17 	ldw	r2,-328(fp)
10009998:	10c001f0 	cmpltui	r3,r2,7
1000999c:	1800011e 	bne	r3,zero,100099a4 <___vfprintf_internal_r+0xb70>
100099a0:	00800184 	movi	r2,6
100099a4:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
100099a8:	00011806 	br	10009e0c <___vfprintf_internal_r+0xfd8>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
100099ac:	e0bfae17 	ldw	r2,-328(fp)
100099b0:	10001016 	blt	r2,zero,100099f4 <___vfprintf_internal_r+0xbc0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
100099b4:	e0bfae17 	ldw	r2,-328(fp)
100099b8:	100d883a 	mov	r6,r2
100099bc:	000b883a 	mov	r5,zero
100099c0:	9009883a 	mov	r4,r18
100099c4:	000f0b40 	call	1000f0b4 <memchr>
100099c8:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
100099cc:	e0bfbf17 	ldw	r2,-260(fp)
100099d0:	10000526 	beq	r2,zero,100099e8 <___vfprintf_internal_r+0xbb4>
					size = p - cp;
100099d4:	e0bfbf17 	ldw	r2,-260(fp)
100099d8:	9007883a 	mov	r3,r18
100099dc:	10c5c83a 	sub	r2,r2,r3
100099e0:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
100099e4:	00010906 	br	10009e0c <___vfprintf_internal_r+0xfd8>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
100099e8:	e0bfae17 	ldw	r2,-328(fp)
100099ec:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
100099f0:	00010606 	br	10009e0c <___vfprintf_internal_r+0xfd8>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
100099f4:	9009883a 	mov	r4,r18
100099f8:	00088540 	call	10008854 <strlen>
100099fc:	e0bfb615 	stw	r2,-296(fp)

			break;
10009a00:	00010206 	br	10009e0c <___vfprintf_internal_r+0xfd8>
		case 'U': /* extension */
			flags |= LONGINT;
10009a04:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
10009a08:	9880080c 	andi	r2,r19,32
10009a0c:	10000826 	beq	r2,zero,10009a30 <___vfprintf_internal_r+0xbfc>
10009a10:	e0bfe917 	ldw	r2,-92(fp)
10009a14:	10c00204 	addi	r3,r2,8
10009a18:	e0ffe915 	stw	r3,-92(fp)
10009a1c:	10c00017 	ldw	r3,0(r2)
10009a20:	e0ffec15 	stw	r3,-80(fp)
10009a24:	10c00117 	ldw	r3,4(r2)
10009a28:	e0ffed15 	stw	r3,-76(fp)
10009a2c:	00001e06 	br	10009aa8 <___vfprintf_internal_r+0xc74>
10009a30:	9880040c 	andi	r2,r19,16
10009a34:	10000726 	beq	r2,zero,10009a54 <___vfprintf_internal_r+0xc20>
10009a38:	e0bfe917 	ldw	r2,-92(fp)
10009a3c:	10c00104 	addi	r3,r2,4
10009a40:	e0ffe915 	stw	r3,-92(fp)
10009a44:	10800017 	ldw	r2,0(r2)
10009a48:	e0bfec15 	stw	r2,-80(fp)
10009a4c:	e03fed15 	stw	zero,-76(fp)
10009a50:	00001506 	br	10009aa8 <___vfprintf_internal_r+0xc74>
10009a54:	9880100c 	andi	r2,r19,64
10009a58:	10000d26 	beq	r2,zero,10009a90 <___vfprintf_internal_r+0xc5c>
10009a5c:	e0bfe917 	ldw	r2,-92(fp)
10009a60:	10c00104 	addi	r3,r2,4
10009a64:	e0ffe915 	stw	r3,-92(fp)
10009a68:	10800017 	ldw	r2,0(r2)
10009a6c:	e0bff415 	stw	r2,-48(fp)
10009a70:	e03ff515 	stw	zero,-44(fp)
10009a74:	e0bff417 	ldw	r2,-48(fp)
10009a78:	10bfffcc 	andi	r2,r2,65535
10009a7c:	e0bfec15 	stw	r2,-80(fp)
10009a80:	e0fff517 	ldw	r3,-44(fp)
10009a84:	1806703a 	and	r3,r3,zero
10009a88:	e0ffed15 	stw	r3,-76(fp)
10009a8c:	00000606 	br	10009aa8 <___vfprintf_internal_r+0xc74>
10009a90:	e0bfe917 	ldw	r2,-92(fp)
10009a94:	10c00104 	addi	r3,r2,4
10009a98:	e0ffe915 	stw	r3,-92(fp)
10009a9c:	10800017 	ldw	r2,0(r2)
10009aa0:	e0bfec15 	stw	r2,-80(fp)
10009aa4:	e03fed15 	stw	zero,-76(fp)
10009aa8:	e0bfec17 	ldw	r2,-80(fp)
10009aac:	e0bfb115 	stw	r2,-316(fp)
10009ab0:	e0ffed17 	ldw	r3,-76(fp)
10009ab4:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
10009ab8:	00800044 	movi	r2,1
10009abc:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
10009ac0:	00004006 	br	10009bc4 <___vfprintf_internal_r+0xd90>
		case 'X':
			xdigs = "0123456789ABCDEF";
10009ac4:	00840374 	movhi	r2,4109
10009ac8:	10bd1404 	addi	r2,r2,-2992
10009acc:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
10009ad0:	00000306 	br	10009ae0 <___vfprintf_internal_r+0xcac>
		case 'x':
			xdigs = "0123456789abcdef";
10009ad4:	00840374 	movhi	r2,4109
10009ad8:	10bd0d04 	addi	r2,r2,-3020
10009adc:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
10009ae0:	9880080c 	andi	r2,r19,32
10009ae4:	10000826 	beq	r2,zero,10009b08 <___vfprintf_internal_r+0xcd4>
10009ae8:	e0bfe917 	ldw	r2,-92(fp)
10009aec:	10c00204 	addi	r3,r2,8
10009af0:	e0ffe915 	stw	r3,-92(fp)
10009af4:	10c00017 	ldw	r3,0(r2)
10009af8:	e0ffee15 	stw	r3,-72(fp)
10009afc:	10c00117 	ldw	r3,4(r2)
10009b00:	e0ffef15 	stw	r3,-68(fp)
10009b04:	00001e06 	br	10009b80 <___vfprintf_internal_r+0xd4c>
10009b08:	9880040c 	andi	r2,r19,16
10009b0c:	10000726 	beq	r2,zero,10009b2c <___vfprintf_internal_r+0xcf8>
10009b10:	e0bfe917 	ldw	r2,-92(fp)
10009b14:	10c00104 	addi	r3,r2,4
10009b18:	e0ffe915 	stw	r3,-92(fp)
10009b1c:	10800017 	ldw	r2,0(r2)
10009b20:	e0bfee15 	stw	r2,-72(fp)
10009b24:	e03fef15 	stw	zero,-68(fp)
10009b28:	00001506 	br	10009b80 <___vfprintf_internal_r+0xd4c>
10009b2c:	9880100c 	andi	r2,r19,64
10009b30:	10000d26 	beq	r2,zero,10009b68 <___vfprintf_internal_r+0xd34>
10009b34:	e0bfe917 	ldw	r2,-92(fp)
10009b38:	10c00104 	addi	r3,r2,4
10009b3c:	e0ffe915 	stw	r3,-92(fp)
10009b40:	10800017 	ldw	r2,0(r2)
10009b44:	e0bff615 	stw	r2,-40(fp)
10009b48:	e03ff715 	stw	zero,-36(fp)
10009b4c:	e0bff617 	ldw	r2,-40(fp)
10009b50:	10bfffcc 	andi	r2,r2,65535
10009b54:	e0bfee15 	stw	r2,-72(fp)
10009b58:	e0fff717 	ldw	r3,-36(fp)
10009b5c:	1806703a 	and	r3,r3,zero
10009b60:	e0ffef15 	stw	r3,-68(fp)
10009b64:	00000606 	br	10009b80 <___vfprintf_internal_r+0xd4c>
10009b68:	e0bfe917 	ldw	r2,-92(fp)
10009b6c:	10c00104 	addi	r3,r2,4
10009b70:	e0ffe915 	stw	r3,-92(fp)
10009b74:	10800017 	ldw	r2,0(r2)
10009b78:	e0bfee15 	stw	r2,-72(fp)
10009b7c:	e03fef15 	stw	zero,-68(fp)
10009b80:	e0bfee17 	ldw	r2,-72(fp)
10009b84:	e0bfb115 	stw	r2,-316(fp)
10009b88:	e0ffef17 	ldw	r3,-68(fp)
10009b8c:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
10009b90:	00800084 	movi	r2,2
10009b94:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
10009b98:	9880004c 	andi	r2,r19,1
10009b9c:	10000926 	beq	r2,zero,10009bc4 <___vfprintf_internal_r+0xd90>
10009ba0:	e0bfb117 	ldw	r2,-316(fp)
10009ba4:	e0ffb217 	ldw	r3,-312(fp)
10009ba8:	10c4b03a 	or	r2,r2,r3
10009bac:	10000526 	beq	r2,zero,10009bc4 <___vfprintf_internal_r+0xd90>
				ox[0] = '0';
10009bb0:	00800c04 	movi	r2,48
10009bb4:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
10009bb8:	a005883a 	mov	r2,r20
10009bbc:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
10009bc0:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
10009bc4:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
10009bc8:	e0bfae17 	ldw	r2,-328(fp)
10009bcc:	e0bfb415 	stw	r2,-304(fp)
10009bd0:	e0bfb417 	ldw	r2,-304(fp)
10009bd4:	10000216 	blt	r2,zero,10009be0 <___vfprintf_internal_r+0xdac>
				flags &= ~ZEROPAD;
10009bd8:	00bfdfc4 	movi	r2,-129
10009bdc:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
10009be0:	e4bfdb04 	addi	r18,fp,-148
10009be4:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
10009be8:	e0bfb117 	ldw	r2,-316(fp)
10009bec:	e0ffb217 	ldw	r3,-312(fp)
10009bf0:	10c4b03a 	or	r2,r2,r3
10009bf4:	1000021e 	bne	r2,zero,10009c00 <___vfprintf_internal_r+0xdcc>
10009bf8:	e0bfae17 	ldw	r2,-328(fp)
10009bfc:	10006c26 	beq	r2,zero,10009db0 <___vfprintf_internal_r+0xf7c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
10009c00:	e0bfb303 	ldbu	r2,-308(fp)
10009c04:	10c00060 	cmpeqi	r3,r2,1
10009c08:	1800211e 	bne	r3,zero,10009c90 <___vfprintf_internal_r+0xe5c>
10009c0c:	10c000a0 	cmpeqi	r3,r2,2
10009c10:	1800491e 	bne	r3,zero,10009d38 <___vfprintf_internal_r+0xf04>
10009c14:	10005d1e 	bne	r2,zero,10009d8c <___vfprintf_internal_r+0xf58>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
10009c18:	94bfffc4 	addi	r18,r18,-1
10009c1c:	e0bfb117 	ldw	r2,-316(fp)
10009c20:	108001cc 	andi	r2,r2,7
10009c24:	10800c04 	addi	r2,r2,48
10009c28:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
10009c2c:	e0bfb217 	ldw	r2,-312(fp)
10009c30:	1004977a 	slli	r2,r2,29
10009c34:	e0ffb117 	ldw	r3,-316(fp)
10009c38:	1806d0fa 	srli	r3,r3,3
10009c3c:	1884b03a 	or	r2,r3,r2
10009c40:	e0bfb115 	stw	r2,-316(fp)
10009c44:	e0bfb217 	ldw	r2,-312(fp)
10009c48:	1004d0fa 	srli	r2,r2,3
10009c4c:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
10009c50:	e0bfb117 	ldw	r2,-316(fp)
10009c54:	e0ffb217 	ldw	r3,-312(fp)
10009c58:	10c4b03a 	or	r2,r2,r3
10009c5c:	103fee1e 	bne	r2,zero,10009c18 <__alt_data_end+0xf8009c18>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
10009c60:	9880004c 	andi	r2,r19,1
10009c64:	10005026 	beq	r2,zero,10009da8 <___vfprintf_internal_r+0xf74>
10009c68:	90800003 	ldbu	r2,0(r18)
10009c6c:	10803fcc 	andi	r2,r2,255
10009c70:	1080201c 	xori	r2,r2,128
10009c74:	10bfe004 	addi	r2,r2,-128
10009c78:	10800c20 	cmpeqi	r2,r2,48
10009c7c:	10004a1e 	bne	r2,zero,10009da8 <___vfprintf_internal_r+0xf74>
						*--cp = '0';
10009c80:	94bfffc4 	addi	r18,r18,-1
10009c84:	00800c04 	movi	r2,48
10009c88:	90800005 	stb	r2,0(r18)
					break;
10009c8c:	00004606 	br	10009da8 <___vfprintf_internal_r+0xf74>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
10009c90:	e0bfb217 	ldw	r2,-312(fp)
10009c94:	10000a1e 	bne	r2,zero,10009cc0 <___vfprintf_internal_r+0xe8c>
10009c98:	e0bfb217 	ldw	r2,-312(fp)
10009c9c:	1000031e 	bne	r2,zero,10009cac <___vfprintf_internal_r+0xe78>
10009ca0:	e0bfb117 	ldw	r2,-316(fp)
10009ca4:	108002a8 	cmpgeui	r2,r2,10
10009ca8:	1000051e 	bne	r2,zero,10009cc0 <___vfprintf_internal_r+0xe8c>
						*--cp = to_char(_uquad);
10009cac:	94bfffc4 	addi	r18,r18,-1
10009cb0:	e0bfb117 	ldw	r2,-316(fp)
10009cb4:	10800c04 	addi	r2,r2,48
10009cb8:	90800005 	stb	r2,0(r18)
						break;
10009cbc:	00003b06 	br	10009dac <___vfprintf_internal_r+0xf78>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
10009cc0:	94bfffc4 	addi	r18,r18,-1
10009cc4:	e0bfb117 	ldw	r2,-316(fp)
10009cc8:	e0ffb217 	ldw	r3,-312(fp)
10009ccc:	01800284 	movi	r6,10
10009cd0:	000f883a 	mov	r7,zero
10009cd4:	1009883a 	mov	r4,r2
10009cd8:	180b883a 	mov	r5,r3
10009cdc:	00142500 	call	10014250 <__umoddi3>
10009ce0:	1009883a 	mov	r4,r2
10009ce4:	180b883a 	mov	r5,r3
10009ce8:	2005883a 	mov	r2,r4
10009cec:	2807883a 	mov	r3,r5
10009cf0:	10800c04 	addi	r2,r2,48
10009cf4:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
10009cf8:	e0bfb117 	ldw	r2,-316(fp)
10009cfc:	e0ffb217 	ldw	r3,-312(fp)
10009d00:	01800284 	movi	r6,10
10009d04:	000f883a 	mov	r7,zero
10009d08:	1009883a 	mov	r4,r2
10009d0c:	180b883a 	mov	r5,r3
10009d10:	0013c540 	call	10013c54 <__udivdi3>
10009d14:	1009883a 	mov	r4,r2
10009d18:	180b883a 	mov	r5,r3
10009d1c:	e13fb115 	stw	r4,-316(fp)
10009d20:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
10009d24:	e0bfb117 	ldw	r2,-316(fp)
10009d28:	e0ffb217 	ldw	r3,-312(fp)
10009d2c:	10c4b03a 	or	r2,r2,r3
10009d30:	103fe31e 	bne	r2,zero,10009cc0 <__alt_data_end+0xf8009cc0>
					break;
10009d34:	00001d06 	br	10009dac <___vfprintf_internal_r+0xf78>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
10009d38:	94bfffc4 	addi	r18,r18,-1
10009d3c:	e0bfb117 	ldw	r2,-316(fp)
10009d40:	108003cc 	andi	r2,r2,15
10009d44:	e0ffb717 	ldw	r3,-292(fp)
10009d48:	1885883a 	add	r2,r3,r2
10009d4c:	10800003 	ldbu	r2,0(r2)
10009d50:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
10009d54:	e0bfb217 	ldw	r2,-312(fp)
10009d58:	1004973a 	slli	r2,r2,28
10009d5c:	e0ffb117 	ldw	r3,-316(fp)
10009d60:	1806d13a 	srli	r3,r3,4
10009d64:	1884b03a 	or	r2,r3,r2
10009d68:	e0bfb115 	stw	r2,-316(fp)
10009d6c:	e0bfb217 	ldw	r2,-312(fp)
10009d70:	1004d13a 	srli	r2,r2,4
10009d74:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
10009d78:	e0bfb117 	ldw	r2,-316(fp)
10009d7c:	e0ffb217 	ldw	r3,-312(fp)
10009d80:	10c4b03a 	or	r2,r2,r3
10009d84:	103fec1e 	bne	r2,zero,10009d38 <__alt_data_end+0xf8009d38>
					break;
10009d88:	00000806 	br	10009dac <___vfprintf_internal_r+0xf78>

				default:
					cp = "bug in vfprintf: bad base";
10009d8c:	04840374 	movhi	r18,4109
10009d90:	94bd1904 	addi	r18,r18,-2972
					size = strlen (cp);
10009d94:	9009883a 	mov	r4,r18
10009d98:	00088540 	call	10008854 <strlen>
10009d9c:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
10009da0:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
10009da4:	00001906 	br	10009e0c <___vfprintf_internal_r+0xfd8>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
10009da8:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
10009dac:	00000706 	br	10009dcc <___vfprintf_internal_r+0xf98>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
10009db0:	e0bfb303 	ldbu	r2,-308(fp)
10009db4:	1000051e 	bne	r2,zero,10009dcc <___vfprintf_internal_r+0xf98>
10009db8:	9880004c 	andi	r2,r19,1
10009dbc:	10000326 	beq	r2,zero,10009dcc <___vfprintf_internal_r+0xf98>
                         *--cp = '0';
10009dc0:	94bfffc4 	addi	r18,r18,-1
10009dc4:	00800c04 	movi	r2,48
10009dc8:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
10009dcc:	e0bfdb04 	addi	r2,fp,-148
10009dd0:	10800a04 	addi	r2,r2,40
10009dd4:	1007883a 	mov	r3,r2
10009dd8:	9005883a 	mov	r2,r18
10009ddc:	1885c83a 	sub	r2,r3,r2
10009de0:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
10009de4:	00000906 	br	10009e0c <___vfprintf_internal_r+0xfd8>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
10009de8:	a003dc26 	beq	r20,zero,1000ad5c <___vfprintf_internal_r+0x1f28>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
10009dec:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
10009df0:	a005883a 	mov	r2,r20
10009df4:	90800005 	stb	r2,0(r18)
			size = 1;
10009df8:	00800044 	movi	r2,1
10009dfc:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
10009e00:	e03fc105 	stb	zero,-252(fp)
			break;
10009e04:	00000106 	br	10009e0c <___vfprintf_internal_r+0xfd8>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
10009e08:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
10009e0c:	e0ffb417 	ldw	r3,-304(fp)
10009e10:	e0bfb617 	ldw	r2,-296(fp)
10009e14:	10c0010e 	bge	r2,r3,10009e1c <___vfprintf_internal_r+0xfe8>
10009e18:	1805883a 	mov	r2,r3
10009e1c:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
10009e20:	e0bfc103 	ldbu	r2,-252(fp)
10009e24:	10803fcc 	andi	r2,r2,255
10009e28:	1080201c 	xori	r2,r2,128
10009e2c:	10bfe004 	addi	r2,r2,-128
10009e30:	10000326 	beq	r2,zero,10009e40 <___vfprintf_internal_r+0x100c>
			realsz++;
10009e34:	e0bfb517 	ldw	r2,-300(fp)
10009e38:	10800044 	addi	r2,r2,1
10009e3c:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
10009e40:	9880008c 	andi	r2,r19,2
10009e44:	10000326 	beq	r2,zero,10009e54 <___vfprintf_internal_r+0x1020>
			realsz+= 2;
10009e48:	e0bfb517 	ldw	r2,-300(fp)
10009e4c:	10800084 	addi	r2,r2,2
10009e50:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
10009e54:	9880210c 	andi	r2,r19,132
10009e58:	1000351e 	bne	r2,zero,10009f30 <___vfprintf_internal_r+0x10fc>
			PAD (width - realsz, blanks);
10009e5c:	e0ffad17 	ldw	r3,-332(fp)
10009e60:	e0bfb517 	ldw	r2,-300(fp)
10009e64:	18a1c83a 	sub	r16,r3,r2
10009e68:	0400310e 	bge	zero,r16,10009f30 <___vfprintf_internal_r+0x10fc>
10009e6c:	00001706 	br	10009ecc <___vfprintf_internal_r+0x1098>
10009e70:	00840374 	movhi	r2,4109
10009e74:	10bd2084 	addi	r2,r2,-2942
10009e78:	88800015 	stw	r2,0(r17)
10009e7c:	00800404 	movi	r2,16
10009e80:	88800115 	stw	r2,4(r17)
10009e84:	e0bfca17 	ldw	r2,-216(fp)
10009e88:	10800404 	addi	r2,r2,16
10009e8c:	e0bfca15 	stw	r2,-216(fp)
10009e90:	8c400204 	addi	r17,r17,8
10009e94:	e0bfc917 	ldw	r2,-220(fp)
10009e98:	10800044 	addi	r2,r2,1
10009e9c:	e0bfc915 	stw	r2,-220(fp)
10009ea0:	e0bfc917 	ldw	r2,-220(fp)
10009ea4:	10800210 	cmplti	r2,r2,8
10009ea8:	1000071e 	bne	r2,zero,10009ec8 <___vfprintf_internal_r+0x1094>
10009eac:	e0bfc804 	addi	r2,fp,-224
10009eb0:	100d883a 	mov	r6,r2
10009eb4:	e17fe717 	ldw	r5,-100(fp)
10009eb8:	e13fe617 	ldw	r4,-104(fp)
10009ebc:	0011b340 	call	10011b34 <__sprint_r>
10009ec0:	1003b41e 	bne	r2,zero,1000ad94 <___vfprintf_internal_r+0x1f60>
10009ec4:	e47fcb04 	addi	r17,fp,-212
10009ec8:	843ffc04 	addi	r16,r16,-16
10009ecc:	80800448 	cmpgei	r2,r16,17
10009ed0:	103fe71e 	bne	r2,zero,10009e70 <__alt_data_end+0xf8009e70>
10009ed4:	00840374 	movhi	r2,4109
10009ed8:	10bd2084 	addi	r2,r2,-2942
10009edc:	88800015 	stw	r2,0(r17)
10009ee0:	8005883a 	mov	r2,r16
10009ee4:	88800115 	stw	r2,4(r17)
10009ee8:	e0bfca17 	ldw	r2,-216(fp)
10009eec:	8007883a 	mov	r3,r16
10009ef0:	10c5883a 	add	r2,r2,r3
10009ef4:	e0bfca15 	stw	r2,-216(fp)
10009ef8:	8c400204 	addi	r17,r17,8
10009efc:	e0bfc917 	ldw	r2,-220(fp)
10009f00:	10800044 	addi	r2,r2,1
10009f04:	e0bfc915 	stw	r2,-220(fp)
10009f08:	e0bfc917 	ldw	r2,-220(fp)
10009f0c:	10800210 	cmplti	r2,r2,8
10009f10:	1000071e 	bne	r2,zero,10009f30 <___vfprintf_internal_r+0x10fc>
10009f14:	e0bfc804 	addi	r2,fp,-224
10009f18:	100d883a 	mov	r6,r2
10009f1c:	e17fe717 	ldw	r5,-100(fp)
10009f20:	e13fe617 	ldw	r4,-104(fp)
10009f24:	0011b340 	call	10011b34 <__sprint_r>
10009f28:	10039c1e 	bne	r2,zero,1000ad9c <___vfprintf_internal_r+0x1f68>
10009f2c:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
10009f30:	e0bfc103 	ldbu	r2,-252(fp)
10009f34:	10803fcc 	andi	r2,r2,255
10009f38:	1080201c 	xori	r2,r2,128
10009f3c:	10bfe004 	addi	r2,r2,-128
10009f40:	10001526 	beq	r2,zero,10009f98 <___vfprintf_internal_r+0x1164>
			PRINT (&sign, 1);
10009f44:	e0bfc104 	addi	r2,fp,-252
10009f48:	88800015 	stw	r2,0(r17)
10009f4c:	00800044 	movi	r2,1
10009f50:	88800115 	stw	r2,4(r17)
10009f54:	e0bfca17 	ldw	r2,-216(fp)
10009f58:	10800044 	addi	r2,r2,1
10009f5c:	e0bfca15 	stw	r2,-216(fp)
10009f60:	8c400204 	addi	r17,r17,8
10009f64:	e0bfc917 	ldw	r2,-220(fp)
10009f68:	10800044 	addi	r2,r2,1
10009f6c:	e0bfc915 	stw	r2,-220(fp)
10009f70:	e0bfc917 	ldw	r2,-220(fp)
10009f74:	10800210 	cmplti	r2,r2,8
10009f78:	1000071e 	bne	r2,zero,10009f98 <___vfprintf_internal_r+0x1164>
10009f7c:	e0bfc804 	addi	r2,fp,-224
10009f80:	100d883a 	mov	r6,r2
10009f84:	e17fe717 	ldw	r5,-100(fp)
10009f88:	e13fe617 	ldw	r4,-104(fp)
10009f8c:	0011b340 	call	10011b34 <__sprint_r>
10009f90:	1003841e 	bne	r2,zero,1000ada4 <___vfprintf_internal_r+0x1f70>
10009f94:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
10009f98:	9880008c 	andi	r2,r19,2
10009f9c:	10001526 	beq	r2,zero,10009ff4 <___vfprintf_internal_r+0x11c0>
			PRINT (ox, 2);
10009fa0:	e0bfe504 	addi	r2,fp,-108
10009fa4:	88800015 	stw	r2,0(r17)
10009fa8:	00800084 	movi	r2,2
10009fac:	88800115 	stw	r2,4(r17)
10009fb0:	e0bfca17 	ldw	r2,-216(fp)
10009fb4:	10800084 	addi	r2,r2,2
10009fb8:	e0bfca15 	stw	r2,-216(fp)
10009fbc:	8c400204 	addi	r17,r17,8
10009fc0:	e0bfc917 	ldw	r2,-220(fp)
10009fc4:	10800044 	addi	r2,r2,1
10009fc8:	e0bfc915 	stw	r2,-220(fp)
10009fcc:	e0bfc917 	ldw	r2,-220(fp)
10009fd0:	10800210 	cmplti	r2,r2,8
10009fd4:	1000071e 	bne	r2,zero,10009ff4 <___vfprintf_internal_r+0x11c0>
10009fd8:	e0bfc804 	addi	r2,fp,-224
10009fdc:	100d883a 	mov	r6,r2
10009fe0:	e17fe717 	ldw	r5,-100(fp)
10009fe4:	e13fe617 	ldw	r4,-104(fp)
10009fe8:	0011b340 	call	10011b34 <__sprint_r>
10009fec:	10036f1e 	bne	r2,zero,1000adac <___vfprintf_internal_r+0x1f78>
10009ff0:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
10009ff4:	9880210c 	andi	r2,r19,132
10009ff8:	10802018 	cmpnei	r2,r2,128
10009ffc:	1000351e 	bne	r2,zero,1000a0d4 <___vfprintf_internal_r+0x12a0>
			PAD (width - realsz, zeroes);
1000a000:	e0ffad17 	ldw	r3,-332(fp)
1000a004:	e0bfb517 	ldw	r2,-300(fp)
1000a008:	18a1c83a 	sub	r16,r3,r2
1000a00c:	0400310e 	bge	zero,r16,1000a0d4 <___vfprintf_internal_r+0x12a0>
1000a010:	00001706 	br	1000a070 <___vfprintf_internal_r+0x123c>
1000a014:	00840374 	movhi	r2,4109
1000a018:	10bd2484 	addi	r2,r2,-2926
1000a01c:	88800015 	stw	r2,0(r17)
1000a020:	00800404 	movi	r2,16
1000a024:	88800115 	stw	r2,4(r17)
1000a028:	e0bfca17 	ldw	r2,-216(fp)
1000a02c:	10800404 	addi	r2,r2,16
1000a030:	e0bfca15 	stw	r2,-216(fp)
1000a034:	8c400204 	addi	r17,r17,8
1000a038:	e0bfc917 	ldw	r2,-220(fp)
1000a03c:	10800044 	addi	r2,r2,1
1000a040:	e0bfc915 	stw	r2,-220(fp)
1000a044:	e0bfc917 	ldw	r2,-220(fp)
1000a048:	10800210 	cmplti	r2,r2,8
1000a04c:	1000071e 	bne	r2,zero,1000a06c <___vfprintf_internal_r+0x1238>
1000a050:	e0bfc804 	addi	r2,fp,-224
1000a054:	100d883a 	mov	r6,r2
1000a058:	e17fe717 	ldw	r5,-100(fp)
1000a05c:	e13fe617 	ldw	r4,-104(fp)
1000a060:	0011b340 	call	10011b34 <__sprint_r>
1000a064:	1003531e 	bne	r2,zero,1000adb4 <___vfprintf_internal_r+0x1f80>
1000a068:	e47fcb04 	addi	r17,fp,-212
1000a06c:	843ffc04 	addi	r16,r16,-16
1000a070:	80800448 	cmpgei	r2,r16,17
1000a074:	103fe71e 	bne	r2,zero,1000a014 <__alt_data_end+0xf800a014>
1000a078:	00840374 	movhi	r2,4109
1000a07c:	10bd2484 	addi	r2,r2,-2926
1000a080:	88800015 	stw	r2,0(r17)
1000a084:	8005883a 	mov	r2,r16
1000a088:	88800115 	stw	r2,4(r17)
1000a08c:	e0bfca17 	ldw	r2,-216(fp)
1000a090:	8007883a 	mov	r3,r16
1000a094:	10c5883a 	add	r2,r2,r3
1000a098:	e0bfca15 	stw	r2,-216(fp)
1000a09c:	8c400204 	addi	r17,r17,8
1000a0a0:	e0bfc917 	ldw	r2,-220(fp)
1000a0a4:	10800044 	addi	r2,r2,1
1000a0a8:	e0bfc915 	stw	r2,-220(fp)
1000a0ac:	e0bfc917 	ldw	r2,-220(fp)
1000a0b0:	10800210 	cmplti	r2,r2,8
1000a0b4:	1000071e 	bne	r2,zero,1000a0d4 <___vfprintf_internal_r+0x12a0>
1000a0b8:	e0bfc804 	addi	r2,fp,-224
1000a0bc:	100d883a 	mov	r6,r2
1000a0c0:	e17fe717 	ldw	r5,-100(fp)
1000a0c4:	e13fe617 	ldw	r4,-104(fp)
1000a0c8:	0011b340 	call	10011b34 <__sprint_r>
1000a0cc:	10033b1e 	bne	r2,zero,1000adbc <___vfprintf_internal_r+0x1f88>
1000a0d0:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
1000a0d4:	e0ffb417 	ldw	r3,-304(fp)
1000a0d8:	e0bfb617 	ldw	r2,-296(fp)
1000a0dc:	18a1c83a 	sub	r16,r3,r2
1000a0e0:	0400310e 	bge	zero,r16,1000a1a8 <___vfprintf_internal_r+0x1374>
1000a0e4:	00001706 	br	1000a144 <___vfprintf_internal_r+0x1310>
1000a0e8:	00840374 	movhi	r2,4109
1000a0ec:	10bd2484 	addi	r2,r2,-2926
1000a0f0:	88800015 	stw	r2,0(r17)
1000a0f4:	00800404 	movi	r2,16
1000a0f8:	88800115 	stw	r2,4(r17)
1000a0fc:	e0bfca17 	ldw	r2,-216(fp)
1000a100:	10800404 	addi	r2,r2,16
1000a104:	e0bfca15 	stw	r2,-216(fp)
1000a108:	8c400204 	addi	r17,r17,8
1000a10c:	e0bfc917 	ldw	r2,-220(fp)
1000a110:	10800044 	addi	r2,r2,1
1000a114:	e0bfc915 	stw	r2,-220(fp)
1000a118:	e0bfc917 	ldw	r2,-220(fp)
1000a11c:	10800210 	cmplti	r2,r2,8
1000a120:	1000071e 	bne	r2,zero,1000a140 <___vfprintf_internal_r+0x130c>
1000a124:	e0bfc804 	addi	r2,fp,-224
1000a128:	100d883a 	mov	r6,r2
1000a12c:	e17fe717 	ldw	r5,-100(fp)
1000a130:	e13fe617 	ldw	r4,-104(fp)
1000a134:	0011b340 	call	10011b34 <__sprint_r>
1000a138:	1003221e 	bne	r2,zero,1000adc4 <___vfprintf_internal_r+0x1f90>
1000a13c:	e47fcb04 	addi	r17,fp,-212
1000a140:	843ffc04 	addi	r16,r16,-16
1000a144:	80800448 	cmpgei	r2,r16,17
1000a148:	103fe71e 	bne	r2,zero,1000a0e8 <__alt_data_end+0xf800a0e8>
1000a14c:	00840374 	movhi	r2,4109
1000a150:	10bd2484 	addi	r2,r2,-2926
1000a154:	88800015 	stw	r2,0(r17)
1000a158:	8005883a 	mov	r2,r16
1000a15c:	88800115 	stw	r2,4(r17)
1000a160:	e0bfca17 	ldw	r2,-216(fp)
1000a164:	8007883a 	mov	r3,r16
1000a168:	10c5883a 	add	r2,r2,r3
1000a16c:	e0bfca15 	stw	r2,-216(fp)
1000a170:	8c400204 	addi	r17,r17,8
1000a174:	e0bfc917 	ldw	r2,-220(fp)
1000a178:	10800044 	addi	r2,r2,1
1000a17c:	e0bfc915 	stw	r2,-220(fp)
1000a180:	e0bfc917 	ldw	r2,-220(fp)
1000a184:	10800210 	cmplti	r2,r2,8
1000a188:	1000071e 	bne	r2,zero,1000a1a8 <___vfprintf_internal_r+0x1374>
1000a18c:	e0bfc804 	addi	r2,fp,-224
1000a190:	100d883a 	mov	r6,r2
1000a194:	e17fe717 	ldw	r5,-100(fp)
1000a198:	e13fe617 	ldw	r4,-104(fp)
1000a19c:	0011b340 	call	10011b34 <__sprint_r>
1000a1a0:	10030a1e 	bne	r2,zero,1000adcc <___vfprintf_internal_r+0x1f98>
1000a1a4:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
1000a1a8:	9880400c 	andi	r2,r19,256
1000a1ac:	1000161e 	bne	r2,zero,1000a208 <___vfprintf_internal_r+0x13d4>
			PRINT (cp, size);
1000a1b0:	8c800015 	stw	r18,0(r17)
1000a1b4:	e0bfb617 	ldw	r2,-296(fp)
1000a1b8:	88800115 	stw	r2,4(r17)
1000a1bc:	e0ffca17 	ldw	r3,-216(fp)
1000a1c0:	e0bfb617 	ldw	r2,-296(fp)
1000a1c4:	1885883a 	add	r2,r3,r2
1000a1c8:	e0bfca15 	stw	r2,-216(fp)
1000a1cc:	8c400204 	addi	r17,r17,8
1000a1d0:	e0bfc917 	ldw	r2,-220(fp)
1000a1d4:	10800044 	addi	r2,r2,1
1000a1d8:	e0bfc915 	stw	r2,-220(fp)
1000a1dc:	e0bfc917 	ldw	r2,-220(fp)
1000a1e0:	10800210 	cmplti	r2,r2,8
1000a1e4:	10028c1e 	bne	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
1000a1e8:	e0bfc804 	addi	r2,fp,-224
1000a1ec:	100d883a 	mov	r6,r2
1000a1f0:	e17fe717 	ldw	r5,-100(fp)
1000a1f4:	e13fe617 	ldw	r4,-104(fp)
1000a1f8:	0011b340 	call	10011b34 <__sprint_r>
1000a1fc:	1002f51e 	bne	r2,zero,1000add4 <___vfprintf_internal_r+0x1fa0>
1000a200:	e47fcb04 	addi	r17,fp,-212
1000a204:	00028406 	br	1000ac18 <___vfprintf_internal_r+0x1de4>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
1000a208:	a0801990 	cmplti	r2,r20,102
1000a20c:	1001d11e 	bne	r2,zero,1000a954 <___vfprintf_internal_r+0x1b20>
				if (_fpvalue == 0) {
1000a210:	e0bfc217 	ldw	r2,-248(fp)
1000a214:	e0ffc317 	ldw	r3,-244(fp)
1000a218:	000d883a 	mov	r6,zero
1000a21c:	000f883a 	mov	r7,zero
1000a220:	1009883a 	mov	r4,r2
1000a224:	180b883a 	mov	r5,r3
1000a228:	00151e40 	call	100151e4 <__eqdf2>
1000a22c:	1000661e 	bne	r2,zero,1000a3c8 <___vfprintf_internal_r+0x1594>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
1000a230:	00840374 	movhi	r2,4109
1000a234:	10bd2004 	addi	r2,r2,-2944
1000a238:	88800015 	stw	r2,0(r17)
1000a23c:	00800044 	movi	r2,1
1000a240:	88800115 	stw	r2,4(r17)
1000a244:	e0bfca17 	ldw	r2,-216(fp)
1000a248:	10800044 	addi	r2,r2,1
1000a24c:	e0bfca15 	stw	r2,-216(fp)
1000a250:	8c400204 	addi	r17,r17,8
1000a254:	e0bfc917 	ldw	r2,-220(fp)
1000a258:	10800044 	addi	r2,r2,1
1000a25c:	e0bfc915 	stw	r2,-220(fp)
1000a260:	e0bfc917 	ldw	r2,-220(fp)
1000a264:	10800210 	cmplti	r2,r2,8
1000a268:	1000071e 	bne	r2,zero,1000a288 <___vfprintf_internal_r+0x1454>
1000a26c:	e0bfc804 	addi	r2,fp,-224
1000a270:	100d883a 	mov	r6,r2
1000a274:	e17fe717 	ldw	r5,-100(fp)
1000a278:	e13fe617 	ldw	r4,-104(fp)
1000a27c:	0011b340 	call	10011b34 <__sprint_r>
1000a280:	1002d61e 	bne	r2,zero,1000addc <___vfprintf_internal_r+0x1fa8>
1000a284:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
1000a288:	e0ffc417 	ldw	r3,-240(fp)
1000a28c:	e0bfc717 	ldw	r2,-228(fp)
1000a290:	18800216 	blt	r3,r2,1000a29c <___vfprintf_internal_r+0x1468>
1000a294:	9880004c 	andi	r2,r19,1
1000a298:	10025f26 	beq	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
1000a29c:	e0bfbb17 	ldw	r2,-276(fp)
1000a2a0:	88800015 	stw	r2,0(r17)
1000a2a4:	e0bfbc17 	ldw	r2,-272(fp)
1000a2a8:	88800115 	stw	r2,4(r17)
1000a2ac:	e0ffca17 	ldw	r3,-216(fp)
1000a2b0:	e0bfbc17 	ldw	r2,-272(fp)
1000a2b4:	1885883a 	add	r2,r3,r2
1000a2b8:	e0bfca15 	stw	r2,-216(fp)
1000a2bc:	8c400204 	addi	r17,r17,8
1000a2c0:	e0bfc917 	ldw	r2,-220(fp)
1000a2c4:	10800044 	addi	r2,r2,1
1000a2c8:	e0bfc915 	stw	r2,-220(fp)
1000a2cc:	e0bfc917 	ldw	r2,-220(fp)
1000a2d0:	10800210 	cmplti	r2,r2,8
1000a2d4:	1000071e 	bne	r2,zero,1000a2f4 <___vfprintf_internal_r+0x14c0>
1000a2d8:	e0bfc804 	addi	r2,fp,-224
1000a2dc:	100d883a 	mov	r6,r2
1000a2e0:	e17fe717 	ldw	r5,-100(fp)
1000a2e4:	e13fe617 	ldw	r4,-104(fp)
1000a2e8:	0011b340 	call	10011b34 <__sprint_r>
1000a2ec:	1002bd1e 	bne	r2,zero,1000ade4 <___vfprintf_internal_r+0x1fb0>
1000a2f0:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
1000a2f4:	e0bfc717 	ldw	r2,-228(fp)
1000a2f8:	143fffc4 	addi	r16,r2,-1
1000a2fc:	0402460e 	bge	zero,r16,1000ac18 <___vfprintf_internal_r+0x1de4>
1000a300:	00001706 	br	1000a360 <___vfprintf_internal_r+0x152c>
1000a304:	00840374 	movhi	r2,4109
1000a308:	10bd2484 	addi	r2,r2,-2926
1000a30c:	88800015 	stw	r2,0(r17)
1000a310:	00800404 	movi	r2,16
1000a314:	88800115 	stw	r2,4(r17)
1000a318:	e0bfca17 	ldw	r2,-216(fp)
1000a31c:	10800404 	addi	r2,r2,16
1000a320:	e0bfca15 	stw	r2,-216(fp)
1000a324:	8c400204 	addi	r17,r17,8
1000a328:	e0bfc917 	ldw	r2,-220(fp)
1000a32c:	10800044 	addi	r2,r2,1
1000a330:	e0bfc915 	stw	r2,-220(fp)
1000a334:	e0bfc917 	ldw	r2,-220(fp)
1000a338:	10800210 	cmplti	r2,r2,8
1000a33c:	1000071e 	bne	r2,zero,1000a35c <___vfprintf_internal_r+0x1528>
1000a340:	e0bfc804 	addi	r2,fp,-224
1000a344:	100d883a 	mov	r6,r2
1000a348:	e17fe717 	ldw	r5,-100(fp)
1000a34c:	e13fe617 	ldw	r4,-104(fp)
1000a350:	0011b340 	call	10011b34 <__sprint_r>
1000a354:	1002a51e 	bne	r2,zero,1000adec <___vfprintf_internal_r+0x1fb8>
1000a358:	e47fcb04 	addi	r17,fp,-212
1000a35c:	843ffc04 	addi	r16,r16,-16
1000a360:	80800448 	cmpgei	r2,r16,17
1000a364:	103fe71e 	bne	r2,zero,1000a304 <__alt_data_end+0xf800a304>
1000a368:	00840374 	movhi	r2,4109
1000a36c:	10bd2484 	addi	r2,r2,-2926
1000a370:	88800015 	stw	r2,0(r17)
1000a374:	8005883a 	mov	r2,r16
1000a378:	88800115 	stw	r2,4(r17)
1000a37c:	e0bfca17 	ldw	r2,-216(fp)
1000a380:	8007883a 	mov	r3,r16
1000a384:	10c5883a 	add	r2,r2,r3
1000a388:	e0bfca15 	stw	r2,-216(fp)
1000a38c:	8c400204 	addi	r17,r17,8
1000a390:	e0bfc917 	ldw	r2,-220(fp)
1000a394:	10800044 	addi	r2,r2,1
1000a398:	e0bfc915 	stw	r2,-220(fp)
1000a39c:	e0bfc917 	ldw	r2,-220(fp)
1000a3a0:	10800210 	cmplti	r2,r2,8
1000a3a4:	10021c1e 	bne	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
1000a3a8:	e0bfc804 	addi	r2,fp,-224
1000a3ac:	100d883a 	mov	r6,r2
1000a3b0:	e17fe717 	ldw	r5,-100(fp)
1000a3b4:	e13fe617 	ldw	r4,-104(fp)
1000a3b8:	0011b340 	call	10011b34 <__sprint_r>
1000a3bc:	10028d1e 	bne	r2,zero,1000adf4 <___vfprintf_internal_r+0x1fc0>
1000a3c0:	e47fcb04 	addi	r17,fp,-212
1000a3c4:	00021406 	br	1000ac18 <___vfprintf_internal_r+0x1de4>
					}
				} else if (expt <= 0) {
1000a3c8:	e0bfc417 	ldw	r2,-240(fp)
1000a3cc:	00807c16 	blt	zero,r2,1000a5c0 <___vfprintf_internal_r+0x178c>
					PRINT ("0", 1);
1000a3d0:	00840374 	movhi	r2,4109
1000a3d4:	10bd2004 	addi	r2,r2,-2944
1000a3d8:	88800015 	stw	r2,0(r17)
1000a3dc:	00800044 	movi	r2,1
1000a3e0:	88800115 	stw	r2,4(r17)
1000a3e4:	e0bfca17 	ldw	r2,-216(fp)
1000a3e8:	10800044 	addi	r2,r2,1
1000a3ec:	e0bfca15 	stw	r2,-216(fp)
1000a3f0:	8c400204 	addi	r17,r17,8
1000a3f4:	e0bfc917 	ldw	r2,-220(fp)
1000a3f8:	10800044 	addi	r2,r2,1
1000a3fc:	e0bfc915 	stw	r2,-220(fp)
1000a400:	e0bfc917 	ldw	r2,-220(fp)
1000a404:	10800210 	cmplti	r2,r2,8
1000a408:	1000071e 	bne	r2,zero,1000a428 <___vfprintf_internal_r+0x15f4>
1000a40c:	e0bfc804 	addi	r2,fp,-224
1000a410:	100d883a 	mov	r6,r2
1000a414:	e17fe717 	ldw	r5,-100(fp)
1000a418:	e13fe617 	ldw	r4,-104(fp)
1000a41c:	0011b340 	call	10011b34 <__sprint_r>
1000a420:	1002761e 	bne	r2,zero,1000adfc <___vfprintf_internal_r+0x1fc8>
1000a424:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
1000a428:	e0bfc417 	ldw	r2,-240(fp)
1000a42c:	1000041e 	bne	r2,zero,1000a440 <___vfprintf_internal_r+0x160c>
1000a430:	e0bfc717 	ldw	r2,-228(fp)
1000a434:	1000021e 	bne	r2,zero,1000a440 <___vfprintf_internal_r+0x160c>
1000a438:	9880004c 	andi	r2,r19,1
1000a43c:	1001f626 	beq	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
1000a440:	e0bfbb17 	ldw	r2,-276(fp)
1000a444:	88800015 	stw	r2,0(r17)
1000a448:	e0bfbc17 	ldw	r2,-272(fp)
1000a44c:	88800115 	stw	r2,4(r17)
1000a450:	e0ffca17 	ldw	r3,-216(fp)
1000a454:	e0bfbc17 	ldw	r2,-272(fp)
1000a458:	1885883a 	add	r2,r3,r2
1000a45c:	e0bfca15 	stw	r2,-216(fp)
1000a460:	8c400204 	addi	r17,r17,8
1000a464:	e0bfc917 	ldw	r2,-220(fp)
1000a468:	10800044 	addi	r2,r2,1
1000a46c:	e0bfc915 	stw	r2,-220(fp)
1000a470:	e0bfc917 	ldw	r2,-220(fp)
1000a474:	10800210 	cmplti	r2,r2,8
1000a478:	1000071e 	bne	r2,zero,1000a498 <___vfprintf_internal_r+0x1664>
1000a47c:	e0bfc804 	addi	r2,fp,-224
1000a480:	100d883a 	mov	r6,r2
1000a484:	e17fe717 	ldw	r5,-100(fp)
1000a488:	e13fe617 	ldw	r4,-104(fp)
1000a48c:	0011b340 	call	10011b34 <__sprint_r>
1000a490:	10025c1e 	bne	r2,zero,1000ae04 <___vfprintf_internal_r+0x1fd0>
1000a494:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
1000a498:	e0bfc417 	ldw	r2,-240(fp)
1000a49c:	00a1c83a 	sub	r16,zero,r2
1000a4a0:	0400310e 	bge	zero,r16,1000a568 <___vfprintf_internal_r+0x1734>
1000a4a4:	00001706 	br	1000a504 <___vfprintf_internal_r+0x16d0>
1000a4a8:	00840374 	movhi	r2,4109
1000a4ac:	10bd2484 	addi	r2,r2,-2926
1000a4b0:	88800015 	stw	r2,0(r17)
1000a4b4:	00800404 	movi	r2,16
1000a4b8:	88800115 	stw	r2,4(r17)
1000a4bc:	e0bfca17 	ldw	r2,-216(fp)
1000a4c0:	10800404 	addi	r2,r2,16
1000a4c4:	e0bfca15 	stw	r2,-216(fp)
1000a4c8:	8c400204 	addi	r17,r17,8
1000a4cc:	e0bfc917 	ldw	r2,-220(fp)
1000a4d0:	10800044 	addi	r2,r2,1
1000a4d4:	e0bfc915 	stw	r2,-220(fp)
1000a4d8:	e0bfc917 	ldw	r2,-220(fp)
1000a4dc:	10800210 	cmplti	r2,r2,8
1000a4e0:	1000071e 	bne	r2,zero,1000a500 <___vfprintf_internal_r+0x16cc>
1000a4e4:	e0bfc804 	addi	r2,fp,-224
1000a4e8:	100d883a 	mov	r6,r2
1000a4ec:	e17fe717 	ldw	r5,-100(fp)
1000a4f0:	e13fe617 	ldw	r4,-104(fp)
1000a4f4:	0011b340 	call	10011b34 <__sprint_r>
1000a4f8:	1002441e 	bne	r2,zero,1000ae0c <___vfprintf_internal_r+0x1fd8>
1000a4fc:	e47fcb04 	addi	r17,fp,-212
1000a500:	843ffc04 	addi	r16,r16,-16
1000a504:	80800448 	cmpgei	r2,r16,17
1000a508:	103fe71e 	bne	r2,zero,1000a4a8 <__alt_data_end+0xf800a4a8>
1000a50c:	00840374 	movhi	r2,4109
1000a510:	10bd2484 	addi	r2,r2,-2926
1000a514:	88800015 	stw	r2,0(r17)
1000a518:	8005883a 	mov	r2,r16
1000a51c:	88800115 	stw	r2,4(r17)
1000a520:	e0bfca17 	ldw	r2,-216(fp)
1000a524:	8007883a 	mov	r3,r16
1000a528:	10c5883a 	add	r2,r2,r3
1000a52c:	e0bfca15 	stw	r2,-216(fp)
1000a530:	8c400204 	addi	r17,r17,8
1000a534:	e0bfc917 	ldw	r2,-220(fp)
1000a538:	10800044 	addi	r2,r2,1
1000a53c:	e0bfc915 	stw	r2,-220(fp)
1000a540:	e0bfc917 	ldw	r2,-220(fp)
1000a544:	10800210 	cmplti	r2,r2,8
1000a548:	1000071e 	bne	r2,zero,1000a568 <___vfprintf_internal_r+0x1734>
1000a54c:	e0bfc804 	addi	r2,fp,-224
1000a550:	100d883a 	mov	r6,r2
1000a554:	e17fe717 	ldw	r5,-100(fp)
1000a558:	e13fe617 	ldw	r4,-104(fp)
1000a55c:	0011b340 	call	10011b34 <__sprint_r>
1000a560:	10022c1e 	bne	r2,zero,1000ae14 <___vfprintf_internal_r+0x1fe0>
1000a564:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
1000a568:	8c800015 	stw	r18,0(r17)
1000a56c:	e0bfc717 	ldw	r2,-228(fp)
1000a570:	88800115 	stw	r2,4(r17)
1000a574:	e0bfca17 	ldw	r2,-216(fp)
1000a578:	e0ffc717 	ldw	r3,-228(fp)
1000a57c:	10c5883a 	add	r2,r2,r3
1000a580:	e0bfca15 	stw	r2,-216(fp)
1000a584:	8c400204 	addi	r17,r17,8
1000a588:	e0bfc917 	ldw	r2,-220(fp)
1000a58c:	10800044 	addi	r2,r2,1
1000a590:	e0bfc915 	stw	r2,-220(fp)
1000a594:	e0bfc917 	ldw	r2,-220(fp)
1000a598:	10800210 	cmplti	r2,r2,8
1000a59c:	10019e1e 	bne	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
1000a5a0:	e0bfc804 	addi	r2,fp,-224
1000a5a4:	100d883a 	mov	r6,r2
1000a5a8:	e17fe717 	ldw	r5,-100(fp)
1000a5ac:	e13fe617 	ldw	r4,-104(fp)
1000a5b0:	0011b340 	call	10011b34 <__sprint_r>
1000a5b4:	1002191e 	bne	r2,zero,1000ae1c <___vfprintf_internal_r+0x1fe8>
1000a5b8:	e47fcb04 	addi	r17,fp,-212
1000a5bc:	00019606 	br	1000ac18 <___vfprintf_internal_r+0x1de4>
					}
				} else {
					char *convbuf = cp;
1000a5c0:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
1000a5c4:	e0bfc717 	ldw	r2,-228(fp)
1000a5c8:	1007883a 	mov	r3,r2
1000a5cc:	e0bfc017 	ldw	r2,-256(fp)
1000a5d0:	10c5883a 	add	r2,r2,r3
1000a5d4:	1007883a 	mov	r3,r2
1000a5d8:	9005883a 	mov	r2,r18
1000a5dc:	1885c83a 	sub	r2,r3,r2
1000a5e0:	e0bfb915 	stw	r2,-284(fp)
1000a5e4:	e0bfb917 	ldw	r2,-284(fp)
1000a5e8:	e0ffb017 	ldw	r3,-320(fp)
1000a5ec:	1880020e 	bge	r3,r2,1000a5f8 <___vfprintf_internal_r+0x17c4>
1000a5f0:	e0bfb017 	ldw	r2,-320(fp)
1000a5f4:	e0bfb915 	stw	r2,-284(fp)
1000a5f8:	e0bfb917 	ldw	r2,-284(fp)
1000a5fc:	0080150e 	bge	zero,r2,1000a654 <___vfprintf_internal_r+0x1820>
1000a600:	8c800015 	stw	r18,0(r17)
1000a604:	e0bfb917 	ldw	r2,-284(fp)
1000a608:	88800115 	stw	r2,4(r17)
1000a60c:	e0ffca17 	ldw	r3,-216(fp)
1000a610:	e0bfb917 	ldw	r2,-284(fp)
1000a614:	1885883a 	add	r2,r3,r2
1000a618:	e0bfca15 	stw	r2,-216(fp)
1000a61c:	8c400204 	addi	r17,r17,8
1000a620:	e0bfc917 	ldw	r2,-220(fp)
1000a624:	10800044 	addi	r2,r2,1
1000a628:	e0bfc915 	stw	r2,-220(fp)
1000a62c:	e0bfc917 	ldw	r2,-220(fp)
1000a630:	10800210 	cmplti	r2,r2,8
1000a634:	1000071e 	bne	r2,zero,1000a654 <___vfprintf_internal_r+0x1820>
1000a638:	e0bfc804 	addi	r2,fp,-224
1000a63c:	100d883a 	mov	r6,r2
1000a640:	e17fe717 	ldw	r5,-100(fp)
1000a644:	e13fe617 	ldw	r4,-104(fp)
1000a648:	0011b340 	call	10011b34 <__sprint_r>
1000a64c:	1001f51e 	bne	r2,zero,1000ae24 <___vfprintf_internal_r+0x1ff0>
1000a650:	e47fcb04 	addi	r17,fp,-212
1000a654:	e0bfb917 	ldw	r2,-284(fp)
1000a658:	1000010e 	bge	r2,zero,1000a660 <___vfprintf_internal_r+0x182c>
1000a65c:	0005883a 	mov	r2,zero
1000a660:	e0ffb017 	ldw	r3,-320(fp)
1000a664:	1885c83a 	sub	r2,r3,r2
1000a668:	e0bfb915 	stw	r2,-284(fp)
1000a66c:	e0bfb917 	ldw	r2,-284(fp)
1000a670:	0080340e 	bge	zero,r2,1000a744 <___vfprintf_internal_r+0x1910>
1000a674:	00001906 	br	1000a6dc <___vfprintf_internal_r+0x18a8>
1000a678:	00840374 	movhi	r2,4109
1000a67c:	10bd2484 	addi	r2,r2,-2926
1000a680:	88800015 	stw	r2,0(r17)
1000a684:	00800404 	movi	r2,16
1000a688:	88800115 	stw	r2,4(r17)
1000a68c:	e0bfca17 	ldw	r2,-216(fp)
1000a690:	10800404 	addi	r2,r2,16
1000a694:	e0bfca15 	stw	r2,-216(fp)
1000a698:	8c400204 	addi	r17,r17,8
1000a69c:	e0bfc917 	ldw	r2,-220(fp)
1000a6a0:	10800044 	addi	r2,r2,1
1000a6a4:	e0bfc915 	stw	r2,-220(fp)
1000a6a8:	e0bfc917 	ldw	r2,-220(fp)
1000a6ac:	10800210 	cmplti	r2,r2,8
1000a6b0:	1000071e 	bne	r2,zero,1000a6d0 <___vfprintf_internal_r+0x189c>
1000a6b4:	e0bfc804 	addi	r2,fp,-224
1000a6b8:	100d883a 	mov	r6,r2
1000a6bc:	e17fe717 	ldw	r5,-100(fp)
1000a6c0:	e13fe617 	ldw	r4,-104(fp)
1000a6c4:	0011b340 	call	10011b34 <__sprint_r>
1000a6c8:	1001d81e 	bne	r2,zero,1000ae2c <___vfprintf_internal_r+0x1ff8>
1000a6cc:	e47fcb04 	addi	r17,fp,-212
1000a6d0:	e0bfb917 	ldw	r2,-284(fp)
1000a6d4:	10bffc04 	addi	r2,r2,-16
1000a6d8:	e0bfb915 	stw	r2,-284(fp)
1000a6dc:	e0bfb917 	ldw	r2,-284(fp)
1000a6e0:	10800448 	cmpgei	r2,r2,17
1000a6e4:	103fe41e 	bne	r2,zero,1000a678 <__alt_data_end+0xf800a678>
1000a6e8:	00840374 	movhi	r2,4109
1000a6ec:	10bd2484 	addi	r2,r2,-2926
1000a6f0:	88800015 	stw	r2,0(r17)
1000a6f4:	e0bfb917 	ldw	r2,-284(fp)
1000a6f8:	88800115 	stw	r2,4(r17)
1000a6fc:	e0ffca17 	ldw	r3,-216(fp)
1000a700:	e0bfb917 	ldw	r2,-284(fp)
1000a704:	1885883a 	add	r2,r3,r2
1000a708:	e0bfca15 	stw	r2,-216(fp)
1000a70c:	8c400204 	addi	r17,r17,8
1000a710:	e0bfc917 	ldw	r2,-220(fp)
1000a714:	10800044 	addi	r2,r2,1
1000a718:	e0bfc915 	stw	r2,-220(fp)
1000a71c:	e0bfc917 	ldw	r2,-220(fp)
1000a720:	10800210 	cmplti	r2,r2,8
1000a724:	1000071e 	bne	r2,zero,1000a744 <___vfprintf_internal_r+0x1910>
1000a728:	e0bfc804 	addi	r2,fp,-224
1000a72c:	100d883a 	mov	r6,r2
1000a730:	e17fe717 	ldw	r5,-100(fp)
1000a734:	e13fe617 	ldw	r4,-104(fp)
1000a738:	0011b340 	call	10011b34 <__sprint_r>
1000a73c:	1001bd1e 	bne	r2,zero,1000ae34 <___vfprintf_internal_r+0x2000>
1000a740:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
1000a744:	e0bfb017 	ldw	r2,-320(fp)
1000a748:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
1000a74c:	e0ffc417 	ldw	r3,-240(fp)
1000a750:	e0bfc717 	ldw	r2,-228(fp)
1000a754:	18800216 	blt	r3,r2,1000a760 <___vfprintf_internal_r+0x192c>
1000a758:	9880004c 	andi	r2,r19,1
1000a75c:	10001626 	beq	r2,zero,1000a7b8 <___vfprintf_internal_r+0x1984>
					    PRINT (decimal_point, decp_len);
1000a760:	e0bfbb17 	ldw	r2,-276(fp)
1000a764:	88800015 	stw	r2,0(r17)
1000a768:	e0bfbc17 	ldw	r2,-272(fp)
1000a76c:	88800115 	stw	r2,4(r17)
1000a770:	e0ffca17 	ldw	r3,-216(fp)
1000a774:	e0bfbc17 	ldw	r2,-272(fp)
1000a778:	1885883a 	add	r2,r3,r2
1000a77c:	e0bfca15 	stw	r2,-216(fp)
1000a780:	8c400204 	addi	r17,r17,8
1000a784:	e0bfc917 	ldw	r2,-220(fp)
1000a788:	10800044 	addi	r2,r2,1
1000a78c:	e0bfc915 	stw	r2,-220(fp)
1000a790:	e0bfc917 	ldw	r2,-220(fp)
1000a794:	10800210 	cmplti	r2,r2,8
1000a798:	1000071e 	bne	r2,zero,1000a7b8 <___vfprintf_internal_r+0x1984>
1000a79c:	e0bfc804 	addi	r2,fp,-224
1000a7a0:	100d883a 	mov	r6,r2
1000a7a4:	e17fe717 	ldw	r5,-100(fp)
1000a7a8:	e13fe617 	ldw	r4,-104(fp)
1000a7ac:	0011b340 	call	10011b34 <__sprint_r>
1000a7b0:	1001a21e 	bne	r2,zero,1000ae3c <___vfprintf_internal_r+0x2008>
1000a7b4:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
1000a7b8:	e0bfc717 	ldw	r2,-228(fp)
1000a7bc:	1007883a 	mov	r3,r2
1000a7c0:	e0bfc017 	ldw	r2,-256(fp)
1000a7c4:	10c5883a 	add	r2,r2,r3
1000a7c8:	1007883a 	mov	r3,r2
1000a7cc:	9005883a 	mov	r2,r18
1000a7d0:	1885c83a 	sub	r2,r3,r2
1000a7d4:	e0bfba15 	stw	r2,-280(fp)
1000a7d8:	e0ffc717 	ldw	r3,-228(fp)
1000a7dc:	e0bfc417 	ldw	r2,-240(fp)
1000a7e0:	1887c83a 	sub	r3,r3,r2
1000a7e4:	e0bfba17 	ldw	r2,-280(fp)
1000a7e8:	1880040e 	bge	r3,r2,1000a7fc <___vfprintf_internal_r+0x19c8>
1000a7ec:	e0ffc717 	ldw	r3,-228(fp)
1000a7f0:	e0bfc417 	ldw	r2,-240(fp)
1000a7f4:	1885c83a 	sub	r2,r3,r2
1000a7f8:	e0bfba15 	stw	r2,-280(fp)
1000a7fc:	e0bfba17 	ldw	r2,-280(fp)
1000a800:	0080150e 	bge	zero,r2,1000a858 <___vfprintf_internal_r+0x1a24>
1000a804:	8c800015 	stw	r18,0(r17)
1000a808:	e0bfba17 	ldw	r2,-280(fp)
1000a80c:	88800115 	stw	r2,4(r17)
1000a810:	e0ffca17 	ldw	r3,-216(fp)
1000a814:	e0bfba17 	ldw	r2,-280(fp)
1000a818:	1885883a 	add	r2,r3,r2
1000a81c:	e0bfca15 	stw	r2,-216(fp)
1000a820:	8c400204 	addi	r17,r17,8
1000a824:	e0bfc917 	ldw	r2,-220(fp)
1000a828:	10800044 	addi	r2,r2,1
1000a82c:	e0bfc915 	stw	r2,-220(fp)
1000a830:	e0bfc917 	ldw	r2,-220(fp)
1000a834:	10800210 	cmplti	r2,r2,8
1000a838:	1000071e 	bne	r2,zero,1000a858 <___vfprintf_internal_r+0x1a24>
1000a83c:	e0bfc804 	addi	r2,fp,-224
1000a840:	100d883a 	mov	r6,r2
1000a844:	e17fe717 	ldw	r5,-100(fp)
1000a848:	e13fe617 	ldw	r4,-104(fp)
1000a84c:	0011b340 	call	10011b34 <__sprint_r>
1000a850:	10017c1e 	bne	r2,zero,1000ae44 <___vfprintf_internal_r+0x2010>
1000a854:	e47fcb04 	addi	r17,fp,-212
1000a858:	e0ffc717 	ldw	r3,-228(fp)
1000a85c:	e0bfc417 	ldw	r2,-240(fp)
1000a860:	1887c83a 	sub	r3,r3,r2
1000a864:	e0bfba17 	ldw	r2,-280(fp)
1000a868:	1000010e 	bge	r2,zero,1000a870 <___vfprintf_internal_r+0x1a3c>
1000a86c:	0005883a 	mov	r2,zero
1000a870:	1885c83a 	sub	r2,r3,r2
1000a874:	e0bfba15 	stw	r2,-280(fp)
1000a878:	e0bfba17 	ldw	r2,-280(fp)
1000a87c:	0080e60e 	bge	zero,r2,1000ac18 <___vfprintf_internal_r+0x1de4>
1000a880:	00001906 	br	1000a8e8 <___vfprintf_internal_r+0x1ab4>
1000a884:	00840374 	movhi	r2,4109
1000a888:	10bd2484 	addi	r2,r2,-2926
1000a88c:	88800015 	stw	r2,0(r17)
1000a890:	00800404 	movi	r2,16
1000a894:	88800115 	stw	r2,4(r17)
1000a898:	e0bfca17 	ldw	r2,-216(fp)
1000a89c:	10800404 	addi	r2,r2,16
1000a8a0:	e0bfca15 	stw	r2,-216(fp)
1000a8a4:	8c400204 	addi	r17,r17,8
1000a8a8:	e0bfc917 	ldw	r2,-220(fp)
1000a8ac:	10800044 	addi	r2,r2,1
1000a8b0:	e0bfc915 	stw	r2,-220(fp)
1000a8b4:	e0bfc917 	ldw	r2,-220(fp)
1000a8b8:	10800210 	cmplti	r2,r2,8
1000a8bc:	1000071e 	bne	r2,zero,1000a8dc <___vfprintf_internal_r+0x1aa8>
1000a8c0:	e0bfc804 	addi	r2,fp,-224
1000a8c4:	100d883a 	mov	r6,r2
1000a8c8:	e17fe717 	ldw	r5,-100(fp)
1000a8cc:	e13fe617 	ldw	r4,-104(fp)
1000a8d0:	0011b340 	call	10011b34 <__sprint_r>
1000a8d4:	10015d1e 	bne	r2,zero,1000ae4c <___vfprintf_internal_r+0x2018>
1000a8d8:	e47fcb04 	addi	r17,fp,-212
1000a8dc:	e0bfba17 	ldw	r2,-280(fp)
1000a8e0:	10bffc04 	addi	r2,r2,-16
1000a8e4:	e0bfba15 	stw	r2,-280(fp)
1000a8e8:	e0bfba17 	ldw	r2,-280(fp)
1000a8ec:	10800448 	cmpgei	r2,r2,17
1000a8f0:	103fe41e 	bne	r2,zero,1000a884 <__alt_data_end+0xf800a884>
1000a8f4:	00840374 	movhi	r2,4109
1000a8f8:	10bd2484 	addi	r2,r2,-2926
1000a8fc:	88800015 	stw	r2,0(r17)
1000a900:	e0bfba17 	ldw	r2,-280(fp)
1000a904:	88800115 	stw	r2,4(r17)
1000a908:	e0ffca17 	ldw	r3,-216(fp)
1000a90c:	e0bfba17 	ldw	r2,-280(fp)
1000a910:	1885883a 	add	r2,r3,r2
1000a914:	e0bfca15 	stw	r2,-216(fp)
1000a918:	8c400204 	addi	r17,r17,8
1000a91c:	e0bfc917 	ldw	r2,-220(fp)
1000a920:	10800044 	addi	r2,r2,1
1000a924:	e0bfc915 	stw	r2,-220(fp)
1000a928:	e0bfc917 	ldw	r2,-220(fp)
1000a92c:	10800210 	cmplti	r2,r2,8
1000a930:	1000b91e 	bne	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
1000a934:	e0bfc804 	addi	r2,fp,-224
1000a938:	100d883a 	mov	r6,r2
1000a93c:	e17fe717 	ldw	r5,-100(fp)
1000a940:	e13fe617 	ldw	r4,-104(fp)
1000a944:	0011b340 	call	10011b34 <__sprint_r>
1000a948:	1001421e 	bne	r2,zero,1000ae54 <___vfprintf_internal_r+0x2020>
1000a94c:	e47fcb04 	addi	r17,fp,-212
1000a950:	0000b106 	br	1000ac18 <___vfprintf_internal_r+0x1de4>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
1000a954:	e0bfc717 	ldw	r2,-228(fp)
1000a958:	10800088 	cmpgei	r2,r2,2
1000a95c:	1000021e 	bne	r2,zero,1000a968 <___vfprintf_internal_r+0x1b34>
1000a960:	9880004c 	andi	r2,r19,1
1000a964:	10008026 	beq	r2,zero,1000ab68 <___vfprintf_internal_r+0x1d34>
					PRINT (cp, 1);
1000a968:	8c800015 	stw	r18,0(r17)
1000a96c:	00800044 	movi	r2,1
1000a970:	88800115 	stw	r2,4(r17)
1000a974:	e0bfca17 	ldw	r2,-216(fp)
1000a978:	10800044 	addi	r2,r2,1
1000a97c:	e0bfca15 	stw	r2,-216(fp)
1000a980:	8c400204 	addi	r17,r17,8
1000a984:	e0bfc917 	ldw	r2,-220(fp)
1000a988:	10800044 	addi	r2,r2,1
1000a98c:	e0bfc915 	stw	r2,-220(fp)
1000a990:	e0bfc917 	ldw	r2,-220(fp)
1000a994:	10800210 	cmplti	r2,r2,8
1000a998:	1000071e 	bne	r2,zero,1000a9b8 <___vfprintf_internal_r+0x1b84>
1000a99c:	e0bfc804 	addi	r2,fp,-224
1000a9a0:	100d883a 	mov	r6,r2
1000a9a4:	e17fe717 	ldw	r5,-100(fp)
1000a9a8:	e13fe617 	ldw	r4,-104(fp)
1000a9ac:	0011b340 	call	10011b34 <__sprint_r>
1000a9b0:	10012a1e 	bne	r2,zero,1000ae5c <___vfprintf_internal_r+0x2028>
1000a9b4:	e47fcb04 	addi	r17,fp,-212
					cp++;
1000a9b8:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
1000a9bc:	e0bfbb17 	ldw	r2,-276(fp)
1000a9c0:	88800015 	stw	r2,0(r17)
1000a9c4:	e0bfbc17 	ldw	r2,-272(fp)
1000a9c8:	88800115 	stw	r2,4(r17)
1000a9cc:	e0ffca17 	ldw	r3,-216(fp)
1000a9d0:	e0bfbc17 	ldw	r2,-272(fp)
1000a9d4:	1885883a 	add	r2,r3,r2
1000a9d8:	e0bfca15 	stw	r2,-216(fp)
1000a9dc:	8c400204 	addi	r17,r17,8
1000a9e0:	e0bfc917 	ldw	r2,-220(fp)
1000a9e4:	10800044 	addi	r2,r2,1
1000a9e8:	e0bfc915 	stw	r2,-220(fp)
1000a9ec:	e0bfc917 	ldw	r2,-220(fp)
1000a9f0:	10800210 	cmplti	r2,r2,8
1000a9f4:	1000071e 	bne	r2,zero,1000aa14 <___vfprintf_internal_r+0x1be0>
1000a9f8:	e0bfc804 	addi	r2,fp,-224
1000a9fc:	100d883a 	mov	r6,r2
1000aa00:	e17fe717 	ldw	r5,-100(fp)
1000aa04:	e13fe617 	ldw	r4,-104(fp)
1000aa08:	0011b340 	call	10011b34 <__sprint_r>
1000aa0c:	1001151e 	bne	r2,zero,1000ae64 <___vfprintf_internal_r+0x2030>
1000aa10:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
1000aa14:	e0bfc217 	ldw	r2,-248(fp)
1000aa18:	e0ffc317 	ldw	r3,-244(fp)
1000aa1c:	000d883a 	mov	r6,zero
1000aa20:	000f883a 	mov	r7,zero
1000aa24:	1009883a 	mov	r4,r2
1000aa28:	180b883a 	mov	r5,r3
1000aa2c:	00151e40 	call	100151e4 <__eqdf2>
1000aa30:	10001826 	beq	r2,zero,1000aa94 <___vfprintf_internal_r+0x1c60>
						PRINT (cp, ndig - 1);
1000aa34:	8c800015 	stw	r18,0(r17)
1000aa38:	e0bfc717 	ldw	r2,-228(fp)
1000aa3c:	10bfffc4 	addi	r2,r2,-1
1000aa40:	88800115 	stw	r2,4(r17)
1000aa44:	e0bfca17 	ldw	r2,-216(fp)
1000aa48:	e0ffc717 	ldw	r3,-228(fp)
1000aa4c:	10c5883a 	add	r2,r2,r3
1000aa50:	10bfffc4 	addi	r2,r2,-1
1000aa54:	e0bfca15 	stw	r2,-216(fp)
1000aa58:	8c400204 	addi	r17,r17,8
1000aa5c:	e0bfc917 	ldw	r2,-220(fp)
1000aa60:	10800044 	addi	r2,r2,1
1000aa64:	e0bfc915 	stw	r2,-220(fp)
1000aa68:	e0bfc917 	ldw	r2,-220(fp)
1000aa6c:	10800210 	cmplti	r2,r2,8
1000aa70:	1000521e 	bne	r2,zero,1000abbc <___vfprintf_internal_r+0x1d88>
1000aa74:	e0bfc804 	addi	r2,fp,-224
1000aa78:	100d883a 	mov	r6,r2
1000aa7c:	e17fe717 	ldw	r5,-100(fp)
1000aa80:	e13fe617 	ldw	r4,-104(fp)
1000aa84:	0011b340 	call	10011b34 <__sprint_r>
1000aa88:	1000f81e 	bne	r2,zero,1000ae6c <___vfprintf_internal_r+0x2038>
1000aa8c:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000aa90:	00004a06 	br	1000abbc <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
1000aa94:	e0bfc717 	ldw	r2,-228(fp)
1000aa98:	143fffc4 	addi	r16,r2,-1
1000aa9c:	0400470e 	bge	zero,r16,1000abbc <___vfprintf_internal_r+0x1d88>
1000aaa0:	00001706 	br	1000ab00 <___vfprintf_internal_r+0x1ccc>
1000aaa4:	00840374 	movhi	r2,4109
1000aaa8:	10bd2484 	addi	r2,r2,-2926
1000aaac:	88800015 	stw	r2,0(r17)
1000aab0:	00800404 	movi	r2,16
1000aab4:	88800115 	stw	r2,4(r17)
1000aab8:	e0bfca17 	ldw	r2,-216(fp)
1000aabc:	10800404 	addi	r2,r2,16
1000aac0:	e0bfca15 	stw	r2,-216(fp)
1000aac4:	8c400204 	addi	r17,r17,8
1000aac8:	e0bfc917 	ldw	r2,-220(fp)
1000aacc:	10800044 	addi	r2,r2,1
1000aad0:	e0bfc915 	stw	r2,-220(fp)
1000aad4:	e0bfc917 	ldw	r2,-220(fp)
1000aad8:	10800210 	cmplti	r2,r2,8
1000aadc:	1000071e 	bne	r2,zero,1000aafc <___vfprintf_internal_r+0x1cc8>
1000aae0:	e0bfc804 	addi	r2,fp,-224
1000aae4:	100d883a 	mov	r6,r2
1000aae8:	e17fe717 	ldw	r5,-100(fp)
1000aaec:	e13fe617 	ldw	r4,-104(fp)
1000aaf0:	0011b340 	call	10011b34 <__sprint_r>
1000aaf4:	1000df1e 	bne	r2,zero,1000ae74 <___vfprintf_internal_r+0x2040>
1000aaf8:	e47fcb04 	addi	r17,fp,-212
1000aafc:	843ffc04 	addi	r16,r16,-16
1000ab00:	80800448 	cmpgei	r2,r16,17
1000ab04:	103fe71e 	bne	r2,zero,1000aaa4 <__alt_data_end+0xf800aaa4>
1000ab08:	00840374 	movhi	r2,4109
1000ab0c:	10bd2484 	addi	r2,r2,-2926
1000ab10:	88800015 	stw	r2,0(r17)
1000ab14:	8005883a 	mov	r2,r16
1000ab18:	88800115 	stw	r2,4(r17)
1000ab1c:	e0bfca17 	ldw	r2,-216(fp)
1000ab20:	8007883a 	mov	r3,r16
1000ab24:	10c5883a 	add	r2,r2,r3
1000ab28:	e0bfca15 	stw	r2,-216(fp)
1000ab2c:	8c400204 	addi	r17,r17,8
1000ab30:	e0bfc917 	ldw	r2,-220(fp)
1000ab34:	10800044 	addi	r2,r2,1
1000ab38:	e0bfc915 	stw	r2,-220(fp)
1000ab3c:	e0bfc917 	ldw	r2,-220(fp)
1000ab40:	10800210 	cmplti	r2,r2,8
1000ab44:	10001d1e 	bne	r2,zero,1000abbc <___vfprintf_internal_r+0x1d88>
1000ab48:	e0bfc804 	addi	r2,fp,-224
1000ab4c:	100d883a 	mov	r6,r2
1000ab50:	e17fe717 	ldw	r5,-100(fp)
1000ab54:	e13fe617 	ldw	r4,-104(fp)
1000ab58:	0011b340 	call	10011b34 <__sprint_r>
1000ab5c:	1000c71e 	bne	r2,zero,1000ae7c <___vfprintf_internal_r+0x2048>
1000ab60:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000ab64:	00001506 	br	1000abbc <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
1000ab68:	8c800015 	stw	r18,0(r17)
1000ab6c:	00800044 	movi	r2,1
1000ab70:	88800115 	stw	r2,4(r17)
1000ab74:	e0bfca17 	ldw	r2,-216(fp)
1000ab78:	10800044 	addi	r2,r2,1
1000ab7c:	e0bfca15 	stw	r2,-216(fp)
1000ab80:	8c400204 	addi	r17,r17,8
1000ab84:	e0bfc917 	ldw	r2,-220(fp)
1000ab88:	10800044 	addi	r2,r2,1
1000ab8c:	e0bfc915 	stw	r2,-220(fp)
1000ab90:	e0bfc917 	ldw	r2,-220(fp)
1000ab94:	10800210 	cmplti	r2,r2,8
1000ab98:	1000091e 	bne	r2,zero,1000abc0 <___vfprintf_internal_r+0x1d8c>
1000ab9c:	e0bfc804 	addi	r2,fp,-224
1000aba0:	100d883a 	mov	r6,r2
1000aba4:	e17fe717 	ldw	r5,-100(fp)
1000aba8:	e13fe617 	ldw	r4,-104(fp)
1000abac:	0011b340 	call	10011b34 <__sprint_r>
1000abb0:	1000b41e 	bne	r2,zero,1000ae84 <___vfprintf_internal_r+0x2050>
1000abb4:	e47fcb04 	addi	r17,fp,-212
1000abb8:	00000106 	br	1000abc0 <___vfprintf_internal_r+0x1d8c>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000abbc:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
1000abc0:	e0bfc504 	addi	r2,fp,-236
1000abc4:	88800015 	stw	r2,0(r17)
1000abc8:	e0bfaf17 	ldw	r2,-324(fp)
1000abcc:	88800115 	stw	r2,4(r17)
1000abd0:	e0ffca17 	ldw	r3,-216(fp)
1000abd4:	e0bfaf17 	ldw	r2,-324(fp)
1000abd8:	1885883a 	add	r2,r3,r2
1000abdc:	e0bfca15 	stw	r2,-216(fp)
1000abe0:	8c400204 	addi	r17,r17,8
1000abe4:	e0bfc917 	ldw	r2,-220(fp)
1000abe8:	10800044 	addi	r2,r2,1
1000abec:	e0bfc915 	stw	r2,-220(fp)
1000abf0:	e0bfc917 	ldw	r2,-220(fp)
1000abf4:	10800210 	cmplti	r2,r2,8
1000abf8:	1000071e 	bne	r2,zero,1000ac18 <___vfprintf_internal_r+0x1de4>
1000abfc:	e0bfc804 	addi	r2,fp,-224
1000ac00:	100d883a 	mov	r6,r2
1000ac04:	e17fe717 	ldw	r5,-100(fp)
1000ac08:	e13fe617 	ldw	r4,-104(fp)
1000ac0c:	0011b340 	call	10011b34 <__sprint_r>
1000ac10:	10009e1e 	bne	r2,zero,1000ae8c <___vfprintf_internal_r+0x2058>
1000ac14:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
1000ac18:	9880010c 	andi	r2,r19,4
1000ac1c:	10003526 	beq	r2,zero,1000acf4 <___vfprintf_internal_r+0x1ec0>
			PAD (width - realsz, blanks);
1000ac20:	e0ffad17 	ldw	r3,-332(fp)
1000ac24:	e0bfb517 	ldw	r2,-300(fp)
1000ac28:	18a1c83a 	sub	r16,r3,r2
1000ac2c:	0400310e 	bge	zero,r16,1000acf4 <___vfprintf_internal_r+0x1ec0>
1000ac30:	00001706 	br	1000ac90 <___vfprintf_internal_r+0x1e5c>
1000ac34:	00840374 	movhi	r2,4109
1000ac38:	10bd2084 	addi	r2,r2,-2942
1000ac3c:	88800015 	stw	r2,0(r17)
1000ac40:	00800404 	movi	r2,16
1000ac44:	88800115 	stw	r2,4(r17)
1000ac48:	e0bfca17 	ldw	r2,-216(fp)
1000ac4c:	10800404 	addi	r2,r2,16
1000ac50:	e0bfca15 	stw	r2,-216(fp)
1000ac54:	8c400204 	addi	r17,r17,8
1000ac58:	e0bfc917 	ldw	r2,-220(fp)
1000ac5c:	10800044 	addi	r2,r2,1
1000ac60:	e0bfc915 	stw	r2,-220(fp)
1000ac64:	e0bfc917 	ldw	r2,-220(fp)
1000ac68:	10800210 	cmplti	r2,r2,8
1000ac6c:	1000071e 	bne	r2,zero,1000ac8c <___vfprintf_internal_r+0x1e58>
1000ac70:	e0bfc804 	addi	r2,fp,-224
1000ac74:	100d883a 	mov	r6,r2
1000ac78:	e17fe717 	ldw	r5,-100(fp)
1000ac7c:	e13fe617 	ldw	r4,-104(fp)
1000ac80:	0011b340 	call	10011b34 <__sprint_r>
1000ac84:	1000831e 	bne	r2,zero,1000ae94 <___vfprintf_internal_r+0x2060>
1000ac88:	e47fcb04 	addi	r17,fp,-212
1000ac8c:	843ffc04 	addi	r16,r16,-16
1000ac90:	80800448 	cmpgei	r2,r16,17
1000ac94:	103fe71e 	bne	r2,zero,1000ac34 <__alt_data_end+0xf800ac34>
1000ac98:	00840374 	movhi	r2,4109
1000ac9c:	10bd2084 	addi	r2,r2,-2942
1000aca0:	88800015 	stw	r2,0(r17)
1000aca4:	8005883a 	mov	r2,r16
1000aca8:	88800115 	stw	r2,4(r17)
1000acac:	e0bfca17 	ldw	r2,-216(fp)
1000acb0:	8007883a 	mov	r3,r16
1000acb4:	10c5883a 	add	r2,r2,r3
1000acb8:	e0bfca15 	stw	r2,-216(fp)
1000acbc:	8c400204 	addi	r17,r17,8
1000acc0:	e0bfc917 	ldw	r2,-220(fp)
1000acc4:	10800044 	addi	r2,r2,1
1000acc8:	e0bfc915 	stw	r2,-220(fp)
1000accc:	e0bfc917 	ldw	r2,-220(fp)
1000acd0:	10800210 	cmplti	r2,r2,8
1000acd4:	1000071e 	bne	r2,zero,1000acf4 <___vfprintf_internal_r+0x1ec0>
1000acd8:	e0bfc804 	addi	r2,fp,-224
1000acdc:	100d883a 	mov	r6,r2
1000ace0:	e17fe717 	ldw	r5,-100(fp)
1000ace4:	e13fe617 	ldw	r4,-104(fp)
1000ace8:	0011b340 	call	10011b34 <__sprint_r>
1000acec:	10006b1e 	bne	r2,zero,1000ae9c <___vfprintf_internal_r+0x2068>
1000acf0:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
1000acf4:	e0ffad17 	ldw	r3,-332(fp)
1000acf8:	e0bfb517 	ldw	r2,-300(fp)
1000acfc:	10c0010e 	bge	r2,r3,1000ad04 <___vfprintf_internal_r+0x1ed0>
1000ad00:	1805883a 	mov	r2,r3
1000ad04:	e0ffac17 	ldw	r3,-336(fp)
1000ad08:	1885883a 	add	r2,r3,r2
1000ad0c:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
1000ad10:	e0bfca17 	ldw	r2,-216(fp)
1000ad14:	10000626 	beq	r2,zero,1000ad30 <___vfprintf_internal_r+0x1efc>
1000ad18:	e0bfc804 	addi	r2,fp,-224
1000ad1c:	100d883a 	mov	r6,r2
1000ad20:	e17fe717 	ldw	r5,-100(fp)
1000ad24:	e13fe617 	ldw	r4,-104(fp)
1000ad28:	0011b340 	call	10011b34 <__sprint_r>
1000ad2c:	10005d1e 	bne	r2,zero,1000aea4 <___vfprintf_internal_r+0x2070>
1000ad30:	e03fc915 	stw	zero,-220(fp)
1000ad34:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
1000ad38:	e0bfb817 	ldw	r2,-288(fp)
1000ad3c:	10389a26 	beq	r2,zero,10008fa8 <__alt_data_end+0xf8008fa8>
			_free_r (data, malloc_buf);
1000ad40:	e17fb817 	ldw	r5,-288(fp)
1000ad44:	e13fe617 	ldw	r4,-104(fp)
1000ad48:	000dd700 	call	1000dd70 <_free_r>
			malloc_buf = NULL;
1000ad4c:	e03fb815 	stw	zero,-288(fp)
		}
	}
1000ad50:	00389506 	br	10008fa8 <__alt_data_end+0xf8008fa8>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
1000ad54:	0001883a 	nop
1000ad58:	00000106 	br	1000ad60 <___vfprintf_internal_r+0x1f2c>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
1000ad5c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
1000ad60:	e0bfca17 	ldw	r2,-216(fp)
1000ad64:	10000626 	beq	r2,zero,1000ad80 <___vfprintf_internal_r+0x1f4c>
1000ad68:	e0bfc804 	addi	r2,fp,-224
1000ad6c:	100d883a 	mov	r6,r2
1000ad70:	e17fe717 	ldw	r5,-100(fp)
1000ad74:	e13fe617 	ldw	r4,-104(fp)
1000ad78:	0011b340 	call	10011b34 <__sprint_r>
1000ad7c:	10004b1e 	bne	r2,zero,1000aeac <___vfprintf_internal_r+0x2078>
1000ad80:	e03fc915 	stw	zero,-220(fp)
1000ad84:	e47fcb04 	addi	r17,fp,-212
1000ad88:	00004906 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
1000ad8c:	0001883a 	nop
1000ad90:	00004706 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
1000ad94:	0001883a 	nop
1000ad98:	00004506 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ad9c:	0001883a 	nop
1000ada0:	00004306 	br	1000aeb0 <___vfprintf_internal_r+0x207c>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
1000ada4:	0001883a 	nop
1000ada8:	00004106 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
1000adac:	0001883a 	nop
1000adb0:	00003f06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
1000adb4:	0001883a 	nop
1000adb8:	00003d06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000adbc:	0001883a 	nop
1000adc0:	00003b06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
1000adc4:	0001883a 	nop
1000adc8:	00003906 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000adcc:	0001883a 	nop
1000add0:	00003706 	br	1000aeb0 <___vfprintf_internal_r+0x207c>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
1000add4:	0001883a 	nop
1000add8:	00003506 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
1000addc:	0001883a 	nop
1000ade0:	00003306 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
1000ade4:	0001883a 	nop
1000ade8:	00003106 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
						PAD (ndig - 1, zeroes);
1000adec:	0001883a 	nop
1000adf0:	00002f06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000adf4:	0001883a 	nop
1000adf8:	00002d06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
1000adfc:	0001883a 	nop
1000ae00:	00002b06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
1000ae04:	0001883a 	nop
1000ae08:	00002906 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
						PAD (-expt, zeroes);
1000ae0c:	0001883a 	nop
1000ae10:	00002706 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae14:	0001883a 	nop
1000ae18:	00002506 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
						PRINT (cp, ndig);
1000ae1c:	0001883a 	nop
1000ae20:	00002306 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
1000ae24:	0001883a 	nop
1000ae28:	00002106 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae2c:	0001883a 	nop
1000ae30:	00001f06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae34:	0001883a 	nop
1000ae38:	00001d06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
1000ae3c:	0001883a 	nop
1000ae40:	00001b06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					PRINTANDPAD (cp, convbuf + ndig,
1000ae44:	0001883a 	nop
1000ae48:	00001906 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae4c:	0001883a 	nop
1000ae50:	00001706 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae54:	0001883a 	nop
1000ae58:	00001506 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
1000ae5c:	0001883a 	nop
1000ae60:	00001306 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					cp++;
					PRINT (decimal_point, decp_len);
1000ae64:	0001883a 	nop
1000ae68:	00001106 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
1000ae6c:	0001883a 	nop
1000ae70:	00000f06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
1000ae74:	0001883a 	nop
1000ae78:	00000d06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae7c:	0001883a 	nop
1000ae80:	00000b06 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
				} else	/* XeYYY */
					PRINT (cp, 1);
1000ae84:	0001883a 	nop
1000ae88:	00000906 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
				PRINT (expstr, expsize);
1000ae8c:	0001883a 	nop
1000ae90:	00000706 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
1000ae94:	0001883a 	nop
1000ae98:	00000506 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
1000ae9c:	0001883a 	nop
1000aea0:	00000306 	br	1000aeb0 <___vfprintf_internal_r+0x207c>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
1000aea4:	0001883a 	nop
1000aea8:	00000106 	br	1000aeb0 <___vfprintf_internal_r+0x207c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
1000aeac:	0001883a 	nop
error:
	if (malloc_buf != NULL)
1000aeb0:	e0bfb817 	ldw	r2,-288(fp)
1000aeb4:	10000326 	beq	r2,zero,1000aec4 <___vfprintf_internal_r+0x2090>
		_free_r (data, malloc_buf);
1000aeb8:	e17fb817 	ldw	r5,-288(fp)
1000aebc:	e13fe617 	ldw	r4,-104(fp)
1000aec0:	000dd700 	call	1000dd70 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
1000aec4:	e0bfe717 	ldw	r2,-100(fp)
1000aec8:	1080030b 	ldhu	r2,12(r2)
1000aecc:	10bfffcc 	andi	r2,r2,65535
1000aed0:	1080100c 	andi	r2,r2,64
1000aed4:	1000021e 	bne	r2,zero,1000aee0 <___vfprintf_internal_r+0x20ac>
1000aed8:	e0bfac17 	ldw	r2,-336(fp)
1000aedc:	00000206 	br	1000aee8 <___vfprintf_internal_r+0x20b4>
1000aee0:	00bfffc4 	movi	r2,-1
1000aee4:	0001883a 	nop
	/* NOTREACHED */
}
1000aee8:	e6fff804 	addi	sp,fp,-32
1000aeec:	dfc00917 	ldw	ra,36(sp)
1000aef0:	df000817 	ldw	fp,32(sp)
1000aef4:	ddc00717 	ldw	r23,28(sp)
1000aef8:	dd800617 	ldw	r22,24(sp)
1000aefc:	dd400517 	ldw	r21,20(sp)
1000af00:	dd000417 	ldw	r20,16(sp)
1000af04:	dcc00317 	ldw	r19,12(sp)
1000af08:	dc800217 	ldw	r18,8(sp)
1000af0c:	dc400117 	ldw	r17,4(sp)
1000af10:	dc000017 	ldw	r16,0(sp)
1000af14:	dec00a04 	addi	sp,sp,40
1000af18:	f800283a 	ret

1000af1c <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
1000af1c:	deffef04 	addi	sp,sp,-68
1000af20:	dfc01015 	stw	ra,64(sp)
1000af24:	df000f15 	stw	fp,60(sp)
1000af28:	df000f04 	addi	fp,sp,60
1000af2c:	e13ffc15 	stw	r4,-16(fp)
1000af30:	e17ffd15 	stw	r5,-12(fp)
1000af34:	e1bffe15 	stw	r6,-8(fp)
1000af38:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
1000af3c:	e0bffd17 	ldw	r2,-12(fp)
1000af40:	e0bffa15 	stw	r2,-24(fp)
1000af44:	e0bffe17 	ldw	r2,-8(fp)
1000af48:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
1000af4c:	e0bffb17 	ldw	r2,-20(fp)
1000af50:	1000090e 	bge	r2,zero,1000af78 <cvt+0x5c>
		value = -value;
1000af54:	e0bffd17 	ldw	r2,-12(fp)
1000af58:	e0bffd15 	stw	r2,-12(fp)
1000af5c:	e0bffe17 	ldw	r2,-8(fp)
1000af60:	10a0003c 	xorhi	r2,r2,32768
1000af64:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
1000af68:	e0800317 	ldw	r2,12(fp)
1000af6c:	00c00b44 	movi	r3,45
1000af70:	10c00005 	stb	r3,0(r2)
1000af74:	00000206 	br	1000af80 <cvt+0x64>
	} else
		*sign = '\000';
1000af78:	e0800317 	ldw	r2,12(fp)
1000af7c:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
1000af80:	e0800517 	ldw	r2,20(fp)
1000af84:	108019a0 	cmpeqi	r2,r2,102
1000af88:	1000031e 	bne	r2,zero,1000af98 <cvt+0x7c>
1000af8c:	e0800517 	ldw	r2,20(fp)
1000af90:	10801198 	cmpnei	r2,r2,70
1000af94:	1000031e 	bne	r2,zero,1000afa4 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
1000af98:	008000c4 	movi	r2,3
1000af9c:	e0bff515 	stw	r2,-44(fp)
1000afa0:	00000b06 	br	1000afd0 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
1000afa4:	e0800517 	ldw	r2,20(fp)
1000afa8:	10801960 	cmpeqi	r2,r2,101
1000afac:	1000031e 	bne	r2,zero,1000afbc <cvt+0xa0>
1000afb0:	e0800517 	ldw	r2,20(fp)
1000afb4:	10801158 	cmpnei	r2,r2,69
1000afb8:	1000031e 	bne	r2,zero,1000afc8 <cvt+0xac>
			ndigits++;
1000afbc:	e0bfff17 	ldw	r2,-4(fp)
1000afc0:	10800044 	addi	r2,r2,1
1000afc4:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
1000afc8:	00800084 	movi	r2,2
1000afcc:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
1000afd0:	e0bff904 	addi	r2,fp,-28
1000afd4:	d8800315 	stw	r2,12(sp)
1000afd8:	e0bff804 	addi	r2,fp,-32
1000afdc:	d8800215 	stw	r2,8(sp)
1000afe0:	e0800417 	ldw	r2,16(fp)
1000afe4:	d8800115 	stw	r2,4(sp)
1000afe8:	e0bfff17 	ldw	r2,-4(fp)
1000afec:	d8800015 	stw	r2,0(sp)
1000aff0:	e1fff517 	ldw	r7,-44(fp)
1000aff4:	e17ffd17 	ldw	r5,-12(fp)
1000aff8:	e1bffe17 	ldw	r6,-8(fp)
1000affc:	e13ffc17 	ldw	r4,-16(fp)
1000b000:	000b7d40 	call	1000b7d4 <_dtoa_r>
1000b004:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
1000b008:	e0800517 	ldw	r2,20(fp)
1000b00c:	108019e0 	cmpeqi	r2,r2,103
1000b010:	1000031e 	bne	r2,zero,1000b020 <cvt+0x104>
1000b014:	e0800517 	ldw	r2,20(fp)
1000b018:	108011d8 	cmpnei	r2,r2,71
1000b01c:	1000031e 	bne	r2,zero,1000b02c <cvt+0x110>
1000b020:	e0800217 	ldw	r2,8(fp)
1000b024:	1080004c 	andi	r2,r2,1
1000b028:	10003326 	beq	r2,zero,1000b0f8 <cvt+0x1dc>
		bp = digits + ndigits;
1000b02c:	e0bfff17 	ldw	r2,-4(fp)
1000b030:	e0fff717 	ldw	r3,-36(fp)
1000b034:	1885883a 	add	r2,r3,r2
1000b038:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
1000b03c:	e0800517 	ldw	r2,20(fp)
1000b040:	108019a0 	cmpeqi	r2,r2,102
1000b044:	1000031e 	bne	r2,zero,1000b054 <cvt+0x138>
1000b048:	e0800517 	ldw	r2,20(fp)
1000b04c:	10801198 	cmpnei	r2,r2,70
1000b050:	1000181e 	bne	r2,zero,1000b0b4 <cvt+0x198>
			if (*digits == '0' && value)
1000b054:	e0bff717 	ldw	r2,-36(fp)
1000b058:	10800003 	ldbu	r2,0(r2)
1000b05c:	10803fcc 	andi	r2,r2,255
1000b060:	1080201c 	xori	r2,r2,128
1000b064:	10bfe004 	addi	r2,r2,-128
1000b068:	10800c18 	cmpnei	r2,r2,48
1000b06c:	10000b1e 	bne	r2,zero,1000b09c <cvt+0x180>
1000b070:	000d883a 	mov	r6,zero
1000b074:	000f883a 	mov	r7,zero
1000b078:	e13ffd17 	ldw	r4,-12(fp)
1000b07c:	e17ffe17 	ldw	r5,-8(fp)
1000b080:	00151e40 	call	100151e4 <__eqdf2>
1000b084:	10000526 	beq	r2,zero,1000b09c <cvt+0x180>
				*decpt = -ndigits + 1;
1000b088:	00c00044 	movi	r3,1
1000b08c:	e0bfff17 	ldw	r2,-4(fp)
1000b090:	1887c83a 	sub	r3,r3,r2
1000b094:	e0800417 	ldw	r2,16(fp)
1000b098:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
1000b09c:	e0800417 	ldw	r2,16(fp)
1000b0a0:	10800017 	ldw	r2,0(r2)
1000b0a4:	1007883a 	mov	r3,r2
1000b0a8:	e0bff617 	ldw	r2,-40(fp)
1000b0ac:	10c5883a 	add	r2,r2,r3
1000b0b0:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
1000b0b4:	000d883a 	mov	r6,zero
1000b0b8:	000f883a 	mov	r7,zero
1000b0bc:	e13ffd17 	ldw	r4,-12(fp)
1000b0c0:	e17ffe17 	ldw	r5,-8(fp)
1000b0c4:	00151e40 	call	100151e4 <__eqdf2>
1000b0c8:	1000081e 	bne	r2,zero,1000b0ec <cvt+0x1d0>
			rve = bp;
1000b0cc:	e0bff617 	ldw	r2,-40(fp)
1000b0d0:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
1000b0d4:	00000506 	br	1000b0ec <cvt+0x1d0>
			*rve++ = '0';
1000b0d8:	e0bff917 	ldw	r2,-28(fp)
1000b0dc:	10c00044 	addi	r3,r2,1
1000b0e0:	e0fff915 	stw	r3,-28(fp)
1000b0e4:	00c00c04 	movi	r3,48
1000b0e8:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
1000b0ec:	e0fff917 	ldw	r3,-28(fp)
1000b0f0:	e0bff617 	ldw	r2,-40(fp)
1000b0f4:	18bff836 	bltu	r3,r2,1000b0d8 <__alt_data_end+0xf800b0d8>
			*rve++ = '0';
	}
	*length = rve - digits;
1000b0f8:	e0bff917 	ldw	r2,-28(fp)
1000b0fc:	1007883a 	mov	r3,r2
1000b100:	e0bff717 	ldw	r2,-36(fp)
1000b104:	1887c83a 	sub	r3,r3,r2
1000b108:	e0800617 	ldw	r2,24(fp)
1000b10c:	10c00015 	stw	r3,0(r2)
	return (digits);
1000b110:	e0bff717 	ldw	r2,-36(fp)
}
1000b114:	e037883a 	mov	sp,fp
1000b118:	dfc00117 	ldw	ra,4(sp)
1000b11c:	df000017 	ldw	fp,0(sp)
1000b120:	dec00204 	addi	sp,sp,8
1000b124:	f800283a 	ret

1000b128 <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
1000b128:	defff704 	addi	sp,sp,-36
1000b12c:	dfc00815 	stw	ra,32(sp)
1000b130:	df000715 	stw	fp,28(sp)
1000b134:	dc400615 	stw	r17,24(sp)
1000b138:	dc000515 	stw	r16,20(sp)
1000b13c:	df000704 	addi	fp,sp,28
1000b140:	e13ffb15 	stw	r4,-20(fp)
1000b144:	e17ffc15 	stw	r5,-16(fp)
1000b148:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
1000b14c:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
1000b150:	8805883a 	mov	r2,r17
1000b154:	14400044 	addi	r17,r2,1
1000b158:	e0fffd17 	ldw	r3,-12(fp)
1000b15c:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
1000b160:	e0bffc17 	ldw	r2,-16(fp)
1000b164:	1000080e 	bge	r2,zero,1000b188 <exponent+0x60>
		exp = -exp;
1000b168:	e0bffc17 	ldw	r2,-16(fp)
1000b16c:	0085c83a 	sub	r2,zero,r2
1000b170:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
1000b174:	8805883a 	mov	r2,r17
1000b178:	14400044 	addi	r17,r2,1
1000b17c:	00c00b44 	movi	r3,45
1000b180:	10c00005 	stb	r3,0(r2)
1000b184:	00000406 	br	1000b198 <exponent+0x70>
	}
	else
		*p++ = '+';
1000b188:	8805883a 	mov	r2,r17
1000b18c:	14400044 	addi	r17,r2,1
1000b190:	00c00ac4 	movi	r3,43
1000b194:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
1000b198:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
1000b19c:	e0bffc17 	ldw	r2,-16(fp)
1000b1a0:	10800290 	cmplti	r2,r2,10
1000b1a4:	10001d1e 	bne	r2,zero,1000b21c <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
1000b1a8:	843fffc4 	addi	r16,r16,-1
1000b1ac:	e0bffc17 	ldw	r2,-16(fp)
1000b1b0:	01400284 	movi	r5,10
1000b1b4:	1009883a 	mov	r4,r2
1000b1b8:	00023e80 	call	100023e8 <__modsi3>
1000b1bc:	10800c04 	addi	r2,r2,48
1000b1c0:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
1000b1c4:	e0bffc17 	ldw	r2,-16(fp)
1000b1c8:	01400284 	movi	r5,10
1000b1cc:	1009883a 	mov	r4,r2
1000b1d0:	00023640 	call	10002364 <__divsi3>
1000b1d4:	e0bffc15 	stw	r2,-16(fp)
1000b1d8:	e0bffc17 	ldw	r2,-16(fp)
1000b1dc:	10800288 	cmpgei	r2,r2,10
1000b1e0:	103ff11e 	bne	r2,zero,1000b1a8 <__alt_data_end+0xf800b1a8>
		*--t = to_char (exp);
1000b1e4:	843fffc4 	addi	r16,r16,-1
1000b1e8:	e0bffc17 	ldw	r2,-16(fp)
1000b1ec:	10800c04 	addi	r2,r2,48
1000b1f0:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
1000b1f4:	00000606 	br	1000b210 <exponent+0xe8>
1000b1f8:	8805883a 	mov	r2,r17
1000b1fc:	14400044 	addi	r17,r2,1
1000b200:	8007883a 	mov	r3,r16
1000b204:	1c000044 	addi	r16,r3,1
1000b208:	18c00003 	ldbu	r3,0(r3)
1000b20c:	10c00005 	stb	r3,0(r2)
1000b210:	e0bffac4 	addi	r2,fp,-21
1000b214:	80bff836 	bltu	r16,r2,1000b1f8 <__alt_data_end+0xf800b1f8>
1000b218:	00000906 	br	1000b240 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
1000b21c:	8805883a 	mov	r2,r17
1000b220:	14400044 	addi	r17,r2,1
1000b224:	00c00c04 	movi	r3,48
1000b228:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
1000b22c:	8805883a 	mov	r2,r17
1000b230:	14400044 	addi	r17,r2,1
1000b234:	e0fffc17 	ldw	r3,-16(fp)
1000b238:	18c00c04 	addi	r3,r3,48
1000b23c:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
1000b240:	8807883a 	mov	r3,r17
1000b244:	e0bffb17 	ldw	r2,-20(fp)
1000b248:	1885c83a 	sub	r2,r3,r2
}
1000b24c:	e6fffe04 	addi	sp,fp,-8
1000b250:	dfc00317 	ldw	ra,12(sp)
1000b254:	df000217 	ldw	fp,8(sp)
1000b258:	dc400117 	ldw	r17,4(sp)
1000b25c:	dc000017 	ldw	r16,0(sp)
1000b260:	dec00404 	addi	sp,sp,16
1000b264:	f800283a 	ret

1000b268 <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000b268:	defffb04 	addi	sp,sp,-20
1000b26c:	dfc00415 	stw	ra,16(sp)
1000b270:	df000315 	stw	fp,12(sp)
1000b274:	dc000215 	stw	r16,8(sp)
1000b278:	df000304 	addi	fp,sp,12
1000b27c:	e13ffe15 	stw	r4,-8(fp)
1000b280:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
1000b284:	008403b4 	movhi	r2,4110
1000b288:	10a44204 	addi	r2,r2,-28408
1000b28c:	10800017 	ldw	r2,0(r2)
1000b290:	e0bffd15 	stw	r2,-12(fp)
1000b294:	e0bffd17 	ldw	r2,-12(fp)
1000b298:	10000526 	beq	r2,zero,1000b2b0 <__swsetup_r+0x48>
1000b29c:	e0bffd17 	ldw	r2,-12(fp)
1000b2a0:	10800e17 	ldw	r2,56(r2)
1000b2a4:	1000021e 	bne	r2,zero,1000b2b0 <__swsetup_r+0x48>
1000b2a8:	e13ffd17 	ldw	r4,-12(fp)
1000b2ac:	000db400 	call	1000db40 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
1000b2b0:	8080030b 	ldhu	r2,12(r16)
1000b2b4:	10bfffcc 	andi	r2,r2,65535
1000b2b8:	1080020c 	andi	r2,r2,8
1000b2bc:	1000241e 	bne	r2,zero,1000b350 <__swsetup_r+0xe8>
    {
      if ((fp->_flags & __SRW) == 0)
1000b2c0:	8080030b 	ldhu	r2,12(r16)
1000b2c4:	10bfffcc 	andi	r2,r2,65535
1000b2c8:	1080040c 	andi	r2,r2,16
1000b2cc:	1000081e 	bne	r2,zero,1000b2f0 <__swsetup_r+0x88>
        {
	  ptr->_errno = EBADF;
1000b2d0:	e0bffe17 	ldw	r2,-8(fp)
1000b2d4:	00c00244 	movi	r3,9
1000b2d8:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
1000b2dc:	8080030b 	ldhu	r2,12(r16)
1000b2e0:	10801014 	ori	r2,r2,64
1000b2e4:	8080030d 	sth	r2,12(r16)
	  return EOF;
1000b2e8:	00bfffc4 	movi	r2,-1
1000b2ec:	00004206 	br	1000b3f8 <__swsetup_r+0x190>
        }
      if (fp->_flags & __SRD)
1000b2f0:	8080030b 	ldhu	r2,12(r16)
1000b2f4:	10bfffcc 	andi	r2,r2,65535
1000b2f8:	1080010c 	andi	r2,r2,4
1000b2fc:	10001126 	beq	r2,zero,1000b344 <__swsetup_r+0xdc>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
1000b300:	80800c17 	ldw	r2,48(r16)
1000b304:	10000826 	beq	r2,zero,1000b328 <__swsetup_r+0xc0>
	    FREEUB (ptr, fp);
1000b308:	80c00c17 	ldw	r3,48(r16)
1000b30c:	80801004 	addi	r2,r16,64
1000b310:	18800426 	beq	r3,r2,1000b324 <__swsetup_r+0xbc>
1000b314:	80800c17 	ldw	r2,48(r16)
1000b318:	100b883a 	mov	r5,r2
1000b31c:	e13ffe17 	ldw	r4,-8(fp)
1000b320:	000dd700 	call	1000dd70 <_free_r>
1000b324:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
1000b328:	80c0030b 	ldhu	r3,12(r16)
1000b32c:	00bff6c4 	movi	r2,-37
1000b330:	1884703a 	and	r2,r3,r2
1000b334:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
1000b338:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
1000b33c:	80800417 	ldw	r2,16(r16)
1000b340:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
1000b344:	8080030b 	ldhu	r2,12(r16)
1000b348:	10800214 	ori	r2,r2,8
1000b34c:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
1000b350:	80800417 	ldw	r2,16(r16)
1000b354:	10000b1e 	bne	r2,zero,1000b384 <__swsetup_r+0x11c>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
1000b358:	8080030b 	ldhu	r2,12(r16)
1000b35c:	10bfffcc 	andi	r2,r2,65535
1000b360:	1080800c 	andi	r2,r2,512
1000b364:	10000426 	beq	r2,zero,1000b378 <__swsetup_r+0x110>
1000b368:	8080030b 	ldhu	r2,12(r16)
1000b36c:	10bfffcc 	andi	r2,r2,65535
1000b370:	1080200c 	andi	r2,r2,128
1000b374:	10000326 	beq	r2,zero,1000b384 <__swsetup_r+0x11c>
    __smakebuf_r (ptr, fp);
1000b378:	800b883a 	mov	r5,r16
1000b37c:	e13ffe17 	ldw	r4,-8(fp)
1000b380:	000ee880 	call	1000ee88 <__smakebuf_r>

  if (fp->_flags & __SLBF)
1000b384:	8080030b 	ldhu	r2,12(r16)
1000b388:	10bfffcc 	andi	r2,r2,65535
1000b38c:	1080004c 	andi	r2,r2,1
1000b390:	10000526 	beq	r2,zero,1000b3a8 <__swsetup_r+0x140>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
1000b394:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
1000b398:	80800517 	ldw	r2,20(r16)
1000b39c:	0085c83a 	sub	r2,zero,r2
1000b3a0:	80800615 	stw	r2,24(r16)
1000b3a4:	00000806 	br	1000b3c8 <__swsetup_r+0x160>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
1000b3a8:	8080030b 	ldhu	r2,12(r16)
1000b3ac:	10bfffcc 	andi	r2,r2,65535
1000b3b0:	1080008c 	andi	r2,r2,2
1000b3b4:	1000021e 	bne	r2,zero,1000b3c0 <__swsetup_r+0x158>
1000b3b8:	80800517 	ldw	r2,20(r16)
1000b3bc:	00000106 	br	1000b3c4 <__swsetup_r+0x15c>
1000b3c0:	0005883a 	mov	r2,zero
1000b3c4:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
1000b3c8:	80800417 	ldw	r2,16(r16)
1000b3cc:	1000091e 	bne	r2,zero,1000b3f4 <__swsetup_r+0x18c>
1000b3d0:	8080030b 	ldhu	r2,12(r16)
1000b3d4:	10bfffcc 	andi	r2,r2,65535
1000b3d8:	1080200c 	andi	r2,r2,128
1000b3dc:	10000526 	beq	r2,zero,1000b3f4 <__swsetup_r+0x18c>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
1000b3e0:	8080030b 	ldhu	r2,12(r16)
1000b3e4:	10801014 	ori	r2,r2,64
1000b3e8:	8080030d 	sth	r2,12(r16)
      return EOF;
1000b3ec:	00bfffc4 	movi	r2,-1
1000b3f0:	00000106 	br	1000b3f8 <__swsetup_r+0x190>
    }
  return 0;
1000b3f4:	0005883a 	mov	r2,zero
}
1000b3f8:	e6ffff04 	addi	sp,fp,-4
1000b3fc:	dfc00217 	ldw	ra,8(sp)
1000b400:	df000117 	ldw	fp,4(sp)
1000b404:	dc000017 	ldw	r16,0(sp)
1000b408:	dec00304 	addi	sp,sp,12
1000b40c:	f800283a 	ret

1000b410 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
1000b410:	deffef04 	addi	sp,sp,-68
1000b414:	dfc01015 	stw	ra,64(sp)
1000b418:	df000f15 	stw	fp,60(sp)
1000b41c:	df000f04 	addi	fp,sp,60
1000b420:	e13ffe15 	stw	r4,-8(fp)
1000b424:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
1000b428:	e0bfff17 	ldw	r2,-4(fp)
1000b42c:	10800417 	ldw	r2,16(r2)
1000b430:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
1000b434:	e0bffe17 	ldw	r2,-8(fp)
1000b438:	10c00417 	ldw	r3,16(r2)
1000b43c:	e0bff117 	ldw	r2,-60(fp)
1000b440:	1880020e 	bge	r3,r2,1000b44c <quorem+0x3c>
    return 0;
1000b444:	0005883a 	mov	r2,zero
1000b448:	0000dd06 	br	1000b7c0 <quorem+0x3b0>
  sx = S->_x;
1000b44c:	e0bfff17 	ldw	r2,-4(fp)
1000b450:	10800504 	addi	r2,r2,20
1000b454:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
1000b458:	e0bff117 	ldw	r2,-60(fp)
1000b45c:	10bfffc4 	addi	r2,r2,-1
1000b460:	e0bff115 	stw	r2,-60(fp)
1000b464:	e0bff117 	ldw	r2,-60(fp)
1000b468:	1085883a 	add	r2,r2,r2
1000b46c:	1085883a 	add	r2,r2,r2
1000b470:	1007883a 	mov	r3,r2
1000b474:	e0bff717 	ldw	r2,-36(fp)
1000b478:	10c5883a 	add	r2,r2,r3
1000b47c:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
1000b480:	e0bffe17 	ldw	r2,-8(fp)
1000b484:	10800504 	addi	r2,r2,20
1000b488:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
1000b48c:	e0bff117 	ldw	r2,-60(fp)
1000b490:	1085883a 	add	r2,r2,r2
1000b494:	1085883a 	add	r2,r2,r2
1000b498:	1007883a 	mov	r3,r2
1000b49c:	e0bff517 	ldw	r2,-44(fp)
1000b4a0:	10c5883a 	add	r2,r2,r3
1000b4a4:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
1000b4a8:	e0bff617 	ldw	r2,-40(fp)
1000b4ac:	10c00017 	ldw	r3,0(r2)
1000b4b0:	e0bff817 	ldw	r2,-32(fp)
1000b4b4:	10800017 	ldw	r2,0(r2)
1000b4b8:	10800044 	addi	r2,r2,1
1000b4bc:	100b883a 	mov	r5,r2
1000b4c0:	1809883a 	mov	r4,r3
1000b4c4:	000245c0 	call	1000245c <__udivsi3>
1000b4c8:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
1000b4cc:	e0bff417 	ldw	r2,-48(fp)
1000b4d0:	10005726 	beq	r2,zero,1000b630 <quorem+0x220>
    {
      borrow = 0;
1000b4d4:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
1000b4d8:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
1000b4dc:	e0bff717 	ldw	r2,-36(fp)
1000b4e0:	10c00104 	addi	r3,r2,4
1000b4e4:	e0fff715 	stw	r3,-36(fp)
1000b4e8:	10800017 	ldw	r2,0(r2)
1000b4ec:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
1000b4f0:	e0bff917 	ldw	r2,-28(fp)
1000b4f4:	10bfffcc 	andi	r2,r2,65535
1000b4f8:	e17ff417 	ldw	r5,-48(fp)
1000b4fc:	1009883a 	mov	r4,r2
1000b500:	00059d40 	call	100059d4 <__mulsi3>
1000b504:	1007883a 	mov	r3,r2
1000b508:	e0bff317 	ldw	r2,-52(fp)
1000b50c:	1885883a 	add	r2,r3,r2
1000b510:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
1000b514:	e0bff917 	ldw	r2,-28(fp)
1000b518:	1004d43a 	srli	r2,r2,16
1000b51c:	e17ff417 	ldw	r5,-48(fp)
1000b520:	1009883a 	mov	r4,r2
1000b524:	00059d40 	call	100059d4 <__mulsi3>
1000b528:	1007883a 	mov	r3,r2
1000b52c:	e0bffa17 	ldw	r2,-24(fp)
1000b530:	1004d43a 	srli	r2,r2,16
1000b534:	1885883a 	add	r2,r3,r2
1000b538:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
1000b53c:	e0bffb17 	ldw	r2,-20(fp)
1000b540:	1004d43a 	srli	r2,r2,16
1000b544:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
1000b548:	e0bff517 	ldw	r2,-44(fp)
1000b54c:	10800017 	ldw	r2,0(r2)
1000b550:	10ffffcc 	andi	r3,r2,65535
1000b554:	e0bffa17 	ldw	r2,-24(fp)
1000b558:	10bfffcc 	andi	r2,r2,65535
1000b55c:	1887c83a 	sub	r3,r3,r2
1000b560:	e0bff217 	ldw	r2,-56(fp)
1000b564:	1885883a 	add	r2,r3,r2
1000b568:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
1000b56c:	e0bffc17 	ldw	r2,-16(fp)
1000b570:	1005d43a 	srai	r2,r2,16
1000b574:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
1000b578:	e0bff517 	ldw	r2,-44(fp)
1000b57c:	10800017 	ldw	r2,0(r2)
1000b580:	1006d43a 	srli	r3,r2,16
1000b584:	e0bffb17 	ldw	r2,-20(fp)
1000b588:	10bfffcc 	andi	r2,r2,65535
1000b58c:	1887c83a 	sub	r3,r3,r2
1000b590:	e0bff217 	ldw	r2,-56(fp)
1000b594:	1885883a 	add	r2,r3,r2
1000b598:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
1000b59c:	e0bffd17 	ldw	r2,-12(fp)
1000b5a0:	1005d43a 	srai	r2,r2,16
1000b5a4:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
1000b5a8:	e0bff517 	ldw	r2,-44(fp)
1000b5ac:	10c00104 	addi	r3,r2,4
1000b5b0:	e0fff515 	stw	r3,-44(fp)
1000b5b4:	e0fffd17 	ldw	r3,-12(fp)
1000b5b8:	1808943a 	slli	r4,r3,16
1000b5bc:	e0fffc17 	ldw	r3,-16(fp)
1000b5c0:	18ffffcc 	andi	r3,r3,65535
1000b5c4:	20c6b03a 	or	r3,r4,r3
1000b5c8:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
1000b5cc:	e0bff717 	ldw	r2,-36(fp)
1000b5d0:	e0fff817 	ldw	r3,-32(fp)
1000b5d4:	18bfc12e 	bgeu	r3,r2,1000b4dc <__alt_data_end+0xf800b4dc>
      if (!*bxe)
1000b5d8:	e0bff617 	ldw	r2,-40(fp)
1000b5dc:	10800017 	ldw	r2,0(r2)
1000b5e0:	1000131e 	bne	r2,zero,1000b630 <quorem+0x220>
	{
	  bx = b->_x;
1000b5e4:	e0bffe17 	ldw	r2,-8(fp)
1000b5e8:	10800504 	addi	r2,r2,20
1000b5ec:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
1000b5f0:	00000306 	br	1000b600 <quorem+0x1f0>
	    --n;
1000b5f4:	e0bff117 	ldw	r2,-60(fp)
1000b5f8:	10bfffc4 	addi	r2,r2,-1
1000b5fc:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
1000b600:	e0bff617 	ldw	r2,-40(fp)
1000b604:	10bfff04 	addi	r2,r2,-4
1000b608:	e0bff615 	stw	r2,-40(fp)
1000b60c:	e0bff617 	ldw	r2,-40(fp)
1000b610:	e0fff517 	ldw	r3,-44(fp)
1000b614:	1880032e 	bgeu	r3,r2,1000b624 <quorem+0x214>
1000b618:	e0bff617 	ldw	r2,-40(fp)
1000b61c:	10800017 	ldw	r2,0(r2)
1000b620:	103ff426 	beq	r2,zero,1000b5f4 <__alt_data_end+0xf800b5f4>
	    --n;
	  b->_wds = n;
1000b624:	e0bffe17 	ldw	r2,-8(fp)
1000b628:	e0fff117 	ldw	r3,-60(fp)
1000b62c:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
1000b630:	e17fff17 	ldw	r5,-4(fp)
1000b634:	e13ffe17 	ldw	r4,-8(fp)
1000b638:	00104180 	call	10010418 <__mcmp>
1000b63c:	10005f16 	blt	r2,zero,1000b7bc <quorem+0x3ac>
    {
      q++;
1000b640:	e0bff417 	ldw	r2,-48(fp)
1000b644:	10800044 	addi	r2,r2,1
1000b648:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
1000b64c:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
1000b650:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
1000b654:	e0bffe17 	ldw	r2,-8(fp)
1000b658:	10800504 	addi	r2,r2,20
1000b65c:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
1000b660:	e0bfff17 	ldw	r2,-4(fp)
1000b664:	10800504 	addi	r2,r2,20
1000b668:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
1000b66c:	e0bff717 	ldw	r2,-36(fp)
1000b670:	10c00104 	addi	r3,r2,4
1000b674:	e0fff715 	stw	r3,-36(fp)
1000b678:	10800017 	ldw	r2,0(r2)
1000b67c:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
1000b680:	e0bff917 	ldw	r2,-28(fp)
1000b684:	10ffffcc 	andi	r3,r2,65535
1000b688:	e0bff317 	ldw	r2,-52(fp)
1000b68c:	1885883a 	add	r2,r3,r2
1000b690:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
1000b694:	e0bff917 	ldw	r2,-28(fp)
1000b698:	1006d43a 	srli	r3,r2,16
1000b69c:	e0bffa17 	ldw	r2,-24(fp)
1000b6a0:	1004d43a 	srli	r2,r2,16
1000b6a4:	1885883a 	add	r2,r3,r2
1000b6a8:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
1000b6ac:	e0bffb17 	ldw	r2,-20(fp)
1000b6b0:	1004d43a 	srli	r2,r2,16
1000b6b4:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
1000b6b8:	e0bff517 	ldw	r2,-44(fp)
1000b6bc:	10800017 	ldw	r2,0(r2)
1000b6c0:	10ffffcc 	andi	r3,r2,65535
1000b6c4:	e0bffa17 	ldw	r2,-24(fp)
1000b6c8:	10bfffcc 	andi	r2,r2,65535
1000b6cc:	1887c83a 	sub	r3,r3,r2
1000b6d0:	e0bff217 	ldw	r2,-56(fp)
1000b6d4:	1885883a 	add	r2,r3,r2
1000b6d8:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
1000b6dc:	e0bffc17 	ldw	r2,-16(fp)
1000b6e0:	1005d43a 	srai	r2,r2,16
1000b6e4:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
1000b6e8:	e0bff517 	ldw	r2,-44(fp)
1000b6ec:	10800017 	ldw	r2,0(r2)
1000b6f0:	1006d43a 	srli	r3,r2,16
1000b6f4:	e0bffb17 	ldw	r2,-20(fp)
1000b6f8:	10bfffcc 	andi	r2,r2,65535
1000b6fc:	1887c83a 	sub	r3,r3,r2
1000b700:	e0bff217 	ldw	r2,-56(fp)
1000b704:	1885883a 	add	r2,r3,r2
1000b708:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
1000b70c:	e0bffd17 	ldw	r2,-12(fp)
1000b710:	1005d43a 	srai	r2,r2,16
1000b714:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
1000b718:	e0bff517 	ldw	r2,-44(fp)
1000b71c:	10c00104 	addi	r3,r2,4
1000b720:	e0fff515 	stw	r3,-44(fp)
1000b724:	e0fffd17 	ldw	r3,-12(fp)
1000b728:	1808943a 	slli	r4,r3,16
1000b72c:	e0fffc17 	ldw	r3,-16(fp)
1000b730:	18ffffcc 	andi	r3,r3,65535
1000b734:	20c6b03a 	or	r3,r4,r3
1000b738:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
1000b73c:	e0bff717 	ldw	r2,-36(fp)
1000b740:	e0fff817 	ldw	r3,-32(fp)
1000b744:	18bfc92e 	bgeu	r3,r2,1000b66c <__alt_data_end+0xf800b66c>
      bx = b->_x;
1000b748:	e0bffe17 	ldw	r2,-8(fp)
1000b74c:	10800504 	addi	r2,r2,20
1000b750:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
1000b754:	e0bff117 	ldw	r2,-60(fp)
1000b758:	1085883a 	add	r2,r2,r2
1000b75c:	1085883a 	add	r2,r2,r2
1000b760:	1007883a 	mov	r3,r2
1000b764:	e0bff517 	ldw	r2,-44(fp)
1000b768:	10c5883a 	add	r2,r2,r3
1000b76c:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
1000b770:	e0bff617 	ldw	r2,-40(fp)
1000b774:	10800017 	ldw	r2,0(r2)
1000b778:	1000101e 	bne	r2,zero,1000b7bc <quorem+0x3ac>
	{
	  while (--bxe > bx && !*bxe)
1000b77c:	00000306 	br	1000b78c <quorem+0x37c>
	    --n;
1000b780:	e0bff117 	ldw	r2,-60(fp)
1000b784:	10bfffc4 	addi	r2,r2,-1
1000b788:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
1000b78c:	e0bff617 	ldw	r2,-40(fp)
1000b790:	10bfff04 	addi	r2,r2,-4
1000b794:	e0bff615 	stw	r2,-40(fp)
1000b798:	e0bff617 	ldw	r2,-40(fp)
1000b79c:	e0fff517 	ldw	r3,-44(fp)
1000b7a0:	1880032e 	bgeu	r3,r2,1000b7b0 <quorem+0x3a0>
1000b7a4:	e0bff617 	ldw	r2,-40(fp)
1000b7a8:	10800017 	ldw	r2,0(r2)
1000b7ac:	103ff426 	beq	r2,zero,1000b780 <__alt_data_end+0xf800b780>
	    --n;
	  b->_wds = n;
1000b7b0:	e0bffe17 	ldw	r2,-8(fp)
1000b7b4:	e0fff117 	ldw	r3,-60(fp)
1000b7b8:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
1000b7bc:	e0bff417 	ldw	r2,-48(fp)
}
1000b7c0:	e037883a 	mov	sp,fp
1000b7c4:	dfc00117 	ldw	ra,4(sp)
1000b7c8:	df000017 	ldw	fp,0(sp)
1000b7cc:	dec00204 	addi	sp,sp,8
1000b7d0:	f800283a 	ret

1000b7d4 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
1000b7d4:	deffcc04 	addi	sp,sp,-208
1000b7d8:	dfc03315 	stw	ra,204(sp)
1000b7dc:	df003215 	stw	fp,200(sp)
1000b7e0:	dcc03115 	stw	r19,196(sp)
1000b7e4:	dc803015 	stw	r18,192(sp)
1000b7e8:	dc402f15 	stw	r17,188(sp)
1000b7ec:	dc002e15 	stw	r16,184(sp)
1000b7f0:	df003204 	addi	fp,sp,200
1000b7f4:	e13ff815 	stw	r4,-32(fp)
1000b7f8:	e17ff915 	stw	r5,-28(fp)
1000b7fc:	e1bffa15 	stw	r6,-24(fp)
1000b800:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
1000b804:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
1000b808:	e0bff917 	ldw	r2,-28(fp)
1000b80c:	e0bff215 	stw	r2,-56(fp)
1000b810:	e0bffa17 	ldw	r2,-24(fp)
1000b814:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
1000b818:	e0bff817 	ldw	r2,-32(fp)
1000b81c:	10801017 	ldw	r2,64(r2)
1000b820:	10001326 	beq	r2,zero,1000b870 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
1000b824:	e0bff817 	ldw	r2,-32(fp)
1000b828:	10801017 	ldw	r2,64(r2)
1000b82c:	e0fff817 	ldw	r3,-32(fp)
1000b830:	18c01117 	ldw	r3,68(r3)
1000b834:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
1000b838:	e0bff817 	ldw	r2,-32(fp)
1000b83c:	10801017 	ldw	r2,64(r2)
1000b840:	e0fff817 	ldw	r3,-32(fp)
1000b844:	18c01117 	ldw	r3,68(r3)
1000b848:	01000044 	movi	r4,1
1000b84c:	20c6983a 	sll	r3,r4,r3
1000b850:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
1000b854:	e0bff817 	ldw	r2,-32(fp)
1000b858:	10801017 	ldw	r2,64(r2)
1000b85c:	100b883a 	mov	r5,r2
1000b860:	e13ff817 	ldw	r4,-32(fp)
1000b864:	000f7300 	call	1000f730 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
1000b868:	e0bff817 	ldw	r2,-32(fp)
1000b86c:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
1000b870:	e0bff317 	ldw	r2,-52(fp)
1000b874:	1000090e 	bge	r2,zero,1000b89c <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
1000b878:	e0800417 	ldw	r2,16(fp)
1000b87c:	00c00044 	movi	r3,1
1000b880:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
1000b884:	e0fff317 	ldw	r3,-52(fp)
1000b888:	00a00034 	movhi	r2,32768
1000b88c:	10bfffc4 	addi	r2,r2,-1
1000b890:	1884703a 	and	r2,r3,r2
1000b894:	e0bff315 	stw	r2,-52(fp)
1000b898:	00000206 	br	1000b8a4 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
1000b89c:	e0800417 	ldw	r2,16(fp)
1000b8a0:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
1000b8a4:	e0bff317 	ldw	r2,-52(fp)
1000b8a8:	10dffc2c 	andhi	r3,r2,32752
1000b8ac:	009ffc34 	movhi	r2,32752
1000b8b0:	1880221e 	bne	r3,r2,1000b93c <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
1000b8b4:	e0800317 	ldw	r2,12(fp)
1000b8b8:	00c9c3c4 	movi	r3,9999
1000b8bc:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
1000b8c0:	e0bff217 	ldw	r2,-56(fp)
1000b8c4:	1000081e 	bne	r2,zero,1000b8e8 <_dtoa_r+0x114>
1000b8c8:	e0fff317 	ldw	r3,-52(fp)
1000b8cc:	00800434 	movhi	r2,16
1000b8d0:	10bfffc4 	addi	r2,r2,-1
1000b8d4:	1884703a 	and	r2,r3,r2
1000b8d8:	1000031e 	bne	r2,zero,1000b8e8 <_dtoa_r+0x114>
1000b8dc:	00840374 	movhi	r2,4109
1000b8e0:	10bdc904 	addi	r2,r2,-2268
1000b8e4:	00000206 	br	1000b8f0 <_dtoa_r+0x11c>
1000b8e8:	00840374 	movhi	r2,4109
1000b8ec:	10bdcc04 	addi	r2,r2,-2256
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
1000b8f0:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
1000b8f4:	e0800517 	ldw	r2,20(fp)
1000b8f8:	10000e26 	beq	r2,zero,1000b934 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
1000b8fc:	e0bfe717 	ldw	r2,-100(fp)
1000b900:	108000c4 	addi	r2,r2,3
1000b904:	10800003 	ldbu	r2,0(r2)
1000b908:	10803fcc 	andi	r2,r2,255
1000b90c:	1080201c 	xori	r2,r2,128
1000b910:	10bfe004 	addi	r2,r2,-128
1000b914:	10000326 	beq	r2,zero,1000b924 <_dtoa_r+0x150>
1000b918:	e0bfe717 	ldw	r2,-100(fp)
1000b91c:	10800204 	addi	r2,r2,8
1000b920:	00000206 	br	1000b92c <_dtoa_r+0x158>
1000b924:	e0bfe717 	ldw	r2,-100(fp)
1000b928:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
1000b92c:	e0c00517 	ldw	r3,20(fp)
1000b930:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
1000b934:	e0bfe717 	ldw	r2,-100(fp)
1000b938:	00067b06 	br	1000d328 <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
1000b93c:	e0bff217 	ldw	r2,-56(fp)
1000b940:	e0fff317 	ldw	r3,-52(fp)
1000b944:	000d883a 	mov	r6,zero
1000b948:	000f883a 	mov	r7,zero
1000b94c:	1009883a 	mov	r4,r2
1000b950:	180b883a 	mov	r5,r3
1000b954:	00151e40 	call	100151e4 <__eqdf2>
1000b958:	10000e1e 	bne	r2,zero,1000b994 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
1000b95c:	e0800317 	ldw	r2,12(fp)
1000b960:	00c00044 	movi	r3,1
1000b964:	10c00015 	stw	r3,0(r2)
      s = "0";
1000b968:	00840374 	movhi	r2,4109
1000b96c:	10bdcd04 	addi	r2,r2,-2252
1000b970:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
1000b974:	e0800517 	ldw	r2,20(fp)
1000b978:	10000426 	beq	r2,zero,1000b98c <_dtoa_r+0x1b8>
	*rve = s + 1;
1000b97c:	e0bfe717 	ldw	r2,-100(fp)
1000b980:	10c00044 	addi	r3,r2,1
1000b984:	e0800517 	ldw	r2,20(fp)
1000b988:	10c00015 	stw	r3,0(r2)
      return s;
1000b98c:	e0bfe717 	ldw	r2,-100(fp)
1000b990:	00066506 	br	1000d328 <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
1000b994:	e0bff217 	ldw	r2,-56(fp)
1000b998:	e0fff317 	ldw	r3,-52(fp)
1000b99c:	e17ff104 	addi	r5,fp,-60
1000b9a0:	e13ff004 	addi	r4,fp,-64
1000b9a4:	d9000015 	stw	r4,0(sp)
1000b9a8:	280f883a 	mov	r7,r5
1000b9ac:	100b883a 	mov	r5,r2
1000b9b0:	180d883a 	mov	r6,r3
1000b9b4:	e13ff817 	ldw	r4,-32(fp)
1000b9b8:	0010aa00 	call	10010aa0 <__d2b>
1000b9bc:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
1000b9c0:	e0bff317 	ldw	r2,-52(fp)
1000b9c4:	1004d53a 	srli	r2,r2,20
1000b9c8:	1081ffcc 	andi	r2,r2,2047
1000b9cc:	e0bfd215 	stw	r2,-184(fp)
1000b9d0:	e0bfd217 	ldw	r2,-184(fp)
1000b9d4:	10001126 	beq	r2,zero,1000ba1c <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
1000b9d8:	e0bff217 	ldw	r2,-56(fp)
1000b9dc:	e0fff317 	ldw	r3,-52(fp)
1000b9e0:	e0bff415 	stw	r2,-48(fp)
1000b9e4:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
1000b9e8:	e0fff517 	ldw	r3,-44(fp)
1000b9ec:	00800434 	movhi	r2,16
1000b9f0:	10bfffc4 	addi	r2,r2,-1
1000b9f4:	1884703a 	and	r2,r3,r2
1000b9f8:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
1000b9fc:	e0bff517 	ldw	r2,-44(fp)
1000ba00:	108ffc34 	orhi	r2,r2,16368
1000ba04:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
1000ba08:	e0bfd217 	ldw	r2,-184(fp)
1000ba0c:	10bf0044 	addi	r2,r2,-1023
1000ba10:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
1000ba14:	e03fe015 	stw	zero,-128(fp)
1000ba18:	00002806 	br	1000babc <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
1000ba1c:	e0fff017 	ldw	r3,-64(fp)
1000ba20:	e0bff117 	ldw	r2,-60(fp)
1000ba24:	1885883a 	add	r2,r3,r2
1000ba28:	10810c84 	addi	r2,r2,1074
1000ba2c:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
1000ba30:	e0bfd217 	ldw	r2,-184(fp)
1000ba34:	10800850 	cmplti	r2,r2,33
1000ba38:	10000b1e 	bne	r2,zero,1000ba68 <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
1000ba3c:	e0fff317 	ldw	r3,-52(fp)
1000ba40:	01001004 	movi	r4,64
1000ba44:	e0bfd217 	ldw	r2,-184(fp)
1000ba48:	2085c83a 	sub	r2,r4,r2
1000ba4c:	1886983a 	sll	r3,r3,r2
1000ba50:	e13ff217 	ldw	r4,-56(fp)
1000ba54:	e0bfd217 	ldw	r2,-184(fp)
1000ba58:	10bff804 	addi	r2,r2,-32
1000ba5c:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
1000ba60:	1884b03a 	or	r2,r3,r2
1000ba64:	00000506 	br	1000ba7c <_dtoa_r+0x2a8>
1000ba68:	e0fff217 	ldw	r3,-56(fp)
1000ba6c:	01000804 	movi	r4,32
1000ba70:	e0bfd217 	ldw	r2,-184(fp)
1000ba74:	2085c83a 	sub	r2,r4,r2
1000ba78:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
1000ba7c:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
1000ba80:	e13fe817 	ldw	r4,-96(fp)
1000ba84:	00154a40 	call	100154a4 <__floatunsidf>
1000ba88:	1009883a 	mov	r4,r2
1000ba8c:	180b883a 	mov	r5,r3
1000ba90:	e13ff415 	stw	r4,-48(fp)
1000ba94:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
1000ba98:	e0fff517 	ldw	r3,-44(fp)
1000ba9c:	00bf8434 	movhi	r2,65040
1000baa0:	1885883a 	add	r2,r3,r2
1000baa4:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
1000baa8:	e0bfd217 	ldw	r2,-184(fp)
1000baac:	10bef344 	addi	r2,r2,-1075
1000bab0:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
1000bab4:	00800044 	movi	r2,1
1000bab8:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
1000babc:	e0bff417 	ldw	r2,-48(fp)
1000bac0:	e0fff517 	ldw	r3,-44(fp)
1000bac4:	000d883a 	mov	r6,zero
1000bac8:	01cffe34 	movhi	r7,16376
1000bacc:	1009883a 	mov	r4,r2
1000bad0:	180b883a 	mov	r5,r3
1000bad4:	0004dbc0 	call	10004dbc <__subdf3>
1000bad8:	1009883a 	mov	r4,r2
1000badc:	180b883a 	mov	r5,r3
1000bae0:	2005883a 	mov	r2,r4
1000bae4:	2807883a 	mov	r3,r5
1000bae8:	0198dbf4 	movhi	r6,25455
1000baec:	3190d844 	addi	r6,r6,17249
1000baf0:	01cff4f4 	movhi	r7,16339
1000baf4:	39e1e9c4 	addi	r7,r7,-30809
1000baf8:	1009883a 	mov	r4,r2
1000bafc:	180b883a 	mov	r5,r3
1000bb00:	00045540 	call	10004554 <__muldf3>
1000bb04:	1009883a 	mov	r4,r2
1000bb08:	180b883a 	mov	r5,r3
1000bb0c:	2005883a 	mov	r2,r4
1000bb10:	2807883a 	mov	r3,r5
1000bb14:	01a2d874 	movhi	r6,35681
1000bb18:	31b22cc4 	addi	r6,r6,-14157
1000bb1c:	01cff1f4 	movhi	r7,16327
1000bb20:	39e28a04 	addi	r7,r7,-30168
1000bb24:	1009883a 	mov	r4,r2
1000bb28:	180b883a 	mov	r5,r3
1000bb2c:	0003bb40 	call	10003bb4 <__adddf3>
1000bb30:	1009883a 	mov	r4,r2
1000bb34:	180b883a 	mov	r5,r3
1000bb38:	2025883a 	mov	r18,r4
1000bb3c:	2827883a 	mov	r19,r5
1000bb40:	e13fd217 	ldw	r4,-184(fp)
1000bb44:	00153c80 	call	100153c8 <__floatsidf>
1000bb48:	1011883a 	mov	r8,r2
1000bb4c:	1813883a 	mov	r9,r3
1000bb50:	019427f4 	movhi	r6,20639
1000bb54:	319e7ec4 	addi	r6,r6,31227
1000bb58:	01cff4f4 	movhi	r7,16339
1000bb5c:	39d104c4 	addi	r7,r7,17427
1000bb60:	4009883a 	mov	r4,r8
1000bb64:	480b883a 	mov	r5,r9
1000bb68:	00045540 	call	10004554 <__muldf3>
1000bb6c:	1009883a 	mov	r4,r2
1000bb70:	180b883a 	mov	r5,r3
1000bb74:	2005883a 	mov	r2,r4
1000bb78:	2807883a 	mov	r3,r5
1000bb7c:	100d883a 	mov	r6,r2
1000bb80:	180f883a 	mov	r7,r3
1000bb84:	9009883a 	mov	r4,r18
1000bb88:	980b883a 	mov	r5,r19
1000bb8c:	0003bb40 	call	10003bb4 <__adddf3>
1000bb90:	1009883a 	mov	r4,r2
1000bb94:	180b883a 	mov	r5,r3
1000bb98:	e13fe515 	stw	r4,-108(fp)
1000bb9c:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
1000bba0:	e13fe517 	ldw	r4,-108(fp)
1000bba4:	e17fe617 	ldw	r5,-104(fp)
1000bba8:	00153480 	call	10015348 <__fixdfsi>
1000bbac:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
1000bbb0:	000d883a 	mov	r6,zero
1000bbb4:	000f883a 	mov	r7,zero
1000bbb8:	e13fe517 	ldw	r4,-108(fp)
1000bbbc:	e17fe617 	ldw	r5,-104(fp)
1000bbc0:	00044600 	call	10004460 <__ledf2>
1000bbc4:	10000d0e 	bge	r2,zero,1000bbfc <_dtoa_r+0x428>
1000bbc8:	e13fd717 	ldw	r4,-164(fp)
1000bbcc:	00153c80 	call	100153c8 <__floatsidf>
1000bbd0:	1011883a 	mov	r8,r2
1000bbd4:	1813883a 	mov	r9,r3
1000bbd8:	e1bfe517 	ldw	r6,-108(fp)
1000bbdc:	e1ffe617 	ldw	r7,-104(fp)
1000bbe0:	4009883a 	mov	r4,r8
1000bbe4:	480b883a 	mov	r5,r9
1000bbe8:	00151e40 	call	100151e4 <__eqdf2>
1000bbec:	10000326 	beq	r2,zero,1000bbfc <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
1000bbf0:	e0bfd717 	ldw	r2,-164(fp)
1000bbf4:	10bfffc4 	addi	r2,r2,-1
1000bbf8:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
1000bbfc:	00800044 	movi	r2,1
1000bc00:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
1000bc04:	e0bfd717 	ldw	r2,-164(fp)
1000bc08:	10001616 	blt	r2,zero,1000bc64 <_dtoa_r+0x490>
1000bc0c:	e0bfd717 	ldw	r2,-164(fp)
1000bc10:	108005c8 	cmpgei	r2,r2,23
1000bc14:	1000131e 	bne	r2,zero,1000bc64 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
1000bc18:	e0bff217 	ldw	r2,-56(fp)
1000bc1c:	e0fff317 	ldw	r3,-52(fp)
1000bc20:	01040374 	movhi	r4,4109
1000bc24:	213dd304 	addi	r4,r4,-2228
1000bc28:	e17fd717 	ldw	r5,-164(fp)
1000bc2c:	280a90fa 	slli	r5,r5,3
1000bc30:	214d883a 	add	r6,r4,r5
1000bc34:	31000017 	ldw	r4,0(r6)
1000bc38:	31400117 	ldw	r5,4(r6)
1000bc3c:	200d883a 	mov	r6,r4
1000bc40:	280f883a 	mov	r7,r5
1000bc44:	1009883a 	mov	r4,r2
1000bc48:	180b883a 	mov	r5,r3
1000bc4c:	00044600 	call	10004460 <__ledf2>
1000bc50:	1000030e 	bge	r2,zero,1000bc60 <_dtoa_r+0x48c>
	k--;
1000bc54:	e0bfd717 	ldw	r2,-164(fp)
1000bc58:	10bfffc4 	addi	r2,r2,-1
1000bc5c:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
1000bc60:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
1000bc64:	e0fff017 	ldw	r3,-64(fp)
1000bc68:	e0bfd217 	ldw	r2,-184(fp)
1000bc6c:	1885c83a 	sub	r2,r3,r2
1000bc70:	10bfffc4 	addi	r2,r2,-1
1000bc74:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
1000bc78:	e0bfd617 	ldw	r2,-168(fp)
1000bc7c:	10000416 	blt	r2,zero,1000bc90 <_dtoa_r+0x4bc>
    {
      b2 = 0;
1000bc80:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
1000bc84:	e0bfd617 	ldw	r2,-168(fp)
1000bc88:	e0bfdc15 	stw	r2,-144(fp)
1000bc8c:	00000406 	br	1000bca0 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
1000bc90:	e0bfd617 	ldw	r2,-168(fp)
1000bc94:	0085c83a 	sub	r2,zero,r2
1000bc98:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
1000bc9c:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
1000bca0:	e0bfd717 	ldw	r2,-164(fp)
1000bca4:	10000816 	blt	r2,zero,1000bcc8 <_dtoa_r+0x4f4>
    {
      b5 = 0;
1000bca8:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
1000bcac:	e0bfd717 	ldw	r2,-164(fp)
1000bcb0:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
1000bcb4:	e0ffdc17 	ldw	r3,-144(fp)
1000bcb8:	e0bfd717 	ldw	r2,-164(fp)
1000bcbc:	1885883a 	add	r2,r3,r2
1000bcc0:	e0bfdc15 	stw	r2,-144(fp)
1000bcc4:	00000806 	br	1000bce8 <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
1000bcc8:	e0ffcf17 	ldw	r3,-196(fp)
1000bccc:	e0bfd717 	ldw	r2,-164(fp)
1000bcd0:	1885c83a 	sub	r2,r3,r2
1000bcd4:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
1000bcd8:	e0bfd717 	ldw	r2,-164(fp)
1000bcdc:	0085c83a 	sub	r2,zero,r2
1000bce0:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
1000bce4:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
1000bce8:	e0bffb17 	ldw	r2,-20(fp)
1000bcec:	10000316 	blt	r2,zero,1000bcfc <_dtoa_r+0x528>
1000bcf0:	e0bffb17 	ldw	r2,-20(fp)
1000bcf4:	10800290 	cmplti	r2,r2,10
1000bcf8:	1000011e 	bne	r2,zero,1000bd00 <_dtoa_r+0x52c>
    mode = 0;
1000bcfc:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
1000bd00:	00800044 	movi	r2,1
1000bd04:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
1000bd08:	e0bffb17 	ldw	r2,-20(fp)
1000bd0c:	10800190 	cmplti	r2,r2,6
1000bd10:	1000041e 	bne	r2,zero,1000bd24 <_dtoa_r+0x550>
    {
      mode -= 4;
1000bd14:	e0bffb17 	ldw	r2,-20(fp)
1000bd18:	10bfff04 	addi	r2,r2,-4
1000bd1c:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
1000bd20:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
1000bd24:	00800044 	movi	r2,1
1000bd28:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
1000bd2c:	00bfffc4 	movi	r2,-1
1000bd30:	e0bfd515 	stw	r2,-172(fp)
1000bd34:	e0bfd517 	ldw	r2,-172(fp)
1000bd38:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
1000bd3c:	e0bffb17 	ldw	r2,-20(fp)
1000bd40:	108001a8 	cmpgeui	r2,r2,6
1000bd44:	10002c1e 	bne	r2,zero,1000bdf8 <_dtoa_r+0x624>
1000bd48:	e0bffb17 	ldw	r2,-20(fp)
1000bd4c:	100690ba 	slli	r3,r2,2
1000bd50:	00840074 	movhi	r2,4097
1000bd54:	10af5904 	addi	r2,r2,-17052
1000bd58:	1885883a 	add	r2,r3,r2
1000bd5c:	10800017 	ldw	r2,0(r2)
1000bd60:	1000683a 	jmp	r2
1000bd64:	1000bd7c 	xorhi	zero,r2,757
1000bd68:	1000bd7c 	xorhi	zero,r2,757
1000bd6c:	1000bd8c 	andi	zero,r2,758
1000bd70:	1000bdbc 	xorhi	zero,r2,758
1000bd74:	1000bd90 	cmplti	zero,r2,758
1000bd78:	1000bdc0 	call	11000bdc <__alt_heap_start+0xf1dfa0>
    {
    case 0:
    case 1:
      i = 18;
1000bd7c:	00800484 	movi	r2,18
1000bd80:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
1000bd84:	e0000215 	stw	zero,8(fp)
      break;
1000bd88:	00001b06 	br	1000bdf8 <_dtoa_r+0x624>
    case 2:
      leftright = 0;
1000bd8c:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
1000bd90:	e0800217 	ldw	r2,8(fp)
1000bd94:	00800216 	blt	zero,r2,1000bda0 <_dtoa_r+0x5cc>
	ndigits = 1;
1000bd98:	00800044 	movi	r2,1
1000bd9c:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
1000bda0:	e0800217 	ldw	r2,8(fp)
1000bda4:	e0bfd215 	stw	r2,-184(fp)
1000bda8:	e0bfd217 	ldw	r2,-184(fp)
1000bdac:	e0bfd515 	stw	r2,-172(fp)
1000bdb0:	e0bfd517 	ldw	r2,-172(fp)
1000bdb4:	e0bfd415 	stw	r2,-176(fp)
      break;
1000bdb8:	00000f06 	br	1000bdf8 <_dtoa_r+0x624>
    case 3:
      leftright = 0;
1000bdbc:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
1000bdc0:	e0c00217 	ldw	r3,8(fp)
1000bdc4:	e0bfd717 	ldw	r2,-164(fp)
1000bdc8:	1885883a 	add	r2,r3,r2
1000bdcc:	10800044 	addi	r2,r2,1
1000bdd0:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
1000bdd4:	e0bfd217 	ldw	r2,-184(fp)
1000bdd8:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
1000bddc:	e0bfd217 	ldw	r2,-184(fp)
1000bde0:	10bfffc4 	addi	r2,r2,-1
1000bde4:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
1000bde8:	e0bfd217 	ldw	r2,-184(fp)
1000bdec:	00800216 	blt	zero,r2,1000bdf8 <_dtoa_r+0x624>
	i = 1;
1000bdf0:	00800044 	movi	r2,1
1000bdf4:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
1000bdf8:	00800104 	movi	r2,4
1000bdfc:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
1000be00:	e0bff817 	ldw	r2,-32(fp)
1000be04:	10001115 	stw	zero,68(r2)
1000be08:	00000806 	br	1000be2c <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
1000be0c:	e0bff817 	ldw	r2,-32(fp)
1000be10:	10801117 	ldw	r2,68(r2)
1000be14:	10c00044 	addi	r3,r2,1
1000be18:	e0bff817 	ldw	r2,-32(fp)
1000be1c:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
1000be20:	e0bfd617 	ldw	r2,-168(fp)
1000be24:	1085883a 	add	r2,r2,r2
1000be28:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
1000be2c:	e0bfd617 	ldw	r2,-168(fp)
1000be30:	10800504 	addi	r2,r2,20
1000be34:	e0ffd217 	ldw	r3,-184(fp)
1000be38:	18bff42e 	bgeu	r3,r2,1000be0c <__alt_data_end+0xf800be0c>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
1000be3c:	e0bff817 	ldw	r2,-32(fp)
1000be40:	10801117 	ldw	r2,68(r2)
1000be44:	100b883a 	mov	r5,r2
1000be48:	e13ff817 	ldw	r4,-32(fp)
1000be4c:	000f6000 	call	1000f600 <_Balloc>
1000be50:	1007883a 	mov	r3,r2
1000be54:	e0bff817 	ldw	r2,-32(fp)
1000be58:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
1000be5c:	e0bff817 	ldw	r2,-32(fp)
1000be60:	10801017 	ldw	r2,64(r2)
1000be64:	e0bfe915 	stw	r2,-92(fp)
1000be68:	e0bfe917 	ldw	r2,-92(fp)
1000be6c:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
1000be70:	e0bfd417 	ldw	r2,-176(fp)
1000be74:	10021616 	blt	r2,zero,1000c6d0 <_dtoa_r+0xefc>
1000be78:	e0bfd417 	ldw	r2,-176(fp)
1000be7c:	108003c8 	cmpgei	r2,r2,15
1000be80:	1002131e 	bne	r2,zero,1000c6d0 <_dtoa_r+0xefc>
1000be84:	e0bfdf17 	ldw	r2,-132(fp)
1000be88:	10021126 	beq	r2,zero,1000c6d0 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
1000be8c:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
1000be90:	e0bff217 	ldw	r2,-56(fp)
1000be94:	e0fff317 	ldw	r3,-52(fp)
1000be98:	e0bff415 	stw	r2,-48(fp)
1000be9c:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
1000bea0:	e0bfd717 	ldw	r2,-164(fp)
1000bea4:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
1000bea8:	e0bfd417 	ldw	r2,-176(fp)
1000beac:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
1000beb0:	00800084 	movi	r2,2
1000beb4:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
1000beb8:	e0bfd717 	ldw	r2,-164(fp)
1000bebc:	0080540e 	bge	zero,r2,1000c010 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
1000bec0:	e0bfd717 	ldw	r2,-164(fp)
1000bec4:	10c003cc 	andi	r3,r2,15
1000bec8:	00840374 	movhi	r2,4109
1000becc:	10bdd304 	addi	r2,r2,-2228
1000bed0:	180690fa 	slli	r3,r3,3
1000bed4:	10c5883a 	add	r2,r2,r3
1000bed8:	10c00017 	ldw	r3,0(r2)
1000bedc:	e0ffe515 	stw	r3,-108(fp)
1000bee0:	10800117 	ldw	r2,4(r2)
1000bee4:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
1000bee8:	e0bfd717 	ldw	r2,-164(fp)
1000beec:	1005d13a 	srai	r2,r2,4
1000bef0:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
1000bef4:	e0bfd617 	ldw	r2,-168(fp)
1000bef8:	1080040c 	andi	r2,r2,16
1000befc:	10003426 	beq	r2,zero,1000bfd0 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
1000bf00:	e0bfd617 	ldw	r2,-168(fp)
1000bf04:	108003cc 	andi	r2,r2,15
1000bf08:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
1000bf0c:	e0bff217 	ldw	r2,-56(fp)
1000bf10:	e0fff317 	ldw	r3,-52(fp)
1000bf14:	01840374 	movhi	r6,4109
1000bf18:	31be0504 	addi	r6,r6,-2028
1000bf1c:	31000817 	ldw	r4,32(r6)
1000bf20:	31400917 	ldw	r5,36(r6)
1000bf24:	200d883a 	mov	r6,r4
1000bf28:	280f883a 	mov	r7,r5
1000bf2c:	1009883a 	mov	r4,r2
1000bf30:	180b883a 	mov	r5,r3
1000bf34:	00148140 	call	10014814 <__divdf3>
1000bf38:	1009883a 	mov	r4,r2
1000bf3c:	180b883a 	mov	r5,r3
1000bf40:	2005883a 	mov	r2,r4
1000bf44:	2807883a 	mov	r3,r5
1000bf48:	e0bff215 	stw	r2,-56(fp)
1000bf4c:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
1000bf50:	e0bfd317 	ldw	r2,-180(fp)
1000bf54:	10800044 	addi	r2,r2,1
1000bf58:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
1000bf5c:	00001c06 	br	1000bfd0 <_dtoa_r+0x7fc>
	    if (j & 1)
1000bf60:	e0bfd617 	ldw	r2,-168(fp)
1000bf64:	1080004c 	andi	r2,r2,1
1000bf68:	10001326 	beq	r2,zero,1000bfb8 <_dtoa_r+0x7e4>
	      {
		ieps++;
1000bf6c:	e0bfd317 	ldw	r2,-180(fp)
1000bf70:	10800044 	addi	r2,r2,1
1000bf74:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
1000bf78:	00840374 	movhi	r2,4109
1000bf7c:	10be0504 	addi	r2,r2,-2028
1000bf80:	e0ffd217 	ldw	r3,-184(fp)
1000bf84:	180690fa 	slli	r3,r3,3
1000bf88:	10c9883a 	add	r4,r2,r3
1000bf8c:	20800017 	ldw	r2,0(r4)
1000bf90:	20c00117 	ldw	r3,4(r4)
1000bf94:	100d883a 	mov	r6,r2
1000bf98:	180f883a 	mov	r7,r3
1000bf9c:	e13fe517 	ldw	r4,-108(fp)
1000bfa0:	e17fe617 	ldw	r5,-104(fp)
1000bfa4:	00045540 	call	10004554 <__muldf3>
1000bfa8:	1009883a 	mov	r4,r2
1000bfac:	180b883a 	mov	r5,r3
1000bfb0:	e13fe515 	stw	r4,-108(fp)
1000bfb4:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
1000bfb8:	e0bfd617 	ldw	r2,-168(fp)
1000bfbc:	1005d07a 	srai	r2,r2,1
1000bfc0:	e0bfd615 	stw	r2,-168(fp)
1000bfc4:	e0bfd217 	ldw	r2,-184(fp)
1000bfc8:	10800044 	addi	r2,r2,1
1000bfcc:	e0bfd215 	stw	r2,-184(fp)
1000bfd0:	e0bfd617 	ldw	r2,-168(fp)
1000bfd4:	103fe21e 	bne	r2,zero,1000bf60 <__alt_data_end+0xf800bf60>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
1000bfd8:	e0bff217 	ldw	r2,-56(fp)
1000bfdc:	e0fff317 	ldw	r3,-52(fp)
1000bfe0:	e1bfe517 	ldw	r6,-108(fp)
1000bfe4:	e1ffe617 	ldw	r7,-104(fp)
1000bfe8:	1009883a 	mov	r4,r2
1000bfec:	180b883a 	mov	r5,r3
1000bff0:	00148140 	call	10014814 <__divdf3>
1000bff4:	1009883a 	mov	r4,r2
1000bff8:	180b883a 	mov	r5,r3
1000bffc:	2005883a 	mov	r2,r4
1000c000:	2807883a 	mov	r3,r5
1000c004:	e0bff215 	stw	r2,-56(fp)
1000c008:	e0fff315 	stw	r3,-52(fp)
1000c00c:	00004006 	br	1000c110 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
1000c010:	e0bfd717 	ldw	r2,-164(fp)
1000c014:	0085c83a 	sub	r2,zero,r2
1000c018:	e0bfec15 	stw	r2,-80(fp)
1000c01c:	e0bfec17 	ldw	r2,-80(fp)
1000c020:	10003b26 	beq	r2,zero,1000c110 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
1000c024:	e0bff217 	ldw	r2,-56(fp)
1000c028:	e0fff317 	ldw	r3,-52(fp)
1000c02c:	e13fec17 	ldw	r4,-80(fp)
1000c030:	214003cc 	andi	r5,r4,15
1000c034:	01040374 	movhi	r4,4109
1000c038:	213dd304 	addi	r4,r4,-2228
1000c03c:	280a90fa 	slli	r5,r5,3
1000c040:	214d883a 	add	r6,r4,r5
1000c044:	31000017 	ldw	r4,0(r6)
1000c048:	31400117 	ldw	r5,4(r6)
1000c04c:	200d883a 	mov	r6,r4
1000c050:	280f883a 	mov	r7,r5
1000c054:	1009883a 	mov	r4,r2
1000c058:	180b883a 	mov	r5,r3
1000c05c:	00045540 	call	10004554 <__muldf3>
1000c060:	1009883a 	mov	r4,r2
1000c064:	180b883a 	mov	r5,r3
1000c068:	2005883a 	mov	r2,r4
1000c06c:	2807883a 	mov	r3,r5
1000c070:	e0bff215 	stw	r2,-56(fp)
1000c074:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
1000c078:	e0bfec17 	ldw	r2,-80(fp)
1000c07c:	1005d13a 	srai	r2,r2,4
1000c080:	e0bfd615 	stw	r2,-168(fp)
1000c084:	00002006 	br	1000c108 <_dtoa_r+0x934>
	    if (j & 1)
1000c088:	e0bfd617 	ldw	r2,-168(fp)
1000c08c:	1080004c 	andi	r2,r2,1
1000c090:	10001726 	beq	r2,zero,1000c0f0 <_dtoa_r+0x91c>
	      {
		ieps++;
1000c094:	e0bfd317 	ldw	r2,-180(fp)
1000c098:	10800044 	addi	r2,r2,1
1000c09c:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
1000c0a0:	e0bff217 	ldw	r2,-56(fp)
1000c0a4:	e0fff317 	ldw	r3,-52(fp)
1000c0a8:	01040374 	movhi	r4,4109
1000c0ac:	213e0504 	addi	r4,r4,-2028
1000c0b0:	e17fd217 	ldw	r5,-184(fp)
1000c0b4:	280a90fa 	slli	r5,r5,3
1000c0b8:	214d883a 	add	r6,r4,r5
1000c0bc:	31000017 	ldw	r4,0(r6)
1000c0c0:	31400117 	ldw	r5,4(r6)
1000c0c4:	200d883a 	mov	r6,r4
1000c0c8:	280f883a 	mov	r7,r5
1000c0cc:	1009883a 	mov	r4,r2
1000c0d0:	180b883a 	mov	r5,r3
1000c0d4:	00045540 	call	10004554 <__muldf3>
1000c0d8:	1009883a 	mov	r4,r2
1000c0dc:	180b883a 	mov	r5,r3
1000c0e0:	2005883a 	mov	r2,r4
1000c0e4:	2807883a 	mov	r3,r5
1000c0e8:	e0bff215 	stw	r2,-56(fp)
1000c0ec:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
1000c0f0:	e0bfd617 	ldw	r2,-168(fp)
1000c0f4:	1005d07a 	srai	r2,r2,1
1000c0f8:	e0bfd615 	stw	r2,-168(fp)
1000c0fc:	e0bfd217 	ldw	r2,-184(fp)
1000c100:	10800044 	addi	r2,r2,1
1000c104:	e0bfd215 	stw	r2,-184(fp)
1000c108:	e0bfd617 	ldw	r2,-168(fp)
1000c10c:	103fde1e 	bne	r2,zero,1000c088 <__alt_data_end+0xf800c088>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
1000c110:	e0bfd817 	ldw	r2,-160(fp)
1000c114:	10002126 	beq	r2,zero,1000c19c <_dtoa_r+0x9c8>
1000c118:	e0bff217 	ldw	r2,-56(fp)
1000c11c:	e0fff317 	ldw	r3,-52(fp)
1000c120:	000d883a 	mov	r6,zero
1000c124:	01cffc34 	movhi	r7,16368
1000c128:	1009883a 	mov	r4,r2
1000c12c:	180b883a 	mov	r5,r3
1000c130:	00044600 	call	10004460 <__ledf2>
1000c134:	1000190e 	bge	r2,zero,1000c19c <_dtoa_r+0x9c8>
1000c138:	e0bfd417 	ldw	r2,-176(fp)
1000c13c:	0080170e 	bge	zero,r2,1000c19c <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
1000c140:	e0bfd517 	ldw	r2,-172(fp)
1000c144:	0081550e 	bge	zero,r2,1000c69c <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
1000c148:	e0bfd517 	ldw	r2,-172(fp)
1000c14c:	e0bfd415 	stw	r2,-176(fp)
	  k--;
1000c150:	e0bfd717 	ldw	r2,-164(fp)
1000c154:	10bfffc4 	addi	r2,r2,-1
1000c158:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
1000c15c:	e0bff217 	ldw	r2,-56(fp)
1000c160:	e0fff317 	ldw	r3,-52(fp)
1000c164:	000d883a 	mov	r6,zero
1000c168:	01d00934 	movhi	r7,16420
1000c16c:	1009883a 	mov	r4,r2
1000c170:	180b883a 	mov	r5,r3
1000c174:	00045540 	call	10004554 <__muldf3>
1000c178:	1009883a 	mov	r4,r2
1000c17c:	180b883a 	mov	r5,r3
1000c180:	2005883a 	mov	r2,r4
1000c184:	2807883a 	mov	r3,r5
1000c188:	e0bff215 	stw	r2,-56(fp)
1000c18c:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
1000c190:	e0bfd317 	ldw	r2,-180(fp)
1000c194:	10800044 	addi	r2,r2,1
1000c198:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
1000c19c:	e13fd317 	ldw	r4,-180(fp)
1000c1a0:	00153c80 	call	100153c8 <__floatsidf>
1000c1a4:	1011883a 	mov	r8,r2
1000c1a8:	1813883a 	mov	r9,r3
1000c1ac:	e0bff217 	ldw	r2,-56(fp)
1000c1b0:	e0fff317 	ldw	r3,-52(fp)
1000c1b4:	100d883a 	mov	r6,r2
1000c1b8:	180f883a 	mov	r7,r3
1000c1bc:	4009883a 	mov	r4,r8
1000c1c0:	480b883a 	mov	r5,r9
1000c1c4:	00045540 	call	10004554 <__muldf3>
1000c1c8:	1009883a 	mov	r4,r2
1000c1cc:	180b883a 	mov	r5,r3
1000c1d0:	2005883a 	mov	r2,r4
1000c1d4:	2807883a 	mov	r3,r5
1000c1d8:	000d883a 	mov	r6,zero
1000c1dc:	01d00734 	movhi	r7,16412
1000c1e0:	1009883a 	mov	r4,r2
1000c1e4:	180b883a 	mov	r5,r3
1000c1e8:	0003bb40 	call	10003bb4 <__adddf3>
1000c1ec:	1009883a 	mov	r4,r2
1000c1f0:	180b883a 	mov	r5,r3
1000c1f4:	2005883a 	mov	r2,r4
1000c1f8:	2807883a 	mov	r3,r5
1000c1fc:	e0bff615 	stw	r2,-40(fp)
1000c200:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
1000c204:	e0fff717 	ldw	r3,-36(fp)
1000c208:	00bf3034 	movhi	r2,64704
1000c20c:	1885883a 	add	r2,r3,r2
1000c210:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
1000c214:	e0bfd417 	ldw	r2,-176(fp)
1000c218:	1000271e 	bne	r2,zero,1000c2b8 <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
1000c21c:	e03fe315 	stw	zero,-116(fp)
1000c220:	e0bfe317 	ldw	r2,-116(fp)
1000c224:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
1000c228:	e0bff217 	ldw	r2,-56(fp)
1000c22c:	e0fff317 	ldw	r3,-52(fp)
1000c230:	000d883a 	mov	r6,zero
1000c234:	01d00534 	movhi	r7,16404
1000c238:	1009883a 	mov	r4,r2
1000c23c:	180b883a 	mov	r5,r3
1000c240:	0004dbc0 	call	10004dbc <__subdf3>
1000c244:	1009883a 	mov	r4,r2
1000c248:	180b883a 	mov	r5,r3
1000c24c:	2005883a 	mov	r2,r4
1000c250:	2807883a 	mov	r3,r5
1000c254:	e0bff215 	stw	r2,-56(fp)
1000c258:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
1000c25c:	e0bff217 	ldw	r2,-56(fp)
1000c260:	e0fff317 	ldw	r3,-52(fp)
1000c264:	e13ff617 	ldw	r4,-40(fp)
1000c268:	e17ff717 	ldw	r5,-36(fp)
1000c26c:	200d883a 	mov	r6,r4
1000c270:	280f883a 	mov	r7,r5
1000c274:	1009883a 	mov	r4,r2
1000c278:	180b883a 	mov	r5,r3
1000c27c:	001526c0 	call	1001526c <__gedf2>
1000c280:	0082eb16 	blt	zero,r2,1000ce30 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
1000c284:	e23ff217 	ldw	r8,-56(fp)
1000c288:	e27ff317 	ldw	r9,-52(fp)
1000c28c:	e0bff617 	ldw	r2,-40(fp)
1000c290:	e0fff717 	ldw	r3,-36(fp)
1000c294:	1021883a 	mov	r16,r2
1000c298:	1c60003c 	xorhi	r17,r3,32768
1000c29c:	800d883a 	mov	r6,r16
1000c2a0:	880f883a 	mov	r7,r17
1000c2a4:	4009883a 	mov	r4,r8
1000c2a8:	480b883a 	mov	r5,r9
1000c2ac:	00044600 	call	10004460 <__ledf2>
1000c2b0:	1002da16 	blt	r2,zero,1000ce1c <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
1000c2b4:	0000fc06 	br	1000c6a8 <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
1000c2b8:	e0bfd917 	ldw	r2,-156(fp)
1000c2bc:	10007a26 	beq	r2,zero,1000c4a8 <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
1000c2c0:	e0bfd417 	ldw	r2,-176(fp)
1000c2c4:	10ffffc4 	addi	r3,r2,-1
1000c2c8:	00840374 	movhi	r2,4109
1000c2cc:	10bdd304 	addi	r2,r2,-2228
1000c2d0:	180690fa 	slli	r3,r3,3
1000c2d4:	10c9883a 	add	r4,r2,r3
1000c2d8:	20800017 	ldw	r2,0(r4)
1000c2dc:	20c00117 	ldw	r3,4(r4)
1000c2e0:	100d883a 	mov	r6,r2
1000c2e4:	180f883a 	mov	r7,r3
1000c2e8:	0009883a 	mov	r4,zero
1000c2ec:	014ff834 	movhi	r5,16352
1000c2f0:	00148140 	call	10014814 <__divdf3>
1000c2f4:	1009883a 	mov	r4,r2
1000c2f8:	180b883a 	mov	r5,r3
1000c2fc:	2011883a 	mov	r8,r4
1000c300:	2813883a 	mov	r9,r5
1000c304:	e0bff617 	ldw	r2,-40(fp)
1000c308:	e0fff717 	ldw	r3,-36(fp)
1000c30c:	100d883a 	mov	r6,r2
1000c310:	180f883a 	mov	r7,r3
1000c314:	4009883a 	mov	r4,r8
1000c318:	480b883a 	mov	r5,r9
1000c31c:	0004dbc0 	call	10004dbc <__subdf3>
1000c320:	1009883a 	mov	r4,r2
1000c324:	180b883a 	mov	r5,r3
1000c328:	2005883a 	mov	r2,r4
1000c32c:	2807883a 	mov	r3,r5
1000c330:	e0bff615 	stw	r2,-40(fp)
1000c334:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
1000c338:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
1000c33c:	e0bff217 	ldw	r2,-56(fp)
1000c340:	e0fff317 	ldw	r3,-52(fp)
1000c344:	1009883a 	mov	r4,r2
1000c348:	180b883a 	mov	r5,r3
1000c34c:	00153480 	call	10015348 <__fixdfsi>
1000c350:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
1000c354:	e43ff217 	ldw	r16,-56(fp)
1000c358:	e47ff317 	ldw	r17,-52(fp)
1000c35c:	e13fed17 	ldw	r4,-76(fp)
1000c360:	00153c80 	call	100153c8 <__floatsidf>
1000c364:	1009883a 	mov	r4,r2
1000c368:	180b883a 	mov	r5,r3
1000c36c:	200d883a 	mov	r6,r4
1000c370:	280f883a 	mov	r7,r5
1000c374:	8009883a 	mov	r4,r16
1000c378:	880b883a 	mov	r5,r17
1000c37c:	0004dbc0 	call	10004dbc <__subdf3>
1000c380:	1009883a 	mov	r4,r2
1000c384:	180b883a 	mov	r5,r3
1000c388:	2005883a 	mov	r2,r4
1000c38c:	2807883a 	mov	r3,r5
1000c390:	e0bff215 	stw	r2,-56(fp)
1000c394:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
1000c398:	e0bfe717 	ldw	r2,-100(fp)
1000c39c:	10c00044 	addi	r3,r2,1
1000c3a0:	e0ffe715 	stw	r3,-100(fp)
1000c3a4:	e0ffed17 	ldw	r3,-76(fp)
1000c3a8:	18c00c04 	addi	r3,r3,48
1000c3ac:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
1000c3b0:	e0bff217 	ldw	r2,-56(fp)
1000c3b4:	e0fff317 	ldw	r3,-52(fp)
1000c3b8:	e13ff617 	ldw	r4,-40(fp)
1000c3bc:	e17ff717 	ldw	r5,-36(fp)
1000c3c0:	200d883a 	mov	r6,r4
1000c3c4:	280f883a 	mov	r7,r5
1000c3c8:	1009883a 	mov	r4,r2
1000c3cc:	180b883a 	mov	r5,r3
1000c3d0:	00044600 	call	10004460 <__ledf2>
1000c3d4:	1003c416 	blt	r2,zero,1000d2e8 <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
1000c3d8:	e0bff217 	ldw	r2,-56(fp)
1000c3dc:	e0fff317 	ldw	r3,-52(fp)
1000c3e0:	100d883a 	mov	r6,r2
1000c3e4:	180f883a 	mov	r7,r3
1000c3e8:	0009883a 	mov	r4,zero
1000c3ec:	014ffc34 	movhi	r5,16368
1000c3f0:	0004dbc0 	call	10004dbc <__subdf3>
1000c3f4:	1009883a 	mov	r4,r2
1000c3f8:	180b883a 	mov	r5,r3
1000c3fc:	2011883a 	mov	r8,r4
1000c400:	2813883a 	mov	r9,r5
1000c404:	e0bff617 	ldw	r2,-40(fp)
1000c408:	e0fff717 	ldw	r3,-36(fp)
1000c40c:	100d883a 	mov	r6,r2
1000c410:	180f883a 	mov	r7,r3
1000c414:	4009883a 	mov	r4,r8
1000c418:	480b883a 	mov	r5,r9
1000c41c:	00044600 	call	10004460 <__ledf2>
1000c420:	10012916 	blt	r2,zero,1000c8c8 <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
1000c424:	e0bfd217 	ldw	r2,-184(fp)
1000c428:	10800044 	addi	r2,r2,1
1000c42c:	e0bfd215 	stw	r2,-184(fp)
1000c430:	e0ffd217 	ldw	r3,-184(fp)
1000c434:	e0bfd417 	ldw	r2,-176(fp)
1000c438:	18809a0e 	bge	r3,r2,1000c6a4 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
1000c43c:	e0bff617 	ldw	r2,-40(fp)
1000c440:	e0fff717 	ldw	r3,-36(fp)
1000c444:	000d883a 	mov	r6,zero
1000c448:	01d00934 	movhi	r7,16420
1000c44c:	1009883a 	mov	r4,r2
1000c450:	180b883a 	mov	r5,r3
1000c454:	00045540 	call	10004554 <__muldf3>
1000c458:	1009883a 	mov	r4,r2
1000c45c:	180b883a 	mov	r5,r3
1000c460:	2005883a 	mov	r2,r4
1000c464:	2807883a 	mov	r3,r5
1000c468:	e0bff615 	stw	r2,-40(fp)
1000c46c:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
1000c470:	e0bff217 	ldw	r2,-56(fp)
1000c474:	e0fff317 	ldw	r3,-52(fp)
1000c478:	000d883a 	mov	r6,zero
1000c47c:	01d00934 	movhi	r7,16420
1000c480:	1009883a 	mov	r4,r2
1000c484:	180b883a 	mov	r5,r3
1000c488:	00045540 	call	10004554 <__muldf3>
1000c48c:	1009883a 	mov	r4,r2
1000c490:	180b883a 	mov	r5,r3
1000c494:	2005883a 	mov	r2,r4
1000c498:	2807883a 	mov	r3,r5
1000c49c:	e0bff215 	stw	r2,-56(fp)
1000c4a0:	e0fff315 	stw	r3,-52(fp)
	    }
1000c4a4:	003fa506 	br	1000c33c <__alt_data_end+0xf800c33c>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
1000c4a8:	e0bff617 	ldw	r2,-40(fp)
1000c4ac:	e0fff717 	ldw	r3,-36(fp)
1000c4b0:	e13fd417 	ldw	r4,-176(fp)
1000c4b4:	217fffc4 	addi	r5,r4,-1
1000c4b8:	01040374 	movhi	r4,4109
1000c4bc:	213dd304 	addi	r4,r4,-2228
1000c4c0:	280a90fa 	slli	r5,r5,3
1000c4c4:	214d883a 	add	r6,r4,r5
1000c4c8:	31000017 	ldw	r4,0(r6)
1000c4cc:	31400117 	ldw	r5,4(r6)
1000c4d0:	200d883a 	mov	r6,r4
1000c4d4:	280f883a 	mov	r7,r5
1000c4d8:	1009883a 	mov	r4,r2
1000c4dc:	180b883a 	mov	r5,r3
1000c4e0:	00045540 	call	10004554 <__muldf3>
1000c4e4:	1009883a 	mov	r4,r2
1000c4e8:	180b883a 	mov	r5,r3
1000c4ec:	2005883a 	mov	r2,r4
1000c4f0:	2807883a 	mov	r3,r5
1000c4f4:	e0bff615 	stw	r2,-40(fp)
1000c4f8:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
1000c4fc:	00800044 	movi	r2,1
1000c500:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
1000c504:	e0bff217 	ldw	r2,-56(fp)
1000c508:	e0fff317 	ldw	r3,-52(fp)
1000c50c:	1009883a 	mov	r4,r2
1000c510:	180b883a 	mov	r5,r3
1000c514:	00153480 	call	10015348 <__fixdfsi>
1000c518:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
1000c51c:	e43ff217 	ldw	r16,-56(fp)
1000c520:	e47ff317 	ldw	r17,-52(fp)
1000c524:	e13fed17 	ldw	r4,-76(fp)
1000c528:	00153c80 	call	100153c8 <__floatsidf>
1000c52c:	1009883a 	mov	r4,r2
1000c530:	180b883a 	mov	r5,r3
1000c534:	200d883a 	mov	r6,r4
1000c538:	280f883a 	mov	r7,r5
1000c53c:	8009883a 	mov	r4,r16
1000c540:	880b883a 	mov	r5,r17
1000c544:	0004dbc0 	call	10004dbc <__subdf3>
1000c548:	1009883a 	mov	r4,r2
1000c54c:	180b883a 	mov	r5,r3
1000c550:	2005883a 	mov	r2,r4
1000c554:	2807883a 	mov	r3,r5
1000c558:	e0bff215 	stw	r2,-56(fp)
1000c55c:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
1000c560:	e0bfe717 	ldw	r2,-100(fp)
1000c564:	10c00044 	addi	r3,r2,1
1000c568:	e0ffe715 	stw	r3,-100(fp)
1000c56c:	e0ffed17 	ldw	r3,-76(fp)
1000c570:	18c00c04 	addi	r3,r3,48
1000c574:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
1000c578:	e0ffd217 	ldw	r3,-184(fp)
1000c57c:	e0bfd417 	ldw	r2,-176(fp)
1000c580:	1880351e 	bne	r3,r2,1000c658 <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
1000c584:	e43ff217 	ldw	r16,-56(fp)
1000c588:	e47ff317 	ldw	r17,-52(fp)
1000c58c:	e0bff617 	ldw	r2,-40(fp)
1000c590:	e0fff717 	ldw	r3,-36(fp)
1000c594:	000d883a 	mov	r6,zero
1000c598:	01cff834 	movhi	r7,16352
1000c59c:	1009883a 	mov	r4,r2
1000c5a0:	180b883a 	mov	r5,r3
1000c5a4:	0003bb40 	call	10003bb4 <__adddf3>
1000c5a8:	1009883a 	mov	r4,r2
1000c5ac:	180b883a 	mov	r5,r3
1000c5b0:	2005883a 	mov	r2,r4
1000c5b4:	2807883a 	mov	r3,r5
1000c5b8:	100d883a 	mov	r6,r2
1000c5bc:	180f883a 	mov	r7,r3
1000c5c0:	8009883a 	mov	r4,r16
1000c5c4:	880b883a 	mov	r5,r17
1000c5c8:	001526c0 	call	1001526c <__gedf2>
1000c5cc:	0080c016 	blt	zero,r2,1000c8d0 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
1000c5d0:	e43ff217 	ldw	r16,-56(fp)
1000c5d4:	e47ff317 	ldw	r17,-52(fp)
1000c5d8:	e0bff617 	ldw	r2,-40(fp)
1000c5dc:	e0fff717 	ldw	r3,-36(fp)
1000c5e0:	100d883a 	mov	r6,r2
1000c5e4:	180f883a 	mov	r7,r3
1000c5e8:	0009883a 	mov	r4,zero
1000c5ec:	014ff834 	movhi	r5,16352
1000c5f0:	0004dbc0 	call	10004dbc <__subdf3>
1000c5f4:	1009883a 	mov	r4,r2
1000c5f8:	180b883a 	mov	r5,r3
1000c5fc:	2005883a 	mov	r2,r4
1000c600:	2807883a 	mov	r3,r5
1000c604:	100d883a 	mov	r6,r2
1000c608:	180f883a 	mov	r7,r3
1000c60c:	8009883a 	mov	r4,r16
1000c610:	880b883a 	mov	r5,r17
1000c614:	00044600 	call	10004460 <__ledf2>
1000c618:	10000116 	blt	r2,zero,1000c620 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
1000c61c:	00002206 	br	1000c6a8 <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
1000c620:	e0bfe717 	ldw	r2,-100(fp)
1000c624:	10bfffc4 	addi	r2,r2,-1
1000c628:	e0bfe715 	stw	r2,-100(fp)
1000c62c:	e0bfe717 	ldw	r2,-100(fp)
1000c630:	10800003 	ldbu	r2,0(r2)
1000c634:	10803fcc 	andi	r2,r2,255
1000c638:	1080201c 	xori	r2,r2,128
1000c63c:	10bfe004 	addi	r2,r2,-128
1000c640:	10800c20 	cmpeqi	r2,r2,48
1000c644:	103ff61e 	bne	r2,zero,1000c620 <__alt_data_end+0xf800c620>
		      s++;
1000c648:	e0bfe717 	ldw	r2,-100(fp)
1000c64c:	10800044 	addi	r2,r2,1
1000c650:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
1000c654:	00032506 	br	1000d2ec <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
1000c658:	e0bfd217 	ldw	r2,-184(fp)
1000c65c:	10800044 	addi	r2,r2,1
1000c660:	e0bfd215 	stw	r2,-184(fp)
1000c664:	e0bff217 	ldw	r2,-56(fp)
1000c668:	e0fff317 	ldw	r3,-52(fp)
1000c66c:	000d883a 	mov	r6,zero
1000c670:	01d00934 	movhi	r7,16420
1000c674:	1009883a 	mov	r4,r2
1000c678:	180b883a 	mov	r5,r3
1000c67c:	00045540 	call	10004554 <__muldf3>
1000c680:	1009883a 	mov	r4,r2
1000c684:	180b883a 	mov	r5,r3
1000c688:	2005883a 	mov	r2,r4
1000c68c:	2807883a 	mov	r3,r5
1000c690:	e0bff215 	stw	r2,-56(fp)
1000c694:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
1000c698:	003f9a06 	br	1000c504 <__alt_data_end+0xf800c504>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
1000c69c:	0001883a 	nop
1000c6a0:	00000106 	br	1000c6a8 <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
1000c6a4:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
1000c6a8:	e0bfe917 	ldw	r2,-92(fp)
1000c6ac:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
1000c6b0:	e0bff417 	ldw	r2,-48(fp)
1000c6b4:	e0fff517 	ldw	r3,-44(fp)
1000c6b8:	e0bff215 	stw	r2,-56(fp)
1000c6bc:	e0fff315 	stw	r3,-52(fp)
      k = k0;
1000c6c0:	e0bfea17 	ldw	r2,-88(fp)
1000c6c4:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
1000c6c8:	e0bfeb17 	ldw	r2,-84(fp)
1000c6cc:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
1000c6d0:	e0bff117 	ldw	r2,-60(fp)
1000c6d4:	1000b816 	blt	r2,zero,1000c9b8 <_dtoa_r+0x11e4>
1000c6d8:	e0bfd717 	ldw	r2,-164(fp)
1000c6dc:	108003c8 	cmpgei	r2,r2,15
1000c6e0:	1000b51e 	bne	r2,zero,1000c9b8 <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
1000c6e4:	00840374 	movhi	r2,4109
1000c6e8:	10bdd304 	addi	r2,r2,-2228
1000c6ec:	e0ffd717 	ldw	r3,-164(fp)
1000c6f0:	180690fa 	slli	r3,r3,3
1000c6f4:	10c5883a 	add	r2,r2,r3
1000c6f8:	10c00017 	ldw	r3,0(r2)
1000c6fc:	e0ffe515 	stw	r3,-108(fp)
1000c700:	10800117 	ldw	r2,4(r2)
1000c704:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
1000c708:	e0800217 	ldw	r2,8(fp)
1000c70c:	1000190e 	bge	r2,zero,1000c774 <_dtoa_r+0xfa0>
1000c710:	e0bfd417 	ldw	r2,-176(fp)
1000c714:	00801716 	blt	zero,r2,1000c774 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
1000c718:	e03fe315 	stw	zero,-116(fp)
1000c71c:	e0bfe317 	ldw	r2,-116(fp)
1000c720:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
1000c724:	e0bfd417 	ldw	r2,-176(fp)
1000c728:	1001bd16 	blt	r2,zero,1000ce20 <_dtoa_r+0x164c>
1000c72c:	e43ff217 	ldw	r16,-56(fp)
1000c730:	e47ff317 	ldw	r17,-52(fp)
1000c734:	000d883a 	mov	r6,zero
1000c738:	01d00534 	movhi	r7,16404
1000c73c:	e13fe517 	ldw	r4,-108(fp)
1000c740:	e17fe617 	ldw	r5,-104(fp)
1000c744:	00045540 	call	10004554 <__muldf3>
1000c748:	1009883a 	mov	r4,r2
1000c74c:	180b883a 	mov	r5,r3
1000c750:	2005883a 	mov	r2,r4
1000c754:	2807883a 	mov	r3,r5
1000c758:	100d883a 	mov	r6,r2
1000c75c:	180f883a 	mov	r7,r3
1000c760:	8009883a 	mov	r4,r16
1000c764:	880b883a 	mov	r5,r17
1000c768:	00044600 	call	10004460 <__ledf2>
1000c76c:	0081ac0e 	bge	zero,r2,1000ce20 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
1000c770:	0001b006 	br	1000ce34 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
1000c774:	00800044 	movi	r2,1
1000c778:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
1000c77c:	e0bff217 	ldw	r2,-56(fp)
1000c780:	e0fff317 	ldw	r3,-52(fp)
1000c784:	e1bfe517 	ldw	r6,-108(fp)
1000c788:	e1ffe617 	ldw	r7,-104(fp)
1000c78c:	1009883a 	mov	r4,r2
1000c790:	180b883a 	mov	r5,r3
1000c794:	00148140 	call	10014814 <__divdf3>
1000c798:	1009883a 	mov	r4,r2
1000c79c:	180b883a 	mov	r5,r3
1000c7a0:	2005883a 	mov	r2,r4
1000c7a4:	2807883a 	mov	r3,r5
1000c7a8:	1009883a 	mov	r4,r2
1000c7ac:	180b883a 	mov	r5,r3
1000c7b0:	00153480 	call	10015348 <__fixdfsi>
1000c7b4:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
1000c7b8:	e43ff217 	ldw	r16,-56(fp)
1000c7bc:	e47ff317 	ldw	r17,-52(fp)
1000c7c0:	e13fed17 	ldw	r4,-76(fp)
1000c7c4:	00153c80 	call	100153c8 <__floatsidf>
1000c7c8:	1011883a 	mov	r8,r2
1000c7cc:	1813883a 	mov	r9,r3
1000c7d0:	e1bfe517 	ldw	r6,-108(fp)
1000c7d4:	e1ffe617 	ldw	r7,-104(fp)
1000c7d8:	4009883a 	mov	r4,r8
1000c7dc:	480b883a 	mov	r5,r9
1000c7e0:	00045540 	call	10004554 <__muldf3>
1000c7e4:	1009883a 	mov	r4,r2
1000c7e8:	180b883a 	mov	r5,r3
1000c7ec:	2005883a 	mov	r2,r4
1000c7f0:	2807883a 	mov	r3,r5
1000c7f4:	100d883a 	mov	r6,r2
1000c7f8:	180f883a 	mov	r7,r3
1000c7fc:	8009883a 	mov	r4,r16
1000c800:	880b883a 	mov	r5,r17
1000c804:	0004dbc0 	call	10004dbc <__subdf3>
1000c808:	1009883a 	mov	r4,r2
1000c80c:	180b883a 	mov	r5,r3
1000c810:	2005883a 	mov	r2,r4
1000c814:	2807883a 	mov	r3,r5
1000c818:	e0bff215 	stw	r2,-56(fp)
1000c81c:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
1000c820:	e0bfe717 	ldw	r2,-100(fp)
1000c824:	10c00044 	addi	r3,r2,1
1000c828:	e0ffe715 	stw	r3,-100(fp)
1000c82c:	e0ffed17 	ldw	r3,-76(fp)
1000c830:	18c00c04 	addi	r3,r3,48
1000c834:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
1000c838:	e0ffd217 	ldw	r3,-184(fp)
1000c83c:	e0bfd417 	ldw	r2,-176(fp)
1000c840:	1880401e 	bne	r3,r2,1000c944 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
1000c844:	e0bff217 	ldw	r2,-56(fp)
1000c848:	e0fff317 	ldw	r3,-52(fp)
1000c84c:	100d883a 	mov	r6,r2
1000c850:	180f883a 	mov	r7,r3
1000c854:	1009883a 	mov	r4,r2
1000c858:	180b883a 	mov	r5,r3
1000c85c:	0003bb40 	call	10003bb4 <__adddf3>
1000c860:	1009883a 	mov	r4,r2
1000c864:	180b883a 	mov	r5,r3
1000c868:	2005883a 	mov	r2,r4
1000c86c:	2807883a 	mov	r3,r5
1000c870:	e0bff215 	stw	r2,-56(fp)
1000c874:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
1000c878:	e0bff217 	ldw	r2,-56(fp)
1000c87c:	e0fff317 	ldw	r3,-52(fp)
1000c880:	e1bfe517 	ldw	r6,-108(fp)
1000c884:	e1ffe617 	ldw	r7,-104(fp)
1000c888:	1009883a 	mov	r4,r2
1000c88c:	180b883a 	mov	r5,r3
1000c890:	001526c0 	call	1001526c <__gedf2>
1000c894:	00801a16 	blt	zero,r2,1000c900 <_dtoa_r+0x112c>
1000c898:	e0bff217 	ldw	r2,-56(fp)
1000c89c:	e0fff317 	ldw	r3,-52(fp)
1000c8a0:	e1bfe517 	ldw	r6,-108(fp)
1000c8a4:	e1ffe617 	ldw	r7,-104(fp)
1000c8a8:	1009883a 	mov	r4,r2
1000c8ac:	180b883a 	mov	r5,r3
1000c8b0:	00151e40 	call	100151e4 <__eqdf2>
1000c8b4:	10003c1e 	bne	r2,zero,1000c9a8 <_dtoa_r+0x11d4>
1000c8b8:	e0bfed17 	ldw	r2,-76(fp)
1000c8bc:	1080004c 	andi	r2,r2,1
1000c8c0:	10003926 	beq	r2,zero,1000c9a8 <_dtoa_r+0x11d4>
1000c8c4:	00000e06 	br	1000c900 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
1000c8c8:	0001883a 	nop
1000c8cc:	00000c06 	br	1000c900 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
1000c8d0:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
1000c8d4:	00000a06 	br	1000c900 <_dtoa_r+0x112c>
		    if (s == s0)
1000c8d8:	e0ffe717 	ldw	r3,-100(fp)
1000c8dc:	e0bfe917 	ldw	r2,-92(fp)
1000c8e0:	1880071e 	bne	r3,r2,1000c900 <_dtoa_r+0x112c>
		      {
			k++;
1000c8e4:	e0bfd717 	ldw	r2,-164(fp)
1000c8e8:	10800044 	addi	r2,r2,1
1000c8ec:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
1000c8f0:	e0bfe717 	ldw	r2,-100(fp)
1000c8f4:	00c00c04 	movi	r3,48
1000c8f8:	10c00005 	stb	r3,0(r2)
			break;
1000c8fc:	00000a06 	br	1000c928 <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
1000c900:	e0bfe717 	ldw	r2,-100(fp)
1000c904:	10bfffc4 	addi	r2,r2,-1
1000c908:	e0bfe715 	stw	r2,-100(fp)
1000c90c:	e0bfe717 	ldw	r2,-100(fp)
1000c910:	10800003 	ldbu	r2,0(r2)
1000c914:	10803fcc 	andi	r2,r2,255
1000c918:	1080201c 	xori	r2,r2,128
1000c91c:	10bfe004 	addi	r2,r2,-128
1000c920:	10800e60 	cmpeqi	r2,r2,57
1000c924:	103fec1e 	bne	r2,zero,1000c8d8 <__alt_data_end+0xf800c8d8>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
1000c928:	e0bfe717 	ldw	r2,-100(fp)
1000c92c:	10c00044 	addi	r3,r2,1
1000c930:	e0ffe715 	stw	r3,-100(fp)
1000c934:	10c00003 	ldbu	r3,0(r2)
1000c938:	18c00044 	addi	r3,r3,1
1000c93c:	10c00005 	stb	r3,0(r2)
		}
	      break;
1000c940:	00001906 	br	1000c9a8 <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
1000c944:	e0bff217 	ldw	r2,-56(fp)
1000c948:	e0fff317 	ldw	r3,-52(fp)
1000c94c:	000d883a 	mov	r6,zero
1000c950:	01d00934 	movhi	r7,16420
1000c954:	1009883a 	mov	r4,r2
1000c958:	180b883a 	mov	r5,r3
1000c95c:	00045540 	call	10004554 <__muldf3>
1000c960:	1009883a 	mov	r4,r2
1000c964:	180b883a 	mov	r5,r3
1000c968:	2005883a 	mov	r2,r4
1000c96c:	2807883a 	mov	r3,r5
1000c970:	e0bff215 	stw	r2,-56(fp)
1000c974:	e0fff315 	stw	r3,-52(fp)
1000c978:	e0bff217 	ldw	r2,-56(fp)
1000c97c:	e0fff317 	ldw	r3,-52(fp)
1000c980:	000d883a 	mov	r6,zero
1000c984:	000f883a 	mov	r7,zero
1000c988:	1009883a 	mov	r4,r2
1000c98c:	180b883a 	mov	r5,r3
1000c990:	00151e40 	call	100151e4 <__eqdf2>
1000c994:	10000626 	beq	r2,zero,1000c9b0 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
1000c998:	e0bfd217 	ldw	r2,-184(fp)
1000c99c:	10800044 	addi	r2,r2,1
1000c9a0:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
1000c9a4:	003f7506 	br	1000c77c <__alt_data_end+0xf800c77c>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
1000c9a8:	0001883a 	nop
1000c9ac:	00024f06 	br	1000d2ec <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
1000c9b0:	0001883a 	nop
	}
      goto ret1;
1000c9b4:	00024d06 	br	1000d2ec <_dtoa_r+0x1b18>
    }

  m2 = b2;
1000c9b8:	e0bfcf17 	ldw	r2,-196(fp)
1000c9bc:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
1000c9c0:	e0bfd017 	ldw	r2,-192(fp)
1000c9c4:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
1000c9c8:	e03fe215 	stw	zero,-120(fp)
1000c9cc:	e0bfe217 	ldw	r2,-120(fp)
1000c9d0:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
1000c9d4:	e0bfd917 	ldw	r2,-156(fp)
1000c9d8:	10003a26 	beq	r2,zero,1000cac4 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
1000c9dc:	e0bffb17 	ldw	r2,-20(fp)
1000c9e0:	10800088 	cmpgei	r2,r2,2
1000c9e4:	10000a1e 	bne	r2,zero,1000ca10 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
1000c9e8:	e0bfe017 	ldw	r2,-128(fp)
1000c9ec:	10000326 	beq	r2,zero,1000c9fc <_dtoa_r+0x1228>
1000c9f0:	e0bff117 	ldw	r2,-60(fp)
1000c9f4:	10810cc4 	addi	r2,r2,1075
1000c9f8:	00000306 	br	1000ca08 <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
1000c9fc:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
1000ca00:	00c00d84 	movi	r3,54
1000ca04:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
1000ca08:	e0bfd215 	stw	r2,-184(fp)
1000ca0c:	00002106 	br	1000ca94 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
1000ca10:	e0bfd417 	ldw	r2,-176(fp)
1000ca14:	10bfffc4 	addi	r2,r2,-1
1000ca18:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
1000ca1c:	e0ffdb17 	ldw	r3,-148(fp)
1000ca20:	e0bfd617 	ldw	r2,-168(fp)
1000ca24:	18800516 	blt	r3,r2,1000ca3c <_dtoa_r+0x1268>
	    m5 -= j;
1000ca28:	e0ffdb17 	ldw	r3,-148(fp)
1000ca2c:	e0bfd617 	ldw	r2,-168(fp)
1000ca30:	1885c83a 	sub	r2,r3,r2
1000ca34:	e0bfdb15 	stw	r2,-148(fp)
1000ca38:	00000d06 	br	1000ca70 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
1000ca3c:	e0ffd617 	ldw	r3,-168(fp)
1000ca40:	e0bfdb17 	ldw	r2,-148(fp)
1000ca44:	1885c83a 	sub	r2,r3,r2
1000ca48:	e0bfd615 	stw	r2,-168(fp)
1000ca4c:	e0bfd617 	ldw	r2,-168(fp)
1000ca50:	e0ffdd17 	ldw	r3,-140(fp)
1000ca54:	1885883a 	add	r2,r3,r2
1000ca58:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
1000ca5c:	e0ffd017 	ldw	r3,-192(fp)
1000ca60:	e0bfd617 	ldw	r2,-168(fp)
1000ca64:	1885883a 	add	r2,r3,r2
1000ca68:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
1000ca6c:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
1000ca70:	e0bfd417 	ldw	r2,-176(fp)
1000ca74:	e0bfd215 	stw	r2,-184(fp)
1000ca78:	e0bfd217 	ldw	r2,-184(fp)
1000ca7c:	1000050e 	bge	r2,zero,1000ca94 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
1000ca80:	e0ffda17 	ldw	r3,-152(fp)
1000ca84:	e0bfd217 	ldw	r2,-184(fp)
1000ca88:	1885c83a 	sub	r2,r3,r2
1000ca8c:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
1000ca90:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
1000ca94:	e0ffcf17 	ldw	r3,-196(fp)
1000ca98:	e0bfd217 	ldw	r2,-184(fp)
1000ca9c:	1885883a 	add	r2,r3,r2
1000caa0:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
1000caa4:	e0ffdc17 	ldw	r3,-144(fp)
1000caa8:	e0bfd217 	ldw	r2,-184(fp)
1000caac:	1885883a 	add	r2,r3,r2
1000cab0:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
1000cab4:	01400044 	movi	r5,1
1000cab8:	e13ff817 	ldw	r4,-32(fp)
1000cabc:	000fc600 	call	1000fc60 <__i2b>
1000cac0:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
1000cac4:	e0bfda17 	ldw	r2,-152(fp)
1000cac8:	0080130e 	bge	zero,r2,1000cb18 <_dtoa_r+0x1344>
1000cacc:	e0bfdc17 	ldw	r2,-144(fp)
1000cad0:	0080110e 	bge	zero,r2,1000cb18 <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
1000cad4:	e0ffda17 	ldw	r3,-152(fp)
1000cad8:	e0bfdc17 	ldw	r2,-144(fp)
1000cadc:	1880010e 	bge	r3,r2,1000cae4 <_dtoa_r+0x1310>
1000cae0:	1805883a 	mov	r2,r3
1000cae4:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
1000cae8:	e0ffcf17 	ldw	r3,-196(fp)
1000caec:	e0bfd217 	ldw	r2,-184(fp)
1000caf0:	1885c83a 	sub	r2,r3,r2
1000caf4:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
1000caf8:	e0ffda17 	ldw	r3,-152(fp)
1000cafc:	e0bfd217 	ldw	r2,-184(fp)
1000cb00:	1885c83a 	sub	r2,r3,r2
1000cb04:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
1000cb08:	e0ffdc17 	ldw	r3,-144(fp)
1000cb0c:	e0bfd217 	ldw	r2,-184(fp)
1000cb10:	1885c83a 	sub	r2,r3,r2
1000cb14:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
1000cb18:	e0bfd017 	ldw	r2,-192(fp)
1000cb1c:	0080240e 	bge	zero,r2,1000cbb0 <_dtoa_r+0x13dc>
    {
      if (leftright)
1000cb20:	e0bfd917 	ldw	r2,-156(fp)
1000cb24:	10001d26 	beq	r2,zero,1000cb9c <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
1000cb28:	e0bfdb17 	ldw	r2,-148(fp)
1000cb2c:	00800f0e 	bge	zero,r2,1000cb6c <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
1000cb30:	e1bfdb17 	ldw	r6,-148(fp)
1000cb34:	e17fe317 	ldw	r5,-116(fp)
1000cb38:	e13ff817 	ldw	r4,-32(fp)
1000cb3c:	00100a80 	call	100100a8 <__pow5mult>
1000cb40:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
1000cb44:	e1bfe117 	ldw	r6,-124(fp)
1000cb48:	e17fe317 	ldw	r5,-116(fp)
1000cb4c:	e13ff817 	ldw	r4,-32(fp)
1000cb50:	000fcb80 	call	1000fcb8 <__multiply>
1000cb54:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
1000cb58:	e17fe117 	ldw	r5,-124(fp)
1000cb5c:	e13ff817 	ldw	r4,-32(fp)
1000cb60:	000f7300 	call	1000f730 <_Bfree>
	      b = b1;
1000cb64:	e0bfee17 	ldw	r2,-72(fp)
1000cb68:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
1000cb6c:	e0ffd017 	ldw	r3,-192(fp)
1000cb70:	e0bfdb17 	ldw	r2,-148(fp)
1000cb74:	1885c83a 	sub	r2,r3,r2
1000cb78:	e0bfd615 	stw	r2,-168(fp)
1000cb7c:	e0bfd617 	ldw	r2,-168(fp)
1000cb80:	10000b26 	beq	r2,zero,1000cbb0 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
1000cb84:	e1bfd617 	ldw	r6,-168(fp)
1000cb88:	e17fe117 	ldw	r5,-124(fp)
1000cb8c:	e13ff817 	ldw	r4,-32(fp)
1000cb90:	00100a80 	call	100100a8 <__pow5mult>
1000cb94:	e0bfe115 	stw	r2,-124(fp)
1000cb98:	00000506 	br	1000cbb0 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
1000cb9c:	e1bfd017 	ldw	r6,-192(fp)
1000cba0:	e17fe117 	ldw	r5,-124(fp)
1000cba4:	e13ff817 	ldw	r4,-32(fp)
1000cba8:	00100a80 	call	100100a8 <__pow5mult>
1000cbac:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
1000cbb0:	01400044 	movi	r5,1
1000cbb4:	e13ff817 	ldw	r4,-32(fp)
1000cbb8:	000fc600 	call	1000fc60 <__i2b>
1000cbbc:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
1000cbc0:	e0bfdd17 	ldw	r2,-140(fp)
1000cbc4:	0080050e 	bge	zero,r2,1000cbdc <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
1000cbc8:	e1bfdd17 	ldw	r6,-140(fp)
1000cbcc:	e17fe417 	ldw	r5,-112(fp)
1000cbd0:	e13ff817 	ldw	r4,-32(fp)
1000cbd4:	00100a80 	call	100100a8 <__pow5mult>
1000cbd8:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
1000cbdc:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
1000cbe0:	e0bffb17 	ldw	r2,-20(fp)
1000cbe4:	10800088 	cmpgei	r2,r2,2
1000cbe8:	1000121e 	bne	r2,zero,1000cc34 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
1000cbec:	e0bff217 	ldw	r2,-56(fp)
1000cbf0:	1000101e 	bne	r2,zero,1000cc34 <_dtoa_r+0x1460>
1000cbf4:	e0fff317 	ldw	r3,-52(fp)
1000cbf8:	00800434 	movhi	r2,16
1000cbfc:	10bfffc4 	addi	r2,r2,-1
1000cc00:	1884703a 	and	r2,r3,r2
1000cc04:	10000b1e 	bne	r2,zero,1000cc34 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
1000cc08:	e0bff317 	ldw	r2,-52(fp)
1000cc0c:	109ffc2c 	andhi	r2,r2,32752
1000cc10:	10000826 	beq	r2,zero,1000cc34 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
1000cc14:	e0bfcf17 	ldw	r2,-196(fp)
1000cc18:	10800044 	addi	r2,r2,1
1000cc1c:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
1000cc20:	e0bfdc17 	ldw	r2,-144(fp)
1000cc24:	10800044 	addi	r2,r2,1
1000cc28:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
1000cc2c:	00800044 	movi	r2,1
1000cc30:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
1000cc34:	e0bfdd17 	ldw	r2,-140(fp)
1000cc38:	10000f26 	beq	r2,zero,1000cc78 <_dtoa_r+0x14a4>
1000cc3c:	e0bfe417 	ldw	r2,-112(fp)
1000cc40:	10800417 	ldw	r2,16(r2)
1000cc44:	10bfffc4 	addi	r2,r2,-1
1000cc48:	e0ffe417 	ldw	r3,-112(fp)
1000cc4c:	10800144 	addi	r2,r2,5
1000cc50:	1085883a 	add	r2,r2,r2
1000cc54:	1085883a 	add	r2,r2,r2
1000cc58:	1885883a 	add	r2,r3,r2
1000cc5c:	10800017 	ldw	r2,0(r2)
1000cc60:	1009883a 	mov	r4,r2
1000cc64:	000fae40 	call	1000fae4 <__hi0bits>
1000cc68:	1007883a 	mov	r3,r2
1000cc6c:	00800804 	movi	r2,32
1000cc70:	10c5c83a 	sub	r2,r2,r3
1000cc74:	00000106 	br	1000cc7c <_dtoa_r+0x14a8>
1000cc78:	00800044 	movi	r2,1
1000cc7c:	e0ffdc17 	ldw	r3,-144(fp)
1000cc80:	10c5883a 	add	r2,r2,r3
1000cc84:	108007cc 	andi	r2,r2,31
1000cc88:	e0bfd215 	stw	r2,-184(fp)
1000cc8c:	e0bfd217 	ldw	r2,-184(fp)
1000cc90:	10000426 	beq	r2,zero,1000cca4 <_dtoa_r+0x14d0>
    i = 32 - i;
1000cc94:	00c00804 	movi	r3,32
1000cc98:	e0bfd217 	ldw	r2,-184(fp)
1000cc9c:	1885c83a 	sub	r2,r3,r2
1000cca0:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
1000cca4:	e0bfd217 	ldw	r2,-184(fp)
1000cca8:	10800150 	cmplti	r2,r2,5
1000ccac:	1000101e 	bne	r2,zero,1000ccf0 <_dtoa_r+0x151c>
    {
      i -= 4;
1000ccb0:	e0bfd217 	ldw	r2,-184(fp)
1000ccb4:	10bfff04 	addi	r2,r2,-4
1000ccb8:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
1000ccbc:	e0ffcf17 	ldw	r3,-196(fp)
1000ccc0:	e0bfd217 	ldw	r2,-184(fp)
1000ccc4:	1885883a 	add	r2,r3,r2
1000ccc8:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
1000cccc:	e0ffda17 	ldw	r3,-152(fp)
1000ccd0:	e0bfd217 	ldw	r2,-184(fp)
1000ccd4:	1885883a 	add	r2,r3,r2
1000ccd8:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
1000ccdc:	e0ffdc17 	ldw	r3,-144(fp)
1000cce0:	e0bfd217 	ldw	r2,-184(fp)
1000cce4:	1885883a 	add	r2,r3,r2
1000cce8:	e0bfdc15 	stw	r2,-144(fp)
1000ccec:	00001206 	br	1000cd38 <_dtoa_r+0x1564>
    }
  else if (i < 4)
1000ccf0:	e0bfd217 	ldw	r2,-184(fp)
1000ccf4:	10800108 	cmpgei	r2,r2,4
1000ccf8:	10000f1e 	bne	r2,zero,1000cd38 <_dtoa_r+0x1564>
    {
      i += 28;
1000ccfc:	e0bfd217 	ldw	r2,-184(fp)
1000cd00:	10800704 	addi	r2,r2,28
1000cd04:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
1000cd08:	e0ffcf17 	ldw	r3,-196(fp)
1000cd0c:	e0bfd217 	ldw	r2,-184(fp)
1000cd10:	1885883a 	add	r2,r3,r2
1000cd14:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
1000cd18:	e0ffda17 	ldw	r3,-152(fp)
1000cd1c:	e0bfd217 	ldw	r2,-184(fp)
1000cd20:	1885883a 	add	r2,r3,r2
1000cd24:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
1000cd28:	e0ffdc17 	ldw	r3,-144(fp)
1000cd2c:	e0bfd217 	ldw	r2,-184(fp)
1000cd30:	1885883a 	add	r2,r3,r2
1000cd34:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
1000cd38:	e0bfcf17 	ldw	r2,-196(fp)
1000cd3c:	0080050e 	bge	zero,r2,1000cd54 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
1000cd40:	e1bfcf17 	ldw	r6,-196(fp)
1000cd44:	e17fe117 	ldw	r5,-124(fp)
1000cd48:	e13ff817 	ldw	r4,-32(fp)
1000cd4c:	00102200 	call	10010220 <__lshift>
1000cd50:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
1000cd54:	e0bfdc17 	ldw	r2,-144(fp)
1000cd58:	0080050e 	bge	zero,r2,1000cd70 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
1000cd5c:	e1bfdc17 	ldw	r6,-144(fp)
1000cd60:	e17fe417 	ldw	r5,-112(fp)
1000cd64:	e13ff817 	ldw	r4,-32(fp)
1000cd68:	00102200 	call	10010220 <__lshift>
1000cd6c:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
1000cd70:	e0bfd817 	ldw	r2,-160(fp)
1000cd74:	10001726 	beq	r2,zero,1000cdd4 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
1000cd78:	e17fe417 	ldw	r5,-112(fp)
1000cd7c:	e13fe117 	ldw	r4,-124(fp)
1000cd80:	00104180 	call	10010418 <__mcmp>
1000cd84:	1000130e 	bge	r2,zero,1000cdd4 <_dtoa_r+0x1600>
	{
	  k--;
1000cd88:	e0bfd717 	ldw	r2,-164(fp)
1000cd8c:	10bfffc4 	addi	r2,r2,-1
1000cd90:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
1000cd94:	000f883a 	mov	r7,zero
1000cd98:	01800284 	movi	r6,10
1000cd9c:	e17fe117 	ldw	r5,-124(fp)
1000cda0:	e13ff817 	ldw	r4,-32(fp)
1000cda4:	000f7ac0 	call	1000f7ac <__multadd>
1000cda8:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
1000cdac:	e0bfd917 	ldw	r2,-156(fp)
1000cdb0:	10000626 	beq	r2,zero,1000cdcc <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
1000cdb4:	000f883a 	mov	r7,zero
1000cdb8:	01800284 	movi	r6,10
1000cdbc:	e17fe317 	ldw	r5,-116(fp)
1000cdc0:	e13ff817 	ldw	r4,-32(fp)
1000cdc4:	000f7ac0 	call	1000f7ac <__multadd>
1000cdc8:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
1000cdcc:	e0bfd517 	ldw	r2,-172(fp)
1000cdd0:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
1000cdd4:	e0bfd417 	ldw	r2,-176(fp)
1000cdd8:	00801f16 	blt	zero,r2,1000ce58 <_dtoa_r+0x1684>
1000cddc:	e0bffb17 	ldw	r2,-20(fp)
1000cde0:	108000d0 	cmplti	r2,r2,3
1000cde4:	10001c1e 	bne	r2,zero,1000ce58 <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
1000cde8:	e0bfd417 	ldw	r2,-176(fp)
1000cdec:	10000c16 	blt	r2,zero,1000ce20 <_dtoa_r+0x164c>
1000cdf0:	000f883a 	mov	r7,zero
1000cdf4:	01800144 	movi	r6,5
1000cdf8:	e17fe417 	ldw	r5,-112(fp)
1000cdfc:	e13ff817 	ldw	r4,-32(fp)
1000ce00:	000f7ac0 	call	1000f7ac <__multadd>
1000ce04:	e0bfe415 	stw	r2,-112(fp)
1000ce08:	e17fe417 	ldw	r5,-112(fp)
1000ce0c:	e13fe117 	ldw	r4,-124(fp)
1000ce10:	00104180 	call	10010418 <__mcmp>
1000ce14:	00800716 	blt	zero,r2,1000ce34 <_dtoa_r+0x1660>
1000ce18:	00000106 	br	1000ce20 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
1000ce1c:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
1000ce20:	e0800217 	ldw	r2,8(fp)
1000ce24:	0084303a 	nor	r2,zero,r2
1000ce28:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
1000ce2c:	00011d06 	br	1000d2a4 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
1000ce30:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
1000ce34:	e0bfe717 	ldw	r2,-100(fp)
1000ce38:	10c00044 	addi	r3,r2,1
1000ce3c:	e0ffe715 	stw	r3,-100(fp)
1000ce40:	00c00c44 	movi	r3,49
1000ce44:	10c00005 	stb	r3,0(r2)
      k++;
1000ce48:	e0bfd717 	ldw	r2,-164(fp)
1000ce4c:	10800044 	addi	r2,r2,1
1000ce50:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
1000ce54:	00011306 	br	1000d2a4 <_dtoa_r+0x1ad0>
    }
  if (leftright)
1000ce58:	e0bfd917 	ldw	r2,-156(fp)
1000ce5c:	1000ba26 	beq	r2,zero,1000d148 <_dtoa_r+0x1974>
    {
      if (m2 > 0)
1000ce60:	e0bfda17 	ldw	r2,-152(fp)
1000ce64:	0080050e 	bge	zero,r2,1000ce7c <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
1000ce68:	e1bfda17 	ldw	r6,-152(fp)
1000ce6c:	e17fe317 	ldw	r5,-116(fp)
1000ce70:	e13ff817 	ldw	r4,-32(fp)
1000ce74:	00102200 	call	10010220 <__lshift>
1000ce78:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
1000ce7c:	e0bfe317 	ldw	r2,-116(fp)
1000ce80:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
1000ce84:	e0bfde17 	ldw	r2,-136(fp)
1000ce88:	10001826 	beq	r2,zero,1000ceec <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
1000ce8c:	e0bfe317 	ldw	r2,-116(fp)
1000ce90:	10800117 	ldw	r2,4(r2)
1000ce94:	100b883a 	mov	r5,r2
1000ce98:	e13ff817 	ldw	r4,-32(fp)
1000ce9c:	000f6000 	call	1000f600 <_Balloc>
1000cea0:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
1000cea4:	e0bfe317 	ldw	r2,-116(fp)
1000cea8:	10c00304 	addi	r3,r2,12
1000ceac:	e0bfe217 	ldw	r2,-120(fp)
1000ceb0:	11000304 	addi	r4,r2,12
1000ceb4:	e0bfe217 	ldw	r2,-120(fp)
1000ceb8:	10800417 	ldw	r2,16(r2)
1000cebc:	10800084 	addi	r2,r2,2
1000cec0:	1085883a 	add	r2,r2,r2
1000cec4:	1085883a 	add	r2,r2,r2
1000cec8:	100d883a 	mov	r6,r2
1000cecc:	200b883a 	mov	r5,r4
1000ced0:	1809883a 	mov	r4,r3
1000ced4:	000f2700 	call	1000f270 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
1000ced8:	01800044 	movi	r6,1
1000cedc:	e17fe317 	ldw	r5,-116(fp)
1000cee0:	e13ff817 	ldw	r4,-32(fp)
1000cee4:	00102200 	call	10010220 <__lshift>
1000cee8:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
1000ceec:	00800044 	movi	r2,1
1000cef0:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
1000cef4:	e17fe417 	ldw	r5,-112(fp)
1000cef8:	e13fe117 	ldw	r4,-124(fp)
1000cefc:	000b4100 	call	1000b410 <quorem>
1000cf00:	10800c04 	addi	r2,r2,48
1000cf04:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
1000cf08:	e17fe217 	ldw	r5,-120(fp)
1000cf0c:	e13fe117 	ldw	r4,-124(fp)
1000cf10:	00104180 	call	10010418 <__mcmp>
1000cf14:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
1000cf18:	e1bfe317 	ldw	r6,-116(fp)
1000cf1c:	e17fe417 	ldw	r5,-112(fp)
1000cf20:	e13ff817 	ldw	r4,-32(fp)
1000cf24:	001052c0 	call	1001052c <__mdiff>
1000cf28:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
1000cf2c:	e0bfef17 	ldw	r2,-68(fp)
1000cf30:	10800317 	ldw	r2,12(r2)
1000cf34:	1000041e 	bne	r2,zero,1000cf48 <_dtoa_r+0x1774>
1000cf38:	e17fef17 	ldw	r5,-68(fp)
1000cf3c:	e13fe117 	ldw	r4,-124(fp)
1000cf40:	00104180 	call	10010418 <__mcmp>
1000cf44:	00000106 	br	1000cf4c <_dtoa_r+0x1778>
1000cf48:	00800044 	movi	r2,1
1000cf4c:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
1000cf50:	e17fef17 	ldw	r5,-68(fp)
1000cf54:	e13ff817 	ldw	r4,-32(fp)
1000cf58:	000f7300 	call	1000f730 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
1000cf5c:	e0bfec17 	ldw	r2,-80(fp)
1000cf60:	1000131e 	bne	r2,zero,1000cfb0 <_dtoa_r+0x17dc>
1000cf64:	e0bffb17 	ldw	r2,-20(fp)
1000cf68:	1000111e 	bne	r2,zero,1000cfb0 <_dtoa_r+0x17dc>
1000cf6c:	e0bff217 	ldw	r2,-56(fp)
1000cf70:	1080004c 	andi	r2,r2,1
1000cf74:	10000e1e 	bne	r2,zero,1000cfb0 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
1000cf78:	e0bfd117 	ldw	r2,-188(fp)
1000cf7c:	10800e58 	cmpnei	r2,r2,57
1000cf80:	10003726 	beq	r2,zero,1000d060 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
1000cf84:	e0bfd617 	ldw	r2,-168(fp)
1000cf88:	0080030e 	bge	zero,r2,1000cf98 <_dtoa_r+0x17c4>
		dig++;
1000cf8c:	e0bfd117 	ldw	r2,-188(fp)
1000cf90:	10800044 	addi	r2,r2,1
1000cf94:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
1000cf98:	e0bfe717 	ldw	r2,-100(fp)
1000cf9c:	10c00044 	addi	r3,r2,1
1000cfa0:	e0ffe715 	stw	r3,-100(fp)
1000cfa4:	e0ffd117 	ldw	r3,-188(fp)
1000cfa8:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000cfac:	0000bd06 	br	1000d2a4 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
1000cfb0:	e0bfd617 	ldw	r2,-168(fp)
1000cfb4:	10000716 	blt	r2,zero,1000cfd4 <_dtoa_r+0x1800>
1000cfb8:	e0bfd617 	ldw	r2,-168(fp)
1000cfbc:	1000221e 	bne	r2,zero,1000d048 <_dtoa_r+0x1874>
1000cfc0:	e0bffb17 	ldw	r2,-20(fp)
1000cfc4:	1000201e 	bne	r2,zero,1000d048 <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
1000cfc8:	e0bff217 	ldw	r2,-56(fp)
1000cfcc:	1080004c 	andi	r2,r2,1
1000cfd0:	10001d1e 	bne	r2,zero,1000d048 <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
1000cfd4:	e0bfec17 	ldw	r2,-80(fp)
1000cfd8:	0080150e 	bge	zero,r2,1000d030 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
1000cfdc:	01800044 	movi	r6,1
1000cfe0:	e17fe117 	ldw	r5,-124(fp)
1000cfe4:	e13ff817 	ldw	r4,-32(fp)
1000cfe8:	00102200 	call	10010220 <__lshift>
1000cfec:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
1000cff0:	e17fe417 	ldw	r5,-112(fp)
1000cff4:	e13fe117 	ldw	r4,-124(fp)
1000cff8:	00104180 	call	10010418 <__mcmp>
1000cffc:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
1000d000:	e0bfec17 	ldw	r2,-80(fp)
1000d004:	00800516 	blt	zero,r2,1000d01c <_dtoa_r+0x1848>
1000d008:	e0bfec17 	ldw	r2,-80(fp)
1000d00c:	1000081e 	bne	r2,zero,1000d030 <_dtoa_r+0x185c>
1000d010:	e0bfd117 	ldw	r2,-188(fp)
1000d014:	1080004c 	andi	r2,r2,1
1000d018:	10000526 	beq	r2,zero,1000d030 <_dtoa_r+0x185c>
		      && dig++ == '9')
1000d01c:	e0bfd117 	ldw	r2,-188(fp)
1000d020:	10c00044 	addi	r3,r2,1
1000d024:	e0ffd115 	stw	r3,-188(fp)
1000d028:	10800e58 	cmpnei	r2,r2,57
1000d02c:	10000e26 	beq	r2,zero,1000d068 <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
1000d030:	e0bfe717 	ldw	r2,-100(fp)
1000d034:	10c00044 	addi	r3,r2,1
1000d038:	e0ffe715 	stw	r3,-100(fp)
1000d03c:	e0ffd117 	ldw	r3,-188(fp)
1000d040:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000d044:	00009706 	br	1000d2a4 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
1000d048:	e0bfec17 	ldw	r2,-80(fp)
1000d04c:	0080140e 	bge	zero,r2,1000d0a0 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
1000d050:	e0bfd117 	ldw	r2,-188(fp)
1000d054:	10800e58 	cmpnei	r2,r2,57
1000d058:	10000a1e 	bne	r2,zero,1000d084 <_dtoa_r+0x18b0>
1000d05c:	00000306 	br	1000d06c <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
1000d060:	0001883a 	nop
1000d064:	00000106 	br	1000d06c <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
1000d068:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
1000d06c:	e0bfe717 	ldw	r2,-100(fp)
1000d070:	10c00044 	addi	r3,r2,1
1000d074:	e0ffe715 	stw	r3,-100(fp)
1000d078:	00c00e44 	movi	r3,57
1000d07c:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
1000d080:	00005d06 	br	1000d1f8 <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
1000d084:	e0bfe717 	ldw	r2,-100(fp)
1000d088:	10c00044 	addi	r3,r2,1
1000d08c:	e0ffe715 	stw	r3,-100(fp)
1000d090:	e0ffd117 	ldw	r3,-188(fp)
1000d094:	18c00044 	addi	r3,r3,1
1000d098:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000d09c:	00008106 	br	1000d2a4 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
1000d0a0:	e0bfe717 	ldw	r2,-100(fp)
1000d0a4:	10c00044 	addi	r3,r2,1
1000d0a8:	e0ffe715 	stw	r3,-100(fp)
1000d0ac:	e0ffd117 	ldw	r3,-188(fp)
1000d0b0:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
1000d0b4:	e0ffd217 	ldw	r3,-184(fp)
1000d0b8:	e0bfd417 	ldw	r2,-176(fp)
1000d0bc:	18803b26 	beq	r3,r2,1000d1ac <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
1000d0c0:	000f883a 	mov	r7,zero
1000d0c4:	01800284 	movi	r6,10
1000d0c8:	e17fe117 	ldw	r5,-124(fp)
1000d0cc:	e13ff817 	ldw	r4,-32(fp)
1000d0d0:	000f7ac0 	call	1000f7ac <__multadd>
1000d0d4:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
1000d0d8:	e0ffe217 	ldw	r3,-120(fp)
1000d0dc:	e0bfe317 	ldw	r2,-116(fp)
1000d0e0:	1880091e 	bne	r3,r2,1000d108 <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
1000d0e4:	000f883a 	mov	r7,zero
1000d0e8:	01800284 	movi	r6,10
1000d0ec:	e17fe317 	ldw	r5,-116(fp)
1000d0f0:	e13ff817 	ldw	r4,-32(fp)
1000d0f4:	000f7ac0 	call	1000f7ac <__multadd>
1000d0f8:	e0bfe315 	stw	r2,-116(fp)
1000d0fc:	e0bfe317 	ldw	r2,-116(fp)
1000d100:	e0bfe215 	stw	r2,-120(fp)
1000d104:	00000c06 	br	1000d138 <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
1000d108:	000f883a 	mov	r7,zero
1000d10c:	01800284 	movi	r6,10
1000d110:	e17fe217 	ldw	r5,-120(fp)
1000d114:	e13ff817 	ldw	r4,-32(fp)
1000d118:	000f7ac0 	call	1000f7ac <__multadd>
1000d11c:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
1000d120:	000f883a 	mov	r7,zero
1000d124:	01800284 	movi	r6,10
1000d128:	e17fe317 	ldw	r5,-116(fp)
1000d12c:	e13ff817 	ldw	r4,-32(fp)
1000d130:	000f7ac0 	call	1000f7ac <__multadd>
1000d134:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
1000d138:	e0bfd217 	ldw	r2,-184(fp)
1000d13c:	10800044 	addi	r2,r2,1
1000d140:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
1000d144:	003f6b06 	br	1000cef4 <__alt_data_end+0xf800cef4>
    }
  else
    for (i = 1;; i++)
1000d148:	00800044 	movi	r2,1
1000d14c:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
1000d150:	e43fe717 	ldw	r16,-100(fp)
1000d154:	80800044 	addi	r2,r16,1
1000d158:	e0bfe715 	stw	r2,-100(fp)
1000d15c:	e17fe417 	ldw	r5,-112(fp)
1000d160:	e13fe117 	ldw	r4,-124(fp)
1000d164:	000b4100 	call	1000b410 <quorem>
1000d168:	10800c04 	addi	r2,r2,48
1000d16c:	e0bfd115 	stw	r2,-188(fp)
1000d170:	e0bfd117 	ldw	r2,-188(fp)
1000d174:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
1000d178:	e0ffd217 	ldw	r3,-184(fp)
1000d17c:	e0bfd417 	ldw	r2,-176(fp)
1000d180:	18800c0e 	bge	r3,r2,1000d1b4 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
1000d184:	000f883a 	mov	r7,zero
1000d188:	01800284 	movi	r6,10
1000d18c:	e17fe117 	ldw	r5,-124(fp)
1000d190:	e13ff817 	ldw	r4,-32(fp)
1000d194:	000f7ac0 	call	1000f7ac <__multadd>
1000d198:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
1000d19c:	e0bfd217 	ldw	r2,-184(fp)
1000d1a0:	10800044 	addi	r2,r2,1
1000d1a4:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
1000d1a8:	003fe906 	br	1000d150 <__alt_data_end+0xf800d150>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
1000d1ac:	0001883a 	nop
1000d1b0:	00000106 	br	1000d1b8 <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
1000d1b4:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
1000d1b8:	01800044 	movi	r6,1
1000d1bc:	e17fe117 	ldw	r5,-124(fp)
1000d1c0:	e13ff817 	ldw	r4,-32(fp)
1000d1c4:	00102200 	call	10010220 <__lshift>
1000d1c8:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
1000d1cc:	e17fe417 	ldw	r5,-112(fp)
1000d1d0:	e13fe117 	ldw	r4,-124(fp)
1000d1d4:	00104180 	call	10010418 <__mcmp>
1000d1d8:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
1000d1dc:	e0bfd617 	ldw	r2,-168(fp)
1000d1e0:	00801216 	blt	zero,r2,1000d22c <_dtoa_r+0x1a58>
1000d1e4:	e0bfd617 	ldw	r2,-168(fp)
1000d1e8:	1000211e 	bne	r2,zero,1000d270 <_dtoa_r+0x1a9c>
1000d1ec:	e0bfd117 	ldw	r2,-188(fp)
1000d1f0:	1080004c 	andi	r2,r2,1
1000d1f4:	10001e26 	beq	r2,zero,1000d270 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
1000d1f8:	00000c06 	br	1000d22c <_dtoa_r+0x1a58>
	if (s == s0)
1000d1fc:	e0ffe717 	ldw	r3,-100(fp)
1000d200:	e0bfe917 	ldw	r2,-92(fp)
1000d204:	1880091e 	bne	r3,r2,1000d22c <_dtoa_r+0x1a58>
	  {
	    k++;
1000d208:	e0bfd717 	ldw	r2,-164(fp)
1000d20c:	10800044 	addi	r2,r2,1
1000d210:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
1000d214:	e0bfe717 	ldw	r2,-100(fp)
1000d218:	10c00044 	addi	r3,r2,1
1000d21c:	e0ffe715 	stw	r3,-100(fp)
1000d220:	00c00c44 	movi	r3,49
1000d224:	10c00005 	stb	r3,0(r2)
	    goto ret;
1000d228:	00001e06 	br	1000d2a4 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
1000d22c:	e0bfe717 	ldw	r2,-100(fp)
1000d230:	10bfffc4 	addi	r2,r2,-1
1000d234:	e0bfe715 	stw	r2,-100(fp)
1000d238:	e0bfe717 	ldw	r2,-100(fp)
1000d23c:	10800003 	ldbu	r2,0(r2)
1000d240:	10803fcc 	andi	r2,r2,255
1000d244:	1080201c 	xori	r2,r2,128
1000d248:	10bfe004 	addi	r2,r2,-128
1000d24c:	10800e60 	cmpeqi	r2,r2,57
1000d250:	103fea1e 	bne	r2,zero,1000d1fc <__alt_data_end+0xf800d1fc>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
1000d254:	e0bfe717 	ldw	r2,-100(fp)
1000d258:	10c00044 	addi	r3,r2,1
1000d25c:	e0ffe715 	stw	r3,-100(fp)
1000d260:	10c00003 	ldbu	r3,0(r2)
1000d264:	18c00044 	addi	r3,r3,1
1000d268:	10c00005 	stb	r3,0(r2)
1000d26c:	00000d06 	br	1000d2a4 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
1000d270:	e0bfe717 	ldw	r2,-100(fp)
1000d274:	10bfffc4 	addi	r2,r2,-1
1000d278:	e0bfe715 	stw	r2,-100(fp)
1000d27c:	e0bfe717 	ldw	r2,-100(fp)
1000d280:	10800003 	ldbu	r2,0(r2)
1000d284:	10803fcc 	andi	r2,r2,255
1000d288:	1080201c 	xori	r2,r2,128
1000d28c:	10bfe004 	addi	r2,r2,-128
1000d290:	10800c20 	cmpeqi	r2,r2,48
1000d294:	103ff61e 	bne	r2,zero,1000d270 <__alt_data_end+0xf800d270>
      s++;
1000d298:	e0bfe717 	ldw	r2,-100(fp)
1000d29c:	10800044 	addi	r2,r2,1
1000d2a0:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
1000d2a4:	e17fe417 	ldw	r5,-112(fp)
1000d2a8:	e13ff817 	ldw	r4,-32(fp)
1000d2ac:	000f7300 	call	1000f730 <_Bfree>
  if (mhi)
1000d2b0:	e0bfe317 	ldw	r2,-116(fp)
1000d2b4:	10000d26 	beq	r2,zero,1000d2ec <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
1000d2b8:	e0bfe217 	ldw	r2,-120(fp)
1000d2bc:	10000626 	beq	r2,zero,1000d2d8 <_dtoa_r+0x1b04>
1000d2c0:	e0ffe217 	ldw	r3,-120(fp)
1000d2c4:	e0bfe317 	ldw	r2,-116(fp)
1000d2c8:	18800326 	beq	r3,r2,1000d2d8 <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
1000d2cc:	e17fe217 	ldw	r5,-120(fp)
1000d2d0:	e13ff817 	ldw	r4,-32(fp)
1000d2d4:	000f7300 	call	1000f730 <_Bfree>
      Bfree (ptr, mhi);
1000d2d8:	e17fe317 	ldw	r5,-116(fp)
1000d2dc:	e13ff817 	ldw	r4,-32(fp)
1000d2e0:	000f7300 	call	1000f730 <_Bfree>
1000d2e4:	00000106 	br	1000d2ec <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
1000d2e8:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
1000d2ec:	e17fe117 	ldw	r5,-124(fp)
1000d2f0:	e13ff817 	ldw	r4,-32(fp)
1000d2f4:	000f7300 	call	1000f730 <_Bfree>
  *s = 0;
1000d2f8:	e0bfe717 	ldw	r2,-100(fp)
1000d2fc:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
1000d300:	e0bfd717 	ldw	r2,-164(fp)
1000d304:	10c00044 	addi	r3,r2,1
1000d308:	e0800317 	ldw	r2,12(fp)
1000d30c:	10c00015 	stw	r3,0(r2)
  if (rve)
1000d310:	e0800517 	ldw	r2,20(fp)
1000d314:	10000326 	beq	r2,zero,1000d324 <_dtoa_r+0x1b50>
    *rve = s;
1000d318:	e0800517 	ldw	r2,20(fp)
1000d31c:	e0ffe717 	ldw	r3,-100(fp)
1000d320:	10c00015 	stw	r3,0(r2)
  return s0;
1000d324:	e0bfe917 	ldw	r2,-92(fp)
}
1000d328:	e6fffc04 	addi	sp,fp,-16
1000d32c:	dfc00517 	ldw	ra,20(sp)
1000d330:	df000417 	ldw	fp,16(sp)
1000d334:	dcc00317 	ldw	r19,12(sp)
1000d338:	dc800217 	ldw	r18,8(sp)
1000d33c:	dc400117 	ldw	r17,4(sp)
1000d340:	dc000017 	ldw	r16,0(sp)
1000d344:	dec00604 	addi	sp,sp,24
1000d348:	f800283a 	ret

1000d34c <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
1000d34c:	deffff04 	addi	sp,sp,-4
1000d350:	df000015 	stw	fp,0(sp)
1000d354:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
1000d358:	008403b4 	movhi	r2,4110
1000d35c:	10a44204 	addi	r2,r2,-28408
1000d360:	10800017 	ldw	r2,0(r2)
}
1000d364:	e037883a 	mov	sp,fp
1000d368:	df000017 	ldw	fp,0(sp)
1000d36c:	dec00104 	addi	sp,sp,4
1000d370:	f800283a 	ret

1000d374 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000d374:	defff504 	addi	sp,sp,-44
1000d378:	dfc00a15 	stw	ra,40(sp)
1000d37c:	df000915 	stw	fp,36(sp)
1000d380:	dcc00815 	stw	r19,32(sp)
1000d384:	dc800715 	stw	r18,28(sp)
1000d388:	dc400615 	stw	r17,24(sp)
1000d38c:	dc000515 	stw	r16,20(sp)
1000d390:	df000904 	addi	fp,sp,36
1000d394:	e13ffb15 	stw	r4,-20(fp)
1000d398:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
1000d39c:	8080030b 	ldhu	r2,12(r16)
1000d3a0:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
1000d3a4:	e0bff90b 	ldhu	r2,-28(fp)
1000d3a8:	10bfffcc 	andi	r2,r2,65535
1000d3ac:	1080020c 	andi	r2,r2,8
1000d3b0:	1000831e 	bne	r2,zero,1000d5c0 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
1000d3b4:	8080030b 	ldhu	r2,12(r16)
1000d3b8:	10820014 	ori	r2,r2,2048
1000d3bc:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
1000d3c0:	80800117 	ldw	r2,4(r16)
1000d3c4:	00800216 	blt	zero,r2,1000d3d0 <__sflush_r+0x5c>
1000d3c8:	80800f17 	ldw	r2,60(r16)
1000d3cc:	00807a0e 	bge	zero,r2,1000d5b8 <__sflush_r+0x244>
1000d3d0:	80800a17 	ldw	r2,40(r16)
1000d3d4:	10007826 	beq	r2,zero,1000d5b8 <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
1000d3d8:	e0bffb17 	ldw	r2,-20(fp)
1000d3dc:	10800017 	ldw	r2,0(r2)
1000d3e0:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
1000d3e4:	e0bffb17 	ldw	r2,-20(fp)
1000d3e8:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
1000d3ec:	8080030b 	ldhu	r2,12(r16)
1000d3f0:	10bfffcc 	andi	r2,r2,65535
1000d3f4:	1084000c 	andi	r2,r2,4096
1000d3f8:	10000326 	beq	r2,zero,1000d408 <__sflush_r+0x94>
	    curoff = fp->_offset;
1000d3fc:	80801417 	ldw	r2,80(r16)
1000d400:	e0bff715 	stw	r2,-36(fp)
1000d404:	00002206 	br	1000d490 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
1000d408:	80800a17 	ldw	r2,40(r16)
1000d40c:	80c00717 	ldw	r3,28(r16)
1000d410:	01c00044 	movi	r7,1
1000d414:	000d883a 	mov	r6,zero
1000d418:	180b883a 	mov	r5,r3
1000d41c:	e13ffb17 	ldw	r4,-20(fp)
1000d420:	103ee83a 	callr	r2
1000d424:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
1000d428:	e0bff717 	ldw	r2,-36(fp)
1000d42c:	10bfffd8 	cmpnei	r2,r2,-1
1000d430:	1000171e 	bne	r2,zero,1000d490 <__sflush_r+0x11c>
1000d434:	e0bffb17 	ldw	r2,-20(fp)
1000d438:	10800017 	ldw	r2,0(r2)
1000d43c:	10001426 	beq	r2,zero,1000d490 <__sflush_r+0x11c>
		{
		  int result = EOF;
1000d440:	00bfffc4 	movi	r2,-1
1000d444:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
1000d448:	e0bffb17 	ldw	r2,-20(fp)
1000d44c:	10800017 	ldw	r2,0(r2)
1000d450:	10800760 	cmpeqi	r2,r2,29
1000d454:	1000041e 	bne	r2,zero,1000d468 <__sflush_r+0xf4>
1000d458:	e0bffb17 	ldw	r2,-20(fp)
1000d45c:	10800017 	ldw	r2,0(r2)
1000d460:	10800598 	cmpnei	r2,r2,22
1000d464:	1000051e 	bne	r2,zero,1000d47c <__sflush_r+0x108>
		    {
		      result = 0;
1000d468:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
1000d46c:	e0bffb17 	ldw	r2,-20(fp)
1000d470:	e0fffa17 	ldw	r3,-24(fp)
1000d474:	10c00015 	stw	r3,0(r2)
1000d478:	00000306 	br	1000d488 <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
1000d47c:	8080030b 	ldhu	r2,12(r16)
1000d480:	10801014 	ori	r2,r2,64
1000d484:	8080030d 	sth	r2,12(r16)
		  return result;
1000d488:	e0bff817 	ldw	r2,-32(fp)
1000d48c:	00007106 	br	1000d654 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
1000d490:	8080030b 	ldhu	r2,12(r16)
1000d494:	10bfffcc 	andi	r2,r2,65535
1000d498:	1080010c 	andi	r2,r2,4
1000d49c:	10000a26 	beq	r2,zero,1000d4c8 <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
1000d4a0:	80800117 	ldw	r2,4(r16)
1000d4a4:	e0fff717 	ldw	r3,-36(fp)
1000d4a8:	1885c83a 	sub	r2,r3,r2
1000d4ac:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
1000d4b0:	80800c17 	ldw	r2,48(r16)
1000d4b4:	10000426 	beq	r2,zero,1000d4c8 <__sflush_r+0x154>
                curoff -= fp->_ur;
1000d4b8:	80800f17 	ldw	r2,60(r16)
1000d4bc:	e0fff717 	ldw	r3,-36(fp)
1000d4c0:	1885c83a 	sub	r2,r3,r2
1000d4c4:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
1000d4c8:	80800a17 	ldw	r2,40(r16)
1000d4cc:	80c00717 	ldw	r3,28(r16)
1000d4d0:	000f883a 	mov	r7,zero
1000d4d4:	e1bff717 	ldw	r6,-36(fp)
1000d4d8:	180b883a 	mov	r5,r3
1000d4dc:	e13ffb17 	ldw	r4,-20(fp)
1000d4e0:	103ee83a 	callr	r2
1000d4e4:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
1000d4e8:	e0bff717 	ldw	r2,-36(fp)
1000d4ec:	10bfffd8 	cmpnei	r2,r2,-1
1000d4f0:	10000b1e 	bne	r2,zero,1000d520 <__sflush_r+0x1ac>
1000d4f4:	e0bffb17 	ldw	r2,-20(fp)
1000d4f8:	10800017 	ldw	r2,0(r2)
1000d4fc:	10000826 	beq	r2,zero,1000d520 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
1000d500:	e0bffb17 	ldw	r2,-20(fp)
1000d504:	10800017 	ldw	r2,0(r2)
1000d508:	10800760 	cmpeqi	r2,r2,29
1000d50c:	1000041e 	bne	r2,zero,1000d520 <__sflush_r+0x1ac>
1000d510:	e0bffb17 	ldw	r2,-20(fp)
1000d514:	10800017 	ldw	r2,0(r2)
1000d518:	10800598 	cmpnei	r2,r2,22
1000d51c:	1000211e 	bne	r2,zero,1000d5a4 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
1000d520:	80c0030b 	ldhu	r3,12(r16)
1000d524:	00bdffc4 	movi	r2,-2049
1000d528:	1884703a 	and	r2,r3,r2
1000d52c:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
1000d530:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
1000d534:	80800417 	ldw	r2,16(r16)
1000d538:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
1000d53c:	8080030b 	ldhu	r2,12(r16)
1000d540:	10bfffcc 	andi	r2,r2,65535
1000d544:	1084000c 	andi	r2,r2,4096
1000d548:	10000826 	beq	r2,zero,1000d56c <__sflush_r+0x1f8>
1000d54c:	e0bff717 	ldw	r2,-36(fp)
1000d550:	10bfffd8 	cmpnei	r2,r2,-1
1000d554:	1000031e 	bne	r2,zero,1000d564 <__sflush_r+0x1f0>
1000d558:	e0bffb17 	ldw	r2,-20(fp)
1000d55c:	10800017 	ldw	r2,0(r2)
1000d560:	1000021e 	bne	r2,zero,1000d56c <__sflush_r+0x1f8>
		fp->_offset = curoff;
1000d564:	e0bff717 	ldw	r2,-36(fp)
1000d568:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
1000d56c:	e0bffb17 	ldw	r2,-20(fp)
1000d570:	e0fffa17 	ldw	r3,-24(fp)
1000d574:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
1000d578:	80800c17 	ldw	r2,48(r16)
1000d57c:	10000e26 	beq	r2,zero,1000d5b8 <__sflush_r+0x244>
		FREEUB (ptr, fp);
1000d580:	80c00c17 	ldw	r3,48(r16)
1000d584:	80801004 	addi	r2,r16,64
1000d588:	18800426 	beq	r3,r2,1000d59c <__sflush_r+0x228>
1000d58c:	80800c17 	ldw	r2,48(r16)
1000d590:	100b883a 	mov	r5,r2
1000d594:	e13ffb17 	ldw	r4,-20(fp)
1000d598:	000dd700 	call	1000dd70 <_free_r>
1000d59c:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
1000d5a0:	00000506 	br	1000d5b8 <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
1000d5a4:	8080030b 	ldhu	r2,12(r16)
1000d5a8:	10801014 	ori	r2,r2,64
1000d5ac:	8080030d 	sth	r2,12(r16)
	      return EOF;
1000d5b0:	00bfffc4 	movi	r2,-1
1000d5b4:	00002706 	br	1000d654 <__sflush_r+0x2e0>
	    }
	}
      return 0;
1000d5b8:	0005883a 	mov	r2,zero
1000d5bc:	00002506 	br	1000d654 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
1000d5c0:	84400417 	ldw	r17,16(r16)
1000d5c4:	8800021e 	bne	r17,zero,1000d5d0 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
1000d5c8:	0005883a 	mov	r2,zero
1000d5cc:	00002106 	br	1000d654 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
1000d5d0:	80800017 	ldw	r2,0(r16)
1000d5d4:	1007883a 	mov	r3,r2
1000d5d8:	8805883a 	mov	r2,r17
1000d5dc:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
1000d5e0:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
1000d5e4:	e0bff90b 	ldhu	r2,-28(fp)
1000d5e8:	10bfffcc 	andi	r2,r2,65535
1000d5ec:	108000cc 	andi	r2,r2,3
1000d5f0:	1000021e 	bne	r2,zero,1000d5fc <__sflush_r+0x288>
1000d5f4:	80800517 	ldw	r2,20(r16)
1000d5f8:	00000106 	br	1000d600 <__sflush_r+0x28c>
1000d5fc:	0005883a 	mov	r2,zero
1000d600:	80800215 	stw	r2,8(r16)

  while (n > 0)
1000d604:	00001106 	br	1000d64c <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
1000d608:	80800917 	ldw	r2,36(r16)
1000d60c:	80c00717 	ldw	r3,28(r16)
1000d610:	900f883a 	mov	r7,r18
1000d614:	880d883a 	mov	r6,r17
1000d618:	180b883a 	mov	r5,r3
1000d61c:	e13ffb17 	ldw	r4,-20(fp)
1000d620:	103ee83a 	callr	r2
1000d624:	1027883a 	mov	r19,r2
      if (t <= 0)
1000d628:	04c00516 	blt	zero,r19,1000d640 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
1000d62c:	8080030b 	ldhu	r2,12(r16)
1000d630:	10801014 	ori	r2,r2,64
1000d634:	8080030d 	sth	r2,12(r16)
          return EOF;
1000d638:	00bfffc4 	movi	r2,-1
1000d63c:	00000506 	br	1000d654 <__sflush_r+0x2e0>
	}
      p += t;
1000d640:	9805883a 	mov	r2,r19
1000d644:	88a3883a 	add	r17,r17,r2
      n -= t;
1000d648:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
1000d64c:	04bfee16 	blt	zero,r18,1000d608 <__alt_data_end+0xf800d608>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
1000d650:	0005883a 	mov	r2,zero
}
1000d654:	e6fffc04 	addi	sp,fp,-16
1000d658:	dfc00517 	ldw	ra,20(sp)
1000d65c:	df000417 	ldw	fp,16(sp)
1000d660:	dcc00317 	ldw	r19,12(sp)
1000d664:	dc800217 	ldw	r18,8(sp)
1000d668:	dc400117 	ldw	r17,4(sp)
1000d66c:	dc000017 	ldw	r16,0(sp)
1000d670:	dec00604 	addi	sp,sp,24
1000d674:	f800283a 	ret

1000d678 <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000d678:	defffa04 	addi	sp,sp,-24
1000d67c:	dfc00515 	stw	ra,20(sp)
1000d680:	df000415 	stw	fp,16(sp)
1000d684:	dc000315 	stw	r16,12(sp)
1000d688:	df000404 	addi	fp,sp,16
1000d68c:	e13ffe15 	stw	r4,-8(fp)
1000d690:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
1000d694:	e0bffe17 	ldw	r2,-8(fp)
1000d698:	e0bffc15 	stw	r2,-16(fp)
1000d69c:	e0bffc17 	ldw	r2,-16(fp)
1000d6a0:	10000526 	beq	r2,zero,1000d6b8 <_fflush_r+0x40>
1000d6a4:	e0bffc17 	ldw	r2,-16(fp)
1000d6a8:	10800e17 	ldw	r2,56(r2)
1000d6ac:	1000021e 	bne	r2,zero,1000d6b8 <_fflush_r+0x40>
1000d6b0:	e13ffc17 	ldw	r4,-16(fp)
1000d6b4:	000db400 	call	1000db40 <__sinit>

  if (!fp->_flags)
1000d6b8:	8080030b 	ldhu	r2,12(r16)
1000d6bc:	10bfffcc 	andi	r2,r2,65535
1000d6c0:	10a0001c 	xori	r2,r2,32768
1000d6c4:	10a00004 	addi	r2,r2,-32768
1000d6c8:	1000021e 	bne	r2,zero,1000d6d4 <_fflush_r+0x5c>
    return 0;
1000d6cc:	0005883a 	mov	r2,zero
1000d6d0:	00000506 	br	1000d6e8 <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
1000d6d4:	800b883a 	mov	r5,r16
1000d6d8:	e13ffe17 	ldw	r4,-8(fp)
1000d6dc:	000d3740 	call	1000d374 <__sflush_r>
1000d6e0:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
1000d6e4:	e0bffd17 	ldw	r2,-12(fp)
}
1000d6e8:	e6ffff04 	addi	sp,fp,-4
1000d6ec:	dfc00217 	ldw	ra,8(sp)
1000d6f0:	df000117 	ldw	fp,4(sp)
1000d6f4:	dc000017 	ldw	r16,0(sp)
1000d6f8:	dec00304 	addi	sp,sp,12
1000d6fc:	f800283a 	ret

1000d700 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
1000d700:	defffe04 	addi	sp,sp,-8
1000d704:	dfc00115 	stw	ra,4(sp)
1000d708:	df000015 	stw	fp,0(sp)
1000d70c:	d839883a 	mov	fp,sp
1000d710:	2007883a 	mov	r3,r4
  if (fp == NULL)
1000d714:	1800081e 	bne	r3,zero,1000d738 <fflush+0x38>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
1000d718:	008403b4 	movhi	r2,4110
1000d71c:	10a44304 	addi	r2,r2,-28404
1000d720:	10800017 	ldw	r2,0(r2)
1000d724:	01440074 	movhi	r5,4097
1000d728:	29759e04 	addi	r5,r5,-10632
1000d72c:	1009883a 	mov	r4,r2
1000d730:	000eb780 	call	1000eb78 <_fwalk_reent>
1000d734:	00000606 	br	1000d750 <fflush+0x50>

  return _fflush_r (_REENT, fp);
1000d738:	008403b4 	movhi	r2,4110
1000d73c:	10a44204 	addi	r2,r2,-28408
1000d740:	10800017 	ldw	r2,0(r2)
1000d744:	180b883a 	mov	r5,r3
1000d748:	1009883a 	mov	r4,r2
1000d74c:	000d6780 	call	1000d678 <_fflush_r>
}
1000d750:	e037883a 	mov	sp,fp
1000d754:	dfc00117 	ldw	ra,4(sp)
1000d758:	df000017 	ldw	fp,0(sp)
1000d75c:	dec00204 	addi	sp,sp,8
1000d760:	f800283a 	ret

1000d764 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
1000d764:	defffa04 	addi	sp,sp,-24
1000d768:	dfc00515 	stw	ra,20(sp)
1000d76c:	df000415 	stw	fp,16(sp)
1000d770:	df000404 	addi	fp,sp,16
1000d774:	e13ffc15 	stw	r4,-16(fp)
1000d778:	e17ffd15 	stw	r5,-12(fp)
1000d77c:	e1bffe15 	stw	r6,-8(fp)
1000d780:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
1000d784:	e0bffc17 	ldw	r2,-16(fp)
1000d788:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
1000d78c:	e0bffc17 	ldw	r2,-16(fp)
1000d790:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
1000d794:	e0bffc17 	ldw	r2,-16(fp)
1000d798:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
1000d79c:	e0bffd17 	ldw	r2,-12(fp)
1000d7a0:	1007883a 	mov	r3,r2
1000d7a4:	e0bffc17 	ldw	r2,-16(fp)
1000d7a8:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
1000d7ac:	e0bffc17 	ldw	r2,-16(fp)
1000d7b0:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
1000d7b4:	e0bffe17 	ldw	r2,-8(fp)
1000d7b8:	1007883a 	mov	r3,r2
1000d7bc:	e0bffc17 	ldw	r2,-16(fp)
1000d7c0:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
1000d7c4:	e0bffc17 	ldw	r2,-16(fp)
1000d7c8:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
1000d7cc:	e0bffc17 	ldw	r2,-16(fp)
1000d7d0:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
1000d7d4:	e0bffc17 	ldw	r2,-16(fp)
1000d7d8:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
1000d7dc:	e0bffc17 	ldw	r2,-16(fp)
1000d7e0:	10801704 	addi	r2,r2,92
1000d7e4:	01800204 	movi	r6,8
1000d7e8:	000b883a 	mov	r5,zero
1000d7ec:	1009883a 	mov	r4,r2
1000d7f0:	0006f500 	call	10006f50 <memset>
  ptr->_cookie = ptr;
1000d7f4:	e0bffc17 	ldw	r2,-16(fp)
1000d7f8:	e0fffc17 	ldw	r3,-16(fp)
1000d7fc:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
1000d800:	e0fffc17 	ldw	r3,-16(fp)
1000d804:	00840074 	movhi	r2,4097
1000d808:	1085e004 	addi	r2,r2,6016
1000d80c:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
1000d810:	e0fffc17 	ldw	r3,-16(fp)
1000d814:	00840074 	movhi	r2,4097
1000d818:	10861304 	addi	r2,r2,6220
1000d81c:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
1000d820:	e0fffc17 	ldw	r3,-16(fp)
1000d824:	00840074 	movhi	r2,4097
1000d828:	10864004 	addi	r2,r2,6400
1000d82c:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
1000d830:	e0fffc17 	ldw	r3,-16(fp)
1000d834:	00840074 	movhi	r2,4097
1000d838:	10866804 	addi	r2,r2,6560
1000d83c:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
1000d840:	0001883a 	nop
1000d844:	e037883a 	mov	sp,fp
1000d848:	dfc00117 	ldw	ra,4(sp)
1000d84c:	df000017 	ldw	fp,0(sp)
1000d850:	dec00204 	addi	sp,sp,8
1000d854:	f800283a 	ret

1000d858 <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
1000d858:	defffa04 	addi	sp,sp,-24
1000d85c:	dfc00515 	stw	ra,20(sp)
1000d860:	df000415 	stw	fp,16(sp)
1000d864:	dc400315 	stw	r17,12(sp)
1000d868:	dc000215 	stw	r16,8(sp)
1000d86c:	df000404 	addi	fp,sp,16
1000d870:	e13ffd15 	stw	r4,-12(fp)
1000d874:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
1000d878:	80bfffc4 	addi	r2,r16,-1
1000d87c:	01401a04 	movi	r5,104
1000d880:	1009883a 	mov	r4,r2
1000d884:	00059d40 	call	100059d4 <__mulsi3>
1000d888:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
1000d88c:	100b883a 	mov	r5,r2
1000d890:	e13ffd17 	ldw	r4,-12(fp)
1000d894:	00063d40 	call	100063d4 <_malloc_r>
1000d898:	e0bffc15 	stw	r2,-16(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
1000d89c:	e0bffc17 	ldw	r2,-16(fp)
1000d8a0:	1000021e 	bne	r2,zero,1000d8ac <__sfmoreglue+0x54>
    return NULL;
1000d8a4:	0005883a 	mov	r2,zero
1000d8a8:	00001306 	br	1000d8f8 <__sfmoreglue+0xa0>
  g->glue._next = NULL;
1000d8ac:	e0bffc17 	ldw	r2,-16(fp)
1000d8b0:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
1000d8b4:	e0bffc17 	ldw	r2,-16(fp)
1000d8b8:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
1000d8bc:	e0bffc17 	ldw	r2,-16(fp)
1000d8c0:	10c00304 	addi	r3,r2,12
1000d8c4:	e0bffc17 	ldw	r2,-16(fp)
1000d8c8:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
1000d8cc:	e0bffc17 	ldw	r2,-16(fp)
1000d8d0:	14400304 	addi	r17,r2,12
1000d8d4:	8005883a 	mov	r2,r16
1000d8d8:	01401a04 	movi	r5,104
1000d8dc:	1009883a 	mov	r4,r2
1000d8e0:	00059d40 	call	100059d4 <__mulsi3>
1000d8e4:	100d883a 	mov	r6,r2
1000d8e8:	000b883a 	mov	r5,zero
1000d8ec:	8809883a 	mov	r4,r17
1000d8f0:	0006f500 	call	10006f50 <memset>
  return &g->glue;
1000d8f4:	e0bffc17 	ldw	r2,-16(fp)
}
1000d8f8:	e6fffe04 	addi	sp,fp,-8
1000d8fc:	dfc00317 	ldw	ra,12(sp)
1000d900:	df000217 	ldw	fp,8(sp)
1000d904:	dc400117 	ldw	r17,4(sp)
1000d908:	dc000017 	ldw	r16,0(sp)
1000d90c:	dec00404 	addi	sp,sp,16
1000d910:	f800283a 	ret

1000d914 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
1000d914:	defffa04 	addi	sp,sp,-24
1000d918:	dfc00515 	stw	ra,20(sp)
1000d91c:	df000415 	stw	fp,16(sp)
1000d920:	df000404 	addi	fp,sp,16
1000d924:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
1000d928:	000dc180 	call	1000dc18 <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
1000d92c:	008403b4 	movhi	r2,4110
1000d930:	10a44304 	addi	r2,r2,-28404
1000d934:	10800017 	ldw	r2,0(r2)
1000d938:	10800e17 	ldw	r2,56(r2)
1000d93c:	1000051e 	bne	r2,zero,1000d954 <__sfp+0x40>
    __sinit (_GLOBAL_REENT);
1000d940:	008403b4 	movhi	r2,4110
1000d944:	10a44304 	addi	r2,r2,-28404
1000d948:	10800017 	ldw	r2,0(r2)
1000d94c:	1009883a 	mov	r4,r2
1000d950:	000db400 	call	1000db40 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
1000d954:	008403b4 	movhi	r2,4110
1000d958:	10a44304 	addi	r2,r2,-28404
1000d95c:	10800017 	ldw	r2,0(r2)
1000d960:	1080b804 	addi	r2,r2,736
1000d964:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000d968:	e0bffe17 	ldw	r2,-8(fp)
1000d96c:	10800217 	ldw	r2,8(r2)
1000d970:	e0bffc15 	stw	r2,-16(fp)
1000d974:	e0bffe17 	ldw	r2,-8(fp)
1000d978:	10800117 	ldw	r2,4(r2)
1000d97c:	e0bffd15 	stw	r2,-12(fp)
1000d980:	00000906 	br	1000d9a8 <__sfp+0x94>
	if (fp->_flags == 0)
1000d984:	e0bffc17 	ldw	r2,-16(fp)
1000d988:	1080030b 	ldhu	r2,12(r2)
1000d98c:	10bfffcc 	andi	r2,r2,65535
1000d990:	10a0001c 	xori	r2,r2,32768
1000d994:	10a00004 	addi	r2,r2,-32768
1000d998:	10001f26 	beq	r2,zero,1000da18 <__sfp+0x104>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000d99c:	e0bffc17 	ldw	r2,-16(fp)
1000d9a0:	10801a04 	addi	r2,r2,104
1000d9a4:	e0bffc15 	stw	r2,-16(fp)
1000d9a8:	e0bffd17 	ldw	r2,-12(fp)
1000d9ac:	10bfffc4 	addi	r2,r2,-1
1000d9b0:	e0bffd15 	stw	r2,-12(fp)
1000d9b4:	e0bffd17 	ldw	r2,-12(fp)
1000d9b8:	103ff20e 	bge	r2,zero,1000d984 <__alt_data_end+0xf800d984>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
1000d9bc:	e0bffe17 	ldw	r2,-8(fp)
1000d9c0:	10800017 	ldw	r2,0(r2)
1000d9c4:	1000091e 	bne	r2,zero,1000d9ec <__sfp+0xd8>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
1000d9c8:	01400104 	movi	r5,4
1000d9cc:	e13fff17 	ldw	r4,-4(fp)
1000d9d0:	000d8580 	call	1000d858 <__sfmoreglue>
1000d9d4:	1007883a 	mov	r3,r2
1000d9d8:	e0bffe17 	ldw	r2,-8(fp)
1000d9dc:	10c00015 	stw	r3,0(r2)
1000d9e0:	e0bffe17 	ldw	r2,-8(fp)
1000d9e4:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
1000d9e8:	10000426 	beq	r2,zero,1000d9fc <__sfp+0xe8>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
1000d9ec:	e0bffe17 	ldw	r2,-8(fp)
1000d9f0:	10800017 	ldw	r2,0(r2)
1000d9f4:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
1000d9f8:	003fdb06 	br	1000d968 <__alt_data_end+0xf800d968>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
1000d9fc:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
1000da00:	000dc380 	call	1000dc38 <__sfp_lock_release>
  d->_errno = ENOMEM;
1000da04:	e0bfff17 	ldw	r2,-4(fp)
1000da08:	00c00304 	movi	r3,12
1000da0c:	10c00015 	stw	r3,0(r2)
  return NULL;
1000da10:	0005883a 	mov	r2,zero
1000da14:	00002506 	br	1000daac <__sfp+0x198>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
1000da18:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
1000da1c:	e0bffc17 	ldw	r2,-16(fp)
1000da20:	00ffffc4 	movi	r3,-1
1000da24:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
1000da28:	e0bffc17 	ldw	r2,-16(fp)
1000da2c:	00c00044 	movi	r3,1
1000da30:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
1000da34:	e0bffc17 	ldw	r2,-16(fp)
1000da38:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
1000da3c:	000dc380 	call	1000dc38 <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
1000da40:	e0bffc17 	ldw	r2,-16(fp)
1000da44:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
1000da48:	e0bffc17 	ldw	r2,-16(fp)
1000da4c:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
1000da50:	e0bffc17 	ldw	r2,-16(fp)
1000da54:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
1000da58:	e0bffc17 	ldw	r2,-16(fp)
1000da5c:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
1000da60:	e0bffc17 	ldw	r2,-16(fp)
1000da64:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
1000da68:	e0bffc17 	ldw	r2,-16(fp)
1000da6c:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
1000da70:	e0bffc17 	ldw	r2,-16(fp)
1000da74:	10801704 	addi	r2,r2,92
1000da78:	01800204 	movi	r6,8
1000da7c:	000b883a 	mov	r5,zero
1000da80:	1009883a 	mov	r4,r2
1000da84:	0006f500 	call	10006f50 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
1000da88:	e0bffc17 	ldw	r2,-16(fp)
1000da8c:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
1000da90:	e0bffc17 	ldw	r2,-16(fp)
1000da94:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
1000da98:	e0bffc17 	ldw	r2,-16(fp)
1000da9c:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
1000daa0:	e0bffc17 	ldw	r2,-16(fp)
1000daa4:	10001215 	stw	zero,72(r2)

  return fp;
1000daa8:	e0bffc17 	ldw	r2,-16(fp)
}
1000daac:	e037883a 	mov	sp,fp
1000dab0:	dfc00117 	ldw	ra,4(sp)
1000dab4:	df000017 	ldw	fp,0(sp)
1000dab8:	dec00204 	addi	sp,sp,8
1000dabc:	f800283a 	ret

1000dac0 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
1000dac0:	defffc04 	addi	sp,sp,-16
1000dac4:	dfc00315 	stw	ra,12(sp)
1000dac8:	df000215 	stw	fp,8(sp)
1000dacc:	df000204 	addi	fp,sp,8
1000dad0:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
1000dad4:	00840074 	movhi	r2,4097
1000dad8:	108cd104 	addi	r2,r2,13124
1000dadc:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
1000dae0:	e17ffe17 	ldw	r5,-8(fp)
1000dae4:	e13fff17 	ldw	r4,-4(fp)
1000dae8:	000eb780 	call	1000eb78 <_fwalk_reent>
}
1000daec:	0001883a 	nop
1000daf0:	e037883a 	mov	sp,fp
1000daf4:	dfc00117 	ldw	ra,4(sp)
1000daf8:	df000017 	ldw	fp,0(sp)
1000dafc:	dec00204 	addi	sp,sp,8
1000db00:	f800283a 	ret

1000db04 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
1000db04:	defffe04 	addi	sp,sp,-8
1000db08:	dfc00115 	stw	ra,4(sp)
1000db0c:	df000015 	stw	fp,0(sp)
1000db10:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
1000db14:	008403b4 	movhi	r2,4110
1000db18:	10a44304 	addi	r2,r2,-28404
1000db1c:	10800017 	ldw	r2,0(r2)
1000db20:	1009883a 	mov	r4,r2
1000db24:	000dac00 	call	1000dac0 <_cleanup_r>
}
1000db28:	0001883a 	nop
1000db2c:	e037883a 	mov	sp,fp
1000db30:	dfc00117 	ldw	ra,4(sp)
1000db34:	df000017 	ldw	fp,0(sp)
1000db38:	dec00204 	addi	sp,sp,8
1000db3c:	f800283a 	ret

1000db40 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
1000db40:	defffd04 	addi	sp,sp,-12
1000db44:	dfc00215 	stw	ra,8(sp)
1000db48:	df000115 	stw	fp,4(sp)
1000db4c:	df000104 	addi	fp,sp,4
1000db50:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
1000db54:	000dc580 	call	1000dc58 <__sinit_lock_acquire>

  if (s->__sdidinit)
1000db58:	e0bfff17 	ldw	r2,-4(fp)
1000db5c:	10800e17 	ldw	r2,56(r2)
1000db60:	10000226 	beq	r2,zero,1000db6c <__sinit+0x2c>
    {
      __sinit_lock_release ();
1000db64:	000dc780 	call	1000dc78 <__sinit_lock_release>
      return;
1000db68:	00002606 	br	1000dc04 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
1000db6c:	e0ffff17 	ldw	r3,-4(fp)
1000db70:	00840074 	movhi	r2,4097
1000db74:	10b6b004 	addi	r2,r2,-9536
1000db78:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
1000db7c:	e0bfff17 	ldw	r2,-4(fp)
1000db80:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
1000db84:	e0bfff17 	ldw	r2,-4(fp)
1000db88:	00c000c4 	movi	r3,3
1000db8c:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
1000db90:	e0bfff17 	ldw	r2,-4(fp)
1000db94:	10c0bb04 	addi	r3,r2,748
1000db98:	e0bfff17 	ldw	r2,-4(fp)
1000db9c:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
1000dba0:	e0bfff17 	ldw	r2,-4(fp)
1000dba4:	10800117 	ldw	r2,4(r2)
1000dba8:	e1ffff17 	ldw	r7,-4(fp)
1000dbac:	000d883a 	mov	r6,zero
1000dbb0:	01400104 	movi	r5,4
1000dbb4:	1009883a 	mov	r4,r2
1000dbb8:	000d7640 	call	1000d764 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
1000dbbc:	e0bfff17 	ldw	r2,-4(fp)
1000dbc0:	10800217 	ldw	r2,8(r2)
1000dbc4:	e1ffff17 	ldw	r7,-4(fp)
1000dbc8:	01800044 	movi	r6,1
1000dbcc:	01400284 	movi	r5,10
1000dbd0:	1009883a 	mov	r4,r2
1000dbd4:	000d7640 	call	1000d764 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
1000dbd8:	e0bfff17 	ldw	r2,-4(fp)
1000dbdc:	10800317 	ldw	r2,12(r2)
1000dbe0:	e1ffff17 	ldw	r7,-4(fp)
1000dbe4:	01800084 	movi	r6,2
1000dbe8:	01400484 	movi	r5,18
1000dbec:	1009883a 	mov	r4,r2
1000dbf0:	000d7640 	call	1000d764 <std>

  s->__sdidinit = 1;
1000dbf4:	e0bfff17 	ldw	r2,-4(fp)
1000dbf8:	00c00044 	movi	r3,1
1000dbfc:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
1000dc00:	000dc780 	call	1000dc78 <__sinit_lock_release>
}
1000dc04:	e037883a 	mov	sp,fp
1000dc08:	dfc00117 	ldw	ra,4(sp)
1000dc0c:	df000017 	ldw	fp,0(sp)
1000dc10:	dec00204 	addi	sp,sp,8
1000dc14:	f800283a 	ret

1000dc18 <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
1000dc18:	deffff04 	addi	sp,sp,-4
1000dc1c:	df000015 	stw	fp,0(sp)
1000dc20:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
1000dc24:	0001883a 	nop
1000dc28:	e037883a 	mov	sp,fp
1000dc2c:	df000017 	ldw	fp,0(sp)
1000dc30:	dec00104 	addi	sp,sp,4
1000dc34:	f800283a 	ret

1000dc38 <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
1000dc38:	deffff04 	addi	sp,sp,-4
1000dc3c:	df000015 	stw	fp,0(sp)
1000dc40:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
1000dc44:	0001883a 	nop
1000dc48:	e037883a 	mov	sp,fp
1000dc4c:	df000017 	ldw	fp,0(sp)
1000dc50:	dec00104 	addi	sp,sp,4
1000dc54:	f800283a 	ret

1000dc58 <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
1000dc58:	deffff04 	addi	sp,sp,-4
1000dc5c:	df000015 	stw	fp,0(sp)
1000dc60:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
1000dc64:	0001883a 	nop
1000dc68:	e037883a 	mov	sp,fp
1000dc6c:	df000017 	ldw	fp,0(sp)
1000dc70:	dec00104 	addi	sp,sp,4
1000dc74:	f800283a 	ret

1000dc78 <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
1000dc78:	deffff04 	addi	sp,sp,-4
1000dc7c:	df000015 	stw	fp,0(sp)
1000dc80:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
1000dc84:	0001883a 	nop
1000dc88:	e037883a 	mov	sp,fp
1000dc8c:	df000017 	ldw	fp,0(sp)
1000dc90:	dec00104 	addi	sp,sp,4
1000dc94:	f800283a 	ret

1000dc98 <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
1000dc98:	defffe04 	addi	sp,sp,-8
1000dc9c:	df000115 	stw	fp,4(sp)
1000dca0:	df000104 	addi	fp,sp,4
1000dca4:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
1000dca8:	0005883a 	mov	r2,zero
}
1000dcac:	e037883a 	mov	sp,fp
1000dcb0:	df000017 	ldw	fp,0(sp)
1000dcb4:	dec00104 	addi	sp,sp,4
1000dcb8:	f800283a 	ret

1000dcbc <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
1000dcbc:	defffe04 	addi	sp,sp,-8
1000dcc0:	df000115 	stw	fp,4(sp)
1000dcc4:	df000104 	addi	fp,sp,4
1000dcc8:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
1000dccc:	0005883a 	mov	r2,zero
}
1000dcd0:	e037883a 	mov	sp,fp
1000dcd4:	df000017 	ldw	fp,0(sp)
1000dcd8:	dec00104 	addi	sp,sp,4
1000dcdc:	f800283a 	ret

1000dce0 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
1000dce0:	defffe04 	addi	sp,sp,-8
1000dce4:	dfc00115 	stw	ra,4(sp)
1000dce8:	df000015 	stw	fp,0(sp)
1000dcec:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
1000dcf0:	000dc180 	call	1000dc18 <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
1000dcf4:	008403b4 	movhi	r2,4110
1000dcf8:	10a44204 	addi	r2,r2,-28408
1000dcfc:	10800017 	ldw	r2,0(r2)
1000dd00:	01440074 	movhi	r5,4097
1000dd04:	29772604 	addi	r5,r5,-9064
1000dd08:	1009883a 	mov	r4,r2
1000dd0c:	000eaa00 	call	1000eaa0 <_fwalk>
}
1000dd10:	0001883a 	nop
1000dd14:	e037883a 	mov	sp,fp
1000dd18:	dfc00117 	ldw	ra,4(sp)
1000dd1c:	df000017 	ldw	fp,0(sp)
1000dd20:	dec00204 	addi	sp,sp,8
1000dd24:	f800283a 	ret

1000dd28 <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
1000dd28:	defffe04 	addi	sp,sp,-8
1000dd2c:	dfc00115 	stw	ra,4(sp)
1000dd30:	df000015 	stw	fp,0(sp)
1000dd34:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
1000dd38:	008403b4 	movhi	r2,4110
1000dd3c:	10a44204 	addi	r2,r2,-28408
1000dd40:	10800017 	ldw	r2,0(r2)
1000dd44:	01440074 	movhi	r5,4097
1000dd48:	29772f04 	addi	r5,r5,-9028
1000dd4c:	1009883a 	mov	r4,r2
1000dd50:	000eaa00 	call	1000eaa0 <_fwalk>

  __sfp_lock_release ();
1000dd54:	000dc380 	call	1000dc38 <__sfp_lock_release>
}
1000dd58:	0001883a 	nop
1000dd5c:	e037883a 	mov	sp,fp
1000dd60:	dfc00117 	ldw	ra,4(sp)
1000dd64:	df000017 	ldw	fp,0(sp)
1000dd68:	dec00204 	addi	sp,sp,8
1000dd6c:	f800283a 	ret

1000dd70 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
1000dd70:	defff204 	addi	sp,sp,-56
1000dd74:	dfc00d15 	stw	ra,52(sp)
1000dd78:	df000c15 	stw	fp,48(sp)
1000dd7c:	df000c04 	addi	fp,sp,48
1000dd80:	e13ffe15 	stw	r4,-8(fp)
1000dd84:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
1000dd88:	e0bfff17 	ldw	r2,-4(fp)
1000dd8c:	10014e26 	beq	r2,zero,1000e2c8 <_free_r+0x558>
    return;

  MALLOC_LOCK;
1000dd90:	e13ffe17 	ldw	r4,-8(fp)
1000dd94:	0015d3c0 	call	10015d3c <__malloc_lock>

  p = mem2chunk(mem);
1000dd98:	e0bfff17 	ldw	r2,-4(fp)
1000dd9c:	10bffe04 	addi	r2,r2,-8
1000dda0:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
1000dda4:	e0bff417 	ldw	r2,-48(fp)
1000dda8:	10800117 	ldw	r2,4(r2)
1000ddac:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
1000ddb0:	e0fff917 	ldw	r3,-28(fp)
1000ddb4:	00bfff84 	movi	r2,-2
1000ddb8:	1884703a 	and	r2,r3,r2
1000ddbc:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
1000ddc0:	e0fff417 	ldw	r3,-48(fp)
1000ddc4:	e0bff517 	ldw	r2,-44(fp)
1000ddc8:	1885883a 	add	r2,r3,r2
1000ddcc:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
1000ddd0:	e0bffa17 	ldw	r2,-24(fp)
1000ddd4:	10c00117 	ldw	r3,4(r2)
1000ddd8:	00bfff04 	movi	r2,-4
1000dddc:	1884703a 	and	r2,r3,r2
1000dde0:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
1000dde4:	00840374 	movhi	r2,4109
1000dde8:	109e9004 	addi	r2,r2,31296
1000ddec:	10c00217 	ldw	r3,8(r2)
1000ddf0:	e0bffa17 	ldw	r2,-24(fp)
1000ddf4:	1880351e 	bne	r3,r2,1000decc <_free_r+0x15c>
  {
    sz += nextsz;
1000ddf8:	e0fff517 	ldw	r3,-44(fp)
1000ddfc:	e0bffb17 	ldw	r2,-20(fp)
1000de00:	1885883a 	add	r2,r3,r2
1000de04:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
1000de08:	e0bff917 	ldw	r2,-28(fp)
1000de0c:	1080004c 	andi	r2,r2,1
1000de10:	1000181e 	bne	r2,zero,1000de74 <_free_r+0x104>
    {
      prevsz = p->prev_size;
1000de14:	e0bff417 	ldw	r2,-48(fp)
1000de18:	10800017 	ldw	r2,0(r2)
1000de1c:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
1000de20:	e0bffc17 	ldw	r2,-16(fp)
1000de24:	0085c83a 	sub	r2,zero,r2
1000de28:	e0fff417 	ldw	r3,-48(fp)
1000de2c:	1885883a 	add	r2,r3,r2
1000de30:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
1000de34:	e0fff517 	ldw	r3,-44(fp)
1000de38:	e0bffc17 	ldw	r2,-16(fp)
1000de3c:	1885883a 	add	r2,r3,r2
1000de40:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
1000de44:	e0bff417 	ldw	r2,-48(fp)
1000de48:	10800317 	ldw	r2,12(r2)
1000de4c:	e0bff615 	stw	r2,-40(fp)
1000de50:	e0bff417 	ldw	r2,-48(fp)
1000de54:	10800217 	ldw	r2,8(r2)
1000de58:	e0bff715 	stw	r2,-36(fp)
1000de5c:	e0bff717 	ldw	r2,-36(fp)
1000de60:	e0fff617 	ldw	r3,-40(fp)
1000de64:	10c00315 	stw	r3,12(r2)
1000de68:	e0bff617 	ldw	r2,-40(fp)
1000de6c:	e0fff717 	ldw	r3,-36(fp)
1000de70:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
1000de74:	e0bff517 	ldw	r2,-44(fp)
1000de78:	10c00054 	ori	r3,r2,1
1000de7c:	e0bff417 	ldw	r2,-48(fp)
1000de80:	10c00115 	stw	r3,4(r2)
    top = p;
1000de84:	00840374 	movhi	r2,4109
1000de88:	109e9004 	addi	r2,r2,31296
1000de8c:	e0fff417 	ldw	r3,-48(fp)
1000de90:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
1000de94:	008403b4 	movhi	r2,4110
1000de98:	10a44404 	addi	r2,r2,-28400
1000de9c:	10800017 	ldw	r2,0(r2)
1000dea0:	e0fff517 	ldw	r3,-44(fp)
1000dea4:	18800636 	bltu	r3,r2,1000dec0 <_free_r+0x150>
      malloc_trim(RCALL top_pad); 
1000dea8:	008403b4 	movhi	r2,4110
1000deac:	108a9604 	addi	r2,r2,10840
1000deb0:	10800017 	ldw	r2,0(r2)
1000deb4:	100b883a 	mov	r5,r2
1000deb8:	e13ffe17 	ldw	r4,-8(fp)
1000debc:	000e2e00 	call	1000e2e0 <_malloc_trim_r>
    MALLOC_UNLOCK;
1000dec0:	e13ffe17 	ldw	r4,-8(fp)
1000dec4:	0015d600 	call	10015d60 <__malloc_unlock>
    return;
1000dec8:	00010006 	br	1000e2cc <_free_r+0x55c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
1000decc:	e0bffa17 	ldw	r2,-24(fp)
1000ded0:	e0fffb17 	ldw	r3,-20(fp)
1000ded4:	10c00115 	stw	r3,4(r2)

  islr = 0;
1000ded8:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
1000dedc:	e0bff917 	ldw	r2,-28(fp)
1000dee0:	1080004c 	andi	r2,r2,1
1000dee4:	1000201e 	bne	r2,zero,1000df68 <_free_r+0x1f8>
  {
    prevsz = p->prev_size;
1000dee8:	e0bff417 	ldw	r2,-48(fp)
1000deec:	10800017 	ldw	r2,0(r2)
1000def0:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
1000def4:	e0bffc17 	ldw	r2,-16(fp)
1000def8:	0085c83a 	sub	r2,zero,r2
1000defc:	e0fff417 	ldw	r3,-48(fp)
1000df00:	1885883a 	add	r2,r3,r2
1000df04:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
1000df08:	e0fff517 	ldw	r3,-44(fp)
1000df0c:	e0bffc17 	ldw	r2,-16(fp)
1000df10:	1885883a 	add	r2,r3,r2
1000df14:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
1000df18:	e0bff417 	ldw	r2,-48(fp)
1000df1c:	10c00217 	ldw	r3,8(r2)
1000df20:	00840374 	movhi	r2,4109
1000df24:	109e9204 	addi	r2,r2,31304
1000df28:	1880031e 	bne	r3,r2,1000df38 <_free_r+0x1c8>
      islr = 1;
1000df2c:	00800044 	movi	r2,1
1000df30:	e0bff815 	stw	r2,-32(fp)
1000df34:	00000c06 	br	1000df68 <_free_r+0x1f8>
    else
      unlink(p, bck, fwd);
1000df38:	e0bff417 	ldw	r2,-48(fp)
1000df3c:	10800317 	ldw	r2,12(r2)
1000df40:	e0bff615 	stw	r2,-40(fp)
1000df44:	e0bff417 	ldw	r2,-48(fp)
1000df48:	10800217 	ldw	r2,8(r2)
1000df4c:	e0bff715 	stw	r2,-36(fp)
1000df50:	e0bff717 	ldw	r2,-36(fp)
1000df54:	e0fff617 	ldw	r3,-40(fp)
1000df58:	10c00315 	stw	r3,12(r2)
1000df5c:	e0bff617 	ldw	r2,-40(fp)
1000df60:	e0fff717 	ldw	r3,-36(fp)
1000df64:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
1000df68:	e0fffa17 	ldw	r3,-24(fp)
1000df6c:	e0bffb17 	ldw	r2,-20(fp)
1000df70:	1885883a 	add	r2,r3,r2
1000df74:	10800117 	ldw	r2,4(r2)
1000df78:	1080004c 	andi	r2,r2,1
1000df7c:	10002a1e 	bne	r2,zero,1000e028 <_free_r+0x2b8>
  {
    sz += nextsz;
1000df80:	e0fff517 	ldw	r3,-44(fp)
1000df84:	e0bffb17 	ldw	r2,-20(fp)
1000df88:	1885883a 	add	r2,r3,r2
1000df8c:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
1000df90:	e0bff817 	ldw	r2,-32(fp)
1000df94:	1000181e 	bne	r2,zero,1000dff8 <_free_r+0x288>
1000df98:	e0bffa17 	ldw	r2,-24(fp)
1000df9c:	10c00217 	ldw	r3,8(r2)
1000dfa0:	00840374 	movhi	r2,4109
1000dfa4:	109e9204 	addi	r2,r2,31304
1000dfa8:	1880131e 	bne	r3,r2,1000dff8 <_free_r+0x288>
    {
      islr = 1;
1000dfac:	00800044 	movi	r2,1
1000dfb0:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
1000dfb4:	00c40374 	movhi	r3,4109
1000dfb8:	18de9204 	addi	r3,r3,31304
1000dfbc:	00840374 	movhi	r2,4109
1000dfc0:	109e9204 	addi	r2,r2,31304
1000dfc4:	e13ff417 	ldw	r4,-48(fp)
1000dfc8:	11000315 	stw	r4,12(r2)
1000dfcc:	10800317 	ldw	r2,12(r2)
1000dfd0:	18800215 	stw	r2,8(r3)
1000dfd4:	00840374 	movhi	r2,4109
1000dfd8:	109e9204 	addi	r2,r2,31304
1000dfdc:	e0fff417 	ldw	r3,-48(fp)
1000dfe0:	18800315 	stw	r2,12(r3)
1000dfe4:	e0bff417 	ldw	r2,-48(fp)
1000dfe8:	10c00317 	ldw	r3,12(r2)
1000dfec:	e0bff417 	ldw	r2,-48(fp)
1000dff0:	10c00215 	stw	r3,8(r2)
1000dff4:	00000c06 	br	1000e028 <_free_r+0x2b8>
    }
    else
      unlink(next, bck, fwd);
1000dff8:	e0bffa17 	ldw	r2,-24(fp)
1000dffc:	10800317 	ldw	r2,12(r2)
1000e000:	e0bff615 	stw	r2,-40(fp)
1000e004:	e0bffa17 	ldw	r2,-24(fp)
1000e008:	10800217 	ldw	r2,8(r2)
1000e00c:	e0bff715 	stw	r2,-36(fp)
1000e010:	e0bff717 	ldw	r2,-36(fp)
1000e014:	e0fff617 	ldw	r3,-40(fp)
1000e018:	10c00315 	stw	r3,12(r2)
1000e01c:	e0bff617 	ldw	r2,-40(fp)
1000e020:	e0fff717 	ldw	r3,-36(fp)
1000e024:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
1000e028:	e0bff517 	ldw	r2,-44(fp)
1000e02c:	10c00054 	ori	r3,r2,1
1000e030:	e0bff417 	ldw	r2,-48(fp)
1000e034:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
1000e038:	e0fff417 	ldw	r3,-48(fp)
1000e03c:	e0bff517 	ldw	r2,-44(fp)
1000e040:	1885883a 	add	r2,r3,r2
1000e044:	e0fff517 	ldw	r3,-44(fp)
1000e048:	10c00015 	stw	r3,0(r2)
  if (!islr)
1000e04c:	e0bff817 	ldw	r2,-32(fp)
1000e050:	10009a1e 	bne	r2,zero,1000e2bc <_free_r+0x54c>
    frontlink(p, sz, idx, bck, fwd);  
1000e054:	e0bff517 	ldw	r2,-44(fp)
1000e058:	10808028 	cmpgeui	r2,r2,512
1000e05c:	10002c1e 	bne	r2,zero,1000e110 <_free_r+0x3a0>
1000e060:	e0bff517 	ldw	r2,-44(fp)
1000e064:	1004d0fa 	srli	r2,r2,3
1000e068:	e0bffd15 	stw	r2,-12(fp)
1000e06c:	00c40374 	movhi	r3,4109
1000e070:	18de9004 	addi	r3,r3,31296
1000e074:	00840374 	movhi	r2,4109
1000e078:	109e9004 	addi	r2,r2,31296
1000e07c:	11000117 	ldw	r4,4(r2)
1000e080:	e0bffd17 	ldw	r2,-12(fp)
1000e084:	1000010e 	bge	r2,zero,1000e08c <_free_r+0x31c>
1000e088:	108000c4 	addi	r2,r2,3
1000e08c:	1005d0ba 	srai	r2,r2,2
1000e090:	100b883a 	mov	r5,r2
1000e094:	00800044 	movi	r2,1
1000e098:	1144983a 	sll	r2,r2,r5
1000e09c:	2084b03a 	or	r2,r4,r2
1000e0a0:	18800115 	stw	r2,4(r3)
1000e0a4:	e0bffd17 	ldw	r2,-12(fp)
1000e0a8:	10800044 	addi	r2,r2,1
1000e0ac:	1085883a 	add	r2,r2,r2
1000e0b0:	1085883a 	add	r2,r2,r2
1000e0b4:	1087883a 	add	r3,r2,r2
1000e0b8:	00840374 	movhi	r2,4109
1000e0bc:	109e9004 	addi	r2,r2,31296
1000e0c0:	1885883a 	add	r2,r3,r2
1000e0c4:	10bffe04 	addi	r2,r2,-8
1000e0c8:	e0bff615 	stw	r2,-40(fp)
1000e0cc:	e0bff617 	ldw	r2,-40(fp)
1000e0d0:	10800217 	ldw	r2,8(r2)
1000e0d4:	e0bff715 	stw	r2,-36(fp)
1000e0d8:	e0bff417 	ldw	r2,-48(fp)
1000e0dc:	e0fff617 	ldw	r3,-40(fp)
1000e0e0:	10c00315 	stw	r3,12(r2)
1000e0e4:	e0bff417 	ldw	r2,-48(fp)
1000e0e8:	e0fff717 	ldw	r3,-36(fp)
1000e0ec:	10c00215 	stw	r3,8(r2)
1000e0f0:	e0bff617 	ldw	r2,-40(fp)
1000e0f4:	e0fff417 	ldw	r3,-48(fp)
1000e0f8:	10c00215 	stw	r3,8(r2)
1000e0fc:	e0bff617 	ldw	r2,-40(fp)
1000e100:	10c00217 	ldw	r3,8(r2)
1000e104:	e0bff717 	ldw	r2,-36(fp)
1000e108:	10c00315 	stw	r3,12(r2)
1000e10c:	00006b06 	br	1000e2bc <_free_r+0x54c>
1000e110:	e0bff517 	ldw	r2,-44(fp)
1000e114:	1004d27a 	srli	r2,r2,9
1000e118:	1000031e 	bne	r2,zero,1000e128 <_free_r+0x3b8>
1000e11c:	e0bff517 	ldw	r2,-44(fp)
1000e120:	1004d0fa 	srli	r2,r2,3
1000e124:	00002906 	br	1000e1cc <_free_r+0x45c>
1000e128:	e0bff517 	ldw	r2,-44(fp)
1000e12c:	1004d27a 	srli	r2,r2,9
1000e130:	10800168 	cmpgeui	r2,r2,5
1000e134:	1000041e 	bne	r2,zero,1000e148 <_free_r+0x3d8>
1000e138:	e0bff517 	ldw	r2,-44(fp)
1000e13c:	1004d1ba 	srli	r2,r2,6
1000e140:	10800e04 	addi	r2,r2,56
1000e144:	00002106 	br	1000e1cc <_free_r+0x45c>
1000e148:	e0bff517 	ldw	r2,-44(fp)
1000e14c:	1004d27a 	srli	r2,r2,9
1000e150:	10800568 	cmpgeui	r2,r2,21
1000e154:	1000041e 	bne	r2,zero,1000e168 <_free_r+0x3f8>
1000e158:	e0bff517 	ldw	r2,-44(fp)
1000e15c:	1004d27a 	srli	r2,r2,9
1000e160:	108016c4 	addi	r2,r2,91
1000e164:	00001906 	br	1000e1cc <_free_r+0x45c>
1000e168:	e0bff517 	ldw	r2,-44(fp)
1000e16c:	1004d27a 	srli	r2,r2,9
1000e170:	10801568 	cmpgeui	r2,r2,85
1000e174:	1000041e 	bne	r2,zero,1000e188 <_free_r+0x418>
1000e178:	e0bff517 	ldw	r2,-44(fp)
1000e17c:	1004d33a 	srli	r2,r2,12
1000e180:	10801b84 	addi	r2,r2,110
1000e184:	00001106 	br	1000e1cc <_free_r+0x45c>
1000e188:	e0bff517 	ldw	r2,-44(fp)
1000e18c:	1004d27a 	srli	r2,r2,9
1000e190:	10805568 	cmpgeui	r2,r2,341
1000e194:	1000041e 	bne	r2,zero,1000e1a8 <_free_r+0x438>
1000e198:	e0bff517 	ldw	r2,-44(fp)
1000e19c:	1004d3fa 	srli	r2,r2,15
1000e1a0:	10801dc4 	addi	r2,r2,119
1000e1a4:	00000906 	br	1000e1cc <_free_r+0x45c>
1000e1a8:	e0bff517 	ldw	r2,-44(fp)
1000e1ac:	1004d27a 	srli	r2,r2,9
1000e1b0:	10815568 	cmpgeui	r2,r2,1365
1000e1b4:	1000041e 	bne	r2,zero,1000e1c8 <_free_r+0x458>
1000e1b8:	e0bff517 	ldw	r2,-44(fp)
1000e1bc:	1004d4ba 	srli	r2,r2,18
1000e1c0:	10801f04 	addi	r2,r2,124
1000e1c4:	00000106 	br	1000e1cc <_free_r+0x45c>
1000e1c8:	00801f84 	movi	r2,126
1000e1cc:	e0bffd15 	stw	r2,-12(fp)
1000e1d0:	e0bffd17 	ldw	r2,-12(fp)
1000e1d4:	10800044 	addi	r2,r2,1
1000e1d8:	1085883a 	add	r2,r2,r2
1000e1dc:	1085883a 	add	r2,r2,r2
1000e1e0:	1087883a 	add	r3,r2,r2
1000e1e4:	00840374 	movhi	r2,4109
1000e1e8:	109e9004 	addi	r2,r2,31296
1000e1ec:	1885883a 	add	r2,r3,r2
1000e1f0:	10bffe04 	addi	r2,r2,-8
1000e1f4:	e0bff615 	stw	r2,-40(fp)
1000e1f8:	e0bff617 	ldw	r2,-40(fp)
1000e1fc:	10800217 	ldw	r2,8(r2)
1000e200:	e0bff715 	stw	r2,-36(fp)
1000e204:	e0fff717 	ldw	r3,-36(fp)
1000e208:	e0bff617 	ldw	r2,-40(fp)
1000e20c:	1880121e 	bne	r3,r2,1000e258 <_free_r+0x4e8>
1000e210:	00c40374 	movhi	r3,4109
1000e214:	18de9004 	addi	r3,r3,31296
1000e218:	00840374 	movhi	r2,4109
1000e21c:	109e9004 	addi	r2,r2,31296
1000e220:	11000117 	ldw	r4,4(r2)
1000e224:	e0bffd17 	ldw	r2,-12(fp)
1000e228:	1000010e 	bge	r2,zero,1000e230 <_free_r+0x4c0>
1000e22c:	108000c4 	addi	r2,r2,3
1000e230:	1005d0ba 	srai	r2,r2,2
1000e234:	100b883a 	mov	r5,r2
1000e238:	00800044 	movi	r2,1
1000e23c:	1144983a 	sll	r2,r2,r5
1000e240:	2084b03a 	or	r2,r4,r2
1000e244:	18800115 	stw	r2,4(r3)
1000e248:	00000f06 	br	1000e288 <_free_r+0x518>
1000e24c:	e0bff717 	ldw	r2,-36(fp)
1000e250:	10800217 	ldw	r2,8(r2)
1000e254:	e0bff715 	stw	r2,-36(fp)
1000e258:	e0fff717 	ldw	r3,-36(fp)
1000e25c:	e0bff617 	ldw	r2,-40(fp)
1000e260:	18800626 	beq	r3,r2,1000e27c <_free_r+0x50c>
1000e264:	e0bff717 	ldw	r2,-36(fp)
1000e268:	10c00117 	ldw	r3,4(r2)
1000e26c:	00bfff04 	movi	r2,-4
1000e270:	1884703a 	and	r2,r3,r2
1000e274:	e0fff517 	ldw	r3,-44(fp)
1000e278:	18bff436 	bltu	r3,r2,1000e24c <__alt_data_end+0xf800e24c>
1000e27c:	e0bff717 	ldw	r2,-36(fp)
1000e280:	10800317 	ldw	r2,12(r2)
1000e284:	e0bff615 	stw	r2,-40(fp)
1000e288:	e0bff417 	ldw	r2,-48(fp)
1000e28c:	e0fff617 	ldw	r3,-40(fp)
1000e290:	10c00315 	stw	r3,12(r2)
1000e294:	e0bff417 	ldw	r2,-48(fp)
1000e298:	e0fff717 	ldw	r3,-36(fp)
1000e29c:	10c00215 	stw	r3,8(r2)
1000e2a0:	e0bff617 	ldw	r2,-40(fp)
1000e2a4:	e0fff417 	ldw	r3,-48(fp)
1000e2a8:	10c00215 	stw	r3,8(r2)
1000e2ac:	e0bff617 	ldw	r2,-40(fp)
1000e2b0:	10c00217 	ldw	r3,8(r2)
1000e2b4:	e0bff717 	ldw	r2,-36(fp)
1000e2b8:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
1000e2bc:	e13ffe17 	ldw	r4,-8(fp)
1000e2c0:	0015d600 	call	10015d60 <__malloc_unlock>
1000e2c4:	00000106 	br	1000e2cc <_free_r+0x55c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
1000e2c8:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
1000e2cc:	e037883a 	mov	sp,fp
1000e2d0:	dfc00117 	ldw	ra,4(sp)
1000e2d4:	df000017 	ldw	fp,0(sp)
1000e2d8:	dec00204 	addi	sp,sp,8
1000e2dc:	f800283a 	ret

1000e2e0 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
1000e2e0:	defff704 	addi	sp,sp,-36
1000e2e4:	dfc00815 	stw	ra,32(sp)
1000e2e8:	df000715 	stw	fp,28(sp)
1000e2ec:	df000704 	addi	fp,sp,28
1000e2f0:	e13ffe15 	stw	r4,-8(fp)
1000e2f4:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
1000e2f8:	00840004 	movi	r2,4096
1000e2fc:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
1000e300:	e13ffe17 	ldw	r4,-8(fp)
1000e304:	0015d3c0 	call	10015d3c <__malloc_lock>

  top_size = chunksize(top);
1000e308:	00840374 	movhi	r2,4109
1000e30c:	109e9004 	addi	r2,r2,31296
1000e310:	10800217 	ldw	r2,8(r2)
1000e314:	10800117 	ldw	r2,4(r2)
1000e318:	1007883a 	mov	r3,r2
1000e31c:	00bfff04 	movi	r2,-4
1000e320:	1884703a 	and	r2,r3,r2
1000e324:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
1000e328:	e0fffa17 	ldw	r3,-24(fp)
1000e32c:	e0bfff17 	ldw	r2,-4(fp)
1000e330:	1887c83a 	sub	r3,r3,r2
1000e334:	e0bff917 	ldw	r2,-28(fp)
1000e338:	1885883a 	add	r2,r3,r2
1000e33c:	10bffbc4 	addi	r2,r2,-17
1000e340:	e17ff917 	ldw	r5,-28(fp)
1000e344:	1009883a 	mov	r4,r2
1000e348:	000245c0 	call	1000245c <__udivsi3>
1000e34c:	10bfffc4 	addi	r2,r2,-1
1000e350:	e17ff917 	ldw	r5,-28(fp)
1000e354:	1009883a 	mov	r4,r2
1000e358:	00059d40 	call	100059d4 <__mulsi3>
1000e35c:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
1000e360:	e0bff917 	ldw	r2,-28(fp)
1000e364:	e0fffb17 	ldw	r3,-20(fp)
1000e368:	1880040e 	bge	r3,r2,1000e37c <_malloc_trim_r+0x9c>
  {
    MALLOC_UNLOCK;
1000e36c:	e13ffe17 	ldw	r4,-8(fp)
1000e370:	0015d600 	call	10015d60 <__malloc_unlock>
    return 0;
1000e374:	0005883a 	mov	r2,zero
1000e378:	00004a06 	br	1000e4a4 <_malloc_trim_r+0x1c4>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
1000e37c:	000b883a 	mov	r5,zero
1000e380:	e13ffe17 	ldw	r4,-8(fp)
1000e384:	00087100 	call	10008710 <_sbrk_r>
1000e388:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
1000e38c:	00840374 	movhi	r2,4109
1000e390:	109e9004 	addi	r2,r2,31296
1000e394:	10c00217 	ldw	r3,8(r2)
1000e398:	e0bffa17 	ldw	r2,-24(fp)
1000e39c:	1887883a 	add	r3,r3,r2
1000e3a0:	e0bffc17 	ldw	r2,-16(fp)
1000e3a4:	18800426 	beq	r3,r2,1000e3b8 <_malloc_trim_r+0xd8>
    {
      MALLOC_UNLOCK;
1000e3a8:	e13ffe17 	ldw	r4,-8(fp)
1000e3ac:	0015d600 	call	10015d60 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
1000e3b0:	0005883a 	mov	r2,zero
1000e3b4:	00003b06 	br	1000e4a4 <_malloc_trim_r+0x1c4>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
1000e3b8:	e0bffb17 	ldw	r2,-20(fp)
1000e3bc:	0085c83a 	sub	r2,zero,r2
1000e3c0:	100b883a 	mov	r5,r2
1000e3c4:	e13ffe17 	ldw	r4,-8(fp)
1000e3c8:	00087100 	call	10008710 <_sbrk_r>
1000e3cc:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
1000e3d0:	e0bffd17 	ldw	r2,-12(fp)
1000e3d4:	10bfffd8 	cmpnei	r2,r2,-1
1000e3d8:	10001f1e 	bne	r2,zero,1000e458 <_malloc_trim_r+0x178>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
1000e3dc:	000b883a 	mov	r5,zero
1000e3e0:	e13ffe17 	ldw	r4,-8(fp)
1000e3e4:	00087100 	call	10008710 <_sbrk_r>
1000e3e8:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
1000e3ec:	e0fffc17 	ldw	r3,-16(fp)
1000e3f0:	00840374 	movhi	r2,4109
1000e3f4:	109e9004 	addi	r2,r2,31296
1000e3f8:	10800217 	ldw	r2,8(r2)
1000e3fc:	1885c83a 	sub	r2,r3,r2
1000e400:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
1000e404:	e0bffa17 	ldw	r2,-24(fp)
1000e408:	10800410 	cmplti	r2,r2,16
1000e40c:	10000e1e 	bne	r2,zero,1000e448 <_malloc_trim_r+0x168>
        {
          sbrked_mem = current_brk - sbrk_base;
1000e410:	e0fffc17 	ldw	r3,-16(fp)
1000e414:	008403b4 	movhi	r2,4110
1000e418:	10a44504 	addi	r2,r2,-28396
1000e41c:	10800017 	ldw	r2,0(r2)
1000e420:	1887c83a 	sub	r3,r3,r2
1000e424:	008403b4 	movhi	r2,4110
1000e428:	108aac04 	addi	r2,r2,10928
1000e42c:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
1000e430:	00840374 	movhi	r2,4109
1000e434:	109e9004 	addi	r2,r2,31296
1000e438:	10800217 	ldw	r2,8(r2)
1000e43c:	e0fffa17 	ldw	r3,-24(fp)
1000e440:	18c00054 	ori	r3,r3,1
1000e444:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
1000e448:	e13ffe17 	ldw	r4,-8(fp)
1000e44c:	0015d600 	call	10015d60 <__malloc_unlock>
        return 0; 
1000e450:	0005883a 	mov	r2,zero
1000e454:	00001306 	br	1000e4a4 <_malloc_trim_r+0x1c4>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
1000e458:	00840374 	movhi	r2,4109
1000e45c:	109e9004 	addi	r2,r2,31296
1000e460:	10800217 	ldw	r2,8(r2)
1000e464:	e13ffa17 	ldw	r4,-24(fp)
1000e468:	e0fffb17 	ldw	r3,-20(fp)
1000e46c:	20c7c83a 	sub	r3,r4,r3
1000e470:	18c00054 	ori	r3,r3,1
1000e474:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
1000e478:	008403b4 	movhi	r2,4110
1000e47c:	108aac04 	addi	r2,r2,10928
1000e480:	10c00017 	ldw	r3,0(r2)
1000e484:	e0bffb17 	ldw	r2,-20(fp)
1000e488:	1887c83a 	sub	r3,r3,r2
1000e48c:	008403b4 	movhi	r2,4110
1000e490:	108aac04 	addi	r2,r2,10928
1000e494:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
1000e498:	e13ffe17 	ldw	r4,-8(fp)
1000e49c:	0015d600 	call	10015d60 <__malloc_unlock>
        return 1;
1000e4a0:	00800044 	movi	r2,1
      }
    }
  }
}
1000e4a4:	e037883a 	mov	sp,fp
1000e4a8:	dfc00117 	ldw	ra,4(sp)
1000e4ac:	df000017 	ldw	fp,0(sp)
1000e4b0:	dec00204 	addi	sp,sp,8
1000e4b4:	f800283a 	ret

1000e4b8 <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
1000e4b8:	defff004 	addi	sp,sp,-64
1000e4bc:	dfc00f15 	stw	ra,60(sp)
1000e4c0:	df000e15 	stw	fp,56(sp)
1000e4c4:	dd800d15 	stw	r22,52(sp)
1000e4c8:	dd400c15 	stw	r21,48(sp)
1000e4cc:	dd000b15 	stw	r20,44(sp)
1000e4d0:	dcc00a15 	stw	r19,40(sp)
1000e4d4:	dc800915 	stw	r18,36(sp)
1000e4d8:	dc400815 	stw	r17,32(sp)
1000e4dc:	dc000715 	stw	r16,28(sp)
1000e4e0:	df000e04 	addi	fp,sp,56
1000e4e4:	e13ff815 	stw	r4,-32(fp)
1000e4e8:	2821883a 	mov	r16,r5
1000e4ec:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
1000e4f0:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
1000e4f4:	ac400217 	ldw	r17,8(r21)
1000e4f8:	8800021e 	bne	r17,zero,1000e504 <__sfvwrite_r+0x4c>
    return 0;
1000e4fc:	0005883a 	mov	r2,zero
1000e500:	00015b06 	br	1000ea70 <__sfvwrite_r+0x5b8>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
1000e504:	8080030b 	ldhu	r2,12(r16)
1000e508:	10bfffcc 	andi	r2,r2,65535
1000e50c:	1080020c 	andi	r2,r2,8
1000e510:	10000226 	beq	r2,zero,1000e51c <__sfvwrite_r+0x64>
1000e514:	80800417 	ldw	r2,16(r16)
1000e518:	1000061e 	bne	r2,zero,1000e534 <__sfvwrite_r+0x7c>
1000e51c:	800b883a 	mov	r5,r16
1000e520:	e13ff817 	ldw	r4,-32(fp)
1000e524:	000b2680 	call	1000b268 <__swsetup_r>
1000e528:	10000226 	beq	r2,zero,1000e534 <__sfvwrite_r+0x7c>
    return EOF;
1000e52c:	00bfffc4 	movi	r2,-1
1000e530:	00014f06 	br	1000ea70 <__sfvwrite_r+0x5b8>

  iov = uio->uio_iov;
1000e534:	ad000017 	ldw	r20,0(r21)
  len = 0;
1000e538:	0023883a 	mov	r17,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
1000e53c:	8080030b 	ldhu	r2,12(r16)
1000e540:	10bfffcc 	andi	r2,r2,65535
1000e544:	1080008c 	andi	r2,r2,2
1000e548:	10001f26 	beq	r2,zero,1000e5c8 <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
1000e54c:	00000306 	br	1000e55c <__sfvwrite_r+0xa4>
1000e550:	a4c00017 	ldw	r19,0(r20)
1000e554:	a4400117 	ldw	r17,4(r20)
1000e558:	a5000204 	addi	r20,r20,8
1000e55c:	883ffc26 	beq	r17,zero,1000e550 <__alt_data_end+0xf800e550>
	  w = fp->_write (ptr, fp->_cookie, p,
1000e560:	82000917 	ldw	r8,36(r16)
1000e564:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
1000e568:	8805883a 	mov	r2,r17
1000e56c:	00e00034 	movhi	r3,32768
1000e570:	18ff0004 	addi	r3,r3,-1024
1000e574:	1880022e 	bgeu	r3,r2,1000e580 <__sfvwrite_r+0xc8>
1000e578:	00a00034 	movhi	r2,32768
1000e57c:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
1000e580:	100f883a 	mov	r7,r2
1000e584:	980d883a 	mov	r6,r19
1000e588:	200b883a 	mov	r5,r4
1000e58c:	e13ff817 	ldw	r4,-32(fp)
1000e590:	403ee83a 	callr	r8
1000e594:	1025883a 	mov	r18,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
1000e598:	04812c0e 	bge	zero,r18,1000ea4c <__sfvwrite_r+0x594>
	    goto err;
	  p += w;
1000e59c:	9005883a 	mov	r2,r18
1000e5a0:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000e5a4:	9005883a 	mov	r2,r18
1000e5a8:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000e5ac:	a8800217 	ldw	r2,8(r21)
1000e5b0:	9007883a 	mov	r3,r18
1000e5b4:	10c5c83a 	sub	r2,r2,r3
1000e5b8:	a8800215 	stw	r2,8(r21)
1000e5bc:	a8800217 	ldw	r2,8(r21)
1000e5c0:	103fe61e 	bne	r2,zero,1000e55c <__alt_data_end+0xf800e55c>
1000e5c4:	00011f06 	br	1000ea44 <__sfvwrite_r+0x58c>
    }
  else if ((fp->_flags & __SLBF) == 0)
1000e5c8:	8080030b 	ldhu	r2,12(r16)
1000e5cc:	10bfffcc 	andi	r2,r2,65535
1000e5d0:	1080004c 	andi	r2,r2,1
1000e5d4:	1000b81e 	bne	r2,zero,1000e8b8 <__sfvwrite_r+0x400>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
1000e5d8:	00000306 	br	1000e5e8 <__sfvwrite_r+0x130>
1000e5dc:	a4c00017 	ldw	r19,0(r20)
1000e5e0:	a4400117 	ldw	r17,4(r20)
1000e5e4:	a5000204 	addi	r20,r20,8
1000e5e8:	883ffc26 	beq	r17,zero,1000e5dc <__alt_data_end+0xf800e5dc>
	  w = fp->_w;
1000e5ec:	84800217 	ldw	r18,8(r16)
	  if (fp->_flags & __SSTR)
1000e5f0:	8080030b 	ldhu	r2,12(r16)
1000e5f4:	10bfffcc 	andi	r2,r2,65535
1000e5f8:	1080800c 	andi	r2,r2,512
1000e5fc:	10006b26 	beq	r2,zero,1000e7ac <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
1000e600:	9005883a 	mov	r2,r18
1000e604:	88805736 	bltu	r17,r2,1000e764 <__sfvwrite_r+0x2ac>
1000e608:	8080030b 	ldhu	r2,12(r16)
1000e60c:	10bfffcc 	andi	r2,r2,65535
1000e610:	1081200c 	andi	r2,r2,1152
1000e614:	10005326 	beq	r2,zero,1000e764 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
1000e618:	80800017 	ldw	r2,0(r16)
1000e61c:	1007883a 	mov	r3,r2
1000e620:	80800417 	ldw	r2,16(r16)
1000e624:	1885c83a 	sub	r2,r3,r2
1000e628:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
1000e62c:	80c00517 	ldw	r3,20(r16)
1000e630:	1805883a 	mov	r2,r3
1000e634:	1085883a 	add	r2,r2,r2
1000e638:	10c5883a 	add	r2,r2,r3
1000e63c:	1006d7fa 	srli	r3,r2,31
1000e640:	1885883a 	add	r2,r3,r2
1000e644:	1005d07a 	srai	r2,r2,1
1000e648:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
1000e64c:	e0bff617 	ldw	r2,-40(fp)
1000e650:	1445883a 	add	r2,r2,r17
1000e654:	10800044 	addi	r2,r2,1
1000e658:	e0fff517 	ldw	r3,-44(fp)
1000e65c:	1880042e 	bgeu	r3,r2,1000e670 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
1000e660:	e0bff617 	ldw	r2,-40(fp)
1000e664:	1445883a 	add	r2,r2,r17
1000e668:	10800044 	addi	r2,r2,1
1000e66c:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
1000e670:	8080030b 	ldhu	r2,12(r16)
1000e674:	10bfffcc 	andi	r2,r2,65535
1000e678:	1081000c 	andi	r2,r2,1024
1000e67c:	10001726 	beq	r2,zero,1000e6dc <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
1000e680:	e0bff517 	ldw	r2,-44(fp)
1000e684:	100b883a 	mov	r5,r2
1000e688:	e13ff817 	ldw	r4,-32(fp)
1000e68c:	00063d40 	call	100063d4 <_malloc_r>
1000e690:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
1000e694:	e0bff417 	ldw	r2,-48(fp)
1000e698:	1000041e 	bne	r2,zero,1000e6ac <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
1000e69c:	e0bff817 	ldw	r2,-32(fp)
1000e6a0:	00c00304 	movi	r3,12
1000e6a4:	10c00015 	stw	r3,0(r2)
			  goto err;
1000e6a8:	0000ed06 	br	1000ea60 <__sfvwrite_r+0x5a8>
			}
		      memcpy (str, fp->_bf._base, curpos);
1000e6ac:	80800417 	ldw	r2,16(r16)
1000e6b0:	e0fff617 	ldw	r3,-40(fp)
1000e6b4:	180d883a 	mov	r6,r3
1000e6b8:	100b883a 	mov	r5,r2
1000e6bc:	e13ff417 	ldw	r4,-48(fp)
1000e6c0:	000f2700 	call	1000f270 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
1000e6c4:	80c0030b 	ldhu	r3,12(r16)
1000e6c8:	00bedfc4 	movi	r2,-1153
1000e6cc:	1884703a 	and	r2,r3,r2
1000e6d0:	10802014 	ori	r2,r2,128
1000e6d4:	8080030d 	sth	r2,12(r16)
1000e6d8:	00001506 	br	1000e730 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
1000e6dc:	80800417 	ldw	r2,16(r16)
1000e6e0:	e0fff517 	ldw	r3,-44(fp)
1000e6e4:	180d883a 	mov	r6,r3
1000e6e8:	100b883a 	mov	r5,r2
1000e6ec:	e13ff817 	ldw	r4,-32(fp)
1000e6f0:	00075dc0 	call	100075dc <_realloc_r>
1000e6f4:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
1000e6f8:	e0bff417 	ldw	r2,-48(fp)
1000e6fc:	10000c1e 	bne	r2,zero,1000e730 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
1000e700:	80800417 	ldw	r2,16(r16)
1000e704:	100b883a 	mov	r5,r2
1000e708:	e13ff817 	ldw	r4,-32(fp)
1000e70c:	000dd700 	call	1000dd70 <_free_r>
			  fp->_flags &=  ~__SMBF;
1000e710:	80c0030b 	ldhu	r3,12(r16)
1000e714:	00bfdfc4 	movi	r2,-129
1000e718:	1884703a 	and	r2,r3,r2
1000e71c:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
1000e720:	e0bff817 	ldw	r2,-32(fp)
1000e724:	00c00304 	movi	r3,12
1000e728:	10c00015 	stw	r3,0(r2)
			  goto err;
1000e72c:	0000cc06 	br	1000ea60 <__sfvwrite_r+0x5a8>
			}
		    }
		  fp->_bf._base = str;
1000e730:	e0bff417 	ldw	r2,-48(fp)
1000e734:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
1000e738:	e0bff617 	ldw	r2,-40(fp)
1000e73c:	e0fff417 	ldw	r3,-48(fp)
1000e740:	1885883a 	add	r2,r3,r2
1000e744:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
1000e748:	e0bff517 	ldw	r2,-44(fp)
1000e74c:	80800515 	stw	r2,20(r16)
		  w = len;
1000e750:	8825883a 	mov	r18,r17
		  fp->_w = newsize - curpos;
1000e754:	e0fff517 	ldw	r3,-44(fp)
1000e758:	e0bff617 	ldw	r2,-40(fp)
1000e75c:	1885c83a 	sub	r2,r3,r2
1000e760:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
1000e764:	9005883a 	mov	r2,r18
1000e768:	8880012e 	bgeu	r17,r2,1000e770 <__sfvwrite_r+0x2b8>
		w = len;
1000e76c:	8825883a 	mov	r18,r17
	      COPY (w);		/* copy MIN(fp->_w,len), */
1000e770:	80800017 	ldw	r2,0(r16)
1000e774:	9007883a 	mov	r3,r18
1000e778:	180d883a 	mov	r6,r3
1000e77c:	980b883a 	mov	r5,r19
1000e780:	1009883a 	mov	r4,r2
1000e784:	000f3f80 	call	1000f3f8 <memmove>
	      fp->_w -= w;
1000e788:	80800217 	ldw	r2,8(r16)
1000e78c:	1485c83a 	sub	r2,r2,r18
1000e790:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000e794:	80800017 	ldw	r2,0(r16)
1000e798:	9007883a 	mov	r3,r18
1000e79c:	10c5883a 	add	r2,r2,r3
1000e7a0:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
1000e7a4:	8825883a 	mov	r18,r17
1000e7a8:	00003806 	br	1000e88c <__sfvwrite_r+0x3d4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
1000e7ac:	80800017 	ldw	r2,0(r16)
1000e7b0:	80c00417 	ldw	r3,16(r16)
1000e7b4:	18800236 	bltu	r3,r2,1000e7c0 <__sfvwrite_r+0x308>
1000e7b8:	80800517 	ldw	r2,20(r16)
1000e7bc:	8880182e 	bgeu	r17,r2,1000e820 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
1000e7c0:	9005883a 	mov	r2,r18
1000e7c4:	8880012e 	bgeu	r17,r2,1000e7cc <__sfvwrite_r+0x314>
1000e7c8:	8805883a 	mov	r2,r17
1000e7cc:	1025883a 	mov	r18,r2
	      COPY (w);
1000e7d0:	80800017 	ldw	r2,0(r16)
1000e7d4:	9007883a 	mov	r3,r18
1000e7d8:	180d883a 	mov	r6,r3
1000e7dc:	980b883a 	mov	r5,r19
1000e7e0:	1009883a 	mov	r4,r2
1000e7e4:	000f3f80 	call	1000f3f8 <memmove>
	      fp->_w -= w;
1000e7e8:	80800217 	ldw	r2,8(r16)
1000e7ec:	1485c83a 	sub	r2,r2,r18
1000e7f0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000e7f4:	80800017 	ldw	r2,0(r16)
1000e7f8:	9007883a 	mov	r3,r18
1000e7fc:	10c5883a 	add	r2,r2,r3
1000e800:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
1000e804:	80800217 	ldw	r2,8(r16)
1000e808:	10001f1e 	bne	r2,zero,1000e888 <__sfvwrite_r+0x3d0>
1000e80c:	800b883a 	mov	r5,r16
1000e810:	e13ff817 	ldw	r4,-32(fp)
1000e814:	000d6780 	call	1000d678 <_fflush_r>
1000e818:	10001b26 	beq	r2,zero,1000e888 <__sfvwrite_r+0x3d0>
		goto err;
1000e81c:	00009006 	br	1000ea60 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
1000e820:	8805883a 	mov	r2,r17
1000e824:	00e00034 	movhi	r3,32768
1000e828:	10c00236 	bltu	r2,r3,1000e834 <__sfvwrite_r+0x37c>
1000e82c:	00a00034 	movhi	r2,32768
1000e830:	10bfffc4 	addi	r2,r2,-1
1000e834:	1007883a 	mov	r3,r2
1000e838:	80800517 	ldw	r2,20(r16)
1000e83c:	100b883a 	mov	r5,r2
1000e840:	1809883a 	mov	r4,r3
1000e844:	00023640 	call	10002364 <__divsi3>
1000e848:	1007883a 	mov	r3,r2
1000e84c:	80800517 	ldw	r2,20(r16)
1000e850:	100b883a 	mov	r5,r2
1000e854:	1809883a 	mov	r4,r3
1000e858:	00059d40 	call	100059d4 <__mulsi3>
1000e85c:	1025883a 	mov	r18,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
1000e860:	80800917 	ldw	r2,36(r16)
1000e864:	80c00717 	ldw	r3,28(r16)
1000e868:	900f883a 	mov	r7,r18
1000e86c:	980d883a 	mov	r6,r19
1000e870:	180b883a 	mov	r5,r3
1000e874:	e13ff817 	ldw	r4,-32(fp)
1000e878:	103ee83a 	callr	r2
1000e87c:	1025883a 	mov	r18,r2
	      if (w <= 0)
1000e880:	0480740e 	bge	zero,r18,1000ea54 <__sfvwrite_r+0x59c>
1000e884:	00000106 	br	1000e88c <__sfvwrite_r+0x3d4>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
1000e888:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
1000e88c:	9005883a 	mov	r2,r18
1000e890:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000e894:	9005883a 	mov	r2,r18
1000e898:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000e89c:	a8800217 	ldw	r2,8(r21)
1000e8a0:	9007883a 	mov	r3,r18
1000e8a4:	10c5c83a 	sub	r2,r2,r3
1000e8a8:	a8800215 	stw	r2,8(r21)
1000e8ac:	a8800217 	ldw	r2,8(r21)
1000e8b0:	103f4d1e 	bne	r2,zero,1000e5e8 <__alt_data_end+0xf800e5e8>
1000e8b4:	00006306 	br	1000ea44 <__sfvwrite_r+0x58c>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
1000e8b8:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
1000e8bc:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
1000e8c0:	00000406 	br	1000e8d4 <__sfvwrite_r+0x41c>
1000e8c4:	e03ff215 	stw	zero,-56(fp)
1000e8c8:	a4c00017 	ldw	r19,0(r20)
1000e8cc:	a4400117 	ldw	r17,4(r20)
1000e8d0:	a5000204 	addi	r20,r20,8
1000e8d4:	883ffb26 	beq	r17,zero,1000e8c4 <__alt_data_end+0xf800e8c4>
	  if (!nlknown)
1000e8d8:	e0bff217 	ldw	r2,-56(fp)
1000e8dc:	1000111e 	bne	r2,zero,1000e924 <__sfvwrite_r+0x46c>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
1000e8e0:	880d883a 	mov	r6,r17
1000e8e4:	01400284 	movi	r5,10
1000e8e8:	9809883a 	mov	r4,r19
1000e8ec:	000f0b40 	call	1000f0b4 <memchr>
1000e8f0:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
1000e8f4:	e0bff717 	ldw	r2,-36(fp)
1000e8f8:	10000626 	beq	r2,zero,1000e914 <__sfvwrite_r+0x45c>
1000e8fc:	e0bff717 	ldw	r2,-36(fp)
1000e900:	10800044 	addi	r2,r2,1
1000e904:	1007883a 	mov	r3,r2
1000e908:	9805883a 	mov	r2,r19
1000e90c:	1885c83a 	sub	r2,r3,r2
1000e910:	00000106 	br	1000e918 <__sfvwrite_r+0x460>
1000e914:	88800044 	addi	r2,r17,1
1000e918:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
1000e91c:	00800044 	movi	r2,1
1000e920:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
1000e924:	e0bff317 	ldw	r2,-52(fp)
1000e928:	8880012e 	bgeu	r17,r2,1000e930 <__sfvwrite_r+0x478>
1000e92c:	8805883a 	mov	r2,r17
1000e930:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
1000e934:	80c00217 	ldw	r3,8(r16)
1000e938:	80800517 	ldw	r2,20(r16)
1000e93c:	18a5883a 	add	r18,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
1000e940:	80800017 	ldw	r2,0(r16)
1000e944:	80c00417 	ldw	r3,16(r16)
1000e948:	1880102e 	bgeu	r3,r2,1000e98c <__sfvwrite_r+0x4d4>
1000e94c:	95800f0e 	bge	r18,r22,1000e98c <__sfvwrite_r+0x4d4>
	    {
	      COPY (w);
1000e950:	80800017 	ldw	r2,0(r16)
1000e954:	9007883a 	mov	r3,r18
1000e958:	180d883a 	mov	r6,r3
1000e95c:	980b883a 	mov	r5,r19
1000e960:	1009883a 	mov	r4,r2
1000e964:	000f3f80 	call	1000f3f8 <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
1000e968:	80800017 	ldw	r2,0(r16)
1000e96c:	9007883a 	mov	r3,r18
1000e970:	10c5883a 	add	r2,r2,r3
1000e974:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
1000e978:	800b883a 	mov	r5,r16
1000e97c:	e13ff817 	ldw	r4,-32(fp)
1000e980:	000d6780 	call	1000d678 <_fflush_r>
1000e984:	10001b26 	beq	r2,zero,1000e9f4 <__sfvwrite_r+0x53c>
		goto err;
1000e988:	00003506 	br	1000ea60 <__sfvwrite_r+0x5a8>
	    }
	  else if (s >= (w = fp->_bf._size))
1000e98c:	84800517 	ldw	r18,20(r16)
1000e990:	b4800a16 	blt	r22,r18,1000e9bc <__sfvwrite_r+0x504>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
1000e994:	80800917 	ldw	r2,36(r16)
1000e998:	80c00717 	ldw	r3,28(r16)
1000e99c:	900f883a 	mov	r7,r18
1000e9a0:	980d883a 	mov	r6,r19
1000e9a4:	180b883a 	mov	r5,r3
1000e9a8:	e13ff817 	ldw	r4,-32(fp)
1000e9ac:	103ee83a 	callr	r2
1000e9b0:	1025883a 	mov	r18,r2
	      if (w <= 0)
1000e9b4:	04800f16 	blt	zero,r18,1000e9f4 <__sfvwrite_r+0x53c>
		goto err;
1000e9b8:	00002906 	br	1000ea60 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      w = s;
1000e9bc:	b025883a 	mov	r18,r22
	      COPY (w);
1000e9c0:	80800017 	ldw	r2,0(r16)
1000e9c4:	9007883a 	mov	r3,r18
1000e9c8:	180d883a 	mov	r6,r3
1000e9cc:	980b883a 	mov	r5,r19
1000e9d0:	1009883a 	mov	r4,r2
1000e9d4:	000f3f80 	call	1000f3f8 <memmove>
	      fp->_w -= w;
1000e9d8:	80800217 	ldw	r2,8(r16)
1000e9dc:	1485c83a 	sub	r2,r2,r18
1000e9e0:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000e9e4:	80800017 	ldw	r2,0(r16)
1000e9e8:	9007883a 	mov	r3,r18
1000e9ec:	10c5883a 	add	r2,r2,r3
1000e9f0:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
1000e9f4:	e0bff317 	ldw	r2,-52(fp)
1000e9f8:	1485c83a 	sub	r2,r2,r18
1000e9fc:	e0bff315 	stw	r2,-52(fp)
1000ea00:	e0bff317 	ldw	r2,-52(fp)
1000ea04:	1000051e 	bne	r2,zero,1000ea1c <__sfvwrite_r+0x564>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
1000ea08:	800b883a 	mov	r5,r16
1000ea0c:	e13ff817 	ldw	r4,-32(fp)
1000ea10:	000d6780 	call	1000d678 <_fflush_r>
1000ea14:	1000111e 	bne	r2,zero,1000ea5c <__sfvwrite_r+0x5a4>
		goto err;
	      nlknown = 0;
1000ea18:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
1000ea1c:	9005883a 	mov	r2,r18
1000ea20:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000ea24:	9005883a 	mov	r2,r18
1000ea28:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000ea2c:	a8800217 	ldw	r2,8(r21)
1000ea30:	9007883a 	mov	r3,r18
1000ea34:	10c5c83a 	sub	r2,r2,r3
1000ea38:	a8800215 	stw	r2,8(r21)
1000ea3c:	a8800217 	ldw	r2,8(r21)
1000ea40:	103fa41e 	bne	r2,zero,1000e8d4 <__alt_data_end+0xf800e8d4>
    }
  return 0;
1000ea44:	0005883a 	mov	r2,zero
1000ea48:	00000906 	br	1000ea70 <__sfvwrite_r+0x5b8>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
1000ea4c:	0001883a 	nop
1000ea50:	00000306 	br	1000ea60 <__sfvwrite_r+0x5a8>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
1000ea54:	0001883a 	nop
1000ea58:	00000106 	br	1000ea60 <__sfvwrite_r+0x5a8>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
1000ea5c:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
1000ea60:	8080030b 	ldhu	r2,12(r16)
1000ea64:	10801014 	ori	r2,r2,64
1000ea68:	8080030d 	sth	r2,12(r16)
  return EOF;
1000ea6c:	00bfffc4 	movi	r2,-1
}
1000ea70:	e6fff904 	addi	sp,fp,-28
1000ea74:	dfc00817 	ldw	ra,32(sp)
1000ea78:	df000717 	ldw	fp,28(sp)
1000ea7c:	dd800617 	ldw	r22,24(sp)
1000ea80:	dd400517 	ldw	r21,20(sp)
1000ea84:	dd000417 	ldw	r20,16(sp)
1000ea88:	dcc00317 	ldw	r19,12(sp)
1000ea8c:	dc800217 	ldw	r18,8(sp)
1000ea90:	dc400117 	ldw	r17,4(sp)
1000ea94:	dc000017 	ldw	r16,0(sp)
1000ea98:	dec00904 	addi	sp,sp,36
1000ea9c:	f800283a 	ret

1000eaa0 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
1000eaa0:	defff804 	addi	sp,sp,-32
1000eaa4:	dfc00715 	stw	ra,28(sp)
1000eaa8:	df000615 	stw	fp,24(sp)
1000eaac:	dd000515 	stw	r20,20(sp)
1000eab0:	dcc00415 	stw	r19,16(sp)
1000eab4:	dc800315 	stw	r18,12(sp)
1000eab8:	dc400215 	stw	r17,8(sp)
1000eabc:	dc000115 	stw	r16,4(sp)
1000eac0:	df000604 	addi	fp,sp,24
1000eac4:	e13ffa15 	stw	r4,-24(fp)
1000eac8:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
1000eacc:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000ead0:	e0bffa17 	ldw	r2,-24(fp)
1000ead4:	1440b804 	addi	r17,r2,736
1000ead8:	00001b06 	br	1000eb48 <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000eadc:	8c000217 	ldw	r16,8(r17)
1000eae0:	8c800117 	ldw	r18,4(r17)
1000eae4:	00001506 	br	1000eb3c <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
1000eae8:	8080030b 	ldhu	r2,12(r16)
1000eaec:	10bfffcc 	andi	r2,r2,65535
1000eaf0:	10a0001c 	xori	r2,r2,32768
1000eaf4:	10a00004 	addi	r2,r2,-32768
1000eaf8:	10000f26 	beq	r2,zero,1000eb38 <_fwalk+0x98>
1000eafc:	8080030b 	ldhu	r2,12(r16)
1000eb00:	10bfffcc 	andi	r2,r2,65535
1000eb04:	10a0001c 	xori	r2,r2,32768
1000eb08:	10a00004 	addi	r2,r2,-32768
1000eb0c:	10800060 	cmpeqi	r2,r2,1
1000eb10:	1000091e 	bne	r2,zero,1000eb38 <_fwalk+0x98>
1000eb14:	8080038b 	ldhu	r2,14(r16)
1000eb18:	10bfffcc 	andi	r2,r2,65535
1000eb1c:	10a0001c 	xori	r2,r2,32768
1000eb20:	10a00004 	addi	r2,r2,-32768
1000eb24:	10bfffe0 	cmpeqi	r2,r2,-1
1000eb28:	1000031e 	bne	r2,zero,1000eb38 <_fwalk+0x98>
	ret |= (*function) (fp);
1000eb2c:	8009883a 	mov	r4,r16
1000eb30:	a03ee83a 	callr	r20
1000eb34:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000eb38:	84001a04 	addi	r16,r16,104
1000eb3c:	94bfffc4 	addi	r18,r18,-1
1000eb40:	903fe90e 	bge	r18,zero,1000eae8 <__alt_data_end+0xf800eae8>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000eb44:	8c400017 	ldw	r17,0(r17)
1000eb48:	883fe41e 	bne	r17,zero,1000eadc <__alt_data_end+0xf800eadc>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
1000eb4c:	9805883a 	mov	r2,r19
}
1000eb50:	e6fffb04 	addi	sp,fp,-20
1000eb54:	dfc00617 	ldw	ra,24(sp)
1000eb58:	df000517 	ldw	fp,20(sp)
1000eb5c:	dd000417 	ldw	r20,16(sp)
1000eb60:	dcc00317 	ldw	r19,12(sp)
1000eb64:	dc800217 	ldw	r18,8(sp)
1000eb68:	dc400117 	ldw	r17,4(sp)
1000eb6c:	dc000017 	ldw	r16,0(sp)
1000eb70:	dec00704 	addi	sp,sp,28
1000eb74:	f800283a 	ret

1000eb78 <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
1000eb78:	defff804 	addi	sp,sp,-32
1000eb7c:	dfc00715 	stw	ra,28(sp)
1000eb80:	df000615 	stw	fp,24(sp)
1000eb84:	dd000515 	stw	r20,20(sp)
1000eb88:	dcc00415 	stw	r19,16(sp)
1000eb8c:	dc800315 	stw	r18,12(sp)
1000eb90:	dc400215 	stw	r17,8(sp)
1000eb94:	dc000115 	stw	r16,4(sp)
1000eb98:	df000604 	addi	fp,sp,24
1000eb9c:	e13ffa15 	stw	r4,-24(fp)
1000eba0:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
1000eba4:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000eba8:	e0bffa17 	ldw	r2,-24(fp)
1000ebac:	1440b804 	addi	r17,r2,736
1000ebb0:	00001c06 	br	1000ec24 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000ebb4:	8c000217 	ldw	r16,8(r17)
1000ebb8:	8c800117 	ldw	r18,4(r17)
1000ebbc:	00001606 	br	1000ec18 <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
1000ebc0:	8080030b 	ldhu	r2,12(r16)
1000ebc4:	10bfffcc 	andi	r2,r2,65535
1000ebc8:	10a0001c 	xori	r2,r2,32768
1000ebcc:	10a00004 	addi	r2,r2,-32768
1000ebd0:	10001026 	beq	r2,zero,1000ec14 <_fwalk_reent+0x9c>
1000ebd4:	8080030b 	ldhu	r2,12(r16)
1000ebd8:	10bfffcc 	andi	r2,r2,65535
1000ebdc:	10a0001c 	xori	r2,r2,32768
1000ebe0:	10a00004 	addi	r2,r2,-32768
1000ebe4:	10800060 	cmpeqi	r2,r2,1
1000ebe8:	10000a1e 	bne	r2,zero,1000ec14 <_fwalk_reent+0x9c>
1000ebec:	8080038b 	ldhu	r2,14(r16)
1000ebf0:	10bfffcc 	andi	r2,r2,65535
1000ebf4:	10a0001c 	xori	r2,r2,32768
1000ebf8:	10a00004 	addi	r2,r2,-32768
1000ebfc:	10bfffe0 	cmpeqi	r2,r2,-1
1000ec00:	1000041e 	bne	r2,zero,1000ec14 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
1000ec04:	800b883a 	mov	r5,r16
1000ec08:	e13ffa17 	ldw	r4,-24(fp)
1000ec0c:	a03ee83a 	callr	r20
1000ec10:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000ec14:	84001a04 	addi	r16,r16,104
1000ec18:	94bfffc4 	addi	r18,r18,-1
1000ec1c:	903fe80e 	bge	r18,zero,1000ebc0 <__alt_data_end+0xf800ebc0>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000ec20:	8c400017 	ldw	r17,0(r17)
1000ec24:	883fe31e 	bne	r17,zero,1000ebb4 <__alt_data_end+0xf800ebb4>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
1000ec28:	9805883a 	mov	r2,r19
}
1000ec2c:	e6fffb04 	addi	sp,fp,-20
1000ec30:	dfc00617 	ldw	ra,24(sp)
1000ec34:	df000517 	ldw	fp,20(sp)
1000ec38:	dd000417 	ldw	r20,16(sp)
1000ec3c:	dcc00317 	ldw	r19,12(sp)
1000ec40:	dc800217 	ldw	r18,8(sp)
1000ec44:	dc400117 	ldw	r17,4(sp)
1000ec48:	dc000017 	ldw	r16,0(sp)
1000ec4c:	dec00704 	addi	sp,sp,28
1000ec50:	f800283a 	ret

1000ec54 <_gettimeofday_r>:
int
_DEFUN (_gettimeofday_r, (ptr, ptimeval, ptimezone),
     struct _reent *ptr _AND
     struct timeval *ptimeval _AND
     void *ptimezone)
{
1000ec54:	defffa04 	addi	sp,sp,-24
1000ec58:	dfc00515 	stw	ra,20(sp)
1000ec5c:	df000415 	stw	fp,16(sp)
1000ec60:	df000404 	addi	fp,sp,16
1000ec64:	e13ffd15 	stw	r4,-12(fp)
1000ec68:	e17ffe15 	stw	r5,-8(fp)
1000ec6c:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
1000ec70:	008403b4 	movhi	r2,4110
1000ec74:	108a9b04 	addi	r2,r2,10860
1000ec78:	10000015 	stw	zero,0(r2)
  if ((ret = _gettimeofday (ptimeval, ptimezone)) == -1 && errno != 0)
1000ec7c:	e17fff17 	ldw	r5,-4(fp)
1000ec80:	e13ffe17 	ldw	r4,-8(fp)
1000ec84:	00157a80 	call	100157a8 <gettimeofday>
1000ec88:	e0bffc15 	stw	r2,-16(fp)
1000ec8c:	e0bffc17 	ldw	r2,-16(fp)
1000ec90:	10bfffd8 	cmpnei	r2,r2,-1
1000ec94:	1000091e 	bne	r2,zero,1000ecbc <_gettimeofday_r+0x68>
1000ec98:	008403b4 	movhi	r2,4110
1000ec9c:	108a9b04 	addi	r2,r2,10860
1000eca0:	10800017 	ldw	r2,0(r2)
1000eca4:	10000526 	beq	r2,zero,1000ecbc <_gettimeofday_r+0x68>
    ptr->_errno = errno;
1000eca8:	008403b4 	movhi	r2,4110
1000ecac:	108a9b04 	addi	r2,r2,10860
1000ecb0:	10c00017 	ldw	r3,0(r2)
1000ecb4:	e0bffd17 	ldw	r2,-12(fp)
1000ecb8:	10c00015 	stw	r3,0(r2)
  return ret;
1000ecbc:	e0bffc17 	ldw	r2,-16(fp)
}
1000ecc0:	e037883a 	mov	sp,fp
1000ecc4:	dfc00117 	ldw	ra,4(sp)
1000ecc8:	df000017 	ldw	fp,0(sp)
1000eccc:	dec00204 	addi	sp,sp,8
1000ecd0:	f800283a 	ret

1000ecd4 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
1000ecd4:	defffb04 	addi	sp,sp,-20
1000ecd8:	dfc00415 	stw	ra,16(sp)
1000ecdc:	df000315 	stw	fp,12(sp)
1000ece0:	df000304 	addi	fp,sp,12
1000ece4:	e13ffd15 	stw	r4,-12(fp)
1000ece8:	e17ffe15 	stw	r5,-8(fp)
1000ecec:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
1000ecf0:	e0bfff17 	ldw	r2,-4(fp)
1000ecf4:	10001126 	beq	r2,zero,1000ed3c <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
1000ecf8:	01440374 	movhi	r5,4109
1000ecfc:	297dd004 	addi	r5,r5,-2240
1000ed00:	e13fff17 	ldw	r4,-4(fp)
1000ed04:	00119f40 	call	100119f4 <strcmp>
1000ed08:	10000c26 	beq	r2,zero,1000ed3c <_setlocale_r+0x68>
1000ed0c:	01440374 	movhi	r5,4109
1000ed10:	297dd204 	addi	r5,r5,-2232
1000ed14:	e13fff17 	ldw	r4,-4(fp)
1000ed18:	00119f40 	call	100119f4 <strcmp>
1000ed1c:	10000726 	beq	r2,zero,1000ed3c <_setlocale_r+0x68>
	  && strcmp (locale, ""))
1000ed20:	01440374 	movhi	r5,4109
1000ed24:	297dcf04 	addi	r5,r5,-2244
1000ed28:	e13fff17 	ldw	r4,-4(fp)
1000ed2c:	00119f40 	call	100119f4 <strcmp>
1000ed30:	10000226 	beq	r2,zero,1000ed3c <_setlocale_r+0x68>
        return NULL;
1000ed34:	0005883a 	mov	r2,zero
1000ed38:	00000206 	br	1000ed44 <_setlocale_r+0x70>
    }
  return "C";
1000ed3c:	00840374 	movhi	r2,4109
1000ed40:	10bdd204 	addi	r2,r2,-2232
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
1000ed44:	e037883a 	mov	sp,fp
1000ed48:	dfc00117 	ldw	ra,4(sp)
1000ed4c:	df000017 	ldw	fp,0(sp)
1000ed50:	dec00204 	addi	sp,sp,8
1000ed54:	f800283a 	ret

1000ed58 <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
1000ed58:	deffff04 	addi	sp,sp,-4
1000ed5c:	df000015 	stw	fp,0(sp)
1000ed60:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
1000ed64:	00840374 	movhi	r2,4109
1000ed68:	109fa004 	addi	r2,r2,32384
#endif
}
1000ed6c:	e037883a 	mov	sp,fp
1000ed70:	df000017 	ldw	fp,0(sp)
1000ed74:	dec00104 	addi	sp,sp,4
1000ed78:	f800283a 	ret

1000ed7c <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
1000ed7c:	deffff04 	addi	sp,sp,-4
1000ed80:	df000015 	stw	fp,0(sp)
1000ed84:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
1000ed88:	d0a01317 	ldw	r2,-32692(gp)
#endif
}
1000ed8c:	e037883a 	mov	sp,fp
1000ed90:	df000017 	ldw	fp,0(sp)
1000ed94:	dec00104 	addi	sp,sp,4
1000ed98:	f800283a 	ret

1000ed9c <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
1000ed9c:	deffff04 	addi	sp,sp,-4
1000eda0:	df000015 	stw	fp,0(sp)
1000eda4:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
1000eda8:	00840374 	movhi	r2,4109
1000edac:	109fa804 	addi	r2,r2,32416
#endif
}
1000edb0:	e037883a 	mov	sp,fp
1000edb4:	df000017 	ldw	fp,0(sp)
1000edb8:	dec00104 	addi	sp,sp,4
1000edbc:	f800283a 	ret

1000edc0 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
1000edc0:	deffff04 	addi	sp,sp,-4
1000edc4:	df000015 	stw	fp,0(sp)
1000edc8:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
1000edcc:	d0866317 	ldw	r2,6540(gp)
}
1000edd0:	e037883a 	mov	sp,fp
1000edd4:	df000017 	ldw	fp,0(sp)
1000edd8:	dec00104 	addi	sp,sp,4
1000eddc:	f800283a 	ret

1000ede0 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
1000ede0:	defffe04 	addi	sp,sp,-8
1000ede4:	df000115 	stw	fp,4(sp)
1000ede8:	df000104 	addi	fp,sp,4
1000edec:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
1000edf0:	00840374 	movhi	r2,4109
1000edf4:	109f9204 	addi	r2,r2,32328
}
1000edf8:	e037883a 	mov	sp,fp
1000edfc:	df000017 	ldw	fp,0(sp)
1000ee00:	dec00104 	addi	sp,sp,4
1000ee04:	f800283a 	ret

1000ee08 <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
1000ee08:	defffc04 	addi	sp,sp,-16
1000ee0c:	dfc00315 	stw	ra,12(sp)
1000ee10:	df000215 	stw	fp,8(sp)
1000ee14:	df000204 	addi	fp,sp,8
1000ee18:	e13ffe15 	stw	r4,-8(fp)
1000ee1c:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
1000ee20:	008403b4 	movhi	r2,4110
1000ee24:	10a44204 	addi	r2,r2,-28408
1000ee28:	10800017 	ldw	r2,0(r2)
1000ee2c:	e1bfff17 	ldw	r6,-4(fp)
1000ee30:	e17ffe17 	ldw	r5,-8(fp)
1000ee34:	1009883a 	mov	r4,r2
1000ee38:	000ecd40 	call	1000ecd4 <_setlocale_r>
}
1000ee3c:	e037883a 	mov	sp,fp
1000ee40:	dfc00117 	ldw	ra,4(sp)
1000ee44:	df000017 	ldw	fp,0(sp)
1000ee48:	dec00204 	addi	sp,sp,8
1000ee4c:	f800283a 	ret

1000ee50 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
1000ee50:	defffe04 	addi	sp,sp,-8
1000ee54:	dfc00115 	stw	ra,4(sp)
1000ee58:	df000015 	stw	fp,0(sp)
1000ee5c:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
1000ee60:	008403b4 	movhi	r2,4110
1000ee64:	10a44204 	addi	r2,r2,-28408
1000ee68:	10800017 	ldw	r2,0(r2)
1000ee6c:	1009883a 	mov	r4,r2
1000ee70:	000ede00 	call	1000ede0 <_localeconv_r>
}
1000ee74:	e037883a 	mov	sp,fp
1000ee78:	dfc00117 	ldw	ra,4(sp)
1000ee7c:	df000017 	ldw	fp,0(sp)
1000ee80:	dec00204 	addi	sp,sp,8
1000ee84:	f800283a 	ret

1000ee88 <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
1000ee88:	deffea04 	addi	sp,sp,-88
1000ee8c:	dfc01515 	stw	ra,84(sp)
1000ee90:	df001415 	stw	fp,80(sp)
1000ee94:	dcc01315 	stw	r19,76(sp)
1000ee98:	dc801215 	stw	r18,72(sp)
1000ee9c:	dc401115 	stw	r17,68(sp)
1000eea0:	dc001015 	stw	r16,64(sp)
1000eea4:	df001404 	addi	fp,sp,80
1000eea8:	e13ffb15 	stw	r4,-20(fp)
1000eeac:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
1000eeb0:	8080030b 	ldhu	r2,12(r16)
1000eeb4:	10bfffcc 	andi	r2,r2,65535
1000eeb8:	1080008c 	andi	r2,r2,2
1000eebc:	10000726 	beq	r2,zero,1000eedc <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
1000eec0:	808010c4 	addi	r2,r16,67
1000eec4:	80800015 	stw	r2,0(r16)
1000eec8:	80800017 	ldw	r2,0(r16)
1000eecc:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
1000eed0:	00800044 	movi	r2,1
1000eed4:	80800515 	stw	r2,20(r16)
1000eed8:	00006d06 	br	1000f090 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
1000eedc:	8080038b 	ldhu	r2,14(r16)
1000eee0:	10bfffcc 	andi	r2,r2,65535
1000eee4:	10a0001c 	xori	r2,r2,32768
1000eee8:	10a00004 	addi	r2,r2,-32768
1000eeec:	10000916 	blt	r2,zero,1000ef14 <__smakebuf_r+0x8c>
1000eef0:	8080038b 	ldhu	r2,14(r16)
1000eef4:	10bfffcc 	andi	r2,r2,65535
1000eef8:	10a0001c 	xori	r2,r2,32768
1000eefc:	10a00004 	addi	r2,r2,-32768
1000ef00:	e1bfec04 	addi	r6,fp,-80
1000ef04:	100b883a 	mov	r5,r2
1000ef08:	e13ffb17 	ldw	r4,-20(fp)
1000ef0c:	001379c0 	call	1001379c <_fstat_r>
1000ef10:	10000c0e 	bge	r2,zero,1000ef44 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
1000ef14:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
1000ef18:	8080030b 	ldhu	r2,12(r16)
1000ef1c:	10bfffcc 	andi	r2,r2,65535
1000ef20:	1080200c 	andi	r2,r2,128
1000ef24:	10000226 	beq	r2,zero,1000ef30 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
1000ef28:	04401004 	movi	r17,64
1000ef2c:	00000106 	br	1000ef34 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
1000ef30:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
1000ef34:	8080030b 	ldhu	r2,12(r16)
1000ef38:	10820014 	ori	r2,r2,2048
1000ef3c:	8080030d 	sth	r2,12(r16)
1000ef40:	00001606 	br	1000ef9c <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
1000ef44:	e0bfed17 	ldw	r2,-76(fp)
1000ef48:	10bc000c 	andi	r2,r2,61440
1000ef4c:	10880020 	cmpeqi	r2,r2,8192
1000ef50:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
1000ef54:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
1000ef58:	e0bfed17 	ldw	r2,-76(fp)
1000ef5c:	10fc000c 	andi	r3,r2,61440
1000ef60:	00a00014 	movui	r2,32768
1000ef64:	18800a1e 	bne	r3,r2,1000ef90 <__smakebuf_r+0x108>
1000ef68:	80c00a17 	ldw	r3,40(r16)
1000ef6c:	00840074 	movhi	r2,4097
1000ef70:	10864004 	addi	r2,r2,6400
1000ef74:	1880061e 	bne	r3,r2,1000ef90 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
1000ef78:	8080030b 	ldhu	r2,12(r16)
1000ef7c:	10810014 	ori	r2,r2,1024
1000ef80:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
1000ef84:	00810004 	movi	r2,1024
1000ef88:	80801315 	stw	r2,76(r16)
1000ef8c:	00000306 	br	1000ef9c <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
1000ef90:	8080030b 	ldhu	r2,12(r16)
1000ef94:	10820014 	ori	r2,r2,2048
1000ef98:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
1000ef9c:	90001126 	beq	r18,zero,1000efe4 <__smakebuf_r+0x15c>
1000efa0:	8080038b 	ldhu	r2,14(r16)
1000efa4:	10bfffcc 	andi	r2,r2,65535
1000efa8:	10a0001c 	xori	r2,r2,32768
1000efac:	10a00004 	addi	r2,r2,-32768
1000efb0:	100b883a 	mov	r5,r2
1000efb4:	e13ffb17 	ldw	r4,-20(fp)
1000efb8:	001381c0 	call	1001381c <_isatty_r>
1000efbc:	10000926 	beq	r2,zero,1000efe4 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
1000efc0:	8080030b 	ldhu	r2,12(r16)
1000efc4:	10800054 	ori	r2,r2,1
1000efc8:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
1000efcc:	808010c4 	addi	r2,r16,67
1000efd0:	80800015 	stw	r2,0(r16)
1000efd4:	80800017 	ldw	r2,0(r16)
1000efd8:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
1000efdc:	00800044 	movi	r2,1
1000efe0:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
1000efe4:	880b883a 	mov	r5,r17
1000efe8:	e13ffb17 	ldw	r4,-20(fp)
1000efec:	00063d40 	call	100063d4 <_malloc_r>
1000eff0:	1027883a 	mov	r19,r2
1000eff4:	98000e1e 	bne	r19,zero,1000f030 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
1000eff8:	8080030b 	ldhu	r2,12(r16)
1000effc:	10bfffcc 	andi	r2,r2,65535
1000f000:	1080800c 	andi	r2,r2,512
1000f004:	1000221e 	bne	r2,zero,1000f090 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
1000f008:	8080030b 	ldhu	r2,12(r16)
1000f00c:	10800094 	ori	r2,r2,2
1000f010:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
1000f014:	808010c4 	addi	r2,r16,67
1000f018:	80800015 	stw	r2,0(r16)
1000f01c:	80800017 	ldw	r2,0(r16)
1000f020:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
1000f024:	00800044 	movi	r2,1
1000f028:	80800515 	stw	r2,20(r16)
1000f02c:	00001806 	br	1000f090 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
1000f030:	e0fffb17 	ldw	r3,-20(fp)
1000f034:	00840074 	movhi	r2,4097
1000f038:	10b6b004 	addi	r2,r2,-9536
1000f03c:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
1000f040:	8080030b 	ldhu	r2,12(r16)
1000f044:	10802014 	ori	r2,r2,128
1000f048:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
1000f04c:	84c00015 	stw	r19,0(r16)
1000f050:	80800017 	ldw	r2,0(r16)
1000f054:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
1000f058:	8805883a 	mov	r2,r17
1000f05c:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
1000f060:	90000b26 	beq	r18,zero,1000f090 <__smakebuf_r+0x208>
1000f064:	8080038b 	ldhu	r2,14(r16)
1000f068:	10bfffcc 	andi	r2,r2,65535
1000f06c:	10a0001c 	xori	r2,r2,32768
1000f070:	10a00004 	addi	r2,r2,-32768
1000f074:	100b883a 	mov	r5,r2
1000f078:	e13ffb17 	ldw	r4,-20(fp)
1000f07c:	001381c0 	call	1001381c <_isatty_r>
1000f080:	10000326 	beq	r2,zero,1000f090 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
1000f084:	8080030b 	ldhu	r2,12(r16)
1000f088:	10800054 	ori	r2,r2,1
1000f08c:	8080030d 	sth	r2,12(r16)
    }
}
1000f090:	e6fffc04 	addi	sp,fp,-16
1000f094:	dfc00517 	ldw	ra,20(sp)
1000f098:	df000417 	ldw	fp,16(sp)
1000f09c:	dcc00317 	ldw	r19,12(sp)
1000f0a0:	dc800217 	ldw	r18,8(sp)
1000f0a4:	dc400117 	ldw	r17,4(sp)
1000f0a8:	dc000017 	ldw	r16,0(sp)
1000f0ac:	dec00604 	addi	sp,sp,24
1000f0b0:	f800283a 	ret

1000f0b4 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
1000f0b4:	defff704 	addi	sp,sp,-36
1000f0b8:	df000815 	stw	fp,32(sp)
1000f0bc:	df000804 	addi	fp,sp,32
1000f0c0:	e13ffd15 	stw	r4,-12(fp)
1000f0c4:	e17ffe15 	stw	r5,-8(fp)
1000f0c8:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
1000f0cc:	e0bffd17 	ldw	r2,-12(fp)
1000f0d0:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
1000f0d4:	e0bffe17 	ldw	r2,-8(fp)
1000f0d8:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
1000f0dc:	00001006 	br	1000f120 <memchr+0x6c>
    {
      if (!length--)
1000f0e0:	e0bfff17 	ldw	r2,-4(fp)
1000f0e4:	10ffffc4 	addi	r3,r2,-1
1000f0e8:	e0ffff15 	stw	r3,-4(fp)
1000f0ec:	1000021e 	bne	r2,zero,1000f0f8 <memchr+0x44>
        return NULL;
1000f0f0:	0005883a 	mov	r2,zero
1000f0f4:	00005a06 	br	1000f260 <memchr+0x1ac>
      if (*src == d)
1000f0f8:	e0bff817 	ldw	r2,-32(fp)
1000f0fc:	10800003 	ldbu	r2,0(r2)
1000f100:	10c03fcc 	andi	r3,r2,255
1000f104:	e0bffc03 	ldbu	r2,-16(fp)
1000f108:	1880021e 	bne	r3,r2,1000f114 <memchr+0x60>
        return (void *) src;
1000f10c:	e0bff817 	ldw	r2,-32(fp)
1000f110:	00005306 	br	1000f260 <memchr+0x1ac>
      src++;
1000f114:	e0bff817 	ldw	r2,-32(fp)
1000f118:	10800044 	addi	r2,r2,1
1000f11c:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
1000f120:	e0bff817 	ldw	r2,-32(fp)
1000f124:	108000cc 	andi	r2,r2,3
1000f128:	103fed1e 	bne	r2,zero,1000f0e0 <__alt_data_end+0xf800f0e0>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
1000f12c:	e0bfff17 	ldw	r2,-4(fp)
1000f130:	10800130 	cmpltui	r2,r2,4
1000f134:	1000451e 	bne	r2,zero,1000f24c <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
1000f138:	e0bff817 	ldw	r2,-32(fp)
1000f13c:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
1000f140:	e0bffc03 	ldbu	r2,-16(fp)
1000f144:	1006923a 	slli	r3,r2,8
1000f148:	e0bffc03 	ldbu	r2,-16(fp)
1000f14c:	1884b03a 	or	r2,r3,r2
1000f150:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
1000f154:	e0bffa17 	ldw	r2,-24(fp)
1000f158:	1004943a 	slli	r2,r2,16
1000f15c:	e0fffa17 	ldw	r3,-24(fp)
1000f160:	1884b03a 	or	r2,r3,r2
1000f164:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000f168:	00800804 	movi	r2,32
1000f16c:	e0bffb15 	stw	r2,-20(fp)
1000f170:	00000906 	br	1000f198 <memchr+0xe4>
        mask = (mask << i) | mask;
1000f174:	e0fffa17 	ldw	r3,-24(fp)
1000f178:	e0bffb17 	ldw	r2,-20(fp)
1000f17c:	1884983a 	sll	r2,r3,r2
1000f180:	e0fffa17 	ldw	r3,-24(fp)
1000f184:	1884b03a 	or	r2,r3,r2
1000f188:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000f18c:	e0bffb17 	ldw	r2,-20(fp)
1000f190:	1085883a 	add	r2,r2,r2
1000f194:	e0bffb15 	stw	r2,-20(fp)
1000f198:	e0bffb17 	ldw	r2,-20(fp)
1000f19c:	10800830 	cmpltui	r2,r2,32
1000f1a0:	103ff41e 	bne	r2,zero,1000f174 <__alt_data_end+0xf800f174>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
1000f1a4:	00001706 	br	1000f204 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
1000f1a8:	e0bff917 	ldw	r2,-28(fp)
1000f1ac:	10c00017 	ldw	r3,0(r2)
1000f1b0:	e0bffa17 	ldw	r2,-24(fp)
1000f1b4:	1886f03a 	xor	r3,r3,r2
1000f1b8:	00bfbff4 	movhi	r2,65279
1000f1bc:	10bfbfc4 	addi	r2,r2,-257
1000f1c0:	1887883a 	add	r3,r3,r2
1000f1c4:	e0bff917 	ldw	r2,-28(fp)
1000f1c8:	11000017 	ldw	r4,0(r2)
1000f1cc:	e0bffa17 	ldw	r2,-24(fp)
1000f1d0:	2084f03a 	xor	r2,r4,r2
1000f1d4:	0084303a 	nor	r2,zero,r2
1000f1d8:	1886703a 	and	r3,r3,r2
1000f1dc:	00a02074 	movhi	r2,32897
1000f1e0:	10a02004 	addi	r2,r2,-32640
1000f1e4:	1884703a 	and	r2,r3,r2
1000f1e8:	10000a1e 	bne	r2,zero,1000f214 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
1000f1ec:	e0bfff17 	ldw	r2,-4(fp)
1000f1f0:	10bfff04 	addi	r2,r2,-4
1000f1f4:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
1000f1f8:	e0bff917 	ldw	r2,-28(fp)
1000f1fc:	10800104 	addi	r2,r2,4
1000f200:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
1000f204:	e0bfff17 	ldw	r2,-4(fp)
1000f208:	10800128 	cmpgeui	r2,r2,4
1000f20c:	103fe61e 	bne	r2,zero,1000f1a8 <__alt_data_end+0xf800f1a8>
1000f210:	00000106 	br	1000f218 <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
1000f214:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
1000f218:	e0bff917 	ldw	r2,-28(fp)
1000f21c:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
1000f220:	00000a06 	br	1000f24c <memchr+0x198>
    {
      if (*src == d)
1000f224:	e0bff817 	ldw	r2,-32(fp)
1000f228:	10800003 	ldbu	r2,0(r2)
1000f22c:	10c03fcc 	andi	r3,r2,255
1000f230:	e0bffc03 	ldbu	r2,-16(fp)
1000f234:	1880021e 	bne	r3,r2,1000f240 <memchr+0x18c>
        return (void *) src;
1000f238:	e0bff817 	ldw	r2,-32(fp)
1000f23c:	00000806 	br	1000f260 <memchr+0x1ac>
      src++;
1000f240:	e0bff817 	ldw	r2,-32(fp)
1000f244:	10800044 	addi	r2,r2,1
1000f248:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
1000f24c:	e0bfff17 	ldw	r2,-4(fp)
1000f250:	10ffffc4 	addi	r3,r2,-1
1000f254:	e0ffff15 	stw	r3,-4(fp)
1000f258:	103ff21e 	bne	r2,zero,1000f224 <__alt_data_end+0xf800f224>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
1000f25c:	0005883a 	mov	r2,zero
}
1000f260:	e037883a 	mov	sp,fp
1000f264:	df000017 	ldw	fp,0(sp)
1000f268:	dec00104 	addi	sp,sp,4
1000f26c:	f800283a 	ret

1000f270 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
1000f270:	defff804 	addi	sp,sp,-32
1000f274:	df000715 	stw	fp,28(sp)
1000f278:	df000704 	addi	fp,sp,28
1000f27c:	e13ffd15 	stw	r4,-12(fp)
1000f280:	e17ffe15 	stw	r5,-8(fp)
1000f284:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
1000f288:	e0bffd17 	ldw	r2,-12(fp)
1000f28c:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
1000f290:	e0bffe17 	ldw	r2,-8(fp)
1000f294:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
1000f298:	e0bfff17 	ldw	r2,-4(fp)
1000f29c:	10800430 	cmpltui	r2,r2,16
1000f2a0:	10004c1e 	bne	r2,zero,1000f3d4 <memcpy+0x164>
1000f2a4:	e0fffa17 	ldw	r3,-24(fp)
1000f2a8:	e0bff917 	ldw	r2,-28(fp)
1000f2ac:	1884b03a 	or	r2,r3,r2
1000f2b0:	108000cc 	andi	r2,r2,3
1000f2b4:	1000471e 	bne	r2,zero,1000f3d4 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
1000f2b8:	e0bff917 	ldw	r2,-28(fp)
1000f2bc:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
1000f2c0:	e0bffa17 	ldw	r2,-24(fp)
1000f2c4:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
1000f2c8:	00002306 	br	1000f358 <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
1000f2cc:	e0bffb17 	ldw	r2,-20(fp)
1000f2d0:	10c00104 	addi	r3,r2,4
1000f2d4:	e0fffb15 	stw	r3,-20(fp)
1000f2d8:	e0fffc17 	ldw	r3,-16(fp)
1000f2dc:	19000104 	addi	r4,r3,4
1000f2e0:	e13ffc15 	stw	r4,-16(fp)
1000f2e4:	18c00017 	ldw	r3,0(r3)
1000f2e8:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000f2ec:	e0bffb17 	ldw	r2,-20(fp)
1000f2f0:	10c00104 	addi	r3,r2,4
1000f2f4:	e0fffb15 	stw	r3,-20(fp)
1000f2f8:	e0fffc17 	ldw	r3,-16(fp)
1000f2fc:	19000104 	addi	r4,r3,4
1000f300:	e13ffc15 	stw	r4,-16(fp)
1000f304:	18c00017 	ldw	r3,0(r3)
1000f308:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000f30c:	e0bffb17 	ldw	r2,-20(fp)
1000f310:	10c00104 	addi	r3,r2,4
1000f314:	e0fffb15 	stw	r3,-20(fp)
1000f318:	e0fffc17 	ldw	r3,-16(fp)
1000f31c:	19000104 	addi	r4,r3,4
1000f320:	e13ffc15 	stw	r4,-16(fp)
1000f324:	18c00017 	ldw	r3,0(r3)
1000f328:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000f32c:	e0bffb17 	ldw	r2,-20(fp)
1000f330:	10c00104 	addi	r3,r2,4
1000f334:	e0fffb15 	stw	r3,-20(fp)
1000f338:	e0fffc17 	ldw	r3,-16(fp)
1000f33c:	19000104 	addi	r4,r3,4
1000f340:	e13ffc15 	stw	r4,-16(fp)
1000f344:	18c00017 	ldw	r3,0(r3)
1000f348:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
1000f34c:	e0bfff17 	ldw	r2,-4(fp)
1000f350:	10bffc04 	addi	r2,r2,-16
1000f354:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
1000f358:	e0bfff17 	ldw	r2,-4(fp)
1000f35c:	10800428 	cmpgeui	r2,r2,16
1000f360:	103fda1e 	bne	r2,zero,1000f2cc <__alt_data_end+0xf800f2cc>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
1000f364:	00000b06 	br	1000f394 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
1000f368:	e0bffb17 	ldw	r2,-20(fp)
1000f36c:	10c00104 	addi	r3,r2,4
1000f370:	e0fffb15 	stw	r3,-20(fp)
1000f374:	e0fffc17 	ldw	r3,-16(fp)
1000f378:	19000104 	addi	r4,r3,4
1000f37c:	e13ffc15 	stw	r4,-16(fp)
1000f380:	18c00017 	ldw	r3,0(r3)
1000f384:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
1000f388:	e0bfff17 	ldw	r2,-4(fp)
1000f38c:	10bfff04 	addi	r2,r2,-4
1000f390:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
1000f394:	e0bfff17 	ldw	r2,-4(fp)
1000f398:	10800128 	cmpgeui	r2,r2,4
1000f39c:	103ff21e 	bne	r2,zero,1000f368 <__alt_data_end+0xf800f368>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
1000f3a0:	e0bffb17 	ldw	r2,-20(fp)
1000f3a4:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
1000f3a8:	e0bffc17 	ldw	r2,-16(fp)
1000f3ac:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
1000f3b0:	00000806 	br	1000f3d4 <memcpy+0x164>
    *dst++ = *src++;
1000f3b4:	e0bff917 	ldw	r2,-28(fp)
1000f3b8:	10c00044 	addi	r3,r2,1
1000f3bc:	e0fff915 	stw	r3,-28(fp)
1000f3c0:	e0fffa17 	ldw	r3,-24(fp)
1000f3c4:	19000044 	addi	r4,r3,1
1000f3c8:	e13ffa15 	stw	r4,-24(fp)
1000f3cc:	18c00003 	ldbu	r3,0(r3)
1000f3d0:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
1000f3d4:	e0bfff17 	ldw	r2,-4(fp)
1000f3d8:	10ffffc4 	addi	r3,r2,-1
1000f3dc:	e0ffff15 	stw	r3,-4(fp)
1000f3e0:	103ff41e 	bne	r2,zero,1000f3b4 <__alt_data_end+0xf800f3b4>
    *dst++ = *src++;

  return dst0;
1000f3e4:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1000f3e8:	e037883a 	mov	sp,fp
1000f3ec:	df000017 	ldw	fp,0(sp)
1000f3f0:	dec00104 	addi	sp,sp,4
1000f3f4:	f800283a 	ret

1000f3f8 <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
1000f3f8:	defff804 	addi	sp,sp,-32
1000f3fc:	df000715 	stw	fp,28(sp)
1000f400:	df000704 	addi	fp,sp,28
1000f404:	e13ffd15 	stw	r4,-12(fp)
1000f408:	e17ffe15 	stw	r5,-8(fp)
1000f40c:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
1000f410:	e0bffd17 	ldw	r2,-12(fp)
1000f414:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
1000f418:	e0bffe17 	ldw	r2,-8(fp)
1000f41c:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
1000f420:	e0fffa17 	ldw	r3,-24(fp)
1000f424:	e0bff917 	ldw	r2,-28(fp)
1000f428:	18801d2e 	bgeu	r3,r2,1000f4a0 <memmove+0xa8>
1000f42c:	e0fffa17 	ldw	r3,-24(fp)
1000f430:	e0bfff17 	ldw	r2,-4(fp)
1000f434:	1885883a 	add	r2,r3,r2
1000f438:	e0fff917 	ldw	r3,-28(fp)
1000f43c:	1880182e 	bgeu	r3,r2,1000f4a0 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
1000f440:	e0fffa17 	ldw	r3,-24(fp)
1000f444:	e0bfff17 	ldw	r2,-4(fp)
1000f448:	1885883a 	add	r2,r3,r2
1000f44c:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
1000f450:	e0fff917 	ldw	r3,-28(fp)
1000f454:	e0bfff17 	ldw	r2,-4(fp)
1000f458:	1885883a 	add	r2,r3,r2
1000f45c:	e0bff915 	stw	r2,-28(fp)
      while (length--)
1000f460:	00000a06 	br	1000f48c <memmove+0x94>
	{
	  *--dst = *--src;
1000f464:	e0bff917 	ldw	r2,-28(fp)
1000f468:	10bfffc4 	addi	r2,r2,-1
1000f46c:	e0bff915 	stw	r2,-28(fp)
1000f470:	e0bffa17 	ldw	r2,-24(fp)
1000f474:	10bfffc4 	addi	r2,r2,-1
1000f478:	e0bffa15 	stw	r2,-24(fp)
1000f47c:	e0bffa17 	ldw	r2,-24(fp)
1000f480:	10c00003 	ldbu	r3,0(r2)
1000f484:	e0bff917 	ldw	r2,-28(fp)
1000f488:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
1000f48c:	e0bfff17 	ldw	r2,-4(fp)
1000f490:	10ffffc4 	addi	r3,r2,-1
1000f494:	e0ffff15 	stw	r3,-4(fp)
1000f498:	103ff21e 	bne	r2,zero,1000f464 <__alt_data_end+0xf800f464>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
1000f49c:	00005306 	br	1000f5ec <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
1000f4a0:	e0bfff17 	ldw	r2,-4(fp)
1000f4a4:	10800430 	cmpltui	r2,r2,16
1000f4a8:	10004c1e 	bne	r2,zero,1000f5dc <memmove+0x1e4>
1000f4ac:	e0fffa17 	ldw	r3,-24(fp)
1000f4b0:	e0bff917 	ldw	r2,-28(fp)
1000f4b4:	1884b03a 	or	r2,r3,r2
1000f4b8:	108000cc 	andi	r2,r2,3
1000f4bc:	1000471e 	bne	r2,zero,1000f5dc <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
1000f4c0:	e0bff917 	ldw	r2,-28(fp)
1000f4c4:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
1000f4c8:	e0bffa17 	ldw	r2,-24(fp)
1000f4cc:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
1000f4d0:	00002306 	br	1000f560 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
1000f4d4:	e0bffb17 	ldw	r2,-20(fp)
1000f4d8:	10c00104 	addi	r3,r2,4
1000f4dc:	e0fffb15 	stw	r3,-20(fp)
1000f4e0:	e0fffc17 	ldw	r3,-16(fp)
1000f4e4:	19000104 	addi	r4,r3,4
1000f4e8:	e13ffc15 	stw	r4,-16(fp)
1000f4ec:	18c00017 	ldw	r3,0(r3)
1000f4f0:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
1000f4f4:	e0bffb17 	ldw	r2,-20(fp)
1000f4f8:	10c00104 	addi	r3,r2,4
1000f4fc:	e0fffb15 	stw	r3,-20(fp)
1000f500:	e0fffc17 	ldw	r3,-16(fp)
1000f504:	19000104 	addi	r4,r3,4
1000f508:	e13ffc15 	stw	r4,-16(fp)
1000f50c:	18c00017 	ldw	r3,0(r3)
1000f510:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
1000f514:	e0bffb17 	ldw	r2,-20(fp)
1000f518:	10c00104 	addi	r3,r2,4
1000f51c:	e0fffb15 	stw	r3,-20(fp)
1000f520:	e0fffc17 	ldw	r3,-16(fp)
1000f524:	19000104 	addi	r4,r3,4
1000f528:	e13ffc15 	stw	r4,-16(fp)
1000f52c:	18c00017 	ldw	r3,0(r3)
1000f530:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
1000f534:	e0bffb17 	ldw	r2,-20(fp)
1000f538:	10c00104 	addi	r3,r2,4
1000f53c:	e0fffb15 	stw	r3,-20(fp)
1000f540:	e0fffc17 	ldw	r3,-16(fp)
1000f544:	19000104 	addi	r4,r3,4
1000f548:	e13ffc15 	stw	r4,-16(fp)
1000f54c:	18c00017 	ldw	r3,0(r3)
1000f550:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
1000f554:	e0bfff17 	ldw	r2,-4(fp)
1000f558:	10bffc04 	addi	r2,r2,-16
1000f55c:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
1000f560:	e0bfff17 	ldw	r2,-4(fp)
1000f564:	10800428 	cmpgeui	r2,r2,16
1000f568:	103fda1e 	bne	r2,zero,1000f4d4 <__alt_data_end+0xf800f4d4>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
1000f56c:	00000b06 	br	1000f59c <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
1000f570:	e0bffb17 	ldw	r2,-20(fp)
1000f574:	10c00104 	addi	r3,r2,4
1000f578:	e0fffb15 	stw	r3,-20(fp)
1000f57c:	e0fffc17 	ldw	r3,-16(fp)
1000f580:	19000104 	addi	r4,r3,4
1000f584:	e13ffc15 	stw	r4,-16(fp)
1000f588:	18c00017 	ldw	r3,0(r3)
1000f58c:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
1000f590:	e0bfff17 	ldw	r2,-4(fp)
1000f594:	10bfff04 	addi	r2,r2,-4
1000f598:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
1000f59c:	e0bfff17 	ldw	r2,-4(fp)
1000f5a0:	10800128 	cmpgeui	r2,r2,4
1000f5a4:	103ff21e 	bne	r2,zero,1000f570 <__alt_data_end+0xf800f570>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
1000f5a8:	e0bffb17 	ldw	r2,-20(fp)
1000f5ac:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
1000f5b0:	e0bffc17 	ldw	r2,-16(fp)
1000f5b4:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
1000f5b8:	00000806 	br	1000f5dc <memmove+0x1e4>
        {
          *dst++ = *src++;
1000f5bc:	e0bff917 	ldw	r2,-28(fp)
1000f5c0:	10c00044 	addi	r3,r2,1
1000f5c4:	e0fff915 	stw	r3,-28(fp)
1000f5c8:	e0fffa17 	ldw	r3,-24(fp)
1000f5cc:	19000044 	addi	r4,r3,1
1000f5d0:	e13ffa15 	stw	r4,-24(fp)
1000f5d4:	18c00003 	ldbu	r3,0(r3)
1000f5d8:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
1000f5dc:	e0bfff17 	ldw	r2,-4(fp)
1000f5e0:	10ffffc4 	addi	r3,r2,-1
1000f5e4:	e0ffff15 	stw	r3,-4(fp)
1000f5e8:	103ff41e 	bne	r2,zero,1000f5bc <__alt_data_end+0xf800f5bc>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
1000f5ec:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1000f5f0:	e037883a 	mov	sp,fp
1000f5f4:	df000017 	ldw	fp,0(sp)
1000f5f8:	dec00104 	addi	sp,sp,4
1000f5fc:	f800283a 	ret

1000f600 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
1000f600:	defffa04 	addi	sp,sp,-24
1000f604:	dfc00515 	stw	ra,20(sp)
1000f608:	df000415 	stw	fp,16(sp)
1000f60c:	df000404 	addi	fp,sp,16
1000f610:	e13ffe15 	stw	r4,-8(fp)
1000f614:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
1000f618:	e0bffe17 	ldw	r2,-8(fp)
1000f61c:	10801317 	ldw	r2,76(r2)
1000f620:	10000c1e 	bne	r2,zero,1000f654 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
1000f624:	01800844 	movi	r6,33
1000f628:	01400104 	movi	r5,4
1000f62c:	e13ffe17 	ldw	r4,-8(fp)
1000f630:	0005abc0 	call	10005abc <_calloc_r>
1000f634:	1007883a 	mov	r3,r2
1000f638:	e0bffe17 	ldw	r2,-8(fp)
1000f63c:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
1000f640:	e0bffe17 	ldw	r2,-8(fp)
1000f644:	10801317 	ldw	r2,76(r2)
1000f648:	1000021e 	bne	r2,zero,1000f654 <_Balloc+0x54>
	{
	  return NULL;
1000f64c:	0005883a 	mov	r2,zero
1000f650:	00003206 	br	1000f71c <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
1000f654:	e0bffe17 	ldw	r2,-8(fp)
1000f658:	10c01317 	ldw	r3,76(r2)
1000f65c:	e0bfff17 	ldw	r2,-4(fp)
1000f660:	1085883a 	add	r2,r2,r2
1000f664:	1085883a 	add	r2,r2,r2
1000f668:	1885883a 	add	r2,r3,r2
1000f66c:	10800017 	ldw	r2,0(r2)
1000f670:	e0bffc15 	stw	r2,-16(fp)
1000f674:	e0bffc17 	ldw	r2,-16(fp)
1000f678:	10000a26 	beq	r2,zero,1000f6a4 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
1000f67c:	e0bffe17 	ldw	r2,-8(fp)
1000f680:	10c01317 	ldw	r3,76(r2)
1000f684:	e0bfff17 	ldw	r2,-4(fp)
1000f688:	1085883a 	add	r2,r2,r2
1000f68c:	1085883a 	add	r2,r2,r2
1000f690:	1885883a 	add	r2,r3,r2
1000f694:	e0fffc17 	ldw	r3,-16(fp)
1000f698:	18c00017 	ldw	r3,0(r3)
1000f69c:	10c00015 	stw	r3,0(r2)
1000f6a0:	00001706 	br	1000f700 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
1000f6a4:	00c00044 	movi	r3,1
1000f6a8:	e0bfff17 	ldw	r2,-4(fp)
1000f6ac:	1884983a 	sll	r2,r3,r2
1000f6b0:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
1000f6b4:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
1000f6b8:	10800144 	addi	r2,r2,5
1000f6bc:	1085883a 	add	r2,r2,r2
1000f6c0:	1085883a 	add	r2,r2,r2
1000f6c4:	100d883a 	mov	r6,r2
1000f6c8:	01400044 	movi	r5,1
1000f6cc:	e13ffe17 	ldw	r4,-8(fp)
1000f6d0:	0005abc0 	call	10005abc <_calloc_r>
1000f6d4:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
1000f6d8:	e0bffc17 	ldw	r2,-16(fp)
1000f6dc:	1000021e 	bne	r2,zero,1000f6e8 <_Balloc+0xe8>
1000f6e0:	0005883a 	mov	r2,zero
1000f6e4:	00000d06 	br	1000f71c <_Balloc+0x11c>
      rv->_k = k;
1000f6e8:	e0bffc17 	ldw	r2,-16(fp)
1000f6ec:	e0ffff17 	ldw	r3,-4(fp)
1000f6f0:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
1000f6f4:	e0bffc17 	ldw	r2,-16(fp)
1000f6f8:	e0fffd17 	ldw	r3,-12(fp)
1000f6fc:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
1000f700:	e0bffc17 	ldw	r2,-16(fp)
1000f704:	10000415 	stw	zero,16(r2)
1000f708:	e0bffc17 	ldw	r2,-16(fp)
1000f70c:	10c00417 	ldw	r3,16(r2)
1000f710:	e0bffc17 	ldw	r2,-16(fp)
1000f714:	10c00315 	stw	r3,12(r2)
  return rv;
1000f718:	e0bffc17 	ldw	r2,-16(fp)
}
1000f71c:	e037883a 	mov	sp,fp
1000f720:	dfc00117 	ldw	ra,4(sp)
1000f724:	df000017 	ldw	fp,0(sp)
1000f728:	dec00204 	addi	sp,sp,8
1000f72c:	f800283a 	ret

1000f730 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
1000f730:	defffd04 	addi	sp,sp,-12
1000f734:	df000215 	stw	fp,8(sp)
1000f738:	df000204 	addi	fp,sp,8
1000f73c:	e13ffe15 	stw	r4,-8(fp)
1000f740:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
1000f744:	e0bfff17 	ldw	r2,-4(fp)
1000f748:	10001326 	beq	r2,zero,1000f798 <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
1000f74c:	e0bffe17 	ldw	r2,-8(fp)
1000f750:	10c01317 	ldw	r3,76(r2)
1000f754:	e0bfff17 	ldw	r2,-4(fp)
1000f758:	10800117 	ldw	r2,4(r2)
1000f75c:	1085883a 	add	r2,r2,r2
1000f760:	1085883a 	add	r2,r2,r2
1000f764:	1885883a 	add	r2,r3,r2
1000f768:	10c00017 	ldw	r3,0(r2)
1000f76c:	e0bfff17 	ldw	r2,-4(fp)
1000f770:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
1000f774:	e0bffe17 	ldw	r2,-8(fp)
1000f778:	10c01317 	ldw	r3,76(r2)
1000f77c:	e0bfff17 	ldw	r2,-4(fp)
1000f780:	10800117 	ldw	r2,4(r2)
1000f784:	1085883a 	add	r2,r2,r2
1000f788:	1085883a 	add	r2,r2,r2
1000f78c:	1885883a 	add	r2,r3,r2
1000f790:	e0ffff17 	ldw	r3,-4(fp)
1000f794:	10c00015 	stw	r3,0(r2)
    }
}
1000f798:	0001883a 	nop
1000f79c:	e037883a 	mov	sp,fp
1000f7a0:	df000017 	ldw	fp,0(sp)
1000f7a4:	dec00104 	addi	sp,sp,4
1000f7a8:	f800283a 	ret

1000f7ac <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
1000f7ac:	defff304 	addi	sp,sp,-52
1000f7b0:	dfc00c15 	stw	ra,48(sp)
1000f7b4:	df000b15 	stw	fp,44(sp)
1000f7b8:	df000b04 	addi	fp,sp,44
1000f7bc:	e13ffc15 	stw	r4,-16(fp)
1000f7c0:	e17ffd15 	stw	r5,-12(fp)
1000f7c4:	e1bffe15 	stw	r6,-8(fp)
1000f7c8:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
1000f7cc:	e0bffd17 	ldw	r2,-12(fp)
1000f7d0:	10800417 	ldw	r2,16(r2)
1000f7d4:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
1000f7d8:	e0bffd17 	ldw	r2,-12(fp)
1000f7dc:	10800504 	addi	r2,r2,20
1000f7e0:	e0bff615 	stw	r2,-40(fp)
  i = 0;
1000f7e4:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
1000f7e8:	e0bff617 	ldw	r2,-40(fp)
1000f7ec:	10800017 	ldw	r2,0(r2)
1000f7f0:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
1000f7f4:	e0bff817 	ldw	r2,-32(fp)
1000f7f8:	10bfffcc 	andi	r2,r2,65535
1000f7fc:	e0fffe17 	ldw	r3,-8(fp)
1000f800:	180b883a 	mov	r5,r3
1000f804:	1009883a 	mov	r4,r2
1000f808:	00059d40 	call	100059d4 <__mulsi3>
1000f80c:	1007883a 	mov	r3,r2
1000f810:	e0bfff17 	ldw	r2,-4(fp)
1000f814:	1885883a 	add	r2,r3,r2
1000f818:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
1000f81c:	e0bff817 	ldw	r2,-32(fp)
1000f820:	1004d43a 	srli	r2,r2,16
1000f824:	e0fffe17 	ldw	r3,-8(fp)
1000f828:	180b883a 	mov	r5,r3
1000f82c:	1009883a 	mov	r4,r2
1000f830:	00059d40 	call	100059d4 <__mulsi3>
1000f834:	1007883a 	mov	r3,r2
1000f838:	e0bff917 	ldw	r2,-28(fp)
1000f83c:	1004d43a 	srli	r2,r2,16
1000f840:	1885883a 	add	r2,r3,r2
1000f844:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
1000f848:	e0bffa17 	ldw	r2,-24(fp)
1000f84c:	1004d43a 	srli	r2,r2,16
1000f850:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
1000f854:	e0bff617 	ldw	r2,-40(fp)
1000f858:	10c00104 	addi	r3,r2,4
1000f85c:	e0fff615 	stw	r3,-40(fp)
1000f860:	e0fffa17 	ldw	r3,-24(fp)
1000f864:	1808943a 	slli	r4,r3,16
1000f868:	e0fff917 	ldw	r3,-28(fp)
1000f86c:	18ffffcc 	andi	r3,r3,65535
1000f870:	20c7883a 	add	r3,r4,r3
1000f874:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
1000f878:	e0bff517 	ldw	r2,-44(fp)
1000f87c:	10800044 	addi	r2,r2,1
1000f880:	e0bff515 	stw	r2,-44(fp)
1000f884:	e0fff517 	ldw	r3,-44(fp)
1000f888:	e0bff717 	ldw	r2,-36(fp)
1000f88c:	18bfd616 	blt	r3,r2,1000f7e8 <__alt_data_end+0xf800f7e8>
  if (a)
1000f890:	e0bfff17 	ldw	r2,-4(fp)
1000f894:	10002a26 	beq	r2,zero,1000f940 <__multadd+0x194>
    {
      if (wds >= b->_maxwds)
1000f898:	e0bffd17 	ldw	r2,-12(fp)
1000f89c:	10800217 	ldw	r2,8(r2)
1000f8a0:	e0fff717 	ldw	r3,-36(fp)
1000f8a4:	18801916 	blt	r3,r2,1000f90c <__multadd+0x160>
	{
	  b1 = Balloc (ptr, b->_k + 1);
1000f8a8:	e0bffd17 	ldw	r2,-12(fp)
1000f8ac:	10800117 	ldw	r2,4(r2)
1000f8b0:	10800044 	addi	r2,r2,1
1000f8b4:	100b883a 	mov	r5,r2
1000f8b8:	e13ffc17 	ldw	r4,-16(fp)
1000f8bc:	000f6000 	call	1000f600 <_Balloc>
1000f8c0:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
1000f8c4:	e0bffb17 	ldw	r2,-20(fp)
1000f8c8:	10c00304 	addi	r3,r2,12
1000f8cc:	e0bffd17 	ldw	r2,-12(fp)
1000f8d0:	11000304 	addi	r4,r2,12
1000f8d4:	e0bffd17 	ldw	r2,-12(fp)
1000f8d8:	10800417 	ldw	r2,16(r2)
1000f8dc:	10800084 	addi	r2,r2,2
1000f8e0:	1085883a 	add	r2,r2,r2
1000f8e4:	1085883a 	add	r2,r2,r2
1000f8e8:	100d883a 	mov	r6,r2
1000f8ec:	200b883a 	mov	r5,r4
1000f8f0:	1809883a 	mov	r4,r3
1000f8f4:	000f2700 	call	1000f270 <memcpy>
	  Bfree (ptr, b);
1000f8f8:	e17ffd17 	ldw	r5,-12(fp)
1000f8fc:	e13ffc17 	ldw	r4,-16(fp)
1000f900:	000f7300 	call	1000f730 <_Bfree>
	  b = b1;
1000f904:	e0bffb17 	ldw	r2,-20(fp)
1000f908:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
1000f90c:	e0bff717 	ldw	r2,-36(fp)
1000f910:	10c00044 	addi	r3,r2,1
1000f914:	e0fff715 	stw	r3,-36(fp)
1000f918:	e0ffff17 	ldw	r3,-4(fp)
1000f91c:	e13ffd17 	ldw	r4,-12(fp)
1000f920:	10800144 	addi	r2,r2,5
1000f924:	1085883a 	add	r2,r2,r2
1000f928:	1085883a 	add	r2,r2,r2
1000f92c:	2085883a 	add	r2,r4,r2
1000f930:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
1000f934:	e0bffd17 	ldw	r2,-12(fp)
1000f938:	e0fff717 	ldw	r3,-36(fp)
1000f93c:	10c00415 	stw	r3,16(r2)
    }
  return b;
1000f940:	e0bffd17 	ldw	r2,-12(fp)
}
1000f944:	e037883a 	mov	sp,fp
1000f948:	dfc00117 	ldw	ra,4(sp)
1000f94c:	df000017 	ldw	fp,0(sp)
1000f950:	dec00204 	addi	sp,sp,8
1000f954:	f800283a 	ret

1000f958 <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
1000f958:	defff504 	addi	sp,sp,-44
1000f95c:	dfc00a15 	stw	ra,40(sp)
1000f960:	df000915 	stw	fp,36(sp)
1000f964:	df000904 	addi	fp,sp,36
1000f968:	e13ffc15 	stw	r4,-16(fp)
1000f96c:	e17ffd15 	stw	r5,-12(fp)
1000f970:	e1bffe15 	stw	r6,-8(fp)
1000f974:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
1000f978:	e0bfff17 	ldw	r2,-4(fp)
1000f97c:	10800204 	addi	r2,r2,8
1000f980:	01400244 	movi	r5,9
1000f984:	1009883a 	mov	r4,r2
1000f988:	00023640 	call	10002364 <__divsi3>
1000f98c:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
1000f990:	e03ff915 	stw	zero,-28(fp)
1000f994:	00800044 	movi	r2,1
1000f998:	e0bffa15 	stw	r2,-24(fp)
1000f99c:	00000606 	br	1000f9b8 <__s2b+0x60>
1000f9a0:	e0bffa17 	ldw	r2,-24(fp)
1000f9a4:	1085883a 	add	r2,r2,r2
1000f9a8:	e0bffa15 	stw	r2,-24(fp)
1000f9ac:	e0bff917 	ldw	r2,-28(fp)
1000f9b0:	10800044 	addi	r2,r2,1
1000f9b4:	e0bff915 	stw	r2,-28(fp)
1000f9b8:	e0bffb17 	ldw	r2,-20(fp)
1000f9bc:	e0fffa17 	ldw	r3,-24(fp)
1000f9c0:	18bff716 	blt	r3,r2,1000f9a0 <__alt_data_end+0xf800f9a0>
#ifdef Pack_32
  b = Balloc (ptr, k);
1000f9c4:	e17ff917 	ldw	r5,-28(fp)
1000f9c8:	e13ffc17 	ldw	r4,-16(fp)
1000f9cc:	000f6000 	call	1000f600 <_Balloc>
1000f9d0:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
1000f9d4:	e0bff717 	ldw	r2,-36(fp)
1000f9d8:	e0c00217 	ldw	r3,8(fp)
1000f9dc:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
1000f9e0:	e0bff717 	ldw	r2,-36(fp)
1000f9e4:	00c00044 	movi	r3,1
1000f9e8:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
1000f9ec:	00800244 	movi	r2,9
1000f9f0:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
1000f9f4:	e0bffe17 	ldw	r2,-8(fp)
1000f9f8:	10800290 	cmplti	r2,r2,10
1000f9fc:	10001b1e 	bne	r2,zero,1000fa6c <__s2b+0x114>
    {
      s += 9;
1000fa00:	e0bffd17 	ldw	r2,-12(fp)
1000fa04:	10800244 	addi	r2,r2,9
1000fa08:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
1000fa0c:	e0bffd17 	ldw	r2,-12(fp)
1000fa10:	10c00044 	addi	r3,r2,1
1000fa14:	e0fffd15 	stw	r3,-12(fp)
1000fa18:	10800003 	ldbu	r2,0(r2)
1000fa1c:	10803fcc 	andi	r2,r2,255
1000fa20:	1080201c 	xori	r2,r2,128
1000fa24:	10bfe004 	addi	r2,r2,-128
1000fa28:	10bff404 	addi	r2,r2,-48
1000fa2c:	100f883a 	mov	r7,r2
1000fa30:	01800284 	movi	r6,10
1000fa34:	e17ff717 	ldw	r5,-36(fp)
1000fa38:	e13ffc17 	ldw	r4,-16(fp)
1000fa3c:	000f7ac0 	call	1000f7ac <__multadd>
1000fa40:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
1000fa44:	e0bff817 	ldw	r2,-32(fp)
1000fa48:	10800044 	addi	r2,r2,1
1000fa4c:	e0bff815 	stw	r2,-32(fp)
1000fa50:	e0fff817 	ldw	r3,-32(fp)
1000fa54:	e0bffe17 	ldw	r2,-8(fp)
1000fa58:	18bfec16 	blt	r3,r2,1000fa0c <__alt_data_end+0xf800fa0c>
      s++;
1000fa5c:	e0bffd17 	ldw	r2,-12(fp)
1000fa60:	10800044 	addi	r2,r2,1
1000fa64:	e0bffd15 	stw	r2,-12(fp)
1000fa68:	00001506 	br	1000fac0 <__s2b+0x168>
    }
  else
    s += 10;
1000fa6c:	e0bffd17 	ldw	r2,-12(fp)
1000fa70:	10800284 	addi	r2,r2,10
1000fa74:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
1000fa78:	00001106 	br	1000fac0 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
1000fa7c:	e0bffd17 	ldw	r2,-12(fp)
1000fa80:	10c00044 	addi	r3,r2,1
1000fa84:	e0fffd15 	stw	r3,-12(fp)
1000fa88:	10800003 	ldbu	r2,0(r2)
1000fa8c:	10803fcc 	andi	r2,r2,255
1000fa90:	1080201c 	xori	r2,r2,128
1000fa94:	10bfe004 	addi	r2,r2,-128
1000fa98:	10bff404 	addi	r2,r2,-48
1000fa9c:	100f883a 	mov	r7,r2
1000faa0:	01800284 	movi	r6,10
1000faa4:	e17ff717 	ldw	r5,-36(fp)
1000faa8:	e13ffc17 	ldw	r4,-16(fp)
1000faac:	000f7ac0 	call	1000f7ac <__multadd>
1000fab0:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
1000fab4:	e0bff817 	ldw	r2,-32(fp)
1000fab8:	10800044 	addi	r2,r2,1
1000fabc:	e0bff815 	stw	r2,-32(fp)
1000fac0:	e0fff817 	ldw	r3,-32(fp)
1000fac4:	e0bfff17 	ldw	r2,-4(fp)
1000fac8:	18bfec16 	blt	r3,r2,1000fa7c <__alt_data_end+0xf800fa7c>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
1000facc:	e0bff717 	ldw	r2,-36(fp)
}
1000fad0:	e037883a 	mov	sp,fp
1000fad4:	dfc00117 	ldw	ra,4(sp)
1000fad8:	df000017 	ldw	fp,0(sp)
1000fadc:	dec00204 	addi	sp,sp,8
1000fae0:	f800283a 	ret

1000fae4 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
1000fae4:	defffe04 	addi	sp,sp,-8
1000fae8:	df000115 	stw	fp,4(sp)
1000faec:	dc000015 	stw	r16,0(sp)
1000faf0:	df000104 	addi	fp,sp,4
1000faf4:	2005883a 	mov	r2,r4
  register int k = 0;
1000faf8:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
1000fafc:	10ffffec 	andhi	r3,r2,65535
1000fb00:	1800021e 	bne	r3,zero,1000fb0c <__hi0bits+0x28>
    {
      k = 16;
1000fb04:	04000404 	movi	r16,16
      x <<= 16;
1000fb08:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
1000fb0c:	10ffc02c 	andhi	r3,r2,65280
1000fb10:	1800021e 	bne	r3,zero,1000fb1c <__hi0bits+0x38>
    {
      k += 8;
1000fb14:	84000204 	addi	r16,r16,8
      x <<= 8;
1000fb18:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
1000fb1c:	10fc002c 	andhi	r3,r2,61440
1000fb20:	1800021e 	bne	r3,zero,1000fb2c <__hi0bits+0x48>
    {
      k += 4;
1000fb24:	84000104 	addi	r16,r16,4
      x <<= 4;
1000fb28:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
1000fb2c:	10f0002c 	andhi	r3,r2,49152
1000fb30:	1800031e 	bne	r3,zero,1000fb40 <__hi0bits+0x5c>
    {
      k += 2;
1000fb34:	84000084 	addi	r16,r16,2
      x <<= 2;
1000fb38:	1085883a 	add	r2,r2,r2
1000fb3c:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
1000fb40:	1007883a 	mov	r3,r2
1000fb44:	18000516 	blt	r3,zero,1000fb5c <__hi0bits+0x78>
    {
      k++;
1000fb48:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
1000fb4c:	1090002c 	andhi	r2,r2,16384
1000fb50:	1000021e 	bne	r2,zero,1000fb5c <__hi0bits+0x78>
	return 32;
1000fb54:	00800804 	movi	r2,32
1000fb58:	00000106 	br	1000fb60 <__hi0bits+0x7c>
    }
  return k;
1000fb5c:	8005883a 	mov	r2,r16
}
1000fb60:	e6ffff04 	addi	sp,fp,-4
1000fb64:	df000117 	ldw	fp,4(sp)
1000fb68:	dc000017 	ldw	r16,0(sp)
1000fb6c:	dec00204 	addi	sp,sp,8
1000fb70:	f800283a 	ret

1000fb74 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
1000fb74:	defffc04 	addi	sp,sp,-16
1000fb78:	df000315 	stw	fp,12(sp)
1000fb7c:	dc400215 	stw	r17,8(sp)
1000fb80:	dc000115 	stw	r16,4(sp)
1000fb84:	df000304 	addi	fp,sp,12
1000fb88:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
1000fb8c:	e0bffd17 	ldw	r2,-12(fp)
1000fb90:	14000017 	ldw	r16,0(r2)

  if (x & 7)
1000fb94:	808001cc 	andi	r2,r16,7
1000fb98:	10001026 	beq	r2,zero,1000fbdc <__lo0bits+0x68>
    {
      if (x & 1)
1000fb9c:	8080004c 	andi	r2,r16,1
1000fba0:	10000226 	beq	r2,zero,1000fbac <__lo0bits+0x38>
	return 0;
1000fba4:	0005883a 	mov	r2,zero
1000fba8:	00002706 	br	1000fc48 <__lo0bits+0xd4>
      if (x & 2)
1000fbac:	8080008c 	andi	r2,r16,2
1000fbb0:	10000526 	beq	r2,zero,1000fbc8 <__lo0bits+0x54>
	{
	  *y = x >> 1;
1000fbb4:	8006d07a 	srli	r3,r16,1
1000fbb8:	e0bffd17 	ldw	r2,-12(fp)
1000fbbc:	10c00015 	stw	r3,0(r2)
	  return 1;
1000fbc0:	00800044 	movi	r2,1
1000fbc4:	00002006 	br	1000fc48 <__lo0bits+0xd4>
	}
      *y = x >> 2;
1000fbc8:	8006d0ba 	srli	r3,r16,2
1000fbcc:	e0bffd17 	ldw	r2,-12(fp)
1000fbd0:	10c00015 	stw	r3,0(r2)
      return 2;
1000fbd4:	00800084 	movi	r2,2
1000fbd8:	00001b06 	br	1000fc48 <__lo0bits+0xd4>
    }
  k = 0;
1000fbdc:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
1000fbe0:	80bfffcc 	andi	r2,r16,65535
1000fbe4:	1000021e 	bne	r2,zero,1000fbf0 <__lo0bits+0x7c>
    {
      k = 16;
1000fbe8:	04400404 	movi	r17,16
      x >>= 16;
1000fbec:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
1000fbf0:	80803fcc 	andi	r2,r16,255
1000fbf4:	1000021e 	bne	r2,zero,1000fc00 <__lo0bits+0x8c>
    {
      k += 8;
1000fbf8:	8c400204 	addi	r17,r17,8
      x >>= 8;
1000fbfc:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
1000fc00:	808003cc 	andi	r2,r16,15
1000fc04:	1000021e 	bne	r2,zero,1000fc10 <__lo0bits+0x9c>
    {
      k += 4;
1000fc08:	8c400104 	addi	r17,r17,4
      x >>= 4;
1000fc0c:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
1000fc10:	808000cc 	andi	r2,r16,3
1000fc14:	1000021e 	bne	r2,zero,1000fc20 <__lo0bits+0xac>
    {
      k += 2;
1000fc18:	8c400084 	addi	r17,r17,2
      x >>= 2;
1000fc1c:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
1000fc20:	8080004c 	andi	r2,r16,1
1000fc24:	1000051e 	bne	r2,zero,1000fc3c <__lo0bits+0xc8>
    {
      k++;
1000fc28:	8c400044 	addi	r17,r17,1
      x >>= 1;
1000fc2c:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
1000fc30:	8000021e 	bne	r16,zero,1000fc3c <__lo0bits+0xc8>
	return 32;
1000fc34:	00800804 	movi	r2,32
1000fc38:	00000306 	br	1000fc48 <__lo0bits+0xd4>
    }
  *y = x;
1000fc3c:	e0bffd17 	ldw	r2,-12(fp)
1000fc40:	14000015 	stw	r16,0(r2)
  return k;
1000fc44:	8805883a 	mov	r2,r17
}
1000fc48:	e6fffe04 	addi	sp,fp,-8
1000fc4c:	df000217 	ldw	fp,8(sp)
1000fc50:	dc400117 	ldw	r17,4(sp)
1000fc54:	dc000017 	ldw	r16,0(sp)
1000fc58:	dec00304 	addi	sp,sp,12
1000fc5c:	f800283a 	ret

1000fc60 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
1000fc60:	defffb04 	addi	sp,sp,-20
1000fc64:	dfc00415 	stw	ra,16(sp)
1000fc68:	df000315 	stw	fp,12(sp)
1000fc6c:	df000304 	addi	fp,sp,12
1000fc70:	e13ffe15 	stw	r4,-8(fp)
1000fc74:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
1000fc78:	01400044 	movi	r5,1
1000fc7c:	e13ffe17 	ldw	r4,-8(fp)
1000fc80:	000f6000 	call	1000f600 <_Balloc>
1000fc84:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
1000fc88:	e0ffff17 	ldw	r3,-4(fp)
1000fc8c:	e0bffd17 	ldw	r2,-12(fp)
1000fc90:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
1000fc94:	e0bffd17 	ldw	r2,-12(fp)
1000fc98:	00c00044 	movi	r3,1
1000fc9c:	10c00415 	stw	r3,16(r2)
  return b;
1000fca0:	e0bffd17 	ldw	r2,-12(fp)
}
1000fca4:	e037883a 	mov	sp,fp
1000fca8:	dfc00117 	ldw	ra,4(sp)
1000fcac:	df000017 	ldw	fp,0(sp)
1000fcb0:	dec00204 	addi	sp,sp,8
1000fcb4:	f800283a 	ret

1000fcb8 <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
1000fcb8:	deffeb04 	addi	sp,sp,-84
1000fcbc:	dfc01415 	stw	ra,80(sp)
1000fcc0:	df001315 	stw	fp,76(sp)
1000fcc4:	df001304 	addi	fp,sp,76
1000fcc8:	e13ffd15 	stw	r4,-12(fp)
1000fccc:	e17ffe15 	stw	r5,-8(fp)
1000fcd0:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
1000fcd4:	e0bffe17 	ldw	r2,-8(fp)
1000fcd8:	10c00417 	ldw	r3,16(r2)
1000fcdc:	e0bfff17 	ldw	r2,-4(fp)
1000fce0:	10800417 	ldw	r2,16(r2)
1000fce4:	1880060e 	bge	r3,r2,1000fd00 <__multiply+0x48>
    {
      c = a;
1000fce8:	e0bffe17 	ldw	r2,-8(fp)
1000fcec:	e0bff515 	stw	r2,-44(fp)
      a = b;
1000fcf0:	e0bfff17 	ldw	r2,-4(fp)
1000fcf4:	e0bffe15 	stw	r2,-8(fp)
      b = c;
1000fcf8:	e0bff517 	ldw	r2,-44(fp)
1000fcfc:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
1000fd00:	e0bffe17 	ldw	r2,-8(fp)
1000fd04:	10800117 	ldw	r2,4(r2)
1000fd08:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
1000fd0c:	e0bffe17 	ldw	r2,-8(fp)
1000fd10:	10800417 	ldw	r2,16(r2)
1000fd14:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
1000fd18:	e0bfff17 	ldw	r2,-4(fp)
1000fd1c:	10800417 	ldw	r2,16(r2)
1000fd20:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
1000fd24:	e0fff617 	ldw	r3,-40(fp)
1000fd28:	e0bff717 	ldw	r2,-36(fp)
1000fd2c:	1885883a 	add	r2,r3,r2
1000fd30:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
1000fd34:	e0bffe17 	ldw	r2,-8(fp)
1000fd38:	10c00217 	ldw	r3,8(r2)
1000fd3c:	e0bfee17 	ldw	r2,-72(fp)
1000fd40:	1880030e 	bge	r3,r2,1000fd50 <__multiply+0x98>
    k++;
1000fd44:	e0bfed17 	ldw	r2,-76(fp)
1000fd48:	10800044 	addi	r2,r2,1
1000fd4c:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
1000fd50:	e17fed17 	ldw	r5,-76(fp)
1000fd54:	e13ffd17 	ldw	r4,-12(fp)
1000fd58:	000f6000 	call	1000f600 <_Balloc>
1000fd5c:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
1000fd60:	e0bff517 	ldw	r2,-44(fp)
1000fd64:	10800504 	addi	r2,r2,20
1000fd68:	e0bff015 	stw	r2,-64(fp)
1000fd6c:	e0bfee17 	ldw	r2,-72(fp)
1000fd70:	1085883a 	add	r2,r2,r2
1000fd74:	1085883a 	add	r2,r2,r2
1000fd78:	1007883a 	mov	r3,r2
1000fd7c:	e0bff017 	ldw	r2,-64(fp)
1000fd80:	10c5883a 	add	r2,r2,r3
1000fd84:	e0bff815 	stw	r2,-32(fp)
1000fd88:	00000506 	br	1000fda0 <__multiply+0xe8>
    *x = 0;
1000fd8c:	e0bff017 	ldw	r2,-64(fp)
1000fd90:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
1000fd94:	e0bff017 	ldw	r2,-64(fp)
1000fd98:	10800104 	addi	r2,r2,4
1000fd9c:	e0bff015 	stw	r2,-64(fp)
1000fda0:	e0fff017 	ldw	r3,-64(fp)
1000fda4:	e0bff817 	ldw	r2,-32(fp)
1000fda8:	18bff836 	bltu	r3,r2,1000fd8c <__alt_data_end+0xf800fd8c>
    *x = 0;
  xa = a->_x;
1000fdac:	e0bffe17 	ldw	r2,-8(fp)
1000fdb0:	10800504 	addi	r2,r2,20
1000fdb4:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
1000fdb8:	e0bff617 	ldw	r2,-40(fp)
1000fdbc:	1085883a 	add	r2,r2,r2
1000fdc0:	1085883a 	add	r2,r2,r2
1000fdc4:	1007883a 	mov	r3,r2
1000fdc8:	e0bff817 	ldw	r2,-32(fp)
1000fdcc:	10c5883a 	add	r2,r2,r3
1000fdd0:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
1000fdd4:	e0bfff17 	ldw	r2,-4(fp)
1000fdd8:	10800504 	addi	r2,r2,20
1000fddc:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
1000fde0:	e0bff717 	ldw	r2,-36(fp)
1000fde4:	1085883a 	add	r2,r2,r2
1000fde8:	1085883a 	add	r2,r2,r2
1000fdec:	1007883a 	mov	r3,r2
1000fdf0:	e0bff117 	ldw	r2,-60(fp)
1000fdf4:	10c5883a 	add	r2,r2,r3
1000fdf8:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
1000fdfc:	e0bff517 	ldw	r2,-44(fp)
1000fe00:	10800504 	addi	r2,r2,20
1000fe04:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
1000fe08:	00008506 	br	10010020 <__multiply+0x368>
    {
      if ((y = *xb & 0xffff) != 0)
1000fe0c:	e0bff117 	ldw	r2,-60(fp)
1000fe10:	10800017 	ldw	r2,0(r2)
1000fe14:	10bfffcc 	andi	r2,r2,65535
1000fe18:	e0bffb15 	stw	r2,-20(fp)
1000fe1c:	e0bffb17 	ldw	r2,-20(fp)
1000fe20:	10003826 	beq	r2,zero,1000ff04 <__multiply+0x24c>
	{
	  x = xa;
1000fe24:	e0bff817 	ldw	r2,-32(fp)
1000fe28:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
1000fe2c:	e0bff317 	ldw	r2,-52(fp)
1000fe30:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
1000fe34:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
1000fe38:	e0bff017 	ldw	r2,-64(fp)
1000fe3c:	10800017 	ldw	r2,0(r2)
1000fe40:	10bfffcc 	andi	r2,r2,65535
1000fe44:	e17ffb17 	ldw	r5,-20(fp)
1000fe48:	1009883a 	mov	r4,r2
1000fe4c:	00059d40 	call	100059d4 <__mulsi3>
1000fe50:	1007883a 	mov	r3,r2
1000fe54:	e0bff217 	ldw	r2,-56(fp)
1000fe58:	10800017 	ldw	r2,0(r2)
1000fe5c:	10bfffcc 	andi	r2,r2,65535
1000fe60:	1887883a 	add	r3,r3,r2
1000fe64:	e0bfef17 	ldw	r2,-68(fp)
1000fe68:	1885883a 	add	r2,r3,r2
1000fe6c:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
1000fe70:	e0bffc17 	ldw	r2,-16(fp)
1000fe74:	1004d43a 	srli	r2,r2,16
1000fe78:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
1000fe7c:	e0bff017 	ldw	r2,-64(fp)
1000fe80:	10c00104 	addi	r3,r2,4
1000fe84:	e0fff015 	stw	r3,-64(fp)
1000fe88:	10800017 	ldw	r2,0(r2)
1000fe8c:	1004d43a 	srli	r2,r2,16
1000fe90:	e17ffb17 	ldw	r5,-20(fp)
1000fe94:	1009883a 	mov	r4,r2
1000fe98:	00059d40 	call	100059d4 <__mulsi3>
1000fe9c:	1007883a 	mov	r3,r2
1000fea0:	e0bff217 	ldw	r2,-56(fp)
1000fea4:	10800017 	ldw	r2,0(r2)
1000fea8:	1004d43a 	srli	r2,r2,16
1000feac:	1887883a 	add	r3,r3,r2
1000feb0:	e0bfef17 	ldw	r2,-68(fp)
1000feb4:	1885883a 	add	r2,r3,r2
1000feb8:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
1000febc:	e0bff417 	ldw	r2,-48(fp)
1000fec0:	1004d43a 	srli	r2,r2,16
1000fec4:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
1000fec8:	e0bff217 	ldw	r2,-56(fp)
1000fecc:	10c00104 	addi	r3,r2,4
1000fed0:	e0fff215 	stw	r3,-56(fp)
1000fed4:	e0fff417 	ldw	r3,-48(fp)
1000fed8:	1808943a 	slli	r4,r3,16
1000fedc:	e0fffc17 	ldw	r3,-16(fp)
1000fee0:	18ffffcc 	andi	r3,r3,65535
1000fee4:	20c6b03a 	or	r3,r4,r3
1000fee8:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
1000feec:	e0fff017 	ldw	r3,-64(fp)
1000fef0:	e0bff917 	ldw	r2,-28(fp)
1000fef4:	18bfd036 	bltu	r3,r2,1000fe38 <__alt_data_end+0xf800fe38>
	  *xc = carry;
1000fef8:	e0bff217 	ldw	r2,-56(fp)
1000fefc:	e0ffef17 	ldw	r3,-68(fp)
1000ff00:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
1000ff04:	e0bff117 	ldw	r2,-60(fp)
1000ff08:	10800017 	ldw	r2,0(r2)
1000ff0c:	1004d43a 	srli	r2,r2,16
1000ff10:	e0bffb15 	stw	r2,-20(fp)
1000ff14:	e0bffb17 	ldw	r2,-20(fp)
1000ff18:	10003b26 	beq	r2,zero,10010008 <__multiply+0x350>
	{
	  x = xa;
1000ff1c:	e0bff817 	ldw	r2,-32(fp)
1000ff20:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
1000ff24:	e0bff317 	ldw	r2,-52(fp)
1000ff28:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
1000ff2c:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
1000ff30:	e0bff217 	ldw	r2,-56(fp)
1000ff34:	10800017 	ldw	r2,0(r2)
1000ff38:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
1000ff3c:	e0bff017 	ldw	r2,-64(fp)
1000ff40:	10800017 	ldw	r2,0(r2)
1000ff44:	10bfffcc 	andi	r2,r2,65535
1000ff48:	e17ffb17 	ldw	r5,-20(fp)
1000ff4c:	1009883a 	mov	r4,r2
1000ff50:	00059d40 	call	100059d4 <__mulsi3>
1000ff54:	1007883a 	mov	r3,r2
1000ff58:	e0bff217 	ldw	r2,-56(fp)
1000ff5c:	10800017 	ldw	r2,0(r2)
1000ff60:	1004d43a 	srli	r2,r2,16
1000ff64:	1887883a 	add	r3,r3,r2
1000ff68:	e0bfef17 	ldw	r2,-68(fp)
1000ff6c:	1885883a 	add	r2,r3,r2
1000ff70:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
1000ff74:	e0bffc17 	ldw	r2,-16(fp)
1000ff78:	1004d43a 	srli	r2,r2,16
1000ff7c:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
1000ff80:	e0bff217 	ldw	r2,-56(fp)
1000ff84:	10c00104 	addi	r3,r2,4
1000ff88:	e0fff215 	stw	r3,-56(fp)
1000ff8c:	e0fffc17 	ldw	r3,-16(fp)
1000ff90:	1808943a 	slli	r4,r3,16
1000ff94:	e0fff417 	ldw	r3,-48(fp)
1000ff98:	18ffffcc 	andi	r3,r3,65535
1000ff9c:	20c6b03a 	or	r3,r4,r3
1000ffa0:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
1000ffa4:	e0bff017 	ldw	r2,-64(fp)
1000ffa8:	10c00104 	addi	r3,r2,4
1000ffac:	e0fff015 	stw	r3,-64(fp)
1000ffb0:	10800017 	ldw	r2,0(r2)
1000ffb4:	1004d43a 	srli	r2,r2,16
1000ffb8:	e17ffb17 	ldw	r5,-20(fp)
1000ffbc:	1009883a 	mov	r4,r2
1000ffc0:	00059d40 	call	100059d4 <__mulsi3>
1000ffc4:	1007883a 	mov	r3,r2
1000ffc8:	e0bff217 	ldw	r2,-56(fp)
1000ffcc:	10800017 	ldw	r2,0(r2)
1000ffd0:	10bfffcc 	andi	r2,r2,65535
1000ffd4:	1887883a 	add	r3,r3,r2
1000ffd8:	e0bfef17 	ldw	r2,-68(fp)
1000ffdc:	1885883a 	add	r2,r3,r2
1000ffe0:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
1000ffe4:	e0bff417 	ldw	r2,-48(fp)
1000ffe8:	1004d43a 	srli	r2,r2,16
1000ffec:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
1000fff0:	e0fff017 	ldw	r3,-64(fp)
1000fff4:	e0bff917 	ldw	r2,-28(fp)
1000fff8:	18bfd036 	bltu	r3,r2,1000ff3c <__alt_data_end+0xf800ff3c>
	  *xc = z2;
1000fffc:	e0bff217 	ldw	r2,-56(fp)
10010000:	e0fff417 	ldw	r3,-48(fp)
10010004:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
10010008:	e0bff117 	ldw	r2,-60(fp)
1001000c:	10800104 	addi	r2,r2,4
10010010:	e0bff115 	stw	r2,-60(fp)
10010014:	e0bff317 	ldw	r2,-52(fp)
10010018:	10800104 	addi	r2,r2,4
1001001c:	e0bff315 	stw	r2,-52(fp)
10010020:	e0fff117 	ldw	r3,-60(fp)
10010024:	e0bffa17 	ldw	r2,-24(fp)
10010028:	18bf7836 	bltu	r3,r2,1000fe0c <__alt_data_end+0xf800fe0c>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
1001002c:	e0bff517 	ldw	r2,-44(fp)
10010030:	10800504 	addi	r2,r2,20
10010034:	e0bff315 	stw	r2,-52(fp)
10010038:	e0bfee17 	ldw	r2,-72(fp)
1001003c:	1085883a 	add	r2,r2,r2
10010040:	1085883a 	add	r2,r2,r2
10010044:	1007883a 	mov	r3,r2
10010048:	e0bff317 	ldw	r2,-52(fp)
1001004c:	10c5883a 	add	r2,r2,r3
10010050:	e0bff215 	stw	r2,-56(fp)
10010054:	00000306 	br	10010064 <__multiply+0x3ac>
10010058:	e0bfee17 	ldw	r2,-72(fp)
1001005c:	10bfffc4 	addi	r2,r2,-1
10010060:	e0bfee15 	stw	r2,-72(fp)
10010064:	e0bfee17 	ldw	r2,-72(fp)
10010068:	0080060e 	bge	zero,r2,10010084 <__multiply+0x3cc>
1001006c:	e0bff217 	ldw	r2,-56(fp)
10010070:	10bfff04 	addi	r2,r2,-4
10010074:	e0bff215 	stw	r2,-56(fp)
10010078:	e0bff217 	ldw	r2,-56(fp)
1001007c:	10800017 	ldw	r2,0(r2)
10010080:	103ff526 	beq	r2,zero,10010058 <__alt_data_end+0xf8010058>
  c->_wds = wc;
10010084:	e0bff517 	ldw	r2,-44(fp)
10010088:	e0ffee17 	ldw	r3,-72(fp)
1001008c:	10c00415 	stw	r3,16(r2)
  return c;
10010090:	e0bff517 	ldw	r2,-44(fp)
}
10010094:	e037883a 	mov	sp,fp
10010098:	dfc00117 	ldw	ra,4(sp)
1001009c:	df000017 	ldw	fp,0(sp)
100100a0:	dec00204 	addi	sp,sp,8
100100a4:	f800283a 	ret

100100a8 <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
100100a8:	defff704 	addi	sp,sp,-36
100100ac:	dfc00815 	stw	ra,32(sp)
100100b0:	df000715 	stw	fp,28(sp)
100100b4:	df000704 	addi	fp,sp,28
100100b8:	e13ffd15 	stw	r4,-12(fp)
100100bc:	e17ffe15 	stw	r5,-8(fp)
100100c0:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
100100c4:	e0bfff17 	ldw	r2,-4(fp)
100100c8:	108000cc 	andi	r2,r2,3
100100cc:	e0bffb15 	stw	r2,-20(fp)
100100d0:	e0bffb17 	ldw	r2,-20(fp)
100100d4:	10000e26 	beq	r2,zero,10010110 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
100100d8:	e0bffb17 	ldw	r2,-20(fp)
100100dc:	10ffffc4 	addi	r3,r2,-1
100100e0:	00840374 	movhi	r2,4109
100100e4:	10be1904 	addi	r2,r2,-1948
100100e8:	18c7883a 	add	r3,r3,r3
100100ec:	18c7883a 	add	r3,r3,r3
100100f0:	10c5883a 	add	r2,r2,r3
100100f4:	10800017 	ldw	r2,0(r2)
100100f8:	000f883a 	mov	r7,zero
100100fc:	100d883a 	mov	r6,r2
10010100:	e17ffe17 	ldw	r5,-8(fp)
10010104:	e13ffd17 	ldw	r4,-12(fp)
10010108:	000f7ac0 	call	1000f7ac <__multadd>
1001010c:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
10010110:	e0bfff17 	ldw	r2,-4(fp)
10010114:	1005d0ba 	srai	r2,r2,2
10010118:	e0bfff15 	stw	r2,-4(fp)
1001011c:	e0bfff17 	ldw	r2,-4(fp)
10010120:	1000021e 	bne	r2,zero,1001012c <__pow5mult+0x84>
    return b;
10010124:	e0bffe17 	ldw	r2,-8(fp)
10010128:	00003806 	br	1001020c <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
1001012c:	e0bffd17 	ldw	r2,-12(fp)
10010130:	10801217 	ldw	r2,72(r2)
10010134:	e0bff915 	stw	r2,-28(fp)
10010138:	e0bff917 	ldw	r2,-28(fp)
1001013c:	10000b1e 	bne	r2,zero,1001016c <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
10010140:	01409c44 	movi	r5,625
10010144:	e13ffd17 	ldw	r4,-12(fp)
10010148:	000fc600 	call	1000fc60 <__i2b>
1001014c:	1007883a 	mov	r3,r2
10010150:	e0bffd17 	ldw	r2,-12(fp)
10010154:	10c01215 	stw	r3,72(r2)
10010158:	e0bffd17 	ldw	r2,-12(fp)
1001015c:	10801217 	ldw	r2,72(r2)
10010160:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
10010164:	e0bff917 	ldw	r2,-28(fp)
10010168:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
1001016c:	e0bfff17 	ldw	r2,-4(fp)
10010170:	1080004c 	andi	r2,r2,1
10010174:	10000a26 	beq	r2,zero,100101a0 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
10010178:	e1bff917 	ldw	r6,-28(fp)
1001017c:	e17ffe17 	ldw	r5,-8(fp)
10010180:	e13ffd17 	ldw	r4,-12(fp)
10010184:	000fcb80 	call	1000fcb8 <__multiply>
10010188:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
1001018c:	e17ffe17 	ldw	r5,-8(fp)
10010190:	e13ffd17 	ldw	r4,-12(fp)
10010194:	000f7300 	call	1000f730 <_Bfree>
	  b = b1;
10010198:	e0bffc17 	ldw	r2,-16(fp)
1001019c:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
100101a0:	e0bfff17 	ldw	r2,-4(fp)
100101a4:	1005d07a 	srai	r2,r2,1
100101a8:	e0bfff15 	stw	r2,-4(fp)
100101ac:	e0bfff17 	ldw	r2,-4(fp)
100101b0:	10001426 	beq	r2,zero,10010204 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
100101b4:	e0bff917 	ldw	r2,-28(fp)
100101b8:	10800017 	ldw	r2,0(r2)
100101bc:	e0bffa15 	stw	r2,-24(fp)
100101c0:	e0bffa17 	ldw	r2,-24(fp)
100101c4:	10000c1e 	bne	r2,zero,100101f8 <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
100101c8:	e1bff917 	ldw	r6,-28(fp)
100101cc:	e17ff917 	ldw	r5,-28(fp)
100101d0:	e13ffd17 	ldw	r4,-12(fp)
100101d4:	000fcb80 	call	1000fcb8 <__multiply>
100101d8:	1007883a 	mov	r3,r2
100101dc:	e0bff917 	ldw	r2,-28(fp)
100101e0:	10c00015 	stw	r3,0(r2)
100101e4:	e0bff917 	ldw	r2,-28(fp)
100101e8:	10800017 	ldw	r2,0(r2)
100101ec:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
100101f0:	e0bffa17 	ldw	r2,-24(fp)
100101f4:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
100101f8:	e0bffa17 	ldw	r2,-24(fp)
100101fc:	e0bff915 	stw	r2,-28(fp)
    }
10010200:	003fda06 	br	1001016c <__alt_data_end+0xf801016c>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
10010204:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
10010208:	e0bffe17 	ldw	r2,-8(fp)
}
1001020c:	e037883a 	mov	sp,fp
10010210:	dfc00117 	ldw	ra,4(sp)
10010214:	df000017 	ldw	fp,0(sp)
10010218:	dec00204 	addi	sp,sp,8
1001021c:	f800283a 	ret

10010220 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
10010220:	defff204 	addi	sp,sp,-56
10010224:	dfc00d15 	stw	ra,52(sp)
10010228:	df000c15 	stw	fp,48(sp)
1001022c:	df000c04 	addi	fp,sp,48
10010230:	e13ffd15 	stw	r4,-12(fp)
10010234:	e17ffe15 	stw	r5,-8(fp)
10010238:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
1001023c:	e0bfff17 	ldw	r2,-4(fp)
10010240:	1005d17a 	srai	r2,r2,5
10010244:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
10010248:	e0bffe17 	ldw	r2,-8(fp)
1001024c:	10800117 	ldw	r2,4(r2)
10010250:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
10010254:	e0bffe17 	ldw	r2,-8(fp)
10010258:	10c00417 	ldw	r3,16(r2)
1001025c:	e0bffa17 	ldw	r2,-24(fp)
10010260:	1885883a 	add	r2,r3,r2
10010264:	10800044 	addi	r2,r2,1
10010268:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
1001026c:	e0bffe17 	ldw	r2,-8(fp)
10010270:	10800217 	ldw	r2,8(r2)
10010274:	e0bff415 	stw	r2,-48(fp)
10010278:	00000606 	br	10010294 <__lshift+0x74>
    k1++;
1001027c:	e0bff517 	ldw	r2,-44(fp)
10010280:	10800044 	addi	r2,r2,1
10010284:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
10010288:	e0bff417 	ldw	r2,-48(fp)
1001028c:	1085883a 	add	r2,r2,r2
10010290:	e0bff415 	stw	r2,-48(fp)
10010294:	e0bff617 	ldw	r2,-40(fp)
10010298:	e0fff417 	ldw	r3,-48(fp)
1001029c:	18bff716 	blt	r3,r2,1001027c <__alt_data_end+0xf801027c>
    k1++;
  b1 = Balloc (ptr, k1);
100102a0:	e17ff517 	ldw	r5,-44(fp)
100102a4:	e13ffd17 	ldw	r4,-12(fp)
100102a8:	000f6000 	call	1000f600 <_Balloc>
100102ac:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
100102b0:	e0bffb17 	ldw	r2,-20(fp)
100102b4:	10800504 	addi	r2,r2,20
100102b8:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
100102bc:	e03ff415 	stw	zero,-48(fp)
100102c0:	00000706 	br	100102e0 <__lshift+0xc0>
    *x1++ = 0;
100102c4:	e0bff817 	ldw	r2,-32(fp)
100102c8:	10c00104 	addi	r3,r2,4
100102cc:	e0fff815 	stw	r3,-32(fp)
100102d0:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
100102d4:	e0bff417 	ldw	r2,-48(fp)
100102d8:	10800044 	addi	r2,r2,1
100102dc:	e0bff415 	stw	r2,-48(fp)
100102e0:	e0fff417 	ldw	r3,-48(fp)
100102e4:	e0bffa17 	ldw	r2,-24(fp)
100102e8:	18bff616 	blt	r3,r2,100102c4 <__alt_data_end+0xf80102c4>
    *x1++ = 0;
  x = b->_x;
100102ec:	e0bffe17 	ldw	r2,-8(fp)
100102f0:	10800504 	addi	r2,r2,20
100102f4:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
100102f8:	e0bffe17 	ldw	r2,-8(fp)
100102fc:	10800417 	ldw	r2,16(r2)
10010300:	1085883a 	add	r2,r2,r2
10010304:	1085883a 	add	r2,r2,r2
10010308:	1007883a 	mov	r3,r2
1001030c:	e0bff717 	ldw	r2,-36(fp)
10010310:	10c5883a 	add	r2,r2,r3
10010314:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
10010318:	e0bfff17 	ldw	r2,-4(fp)
1001031c:	108007cc 	andi	r2,r2,31
10010320:	e0bfff15 	stw	r2,-4(fp)
10010324:	e0bfff17 	ldw	r2,-4(fp)
10010328:	10002326 	beq	r2,zero,100103b8 <__lshift+0x198>
    {
      k1 = 32 - k;
1001032c:	00c00804 	movi	r3,32
10010330:	e0bfff17 	ldw	r2,-4(fp)
10010334:	1885c83a 	sub	r2,r3,r2
10010338:	e0bff515 	stw	r2,-44(fp)
      z = 0;
1001033c:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
10010340:	e0bff817 	ldw	r2,-32(fp)
10010344:	10c00104 	addi	r3,r2,4
10010348:	e0fff815 	stw	r3,-32(fp)
1001034c:	e0fff717 	ldw	r3,-36(fp)
10010350:	19000017 	ldw	r4,0(r3)
10010354:	e0ffff17 	ldw	r3,-4(fp)
10010358:	20c8983a 	sll	r4,r4,r3
1001035c:	e0fff917 	ldw	r3,-28(fp)
10010360:	20c6b03a 	or	r3,r4,r3
10010364:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
10010368:	e0bff717 	ldw	r2,-36(fp)
1001036c:	10c00104 	addi	r3,r2,4
10010370:	e0fff715 	stw	r3,-36(fp)
10010374:	10c00017 	ldw	r3,0(r2)
10010378:	e0bff517 	ldw	r2,-44(fp)
1001037c:	1884d83a 	srl	r2,r3,r2
10010380:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
10010384:	e0fff717 	ldw	r3,-36(fp)
10010388:	e0bffc17 	ldw	r2,-16(fp)
1001038c:	18bfec36 	bltu	r3,r2,10010340 <__alt_data_end+0xf8010340>
      if ((*x1 = z) != 0)
10010390:	e0bff817 	ldw	r2,-32(fp)
10010394:	e0fff917 	ldw	r3,-28(fp)
10010398:	10c00015 	stw	r3,0(r2)
1001039c:	e0bff817 	ldw	r2,-32(fp)
100103a0:	10800017 	ldw	r2,0(r2)
100103a4:	10000f26 	beq	r2,zero,100103e4 <__lshift+0x1c4>
	++n1;
100103a8:	e0bff617 	ldw	r2,-40(fp)
100103ac:	10800044 	addi	r2,r2,1
100103b0:	e0bff615 	stw	r2,-40(fp)
100103b4:	00000b06 	br	100103e4 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
100103b8:	e0bff817 	ldw	r2,-32(fp)
100103bc:	10c00104 	addi	r3,r2,4
100103c0:	e0fff815 	stw	r3,-32(fp)
100103c4:	e0fff717 	ldw	r3,-36(fp)
100103c8:	19000104 	addi	r4,r3,4
100103cc:	e13ff715 	stw	r4,-36(fp)
100103d0:	18c00017 	ldw	r3,0(r3)
100103d4:	10c00015 	stw	r3,0(r2)
    while (x < xe);
100103d8:	e0fff717 	ldw	r3,-36(fp)
100103dc:	e0bffc17 	ldw	r2,-16(fp)
100103e0:	18bff536 	bltu	r3,r2,100103b8 <__alt_data_end+0xf80103b8>
  b1->_wds = n1 - 1;
100103e4:	e0bff617 	ldw	r2,-40(fp)
100103e8:	10ffffc4 	addi	r3,r2,-1
100103ec:	e0bffb17 	ldw	r2,-20(fp)
100103f0:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
100103f4:	e17ffe17 	ldw	r5,-8(fp)
100103f8:	e13ffd17 	ldw	r4,-12(fp)
100103fc:	000f7300 	call	1000f730 <_Bfree>
  return b1;
10010400:	e0bffb17 	ldw	r2,-20(fp)
}
10010404:	e037883a 	mov	sp,fp
10010408:	dfc00117 	ldw	ra,4(sp)
1001040c:	df000017 	ldw	fp,0(sp)
10010410:	dec00204 	addi	sp,sp,8
10010414:	f800283a 	ret

10010418 <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
10010418:	defff704 	addi	sp,sp,-36
1001041c:	df000815 	stw	fp,32(sp)
10010420:	df000804 	addi	fp,sp,32
10010424:	e13ffe15 	stw	r4,-8(fp)
10010428:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
1001042c:	e0bffe17 	ldw	r2,-8(fp)
10010430:	10800417 	ldw	r2,16(r2)
10010434:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
10010438:	e0bfff17 	ldw	r2,-4(fp)
1001043c:	10800417 	ldw	r2,16(r2)
10010440:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
10010444:	e0fffa17 	ldw	r3,-24(fp)
10010448:	e0bffb17 	ldw	r2,-20(fp)
1001044c:	1885c83a 	sub	r2,r3,r2
10010450:	e0bffa15 	stw	r2,-24(fp)
10010454:	e0bffa17 	ldw	r2,-24(fp)
10010458:	10000226 	beq	r2,zero,10010464 <__mcmp+0x4c>
    return i;
1001045c:	e0bffa17 	ldw	r2,-24(fp)
10010460:	00002e06 	br	1001051c <__mcmp+0x104>
  xa0 = a->_x;
10010464:	e0bffe17 	ldw	r2,-8(fp)
10010468:	10800504 	addi	r2,r2,20
1001046c:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
10010470:	e0bffb17 	ldw	r2,-20(fp)
10010474:	1085883a 	add	r2,r2,r2
10010478:	1085883a 	add	r2,r2,r2
1001047c:	1007883a 	mov	r3,r2
10010480:	e0bffc17 	ldw	r2,-16(fp)
10010484:	10c5883a 	add	r2,r2,r3
10010488:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
1001048c:	e0bfff17 	ldw	r2,-4(fp)
10010490:	10800504 	addi	r2,r2,20
10010494:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
10010498:	e0bffb17 	ldw	r2,-20(fp)
1001049c:	1085883a 	add	r2,r2,r2
100104a0:	1085883a 	add	r2,r2,r2
100104a4:	1007883a 	mov	r3,r2
100104a8:	e0bffd17 	ldw	r2,-12(fp)
100104ac:	10c5883a 	add	r2,r2,r3
100104b0:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
100104b4:	e0bff817 	ldw	r2,-32(fp)
100104b8:	10bfff04 	addi	r2,r2,-4
100104bc:	e0bff815 	stw	r2,-32(fp)
100104c0:	e0bff817 	ldw	r2,-32(fp)
100104c4:	10c00017 	ldw	r3,0(r2)
100104c8:	e0bff917 	ldw	r2,-28(fp)
100104cc:	10bfff04 	addi	r2,r2,-4
100104d0:	e0bff915 	stw	r2,-28(fp)
100104d4:	e0bff917 	ldw	r2,-28(fp)
100104d8:	10800017 	ldw	r2,0(r2)
100104dc:	18800926 	beq	r3,r2,10010504 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
100104e0:	e0bff817 	ldw	r2,-32(fp)
100104e4:	10c00017 	ldw	r3,0(r2)
100104e8:	e0bff917 	ldw	r2,-28(fp)
100104ec:	10800017 	ldw	r2,0(r2)
100104f0:	1880022e 	bgeu	r3,r2,100104fc <__mcmp+0xe4>
100104f4:	00bfffc4 	movi	r2,-1
100104f8:	00000806 	br	1001051c <__mcmp+0x104>
100104fc:	00800044 	movi	r2,1
10010500:	00000606 	br	1001051c <__mcmp+0x104>
      if (xa <= xa0)
10010504:	e0bff817 	ldw	r2,-32(fp)
10010508:	e0fffc17 	ldw	r3,-16(fp)
1001050c:	1880012e 	bgeu	r3,r2,10010514 <__mcmp+0xfc>
	break;
    }
10010510:	003fe806 	br	100104b4 <__alt_data_end+0xf80104b4>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
10010514:	0001883a 	nop
    }
  return 0;
10010518:	0005883a 	mov	r2,zero
}
1001051c:	e037883a 	mov	sp,fp
10010520:	df000017 	ldw	fp,0(sp)
10010524:	dec00104 	addi	sp,sp,4
10010528:	f800283a 	ret

1001052c <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
1001052c:	deffef04 	addi	sp,sp,-68
10010530:	dfc01015 	stw	ra,64(sp)
10010534:	df000f15 	stw	fp,60(sp)
10010538:	df000f04 	addi	fp,sp,60
1001053c:	e13ffd15 	stw	r4,-12(fp)
10010540:	e17ffe15 	stw	r5,-8(fp)
10010544:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
10010548:	e17fff17 	ldw	r5,-4(fp)
1001054c:	e13ffe17 	ldw	r4,-8(fp)
10010550:	00104180 	call	10010418 <__mcmp>
10010554:	e0bff115 	stw	r2,-60(fp)
  if (!i)
10010558:	e0bff117 	ldw	r2,-60(fp)
1001055c:	10000b1e 	bne	r2,zero,1001058c <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
10010560:	000b883a 	mov	r5,zero
10010564:	e13ffd17 	ldw	r4,-12(fp)
10010568:	000f6000 	call	1000f600 <_Balloc>
1001056c:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
10010570:	e0bff717 	ldw	r2,-36(fp)
10010574:	00c00044 	movi	r3,1
10010578:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
1001057c:	e0bff717 	ldw	r2,-36(fp)
10010580:	10000515 	stw	zero,20(r2)
      return c;
10010584:	e0bff717 	ldw	r2,-36(fp)
10010588:	00008c06 	br	100107bc <__mdiff+0x290>
    }
  if (i < 0)
1001058c:	e0bff117 	ldw	r2,-60(fp)
10010590:	1000090e 	bge	r2,zero,100105b8 <__mdiff+0x8c>
    {
      c = a;
10010594:	e0bffe17 	ldw	r2,-8(fp)
10010598:	e0bff715 	stw	r2,-36(fp)
      a = b;
1001059c:	e0bfff17 	ldw	r2,-4(fp)
100105a0:	e0bffe15 	stw	r2,-8(fp)
      b = c;
100105a4:	e0bff717 	ldw	r2,-36(fp)
100105a8:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
100105ac:	00800044 	movi	r2,1
100105b0:	e0bff115 	stw	r2,-60(fp)
100105b4:	00000106 	br	100105bc <__mdiff+0x90>
    }
  else
    i = 0;
100105b8:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
100105bc:	e0bffe17 	ldw	r2,-8(fp)
100105c0:	10800117 	ldw	r2,4(r2)
100105c4:	100b883a 	mov	r5,r2
100105c8:	e13ffd17 	ldw	r4,-12(fp)
100105cc:	000f6000 	call	1000f600 <_Balloc>
100105d0:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
100105d4:	e0bff717 	ldw	r2,-36(fp)
100105d8:	e0fff117 	ldw	r3,-60(fp)
100105dc:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
100105e0:	e0bffe17 	ldw	r2,-8(fp)
100105e4:	10800417 	ldw	r2,16(r2)
100105e8:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
100105ec:	e0bffe17 	ldw	r2,-8(fp)
100105f0:	10800504 	addi	r2,r2,20
100105f4:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
100105f8:	e0bff217 	ldw	r2,-56(fp)
100105fc:	1085883a 	add	r2,r2,r2
10010600:	1085883a 	add	r2,r2,r2
10010604:	1007883a 	mov	r3,r2
10010608:	e0bff417 	ldw	r2,-48(fp)
1001060c:	10c5883a 	add	r2,r2,r3
10010610:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
10010614:	e0bfff17 	ldw	r2,-4(fp)
10010618:	10800417 	ldw	r2,16(r2)
1001061c:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
10010620:	e0bfff17 	ldw	r2,-4(fp)
10010624:	10800504 	addi	r2,r2,20
10010628:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
1001062c:	e0bff917 	ldw	r2,-28(fp)
10010630:	1085883a 	add	r2,r2,r2
10010634:	1085883a 	add	r2,r2,r2
10010638:	1007883a 	mov	r3,r2
1001063c:	e0bff517 	ldw	r2,-44(fp)
10010640:	10c5883a 	add	r2,r2,r3
10010644:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
10010648:	e0bff717 	ldw	r2,-36(fp)
1001064c:	10800504 	addi	r2,r2,20
10010650:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
10010654:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
10010658:	e0bff417 	ldw	r2,-48(fp)
1001065c:	10800017 	ldw	r2,0(r2)
10010660:	10ffffcc 	andi	r3,r2,65535
10010664:	e0bff517 	ldw	r2,-44(fp)
10010668:	10800017 	ldw	r2,0(r2)
1001066c:	10bfffcc 	andi	r2,r2,65535
10010670:	1887c83a 	sub	r3,r3,r2
10010674:	e0bff317 	ldw	r2,-52(fp)
10010678:	1885883a 	add	r2,r3,r2
1001067c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
10010680:	e0bffb17 	ldw	r2,-20(fp)
10010684:	1005d43a 	srai	r2,r2,16
10010688:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
1001068c:	e0bff417 	ldw	r2,-48(fp)
10010690:	10c00104 	addi	r3,r2,4
10010694:	e0fff415 	stw	r3,-48(fp)
10010698:	10800017 	ldw	r2,0(r2)
1001069c:	1006d43a 	srli	r3,r2,16
100106a0:	e0bff517 	ldw	r2,-44(fp)
100106a4:	11000104 	addi	r4,r2,4
100106a8:	e13ff515 	stw	r4,-44(fp)
100106ac:	10800017 	ldw	r2,0(r2)
100106b0:	1004d43a 	srli	r2,r2,16
100106b4:	1887c83a 	sub	r3,r3,r2
100106b8:	e0bff317 	ldw	r2,-52(fp)
100106bc:	1885883a 	add	r2,r3,r2
100106c0:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
100106c4:	e0bffc17 	ldw	r2,-16(fp)
100106c8:	1005d43a 	srai	r2,r2,16
100106cc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
100106d0:	e0bff617 	ldw	r2,-40(fp)
100106d4:	10c00104 	addi	r3,r2,4
100106d8:	e0fff615 	stw	r3,-40(fp)
100106dc:	e0fffc17 	ldw	r3,-16(fp)
100106e0:	1808943a 	slli	r4,r3,16
100106e4:	e0fffb17 	ldw	r3,-20(fp)
100106e8:	18ffffcc 	andi	r3,r3,65535
100106ec:	20c6b03a 	or	r3,r4,r3
100106f0:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
100106f4:	e0fff517 	ldw	r3,-44(fp)
100106f8:	e0bffa17 	ldw	r2,-24(fp)
100106fc:	18bfd636 	bltu	r3,r2,10010658 <__alt_data_end+0xf8010658>
  while (xa < xae)
10010700:	00001d06 	br	10010778 <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
10010704:	e0bff417 	ldw	r2,-48(fp)
10010708:	10800017 	ldw	r2,0(r2)
1001070c:	10ffffcc 	andi	r3,r2,65535
10010710:	e0bff317 	ldw	r2,-52(fp)
10010714:	1885883a 	add	r2,r3,r2
10010718:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
1001071c:	e0bffb17 	ldw	r2,-20(fp)
10010720:	1005d43a 	srai	r2,r2,16
10010724:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
10010728:	e0bff417 	ldw	r2,-48(fp)
1001072c:	10c00104 	addi	r3,r2,4
10010730:	e0fff415 	stw	r3,-48(fp)
10010734:	10800017 	ldw	r2,0(r2)
10010738:	1006d43a 	srli	r3,r2,16
1001073c:	e0bff317 	ldw	r2,-52(fp)
10010740:	1885883a 	add	r2,r3,r2
10010744:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
10010748:	e0bffc17 	ldw	r2,-16(fp)
1001074c:	1005d43a 	srai	r2,r2,16
10010750:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
10010754:	e0bff617 	ldw	r2,-40(fp)
10010758:	10c00104 	addi	r3,r2,4
1001075c:	e0fff615 	stw	r3,-40(fp)
10010760:	e0fffc17 	ldw	r3,-16(fp)
10010764:	1808943a 	slli	r4,r3,16
10010768:	e0fffb17 	ldw	r3,-20(fp)
1001076c:	18ffffcc 	andi	r3,r3,65535
10010770:	20c6b03a 	or	r3,r4,r3
10010774:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
10010778:	e0fff417 	ldw	r3,-48(fp)
1001077c:	e0bff817 	ldw	r2,-32(fp)
10010780:	18bfe036 	bltu	r3,r2,10010704 <__alt_data_end+0xf8010704>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
10010784:	00000306 	br	10010794 <__mdiff+0x268>
    wa--;
10010788:	e0bff217 	ldw	r2,-56(fp)
1001078c:	10bfffc4 	addi	r2,r2,-1
10010790:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
10010794:	e0bff617 	ldw	r2,-40(fp)
10010798:	10bfff04 	addi	r2,r2,-4
1001079c:	e0bff615 	stw	r2,-40(fp)
100107a0:	e0bff617 	ldw	r2,-40(fp)
100107a4:	10800017 	ldw	r2,0(r2)
100107a8:	103ff726 	beq	r2,zero,10010788 <__alt_data_end+0xf8010788>
    wa--;
  c->_wds = wa;
100107ac:	e0bff717 	ldw	r2,-36(fp)
100107b0:	e0fff217 	ldw	r3,-56(fp)
100107b4:	10c00415 	stw	r3,16(r2)
  return c;
100107b8:	e0bff717 	ldw	r2,-36(fp)
}
100107bc:	e037883a 	mov	sp,fp
100107c0:	dfc00117 	ldw	ra,4(sp)
100107c4:	df000017 	ldw	fp,0(sp)
100107c8:	dec00204 	addi	sp,sp,8
100107cc:	f800283a 	ret

100107d0 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
100107d0:	defff804 	addi	sp,sp,-32
100107d4:	df000715 	stw	fp,28(sp)
100107d8:	dc000615 	stw	r16,24(sp)
100107dc:	df000704 	addi	fp,sp,28
100107e0:	e13ffd15 	stw	r4,-12(fp)
100107e4:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
100107e8:	e0bffd17 	ldw	r2,-12(fp)
100107ec:	e0bff915 	stw	r2,-28(fp)
100107f0:	e0bffe17 	ldw	r2,-8(fp)
100107f4:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
100107f8:	e0bffa17 	ldw	r2,-24(fp)
100107fc:	10dffc2c 	andhi	r3,r2,32752
10010800:	00bf3034 	movhi	r2,64704
10010804:	1885883a 	add	r2,r3,r2
10010808:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
1001080c:	0400040e 	bge	zero,r16,10010820 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
10010810:	8005883a 	mov	r2,r16
10010814:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
10010818:	e03ffb15 	stw	zero,-20(fp)
1001081c:	00001406 	br	10010870 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
10010820:	0405c83a 	sub	r2,zero,r16
10010824:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
10010828:	80800508 	cmpgei	r2,r16,20
1001082c:	1000051e 	bne	r2,zero,10010844 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
10010830:	00800234 	movhi	r2,8
10010834:	1405d83a 	sra	r2,r2,r16
10010838:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
1001083c:	e03ffb15 	stw	zero,-20(fp)
10010840:	00000b06 	br	10010870 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
10010844:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
10010848:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
1001084c:	808007c8 	cmpgei	r2,r16,31
10010850:	1000051e 	bne	r2,zero,10010868 <__ulp+0x98>
10010854:	008007c4 	movi	r2,31
10010858:	1405c83a 	sub	r2,r2,r16
1001085c:	00c00044 	movi	r3,1
10010860:	1884983a 	sll	r2,r3,r2
10010864:	00000106 	br	1001086c <__ulp+0x9c>
10010868:	00800044 	movi	r2,1
1001086c:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
10010870:	e0bffb17 	ldw	r2,-20(fp)
10010874:	e0fffc17 	ldw	r3,-16(fp)
10010878:	1009883a 	mov	r4,r2
1001087c:	180b883a 	mov	r5,r3
}
10010880:	2005883a 	mov	r2,r4
10010884:	2807883a 	mov	r3,r5
10010888:	e6ffff04 	addi	sp,fp,-4
1001088c:	df000117 	ldw	fp,4(sp)
10010890:	dc000017 	ldw	r16,0(sp)
10010894:	dec00204 	addi	sp,sp,8
10010898:	f800283a 	ret

1001089c <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
1001089c:	defff404 	addi	sp,sp,-48
100108a0:	dfc00b15 	stw	ra,44(sp)
100108a4:	df000a15 	stw	fp,40(sp)
100108a8:	df000a04 	addi	fp,sp,40
100108ac:	e13ffe15 	stw	r4,-8(fp)
100108b0:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
100108b4:	e0bffe17 	ldw	r2,-8(fp)
100108b8:	10800504 	addi	r2,r2,20
100108bc:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
100108c0:	e0bffe17 	ldw	r2,-8(fp)
100108c4:	10800417 	ldw	r2,16(r2)
100108c8:	1085883a 	add	r2,r2,r2
100108cc:	1085883a 	add	r2,r2,r2
100108d0:	1007883a 	mov	r3,r2
100108d4:	e0bff717 	ldw	r2,-36(fp)
100108d8:	10c5883a 	add	r2,r2,r3
100108dc:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
100108e0:	e0bff617 	ldw	r2,-40(fp)
100108e4:	10bfff04 	addi	r2,r2,-4
100108e8:	e0bff615 	stw	r2,-40(fp)
100108ec:	e0bff617 	ldw	r2,-40(fp)
100108f0:	10800017 	ldw	r2,0(r2)
100108f4:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
100108f8:	e13ff817 	ldw	r4,-32(fp)
100108fc:	000fae40 	call	1000fae4 <__hi0bits>
10010900:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
10010904:	00c00804 	movi	r3,32
10010908:	e0bff917 	ldw	r2,-28(fp)
1001090c:	1887c83a 	sub	r3,r3,r2
10010910:	e0bfff17 	ldw	r2,-4(fp)
10010914:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
10010918:	e0bff917 	ldw	r2,-28(fp)
1001091c:	108002c8 	cmpgei	r2,r2,11
10010920:	10001e1e 	bne	r2,zero,1001099c <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
10010924:	00c002c4 	movi	r3,11
10010928:	e0bff917 	ldw	r2,-28(fp)
1001092c:	1885c83a 	sub	r2,r3,r2
10010930:	e0fff817 	ldw	r3,-32(fp)
10010934:	1884d83a 	srl	r2,r3,r2
10010938:	108ffc34 	orhi	r2,r2,16368
1001093c:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
10010940:	e0bff617 	ldw	r2,-40(fp)
10010944:	e0fff717 	ldw	r3,-36(fp)
10010948:	1880062e 	bgeu	r3,r2,10010964 <__b2d+0xc8>
1001094c:	e0bff617 	ldw	r2,-40(fp)
10010950:	10bfff04 	addi	r2,r2,-4
10010954:	e0bff615 	stw	r2,-40(fp)
10010958:	e0bff617 	ldw	r2,-40(fp)
1001095c:	10800017 	ldw	r2,0(r2)
10010960:	00000106 	br	10010968 <__b2d+0xcc>
10010964:	0005883a 	mov	r2,zero
10010968:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
1001096c:	e0bff917 	ldw	r2,-28(fp)
10010970:	10800544 	addi	r2,r2,21
10010974:	e0fff817 	ldw	r3,-32(fp)
10010978:	1886983a 	sll	r3,r3,r2
1001097c:	010002c4 	movi	r4,11
10010980:	e0bff917 	ldw	r2,-28(fp)
10010984:	2085c83a 	sub	r2,r4,r2
10010988:	e13ffa17 	ldw	r4,-24(fp)
1001098c:	2084d83a 	srl	r2,r4,r2
10010990:	1884b03a 	or	r2,r3,r2
10010994:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
10010998:	00003606 	br	10010a74 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
1001099c:	e0bff617 	ldw	r2,-40(fp)
100109a0:	e0fff717 	ldw	r3,-36(fp)
100109a4:	1880062e 	bgeu	r3,r2,100109c0 <__b2d+0x124>
100109a8:	e0bff617 	ldw	r2,-40(fp)
100109ac:	10bfff04 	addi	r2,r2,-4
100109b0:	e0bff615 	stw	r2,-40(fp)
100109b4:	e0bff617 	ldw	r2,-40(fp)
100109b8:	10800017 	ldw	r2,0(r2)
100109bc:	00000106 	br	100109c4 <__b2d+0x128>
100109c0:	0005883a 	mov	r2,zero
100109c4:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
100109c8:	e0bff917 	ldw	r2,-28(fp)
100109cc:	10bffd44 	addi	r2,r2,-11
100109d0:	e0bff915 	stw	r2,-28(fp)
100109d4:	e0bff917 	ldw	r2,-28(fp)
100109d8:	10002126 	beq	r2,zero,10010a60 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
100109dc:	e0fff817 	ldw	r3,-32(fp)
100109e0:	e0bff917 	ldw	r2,-28(fp)
100109e4:	1886983a 	sll	r3,r3,r2
100109e8:	01000804 	movi	r4,32
100109ec:	e0bff917 	ldw	r2,-28(fp)
100109f0:	2085c83a 	sub	r2,r4,r2
100109f4:	e13ffb17 	ldw	r4,-20(fp)
100109f8:	2084d83a 	srl	r2,r4,r2
100109fc:	1884b03a 	or	r2,r3,r2
10010a00:	108ffc34 	orhi	r2,r2,16368
10010a04:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
10010a08:	e0bff617 	ldw	r2,-40(fp)
10010a0c:	e0fff717 	ldw	r3,-36(fp)
10010a10:	1880062e 	bgeu	r3,r2,10010a2c <__b2d+0x190>
10010a14:	e0bff617 	ldw	r2,-40(fp)
10010a18:	10bfff04 	addi	r2,r2,-4
10010a1c:	e0bff615 	stw	r2,-40(fp)
10010a20:	e0bff617 	ldw	r2,-40(fp)
10010a24:	10800017 	ldw	r2,0(r2)
10010a28:	00000106 	br	10010a30 <__b2d+0x194>
10010a2c:	0005883a 	mov	r2,zero
10010a30:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
10010a34:	e0fffb17 	ldw	r3,-20(fp)
10010a38:	e0bff917 	ldw	r2,-28(fp)
10010a3c:	1886983a 	sll	r3,r3,r2
10010a40:	01000804 	movi	r4,32
10010a44:	e0bff917 	ldw	r2,-28(fp)
10010a48:	2085c83a 	sub	r2,r4,r2
10010a4c:	e13ff817 	ldw	r4,-32(fp)
10010a50:	2084d83a 	srl	r2,r4,r2
10010a54:	1884b03a 	or	r2,r3,r2
10010a58:	e0bffc15 	stw	r2,-16(fp)
10010a5c:	00000506 	br	10010a74 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
10010a60:	e0bff817 	ldw	r2,-32(fp)
10010a64:	108ffc34 	orhi	r2,r2,16368
10010a68:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
10010a6c:	e0bffb17 	ldw	r2,-20(fp)
10010a70:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
10010a74:	e0bffc17 	ldw	r2,-16(fp)
10010a78:	e0fffd17 	ldw	r3,-12(fp)
10010a7c:	1009883a 	mov	r4,r2
10010a80:	180b883a 	mov	r5,r3
}
10010a84:	2005883a 	mov	r2,r4
10010a88:	2807883a 	mov	r3,r5
10010a8c:	e037883a 	mov	sp,fp
10010a90:	dfc00117 	ldw	ra,4(sp)
10010a94:	df000017 	ldw	fp,0(sp)
10010a98:	dec00204 	addi	sp,sp,8
10010a9c:	f800283a 	ret

10010aa0 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
10010aa0:	defff004 	addi	sp,sp,-64
10010aa4:	dfc00f15 	stw	ra,60(sp)
10010aa8:	df000e15 	stw	fp,56(sp)
10010aac:	dc000d15 	stw	r16,52(sp)
10010ab0:	df000e04 	addi	fp,sp,56
10010ab4:	e13ffb15 	stw	r4,-20(fp)
10010ab8:	e17ffc15 	stw	r5,-16(fp)
10010abc:	e1bffd15 	stw	r6,-12(fp)
10010ac0:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
10010ac4:	e0bffc17 	ldw	r2,-16(fp)
10010ac8:	e0bff715 	stw	r2,-36(fp)
10010acc:	e0bffd17 	ldw	r2,-12(fp)
10010ad0:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
10010ad4:	e0bffc17 	ldw	r2,-16(fp)
10010ad8:	e0bff715 	stw	r2,-36(fp)
10010adc:	e0bffd17 	ldw	r2,-12(fp)
10010ae0:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
10010ae4:	01400044 	movi	r5,1
10010ae8:	e13ffb17 	ldw	r4,-20(fp)
10010aec:	000f6000 	call	1000f600 <_Balloc>
10010af0:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
10010af4:	e0bff417 	ldw	r2,-48(fp)
10010af8:	10800504 	addi	r2,r2,20
10010afc:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
10010b00:	e0fff817 	ldw	r3,-32(fp)
10010b04:	00800434 	movhi	r2,16
10010b08:	10bfffc4 	addi	r2,r2,-1
10010b0c:	1884703a 	and	r2,r3,r2
10010b10:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
10010b14:	e0fff817 	ldw	r3,-32(fp)
10010b18:	00a00034 	movhi	r2,32768
10010b1c:	10bfffc4 	addi	r2,r2,-1
10010b20:	1884703a 	and	r2,r3,r2
10010b24:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
10010b28:	e0bff817 	ldw	r2,-32(fp)
10010b2c:	1004d53a 	srli	r2,r2,20
10010b30:	e0bff615 	stw	r2,-40(fp)
10010b34:	e0bff617 	ldw	r2,-40(fp)
10010b38:	10000326 	beq	r2,zero,10010b48 <__d2b+0xa8>
    z |= Exp_msk1;
10010b3c:	e0bffa17 	ldw	r2,-24(fp)
10010b40:	10800434 	orhi	r2,r2,16
10010b44:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
10010b48:	e0bff717 	ldw	r2,-36(fp)
10010b4c:	10002826 	beq	r2,zero,10010bf0 <__d2b+0x150>
    {
      y = d1;
10010b50:	e0bff717 	ldw	r2,-36(fp)
10010b54:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
10010b58:	e0bff904 	addi	r2,fp,-28
10010b5c:	1009883a 	mov	r4,r2
10010b60:	000fb740 	call	1000fb74 <__lo0bits>
10010b64:	e0bff315 	stw	r2,-52(fp)
      if (k)
10010b68:	e0bff317 	ldw	r2,-52(fp)
10010b6c:	10000e26 	beq	r2,zero,10010ba8 <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
10010b70:	e0fffa17 	ldw	r3,-24(fp)
10010b74:	01000804 	movi	r4,32
10010b78:	e0bff317 	ldw	r2,-52(fp)
10010b7c:	2085c83a 	sub	r2,r4,r2
10010b80:	1886983a 	sll	r3,r3,r2
10010b84:	e0bff917 	ldw	r2,-28(fp)
10010b88:	1886b03a 	or	r3,r3,r2
10010b8c:	e0bff517 	ldw	r2,-44(fp)
10010b90:	10c00015 	stw	r3,0(r2)
	  z >>= k;
10010b94:	e0fffa17 	ldw	r3,-24(fp)
10010b98:	e0bff317 	ldw	r2,-52(fp)
10010b9c:	1884d83a 	srl	r2,r3,r2
10010ba0:	e0bffa15 	stw	r2,-24(fp)
10010ba4:	00000306 	br	10010bb4 <__d2b+0x114>
	}
      else
	x[0] = y;
10010ba8:	e0fff917 	ldw	r3,-28(fp)
10010bac:	e0bff517 	ldw	r2,-44(fp)
10010bb0:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
10010bb4:	e0bff517 	ldw	r2,-44(fp)
10010bb8:	10800104 	addi	r2,r2,4
10010bbc:	e0fffa17 	ldw	r3,-24(fp)
10010bc0:	10c00015 	stw	r3,0(r2)
10010bc4:	10800017 	ldw	r2,0(r2)
10010bc8:	10000226 	beq	r2,zero,10010bd4 <__d2b+0x134>
10010bcc:	00800084 	movi	r2,2
10010bd0:	00000106 	br	10010bd8 <__d2b+0x138>
10010bd4:	00800044 	movi	r2,1
10010bd8:	e0fff417 	ldw	r3,-48(fp)
10010bdc:	18800415 	stw	r2,16(r3)
10010be0:	e0bff417 	ldw	r2,-48(fp)
10010be4:	10800417 	ldw	r2,16(r2)
10010be8:	e0bff215 	stw	r2,-56(fp)
10010bec:	00001006 	br	10010c30 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
10010bf0:	e0bffa04 	addi	r2,fp,-24
10010bf4:	1009883a 	mov	r4,r2
10010bf8:	000fb740 	call	1000fb74 <__lo0bits>
10010bfc:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
10010c00:	e0fffa17 	ldw	r3,-24(fp)
10010c04:	e0bff517 	ldw	r2,-44(fp)
10010c08:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
10010c0c:	e0bff417 	ldw	r2,-48(fp)
10010c10:	00c00044 	movi	r3,1
10010c14:	10c00415 	stw	r3,16(r2)
10010c18:	e0bff417 	ldw	r2,-48(fp)
10010c1c:	10800417 	ldw	r2,16(r2)
10010c20:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
10010c24:	e0bff317 	ldw	r2,-52(fp)
10010c28:	10800804 	addi	r2,r2,32
10010c2c:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
10010c30:	e0bff617 	ldw	r2,-40(fp)
10010c34:	10000c26 	beq	r2,zero,10010c68 <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
10010c38:	e0bff617 	ldw	r2,-40(fp)
10010c3c:	10fef344 	addi	r3,r2,-1075
10010c40:	e0bff317 	ldw	r2,-52(fp)
10010c44:	1887883a 	add	r3,r3,r2
10010c48:	e0bffe17 	ldw	r2,-8(fp)
10010c4c:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
10010c50:	00c00d44 	movi	r3,53
10010c54:	e0bff317 	ldw	r2,-52(fp)
10010c58:	1887c83a 	sub	r3,r3,r2
10010c5c:	e0800217 	ldw	r2,8(fp)
10010c60:	10c00015 	stw	r3,0(r2)
10010c64:	00001706 	br	10010cc4 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
10010c68:	e0bff617 	ldw	r2,-40(fp)
10010c6c:	10fef384 	addi	r3,r2,-1074
10010c70:	e0bff317 	ldw	r2,-52(fp)
10010c74:	1887883a 	add	r3,r3,r2
10010c78:	e0bffe17 	ldw	r2,-8(fp)
10010c7c:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
10010c80:	e0bff217 	ldw	r2,-56(fp)
10010c84:	1020917a 	slli	r16,r2,5
10010c88:	e0fff217 	ldw	r3,-56(fp)
10010c8c:	00900034 	movhi	r2,16384
10010c90:	10bfffc4 	addi	r2,r2,-1
10010c94:	1885883a 	add	r2,r3,r2
10010c98:	1085883a 	add	r2,r2,r2
10010c9c:	1085883a 	add	r2,r2,r2
10010ca0:	1007883a 	mov	r3,r2
10010ca4:	e0bff517 	ldw	r2,-44(fp)
10010ca8:	10c5883a 	add	r2,r2,r3
10010cac:	10800017 	ldw	r2,0(r2)
10010cb0:	1009883a 	mov	r4,r2
10010cb4:	000fae40 	call	1000fae4 <__hi0bits>
10010cb8:	8087c83a 	sub	r3,r16,r2
10010cbc:	e0800217 	ldw	r2,8(fp)
10010cc0:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
10010cc4:	e0bff417 	ldw	r2,-48(fp)
}
10010cc8:	e6ffff04 	addi	sp,fp,-4
10010ccc:	dfc00217 	ldw	ra,8(sp)
10010cd0:	df000117 	ldw	fp,4(sp)
10010cd4:	dc000017 	ldw	r16,0(sp)
10010cd8:	dec00304 	addi	sp,sp,12
10010cdc:	f800283a 	ret

10010ce0 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
10010ce0:	defff504 	addi	sp,sp,-44
10010ce4:	dfc00a15 	stw	ra,40(sp)
10010ce8:	df000915 	stw	fp,36(sp)
10010cec:	df000904 	addi	fp,sp,36
10010cf0:	e13ffe15 	stw	r4,-8(fp)
10010cf4:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
10010cf8:	e0bffc04 	addi	r2,fp,-16
10010cfc:	100b883a 	mov	r5,r2
10010d00:	e13ffe17 	ldw	r4,-8(fp)
10010d04:	001089c0 	call	1001089c <__b2d>
10010d08:	1009883a 	mov	r4,r2
10010d0c:	180b883a 	mov	r5,r3
10010d10:	e13ff815 	stw	r4,-32(fp)
10010d14:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
10010d18:	e0bffd04 	addi	r2,fp,-12
10010d1c:	100b883a 	mov	r5,r2
10010d20:	e13fff17 	ldw	r4,-4(fp)
10010d24:	001089c0 	call	1001089c <__b2d>
10010d28:	1009883a 	mov	r4,r2
10010d2c:	180b883a 	mov	r5,r3
10010d30:	e13ffa15 	stw	r4,-24(fp)
10010d34:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
10010d38:	e0fffc17 	ldw	r3,-16(fp)
10010d3c:	e0bffd17 	ldw	r2,-12(fp)
10010d40:	1887c83a 	sub	r3,r3,r2
10010d44:	e0bffe17 	ldw	r2,-8(fp)
10010d48:	11000417 	ldw	r4,16(r2)
10010d4c:	e0bfff17 	ldw	r2,-4(fp)
10010d50:	10800417 	ldw	r2,16(r2)
10010d54:	2085c83a 	sub	r2,r4,r2
10010d58:	1004917a 	slli	r2,r2,5
10010d5c:	1885883a 	add	r2,r3,r2
10010d60:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
10010d64:	e0bff717 	ldw	r2,-36(fp)
10010d68:	0080060e 	bge	zero,r2,10010d84 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
10010d6c:	e0fff917 	ldw	r3,-28(fp)
10010d70:	e0bff717 	ldw	r2,-36(fp)
10010d74:	1004953a 	slli	r2,r2,20
10010d78:	1885883a 	add	r2,r3,r2
10010d7c:	e0bff915 	stw	r2,-28(fp)
10010d80:	00000806 	br	10010da4 <__ratio+0xc4>
  else
    {
      k = -k;
10010d84:	e0bff717 	ldw	r2,-36(fp)
10010d88:	0085c83a 	sub	r2,zero,r2
10010d8c:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
10010d90:	e0fffb17 	ldw	r3,-20(fp)
10010d94:	e0bff717 	ldw	r2,-36(fp)
10010d98:	1004953a 	slli	r2,r2,20
10010d9c:	1885883a 	add	r2,r3,r2
10010da0:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
10010da4:	e0bff817 	ldw	r2,-32(fp)
10010da8:	e0fff917 	ldw	r3,-28(fp)
10010dac:	e13ffa17 	ldw	r4,-24(fp)
10010db0:	e17ffb17 	ldw	r5,-20(fp)
10010db4:	200d883a 	mov	r6,r4
10010db8:	280f883a 	mov	r7,r5
10010dbc:	1009883a 	mov	r4,r2
10010dc0:	180b883a 	mov	r5,r3
10010dc4:	00148140 	call	10014814 <__divdf3>
10010dc8:	100f883a 	mov	r7,r2
10010dcc:	1811883a 	mov	r8,r3
10010dd0:	380b883a 	mov	r5,r7
10010dd4:	400d883a 	mov	r6,r8
10010dd8:	2807883a 	mov	r3,r5
10010ddc:	3009883a 	mov	r4,r6
}
10010de0:	1805883a 	mov	r2,r3
10010de4:	2007883a 	mov	r3,r4
10010de8:	e037883a 	mov	sp,fp
10010dec:	dfc00117 	ldw	ra,4(sp)
10010df0:	df000017 	ldw	fp,0(sp)
10010df4:	dec00204 	addi	sp,sp,8
10010df8:	f800283a 	ret

10010dfc <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
10010dfc:	defffb04 	addi	sp,sp,-20
10010e00:	dfc00415 	stw	ra,16(sp)
10010e04:	df000315 	stw	fp,12(sp)
10010e08:	df000304 	addi	fp,sp,12
10010e0c:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
10010e10:	e03ffd15 	stw	zero,-12(fp)
10010e14:	008ffc34 	movhi	r2,16368
10010e18:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
10010e1c:	e0bfff17 	ldw	r2,-4(fp)
10010e20:	10800608 	cmpgei	r2,r2,24
10010e24:	1000141e 	bne	r2,zero,10010e78 <_mprec_log10+0x7c>
    return tens[dig];
10010e28:	00840374 	movhi	r2,4109
10010e2c:	10bdd304 	addi	r2,r2,-2228
10010e30:	e0ffff17 	ldw	r3,-4(fp)
10010e34:	180690fa 	slli	r3,r3,3
10010e38:	10c9883a 	add	r4,r2,r3
10010e3c:	20800017 	ldw	r2,0(r4)
10010e40:	20c00117 	ldw	r3,4(r4)
10010e44:	00001006 	br	10010e88 <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
10010e48:	000d883a 	mov	r6,zero
10010e4c:	01d00934 	movhi	r7,16420
10010e50:	e13ffd17 	ldw	r4,-12(fp)
10010e54:	e17ffe17 	ldw	r5,-8(fp)
10010e58:	00045540 	call	10004554 <__muldf3>
10010e5c:	1009883a 	mov	r4,r2
10010e60:	180b883a 	mov	r5,r3
10010e64:	e13ffd15 	stw	r4,-12(fp)
10010e68:	e17ffe15 	stw	r5,-8(fp)
      dig--;
10010e6c:	e0bfff17 	ldw	r2,-4(fp)
10010e70:	10bfffc4 	addi	r2,r2,-1
10010e74:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
10010e78:	e0bfff17 	ldw	r2,-4(fp)
10010e7c:	00bff216 	blt	zero,r2,10010e48 <__alt_data_end+0xf8010e48>
    {
      v *= 10;
      dig--;
    }
  return v;
10010e80:	e0bffd17 	ldw	r2,-12(fp)
10010e84:	e0fffe17 	ldw	r3,-8(fp)
10010e88:	1009883a 	mov	r4,r2
10010e8c:	180b883a 	mov	r5,r3
}
10010e90:	2005883a 	mov	r2,r4
10010e94:	2807883a 	mov	r3,r5
10010e98:	e037883a 	mov	sp,fp
10010e9c:	dfc00117 	ldw	ra,4(sp)
10010ea0:	df000017 	ldw	fp,0(sp)
10010ea4:	dec00204 	addi	sp,sp,8
10010ea8:	f800283a 	ret

10010eac <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
10010eac:	defff904 	addi	sp,sp,-28
10010eb0:	df000615 	stw	fp,24(sp)
10010eb4:	df000604 	addi	fp,sp,24
10010eb8:	e13ffd15 	stw	r4,-12(fp)
10010ebc:	e17ffe15 	stw	r5,-8(fp)
10010ec0:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
10010ec4:	e0bffe17 	ldw	r2,-8(fp)
10010ec8:	10bfffc4 	addi	r2,r2,-1
10010ecc:	1005d17a 	srai	r2,r2,5
10010ed0:	10800044 	addi	r2,r2,1
10010ed4:	1085883a 	add	r2,r2,r2
10010ed8:	1085883a 	add	r2,r2,r2
10010edc:	1007883a 	mov	r3,r2
10010ee0:	e0bffd17 	ldw	r2,-12(fp)
10010ee4:	10c5883a 	add	r2,r2,r3
10010ee8:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
10010eec:	e0bfff17 	ldw	r2,-4(fp)
10010ef0:	10800504 	addi	r2,r2,20
10010ef4:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
10010ef8:	e0bfff17 	ldw	r2,-4(fp)
10010efc:	10800417 	ldw	r2,16(r2)
10010f00:	1085883a 	add	r2,r2,r2
10010f04:	1085883a 	add	r2,r2,r2
10010f08:	1007883a 	mov	r3,r2
10010f0c:	e0bffa17 	ldw	r2,-24(fp)
10010f10:	10c5883a 	add	r2,r2,r3
10010f14:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
10010f18:	00000806 	br	10010f3c <__copybits+0x90>
		*c++ = *x++;
10010f1c:	e0bffd17 	ldw	r2,-12(fp)
10010f20:	10c00104 	addi	r3,r2,4
10010f24:	e0fffd15 	stw	r3,-12(fp)
10010f28:	e0fffa17 	ldw	r3,-24(fp)
10010f2c:	19000104 	addi	r4,r3,4
10010f30:	e13ffa15 	stw	r4,-24(fp)
10010f34:	18c00017 	ldw	r3,0(r3)
10010f38:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
10010f3c:	e0fffa17 	ldw	r3,-24(fp)
10010f40:	e0bffc17 	ldw	r2,-16(fp)
10010f44:	18bff536 	bltu	r3,r2,10010f1c <__alt_data_end+0xf8010f1c>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
10010f48:	00000406 	br	10010f5c <__copybits+0xb0>
		*c++ = 0;
10010f4c:	e0bffd17 	ldw	r2,-12(fp)
10010f50:	10c00104 	addi	r3,r2,4
10010f54:	e0fffd15 	stw	r3,-12(fp)
10010f58:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
10010f5c:	e0fffd17 	ldw	r3,-12(fp)
10010f60:	e0bffb17 	ldw	r2,-20(fp)
10010f64:	18bff936 	bltu	r3,r2,10010f4c <__alt_data_end+0xf8010f4c>
		*c++ = 0;
}
10010f68:	0001883a 	nop
10010f6c:	e037883a 	mov	sp,fp
10010f70:	df000017 	ldw	fp,0(sp)
10010f74:	dec00104 	addi	sp,sp,4
10010f78:	f800283a 	ret

10010f7c <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
10010f7c:	defff704 	addi	sp,sp,-36
10010f80:	df000815 	stw	fp,32(sp)
10010f84:	df000804 	addi	fp,sp,32
10010f88:	e13ffe15 	stw	r4,-8(fp)
10010f8c:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
10010f90:	e0bffe17 	ldw	r2,-8(fp)
10010f94:	10800504 	addi	r2,r2,20
10010f98:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
10010f9c:	e0bffe17 	ldw	r2,-8(fp)
10010fa0:	10800417 	ldw	r2,16(r2)
10010fa4:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
10010fa8:	e0bfff17 	ldw	r2,-4(fp)
10010fac:	1005d17a 	srai	r2,r2,5
10010fb0:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
10010fb4:	e0bff817 	ldw	r2,-32(fp)
10010fb8:	e0fffa17 	ldw	r3,-24(fp)
10010fbc:	1880030e 	bge	r3,r2,10010fcc <__any_on+0x50>
		n = nwds;
10010fc0:	e0bffa17 	ldw	r2,-24(fp)
10010fc4:	e0bff815 	stw	r2,-32(fp)
10010fc8:	00001f06 	br	10011048 <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
10010fcc:	e0fff817 	ldw	r3,-32(fp)
10010fd0:	e0bffa17 	ldw	r2,-24(fp)
10010fd4:	18801c0e 	bge	r3,r2,10011048 <__any_on+0xcc>
10010fd8:	e0bfff17 	ldw	r2,-4(fp)
10010fdc:	108007cc 	andi	r2,r2,31
10010fe0:	e0bfff15 	stw	r2,-4(fp)
10010fe4:	e0bfff17 	ldw	r2,-4(fp)
10010fe8:	10001726 	beq	r2,zero,10011048 <__any_on+0xcc>
		x1 = x2 = x[n];
10010fec:	e0bff817 	ldw	r2,-32(fp)
10010ff0:	1085883a 	add	r2,r2,r2
10010ff4:	1085883a 	add	r2,r2,r2
10010ff8:	1007883a 	mov	r3,r2
10010ffc:	e0bff917 	ldw	r2,-28(fp)
10011000:	10c5883a 	add	r2,r2,r3
10011004:	10800017 	ldw	r2,0(r2)
10011008:	e0bffb15 	stw	r2,-20(fp)
1001100c:	e0bffb17 	ldw	r2,-20(fp)
10011010:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
10011014:	e0fffc17 	ldw	r3,-16(fp)
10011018:	e0bfff17 	ldw	r2,-4(fp)
1001101c:	1884d83a 	srl	r2,r3,r2
10011020:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
10011024:	e0fffc17 	ldw	r3,-16(fp)
10011028:	e0bfff17 	ldw	r2,-4(fp)
1001102c:	1884983a 	sll	r2,r3,r2
10011030:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
10011034:	e0fffc17 	ldw	r3,-16(fp)
10011038:	e0bffb17 	ldw	r2,-20(fp)
1001103c:	18800226 	beq	r3,r2,10011048 <__any_on+0xcc>
			return 1;
10011040:	00800044 	movi	r2,1
10011044:	00001606 	br	100110a0 <__any_on+0x124>
		}
	x0 = x;
10011048:	e0bff917 	ldw	r2,-28(fp)
1001104c:	e0bffd15 	stw	r2,-12(fp)
	x += n;
10011050:	e0bff817 	ldw	r2,-32(fp)
10011054:	1085883a 	add	r2,r2,r2
10011058:	1085883a 	add	r2,r2,r2
1001105c:	1007883a 	mov	r3,r2
10011060:	e0bff917 	ldw	r2,-28(fp)
10011064:	10c5883a 	add	r2,r2,r3
10011068:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
1001106c:	00000806 	br	10011090 <__any_on+0x114>
		if (*--x)
10011070:	e0bff917 	ldw	r2,-28(fp)
10011074:	10bfff04 	addi	r2,r2,-4
10011078:	e0bff915 	stw	r2,-28(fp)
1001107c:	e0bff917 	ldw	r2,-28(fp)
10011080:	10800017 	ldw	r2,0(r2)
10011084:	10000226 	beq	r2,zero,10011090 <__any_on+0x114>
			return 1;
10011088:	00800044 	movi	r2,1
1001108c:	00000406 	br	100110a0 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
10011090:	e0bff917 	ldw	r2,-28(fp)
10011094:	e0fffd17 	ldw	r3,-12(fp)
10011098:	18bff536 	bltu	r3,r2,10011070 <__alt_data_end+0xf8011070>
		if (*--x)
			return 1;
	return 0;
1001109c:	0005883a 	mov	r2,zero
}
100110a0:	e037883a 	mov	sp,fp
100110a4:	df000017 	ldw	fp,0(sp)
100110a8:	dec00104 	addi	sp,sp,4
100110ac:	f800283a 	ret

100110b0 <_putc_r>:
int
_DEFUN(_putc_r, (ptr, c, fp),
       struct _reent *ptr _AND
       int c _AND
       register FILE *fp)
{
100110b0:	defff904 	addi	sp,sp,-28
100110b4:	dfc00615 	stw	ra,24(sp)
100110b8:	df000515 	stw	fp,20(sp)
100110bc:	dc000415 	stw	r16,16(sp)
100110c0:	df000504 	addi	fp,sp,20
100110c4:	e13ffd15 	stw	r4,-12(fp)
100110c8:	e17ffe15 	stw	r5,-8(fp)
100110cc:	3021883a 	mov	r16,r6
  int result;
  CHECK_INIT (ptr, fp);
100110d0:	e0bffd17 	ldw	r2,-12(fp)
100110d4:	e0bffb15 	stw	r2,-20(fp)
100110d8:	e0bffb17 	ldw	r2,-20(fp)
100110dc:	10000526 	beq	r2,zero,100110f4 <_putc_r+0x44>
100110e0:	e0bffb17 	ldw	r2,-20(fp)
100110e4:	10800e17 	ldw	r2,56(r2)
100110e8:	1000021e 	bne	r2,zero,100110f4 <_putc_r+0x44>
100110ec:	e13ffb17 	ldw	r4,-20(fp)
100110f0:	000db400 	call	1000db40 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (ptr, c, fp);
100110f4:	80800217 	ldw	r2,8(r16)
100110f8:	10bfffc4 	addi	r2,r2,-1
100110fc:	80800215 	stw	r2,8(r16)
10011100:	80800217 	ldw	r2,8(r16)
10011104:	10001b0e 	bge	r2,zero,10011174 <_putc_r+0xc4>
10011108:	80c00217 	ldw	r3,8(r16)
1001110c:	80800617 	ldw	r2,24(r16)
10011110:	18801316 	blt	r3,r2,10011160 <_putc_r+0xb0>
10011114:	80800017 	ldw	r2,0(r16)
10011118:	e0fffe17 	ldw	r3,-8(fp)
1001111c:	10c00005 	stb	r3,0(r2)
10011120:	80800017 	ldw	r2,0(r16)
10011124:	10800003 	ldbu	r2,0(r2)
10011128:	10803fcc 	andi	r2,r2,255
1001112c:	108002a0 	cmpeqi	r2,r2,10
10011130:	1000061e 	bne	r2,zero,1001114c <_putc_r+0x9c>
10011134:	80800017 	ldw	r2,0(r16)
10011138:	10c00044 	addi	r3,r2,1
1001113c:	80c00015 	stw	r3,0(r16)
10011140:	10800003 	ldbu	r2,0(r2)
10011144:	10803fcc 	andi	r2,r2,255
10011148:	00001206 	br	10011194 <_putc_r+0xe4>
1001114c:	800d883a 	mov	r6,r16
10011150:	01400284 	movi	r5,10
10011154:	e13ffd17 	ldw	r4,-12(fp)
10011158:	00130940 	call	10013094 <__swbuf_r>
1001115c:	00000d06 	br	10011194 <_putc_r+0xe4>
10011160:	800d883a 	mov	r6,r16
10011164:	e17ffe17 	ldw	r5,-8(fp)
10011168:	e13ffd17 	ldw	r4,-12(fp)
1001116c:	00130940 	call	10013094 <__swbuf_r>
10011170:	00000806 	br	10011194 <_putc_r+0xe4>
10011174:	80800017 	ldw	r2,0(r16)
10011178:	e0fffe17 	ldw	r3,-8(fp)
1001117c:	10c00005 	stb	r3,0(r2)
10011180:	80800017 	ldw	r2,0(r16)
10011184:	10c00044 	addi	r3,r2,1
10011188:	80c00015 	stw	r3,0(r16)
1001118c:	10800003 	ldbu	r2,0(r2)
10011190:	10803fcc 	andi	r2,r2,255
10011194:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return result;
10011198:	e0bffc17 	ldw	r2,-16(fp)
}
1001119c:	e6ffff04 	addi	sp,fp,-4
100111a0:	dfc00217 	ldw	ra,8(sp)
100111a4:	df000117 	ldw	fp,4(sp)
100111a8:	dc000017 	ldw	r16,0(sp)
100111ac:	dec00304 	addi	sp,sp,12
100111b0:	f800283a 	ret

100111b4 <putc>:
#ifndef _REENT_ONLY
int
_DEFUN(putc, (c, fp),
       int c _AND
       register FILE *fp)
{
100111b4:	defff904 	addi	sp,sp,-28
100111b8:	dfc00615 	stw	ra,24(sp)
100111bc:	df000515 	stw	fp,20(sp)
100111c0:	dc000415 	stw	r16,16(sp)
100111c4:	df000504 	addi	fp,sp,20
100111c8:	e13ffe15 	stw	r4,-8(fp)
100111cc:	2821883a 	mov	r16,r5
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  int result;
  struct _reent *reent = _REENT;
100111d0:	008403b4 	movhi	r2,4110
100111d4:	10a44204 	addi	r2,r2,-28408
100111d8:	10800017 	ldw	r2,0(r2)
100111dc:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT (reent, fp);
100111e0:	e0bffb17 	ldw	r2,-20(fp)
100111e4:	e0bffc15 	stw	r2,-16(fp)
100111e8:	e0bffc17 	ldw	r2,-16(fp)
100111ec:	10000526 	beq	r2,zero,10011204 <putc+0x50>
100111f0:	e0bffc17 	ldw	r2,-16(fp)
100111f4:	10800e17 	ldw	r2,56(r2)
100111f8:	1000021e 	bne	r2,zero,10011204 <putc+0x50>
100111fc:	e13ffc17 	ldw	r4,-16(fp)
10011200:	000db400 	call	1000db40 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (reent, c, fp);
10011204:	80800217 	ldw	r2,8(r16)
10011208:	10bfffc4 	addi	r2,r2,-1
1001120c:	80800215 	stw	r2,8(r16)
10011210:	80800217 	ldw	r2,8(r16)
10011214:	10001b0e 	bge	r2,zero,10011284 <putc+0xd0>
10011218:	80c00217 	ldw	r3,8(r16)
1001121c:	80800617 	ldw	r2,24(r16)
10011220:	18801316 	blt	r3,r2,10011270 <putc+0xbc>
10011224:	80800017 	ldw	r2,0(r16)
10011228:	e0fffe17 	ldw	r3,-8(fp)
1001122c:	10c00005 	stb	r3,0(r2)
10011230:	80800017 	ldw	r2,0(r16)
10011234:	10800003 	ldbu	r2,0(r2)
10011238:	10803fcc 	andi	r2,r2,255
1001123c:	108002a0 	cmpeqi	r2,r2,10
10011240:	1000061e 	bne	r2,zero,1001125c <putc+0xa8>
10011244:	80800017 	ldw	r2,0(r16)
10011248:	10c00044 	addi	r3,r2,1
1001124c:	80c00015 	stw	r3,0(r16)
10011250:	10800003 	ldbu	r2,0(r2)
10011254:	10803fcc 	andi	r2,r2,255
10011258:	00001206 	br	100112a4 <putc+0xf0>
1001125c:	800d883a 	mov	r6,r16
10011260:	01400284 	movi	r5,10
10011264:	e13ffb17 	ldw	r4,-20(fp)
10011268:	00130940 	call	10013094 <__swbuf_r>
1001126c:	00000d06 	br	100112a4 <putc+0xf0>
10011270:	800d883a 	mov	r6,r16
10011274:	e17ffe17 	ldw	r5,-8(fp)
10011278:	e13ffb17 	ldw	r4,-20(fp)
1001127c:	00130940 	call	10013094 <__swbuf_r>
10011280:	00000806 	br	100112a4 <putc+0xf0>
10011284:	80800017 	ldw	r2,0(r16)
10011288:	e0fffe17 	ldw	r3,-8(fp)
1001128c:	10c00005 	stb	r3,0(r2)
10011290:	80800017 	ldw	r2,0(r16)
10011294:	10c00044 	addi	r3,r2,1
10011298:	80c00015 	stw	r3,0(r16)
1001129c:	10800003 	ldbu	r2,0(r2)
100112a0:	10803fcc 	andi	r2,r2,255
100112a4:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
100112a8:	e0bffd17 	ldw	r2,-12(fp)
#else
  return _putc_r (_REENT, c, fp);
#endif
}
100112ac:	e6ffff04 	addi	sp,fp,-4
100112b0:	dfc00217 	ldw	ra,8(sp)
100112b4:	df000117 	ldw	fp,4(sp)
100112b8:	dc000017 	ldw	r16,0(sp)
100112bc:	dec00304 	addi	sp,sp,12
100112c0:	f800283a 	ret

100112c4 <lflush>:
#include "local.h"

static int
_DEFUN(lflush, (fp),
       FILE *fp)
{
100112c4:	defffd04 	addi	sp,sp,-12
100112c8:	dfc00215 	stw	ra,8(sp)
100112cc:	df000115 	stw	fp,4(sp)
100112d0:	df000104 	addi	fp,sp,4
100112d4:	e13fff15 	stw	r4,-4(fp)
  if ((fp->_flags & (__SLBF | __SWR)) == (__SLBF | __SWR))
100112d8:	e0bfff17 	ldw	r2,-4(fp)
100112dc:	1080030b 	ldhu	r2,12(r2)
100112e0:	10bfffcc 	andi	r2,r2,65535
100112e4:	1080024c 	andi	r2,r2,9
100112e8:	10800258 	cmpnei	r2,r2,9
100112ec:	1000031e 	bne	r2,zero,100112fc <lflush+0x38>
    return fflush (fp);
100112f0:	e13fff17 	ldw	r4,-4(fp)
100112f4:	000d7000 	call	1000d700 <fflush>
100112f8:	00000106 	br	10011300 <lflush+0x3c>
  return 0;
100112fc:	0005883a 	mov	r2,zero
}
10011300:	e037883a 	mov	sp,fp
10011304:	dfc00117 	ldw	ra,4(sp)
10011308:	df000017 	ldw	fp,0(sp)
1001130c:	dec00204 	addi	sp,sp,8
10011310:	f800283a 	ret

10011314 <__srefill_r>:

int
_DEFUN(__srefill_r, (ptr, fp),
       struct _reent * ptr _AND
       register FILE * fp)
{
10011314:	defffa04 	addi	sp,sp,-24
10011318:	dfc00515 	stw	ra,20(sp)
1001131c:	df000415 	stw	fp,16(sp)
10011320:	dc000315 	stw	r16,12(sp)
10011324:	df000404 	addi	fp,sp,16
10011328:	e13ffe15 	stw	r4,-8(fp)
1001132c:	2821883a 	mov	r16,r5
  /* make sure stdio is set up */

  CHECK_INIT (ptr, fp);
10011330:	e0bffe17 	ldw	r2,-8(fp)
10011334:	e0bffc15 	stw	r2,-16(fp)
10011338:	e0bffc17 	ldw	r2,-16(fp)
1001133c:	10000526 	beq	r2,zero,10011354 <__srefill_r+0x40>
10011340:	e0bffc17 	ldw	r2,-16(fp)
10011344:	10800e17 	ldw	r2,56(r2)
10011348:	1000021e 	bne	r2,zero,10011354 <__srefill_r+0x40>
1001134c:	e13ffc17 	ldw	r4,-16(fp)
10011350:	000db400 	call	1000db40 <__sinit>

  ORIENT (fp, -1);
10011354:	8080030b 	ldhu	r2,12(r16)
10011358:	10bfffcc 	andi	r2,r2,65535
1001135c:	1088000c 	andi	r2,r2,8192
10011360:	1000071e 	bne	r2,zero,10011380 <__srefill_r+0x6c>
10011364:	8080030b 	ldhu	r2,12(r16)
10011368:	10880014 	ori	r2,r2,8192
1001136c:	8080030d 	sth	r2,12(r16)
10011370:	80c01917 	ldw	r3,100(r16)
10011374:	00b7ffc4 	movi	r2,-8193
10011378:	1884703a 	and	r2,r3,r2
1001137c:	80801915 	stw	r2,100(r16)

  fp->_r = 0;			/* largely a convenience for callers */
10011380:	80000115 	stw	zero,4(r16)

#ifndef __CYGWIN__
  /* SysV does not make this test; take it out for compatibility */
  if (fp->_flags & __SEOF)
10011384:	8080030b 	ldhu	r2,12(r16)
10011388:	10bfffcc 	andi	r2,r2,65535
1001138c:	1080080c 	andi	r2,r2,32
10011390:	10000226 	beq	r2,zero,1001139c <__srefill_r+0x88>
    return EOF;
10011394:	00bfffc4 	movi	r2,-1
10011398:	00006f06 	br	10011558 <__srefill_r+0x244>
#endif

  /* if not already reading, have to be reading and writing */
  if ((fp->_flags & __SRD) == 0)
1001139c:	8080030b 	ldhu	r2,12(r16)
100113a0:	10bfffcc 	andi	r2,r2,65535
100113a4:	1080010c 	andi	r2,r2,4
100113a8:	1000201e 	bne	r2,zero,1001142c <__srefill_r+0x118>
    {
      if ((fp->_flags & __SRW) == 0)
100113ac:	8080030b 	ldhu	r2,12(r16)
100113b0:	10bfffcc 	andi	r2,r2,65535
100113b4:	1080040c 	andi	r2,r2,16
100113b8:	1000081e 	bne	r2,zero,100113dc <__srefill_r+0xc8>
	{
	  ptr->_errno = EBADF;
100113bc:	e0bffe17 	ldw	r2,-8(fp)
100113c0:	00c00244 	movi	r3,9
100113c4:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
100113c8:	8080030b 	ldhu	r2,12(r16)
100113cc:	10801014 	ori	r2,r2,64
100113d0:	8080030d 	sth	r2,12(r16)
	  return EOF;
100113d4:	00bfffc4 	movi	r2,-1
100113d8:	00005f06 	br	10011558 <__srefill_r+0x244>
	}
      /* switch to reading */
      if (fp->_flags & __SWR)
100113dc:	8080030b 	ldhu	r2,12(r16)
100113e0:	10bfffcc 	andi	r2,r2,65535
100113e4:	1080020c 	andi	r2,r2,8
100113e8:	10000c26 	beq	r2,zero,1001141c <__srefill_r+0x108>
	{
	  if (_fflush_r (ptr, fp))
100113ec:	800b883a 	mov	r5,r16
100113f0:	e13ffe17 	ldw	r4,-8(fp)
100113f4:	000d6780 	call	1000d678 <_fflush_r>
100113f8:	10000226 	beq	r2,zero,10011404 <__srefill_r+0xf0>
	    return EOF;
100113fc:	00bfffc4 	movi	r2,-1
10011400:	00005506 	br	10011558 <__srefill_r+0x244>
	  fp->_flags &= ~__SWR;
10011404:	80c0030b 	ldhu	r3,12(r16)
10011408:	00bffdc4 	movi	r2,-9
1001140c:	1884703a 	and	r2,r3,r2
10011410:	8080030d 	sth	r2,12(r16)
	  fp->_w = 0;
10011414:	80000215 	stw	zero,8(r16)
	  fp->_lbfsize = 0;
10011418:	80000615 	stw	zero,24(r16)
	}
      fp->_flags |= __SRD;
1001141c:	8080030b 	ldhu	r2,12(r16)
10011420:	10800114 	ori	r2,r2,4
10011424:	8080030d 	sth	r2,12(r16)
10011428:	00001206 	br	10011474 <__srefill_r+0x160>
       * We were reading.  If there is an ungetc buffer,
       * we must have been reading from that.  Drop it,
       * restoring the previous buffer (if any).  If there
       * is anything in that buffer, return.
       */
      if (HASUB (fp))
1001142c:	80800c17 	ldw	r2,48(r16)
10011430:	10001026 	beq	r2,zero,10011474 <__srefill_r+0x160>
	{
	  FREEUB (ptr, fp);
10011434:	80c00c17 	ldw	r3,48(r16)
10011438:	80801004 	addi	r2,r16,64
1001143c:	18800426 	beq	r3,r2,10011450 <__srefill_r+0x13c>
10011440:	80800c17 	ldw	r2,48(r16)
10011444:	100b883a 	mov	r5,r2
10011448:	e13ffe17 	ldw	r4,-8(fp)
1001144c:	000dd700 	call	1000dd70 <_free_r>
10011450:	80000c15 	stw	zero,48(r16)
	  if ((fp->_r = fp->_ur) != 0)
10011454:	80800f17 	ldw	r2,60(r16)
10011458:	80800115 	stw	r2,4(r16)
1001145c:	80800117 	ldw	r2,4(r16)
10011460:	10000426 	beq	r2,zero,10011474 <__srefill_r+0x160>
	    {
	      fp->_p = fp->_up;
10011464:	80800e17 	ldw	r2,56(r16)
10011468:	80800015 	stw	r2,0(r16)
	      return 0;
1001146c:	0005883a 	mov	r2,zero
10011470:	00003906 	br	10011558 <__srefill_r+0x244>
	    }
	}
    }

  if (fp->_bf._base == NULL)
10011474:	80800417 	ldw	r2,16(r16)
10011478:	1000031e 	bne	r2,zero,10011488 <__srefill_r+0x174>
    __smakebuf_r (ptr, fp);
1001147c:	800b883a 	mov	r5,r16
10011480:	e13ffe17 	ldw	r4,-8(fp)
10011484:	000ee880 	call	1000ee88 <__smakebuf_r>
  /*
   * Before reading from a line buffered or unbuffered file,
   * flush all line buffered output files, per the ANSI C
   * standard.
   */
  if (fp->_flags & (__SLBF | __SNBF))
10011488:	8080030b 	ldhu	r2,12(r16)
1001148c:	10bfffcc 	andi	r2,r2,65535
10011490:	108000cc 	andi	r2,r2,3
10011494:	10001526 	beq	r2,zero,100114ec <__srefill_r+0x1d8>
    {
      /* Ignore this file in _fwalk to avoid potential deadlock. */
      short orig_flags = fp->_flags;
10011498:	8080030b 	ldhu	r2,12(r16)
1001149c:	e0bffd0d 	sth	r2,-12(fp)
      fp->_flags = 1;
100114a0:	00800044 	movi	r2,1
100114a4:	8080030d 	sth	r2,12(r16)
      _CAST_VOID _fwalk (_GLOBAL_REENT, lflush);
100114a8:	008403b4 	movhi	r2,4110
100114ac:	10a44304 	addi	r2,r2,-28404
100114b0:	10800017 	ldw	r2,0(r2)
100114b4:	01440074 	movhi	r5,4097
100114b8:	2944b104 	addi	r5,r5,4804
100114bc:	1009883a 	mov	r4,r2
100114c0:	000eaa00 	call	1000eaa0 <_fwalk>
      fp->_flags = orig_flags;
100114c4:	e0bffd0b 	ldhu	r2,-12(fp)
100114c8:	8080030d 	sth	r2,12(r16)

      /* Now flush this file without locking it. */
      if ((fp->_flags & (__SLBF|__SWR)) == (__SLBF|__SWR))
100114cc:	8080030b 	ldhu	r2,12(r16)
100114d0:	10bfffcc 	andi	r2,r2,65535
100114d4:	1080024c 	andi	r2,r2,9
100114d8:	10800258 	cmpnei	r2,r2,9
100114dc:	1000031e 	bne	r2,zero,100114ec <__srefill_r+0x1d8>
	__sflush_r (ptr, fp);
100114e0:	800b883a 	mov	r5,r16
100114e4:	e13ffe17 	ldw	r4,-8(fp)
100114e8:	000d3740 	call	1000d374 <__sflush_r>
    }

  fp->_p = fp->_bf._base;
100114ec:	80800417 	ldw	r2,16(r16)
100114f0:	80800015 	stw	r2,0(r16)
  fp->_r = fp->_read (ptr, fp->_cookie, (char *) fp->_p, fp->_bf._size);
100114f4:	80800817 	ldw	r2,32(r16)
100114f8:	80c00717 	ldw	r3,28(r16)
100114fc:	81000017 	ldw	r4,0(r16)
10011500:	81400517 	ldw	r5,20(r16)
10011504:	280f883a 	mov	r7,r5
10011508:	200d883a 	mov	r6,r4
1001150c:	180b883a 	mov	r5,r3
10011510:	e13ffe17 	ldw	r4,-8(fp)
10011514:	103ee83a 	callr	r2
10011518:	80800115 	stw	r2,4(r16)
#ifndef __CYGWIN__
  if (fp->_r <= 0)
1001151c:	80800117 	ldw	r2,4(r16)
10011520:	00800c16 	blt	zero,r2,10011554 <__srefill_r+0x240>
  if (fp->_r > 0)
    fp->_flags &= ~__SEOF;
  else
#endif
    {
      if (fp->_r == 0)
10011524:	80800117 	ldw	r2,4(r16)
10011528:	1000041e 	bne	r2,zero,1001153c <__srefill_r+0x228>
	fp->_flags |= __SEOF;
1001152c:	8080030b 	ldhu	r2,12(r16)
10011530:	10800814 	ori	r2,r2,32
10011534:	8080030d 	sth	r2,12(r16)
10011538:	00000406 	br	1001154c <__srefill_r+0x238>
      else
	{
	  fp->_r = 0;
1001153c:	80000115 	stw	zero,4(r16)
	  fp->_flags |= __SERR;
10011540:	8080030b 	ldhu	r2,12(r16)
10011544:	10801014 	ori	r2,r2,64
10011548:	8080030d 	sth	r2,12(r16)
	}
      return EOF;
1001154c:	00bfffc4 	movi	r2,-1
10011550:	00000106 	br	10011558 <__srefill_r+0x244>
    }
  return 0;
10011554:	0005883a 	mov	r2,zero
}
10011558:	e6ffff04 	addi	sp,fp,-4
1001155c:	dfc00217 	ldw	ra,8(sp)
10011560:	df000117 	ldw	fp,4(sp)
10011564:	dc000017 	ldw	r16,0(sp)
10011568:	dec00304 	addi	sp,sp,12
1001156c:	f800283a 	ret

10011570 <copysign>:
	double copysign(double x, double y)
#else
	double copysign(x,y)
	double x,y;
#endif
{
10011570:	defff304 	addi	sp,sp,-52
10011574:	df000c15 	stw	fp,48(sp)
10011578:	df000c04 	addi	fp,sp,48
1001157c:	e13ffc15 	stw	r4,-16(fp)
10011580:	e17ffd15 	stw	r5,-12(fp)
10011584:	e1bffe15 	stw	r6,-8(fp)
10011588:	e1ffff15 	stw	r7,-4(fp)
	__uint32_t hx,hy;
	GET_HIGH_WORD(hx,x);
1001158c:	e0bffc17 	ldw	r2,-16(fp)
10011590:	e0bff615 	stw	r2,-40(fp)
10011594:	e0bffd17 	ldw	r2,-12(fp)
10011598:	e0bff715 	stw	r2,-36(fp)
1001159c:	e0bff717 	ldw	r2,-36(fp)
100115a0:	e0bff415 	stw	r2,-48(fp)
	GET_HIGH_WORD(hy,y);
100115a4:	e0bffe17 	ldw	r2,-8(fp)
100115a8:	e0bff815 	stw	r2,-32(fp)
100115ac:	e0bfff17 	ldw	r2,-4(fp)
100115b0:	e0bff915 	stw	r2,-28(fp)
100115b4:	e0bff917 	ldw	r2,-28(fp)
100115b8:	e0bff515 	stw	r2,-44(fp)
	SET_HIGH_WORD(x,(hx&0x7fffffff)|(hy&0x80000000));
100115bc:	e0bffc17 	ldw	r2,-16(fp)
100115c0:	e0bffa15 	stw	r2,-24(fp)
100115c4:	e0bffd17 	ldw	r2,-12(fp)
100115c8:	e0bffb15 	stw	r2,-20(fp)
100115cc:	e0fff417 	ldw	r3,-48(fp)
100115d0:	00a00034 	movhi	r2,32768
100115d4:	10bfffc4 	addi	r2,r2,-1
100115d8:	1886703a 	and	r3,r3,r2
100115dc:	e0bff517 	ldw	r2,-44(fp)
100115e0:	10a0002c 	andhi	r2,r2,32768
100115e4:	1884b03a 	or	r2,r3,r2
100115e8:	e0bffb15 	stw	r2,-20(fp)
100115ec:	e0bffa17 	ldw	r2,-24(fp)
100115f0:	e0bffc15 	stw	r2,-16(fp)
100115f4:	e0bffb17 	ldw	r2,-20(fp)
100115f8:	e0bffd15 	stw	r2,-12(fp)
        return x;
100115fc:	e0bffc17 	ldw	r2,-16(fp)
10011600:	e0fffd17 	ldw	r3,-12(fp)
10011604:	1009883a 	mov	r4,r2
10011608:	180b883a 	mov	r5,r3
}
1001160c:	2005883a 	mov	r2,r4
10011610:	2807883a 	mov	r3,r5
10011614:	e037883a 	mov	sp,fp
10011618:	df000017 	ldw	fp,0(sp)
1001161c:	dec00104 	addi	sp,sp,4
10011620:	f800283a 	ret

10011624 <finite>:
	int finite(double x)
#else
	int finite(x)
	double x;
#endif
{
10011624:	defffa04 	addi	sp,sp,-24
10011628:	df000515 	stw	fp,20(sp)
1001162c:	df000504 	addi	fp,sp,20
10011630:	e13ffe15 	stw	r4,-8(fp)
10011634:	e17fff15 	stw	r5,-4(fp)
	__int32_t hx;
	GET_HIGH_WORD(hx,x);
10011638:	e0bffe17 	ldw	r2,-8(fp)
1001163c:	e0bffc15 	stw	r2,-16(fp)
10011640:	e0bfff17 	ldw	r2,-4(fp)
10011644:	e0bffd15 	stw	r2,-12(fp)
10011648:	e0bffd17 	ldw	r2,-12(fp)
1001164c:	e0bffb15 	stw	r2,-20(fp)
	return  (int)((__uint32_t)((hx&0x7fffffff)-0x7ff00000)>>31);
10011650:	e0fffb17 	ldw	r3,-20(fp)
10011654:	00a00034 	movhi	r2,32768
10011658:	10bfffc4 	addi	r2,r2,-1
1001165c:	1886703a 	and	r3,r3,r2
10011660:	00a00434 	movhi	r2,32784
10011664:	1885883a 	add	r2,r3,r2
10011668:	1004d7fa 	srli	r2,r2,31
}
1001166c:	e037883a 	mov	sp,fp
10011670:	df000017 	ldw	fp,0(sp)
10011674:	dec00104 	addi	sp,sp,4
10011678:	f800283a 	ret

1001167c <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
1001167c:	defff904 	addi	sp,sp,-28
10011680:	df000615 	stw	fp,24(sp)
10011684:	df000604 	addi	fp,sp,24
10011688:	e13ffe15 	stw	r4,-8(fp)
1001168c:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
10011690:	e0bffe17 	ldw	r2,-8(fp)
10011694:	e0bffc15 	stw	r2,-16(fp)
10011698:	e0bfff17 	ldw	r2,-4(fp)
1001169c:	e0bffd15 	stw	r2,-12(fp)
100116a0:	e0bffd17 	ldw	r2,-12(fp)
100116a4:	e0bffa15 	stw	r2,-24(fp)
100116a8:	e0bffc17 	ldw	r2,-16(fp)
100116ac:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
100116b0:	e0bffa17 	ldw	r2,-24(fp)
100116b4:	1000021e 	bne	r2,zero,100116c0 <__fpclassifyd+0x44>
100116b8:	e0bffb17 	ldw	r2,-20(fp)
100116bc:	10000526 	beq	r2,zero,100116d4 <__fpclassifyd+0x58>
100116c0:	e0fffa17 	ldw	r3,-24(fp)
100116c4:	00a00034 	movhi	r2,32768
100116c8:	1880041e 	bne	r3,r2,100116dc <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
100116cc:	e0bffb17 	ldw	r2,-20(fp)
100116d0:	1000021e 	bne	r2,zero,100116dc <__fpclassifyd+0x60>
    return FP_ZERO;
100116d4:	00800084 	movi	r2,2
100116d8:	00002506 	br	10011770 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
100116dc:	e0fffa17 	ldw	r3,-24(fp)
100116e0:	00800434 	movhi	r2,16
100116e4:	18800336 	bltu	r3,r2,100116f4 <__fpclassifyd+0x78>
100116e8:	e0fffa17 	ldw	r3,-24(fp)
100116ec:	009ffc34 	movhi	r2,32752
100116f0:	18800636 	bltu	r3,r2,1001170c <__fpclassifyd+0x90>
100116f4:	e0fffa17 	ldw	r3,-24(fp)
100116f8:	00a00434 	movhi	r2,32784
100116fc:	18800536 	bltu	r3,r2,10011714 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
10011700:	e0fffa17 	ldw	r3,-24(fp)
10011704:	00bffc34 	movhi	r2,65520
10011708:	1880022e 	bgeu	r3,r2,10011714 <__fpclassifyd+0x98>
    return FP_NORMAL;
1001170c:	00800104 	movi	r2,4
10011710:	00001706 	br	10011770 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
10011714:	e0fffa17 	ldw	r3,-24(fp)
10011718:	00800434 	movhi	r2,16
1001171c:	18800536 	bltu	r3,r2,10011734 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
10011720:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
10011724:	1000050e 	bge	r2,zero,1001173c <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
10011728:	e0fffa17 	ldw	r3,-24(fp)
1001172c:	00a00434 	movhi	r2,32784
10011730:	1880022e 	bgeu	r3,r2,1001173c <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
10011734:	008000c4 	movi	r2,3
10011738:	00000d06 	br	10011770 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
1001173c:	e0fffa17 	ldw	r3,-24(fp)
10011740:	009ffc34 	movhi	r2,32752
10011744:	1880021e 	bne	r3,r2,10011750 <__fpclassifyd+0xd4>
10011748:	e0bffb17 	ldw	r2,-20(fp)
1001174c:	10000526 	beq	r2,zero,10011764 <__fpclassifyd+0xe8>
10011750:	e0fffa17 	ldw	r3,-24(fp)
10011754:	00bffc34 	movhi	r2,65520
10011758:	1880041e 	bne	r3,r2,1001176c <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
1001175c:	e0bffb17 	ldw	r2,-20(fp)
10011760:	1000021e 	bne	r2,zero,1001176c <__fpclassifyd+0xf0>
    return FP_INFINITE;
10011764:	00800044 	movi	r2,1
10011768:	00000106 	br	10011770 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
1001176c:	0005883a 	mov	r2,zero
}
10011770:	e037883a 	mov	sp,fp
10011774:	df000017 	ldw	fp,0(sp)
10011778:	dec00104 	addi	sp,sp,4
1001177c:	f800283a 	ret

10011780 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
10011780:	defff804 	addi	sp,sp,-32
10011784:	dfc00715 	stw	ra,28(sp)
10011788:	df000615 	stw	fp,24(sp)
1001178c:	dc400515 	stw	r17,20(sp)
10011790:	dc000415 	stw	r16,16(sp)
10011794:	df000604 	addi	fp,sp,24
10011798:	e13ffa15 	stw	r4,-24(fp)
1001179c:	e17ffb15 	stw	r5,-20(fp)
100117a0:	e1bffc15 	stw	r6,-16(fp)
100117a4:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
100117a8:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
100117ac:	8080038b 	ldhu	r2,14(r16)
100117b0:	10bfffcc 	andi	r2,r2,65535
100117b4:	10a0001c 	xori	r2,r2,32768
100117b8:	10a00004 	addi	r2,r2,-32768
100117bc:	e0fffd17 	ldw	r3,-12(fp)
100117c0:	180f883a 	mov	r7,r3
100117c4:	e1bffc17 	ldw	r6,-16(fp)
100117c8:	100b883a 	mov	r5,r2
100117cc:	e13ffa17 	ldw	r4,-24(fp)
100117d0:	001391c0 	call	1001391c <_read_r>
100117d4:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
100117d8:	88000416 	blt	r17,zero,100117ec <__sread+0x6c>
    fp->_offset += ret;
100117dc:	80801417 	ldw	r2,80(r16)
100117e0:	1445883a 	add	r2,r2,r17
100117e4:	80801415 	stw	r2,80(r16)
100117e8:	00000406 	br	100117fc <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
100117ec:	80c0030b 	ldhu	r3,12(r16)
100117f0:	00bbffc4 	movi	r2,-4097
100117f4:	1884703a 	and	r2,r3,r2
100117f8:	8080030d 	sth	r2,12(r16)
  return ret;
100117fc:	8805883a 	mov	r2,r17
}
10011800:	e6fffe04 	addi	sp,fp,-8
10011804:	dfc00317 	ldw	ra,12(sp)
10011808:	df000217 	ldw	fp,8(sp)
1001180c:	dc400117 	ldw	r17,4(sp)
10011810:	dc000017 	ldw	r16,0(sp)
10011814:	dec00404 	addi	sp,sp,16
10011818:	f800283a 	ret

1001181c <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
1001181c:	defffb04 	addi	sp,sp,-20
10011820:	df000415 	stw	fp,16(sp)
10011824:	df000404 	addi	fp,sp,16
10011828:	e13ffc15 	stw	r4,-16(fp)
1001182c:	e17ffd15 	stw	r5,-12(fp)
10011830:	e1bffe15 	stw	r6,-8(fp)
10011834:	e1ffff15 	stw	r7,-4(fp)
  return 0;
10011838:	0005883a 	mov	r2,zero
}
1001183c:	e037883a 	mov	sp,fp
10011840:	df000017 	ldw	fp,0(sp)
10011844:	dec00104 	addi	sp,sp,4
10011848:	f800283a 	ret

1001184c <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
1001184c:	defff804 	addi	sp,sp,-32
10011850:	dfc00715 	stw	ra,28(sp)
10011854:	df000615 	stw	fp,24(sp)
10011858:	dc000515 	stw	r16,20(sp)
1001185c:	df000604 	addi	fp,sp,24
10011860:	e13ffb15 	stw	r4,-20(fp)
10011864:	e17ffc15 	stw	r5,-16(fp)
10011868:	e1bffd15 	stw	r6,-12(fp)
1001186c:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
10011870:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
10011874:	8080030b 	ldhu	r2,12(r16)
10011878:	10bfffcc 	andi	r2,r2,65535
1001187c:	1080400c 	andi	r2,r2,256
10011880:	10000926 	beq	r2,zero,100118a8 <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
10011884:	8080038b 	ldhu	r2,14(r16)
10011888:	10bfffcc 	andi	r2,r2,65535
1001188c:	10a0001c 	xori	r2,r2,32768
10011890:	10a00004 	addi	r2,r2,-32768
10011894:	01c00084 	movi	r7,2
10011898:	000d883a 	mov	r6,zero
1001189c:	100b883a 	mov	r5,r2
100118a0:	e13ffb17 	ldw	r4,-20(fp)
100118a4:	00138940 	call	10013894 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
100118a8:	80c0030b 	ldhu	r3,12(r16)
100118ac:	00bbffc4 	movi	r2,-4097
100118b0:	1884703a 	and	r2,r3,r2
100118b4:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
100118b8:	8080038b 	ldhu	r2,14(r16)
100118bc:	10bfffcc 	andi	r2,r2,65535
100118c0:	10a0001c 	xori	r2,r2,32768
100118c4:	10a00004 	addi	r2,r2,-32768
100118c8:	e0fffe17 	ldw	r3,-8(fp)
100118cc:	180f883a 	mov	r7,r3
100118d0:	e1bffd17 	ldw	r6,-12(fp)
100118d4:	100b883a 	mov	r5,r2
100118d8:	e13ffb17 	ldw	r4,-20(fp)
100118dc:	00132440 	call	10013244 <_write_r>
100118e0:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
100118e4:	e0bffa17 	ldw	r2,-24(fp)
}
100118e8:	e6ffff04 	addi	sp,fp,-4
100118ec:	dfc00217 	ldw	ra,8(sp)
100118f0:	df000117 	ldw	fp,4(sp)
100118f4:	dc000017 	ldw	r16,0(sp)
100118f8:	dec00304 	addi	sp,sp,12
100118fc:	f800283a 	ret

10011900 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
10011900:	defff804 	addi	sp,sp,-32
10011904:	dfc00715 	stw	ra,28(sp)
10011908:	df000615 	stw	fp,24(sp)
1001190c:	dc400515 	stw	r17,20(sp)
10011910:	dc000415 	stw	r16,16(sp)
10011914:	df000604 	addi	fp,sp,24
10011918:	e13ffa15 	stw	r4,-24(fp)
1001191c:	e17ffb15 	stw	r5,-20(fp)
10011920:	e1bffc15 	stw	r6,-16(fp)
10011924:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
10011928:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
1001192c:	8080038b 	ldhu	r2,14(r16)
10011930:	10bfffcc 	andi	r2,r2,65535
10011934:	10a0001c 	xori	r2,r2,32768
10011938:	10a00004 	addi	r2,r2,-32768
1001193c:	e1fffd17 	ldw	r7,-12(fp)
10011940:	e1bffc17 	ldw	r6,-16(fp)
10011944:	100b883a 	mov	r5,r2
10011948:	e13ffa17 	ldw	r4,-24(fp)
1001194c:	00138940 	call	10013894 <_lseek_r>
10011950:	1023883a 	mov	r17,r2
  if (ret == -1L)
10011954:	88bfffd8 	cmpnei	r2,r17,-1
10011958:	1000051e 	bne	r2,zero,10011970 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
1001195c:	80c0030b 	ldhu	r3,12(r16)
10011960:	00bbffc4 	movi	r2,-4097
10011964:	1884703a 	and	r2,r3,r2
10011968:	8080030d 	sth	r2,12(r16)
1001196c:	00000406 	br	10011980 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
10011970:	8080030b 	ldhu	r2,12(r16)
10011974:	10840014 	ori	r2,r2,4096
10011978:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
1001197c:	84401415 	stw	r17,80(r16)
    }
  return ret;
10011980:	8805883a 	mov	r2,r17
}
10011984:	e6fffe04 	addi	sp,fp,-8
10011988:	dfc00317 	ldw	ra,12(sp)
1001198c:	df000217 	ldw	fp,8(sp)
10011990:	dc400117 	ldw	r17,4(sp)
10011994:	dc000017 	ldw	r16,0(sp)
10011998:	dec00404 	addi	sp,sp,16
1001199c:	f800283a 	ret

100119a0 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
100119a0:	defffb04 	addi	sp,sp,-20
100119a4:	dfc00415 	stw	ra,16(sp)
100119a8:	df000315 	stw	fp,12(sp)
100119ac:	df000304 	addi	fp,sp,12
100119b0:	e13ffe15 	stw	r4,-8(fp)
100119b4:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
100119b8:	e0bfff17 	ldw	r2,-4(fp)
100119bc:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
100119c0:	e0bffd17 	ldw	r2,-12(fp)
100119c4:	1080038b 	ldhu	r2,14(r2)
100119c8:	10bfffcc 	andi	r2,r2,65535
100119cc:	10a0001c 	xori	r2,r2,32768
100119d0:	10a00004 	addi	r2,r2,-32768
100119d4:	100b883a 	mov	r5,r2
100119d8:	e13ffe17 	ldw	r4,-8(fp)
100119dc:	00132cc0 	call	100132cc <_close_r>
}
100119e0:	e037883a 	mov	sp,fp
100119e4:	dfc00117 	ldw	ra,4(sp)
100119e8:	df000017 	ldw	fp,0(sp)
100119ec:	dec00204 	addi	sp,sp,8
100119f0:	f800283a 	ret

100119f4 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
100119f4:	defffb04 	addi	sp,sp,-20
100119f8:	df000415 	stw	fp,16(sp)
100119fc:	df000404 	addi	fp,sp,16
10011a00:	e13ffe15 	stw	r4,-8(fp)
10011a04:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
10011a08:	e0fffe17 	ldw	r3,-8(fp)
10011a0c:	e0bfff17 	ldw	r2,-4(fp)
10011a10:	1884b03a 	or	r2,r3,r2
10011a14:	108000cc 	andi	r2,r2,3
10011a18:	10002a1e 	bne	r2,zero,10011ac4 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
10011a1c:	e0bffe17 	ldw	r2,-8(fp)
10011a20:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
10011a24:	e0bfff17 	ldw	r2,-4(fp)
10011a28:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
10011a2c:	00001506 	br	10011a84 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
10011a30:	e0bffc17 	ldw	r2,-16(fp)
10011a34:	10c00017 	ldw	r3,0(r2)
10011a38:	00bfbff4 	movhi	r2,65279
10011a3c:	10bfbfc4 	addi	r2,r2,-257
10011a40:	1887883a 	add	r3,r3,r2
10011a44:	e0bffc17 	ldw	r2,-16(fp)
10011a48:	10800017 	ldw	r2,0(r2)
10011a4c:	0084303a 	nor	r2,zero,r2
10011a50:	1886703a 	and	r3,r3,r2
10011a54:	00a02074 	movhi	r2,32897
10011a58:	10a02004 	addi	r2,r2,-32640
10011a5c:	1884703a 	and	r2,r3,r2
10011a60:	10000226 	beq	r2,zero,10011a6c <strcmp+0x78>
	    return 0;
10011a64:	0005883a 	mov	r2,zero
10011a68:	00002e06 	br	10011b24 <strcmp+0x130>

          a1++;
10011a6c:	e0bffc17 	ldw	r2,-16(fp)
10011a70:	10800104 	addi	r2,r2,4
10011a74:	e0bffc15 	stw	r2,-16(fp)
          a2++;
10011a78:	e0bffd17 	ldw	r2,-12(fp)
10011a7c:	10800104 	addi	r2,r2,4
10011a80:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
10011a84:	e0bffc17 	ldw	r2,-16(fp)
10011a88:	10c00017 	ldw	r3,0(r2)
10011a8c:	e0bffd17 	ldw	r2,-12(fp)
10011a90:	10800017 	ldw	r2,0(r2)
10011a94:	18bfe626 	beq	r3,r2,10011a30 <__alt_data_end+0xf8011a30>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
10011a98:	e0bffc17 	ldw	r2,-16(fp)
10011a9c:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
10011aa0:	e0bffd17 	ldw	r2,-12(fp)
10011aa4:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
10011aa8:	00000606 	br	10011ac4 <strcmp+0xd0>
    {
      s1++;
10011aac:	e0bffe17 	ldw	r2,-8(fp)
10011ab0:	10800044 	addi	r2,r2,1
10011ab4:	e0bffe15 	stw	r2,-8(fp)
      s2++;
10011ab8:	e0bfff17 	ldw	r2,-4(fp)
10011abc:	10800044 	addi	r2,r2,1
10011ac0:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
10011ac4:	e0bffe17 	ldw	r2,-8(fp)
10011ac8:	10800003 	ldbu	r2,0(r2)
10011acc:	10803fcc 	andi	r2,r2,255
10011ad0:	1080201c 	xori	r2,r2,128
10011ad4:	10bfe004 	addi	r2,r2,-128
10011ad8:	10000b26 	beq	r2,zero,10011b08 <strcmp+0x114>
10011adc:	e0bffe17 	ldw	r2,-8(fp)
10011ae0:	10c00003 	ldbu	r3,0(r2)
10011ae4:	e0bfff17 	ldw	r2,-4(fp)
10011ae8:	10800003 	ldbu	r2,0(r2)
10011aec:	18c03fcc 	andi	r3,r3,255
10011af0:	18c0201c 	xori	r3,r3,128
10011af4:	18ffe004 	addi	r3,r3,-128
10011af8:	10803fcc 	andi	r2,r2,255
10011afc:	1080201c 	xori	r2,r2,128
10011b00:	10bfe004 	addi	r2,r2,-128
10011b04:	18bfe926 	beq	r3,r2,10011aac <__alt_data_end+0xf8011aac>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
10011b08:	e0bffe17 	ldw	r2,-8(fp)
10011b0c:	10800003 	ldbu	r2,0(r2)
10011b10:	10c03fcc 	andi	r3,r2,255
10011b14:	e0bfff17 	ldw	r2,-4(fp)
10011b18:	10800003 	ldbu	r2,0(r2)
10011b1c:	10803fcc 	andi	r2,r2,255
10011b20:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10011b24:	e037883a 	mov	sp,fp
10011b28:	df000017 	ldw	fp,0(sp)
10011b2c:	dec00104 	addi	sp,sp,4
10011b30:	f800283a 	ret

10011b34 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
10011b34:	defff604 	addi	sp,sp,-40
10011b38:	dfc00915 	stw	ra,36(sp)
10011b3c:	df000815 	stw	fp,32(sp)
10011b40:	dc400715 	stw	r17,28(sp)
10011b44:	dc000615 	stw	r16,24(sp)
10011b48:	df000804 	addi	fp,sp,32
10011b4c:	e13ffc15 	stw	r4,-16(fp)
10011b50:	e17ffd15 	stw	r5,-12(fp)
10011b54:	3021883a 	mov	r16,r6
	register int err = 0;
10011b58:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
10011b5c:	80800217 	ldw	r2,8(r16)
10011b60:	1000031e 	bne	r2,zero,10011b70 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
10011b64:	80000115 	stw	zero,4(r16)
		return (0);
10011b68:	0005883a 	mov	r2,zero
10011b6c:	00003906 	br	10011c54 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
10011b70:	e0bffd17 	ldw	r2,-12(fp)
10011b74:	10801917 	ldw	r2,100(r2)
10011b78:	1088000c 	andi	r2,r2,8192
10011b7c:	10002d26 	beq	r2,zero,10011c34 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
10011b80:	80800017 	ldw	r2,0(r16)
10011b84:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
10011b88:	00002706 	br	10011c28 <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
10011b8c:	e0bff817 	ldw	r2,-32(fp)
10011b90:	10800017 	ldw	r2,0(r2)
10011b94:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
10011b98:	e0bff817 	ldw	r2,-32(fp)
10011b9c:	10800117 	ldw	r2,4(r2)
10011ba0:	1004d0ba 	srli	r2,r2,2
10011ba4:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
10011ba8:	e03ff915 	stw	zero,-28(fp)
10011bac:	00001206 	br	10011bf8 <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
10011bb0:	e0bff917 	ldw	r2,-28(fp)
10011bb4:	1085883a 	add	r2,r2,r2
10011bb8:	1085883a 	add	r2,r2,r2
10011bbc:	1007883a 	mov	r3,r2
10011bc0:	e0bffa17 	ldw	r2,-24(fp)
10011bc4:	10c5883a 	add	r2,r2,r3
10011bc8:	10800017 	ldw	r2,0(r2)
10011bcc:	e1bffd17 	ldw	r6,-12(fp)
10011bd0:	100b883a 	mov	r5,r2
10011bd4:	e13ffc17 	ldw	r4,-16(fp)
10011bd8:	00136a40 	call	100136a4 <_fputwc_r>
10011bdc:	10bfffd8 	cmpnei	r2,r2,-1
10011be0:	1000021e 	bne	r2,zero,10011bec <__sprint_r+0xb8>
					err = -1;
10011be4:	047fffc4 	movi	r17,-1
					goto out;
10011be8:	00001706 	br	10011c48 <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
10011bec:	e0bff917 	ldw	r2,-28(fp)
10011bf0:	10800044 	addi	r2,r2,1
10011bf4:	e0bff915 	stw	r2,-28(fp)
10011bf8:	e0fff917 	ldw	r3,-28(fp)
10011bfc:	e0bffb17 	ldw	r2,-20(fp)
10011c00:	18bfeb16 	blt	r3,r2,10011bb0 <__alt_data_end+0xf8011bb0>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
10011c04:	80c00217 	ldw	r3,8(r16)
10011c08:	e0bffb17 	ldw	r2,-20(fp)
10011c0c:	1085883a 	add	r2,r2,r2
10011c10:	1085883a 	add	r2,r2,r2
10011c14:	1885c83a 	sub	r2,r3,r2
10011c18:	80800215 	stw	r2,8(r16)
10011c1c:	e0bff817 	ldw	r2,-32(fp)
10011c20:	10800204 	addi	r2,r2,8
10011c24:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
10011c28:	80800217 	ldw	r2,8(r16)
10011c2c:	103fd71e 	bne	r2,zero,10011b8c <__alt_data_end+0xf8011b8c>
10011c30:	00000506 	br	10011c48 <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
10011c34:	800d883a 	mov	r6,r16
10011c38:	e17ffd17 	ldw	r5,-12(fp)
10011c3c:	e13ffc17 	ldw	r4,-16(fp)
10011c40:	000e4b80 	call	1000e4b8 <__sfvwrite_r>
10011c44:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
10011c48:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
10011c4c:	80000115 	stw	zero,4(r16)
	return (err);
10011c50:	8805883a 	mov	r2,r17
}
10011c54:	e6fffe04 	addi	sp,fp,-8
10011c58:	dfc00317 	ldw	ra,12(sp)
10011c5c:	df000217 	ldw	fp,8(sp)
10011c60:	dc400117 	ldw	r17,4(sp)
10011c64:	dc000017 	ldw	r16,0(sp)
10011c68:	dec00404 	addi	sp,sp,16
10011c6c:	f800283a 	ret

10011c70 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
10011c70:	defedf04 	addi	sp,sp,-1156
10011c74:	dfc12015 	stw	ra,1152(sp)
10011c78:	df011f15 	stw	fp,1148(sp)
10011c7c:	dc011e15 	stw	r16,1144(sp)
10011c80:	df011f04 	addi	fp,sp,1148
10011c84:	e13ffc15 	stw	r4,-16(fp)
10011c88:	2821883a 	mov	r16,r5
10011c8c:	e1bffd15 	stw	r6,-12(fp)
10011c90:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
10011c94:	80c0030b 	ldhu	r3,12(r16)
10011c98:	00bfff44 	movi	r2,-3
10011c9c:	1884703a 	and	r2,r3,r2
10011ca0:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
10011ca4:	80801917 	ldw	r2,100(r16)
10011ca8:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
10011cac:	8080038b 	ldhu	r2,14(r16)
10011cb0:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
10011cb4:	80800717 	ldw	r2,28(r16)
10011cb8:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
10011cbc:	80800917 	ldw	r2,36(r16)
10011cc0:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
10011cc4:	e0befc04 	addi	r2,fp,-1040
10011cc8:	e0bee215 	stw	r2,-1144(fp)
10011ccc:	e0bee217 	ldw	r2,-1144(fp)
10011cd0:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
10011cd4:	00810004 	movi	r2,1024
10011cd8:	e0bee415 	stw	r2,-1136(fp)
10011cdc:	e0bee417 	ldw	r2,-1136(fp)
10011ce0:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
10011ce4:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
10011ce8:	e0bee204 	addi	r2,fp,-1144
10011cec:	e1fffe17 	ldw	r7,-8(fp)
10011cf0:	e1bffd17 	ldw	r6,-12(fp)
10011cf4:	100b883a 	mov	r5,r2
10011cf8:	e13ffc17 	ldw	r4,-16(fp)
10011cfc:	0011db80 	call	10011db8 <___vfiprintf_internal_r>
10011d00:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
10011d04:	e0bee117 	ldw	r2,-1148(fp)
10011d08:	10000716 	blt	r2,zero,10011d28 <__sbprintf+0xb8>
10011d0c:	e0bee204 	addi	r2,fp,-1144
10011d10:	100b883a 	mov	r5,r2
10011d14:	e13ffc17 	ldw	r4,-16(fp)
10011d18:	000d6780 	call	1000d678 <_fflush_r>
10011d1c:	10000226 	beq	r2,zero,10011d28 <__sbprintf+0xb8>
		ret = EOF;
10011d20:	00bfffc4 	movi	r2,-1
10011d24:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
10011d28:	e0bee50b 	ldhu	r2,-1132(fp)
10011d2c:	10bfffcc 	andi	r2,r2,65535
10011d30:	1080100c 	andi	r2,r2,64
10011d34:	10000326 	beq	r2,zero,10011d44 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
10011d38:	8080030b 	ldhu	r2,12(r16)
10011d3c:	10801014 	ori	r2,r2,64
10011d40:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
10011d44:	e0bee117 	ldw	r2,-1148(fp)
}
10011d48:	e6ffff04 	addi	sp,fp,-4
10011d4c:	dfc00217 	ldw	ra,8(sp)
10011d50:	df000117 	ldw	fp,4(sp)
10011d54:	dc000017 	ldw	r16,0(sp)
10011d58:	dec00304 	addi	sp,sp,12
10011d5c:	f800283a 	ret

10011d60 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
10011d60:	defffa04 	addi	sp,sp,-24
10011d64:	dfc00515 	stw	ra,20(sp)
10011d68:	df000415 	stw	fp,16(sp)
10011d6c:	df000404 	addi	fp,sp,16
10011d70:	e13ffd15 	stw	r4,-12(fp)
10011d74:	e17ffe15 	stw	r5,-8(fp)
10011d78:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
10011d7c:	008403b4 	movhi	r2,4110
10011d80:	10a44204 	addi	r2,r2,-28408
10011d84:	10800017 	ldw	r2,0(r2)
10011d88:	e1ffff17 	ldw	r7,-4(fp)
10011d8c:	e1bffe17 	ldw	r6,-8(fp)
10011d90:	e17ffd17 	ldw	r5,-12(fp)
10011d94:	1009883a 	mov	r4,r2
10011d98:	0011db80 	call	10011db8 <___vfiprintf_internal_r>
10011d9c:	e0bffc15 	stw	r2,-16(fp)
  return result;
10011da0:	e0bffc17 	ldw	r2,-16(fp)
}
10011da4:	e037883a 	mov	sp,fp
10011da8:	dfc00117 	ldw	ra,4(sp)
10011dac:	df000017 	ldw	fp,0(sp)
10011db0:	dec00204 	addi	sp,sp,8
10011db4:	f800283a 	ret

10011db8 <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
10011db8:	deffb704 	addi	sp,sp,-292
10011dbc:	dfc04815 	stw	ra,288(sp)
10011dc0:	df004715 	stw	fp,284(sp)
10011dc4:	ddc04615 	stw	r23,280(sp)
10011dc8:	dd804515 	stw	r22,276(sp)
10011dcc:	dd404415 	stw	r21,272(sp)
10011dd0:	dd004315 	stw	r20,268(sp)
10011dd4:	dcc04215 	stw	r19,264(sp)
10011dd8:	dc804115 	stw	r18,260(sp)
10011ddc:	dc404015 	stw	r17,256(sp)
10011de0:	dc003f15 	stw	r16,252(sp)
10011de4:	df004704 	addi	fp,sp,284
10011de8:	e13fe615 	stw	r4,-104(fp)
10011dec:	e17fe715 	stw	r5,-100(fp)
10011df0:	e1bfe815 	stw	r6,-96(fp)
10011df4:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
10011df8:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
10011dfc:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
10011e00:	e0bfe617 	ldw	r2,-104(fp)
10011e04:	e0bfc415 	stw	r2,-240(fp)
10011e08:	e0bfc417 	ldw	r2,-240(fp)
10011e0c:	10000526 	beq	r2,zero,10011e24 <___vfiprintf_internal_r+0x6c>
10011e10:	e0bfc417 	ldw	r2,-240(fp)
10011e14:	10800e17 	ldw	r2,56(r2)
10011e18:	1000021e 	bne	r2,zero,10011e24 <___vfiprintf_internal_r+0x6c>
10011e1c:	e13fc417 	ldw	r4,-240(fp)
10011e20:	000db400 	call	1000db40 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
10011e24:	e0bfe717 	ldw	r2,-100(fp)
10011e28:	1080030b 	ldhu	r2,12(r2)
10011e2c:	10bfffcc 	andi	r2,r2,65535
10011e30:	1088000c 	andi	r2,r2,8192
10011e34:	10000c1e 	bne	r2,zero,10011e68 <___vfiprintf_internal_r+0xb0>
10011e38:	e0bfe717 	ldw	r2,-100(fp)
10011e3c:	1080030b 	ldhu	r2,12(r2)
10011e40:	10880014 	ori	r2,r2,8192
10011e44:	1007883a 	mov	r3,r2
10011e48:	e0bfe717 	ldw	r2,-100(fp)
10011e4c:	10c0030d 	sth	r3,12(r2)
10011e50:	e0bfe717 	ldw	r2,-100(fp)
10011e54:	10c01917 	ldw	r3,100(r2)
10011e58:	00b7ffc4 	movi	r2,-8193
10011e5c:	1886703a 	and	r3,r3,r2
10011e60:	e0bfe717 	ldw	r2,-100(fp)
10011e64:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
10011e68:	e0bfe717 	ldw	r2,-100(fp)
10011e6c:	1080030b 	ldhu	r2,12(r2)
10011e70:	10bfffcc 	andi	r2,r2,65535
10011e74:	1080020c 	andi	r2,r2,8
10011e78:	10000326 	beq	r2,zero,10011e88 <___vfiprintf_internal_r+0xd0>
10011e7c:	e0bfe717 	ldw	r2,-100(fp)
10011e80:	10800417 	ldw	r2,16(r2)
10011e84:	1000061e 	bne	r2,zero,10011ea0 <___vfiprintf_internal_r+0xe8>
10011e88:	e17fe717 	ldw	r5,-100(fp)
10011e8c:	e13fe617 	ldw	r4,-104(fp)
10011e90:	000b2680 	call	1000b268 <__swsetup_r>
10011e94:	10000226 	beq	r2,zero,10011ea0 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
10011e98:	00bfffc4 	movi	r2,-1
10011e9c:	00047006 	br	10013060 <___vfiprintf_internal_r+0x12a8>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10011ea0:	e0bfe717 	ldw	r2,-100(fp)
10011ea4:	1080030b 	ldhu	r2,12(r2)
10011ea8:	10bfffcc 	andi	r2,r2,65535
10011eac:	1080068c 	andi	r2,r2,26
10011eb0:	10800298 	cmpnei	r2,r2,10
10011eb4:	10000c1e 	bne	r2,zero,10011ee8 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
10011eb8:	e0bfe717 	ldw	r2,-100(fp)
10011ebc:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10011ec0:	10bfffcc 	andi	r2,r2,65535
10011ec4:	10a0001c 	xori	r2,r2,32768
10011ec8:	10a00004 	addi	r2,r2,-32768
10011ecc:	10000616 	blt	r2,zero,10011ee8 <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
10011ed0:	e1ffe917 	ldw	r7,-92(fp)
10011ed4:	e1bfe817 	ldw	r6,-96(fp)
10011ed8:	e17fe717 	ldw	r5,-100(fp)
10011edc:	e13fe617 	ldw	r4,-104(fp)
10011ee0:	0011c700 	call	10011c70 <__sbprintf>
10011ee4:	00045e06 	br	10013060 <___vfiprintf_internal_r+0x12a8>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
10011ee8:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
10011eec:	e4bfcb04 	addi	r18,fp,-212
10011ef0:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
10011ef4:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
10011ef8:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
10011efc:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
10011f00:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10011f04:	00000106 	br	10011f0c <___vfiprintf_internal_r+0x154>
                    fmt += 1;
10011f08:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10011f0c:	a8800003 	ldbu	r2,0(r21)
10011f10:	10803fcc 	andi	r2,r2,255
10011f14:	1080201c 	xori	r2,r2,128
10011f18:	10bfe004 	addi	r2,r2,-128
10011f1c:	10000626 	beq	r2,zero,10011f38 <___vfiprintf_internal_r+0x180>
10011f20:	a8800003 	ldbu	r2,0(r21)
10011f24:	10803fcc 	andi	r2,r2,255
10011f28:	1080201c 	xori	r2,r2,128
10011f2c:	10bfe004 	addi	r2,r2,-128
10011f30:	10800958 	cmpnei	r2,r2,37
10011f34:	103ff41e 	bne	r2,zero,10011f08 <__alt_data_end+0xf8011f08>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
10011f38:	a807883a 	mov	r3,r21
10011f3c:	a005883a 	mov	r2,r20
10011f40:	18a1c83a 	sub	r16,r3,r2
10011f44:	80001826 	beq	r16,zero,10011fa8 <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
10011f48:	95000015 	stw	r20,0(r18)
10011f4c:	8005883a 	mov	r2,r16
10011f50:	90800115 	stw	r2,4(r18)
10011f54:	e0bfca17 	ldw	r2,-216(fp)
10011f58:	8007883a 	mov	r3,r16
10011f5c:	10c5883a 	add	r2,r2,r3
10011f60:	e0bfca15 	stw	r2,-216(fp)
10011f64:	94800204 	addi	r18,r18,8
10011f68:	e0bfc917 	ldw	r2,-220(fp)
10011f6c:	10800044 	addi	r2,r2,1
10011f70:	e0bfc915 	stw	r2,-220(fp)
10011f74:	e0bfc917 	ldw	r2,-220(fp)
10011f78:	10800210 	cmplti	r2,r2,8
10011f7c:	1000071e 	bne	r2,zero,10011f9c <___vfiprintf_internal_r+0x1e4>
10011f80:	e0bfc804 	addi	r2,fp,-224
10011f84:	100d883a 	mov	r6,r2
10011f88:	e17fe717 	ldw	r5,-100(fp)
10011f8c:	e13fe617 	ldw	r4,-104(fp)
10011f90:	0011b340 	call	10011b34 <__sprint_r>
10011f94:	1004091e 	bne	r2,zero,10012fbc <___vfiprintf_internal_r+0x1204>
10011f98:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
10011f9c:	e0bfb917 	ldw	r2,-284(fp)
10011fa0:	1405883a 	add	r2,r2,r16
10011fa4:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
10011fa8:	a8800003 	ldbu	r2,0(r21)
10011fac:	10803fcc 	andi	r2,r2,255
10011fb0:	1080201c 	xori	r2,r2,128
10011fb4:	10bfe004 	addi	r2,r2,-128
10011fb8:	1003f226 	beq	r2,zero,10012f84 <___vfiprintf_internal_r+0x11cc>
                    goto done;
#endif
		fmt_anchor = fmt;
10011fbc:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
10011fc0:	ad400044 	addi	r21,r21,1

		flags = 0;
10011fc4:	0027883a 	mov	r19,zero
		dprec = 0;
10011fc8:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
10011fcc:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
10011fd0:	00bfffc4 	movi	r2,-1
10011fd4:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
10011fd8:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
10011fdc:	a805883a 	mov	r2,r21
10011fe0:	15400044 	addi	r21,r2,1
10011fe4:	10800003 	ldbu	r2,0(r2)
10011fe8:	14403fcc 	andi	r17,r2,255
10011fec:	8c40201c 	xori	r17,r17,128
10011ff0:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
10011ff4:	88bff804 	addi	r2,r17,-32
10011ff8:	10c01668 	cmpgeui	r3,r2,89
10011ffc:	18028e1e 	bne	r3,zero,10012a38 <___vfiprintf_internal_r+0xc80>
10012000:	100690ba 	slli	r3,r2,2
10012004:	00840074 	movhi	r2,4097
10012008:	10880604 	addi	r2,r2,8216
1001200c:	1885883a 	add	r2,r3,r2
10012010:	10800017 	ldw	r2,0(r2)
10012014:	1000683a 	jmp	r2
10012018:	1001217c 	xorhi	zero,r2,1157
1001201c:	10012a38 	rdprs	zero,r2,1192
10012020:	10012a38 	rdprs	zero,r2,1192
10012024:	1001219c 	xori	zero,r2,1158
10012028:	10012a38 	rdprs	zero,r2,1192
1001202c:	10012a38 	rdprs	zero,r2,1192
10012030:	10012a38 	rdprs	zero,r2,1192
10012034:	10012a38 	rdprs	zero,r2,1192
10012038:	10012a38 	rdprs	zero,r2,1192
1001203c:	10012a38 	rdprs	zero,r2,1192
10012040:	100121a4 	muli	zero,r2,1158
10012044:	100121d8 	cmpnei	zero,r2,1159
10012048:	10012a38 	rdprs	zero,r2,1192
1001204c:	100121d0 	cmplti	zero,r2,1159
10012050:	100121e4 	muli	zero,r2,1159
10012054:	10012a38 	rdprs	zero,r2,1192
10012058:	10012284 	addi	zero,r2,1162
1001205c:	1001228c 	andi	zero,r2,1162
10012060:	1001228c 	andi	zero,r2,1162
10012064:	1001228c 	andi	zero,r2,1162
10012068:	1001228c 	andi	zero,r2,1162
1001206c:	1001228c 	andi	zero,r2,1162
10012070:	1001228c 	andi	zero,r2,1162
10012074:	1001228c 	andi	zero,r2,1162
10012078:	1001228c 	andi	zero,r2,1162
1001207c:	1001228c 	andi	zero,r2,1162
10012080:	10012a38 	rdprs	zero,r2,1192
10012084:	10012a38 	rdprs	zero,r2,1192
10012088:	10012a38 	rdprs	zero,r2,1192
1001208c:	10012a38 	rdprs	zero,r2,1192
10012090:	10012a38 	rdprs	zero,r2,1192
10012094:	10012a38 	rdprs	zero,r2,1192
10012098:	10012a38 	rdprs	zero,r2,1192
1001209c:	10012a38 	rdprs	zero,r2,1192
100120a0:	10012a38 	rdprs	zero,r2,1192
100120a4:	10012a38 	rdprs	zero,r2,1192
100120a8:	10012338 	rdprs	zero,r2,1164
100120ac:	10012a38 	rdprs	zero,r2,1192
100120b0:	10012a38 	rdprs	zero,r2,1192
100120b4:	10012a38 	rdprs	zero,r2,1192
100120b8:	10012a38 	rdprs	zero,r2,1192
100120bc:	10012a38 	rdprs	zero,r2,1192
100120c0:	10012a38 	rdprs	zero,r2,1192
100120c4:	10012a38 	rdprs	zero,r2,1192
100120c8:	10012a38 	rdprs	zero,r2,1192
100120cc:	10012a38 	rdprs	zero,r2,1192
100120d0:	10012a38 	rdprs	zero,r2,1192
100120d4:	100124d8 	cmpnei	zero,r2,1171
100120d8:	10012a38 	rdprs	zero,r2,1192
100120dc:	10012a38 	rdprs	zero,r2,1192
100120e0:	10012a38 	rdprs	zero,r2,1192
100120e4:	10012a38 	rdprs	zero,r2,1192
100120e8:	10012a38 	rdprs	zero,r2,1192
100120ec:	10012654 	ori	zero,r2,1177
100120f0:	10012a38 	rdprs	zero,r2,1192
100120f4:	10012a38 	rdprs	zero,r2,1192
100120f8:	10012714 	ori	zero,r2,1180
100120fc:	10012a38 	rdprs	zero,r2,1192
10012100:	10012a38 	rdprs	zero,r2,1192
10012104:	10012a38 	rdprs	zero,r2,1192
10012108:	10012a38 	rdprs	zero,r2,1192
1001210c:	10012a38 	rdprs	zero,r2,1192
10012110:	10012a38 	rdprs	zero,r2,1192
10012114:	10012a38 	rdprs	zero,r2,1192
10012118:	10012a38 	rdprs	zero,r2,1192
1001211c:	10012a38 	rdprs	zero,r2,1192
10012120:	10012a38 	rdprs	zero,r2,1192
10012124:	10012310 	cmplti	zero,r2,1164
10012128:	1001233c 	xorhi	zero,r2,1164
1001212c:	10012a38 	rdprs	zero,r2,1192
10012130:	10012a38 	rdprs	zero,r2,1192
10012134:	10012a38 	rdprs	zero,r2,1192
10012138:	100122d4 	ori	zero,r2,1163
1001213c:	1001233c 	xorhi	zero,r2,1164
10012140:	10012a38 	rdprs	zero,r2,1192
10012144:	10012a38 	rdprs	zero,r2,1192
10012148:	100122dc 	xori	zero,r2,1163
1001214c:	10012a38 	rdprs	zero,r2,1192
10012150:	10012438 	rdprs	zero,r2,1168
10012154:	100124dc 	xori	zero,r2,1171
10012158:	1001257c 	xorhi	zero,r2,1173
1001215c:	10012308 	cmpgei	zero,r2,1164
10012160:	10012a38 	rdprs	zero,r2,1192
10012164:	100125c4 	addi	zero,r2,1175
10012168:	10012a38 	rdprs	zero,r2,1192
1001216c:	10012658 	cmpnei	zero,r2,1177
10012170:	10012a38 	rdprs	zero,r2,1192
10012174:	10012a38 	rdprs	zero,r2,1192
10012178:	10012724 	muli	zero,r2,1180
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
1001217c:	e0bfc703 	ldbu	r2,-228(fp)
10012180:	10803fcc 	andi	r2,r2,255
10012184:	1080201c 	xori	r2,r2,128
10012188:	10bfe004 	addi	r2,r2,-128
1001218c:	103f931e 	bne	r2,zero,10011fdc <__alt_data_end+0xf8011fdc>
				sign = ' ';
10012190:	00800804 	movi	r2,32
10012194:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
10012198:	003f9006 	br	10011fdc <__alt_data_end+0xf8011fdc>
		case '#':
			flags |= ALT;
1001219c:	9cc00054 	ori	r19,r19,1
			goto rflag;
100121a0:	003f8e06 	br	10011fdc <__alt_data_end+0xf8011fdc>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
100121a4:	e0bfe917 	ldw	r2,-92(fp)
100121a8:	10c00104 	addi	r3,r2,4
100121ac:	e0ffe915 	stw	r3,-92(fp)
100121b0:	10800017 	ldw	r2,0(r2)
100121b4:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
100121b8:	e0bfba17 	ldw	r2,-280(fp)
100121bc:	10000116 	blt	r2,zero,100121c4 <___vfiprintf_internal_r+0x40c>
				goto rflag;
100121c0:	003f8606 	br	10011fdc <__alt_data_end+0xf8011fdc>
			width = -width;
100121c4:	e0bfba17 	ldw	r2,-280(fp)
100121c8:	0085c83a 	sub	r2,zero,r2
100121cc:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
100121d0:	9cc00114 	ori	r19,r19,4
			goto rflag;
100121d4:	003f8106 	br	10011fdc <__alt_data_end+0xf8011fdc>
		case '+':
			sign = '+';
100121d8:	00800ac4 	movi	r2,43
100121dc:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
100121e0:	003f7e06 	br	10011fdc <__alt_data_end+0xf8011fdc>
		case '.':
			if ((ch = *fmt++) == '*') {
100121e4:	a805883a 	mov	r2,r21
100121e8:	15400044 	addi	r21,r2,1
100121ec:	10800003 	ldbu	r2,0(r2)
100121f0:	14403fcc 	andi	r17,r2,255
100121f4:	8c40201c 	xori	r17,r17,128
100121f8:	8c7fe004 	addi	r17,r17,-128
100121fc:	88800a98 	cmpnei	r2,r17,42
10012200:	10000a1e 	bne	r2,zero,1001222c <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
10012204:	e0bfe917 	ldw	r2,-92(fp)
10012208:	10c00104 	addi	r3,r2,4
1001220c:	e0ffe915 	stw	r3,-92(fp)
10012210:	10800017 	ldw	r2,0(r2)
10012214:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
10012218:	e0bfbb17 	ldw	r2,-276(fp)
1001221c:	103f6f0e 	bge	r2,zero,10011fdc <__alt_data_end+0xf8011fdc>
					prec = -1;
10012220:	00bfffc4 	movi	r2,-1
10012224:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
10012228:	003f6c06 	br	10011fdc <__alt_data_end+0xf8011fdc>
			}
			n = 0;
1001222c:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
10012230:	00000c06 	br	10012264 <___vfiprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
10012234:	01400284 	movi	r5,10
10012238:	8009883a 	mov	r4,r16
1001223c:	00059d40 	call	100059d4 <__mulsi3>
10012240:	1007883a 	mov	r3,r2
10012244:	88bff404 	addi	r2,r17,-48
10012248:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
1001224c:	a805883a 	mov	r2,r21
10012250:	15400044 	addi	r21,r2,1
10012254:	10800003 	ldbu	r2,0(r2)
10012258:	14403fcc 	andi	r17,r2,255
1001225c:	8c40201c 	xori	r17,r17,128
10012260:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
10012264:	88bff404 	addi	r2,r17,-48
10012268:	108002b0 	cmpltui	r2,r2,10
1001226c:	103ff11e 	bne	r2,zero,10012234 <__alt_data_end+0xf8012234>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
10012270:	8005883a 	mov	r2,r16
10012274:	1000010e 	bge	r2,zero,1001227c <___vfiprintf_internal_r+0x4c4>
10012278:	00bfffc4 	movi	r2,-1
1001227c:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
10012280:	003f5c06 	br	10011ff4 <__alt_data_end+0xf8011ff4>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
10012284:	9cc02014 	ori	r19,r19,128
			goto rflag;
10012288:	003f5406 	br	10011fdc <__alt_data_end+0xf8011fdc>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
1001228c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
10012290:	01400284 	movi	r5,10
10012294:	8009883a 	mov	r4,r16
10012298:	00059d40 	call	100059d4 <__mulsi3>
1001229c:	1007883a 	mov	r3,r2
100122a0:	88bff404 	addi	r2,r17,-48
100122a4:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
100122a8:	a805883a 	mov	r2,r21
100122ac:	15400044 	addi	r21,r2,1
100122b0:	10800003 	ldbu	r2,0(r2)
100122b4:	14403fcc 	andi	r17,r2,255
100122b8:	8c40201c 	xori	r17,r17,128
100122bc:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
100122c0:	88bff404 	addi	r2,r17,-48
100122c4:	108002b0 	cmpltui	r2,r2,10
100122c8:	103ff11e 	bne	r2,zero,10012290 <__alt_data_end+0xf8012290>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
100122cc:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
100122d0:	003f4806 	br	10011ff4 <__alt_data_end+0xf8011ff4>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
100122d4:	9cc01014 	ori	r19,r19,64
			goto rflag;
100122d8:	003f4006 	br	10011fdc <__alt_data_end+0xf8011fdc>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
100122dc:	a8800003 	ldbu	r2,0(r21)
100122e0:	10803fcc 	andi	r2,r2,255
100122e4:	1080201c 	xori	r2,r2,128
100122e8:	10bfe004 	addi	r2,r2,-128
100122ec:	10801b18 	cmpnei	r2,r2,108
100122f0:	1000031e 	bne	r2,zero,10012300 <___vfiprintf_internal_r+0x548>
				fmt++;
100122f4:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
100122f8:	9cc00814 	ori	r19,r19,32
100122fc:	003f3706 	br	10011fdc <__alt_data_end+0xf8011fdc>
			} else
#endif
				flags |= LONGINT;
10012300:	9cc00414 	ori	r19,r19,16
			goto rflag;
10012304:	003f3506 	br	10011fdc <__alt_data_end+0xf8011fdc>
		case 'q': /* extension */
			flags |= QUADINT;
10012308:	9cc00814 	ori	r19,r19,32
			goto rflag;
1001230c:	003f3306 	br	10011fdc <__alt_data_end+0xf8011fdc>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
10012310:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
10012314:	e0bfe917 	ldw	r2,-92(fp)
10012318:	10c00104 	addi	r3,r2,4
1001231c:	e0ffe915 	stw	r3,-92(fp)
10012320:	10800017 	ldw	r2,0(r2)
10012324:	a0800005 	stb	r2,0(r20)
				size = 1;
10012328:	00800044 	movi	r2,1
1001232c:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
10012330:	e03fc705 	stb	zero,-228(fp)
			break;
10012334:	0001c806 	br	10012a58 <___vfiprintf_internal_r+0xca0>
		case 'D':  /* extension */
			flags |= LONGINT;
10012338:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
1001233c:	9880080c 	andi	r2,r19,32
10012340:	10000826 	beq	r2,zero,10012364 <___vfiprintf_internal_r+0x5ac>
10012344:	e13fe917 	ldw	r4,-92(fp)
10012348:	20800204 	addi	r2,r4,8
1001234c:	e0bfe915 	stw	r2,-92(fp)
10012350:	20800017 	ldw	r2,0(r4)
10012354:	20c00117 	ldw	r3,4(r4)
10012358:	e0bfea15 	stw	r2,-88(fp)
1001235c:	e0ffeb15 	stw	r3,-84(fp)
10012360:	00001e06 	br	100123dc <___vfiprintf_internal_r+0x624>
10012364:	9880040c 	andi	r2,r19,16
10012368:	10000826 	beq	r2,zero,1001238c <___vfiprintf_internal_r+0x5d4>
1001236c:	e0bfe917 	ldw	r2,-92(fp)
10012370:	10c00104 	addi	r3,r2,4
10012374:	e0ffe915 	stw	r3,-92(fp)
10012378:	10800017 	ldw	r2,0(r2)
1001237c:	e0bfea15 	stw	r2,-88(fp)
10012380:	1005d7fa 	srai	r2,r2,31
10012384:	e0bfeb15 	stw	r2,-84(fp)
10012388:	00001406 	br	100123dc <___vfiprintf_internal_r+0x624>
1001238c:	9880100c 	andi	r2,r19,64
10012390:	10000b26 	beq	r2,zero,100123c0 <___vfiprintf_internal_r+0x608>
10012394:	e0bfe917 	ldw	r2,-92(fp)
10012398:	10c00104 	addi	r3,r2,4
1001239c:	e0ffe915 	stw	r3,-92(fp)
100123a0:	10800017 	ldw	r2,0(r2)
100123a4:	10bfffcc 	andi	r2,r2,65535
100123a8:	10a0001c 	xori	r2,r2,32768
100123ac:	10a00004 	addi	r2,r2,-32768
100123b0:	e0bfea15 	stw	r2,-88(fp)
100123b4:	1005d7fa 	srai	r2,r2,31
100123b8:	e0bfeb15 	stw	r2,-84(fp)
100123bc:	00000706 	br	100123dc <___vfiprintf_internal_r+0x624>
100123c0:	e0bfe917 	ldw	r2,-92(fp)
100123c4:	10c00104 	addi	r3,r2,4
100123c8:	e0ffe915 	stw	r3,-92(fp)
100123cc:	10800017 	ldw	r2,0(r2)
100123d0:	e0bfea15 	stw	r2,-88(fp)
100123d4:	1005d7fa 	srai	r2,r2,31
100123d8:	e0bfeb15 	stw	r2,-84(fp)
100123dc:	e0bfea17 	ldw	r2,-88(fp)
100123e0:	e0bfbc15 	stw	r2,-272(fp)
100123e4:	e0ffeb17 	ldw	r3,-84(fp)
100123e8:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
100123ec:	e0bfbc17 	ldw	r2,-272(fp)
100123f0:	e0ffbd17 	ldw	r3,-268(fp)
100123f4:	18000d0e 	bge	r3,zero,1001242c <___vfiprintf_internal_r+0x674>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
100123f8:	000d883a 	mov	r6,zero
100123fc:	000f883a 	mov	r7,zero
10012400:	e13fbc17 	ldw	r4,-272(fp)
10012404:	e17fbd17 	ldw	r5,-268(fp)
10012408:	3105c83a 	sub	r2,r6,r4
1001240c:	3091803a 	cmpltu	r8,r6,r2
10012410:	3947c83a 	sub	r3,r7,r5
10012414:	1a09c83a 	sub	r4,r3,r8
10012418:	2007883a 	mov	r3,r4
1001241c:	e0bfbc15 	stw	r2,-272(fp)
10012420:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
10012424:	00800b44 	movi	r2,45
10012428:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
1001242c:	00800044 	movi	r2,1
10012430:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
10012434:	0000f806 	br	10012818 <___vfiprintf_internal_r+0xa60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
10012438:	9880080c 	andi	r2,r19,32
1001243c:	10000d26 	beq	r2,zero,10012474 <___vfiprintf_internal_r+0x6bc>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
10012440:	e0bfe917 	ldw	r2,-92(fp)
10012444:	10c00104 	addi	r3,r2,4
10012448:	e0ffe915 	stw	r3,-92(fp)
1001244c:	10800017 	ldw	r2,0(r2)
10012450:	e0ffb917 	ldw	r3,-284(fp)
10012454:	e0fff015 	stw	r3,-64(fp)
10012458:	1807d7fa 	srai	r3,r3,31
1001245c:	e0fff115 	stw	r3,-60(fp)
10012460:	e0fff017 	ldw	r3,-64(fp)
10012464:	10c00015 	stw	r3,0(r2)
10012468:	e0fff117 	ldw	r3,-60(fp)
1001246c:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10012470:	0002c306 	br	10012f80 <___vfiprintf_internal_r+0x11c8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
10012474:	9880040c 	andi	r2,r19,16
10012478:	10000726 	beq	r2,zero,10012498 <___vfiprintf_internal_r+0x6e0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
1001247c:	e0bfe917 	ldw	r2,-92(fp)
10012480:	10c00104 	addi	r3,r2,4
10012484:	e0ffe915 	stw	r3,-92(fp)
10012488:	10800017 	ldw	r2,0(r2)
1001248c:	e0ffb917 	ldw	r3,-284(fp)
10012490:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10012494:	0002ba06 	br	10012f80 <___vfiprintf_internal_r+0x11c8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
10012498:	9880100c 	andi	r2,r19,64
1001249c:	10000726 	beq	r2,zero,100124bc <___vfiprintf_internal_r+0x704>
				*GET_ARG (N, ap, short_ptr_t) = ret;
100124a0:	e0bfe917 	ldw	r2,-92(fp)
100124a4:	10c00104 	addi	r3,r2,4
100124a8:	e0ffe915 	stw	r3,-92(fp)
100124ac:	10800017 	ldw	r2,0(r2)
100124b0:	e0ffb917 	ldw	r3,-284(fp)
100124b4:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
100124b8:	0002b106 	br	10012f80 <___vfiprintf_internal_r+0x11c8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
100124bc:	e0bfe917 	ldw	r2,-92(fp)
100124c0:	10c00104 	addi	r3,r2,4
100124c4:	e0ffe915 	stw	r3,-92(fp)
100124c8:	10800017 	ldw	r2,0(r2)
100124cc:	e0ffb917 	ldw	r3,-284(fp)
100124d0:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
100124d4:	0002aa06 	br	10012f80 <___vfiprintf_internal_r+0x11c8>
		case 'O': /* extension */
			flags |= LONGINT;
100124d8:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
100124dc:	9880080c 	andi	r2,r19,32
100124e0:	10000626 	beq	r2,zero,100124fc <___vfiprintf_internal_r+0x744>
100124e4:	e0bfe917 	ldw	r2,-92(fp)
100124e8:	10c00204 	addi	r3,r2,8
100124ec:	e0ffe915 	stw	r3,-92(fp)
100124f0:	15800017 	ldw	r22,0(r2)
100124f4:	15c00117 	ldw	r23,4(r2)
100124f8:	00001c06 	br	1001256c <___vfiprintf_internal_r+0x7b4>
100124fc:	9880040c 	andi	r2,r19,16
10012500:	10000726 	beq	r2,zero,10012520 <___vfiprintf_internal_r+0x768>
10012504:	e0bfe917 	ldw	r2,-92(fp)
10012508:	10c00104 	addi	r3,r2,4
1001250c:	e0ffe915 	stw	r3,-92(fp)
10012510:	10800017 	ldw	r2,0(r2)
10012514:	102d883a 	mov	r22,r2
10012518:	002f883a 	mov	r23,zero
1001251c:	00001306 	br	1001256c <___vfiprintf_internal_r+0x7b4>
10012520:	9880100c 	andi	r2,r19,64
10012524:	10000b26 	beq	r2,zero,10012554 <___vfiprintf_internal_r+0x79c>
10012528:	e0bfe917 	ldw	r2,-92(fp)
1001252c:	10c00104 	addi	r3,r2,4
10012530:	e0ffe915 	stw	r3,-92(fp)
10012534:	10800017 	ldw	r2,0(r2)
10012538:	e0bff215 	stw	r2,-56(fp)
1001253c:	e03ff315 	stw	zero,-52(fp)
10012540:	e0bff217 	ldw	r2,-56(fp)
10012544:	15bfffcc 	andi	r22,r2,65535
10012548:	e0fff317 	ldw	r3,-52(fp)
1001254c:	182e703a 	and	r23,r3,zero
10012550:	00000606 	br	1001256c <___vfiprintf_internal_r+0x7b4>
10012554:	e0bfe917 	ldw	r2,-92(fp)
10012558:	10c00104 	addi	r3,r2,4
1001255c:	e0ffe915 	stw	r3,-92(fp)
10012560:	10800017 	ldw	r2,0(r2)
10012564:	102d883a 	mov	r22,r2
10012568:	002f883a 	mov	r23,zero
1001256c:	e5bfbc15 	stw	r22,-272(fp)
10012570:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
10012574:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
10012578:	0000a606 	br	10012814 <___vfiprintf_internal_r+0xa5c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
1001257c:	e0bfe917 	ldw	r2,-92(fp)
10012580:	10c00104 	addi	r3,r2,4
10012584:	e0ffe915 	stw	r3,-92(fp)
10012588:	10800017 	ldw	r2,0(r2)
1001258c:	e0bfbc15 	stw	r2,-272(fp)
10012590:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
10012594:	00800084 	movi	r2,2
10012598:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
1001259c:	00840374 	movhi	r2,4109
100125a0:	10be1c04 	addi	r2,r2,-1936
100125a4:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
100125a8:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
100125ac:	00800c04 	movi	r2,48
100125b0:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
100125b4:	04401e04 	movi	r17,120
100125b8:	00801e04 	movi	r2,120
100125bc:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
100125c0:	00009406 	br	10012814 <___vfiprintf_internal_r+0xa5c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
100125c4:	e0bfe917 	ldw	r2,-92(fp)
100125c8:	10c00104 	addi	r3,r2,4
100125cc:	e0ffe915 	stw	r3,-92(fp)
100125d0:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
100125d4:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
100125d8:	a000081e 	bne	r20,zero,100125fc <___vfiprintf_internal_r+0x844>
				cp = "(null)";
100125dc:	05040374 	movhi	r20,4109
100125e0:	a53e2104 	addi	r20,r20,-1916
				size = ((unsigned) prec > 6U) ? 6 : prec;
100125e4:	e0bfbb17 	ldw	r2,-276(fp)
100125e8:	10c001f0 	cmpltui	r3,r2,7
100125ec:	1800011e 	bne	r3,zero,100125f4 <___vfiprintf_internal_r+0x83c>
100125f0:	00800184 	movi	r2,6
100125f4:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
100125f8:	00011706 	br	10012a58 <___vfiprintf_internal_r+0xca0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
100125fc:	e0bfbb17 	ldw	r2,-276(fp)
10012600:	10001016 	blt	r2,zero,10012644 <___vfiprintf_internal_r+0x88c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
10012604:	e0bfbb17 	ldw	r2,-276(fp)
10012608:	100d883a 	mov	r6,r2
1001260c:	000b883a 	mov	r5,zero
10012610:	a009883a 	mov	r4,r20
10012614:	000f0b40 	call	1000f0b4 <memchr>
10012618:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
1001261c:	e0bfc617 	ldw	r2,-232(fp)
10012620:	10000526 	beq	r2,zero,10012638 <___vfiprintf_internal_r+0x880>
					size = p - cp;
10012624:	e0bfc617 	ldw	r2,-232(fp)
10012628:	a007883a 	mov	r3,r20
1001262c:	10c5c83a 	sub	r2,r2,r3
10012630:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
10012634:	00010806 	br	10012a58 <___vfiprintf_internal_r+0xca0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
10012638:	e0bfbb17 	ldw	r2,-276(fp)
1001263c:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
10012640:	00010506 	br	10012a58 <___vfiprintf_internal_r+0xca0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
10012644:	a009883a 	mov	r4,r20
10012648:	00088540 	call	10008854 <strlen>
1001264c:	e0bfc115 	stw	r2,-252(fp)

			break;
10012650:	00010106 	br	10012a58 <___vfiprintf_internal_r+0xca0>
		case 'U': /* extension */
			flags |= LONGINT;
10012654:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
10012658:	9880080c 	andi	r2,r19,32
1001265c:	10000826 	beq	r2,zero,10012680 <___vfiprintf_internal_r+0x8c8>
10012660:	e0bfe917 	ldw	r2,-92(fp)
10012664:	10c00204 	addi	r3,r2,8
10012668:	e0ffe915 	stw	r3,-92(fp)
1001266c:	10c00017 	ldw	r3,0(r2)
10012670:	e0ffec15 	stw	r3,-80(fp)
10012674:	10c00117 	ldw	r3,4(r2)
10012678:	e0ffed15 	stw	r3,-76(fp)
1001267c:	00001e06 	br	100126f8 <___vfiprintf_internal_r+0x940>
10012680:	9880040c 	andi	r2,r19,16
10012684:	10000726 	beq	r2,zero,100126a4 <___vfiprintf_internal_r+0x8ec>
10012688:	e0bfe917 	ldw	r2,-92(fp)
1001268c:	10c00104 	addi	r3,r2,4
10012690:	e0ffe915 	stw	r3,-92(fp)
10012694:	10800017 	ldw	r2,0(r2)
10012698:	e0bfec15 	stw	r2,-80(fp)
1001269c:	e03fed15 	stw	zero,-76(fp)
100126a0:	00001506 	br	100126f8 <___vfiprintf_internal_r+0x940>
100126a4:	9880100c 	andi	r2,r19,64
100126a8:	10000d26 	beq	r2,zero,100126e0 <___vfiprintf_internal_r+0x928>
100126ac:	e0bfe917 	ldw	r2,-92(fp)
100126b0:	10c00104 	addi	r3,r2,4
100126b4:	e0ffe915 	stw	r3,-92(fp)
100126b8:	10800017 	ldw	r2,0(r2)
100126bc:	e0bff415 	stw	r2,-48(fp)
100126c0:	e03ff515 	stw	zero,-44(fp)
100126c4:	e0bff417 	ldw	r2,-48(fp)
100126c8:	10bfffcc 	andi	r2,r2,65535
100126cc:	e0bfec15 	stw	r2,-80(fp)
100126d0:	e0fff517 	ldw	r3,-44(fp)
100126d4:	1806703a 	and	r3,r3,zero
100126d8:	e0ffed15 	stw	r3,-76(fp)
100126dc:	00000606 	br	100126f8 <___vfiprintf_internal_r+0x940>
100126e0:	e0bfe917 	ldw	r2,-92(fp)
100126e4:	10c00104 	addi	r3,r2,4
100126e8:	e0ffe915 	stw	r3,-92(fp)
100126ec:	10800017 	ldw	r2,0(r2)
100126f0:	e0bfec15 	stw	r2,-80(fp)
100126f4:	e03fed15 	stw	zero,-76(fp)
100126f8:	e0bfec17 	ldw	r2,-80(fp)
100126fc:	e0bfbc15 	stw	r2,-272(fp)
10012700:	e0ffed17 	ldw	r3,-76(fp)
10012704:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
10012708:	00800044 	movi	r2,1
1001270c:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
10012710:	00004006 	br	10012814 <___vfiprintf_internal_r+0xa5c>
		case 'X':
			xdigs = "0123456789ABCDEF";
10012714:	00840374 	movhi	r2,4109
10012718:	10be2304 	addi	r2,r2,-1908
1001271c:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
10012720:	00000306 	br	10012730 <___vfiprintf_internal_r+0x978>
		case 'x':
			xdigs = "0123456789abcdef";
10012724:	00840374 	movhi	r2,4109
10012728:	10be1c04 	addi	r2,r2,-1936
1001272c:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
10012730:	9880080c 	andi	r2,r19,32
10012734:	10000826 	beq	r2,zero,10012758 <___vfiprintf_internal_r+0x9a0>
10012738:	e0bfe917 	ldw	r2,-92(fp)
1001273c:	10c00204 	addi	r3,r2,8
10012740:	e0ffe915 	stw	r3,-92(fp)
10012744:	10c00017 	ldw	r3,0(r2)
10012748:	e0ffee15 	stw	r3,-72(fp)
1001274c:	10c00117 	ldw	r3,4(r2)
10012750:	e0ffef15 	stw	r3,-68(fp)
10012754:	00001e06 	br	100127d0 <___vfiprintf_internal_r+0xa18>
10012758:	9880040c 	andi	r2,r19,16
1001275c:	10000726 	beq	r2,zero,1001277c <___vfiprintf_internal_r+0x9c4>
10012760:	e0bfe917 	ldw	r2,-92(fp)
10012764:	10c00104 	addi	r3,r2,4
10012768:	e0ffe915 	stw	r3,-92(fp)
1001276c:	10800017 	ldw	r2,0(r2)
10012770:	e0bfee15 	stw	r2,-72(fp)
10012774:	e03fef15 	stw	zero,-68(fp)
10012778:	00001506 	br	100127d0 <___vfiprintf_internal_r+0xa18>
1001277c:	9880100c 	andi	r2,r19,64
10012780:	10000d26 	beq	r2,zero,100127b8 <___vfiprintf_internal_r+0xa00>
10012784:	e0bfe917 	ldw	r2,-92(fp)
10012788:	10c00104 	addi	r3,r2,4
1001278c:	e0ffe915 	stw	r3,-92(fp)
10012790:	10800017 	ldw	r2,0(r2)
10012794:	e0bff615 	stw	r2,-40(fp)
10012798:	e03ff715 	stw	zero,-36(fp)
1001279c:	e0bff617 	ldw	r2,-40(fp)
100127a0:	10bfffcc 	andi	r2,r2,65535
100127a4:	e0bfee15 	stw	r2,-72(fp)
100127a8:	e0fff717 	ldw	r3,-36(fp)
100127ac:	1806703a 	and	r3,r3,zero
100127b0:	e0ffef15 	stw	r3,-68(fp)
100127b4:	00000606 	br	100127d0 <___vfiprintf_internal_r+0xa18>
100127b8:	e0bfe917 	ldw	r2,-92(fp)
100127bc:	10c00104 	addi	r3,r2,4
100127c0:	e0ffe915 	stw	r3,-92(fp)
100127c4:	10800017 	ldw	r2,0(r2)
100127c8:	e0bfee15 	stw	r2,-72(fp)
100127cc:	e03fef15 	stw	zero,-68(fp)
100127d0:	e0bfee17 	ldw	r2,-72(fp)
100127d4:	e0bfbc15 	stw	r2,-272(fp)
100127d8:	e0ffef17 	ldw	r3,-68(fp)
100127dc:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
100127e0:	00800084 	movi	r2,2
100127e4:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
100127e8:	9880004c 	andi	r2,r19,1
100127ec:	10000926 	beq	r2,zero,10012814 <___vfiprintf_internal_r+0xa5c>
100127f0:	e0bfbc17 	ldw	r2,-272(fp)
100127f4:	e0ffbd17 	ldw	r3,-268(fp)
100127f8:	10c4b03a 	or	r2,r2,r3
100127fc:	10000526 	beq	r2,zero,10012814 <___vfiprintf_internal_r+0xa5c>
				ox[0] = '0';
10012800:	00800c04 	movi	r2,48
10012804:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
10012808:	8805883a 	mov	r2,r17
1001280c:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
10012810:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
10012814:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
10012818:	e0bfbb17 	ldw	r2,-276(fp)
1001281c:	e0bfbf15 	stw	r2,-260(fp)
10012820:	e0bfbf17 	ldw	r2,-260(fp)
10012824:	10000216 	blt	r2,zero,10012830 <___vfiprintf_internal_r+0xa78>
				flags &= ~ZEROPAD;
10012828:	00bfdfc4 	movi	r2,-129
1001282c:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
10012830:	e53fdb04 	addi	r20,fp,-148
10012834:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
10012838:	e0bfbc17 	ldw	r2,-272(fp)
1001283c:	e0ffbd17 	ldw	r3,-268(fp)
10012840:	10c4b03a 	or	r2,r2,r3
10012844:	1000021e 	bne	r2,zero,10012850 <___vfiprintf_internal_r+0xa98>
10012848:	e0bfbb17 	ldw	r2,-276(fp)
1001284c:	10006c26 	beq	r2,zero,10012a00 <___vfiprintf_internal_r+0xc48>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
10012850:	e0bfbe03 	ldbu	r2,-264(fp)
10012854:	10c00060 	cmpeqi	r3,r2,1
10012858:	1800211e 	bne	r3,zero,100128e0 <___vfiprintf_internal_r+0xb28>
1001285c:	10c000a0 	cmpeqi	r3,r2,2
10012860:	1800491e 	bne	r3,zero,10012988 <___vfiprintf_internal_r+0xbd0>
10012864:	10005d1e 	bne	r2,zero,100129dc <___vfiprintf_internal_r+0xc24>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
10012868:	a53fffc4 	addi	r20,r20,-1
1001286c:	e0bfbc17 	ldw	r2,-272(fp)
10012870:	108001cc 	andi	r2,r2,7
10012874:	10800c04 	addi	r2,r2,48
10012878:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
1001287c:	e0bfbd17 	ldw	r2,-268(fp)
10012880:	1004977a 	slli	r2,r2,29
10012884:	e0ffbc17 	ldw	r3,-272(fp)
10012888:	1806d0fa 	srli	r3,r3,3
1001288c:	1884b03a 	or	r2,r3,r2
10012890:	e0bfbc15 	stw	r2,-272(fp)
10012894:	e0bfbd17 	ldw	r2,-268(fp)
10012898:	1004d0fa 	srli	r2,r2,3
1001289c:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
100128a0:	e0bfbc17 	ldw	r2,-272(fp)
100128a4:	e0ffbd17 	ldw	r3,-268(fp)
100128a8:	10c4b03a 	or	r2,r2,r3
100128ac:	103fee1e 	bne	r2,zero,10012868 <__alt_data_end+0xf8012868>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
100128b0:	9880004c 	andi	r2,r19,1
100128b4:	10005026 	beq	r2,zero,100129f8 <___vfiprintf_internal_r+0xc40>
100128b8:	a0800003 	ldbu	r2,0(r20)
100128bc:	10803fcc 	andi	r2,r2,255
100128c0:	1080201c 	xori	r2,r2,128
100128c4:	10bfe004 	addi	r2,r2,-128
100128c8:	10800c20 	cmpeqi	r2,r2,48
100128cc:	10004a1e 	bne	r2,zero,100129f8 <___vfiprintf_internal_r+0xc40>
						*--cp = '0';
100128d0:	a53fffc4 	addi	r20,r20,-1
100128d4:	00800c04 	movi	r2,48
100128d8:	a0800005 	stb	r2,0(r20)
					break;
100128dc:	00004606 	br	100129f8 <___vfiprintf_internal_r+0xc40>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
100128e0:	e0bfbd17 	ldw	r2,-268(fp)
100128e4:	10000a1e 	bne	r2,zero,10012910 <___vfiprintf_internal_r+0xb58>
100128e8:	e0bfbd17 	ldw	r2,-268(fp)
100128ec:	1000031e 	bne	r2,zero,100128fc <___vfiprintf_internal_r+0xb44>
100128f0:	e0bfbc17 	ldw	r2,-272(fp)
100128f4:	108002a8 	cmpgeui	r2,r2,10
100128f8:	1000051e 	bne	r2,zero,10012910 <___vfiprintf_internal_r+0xb58>
						*--cp = to_char(_uquad);
100128fc:	a53fffc4 	addi	r20,r20,-1
10012900:	e0bfbc17 	ldw	r2,-272(fp)
10012904:	10800c04 	addi	r2,r2,48
10012908:	a0800005 	stb	r2,0(r20)
						break;
1001290c:	00003b06 	br	100129fc <___vfiprintf_internal_r+0xc44>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
10012910:	a53fffc4 	addi	r20,r20,-1
10012914:	e0bfbc17 	ldw	r2,-272(fp)
10012918:	e0ffbd17 	ldw	r3,-268(fp)
1001291c:	01800284 	movi	r6,10
10012920:	000f883a 	mov	r7,zero
10012924:	1009883a 	mov	r4,r2
10012928:	180b883a 	mov	r5,r3
1001292c:	00142500 	call	10014250 <__umoddi3>
10012930:	1009883a 	mov	r4,r2
10012934:	180b883a 	mov	r5,r3
10012938:	2005883a 	mov	r2,r4
1001293c:	2807883a 	mov	r3,r5
10012940:	10800c04 	addi	r2,r2,48
10012944:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
10012948:	e0bfbc17 	ldw	r2,-272(fp)
1001294c:	e0ffbd17 	ldw	r3,-268(fp)
10012950:	01800284 	movi	r6,10
10012954:	000f883a 	mov	r7,zero
10012958:	1009883a 	mov	r4,r2
1001295c:	180b883a 	mov	r5,r3
10012960:	0013c540 	call	10013c54 <__udivdi3>
10012964:	1009883a 	mov	r4,r2
10012968:	180b883a 	mov	r5,r3
1001296c:	e13fbc15 	stw	r4,-272(fp)
10012970:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
10012974:	e0bfbc17 	ldw	r2,-272(fp)
10012978:	e0ffbd17 	ldw	r3,-268(fp)
1001297c:	10c4b03a 	or	r2,r2,r3
10012980:	103fe31e 	bne	r2,zero,10012910 <__alt_data_end+0xf8012910>
					break;
10012984:	00001d06 	br	100129fc <___vfiprintf_internal_r+0xc44>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
10012988:	a53fffc4 	addi	r20,r20,-1
1001298c:	e0bfbc17 	ldw	r2,-272(fp)
10012990:	108003cc 	andi	r2,r2,15
10012994:	e0ffc217 	ldw	r3,-248(fp)
10012998:	1885883a 	add	r2,r3,r2
1001299c:	10800003 	ldbu	r2,0(r2)
100129a0:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
100129a4:	e0bfbd17 	ldw	r2,-268(fp)
100129a8:	1004973a 	slli	r2,r2,28
100129ac:	e0ffbc17 	ldw	r3,-272(fp)
100129b0:	1806d13a 	srli	r3,r3,4
100129b4:	1884b03a 	or	r2,r3,r2
100129b8:	e0bfbc15 	stw	r2,-272(fp)
100129bc:	e0bfbd17 	ldw	r2,-268(fp)
100129c0:	1004d13a 	srli	r2,r2,4
100129c4:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
100129c8:	e0bfbc17 	ldw	r2,-272(fp)
100129cc:	e0ffbd17 	ldw	r3,-268(fp)
100129d0:	10c4b03a 	or	r2,r2,r3
100129d4:	103fec1e 	bne	r2,zero,10012988 <__alt_data_end+0xf8012988>
					break;
100129d8:	00000806 	br	100129fc <___vfiprintf_internal_r+0xc44>

				default:
					cp = "bug in vfprintf: bad base";
100129dc:	05040374 	movhi	r20,4109
100129e0:	a53e2804 	addi	r20,r20,-1888
					size = strlen (cp);
100129e4:	a009883a 	mov	r4,r20
100129e8:	00088540 	call	10008854 <strlen>
100129ec:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
100129f0:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
100129f4:	00001806 	br	10012a58 <___vfiprintf_internal_r+0xca0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
100129f8:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
100129fc:	00000706 	br	10012a1c <___vfiprintf_internal_r+0xc64>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
10012a00:	e0bfbe03 	ldbu	r2,-264(fp)
10012a04:	1000051e 	bne	r2,zero,10012a1c <___vfiprintf_internal_r+0xc64>
10012a08:	9880004c 	andi	r2,r19,1
10012a0c:	10000326 	beq	r2,zero,10012a1c <___vfiprintf_internal_r+0xc64>
                         *--cp = '0';
10012a10:	a53fffc4 	addi	r20,r20,-1
10012a14:	00800c04 	movi	r2,48
10012a18:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
10012a1c:	e0bfdb04 	addi	r2,fp,-148
10012a20:	10800a04 	addi	r2,r2,40
10012a24:	1007883a 	mov	r3,r2
10012a28:	a005883a 	mov	r2,r20
10012a2c:	1885c83a 	sub	r2,r3,r2
10012a30:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
10012a34:	00000806 	br	10012a58 <___vfiprintf_internal_r+0xca0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
10012a38:	88015426 	beq	r17,zero,10012f8c <___vfiprintf_internal_r+0x11d4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
10012a3c:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
10012a40:	8805883a 	mov	r2,r17
10012a44:	a0800005 	stb	r2,0(r20)
			size = 1;
10012a48:	00800044 	movi	r2,1
10012a4c:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
10012a50:	e03fc705 	stb	zero,-228(fp)
			break;
10012a54:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
10012a58:	e0ffbf17 	ldw	r3,-260(fp)
10012a5c:	e0bfc117 	ldw	r2,-252(fp)
10012a60:	10c0010e 	bge	r2,r3,10012a68 <___vfiprintf_internal_r+0xcb0>
10012a64:	1805883a 	mov	r2,r3
10012a68:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
10012a6c:	e0bfc703 	ldbu	r2,-228(fp)
10012a70:	10803fcc 	andi	r2,r2,255
10012a74:	1080201c 	xori	r2,r2,128
10012a78:	10bfe004 	addi	r2,r2,-128
10012a7c:	10000326 	beq	r2,zero,10012a8c <___vfiprintf_internal_r+0xcd4>
			realsz++;
10012a80:	e0bfc017 	ldw	r2,-256(fp)
10012a84:	10800044 	addi	r2,r2,1
10012a88:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
10012a8c:	9880008c 	andi	r2,r19,2
10012a90:	10000326 	beq	r2,zero,10012aa0 <___vfiprintf_internal_r+0xce8>
			realsz+= 2;
10012a94:	e0bfc017 	ldw	r2,-256(fp)
10012a98:	10800084 	addi	r2,r2,2
10012a9c:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
10012aa0:	9880210c 	andi	r2,r19,132
10012aa4:	1000351e 	bne	r2,zero,10012b7c <___vfiprintf_internal_r+0xdc4>
			PAD (width - realsz, blanks);
10012aa8:	e0ffba17 	ldw	r3,-280(fp)
10012aac:	e0bfc017 	ldw	r2,-256(fp)
10012ab0:	18a1c83a 	sub	r16,r3,r2
10012ab4:	0400310e 	bge	zero,r16,10012b7c <___vfiprintf_internal_r+0xdc4>
10012ab8:	00001706 	br	10012b18 <___vfiprintf_internal_r+0xd60>
10012abc:	00840374 	movhi	r2,4109
10012ac0:	10be2e84 	addi	r2,r2,-1862
10012ac4:	90800015 	stw	r2,0(r18)
10012ac8:	00800404 	movi	r2,16
10012acc:	90800115 	stw	r2,4(r18)
10012ad0:	e0bfca17 	ldw	r2,-216(fp)
10012ad4:	10800404 	addi	r2,r2,16
10012ad8:	e0bfca15 	stw	r2,-216(fp)
10012adc:	94800204 	addi	r18,r18,8
10012ae0:	e0bfc917 	ldw	r2,-220(fp)
10012ae4:	10800044 	addi	r2,r2,1
10012ae8:	e0bfc915 	stw	r2,-220(fp)
10012aec:	e0bfc917 	ldw	r2,-220(fp)
10012af0:	10800210 	cmplti	r2,r2,8
10012af4:	1000071e 	bne	r2,zero,10012b14 <___vfiprintf_internal_r+0xd5c>
10012af8:	e0bfc804 	addi	r2,fp,-224
10012afc:	100d883a 	mov	r6,r2
10012b00:	e17fe717 	ldw	r5,-100(fp)
10012b04:	e13fe617 	ldw	r4,-104(fp)
10012b08:	0011b340 	call	10011b34 <__sprint_r>
10012b0c:	10012d1e 	bne	r2,zero,10012fc4 <___vfiprintf_internal_r+0x120c>
10012b10:	e4bfcb04 	addi	r18,fp,-212
10012b14:	843ffc04 	addi	r16,r16,-16
10012b18:	80800448 	cmpgei	r2,r16,17
10012b1c:	103fe71e 	bne	r2,zero,10012abc <__alt_data_end+0xf8012abc>
10012b20:	00840374 	movhi	r2,4109
10012b24:	10be2e84 	addi	r2,r2,-1862
10012b28:	90800015 	stw	r2,0(r18)
10012b2c:	8005883a 	mov	r2,r16
10012b30:	90800115 	stw	r2,4(r18)
10012b34:	e0bfca17 	ldw	r2,-216(fp)
10012b38:	8007883a 	mov	r3,r16
10012b3c:	10c5883a 	add	r2,r2,r3
10012b40:	e0bfca15 	stw	r2,-216(fp)
10012b44:	94800204 	addi	r18,r18,8
10012b48:	e0bfc917 	ldw	r2,-220(fp)
10012b4c:	10800044 	addi	r2,r2,1
10012b50:	e0bfc915 	stw	r2,-220(fp)
10012b54:	e0bfc917 	ldw	r2,-220(fp)
10012b58:	10800210 	cmplti	r2,r2,8
10012b5c:	1000071e 	bne	r2,zero,10012b7c <___vfiprintf_internal_r+0xdc4>
10012b60:	e0bfc804 	addi	r2,fp,-224
10012b64:	100d883a 	mov	r6,r2
10012b68:	e17fe717 	ldw	r5,-100(fp)
10012b6c:	e13fe617 	ldw	r4,-104(fp)
10012b70:	0011b340 	call	10011b34 <__sprint_r>
10012b74:	1001151e 	bne	r2,zero,10012fcc <___vfiprintf_internal_r+0x1214>
10012b78:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
10012b7c:	e0bfc703 	ldbu	r2,-228(fp)
10012b80:	10803fcc 	andi	r2,r2,255
10012b84:	1080201c 	xori	r2,r2,128
10012b88:	10bfe004 	addi	r2,r2,-128
10012b8c:	10001526 	beq	r2,zero,10012be4 <___vfiprintf_internal_r+0xe2c>
			PRINT (&sign, 1);
10012b90:	e0bfc704 	addi	r2,fp,-228
10012b94:	90800015 	stw	r2,0(r18)
10012b98:	00800044 	movi	r2,1
10012b9c:	90800115 	stw	r2,4(r18)
10012ba0:	e0bfca17 	ldw	r2,-216(fp)
10012ba4:	10800044 	addi	r2,r2,1
10012ba8:	e0bfca15 	stw	r2,-216(fp)
10012bac:	94800204 	addi	r18,r18,8
10012bb0:	e0bfc917 	ldw	r2,-220(fp)
10012bb4:	10800044 	addi	r2,r2,1
10012bb8:	e0bfc915 	stw	r2,-220(fp)
10012bbc:	e0bfc917 	ldw	r2,-220(fp)
10012bc0:	10800210 	cmplti	r2,r2,8
10012bc4:	1000071e 	bne	r2,zero,10012be4 <___vfiprintf_internal_r+0xe2c>
10012bc8:	e0bfc804 	addi	r2,fp,-224
10012bcc:	100d883a 	mov	r6,r2
10012bd0:	e17fe717 	ldw	r5,-100(fp)
10012bd4:	e13fe617 	ldw	r4,-104(fp)
10012bd8:	0011b340 	call	10011b34 <__sprint_r>
10012bdc:	1000fd1e 	bne	r2,zero,10012fd4 <___vfiprintf_internal_r+0x121c>
10012be0:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
10012be4:	9880008c 	andi	r2,r19,2
10012be8:	10001526 	beq	r2,zero,10012c40 <___vfiprintf_internal_r+0xe88>
			PRINT (ox, 2);
10012bec:	e0bfe504 	addi	r2,fp,-108
10012bf0:	90800015 	stw	r2,0(r18)
10012bf4:	00800084 	movi	r2,2
10012bf8:	90800115 	stw	r2,4(r18)
10012bfc:	e0bfca17 	ldw	r2,-216(fp)
10012c00:	10800084 	addi	r2,r2,2
10012c04:	e0bfca15 	stw	r2,-216(fp)
10012c08:	94800204 	addi	r18,r18,8
10012c0c:	e0bfc917 	ldw	r2,-220(fp)
10012c10:	10800044 	addi	r2,r2,1
10012c14:	e0bfc915 	stw	r2,-220(fp)
10012c18:	e0bfc917 	ldw	r2,-220(fp)
10012c1c:	10800210 	cmplti	r2,r2,8
10012c20:	1000071e 	bne	r2,zero,10012c40 <___vfiprintf_internal_r+0xe88>
10012c24:	e0bfc804 	addi	r2,fp,-224
10012c28:	100d883a 	mov	r6,r2
10012c2c:	e17fe717 	ldw	r5,-100(fp)
10012c30:	e13fe617 	ldw	r4,-104(fp)
10012c34:	0011b340 	call	10011b34 <__sprint_r>
10012c38:	1000e81e 	bne	r2,zero,10012fdc <___vfiprintf_internal_r+0x1224>
10012c3c:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
10012c40:	9880210c 	andi	r2,r19,132
10012c44:	10802018 	cmpnei	r2,r2,128
10012c48:	1000351e 	bne	r2,zero,10012d20 <___vfiprintf_internal_r+0xf68>
			PAD (width - realsz, zeroes);
10012c4c:	e0ffba17 	ldw	r3,-280(fp)
10012c50:	e0bfc017 	ldw	r2,-256(fp)
10012c54:	18a1c83a 	sub	r16,r3,r2
10012c58:	0400310e 	bge	zero,r16,10012d20 <___vfiprintf_internal_r+0xf68>
10012c5c:	00001706 	br	10012cbc <___vfiprintf_internal_r+0xf04>
10012c60:	00840374 	movhi	r2,4109
10012c64:	10be3284 	addi	r2,r2,-1846
10012c68:	90800015 	stw	r2,0(r18)
10012c6c:	00800404 	movi	r2,16
10012c70:	90800115 	stw	r2,4(r18)
10012c74:	e0bfca17 	ldw	r2,-216(fp)
10012c78:	10800404 	addi	r2,r2,16
10012c7c:	e0bfca15 	stw	r2,-216(fp)
10012c80:	94800204 	addi	r18,r18,8
10012c84:	e0bfc917 	ldw	r2,-220(fp)
10012c88:	10800044 	addi	r2,r2,1
10012c8c:	e0bfc915 	stw	r2,-220(fp)
10012c90:	e0bfc917 	ldw	r2,-220(fp)
10012c94:	10800210 	cmplti	r2,r2,8
10012c98:	1000071e 	bne	r2,zero,10012cb8 <___vfiprintf_internal_r+0xf00>
10012c9c:	e0bfc804 	addi	r2,fp,-224
10012ca0:	100d883a 	mov	r6,r2
10012ca4:	e17fe717 	ldw	r5,-100(fp)
10012ca8:	e13fe617 	ldw	r4,-104(fp)
10012cac:	0011b340 	call	10011b34 <__sprint_r>
10012cb0:	1000cc1e 	bne	r2,zero,10012fe4 <___vfiprintf_internal_r+0x122c>
10012cb4:	e4bfcb04 	addi	r18,fp,-212
10012cb8:	843ffc04 	addi	r16,r16,-16
10012cbc:	80800448 	cmpgei	r2,r16,17
10012cc0:	103fe71e 	bne	r2,zero,10012c60 <__alt_data_end+0xf8012c60>
10012cc4:	00840374 	movhi	r2,4109
10012cc8:	10be3284 	addi	r2,r2,-1846
10012ccc:	90800015 	stw	r2,0(r18)
10012cd0:	8005883a 	mov	r2,r16
10012cd4:	90800115 	stw	r2,4(r18)
10012cd8:	e0bfca17 	ldw	r2,-216(fp)
10012cdc:	8007883a 	mov	r3,r16
10012ce0:	10c5883a 	add	r2,r2,r3
10012ce4:	e0bfca15 	stw	r2,-216(fp)
10012ce8:	94800204 	addi	r18,r18,8
10012cec:	e0bfc917 	ldw	r2,-220(fp)
10012cf0:	10800044 	addi	r2,r2,1
10012cf4:	e0bfc915 	stw	r2,-220(fp)
10012cf8:	e0bfc917 	ldw	r2,-220(fp)
10012cfc:	10800210 	cmplti	r2,r2,8
10012d00:	1000071e 	bne	r2,zero,10012d20 <___vfiprintf_internal_r+0xf68>
10012d04:	e0bfc804 	addi	r2,fp,-224
10012d08:	100d883a 	mov	r6,r2
10012d0c:	e17fe717 	ldw	r5,-100(fp)
10012d10:	e13fe617 	ldw	r4,-104(fp)
10012d14:	0011b340 	call	10011b34 <__sprint_r>
10012d18:	1000b41e 	bne	r2,zero,10012fec <___vfiprintf_internal_r+0x1234>
10012d1c:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
10012d20:	e0ffbf17 	ldw	r3,-260(fp)
10012d24:	e0bfc117 	ldw	r2,-252(fp)
10012d28:	18a1c83a 	sub	r16,r3,r2
10012d2c:	0400310e 	bge	zero,r16,10012df4 <___vfiprintf_internal_r+0x103c>
10012d30:	00001706 	br	10012d90 <___vfiprintf_internal_r+0xfd8>
10012d34:	00840374 	movhi	r2,4109
10012d38:	10be3284 	addi	r2,r2,-1846
10012d3c:	90800015 	stw	r2,0(r18)
10012d40:	00800404 	movi	r2,16
10012d44:	90800115 	stw	r2,4(r18)
10012d48:	e0bfca17 	ldw	r2,-216(fp)
10012d4c:	10800404 	addi	r2,r2,16
10012d50:	e0bfca15 	stw	r2,-216(fp)
10012d54:	94800204 	addi	r18,r18,8
10012d58:	e0bfc917 	ldw	r2,-220(fp)
10012d5c:	10800044 	addi	r2,r2,1
10012d60:	e0bfc915 	stw	r2,-220(fp)
10012d64:	e0bfc917 	ldw	r2,-220(fp)
10012d68:	10800210 	cmplti	r2,r2,8
10012d6c:	1000071e 	bne	r2,zero,10012d8c <___vfiprintf_internal_r+0xfd4>
10012d70:	e0bfc804 	addi	r2,fp,-224
10012d74:	100d883a 	mov	r6,r2
10012d78:	e17fe717 	ldw	r5,-100(fp)
10012d7c:	e13fe617 	ldw	r4,-104(fp)
10012d80:	0011b340 	call	10011b34 <__sprint_r>
10012d84:	10009b1e 	bne	r2,zero,10012ff4 <___vfiprintf_internal_r+0x123c>
10012d88:	e4bfcb04 	addi	r18,fp,-212
10012d8c:	843ffc04 	addi	r16,r16,-16
10012d90:	80800448 	cmpgei	r2,r16,17
10012d94:	103fe71e 	bne	r2,zero,10012d34 <__alt_data_end+0xf8012d34>
10012d98:	00840374 	movhi	r2,4109
10012d9c:	10be3284 	addi	r2,r2,-1846
10012da0:	90800015 	stw	r2,0(r18)
10012da4:	8005883a 	mov	r2,r16
10012da8:	90800115 	stw	r2,4(r18)
10012dac:	e0bfca17 	ldw	r2,-216(fp)
10012db0:	8007883a 	mov	r3,r16
10012db4:	10c5883a 	add	r2,r2,r3
10012db8:	e0bfca15 	stw	r2,-216(fp)
10012dbc:	94800204 	addi	r18,r18,8
10012dc0:	e0bfc917 	ldw	r2,-220(fp)
10012dc4:	10800044 	addi	r2,r2,1
10012dc8:	e0bfc915 	stw	r2,-220(fp)
10012dcc:	e0bfc917 	ldw	r2,-220(fp)
10012dd0:	10800210 	cmplti	r2,r2,8
10012dd4:	1000071e 	bne	r2,zero,10012df4 <___vfiprintf_internal_r+0x103c>
10012dd8:	e0bfc804 	addi	r2,fp,-224
10012ddc:	100d883a 	mov	r6,r2
10012de0:	e17fe717 	ldw	r5,-100(fp)
10012de4:	e13fe617 	ldw	r4,-104(fp)
10012de8:	0011b340 	call	10011b34 <__sprint_r>
10012dec:	1000831e 	bne	r2,zero,10012ffc <___vfiprintf_internal_r+0x1244>
10012df0:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
10012df4:	95000015 	stw	r20,0(r18)
10012df8:	e0bfc117 	ldw	r2,-252(fp)
10012dfc:	90800115 	stw	r2,4(r18)
10012e00:	e0ffca17 	ldw	r3,-216(fp)
10012e04:	e0bfc117 	ldw	r2,-252(fp)
10012e08:	1885883a 	add	r2,r3,r2
10012e0c:	e0bfca15 	stw	r2,-216(fp)
10012e10:	94800204 	addi	r18,r18,8
10012e14:	e0bfc917 	ldw	r2,-220(fp)
10012e18:	10800044 	addi	r2,r2,1
10012e1c:	e0bfc915 	stw	r2,-220(fp)
10012e20:	e0bfc917 	ldw	r2,-220(fp)
10012e24:	10800210 	cmplti	r2,r2,8
10012e28:	1000071e 	bne	r2,zero,10012e48 <___vfiprintf_internal_r+0x1090>
10012e2c:	e0bfc804 	addi	r2,fp,-224
10012e30:	100d883a 	mov	r6,r2
10012e34:	e17fe717 	ldw	r5,-100(fp)
10012e38:	e13fe617 	ldw	r4,-104(fp)
10012e3c:	0011b340 	call	10011b34 <__sprint_r>
10012e40:	1000701e 	bne	r2,zero,10013004 <___vfiprintf_internal_r+0x124c>
10012e44:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
10012e48:	9880010c 	andi	r2,r19,4
10012e4c:	10003526 	beq	r2,zero,10012f24 <___vfiprintf_internal_r+0x116c>
			PAD (width - realsz, blanks);
10012e50:	e0ffba17 	ldw	r3,-280(fp)
10012e54:	e0bfc017 	ldw	r2,-256(fp)
10012e58:	18a1c83a 	sub	r16,r3,r2
10012e5c:	0400310e 	bge	zero,r16,10012f24 <___vfiprintf_internal_r+0x116c>
10012e60:	00001706 	br	10012ec0 <___vfiprintf_internal_r+0x1108>
10012e64:	00840374 	movhi	r2,4109
10012e68:	10be2e84 	addi	r2,r2,-1862
10012e6c:	90800015 	stw	r2,0(r18)
10012e70:	00800404 	movi	r2,16
10012e74:	90800115 	stw	r2,4(r18)
10012e78:	e0bfca17 	ldw	r2,-216(fp)
10012e7c:	10800404 	addi	r2,r2,16
10012e80:	e0bfca15 	stw	r2,-216(fp)
10012e84:	94800204 	addi	r18,r18,8
10012e88:	e0bfc917 	ldw	r2,-220(fp)
10012e8c:	10800044 	addi	r2,r2,1
10012e90:	e0bfc915 	stw	r2,-220(fp)
10012e94:	e0bfc917 	ldw	r2,-220(fp)
10012e98:	10800210 	cmplti	r2,r2,8
10012e9c:	1000071e 	bne	r2,zero,10012ebc <___vfiprintf_internal_r+0x1104>
10012ea0:	e0bfc804 	addi	r2,fp,-224
10012ea4:	100d883a 	mov	r6,r2
10012ea8:	e17fe717 	ldw	r5,-100(fp)
10012eac:	e13fe617 	ldw	r4,-104(fp)
10012eb0:	0011b340 	call	10011b34 <__sprint_r>
10012eb4:	1000551e 	bne	r2,zero,1001300c <___vfiprintf_internal_r+0x1254>
10012eb8:	e4bfcb04 	addi	r18,fp,-212
10012ebc:	843ffc04 	addi	r16,r16,-16
10012ec0:	80800448 	cmpgei	r2,r16,17
10012ec4:	103fe71e 	bne	r2,zero,10012e64 <__alt_data_end+0xf8012e64>
10012ec8:	00840374 	movhi	r2,4109
10012ecc:	10be2e84 	addi	r2,r2,-1862
10012ed0:	90800015 	stw	r2,0(r18)
10012ed4:	8005883a 	mov	r2,r16
10012ed8:	90800115 	stw	r2,4(r18)
10012edc:	e0bfca17 	ldw	r2,-216(fp)
10012ee0:	8007883a 	mov	r3,r16
10012ee4:	10c5883a 	add	r2,r2,r3
10012ee8:	e0bfca15 	stw	r2,-216(fp)
10012eec:	94800204 	addi	r18,r18,8
10012ef0:	e0bfc917 	ldw	r2,-220(fp)
10012ef4:	10800044 	addi	r2,r2,1
10012ef8:	e0bfc915 	stw	r2,-220(fp)
10012efc:	e0bfc917 	ldw	r2,-220(fp)
10012f00:	10800210 	cmplti	r2,r2,8
10012f04:	1000071e 	bne	r2,zero,10012f24 <___vfiprintf_internal_r+0x116c>
10012f08:	e0bfc804 	addi	r2,fp,-224
10012f0c:	100d883a 	mov	r6,r2
10012f10:	e17fe717 	ldw	r5,-100(fp)
10012f14:	e13fe617 	ldw	r4,-104(fp)
10012f18:	0011b340 	call	10011b34 <__sprint_r>
10012f1c:	10003d1e 	bne	r2,zero,10013014 <___vfiprintf_internal_r+0x125c>
10012f20:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
10012f24:	e0ffba17 	ldw	r3,-280(fp)
10012f28:	e0bfc017 	ldw	r2,-256(fp)
10012f2c:	10c0010e 	bge	r2,r3,10012f34 <___vfiprintf_internal_r+0x117c>
10012f30:	1805883a 	mov	r2,r3
10012f34:	e0ffb917 	ldw	r3,-284(fp)
10012f38:	1885883a 	add	r2,r3,r2
10012f3c:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
10012f40:	e0bfca17 	ldw	r2,-216(fp)
10012f44:	10000626 	beq	r2,zero,10012f60 <___vfiprintf_internal_r+0x11a8>
10012f48:	e0bfc804 	addi	r2,fp,-224
10012f4c:	100d883a 	mov	r6,r2
10012f50:	e17fe717 	ldw	r5,-100(fp)
10012f54:	e13fe617 	ldw	r4,-104(fp)
10012f58:	0011b340 	call	10011b34 <__sprint_r>
10012f5c:	10002f1e 	bne	r2,zero,1001301c <___vfiprintf_internal_r+0x1264>
10012f60:	e03fc915 	stw	zero,-220(fp)
10012f64:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
10012f68:	e0bfc317 	ldw	r2,-244(fp)
10012f6c:	103be426 	beq	r2,zero,10011f00 <__alt_data_end+0xf8011f00>
			_free_r (data, malloc_buf);
10012f70:	e17fc317 	ldw	r5,-244(fp)
10012f74:	e13fe617 	ldw	r4,-104(fp)
10012f78:	000dd700 	call	1000dd70 <_free_r>
			malloc_buf = NULL;
10012f7c:	e03fc315 	stw	zero,-244(fp)
		}
	}
10012f80:	003bdf06 	br	10011f00 <__alt_data_end+0xf8011f00>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
10012f84:	0001883a 	nop
10012f88:	00000106 	br	10012f90 <___vfiprintf_internal_r+0x11d8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
10012f8c:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
10012f90:	e0bfca17 	ldw	r2,-216(fp)
10012f94:	10000626 	beq	r2,zero,10012fb0 <___vfiprintf_internal_r+0x11f8>
10012f98:	e0bfc804 	addi	r2,fp,-224
10012f9c:	100d883a 	mov	r6,r2
10012fa0:	e17fe717 	ldw	r5,-100(fp)
10012fa4:	e13fe617 	ldw	r4,-104(fp)
10012fa8:	0011b340 	call	10011b34 <__sprint_r>
10012fac:	10001d1e 	bne	r2,zero,10013024 <___vfiprintf_internal_r+0x126c>
10012fb0:	e03fc915 	stw	zero,-220(fp)
10012fb4:	e4bfcb04 	addi	r18,fp,-212
10012fb8:	00001b06 	br	10013028 <___vfiprintf_internal_r+0x1270>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
10012fbc:	0001883a 	nop
10012fc0:	00001906 	br	10013028 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
10012fc4:	0001883a 	nop
10012fc8:	00001706 	br	10013028 <___vfiprintf_internal_r+0x1270>
10012fcc:	0001883a 	nop
10012fd0:	00001506 	br	10013028 <___vfiprintf_internal_r+0x1270>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
10012fd4:	0001883a 	nop
10012fd8:	00001306 	br	10013028 <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
10012fdc:	0001883a 	nop
10012fe0:	00001106 	br	10013028 <___vfiprintf_internal_r+0x1270>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
10012fe4:	0001883a 	nop
10012fe8:	00000f06 	br	10013028 <___vfiprintf_internal_r+0x1270>
10012fec:	0001883a 	nop
10012ff0:	00000d06 	br	10013028 <___vfiprintf_internal_r+0x1270>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
10012ff4:	0001883a 	nop
10012ff8:	00000b06 	br	10013028 <___vfiprintf_internal_r+0x1270>
10012ffc:	0001883a 	nop
10013000:	00000906 	br	10013028 <___vfiprintf_internal_r+0x1270>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
10013004:	0001883a 	nop
10013008:	00000706 	br	10013028 <___vfiprintf_internal_r+0x1270>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
1001300c:	0001883a 	nop
10013010:	00000506 	br	10013028 <___vfiprintf_internal_r+0x1270>
10013014:	0001883a 	nop
10013018:	00000306 	br	10013028 <___vfiprintf_internal_r+0x1270>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
1001301c:	0001883a 	nop
10013020:	00000106 	br	10013028 <___vfiprintf_internal_r+0x1270>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
10013024:	0001883a 	nop
error:
	if (malloc_buf != NULL)
10013028:	e0bfc317 	ldw	r2,-244(fp)
1001302c:	10000326 	beq	r2,zero,1001303c <___vfiprintf_internal_r+0x1284>
		_free_r (data, malloc_buf);
10013030:	e17fc317 	ldw	r5,-244(fp)
10013034:	e13fe617 	ldw	r4,-104(fp)
10013038:	000dd700 	call	1000dd70 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
1001303c:	e0bfe717 	ldw	r2,-100(fp)
10013040:	1080030b 	ldhu	r2,12(r2)
10013044:	10bfffcc 	andi	r2,r2,65535
10013048:	1080100c 	andi	r2,r2,64
1001304c:	1000021e 	bne	r2,zero,10013058 <___vfiprintf_internal_r+0x12a0>
10013050:	e0bfb917 	ldw	r2,-284(fp)
10013054:	00000206 	br	10013060 <___vfiprintf_internal_r+0x12a8>
10013058:	00bfffc4 	movi	r2,-1
1001305c:	0001883a 	nop
	/* NOTREACHED */
}
10013060:	e6fff804 	addi	sp,fp,-32
10013064:	dfc00917 	ldw	ra,36(sp)
10013068:	df000817 	ldw	fp,32(sp)
1001306c:	ddc00717 	ldw	r23,28(sp)
10013070:	dd800617 	ldw	r22,24(sp)
10013074:	dd400517 	ldw	r21,20(sp)
10013078:	dd000417 	ldw	r20,16(sp)
1001307c:	dcc00317 	ldw	r19,12(sp)
10013080:	dc800217 	ldw	r18,8(sp)
10013084:	dc400117 	ldw	r17,4(sp)
10013088:	dc000017 	ldw	r16,0(sp)
1001308c:	dec00a04 	addi	sp,sp,40
10013090:	f800283a 	ret

10013094 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
10013094:	defff904 	addi	sp,sp,-28
10013098:	dfc00615 	stw	ra,24(sp)
1001309c:	df000515 	stw	fp,20(sp)
100130a0:	dc800415 	stw	r18,16(sp)
100130a4:	dc400315 	stw	r17,12(sp)
100130a8:	dc000215 	stw	r16,8(sp)
100130ac:	df000504 	addi	fp,sp,20
100130b0:	e13ffc15 	stw	r4,-16(fp)
100130b4:	2825883a 	mov	r18,r5
100130b8:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
100130bc:	e0bffc17 	ldw	r2,-16(fp)
100130c0:	e0bffb15 	stw	r2,-20(fp)
100130c4:	e0bffb17 	ldw	r2,-20(fp)
100130c8:	10000526 	beq	r2,zero,100130e0 <__swbuf_r+0x4c>
100130cc:	e0bffb17 	ldw	r2,-20(fp)
100130d0:	10800e17 	ldw	r2,56(r2)
100130d4:	1000021e 	bne	r2,zero,100130e0 <__swbuf_r+0x4c>
100130d8:	e13ffb17 	ldw	r4,-20(fp)
100130dc:	000db400 	call	1000db40 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
100130e0:	80800617 	ldw	r2,24(r16)
100130e4:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
100130e8:	8080030b 	ldhu	r2,12(r16)
100130ec:	10bfffcc 	andi	r2,r2,65535
100130f0:	1080020c 	andi	r2,r2,8
100130f4:	10000226 	beq	r2,zero,10013100 <__swbuf_r+0x6c>
100130f8:	80800417 	ldw	r2,16(r16)
100130fc:	1000061e 	bne	r2,zero,10013118 <__swbuf_r+0x84>
10013100:	800b883a 	mov	r5,r16
10013104:	e13ffc17 	ldw	r4,-16(fp)
10013108:	000b2680 	call	1000b268 <__swsetup_r>
1001310c:	10000226 	beq	r2,zero,10013118 <__swbuf_r+0x84>
    return EOF;
10013110:	00bfffc4 	movi	r2,-1
10013114:	00003106 	br	100131dc <__swbuf_r+0x148>
  c = (unsigned char) c;
10013118:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
1001311c:	8080030b 	ldhu	r2,12(r16)
10013120:	10bfffcc 	andi	r2,r2,65535
10013124:	1088000c 	andi	r2,r2,8192
10013128:	1000071e 	bne	r2,zero,10013148 <__swbuf_r+0xb4>
1001312c:	8080030b 	ldhu	r2,12(r16)
10013130:	10880014 	ori	r2,r2,8192
10013134:	8080030d 	sth	r2,12(r16)
10013138:	80c01917 	ldw	r3,100(r16)
1001313c:	00b7ffc4 	movi	r2,-8193
10013140:	1884703a 	and	r2,r3,r2
10013144:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
10013148:	80800017 	ldw	r2,0(r16)
1001314c:	1007883a 	mov	r3,r2
10013150:	80800417 	ldw	r2,16(r16)
10013154:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
10013158:	80800517 	ldw	r2,20(r16)
1001315c:	88800716 	blt	r17,r2,1001317c <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
10013160:	800b883a 	mov	r5,r16
10013164:	e13ffc17 	ldw	r4,-16(fp)
10013168:	000d6780 	call	1000d678 <_fflush_r>
1001316c:	10000226 	beq	r2,zero,10013178 <__swbuf_r+0xe4>
	return EOF;
10013170:	00bfffc4 	movi	r2,-1
10013174:	00001906 	br	100131dc <__swbuf_r+0x148>
      n = 0;
10013178:	0023883a 	mov	r17,zero
    }
  fp->_w--;
1001317c:	80800217 	ldw	r2,8(r16)
10013180:	10bfffc4 	addi	r2,r2,-1
10013184:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
10013188:	80800017 	ldw	r2,0(r16)
1001318c:	10c00044 	addi	r3,r2,1
10013190:	80c00015 	stw	r3,0(r16)
10013194:	9007883a 	mov	r3,r18
10013198:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
1001319c:	8c400044 	addi	r17,r17,1
100131a0:	80800517 	ldw	r2,20(r16)
100131a4:	88800626 	beq	r17,r2,100131c0 <__swbuf_r+0x12c>
100131a8:	8080030b 	ldhu	r2,12(r16)
100131ac:	10bfffcc 	andi	r2,r2,65535
100131b0:	1080004c 	andi	r2,r2,1
100131b4:	10000826 	beq	r2,zero,100131d8 <__swbuf_r+0x144>
100131b8:	90800298 	cmpnei	r2,r18,10
100131bc:	1000061e 	bne	r2,zero,100131d8 <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
100131c0:	800b883a 	mov	r5,r16
100131c4:	e13ffc17 	ldw	r4,-16(fp)
100131c8:	000d6780 	call	1000d678 <_fflush_r>
100131cc:	10000226 	beq	r2,zero,100131d8 <__swbuf_r+0x144>
      return EOF;
100131d0:	00bfffc4 	movi	r2,-1
100131d4:	00000106 	br	100131dc <__swbuf_r+0x148>
  return c;
100131d8:	9005883a 	mov	r2,r18
}
100131dc:	e6fffd04 	addi	sp,fp,-12
100131e0:	dfc00417 	ldw	ra,16(sp)
100131e4:	df000317 	ldw	fp,12(sp)
100131e8:	dc800217 	ldw	r18,8(sp)
100131ec:	dc400117 	ldw	r17,4(sp)
100131f0:	dc000017 	ldw	r16,0(sp)
100131f4:	dec00504 	addi	sp,sp,20
100131f8:	f800283a 	ret

100131fc <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
100131fc:	defffe04 	addi	sp,sp,-8
10013200:	dfc00115 	stw	ra,4(sp)
10013204:	df000015 	stw	fp,0(sp)
10013208:	d839883a 	mov	fp,sp
1001320c:	2007883a 	mov	r3,r4
10013210:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
10013214:	008403b4 	movhi	r2,4110
10013218:	10a44204 	addi	r2,r2,-28408
1001321c:	10800017 	ldw	r2,0(r2)
10013220:	200d883a 	mov	r6,r4
10013224:	180b883a 	mov	r5,r3
10013228:	1009883a 	mov	r4,r2
1001322c:	00130940 	call	10013094 <__swbuf_r>
}
10013230:	e037883a 	mov	sp,fp
10013234:	dfc00117 	ldw	ra,4(sp)
10013238:	df000017 	ldw	fp,0(sp)
1001323c:	dec00204 	addi	sp,sp,8
10013240:	f800283a 	ret

10013244 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
10013244:	defff904 	addi	sp,sp,-28
10013248:	dfc00615 	stw	ra,24(sp)
1001324c:	df000515 	stw	fp,20(sp)
10013250:	df000504 	addi	fp,sp,20
10013254:	e13ffc15 	stw	r4,-16(fp)
10013258:	e17ffd15 	stw	r5,-12(fp)
1001325c:	e1bffe15 	stw	r6,-8(fp)
10013260:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
10013264:	008403b4 	movhi	r2,4110
10013268:	108a9b04 	addi	r2,r2,10860
1001326c:	10000015 	stw	zero,0(r2)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
10013270:	e1bfff17 	ldw	r6,-4(fp)
10013274:	e17ffe17 	ldw	r5,-8(fp)
10013278:	e13ffd17 	ldw	r4,-12(fp)
1001327c:	00162000 	call	10016200 <write>
10013280:	e0bffb15 	stw	r2,-20(fp)
10013284:	e0bffb17 	ldw	r2,-20(fp)
10013288:	10bfffd8 	cmpnei	r2,r2,-1
1001328c:	1000091e 	bne	r2,zero,100132b4 <_write_r+0x70>
10013290:	008403b4 	movhi	r2,4110
10013294:	108a9b04 	addi	r2,r2,10860
10013298:	10800017 	ldw	r2,0(r2)
1001329c:	10000526 	beq	r2,zero,100132b4 <_write_r+0x70>
    ptr->_errno = errno;
100132a0:	008403b4 	movhi	r2,4110
100132a4:	108a9b04 	addi	r2,r2,10860
100132a8:	10c00017 	ldw	r3,0(r2)
100132ac:	e0bffc17 	ldw	r2,-16(fp)
100132b0:	10c00015 	stw	r3,0(r2)
  return ret;
100132b4:	e0bffb17 	ldw	r2,-20(fp)
}
100132b8:	e037883a 	mov	sp,fp
100132bc:	dfc00117 	ldw	ra,4(sp)
100132c0:	df000017 	ldw	fp,0(sp)
100132c4:	dec00204 	addi	sp,sp,8
100132c8:	f800283a 	ret

100132cc <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
100132cc:	defffb04 	addi	sp,sp,-20
100132d0:	dfc00415 	stw	ra,16(sp)
100132d4:	df000315 	stw	fp,12(sp)
100132d8:	df000304 	addi	fp,sp,12
100132dc:	e13ffe15 	stw	r4,-8(fp)
100132e0:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
100132e4:	008403b4 	movhi	r2,4110
100132e8:	108a9b04 	addi	r2,r2,10860
100132ec:	10000015 	stw	zero,0(r2)
  if ((ret = _close (fd)) == -1 && errno != 0)
100132f0:	e13fff17 	ldw	r4,-4(fp)
100132f4:	001559c0 	call	1001559c <close>
100132f8:	e0bffd15 	stw	r2,-12(fp)
100132fc:	e0bffd17 	ldw	r2,-12(fp)
10013300:	10bfffd8 	cmpnei	r2,r2,-1
10013304:	1000091e 	bne	r2,zero,1001332c <_close_r+0x60>
10013308:	008403b4 	movhi	r2,4110
1001330c:	108a9b04 	addi	r2,r2,10860
10013310:	10800017 	ldw	r2,0(r2)
10013314:	10000526 	beq	r2,zero,1001332c <_close_r+0x60>
    ptr->_errno = errno;
10013318:	008403b4 	movhi	r2,4110
1001331c:	108a9b04 	addi	r2,r2,10860
10013320:	10c00017 	ldw	r3,0(r2)
10013324:	e0bffe17 	ldw	r2,-8(fp)
10013328:	10c00015 	stw	r3,0(r2)
  return ret;
1001332c:	e0bffd17 	ldw	r2,-12(fp)
}
10013330:	e037883a 	mov	sp,fp
10013334:	dfc00117 	ldw	ra,4(sp)
10013338:	df000017 	ldw	fp,0(sp)
1001333c:	dec00204 	addi	sp,sp,8
10013340:	f800283a 	ret

10013344 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
10013344:	defffa04 	addi	sp,sp,-24
10013348:	dfc00515 	stw	ra,20(sp)
1001334c:	df000415 	stw	fp,16(sp)
10013350:	dc000315 	stw	r16,12(sp)
10013354:	df000404 	addi	fp,sp,16
10013358:	e13ffe15 	stw	r4,-8(fp)
1001335c:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
10013360:	8000021e 	bne	r16,zero,1001336c <_fclose_r+0x28>
    return (0);			/* on NULL */
10013364:	0005883a 	mov	r2,zero
10013368:	00003b06 	br	10013458 <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
1001336c:	e0bffe17 	ldw	r2,-8(fp)
10013370:	e0bffd15 	stw	r2,-12(fp)
10013374:	e0bffd17 	ldw	r2,-12(fp)
10013378:	10000526 	beq	r2,zero,10013390 <_fclose_r+0x4c>
1001337c:	e0bffd17 	ldw	r2,-12(fp)
10013380:	10800e17 	ldw	r2,56(r2)
10013384:	1000021e 	bne	r2,zero,10013390 <_fclose_r+0x4c>
10013388:	e13ffd17 	ldw	r4,-12(fp)
1001338c:	000db400 	call	1000db40 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
10013390:	8080030b 	ldhu	r2,12(r16)
10013394:	10bfffcc 	andi	r2,r2,65535
10013398:	10a0001c 	xori	r2,r2,32768
1001339c:	10a00004 	addi	r2,r2,-32768
100133a0:	1000021e 	bne	r2,zero,100133ac <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
100133a4:	0005883a 	mov	r2,zero
100133a8:	00002b06 	br	10013458 <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
100133ac:	800b883a 	mov	r5,r16
100133b0:	e13ffe17 	ldw	r4,-8(fp)
100133b4:	000d3740 	call	1000d374 <__sflush_r>
100133b8:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
100133bc:	80800b17 	ldw	r2,44(r16)
100133c0:	10000826 	beq	r2,zero,100133e4 <_fclose_r+0xa0>
100133c4:	80800b17 	ldw	r2,44(r16)
100133c8:	80c00717 	ldw	r3,28(r16)
100133cc:	180b883a 	mov	r5,r3
100133d0:	e13ffe17 	ldw	r4,-8(fp)
100133d4:	103ee83a 	callr	r2
100133d8:	1000020e 	bge	r2,zero,100133e4 <_fclose_r+0xa0>
    r = EOF;
100133dc:	00bfffc4 	movi	r2,-1
100133e0:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
100133e4:	8080030b 	ldhu	r2,12(r16)
100133e8:	10bfffcc 	andi	r2,r2,65535
100133ec:	1080200c 	andi	r2,r2,128
100133f0:	10000426 	beq	r2,zero,10013404 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
100133f4:	80800417 	ldw	r2,16(r16)
100133f8:	100b883a 	mov	r5,r2
100133fc:	e13ffe17 	ldw	r4,-8(fp)
10013400:	000dd700 	call	1000dd70 <_free_r>
  if (HASUB (fp))
10013404:	80800c17 	ldw	r2,48(r16)
10013408:	10000826 	beq	r2,zero,1001342c <_fclose_r+0xe8>
    FREEUB (rptr, fp);
1001340c:	80c00c17 	ldw	r3,48(r16)
10013410:	80801004 	addi	r2,r16,64
10013414:	18800426 	beq	r3,r2,10013428 <_fclose_r+0xe4>
10013418:	80800c17 	ldw	r2,48(r16)
1001341c:	100b883a 	mov	r5,r2
10013420:	e13ffe17 	ldw	r4,-8(fp)
10013424:	000dd700 	call	1000dd70 <_free_r>
10013428:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
1001342c:	80801117 	ldw	r2,68(r16)
10013430:	10000526 	beq	r2,zero,10013448 <_fclose_r+0x104>
    FREELB (rptr, fp);
10013434:	80801117 	ldw	r2,68(r16)
10013438:	100b883a 	mov	r5,r2
1001343c:	e13ffe17 	ldw	r4,-8(fp)
10013440:	000dd700 	call	1000dd70 <_free_r>
10013444:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
10013448:	000dc180 	call	1000dc18 <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
1001344c:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
10013450:	000dc380 	call	1000dc38 <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
10013454:	e0bffc17 	ldw	r2,-16(fp)
}
10013458:	e6ffff04 	addi	sp,fp,-4
1001345c:	dfc00217 	ldw	ra,8(sp)
10013460:	df000117 	ldw	fp,4(sp)
10013464:	dc000017 	ldw	r16,0(sp)
10013468:	dec00304 	addi	sp,sp,12
1001346c:	f800283a 	ret

10013470 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
10013470:	defffe04 	addi	sp,sp,-8
10013474:	dfc00115 	stw	ra,4(sp)
10013478:	df000015 	stw	fp,0(sp)
1001347c:	d839883a 	mov	fp,sp
10013480:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
10013484:	008403b4 	movhi	r2,4110
10013488:	10a44204 	addi	r2,r2,-28408
1001348c:	10800017 	ldw	r2,0(r2)
10013490:	180b883a 	mov	r5,r3
10013494:	1009883a 	mov	r4,r2
10013498:	00133440 	call	10013344 <_fclose_r>
}
1001349c:	e037883a 	mov	sp,fp
100134a0:	dfc00117 	ldw	ra,4(sp)
100134a4:	df000017 	ldw	fp,0(sp)
100134a8:	dec00204 	addi	sp,sp,8
100134ac:	f800283a 	ret

100134b0 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
100134b0:	defff804 	addi	sp,sp,-32
100134b4:	dfc00715 	stw	ra,28(sp)
100134b8:	df000615 	stw	fp,24(sp)
100134bc:	df000604 	addi	fp,sp,24
100134c0:	e13ffd15 	stw	r4,-12(fp)
100134c4:	e17ffe15 	stw	r5,-8(fp)
100134c8:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
100134cc:	000ed7c0 	call	1000ed7c <__locale_mb_cur_max>
100134d0:	10800058 	cmpnei	r2,r2,1
100134d4:	10000a1e 	bne	r2,zero,10013500 <__fputwc+0x50>
100134d8:	e0bffe17 	ldw	r2,-8(fp)
100134dc:	0080080e 	bge	zero,r2,10013500 <__fputwc+0x50>
100134e0:	e0bffe17 	ldw	r2,-8(fp)
100134e4:	10804008 	cmpgei	r2,r2,256
100134e8:	1000051e 	bne	r2,zero,10013500 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
100134ec:	e0bffe17 	ldw	r2,-8(fp)
100134f0:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
100134f4:	00800044 	movi	r2,1
100134f8:	e0bffb15 	stw	r2,-20(fp)
100134fc:	00001406 	br	10013550 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
10013500:	e0bfff17 	ldw	r2,-4(fp)
10013504:	10c01704 	addi	r3,r2,92
10013508:	e0bffc04 	addi	r2,fp,-16
1001350c:	180f883a 	mov	r7,r3
10013510:	e1bffe17 	ldw	r6,-8(fp)
10013514:	100b883a 	mov	r5,r2
10013518:	e13ffd17 	ldw	r4,-12(fp)
1001351c:	00139a40 	call	100139a4 <_wcrtomb_r>
10013520:	e0bffb15 	stw	r2,-20(fp)
10013524:	e0bffb17 	ldw	r2,-20(fp)
10013528:	10bfffd8 	cmpnei	r2,r2,-1
1001352c:	1000081e 	bne	r2,zero,10013550 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
10013530:	e0bfff17 	ldw	r2,-4(fp)
10013534:	1080030b 	ldhu	r2,12(r2)
10013538:	10801014 	ori	r2,r2,64
1001353c:	1007883a 	mov	r3,r2
10013540:	e0bfff17 	ldw	r2,-4(fp)
10013544:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
10013548:	00bfffc4 	movi	r2,-1
1001354c:	00005006 	br	10013690 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
10013550:	e03ffa15 	stw	zero,-24(fp)
10013554:	00004a06 	br	10013680 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
10013558:	e0bfff17 	ldw	r2,-4(fp)
1001355c:	10800217 	ldw	r2,8(r2)
10013560:	10ffffc4 	addi	r3,r2,-1
10013564:	e0bfff17 	ldw	r2,-4(fp)
10013568:	10c00215 	stw	r3,8(r2)
1001356c:	e0bfff17 	ldw	r2,-4(fp)
10013570:	10800217 	ldw	r2,8(r2)
10013574:	10002c0e 	bge	r2,zero,10013628 <__fputwc+0x178>
10013578:	e0bfff17 	ldw	r2,-4(fp)
1001357c:	10c00217 	ldw	r3,8(r2)
10013580:	e0bfff17 	ldw	r2,-4(fp)
10013584:	10800617 	ldw	r2,24(r2)
10013588:	18801c16 	blt	r3,r2,100135fc <__fputwc+0x14c>
1001358c:	e0bfff17 	ldw	r2,-4(fp)
10013590:	10800017 	ldw	r2,0(r2)
10013594:	e13ffc04 	addi	r4,fp,-16
10013598:	e0fffa17 	ldw	r3,-24(fp)
1001359c:	20c7883a 	add	r3,r4,r3
100135a0:	18c00003 	ldbu	r3,0(r3)
100135a4:	10c00005 	stb	r3,0(r2)
100135a8:	e0bfff17 	ldw	r2,-4(fp)
100135ac:	10800017 	ldw	r2,0(r2)
100135b0:	10800003 	ldbu	r2,0(r2)
100135b4:	10803fcc 	andi	r2,r2,255
100135b8:	108002a0 	cmpeqi	r2,r2,10
100135bc:	1000091e 	bne	r2,zero,100135e4 <__fputwc+0x134>
100135c0:	e0bfff17 	ldw	r2,-4(fp)
100135c4:	10800017 	ldw	r2,0(r2)
100135c8:	11000044 	addi	r4,r2,1
100135cc:	e0ffff17 	ldw	r3,-4(fp)
100135d0:	19000015 	stw	r4,0(r3)
100135d4:	10800003 	ldbu	r2,0(r2)
100135d8:	10803fcc 	andi	r2,r2,255
100135dc:	10bfffe0 	cmpeqi	r2,r2,-1
100135e0:	00002006 	br	10013664 <__fputwc+0x1b4>
100135e4:	e1bfff17 	ldw	r6,-4(fp)
100135e8:	01400284 	movi	r5,10
100135ec:	e13ffd17 	ldw	r4,-12(fp)
100135f0:	00130940 	call	10013094 <__swbuf_r>
100135f4:	10bfffe0 	cmpeqi	r2,r2,-1
100135f8:	00001a06 	br	10013664 <__fputwc+0x1b4>
100135fc:	e0fffc04 	addi	r3,fp,-16
10013600:	e0bffa17 	ldw	r2,-24(fp)
10013604:	1885883a 	add	r2,r3,r2
10013608:	10800003 	ldbu	r2,0(r2)
1001360c:	10803fcc 	andi	r2,r2,255
10013610:	e1bfff17 	ldw	r6,-4(fp)
10013614:	100b883a 	mov	r5,r2
10013618:	e13ffd17 	ldw	r4,-12(fp)
1001361c:	00130940 	call	10013094 <__swbuf_r>
10013620:	10bfffe0 	cmpeqi	r2,r2,-1
10013624:	00000f06 	br	10013664 <__fputwc+0x1b4>
10013628:	e0bfff17 	ldw	r2,-4(fp)
1001362c:	10800017 	ldw	r2,0(r2)
10013630:	e13ffc04 	addi	r4,fp,-16
10013634:	e0fffa17 	ldw	r3,-24(fp)
10013638:	20c7883a 	add	r3,r4,r3
1001363c:	18c00003 	ldbu	r3,0(r3)
10013640:	10c00005 	stb	r3,0(r2)
10013644:	e0bfff17 	ldw	r2,-4(fp)
10013648:	10800017 	ldw	r2,0(r2)
1001364c:	11000044 	addi	r4,r2,1
10013650:	e0ffff17 	ldw	r3,-4(fp)
10013654:	19000015 	stw	r4,0(r3)
10013658:	10800003 	ldbu	r2,0(r2)
1001365c:	10803fcc 	andi	r2,r2,255
10013660:	10bfffe0 	cmpeqi	r2,r2,-1
10013664:	10803fcc 	andi	r2,r2,255
10013668:	10000226 	beq	r2,zero,10013674 <__fputwc+0x1c4>
      return WEOF;
1001366c:	00bfffc4 	movi	r2,-1
10013670:	00000706 	br	10013690 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
10013674:	e0bffa17 	ldw	r2,-24(fp)
10013678:	10800044 	addi	r2,r2,1
1001367c:	e0bffa15 	stw	r2,-24(fp)
10013680:	e0fffa17 	ldw	r3,-24(fp)
10013684:	e0bffb17 	ldw	r2,-20(fp)
10013688:	18bfb336 	bltu	r3,r2,10013558 <__alt_data_end+0xf8013558>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
1001368c:	e0bffe17 	ldw	r2,-8(fp)
}
10013690:	e037883a 	mov	sp,fp
10013694:	dfc00117 	ldw	ra,4(sp)
10013698:	df000017 	ldw	fp,0(sp)
1001369c:	dec00204 	addi	sp,sp,8
100136a0:	f800283a 	ret

100136a4 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
100136a4:	defffa04 	addi	sp,sp,-24
100136a8:	dfc00515 	stw	ra,20(sp)
100136ac:	df000415 	stw	fp,16(sp)
100136b0:	df000404 	addi	fp,sp,16
100136b4:	e13ffd15 	stw	r4,-12(fp)
100136b8:	e17ffe15 	stw	r5,-8(fp)
100136bc:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
100136c0:	e0bfff17 	ldw	r2,-4(fp)
100136c4:	1080030b 	ldhu	r2,12(r2)
100136c8:	10bfffcc 	andi	r2,r2,65535
100136cc:	1088000c 	andi	r2,r2,8192
100136d0:	10000b1e 	bne	r2,zero,10013700 <_fputwc_r+0x5c>
100136d4:	e0bfff17 	ldw	r2,-4(fp)
100136d8:	1080030b 	ldhu	r2,12(r2)
100136dc:	10880014 	ori	r2,r2,8192
100136e0:	1007883a 	mov	r3,r2
100136e4:	e0bfff17 	ldw	r2,-4(fp)
100136e8:	10c0030d 	sth	r3,12(r2)
100136ec:	e0bfff17 	ldw	r2,-4(fp)
100136f0:	10801917 	ldw	r2,100(r2)
100136f4:	10c80014 	ori	r3,r2,8192
100136f8:	e0bfff17 	ldw	r2,-4(fp)
100136fc:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
10013700:	e1bfff17 	ldw	r6,-4(fp)
10013704:	e17ffe17 	ldw	r5,-8(fp)
10013708:	e13ffd17 	ldw	r4,-12(fp)
1001370c:	00134b00 	call	100134b0 <__fputwc>
10013710:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
10013714:	e0bffc17 	ldw	r2,-16(fp)
}
10013718:	e037883a 	mov	sp,fp
1001371c:	dfc00117 	ldw	ra,4(sp)
10013720:	df000017 	ldw	fp,0(sp)
10013724:	dec00204 	addi	sp,sp,8
10013728:	f800283a 	ret

1001372c <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
1001372c:	defffa04 	addi	sp,sp,-24
10013730:	dfc00515 	stw	ra,20(sp)
10013734:	df000415 	stw	fp,16(sp)
10013738:	df000404 	addi	fp,sp,16
1001373c:	e13ffe15 	stw	r4,-8(fp)
10013740:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
10013744:	008403b4 	movhi	r2,4110
10013748:	10a44204 	addi	r2,r2,-28408
1001374c:	10800017 	ldw	r2,0(r2)
10013750:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
10013754:	e0bffc17 	ldw	r2,-16(fp)
10013758:	e0bffd15 	stw	r2,-12(fp)
1001375c:	e0bffd17 	ldw	r2,-12(fp)
10013760:	10000526 	beq	r2,zero,10013778 <fputwc+0x4c>
10013764:	e0bffd17 	ldw	r2,-12(fp)
10013768:	10800e17 	ldw	r2,56(r2)
1001376c:	1000021e 	bne	r2,zero,10013778 <fputwc+0x4c>
10013770:	e13ffd17 	ldw	r4,-12(fp)
10013774:	000db400 	call	1000db40 <__sinit>
  return _fputwc_r (reent, wc, fp);
10013778:	e1bfff17 	ldw	r6,-4(fp)
1001377c:	e17ffe17 	ldw	r5,-8(fp)
10013780:	e13ffc17 	ldw	r4,-16(fp)
10013784:	00136a40 	call	100136a4 <_fputwc_r>
}
10013788:	e037883a 	mov	sp,fp
1001378c:	dfc00117 	ldw	ra,4(sp)
10013790:	df000017 	ldw	fp,0(sp)
10013794:	dec00204 	addi	sp,sp,8
10013798:	f800283a 	ret

1001379c <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
1001379c:	defffa04 	addi	sp,sp,-24
100137a0:	dfc00515 	stw	ra,20(sp)
100137a4:	df000415 	stw	fp,16(sp)
100137a8:	df000404 	addi	fp,sp,16
100137ac:	e13ffd15 	stw	r4,-12(fp)
100137b0:	e17ffe15 	stw	r5,-8(fp)
100137b4:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
100137b8:	008403b4 	movhi	r2,4110
100137bc:	108a9b04 	addi	r2,r2,10860
100137c0:	10000015 	stw	zero,0(r2)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
100137c4:	e17fff17 	ldw	r5,-4(fp)
100137c8:	e13ffe17 	ldw	r4,-8(fp)
100137cc:	00156f00 	call	100156f0 <fstat>
100137d0:	e0bffc15 	stw	r2,-16(fp)
100137d4:	e0bffc17 	ldw	r2,-16(fp)
100137d8:	10bfffd8 	cmpnei	r2,r2,-1
100137dc:	1000091e 	bne	r2,zero,10013804 <_fstat_r+0x68>
100137e0:	008403b4 	movhi	r2,4110
100137e4:	108a9b04 	addi	r2,r2,10860
100137e8:	10800017 	ldw	r2,0(r2)
100137ec:	10000526 	beq	r2,zero,10013804 <_fstat_r+0x68>
    ptr->_errno = errno;
100137f0:	008403b4 	movhi	r2,4110
100137f4:	108a9b04 	addi	r2,r2,10860
100137f8:	10c00017 	ldw	r3,0(r2)
100137fc:	e0bffd17 	ldw	r2,-12(fp)
10013800:	10c00015 	stw	r3,0(r2)
  return ret;
10013804:	e0bffc17 	ldw	r2,-16(fp)
}
10013808:	e037883a 	mov	sp,fp
1001380c:	dfc00117 	ldw	ra,4(sp)
10013810:	df000017 	ldw	fp,0(sp)
10013814:	dec00204 	addi	sp,sp,8
10013818:	f800283a 	ret

1001381c <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
1001381c:	defffb04 	addi	sp,sp,-20
10013820:	dfc00415 	stw	ra,16(sp)
10013824:	df000315 	stw	fp,12(sp)
10013828:	df000304 	addi	fp,sp,12
1001382c:	e13ffe15 	stw	r4,-8(fp)
10013830:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
10013834:	008403b4 	movhi	r2,4110
10013838:	108a9b04 	addi	r2,r2,10860
1001383c:	10000015 	stw	zero,0(r2)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
10013840:	e13fff17 	ldw	r4,-4(fp)
10013844:	00159fc0 	call	100159fc <isatty>
10013848:	e0bffd15 	stw	r2,-12(fp)
1001384c:	e0bffd17 	ldw	r2,-12(fp)
10013850:	10bfffd8 	cmpnei	r2,r2,-1
10013854:	1000091e 	bne	r2,zero,1001387c <_isatty_r+0x60>
10013858:	008403b4 	movhi	r2,4110
1001385c:	108a9b04 	addi	r2,r2,10860
10013860:	10800017 	ldw	r2,0(r2)
10013864:	10000526 	beq	r2,zero,1001387c <_isatty_r+0x60>
    ptr->_errno = errno;
10013868:	008403b4 	movhi	r2,4110
1001386c:	108a9b04 	addi	r2,r2,10860
10013870:	10c00017 	ldw	r3,0(r2)
10013874:	e0bffe17 	ldw	r2,-8(fp)
10013878:	10c00015 	stw	r3,0(r2)
  return ret;
1001387c:	e0bffd17 	ldw	r2,-12(fp)
}
10013880:	e037883a 	mov	sp,fp
10013884:	dfc00117 	ldw	ra,4(sp)
10013888:	df000017 	ldw	fp,0(sp)
1001388c:	dec00204 	addi	sp,sp,8
10013890:	f800283a 	ret

10013894 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
10013894:	defff904 	addi	sp,sp,-28
10013898:	dfc00615 	stw	ra,24(sp)
1001389c:	df000515 	stw	fp,20(sp)
100138a0:	df000504 	addi	fp,sp,20
100138a4:	e13ffc15 	stw	r4,-16(fp)
100138a8:	e17ffd15 	stw	r5,-12(fp)
100138ac:	e1bffe15 	stw	r6,-8(fp)
100138b0:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
100138b4:	008403b4 	movhi	r2,4110
100138b8:	108a9b04 	addi	r2,r2,10860
100138bc:	10000015 	stw	zero,0(r2)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
100138c0:	e1bfff17 	ldw	r6,-4(fp)
100138c4:	e17ffe17 	ldw	r5,-8(fp)
100138c8:	e13ffd17 	ldw	r4,-12(fp)
100138cc:	0015be40 	call	10015be4 <lseek>
100138d0:	e0bffb15 	stw	r2,-20(fp)
100138d4:	e0bffb17 	ldw	r2,-20(fp)
100138d8:	10bfffd8 	cmpnei	r2,r2,-1
100138dc:	1000091e 	bne	r2,zero,10013904 <_lseek_r+0x70>
100138e0:	008403b4 	movhi	r2,4110
100138e4:	108a9b04 	addi	r2,r2,10860
100138e8:	10800017 	ldw	r2,0(r2)
100138ec:	10000526 	beq	r2,zero,10013904 <_lseek_r+0x70>
    ptr->_errno = errno;
100138f0:	008403b4 	movhi	r2,4110
100138f4:	108a9b04 	addi	r2,r2,10860
100138f8:	10c00017 	ldw	r3,0(r2)
100138fc:	e0bffc17 	ldw	r2,-16(fp)
10013900:	10c00015 	stw	r3,0(r2)
  return ret;
10013904:	e0bffb17 	ldw	r2,-20(fp)
}
10013908:	e037883a 	mov	sp,fp
1001390c:	dfc00117 	ldw	ra,4(sp)
10013910:	df000017 	ldw	fp,0(sp)
10013914:	dec00204 	addi	sp,sp,8
10013918:	f800283a 	ret

1001391c <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
1001391c:	defff904 	addi	sp,sp,-28
10013920:	dfc00615 	stw	ra,24(sp)
10013924:	df000515 	stw	fp,20(sp)
10013928:	df000504 	addi	fp,sp,20
1001392c:	e13ffc15 	stw	r4,-16(fp)
10013930:	e17ffd15 	stw	r5,-12(fp)
10013934:	e1bffe15 	stw	r6,-8(fp)
10013938:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
1001393c:	008403b4 	movhi	r2,4110
10013940:	108a9b04 	addi	r2,r2,10860
10013944:	10000015 	stw	zero,0(r2)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
10013948:	e1bfff17 	ldw	r6,-4(fp)
1001394c:	e17ffe17 	ldw	r5,-8(fp)
10013950:	e13ffd17 	ldw	r4,-12(fp)
10013954:	0015dd40 	call	10015dd4 <read>
10013958:	e0bffb15 	stw	r2,-20(fp)
1001395c:	e0bffb17 	ldw	r2,-20(fp)
10013960:	10bfffd8 	cmpnei	r2,r2,-1
10013964:	1000091e 	bne	r2,zero,1001398c <_read_r+0x70>
10013968:	008403b4 	movhi	r2,4110
1001396c:	108a9b04 	addi	r2,r2,10860
10013970:	10800017 	ldw	r2,0(r2)
10013974:	10000526 	beq	r2,zero,1001398c <_read_r+0x70>
    ptr->_errno = errno;
10013978:	008403b4 	movhi	r2,4110
1001397c:	108a9b04 	addi	r2,r2,10860
10013980:	10c00017 	ldw	r3,0(r2)
10013984:	e0bffc17 	ldw	r2,-16(fp)
10013988:	10c00015 	stw	r3,0(r2)
  return ret;
1001398c:	e0bffb17 	ldw	r2,-20(fp)
}
10013990:	e037883a 	mov	sp,fp
10013994:	dfc00117 	ldw	ra,4(sp)
10013998:	df000017 	ldw	fp,0(sp)
1001399c:	dec00204 	addi	sp,sp,8
100139a0:	f800283a 	ret

100139a4 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
100139a4:	defff404 	addi	sp,sp,-48
100139a8:	dfc00b15 	stw	ra,44(sp)
100139ac:	df000a15 	stw	fp,40(sp)
100139b0:	dc000915 	stw	r16,36(sp)
100139b4:	df000a04 	addi	fp,sp,40
100139b8:	e13ffb15 	stw	r4,-20(fp)
100139bc:	e17ffc15 	stw	r5,-16(fp)
100139c0:	e1bffd15 	stw	r6,-12(fp)
100139c4:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
100139c8:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
100139cc:	e0bffc17 	ldw	r2,-16(fp)
100139d0:	10000f1e 	bne	r2,zero,10013a10 <_wcrtomb_r+0x6c>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
100139d4:	008403b4 	movhi	r2,4110
100139d8:	10a45004 	addi	r2,r2,-28352
100139dc:	14000017 	ldw	r16,0(r2)
100139e0:	000ed580 	call	1000ed58 <__locale_charset>
100139e4:	1009883a 	mov	r4,r2
100139e8:	e0fff804 	addi	r3,fp,-32
100139ec:	e0bffe17 	ldw	r2,-8(fp)
100139f0:	d8800015 	stw	r2,0(sp)
100139f4:	200f883a 	mov	r7,r4
100139f8:	000d883a 	mov	r6,zero
100139fc:	180b883a 	mov	r5,r3
10013a00:	e13ffb17 	ldw	r4,-20(fp)
10013a04:	803ee83a 	callr	r16
10013a08:	e0bff715 	stw	r2,-36(fp)
10013a0c:	00000d06 	br	10013a44 <_wcrtomb_r+0xa0>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
10013a10:	008403b4 	movhi	r2,4110
10013a14:	10a45004 	addi	r2,r2,-28352
10013a18:	14000017 	ldw	r16,0(r2)
10013a1c:	000ed580 	call	1000ed58 <__locale_charset>
10013a20:	1007883a 	mov	r3,r2
10013a24:	e0bffe17 	ldw	r2,-8(fp)
10013a28:	d8800015 	stw	r2,0(sp)
10013a2c:	180f883a 	mov	r7,r3
10013a30:	e1bffd17 	ldw	r6,-12(fp)
10013a34:	e17ffc17 	ldw	r5,-16(fp)
10013a38:	e13ffb17 	ldw	r4,-20(fp)
10013a3c:	803ee83a 	callr	r16
10013a40:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
10013a44:	e0bff717 	ldw	r2,-36(fp)
10013a48:	10bfffd8 	cmpnei	r2,r2,-1
10013a4c:	1000071e 	bne	r2,zero,10013a6c <_wcrtomb_r+0xc8>
    {
      ps->__count = 0;
10013a50:	e0bffe17 	ldw	r2,-8(fp)
10013a54:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
10013a58:	e0bffb17 	ldw	r2,-20(fp)
10013a5c:	00c02284 	movi	r3,138
10013a60:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
10013a64:	00bfffc4 	movi	r2,-1
10013a68:	00000106 	br	10013a70 <_wcrtomb_r+0xcc>
    }
  else
    return (size_t)retval;
10013a6c:	e0bff717 	ldw	r2,-36(fp)
}
10013a70:	e6ffff04 	addi	sp,fp,-4
10013a74:	dfc00217 	ldw	ra,8(sp)
10013a78:	df000117 	ldw	fp,4(sp)
10013a7c:	dc000017 	ldw	r16,0(sp)
10013a80:	dec00304 	addi	sp,sp,12
10013a84:	f800283a 	ret

10013a88 <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
10013a88:	defff404 	addi	sp,sp,-48
10013a8c:	dfc00b15 	stw	ra,44(sp)
10013a90:	df000a15 	stw	fp,40(sp)
10013a94:	dc000915 	stw	r16,36(sp)
10013a98:	df000a04 	addi	fp,sp,40
10013a9c:	e13ffc15 	stw	r4,-16(fp)
10013aa0:	e17ffd15 	stw	r5,-12(fp)
10013aa4:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
10013aa8:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
10013aac:	008403b4 	movhi	r2,4110
10013ab0:	10a44204 	addi	r2,r2,-28408
10013ab4:	10800017 	ldw	r2,0(r2)
10013ab8:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
10013abc:	e0bffc17 	ldw	r2,-16(fp)
10013ac0:	10000f1e 	bne	r2,zero,10013b00 <wcrtomb+0x78>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
10013ac4:	008403b4 	movhi	r2,4110
10013ac8:	10a45004 	addi	r2,r2,-28352
10013acc:	14000017 	ldw	r16,0(r2)
10013ad0:	000ed580 	call	1000ed58 <__locale_charset>
10013ad4:	1009883a 	mov	r4,r2
10013ad8:	e0fff904 	addi	r3,fp,-28
10013adc:	e0bffe17 	ldw	r2,-8(fp)
10013ae0:	d8800015 	stw	r2,0(sp)
10013ae4:	200f883a 	mov	r7,r4
10013ae8:	000d883a 	mov	r6,zero
10013aec:	180b883a 	mov	r5,r3
10013af0:	e13ff817 	ldw	r4,-32(fp)
10013af4:	803ee83a 	callr	r16
10013af8:	e0bff715 	stw	r2,-36(fp)
10013afc:	00000d06 	br	10013b34 <wcrtomb+0xac>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
10013b00:	008403b4 	movhi	r2,4110
10013b04:	10a45004 	addi	r2,r2,-28352
10013b08:	14000017 	ldw	r16,0(r2)
10013b0c:	000ed580 	call	1000ed58 <__locale_charset>
10013b10:	1007883a 	mov	r3,r2
10013b14:	e0bffe17 	ldw	r2,-8(fp)
10013b18:	d8800015 	stw	r2,0(sp)
10013b1c:	180f883a 	mov	r7,r3
10013b20:	e1bffd17 	ldw	r6,-12(fp)
10013b24:	e17ffc17 	ldw	r5,-16(fp)
10013b28:	e13ff817 	ldw	r4,-32(fp)
10013b2c:	803ee83a 	callr	r16
10013b30:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
10013b34:	e0bff717 	ldw	r2,-36(fp)
10013b38:	10bfffd8 	cmpnei	r2,r2,-1
10013b3c:	1000071e 	bne	r2,zero,10013b5c <wcrtomb+0xd4>
    {
      ps->__count = 0;
10013b40:	e0bffe17 	ldw	r2,-8(fp)
10013b44:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
10013b48:	e0bff817 	ldw	r2,-32(fp)
10013b4c:	00c02284 	movi	r3,138
10013b50:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
10013b54:	00bfffc4 	movi	r2,-1
10013b58:	00000106 	br	10013b60 <wcrtomb+0xd8>
    }
  else
    return (size_t)retval;
10013b5c:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10013b60:	e6ffff04 	addi	sp,fp,-4
10013b64:	dfc00217 	ldw	ra,8(sp)
10013b68:	df000117 	ldw	fp,4(sp)
10013b6c:	dc000017 	ldw	r16,0(sp)
10013b70:	dec00304 	addi	sp,sp,12
10013b74:	f800283a 	ret

10013b78 <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
10013b78:	defff804 	addi	sp,sp,-32
10013b7c:	dfc00715 	stw	ra,28(sp)
10013b80:	df000615 	stw	fp,24(sp)
10013b84:	dc000515 	stw	r16,20(sp)
10013b88:	df000604 	addi	fp,sp,24
10013b8c:	e13ffb15 	stw	r4,-20(fp)
10013b90:	e17ffc15 	stw	r5,-16(fp)
10013b94:	e1bffd15 	stw	r6,-12(fp)
10013b98:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
10013b9c:	d4201417 	ldw	r16,-32688(gp)
10013ba0:	000ed580 	call	1000ed58 <__locale_charset>
10013ba4:	1007883a 	mov	r3,r2
10013ba8:	e0bffe17 	ldw	r2,-8(fp)
10013bac:	d8800015 	stw	r2,0(sp)
10013bb0:	180f883a 	mov	r7,r3
10013bb4:	e1bffd17 	ldw	r6,-12(fp)
10013bb8:	e17ffc17 	ldw	r5,-16(fp)
10013bbc:	e13ffb17 	ldw	r4,-20(fp)
10013bc0:	803ee83a 	callr	r16
}
10013bc4:	e6ffff04 	addi	sp,fp,-4
10013bc8:	dfc00217 	ldw	ra,8(sp)
10013bcc:	df000117 	ldw	fp,4(sp)
10013bd0:	dc000017 	ldw	r16,0(sp)
10013bd4:	dec00304 	addi	sp,sp,12
10013bd8:	f800283a 	ret

10013bdc <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
10013bdc:	defffa04 	addi	sp,sp,-24
10013be0:	df000515 	stw	fp,20(sp)
10013be4:	df000504 	addi	fp,sp,20
10013be8:	e13ffc15 	stw	r4,-16(fp)
10013bec:	e17ffd15 	stw	r5,-12(fp)
10013bf0:	e1bffe15 	stw	r6,-8(fp)
10013bf4:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
10013bf8:	e0bffe17 	ldw	r2,-8(fp)
10013bfc:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
10013c00:	e0bffd17 	ldw	r2,-12(fp)
10013c04:	1000021e 	bne	r2,zero,10013c10 <__ascii_wctomb+0x34>
    return 0;
10013c08:	0005883a 	mov	r2,zero
10013c0c:	00000d06 	br	10013c44 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
10013c10:	e0bffb17 	ldw	r2,-20(fp)
10013c14:	10804030 	cmpltui	r2,r2,256
10013c18:	1000051e 	bne	r2,zero,10013c30 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
10013c1c:	e0bffc17 	ldw	r2,-16(fp)
10013c20:	00c02284 	movi	r3,138
10013c24:	10c00015 	stw	r3,0(r2)
      return -1;
10013c28:	00bfffc4 	movi	r2,-1
10013c2c:	00000506 	br	10013c44 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
10013c30:	e0bffb17 	ldw	r2,-20(fp)
10013c34:	1007883a 	mov	r3,r2
10013c38:	e0bffd17 	ldw	r2,-12(fp)
10013c3c:	10c00005 	stb	r3,0(r2)
  return 1;
10013c40:	00800044 	movi	r2,1
}
10013c44:	e037883a 	mov	sp,fp
10013c48:	df000017 	ldw	fp,0(sp)
10013c4c:	dec00104 	addi	sp,sp,4
10013c50:	f800283a 	ret

10013c54 <__udivdi3>:
10013c54:	defff404 	addi	sp,sp,-48
10013c58:	dcc00515 	stw	r19,20(sp)
10013c5c:	dc000215 	stw	r16,8(sp)
10013c60:	dfc00b15 	stw	ra,44(sp)
10013c64:	df000a15 	stw	fp,40(sp)
10013c68:	ddc00915 	stw	r23,36(sp)
10013c6c:	dd800815 	stw	r22,32(sp)
10013c70:	dd400715 	stw	r21,28(sp)
10013c74:	dd000615 	stw	r20,24(sp)
10013c78:	dc800415 	stw	r18,16(sp)
10013c7c:	dc400315 	stw	r17,12(sp)
10013c80:	2027883a 	mov	r19,r4
10013c84:	2821883a 	mov	r16,r5
10013c88:	3800461e 	bne	r7,zero,10013da4 <__udivdi3+0x150>
10013c8c:	3023883a 	mov	r17,r6
10013c90:	2025883a 	mov	r18,r4
10013c94:	2980572e 	bgeu	r5,r6,10013df4 <__udivdi3+0x1a0>
10013c98:	00bfffd4 	movui	r2,65535
10013c9c:	282d883a 	mov	r22,r5
10013ca0:	1180b236 	bltu	r2,r6,10013f6c <__udivdi3+0x318>
10013ca4:	00803fc4 	movi	r2,255
10013ca8:	1185803a 	cmpltu	r2,r2,r6
10013cac:	100490fa 	slli	r2,r2,3
10013cb0:	3086d83a 	srl	r3,r6,r2
10013cb4:	01040374 	movhi	r4,4109
10013cb8:	213cc704 	addi	r4,r4,-3300
10013cbc:	20c7883a 	add	r3,r4,r3
10013cc0:	18c00003 	ldbu	r3,0(r3)
10013cc4:	1885883a 	add	r2,r3,r2
10013cc8:	00c00804 	movi	r3,32
10013ccc:	1887c83a 	sub	r3,r3,r2
10013cd0:	18000526 	beq	r3,zero,10013ce8 <__udivdi3+0x94>
10013cd4:	80e0983a 	sll	r16,r16,r3
10013cd8:	9884d83a 	srl	r2,r19,r2
10013cdc:	30e2983a 	sll	r17,r6,r3
10013ce0:	98e4983a 	sll	r18,r19,r3
10013ce4:	142cb03a 	or	r22,r2,r16
10013ce8:	882ad43a 	srli	r21,r17,16
10013cec:	b009883a 	mov	r4,r22
10013cf0:	8d3fffcc 	andi	r20,r17,65535
10013cf4:	a80b883a 	mov	r5,r21
10013cf8:	00024c00 	call	100024c0 <__umodsi3>
10013cfc:	b009883a 	mov	r4,r22
10013d00:	a80b883a 	mov	r5,r21
10013d04:	1027883a 	mov	r19,r2
10013d08:	000245c0 	call	1000245c <__udivsi3>
10013d0c:	100b883a 	mov	r5,r2
10013d10:	a009883a 	mov	r4,r20
10013d14:	102d883a 	mov	r22,r2
10013d18:	00059d40 	call	100059d4 <__mulsi3>
10013d1c:	9826943a 	slli	r19,r19,16
10013d20:	9006d43a 	srli	r3,r18,16
10013d24:	1cc6b03a 	or	r3,r3,r19
10013d28:	1880052e 	bgeu	r3,r2,10013d40 <__udivdi3+0xec>
10013d2c:	1c47883a 	add	r3,r3,r17
10013d30:	b13fffc4 	addi	r4,r22,-1
10013d34:	1c400136 	bltu	r3,r17,10013d3c <__udivdi3+0xe8>
10013d38:	18814236 	bltu	r3,r2,10014244 <__udivdi3+0x5f0>
10013d3c:	202d883a 	mov	r22,r4
10013d40:	18a1c83a 	sub	r16,r3,r2
10013d44:	8009883a 	mov	r4,r16
10013d48:	a80b883a 	mov	r5,r21
10013d4c:	00024c00 	call	100024c0 <__umodsi3>
10013d50:	1027883a 	mov	r19,r2
10013d54:	8009883a 	mov	r4,r16
10013d58:	a80b883a 	mov	r5,r21
10013d5c:	9826943a 	slli	r19,r19,16
10013d60:	000245c0 	call	1000245c <__udivsi3>
10013d64:	100b883a 	mov	r5,r2
10013d68:	a009883a 	mov	r4,r20
10013d6c:	94bfffcc 	andi	r18,r18,65535
10013d70:	1021883a 	mov	r16,r2
10013d74:	94e4b03a 	or	r18,r18,r19
10013d78:	00059d40 	call	100059d4 <__mulsi3>
10013d7c:	9080052e 	bgeu	r18,r2,10013d94 <__udivdi3+0x140>
10013d80:	8ca5883a 	add	r18,r17,r18
10013d84:	80ffffc4 	addi	r3,r16,-1
10013d88:	94410c36 	bltu	r18,r17,100141bc <__udivdi3+0x568>
10013d8c:	90810b2e 	bgeu	r18,r2,100141bc <__udivdi3+0x568>
10013d90:	843fff84 	addi	r16,r16,-2
10013d94:	b004943a 	slli	r2,r22,16
10013d98:	0007883a 	mov	r3,zero
10013d9c:	1404b03a 	or	r2,r2,r16
10013da0:	00005e06 	br	10013f1c <__udivdi3+0x2c8>
10013da4:	29c05b36 	bltu	r5,r7,10013f14 <__udivdi3+0x2c0>
10013da8:	00bfffd4 	movui	r2,65535
10013dac:	11c0672e 	bgeu	r2,r7,10013f4c <__udivdi3+0x2f8>
10013db0:	00804034 	movhi	r2,256
10013db4:	10bfffc4 	addi	r2,r2,-1
10013db8:	11c10a36 	bltu	r2,r7,100141e4 <__udivdi3+0x590>
10013dbc:	00800404 	movi	r2,16
10013dc0:	3886d83a 	srl	r3,r7,r2
10013dc4:	01040374 	movhi	r4,4109
10013dc8:	213cc704 	addi	r4,r4,-3300
10013dcc:	20c7883a 	add	r3,r4,r3
10013dd0:	18c00003 	ldbu	r3,0(r3)
10013dd4:	05c00804 	movi	r23,32
10013dd8:	1885883a 	add	r2,r3,r2
10013ddc:	b8afc83a 	sub	r23,r23,r2
10013de0:	b800671e 	bne	r23,zero,10013f80 <__udivdi3+0x32c>
10013de4:	3c010536 	bltu	r7,r16,100141fc <__udivdi3+0x5a8>
10013de8:	9985403a 	cmpgeu	r2,r19,r6
10013dec:	0007883a 	mov	r3,zero
10013df0:	00004a06 	br	10013f1c <__udivdi3+0x2c8>
10013df4:	3000041e 	bne	r6,zero,10013e08 <__udivdi3+0x1b4>
10013df8:	000b883a 	mov	r5,zero
10013dfc:	01000044 	movi	r4,1
10013e00:	000245c0 	call	1000245c <__udivsi3>
10013e04:	1023883a 	mov	r17,r2
10013e08:	00bfffd4 	movui	r2,65535
10013e0c:	1440532e 	bgeu	r2,r17,10013f5c <__udivdi3+0x308>
10013e10:	00804034 	movhi	r2,256
10013e14:	10bfffc4 	addi	r2,r2,-1
10013e18:	1440f436 	bltu	r2,r17,100141ec <__udivdi3+0x598>
10013e1c:	00800404 	movi	r2,16
10013e20:	8886d83a 	srl	r3,r17,r2
10013e24:	01040374 	movhi	r4,4109
10013e28:	213cc704 	addi	r4,r4,-3300
10013e2c:	20c7883a 	add	r3,r4,r3
10013e30:	18c00003 	ldbu	r3,0(r3)
10013e34:	1885883a 	add	r2,r3,r2
10013e38:	00c00804 	movi	r3,32
10013e3c:	1887c83a 	sub	r3,r3,r2
10013e40:	1800a51e 	bne	r3,zero,100140d8 <__udivdi3+0x484>
10013e44:	882ad43a 	srli	r21,r17,16
10013e48:	8461c83a 	sub	r16,r16,r17
10013e4c:	8d3fffcc 	andi	r20,r17,65535
10013e50:	00c00044 	movi	r3,1
10013e54:	a80b883a 	mov	r5,r21
10013e58:	8009883a 	mov	r4,r16
10013e5c:	d8c00115 	stw	r3,4(sp)
10013e60:	00024c00 	call	100024c0 <__umodsi3>
10013e64:	a80b883a 	mov	r5,r21
10013e68:	8009883a 	mov	r4,r16
10013e6c:	1027883a 	mov	r19,r2
10013e70:	000245c0 	call	1000245c <__udivsi3>
10013e74:	a00b883a 	mov	r5,r20
10013e78:	1009883a 	mov	r4,r2
10013e7c:	102d883a 	mov	r22,r2
10013e80:	00059d40 	call	100059d4 <__mulsi3>
10013e84:	9826943a 	slli	r19,r19,16
10013e88:	900ed43a 	srli	r7,r18,16
10013e8c:	d8c00117 	ldw	r3,4(sp)
10013e90:	3cceb03a 	or	r7,r7,r19
10013e94:	3880052e 	bgeu	r7,r2,10013eac <__udivdi3+0x258>
10013e98:	3c4f883a 	add	r7,r7,r17
10013e9c:	b13fffc4 	addi	r4,r22,-1
10013ea0:	3c400136 	bltu	r7,r17,10013ea8 <__udivdi3+0x254>
10013ea4:	3880e436 	bltu	r7,r2,10014238 <__udivdi3+0x5e4>
10013ea8:	202d883a 	mov	r22,r4
10013eac:	38a1c83a 	sub	r16,r7,r2
10013eb0:	8009883a 	mov	r4,r16
10013eb4:	a80b883a 	mov	r5,r21
10013eb8:	d8c00115 	stw	r3,4(sp)
10013ebc:	00024c00 	call	100024c0 <__umodsi3>
10013ec0:	1027883a 	mov	r19,r2
10013ec4:	8009883a 	mov	r4,r16
10013ec8:	a80b883a 	mov	r5,r21
10013ecc:	9826943a 	slli	r19,r19,16
10013ed0:	000245c0 	call	1000245c <__udivsi3>
10013ed4:	a00b883a 	mov	r5,r20
10013ed8:	1009883a 	mov	r4,r2
10013edc:	94bfffcc 	andi	r18,r18,65535
10013ee0:	1021883a 	mov	r16,r2
10013ee4:	94e4b03a 	or	r18,r18,r19
10013ee8:	00059d40 	call	100059d4 <__mulsi3>
10013eec:	d8c00117 	ldw	r3,4(sp)
10013ef0:	9080052e 	bgeu	r18,r2,10013f08 <__udivdi3+0x2b4>
10013ef4:	8ca5883a 	add	r18,r17,r18
10013ef8:	813fffc4 	addi	r4,r16,-1
10013efc:	9440ad36 	bltu	r18,r17,100141b4 <__udivdi3+0x560>
10013f00:	9080ac2e 	bgeu	r18,r2,100141b4 <__udivdi3+0x560>
10013f04:	843fff84 	addi	r16,r16,-2
10013f08:	b004943a 	slli	r2,r22,16
10013f0c:	1404b03a 	or	r2,r2,r16
10013f10:	00000206 	br	10013f1c <__udivdi3+0x2c8>
10013f14:	0007883a 	mov	r3,zero
10013f18:	0005883a 	mov	r2,zero
10013f1c:	dfc00b17 	ldw	ra,44(sp)
10013f20:	df000a17 	ldw	fp,40(sp)
10013f24:	ddc00917 	ldw	r23,36(sp)
10013f28:	dd800817 	ldw	r22,32(sp)
10013f2c:	dd400717 	ldw	r21,28(sp)
10013f30:	dd000617 	ldw	r20,24(sp)
10013f34:	dcc00517 	ldw	r19,20(sp)
10013f38:	dc800417 	ldw	r18,16(sp)
10013f3c:	dc400317 	ldw	r17,12(sp)
10013f40:	dc000217 	ldw	r16,8(sp)
10013f44:	dec00c04 	addi	sp,sp,48
10013f48:	f800283a 	ret
10013f4c:	00803fc4 	movi	r2,255
10013f50:	11c5803a 	cmpltu	r2,r2,r7
10013f54:	100490fa 	slli	r2,r2,3
10013f58:	003f9906 	br	10013dc0 <__alt_data_end+0xf8013dc0>
10013f5c:	00803fc4 	movi	r2,255
10013f60:	1445803a 	cmpltu	r2,r2,r17
10013f64:	100490fa 	slli	r2,r2,3
10013f68:	003fad06 	br	10013e20 <__alt_data_end+0xf8013e20>
10013f6c:	00804034 	movhi	r2,256
10013f70:	10bfffc4 	addi	r2,r2,-1
10013f74:	11809f36 	bltu	r2,r6,100141f4 <__udivdi3+0x5a0>
10013f78:	00800404 	movi	r2,16
10013f7c:	003f4c06 	br	10013cb0 <__alt_data_end+0xf8013cb0>
10013f80:	3dce983a 	sll	r7,r7,r23
10013f84:	30b8d83a 	srl	fp,r6,r2
10013f88:	80a2d83a 	srl	r17,r16,r2
10013f8c:	35cc983a 	sll	r6,r6,r23
10013f90:	3f38b03a 	or	fp,r7,fp
10013f94:	e024d43a 	srli	r18,fp,16
10013f98:	9884d83a 	srl	r2,r19,r2
10013f9c:	85e0983a 	sll	r16,r16,r23
10013fa0:	8809883a 	mov	r4,r17
10013fa4:	900b883a 	mov	r5,r18
10013fa8:	d9800015 	stw	r6,0(sp)
10013fac:	1420b03a 	or	r16,r2,r16
10013fb0:	00024c00 	call	100024c0 <__umodsi3>
10013fb4:	900b883a 	mov	r5,r18
10013fb8:	8809883a 	mov	r4,r17
10013fbc:	1029883a 	mov	r20,r2
10013fc0:	e5bfffcc 	andi	r22,fp,65535
10013fc4:	000245c0 	call	1000245c <__udivsi3>
10013fc8:	100b883a 	mov	r5,r2
10013fcc:	b009883a 	mov	r4,r22
10013fd0:	102b883a 	mov	r21,r2
10013fd4:	00059d40 	call	100059d4 <__mulsi3>
10013fd8:	a028943a 	slli	r20,r20,16
10013fdc:	8006d43a 	srli	r3,r16,16
10013fe0:	1d06b03a 	or	r3,r3,r20
10013fe4:	1880042e 	bgeu	r3,r2,10013ff8 <__udivdi3+0x3a4>
10013fe8:	1f07883a 	add	r3,r3,fp
10013fec:	a93fffc4 	addi	r4,r21,-1
10013ff0:	1f00892e 	bgeu	r3,fp,10014218 <__udivdi3+0x5c4>
10013ff4:	202b883a 	mov	r21,r4
10013ff8:	18a3c83a 	sub	r17,r3,r2
10013ffc:	8809883a 	mov	r4,r17
10014000:	900b883a 	mov	r5,r18
10014004:	00024c00 	call	100024c0 <__umodsi3>
10014008:	1029883a 	mov	r20,r2
1001400c:	8809883a 	mov	r4,r17
10014010:	900b883a 	mov	r5,r18
10014014:	a028943a 	slli	r20,r20,16
10014018:	000245c0 	call	1000245c <__udivsi3>
1001401c:	100b883a 	mov	r5,r2
10014020:	b009883a 	mov	r4,r22
10014024:	843fffcc 	andi	r16,r16,65535
10014028:	1023883a 	mov	r17,r2
1001402c:	8520b03a 	or	r16,r16,r20
10014030:	00059d40 	call	100059d4 <__mulsi3>
10014034:	8080042e 	bgeu	r16,r2,10014048 <__udivdi3+0x3f4>
10014038:	8721883a 	add	r16,r16,fp
1001403c:	88ffffc4 	addi	r3,r17,-1
10014040:	8700712e 	bgeu	r16,fp,10014208 <__udivdi3+0x5b4>
10014044:	1823883a 	mov	r17,r3
10014048:	a80e943a 	slli	r7,r21,16
1001404c:	d8c00017 	ldw	r3,0(sp)
10014050:	80a1c83a 	sub	r16,r16,r2
10014054:	3c64b03a 	or	r18,r7,r17
10014058:	1d3fffcc 	andi	r20,r3,65535
1001405c:	9022d43a 	srli	r17,r18,16
10014060:	95bfffcc 	andi	r22,r18,65535
10014064:	a00b883a 	mov	r5,r20
10014068:	b009883a 	mov	r4,r22
1001406c:	182ad43a 	srli	r21,r3,16
10014070:	00059d40 	call	100059d4 <__mulsi3>
10014074:	a00b883a 	mov	r5,r20
10014078:	8809883a 	mov	r4,r17
1001407c:	1039883a 	mov	fp,r2
10014080:	00059d40 	call	100059d4 <__mulsi3>
10014084:	8809883a 	mov	r4,r17
10014088:	a80b883a 	mov	r5,r21
1001408c:	1029883a 	mov	r20,r2
10014090:	00059d40 	call	100059d4 <__mulsi3>
10014094:	a80b883a 	mov	r5,r21
10014098:	b009883a 	mov	r4,r22
1001409c:	1023883a 	mov	r17,r2
100140a0:	00059d40 	call	100059d4 <__mulsi3>
100140a4:	e006d43a 	srli	r3,fp,16
100140a8:	1505883a 	add	r2,r2,r20
100140ac:	1887883a 	add	r3,r3,r2
100140b0:	1d00022e 	bgeu	r3,r20,100140bc <__udivdi3+0x468>
100140b4:	00800074 	movhi	r2,1
100140b8:	88a3883a 	add	r17,r17,r2
100140bc:	1804d43a 	srli	r2,r3,16
100140c0:	1463883a 	add	r17,r2,r17
100140c4:	84404436 	bltu	r16,r17,100141d8 <__udivdi3+0x584>
100140c8:	84403e26 	beq	r16,r17,100141c4 <__udivdi3+0x570>
100140cc:	9005883a 	mov	r2,r18
100140d0:	0007883a 	mov	r3,zero
100140d4:	003f9106 	br	10013f1c <__alt_data_end+0xf8013f1c>
100140d8:	88e2983a 	sll	r17,r17,r3
100140dc:	80aed83a 	srl	r23,r16,r2
100140e0:	80e0983a 	sll	r16,r16,r3
100140e4:	882ad43a 	srli	r21,r17,16
100140e8:	9884d83a 	srl	r2,r19,r2
100140ec:	b809883a 	mov	r4,r23
100140f0:	a80b883a 	mov	r5,r21
100140f4:	98e4983a 	sll	r18,r19,r3
100140f8:	142cb03a 	or	r22,r2,r16
100140fc:	00024c00 	call	100024c0 <__umodsi3>
10014100:	b809883a 	mov	r4,r23
10014104:	a80b883a 	mov	r5,r21
10014108:	1027883a 	mov	r19,r2
1001410c:	8d3fffcc 	andi	r20,r17,65535
10014110:	000245c0 	call	1000245c <__udivsi3>
10014114:	a009883a 	mov	r4,r20
10014118:	100b883a 	mov	r5,r2
1001411c:	102f883a 	mov	r23,r2
10014120:	00059d40 	call	100059d4 <__mulsi3>
10014124:	9826943a 	slli	r19,r19,16
10014128:	b008d43a 	srli	r4,r22,16
1001412c:	24c8b03a 	or	r4,r4,r19
10014130:	2080062e 	bgeu	r4,r2,1001414c <__udivdi3+0x4f8>
10014134:	2449883a 	add	r4,r4,r17
10014138:	b8ffffc4 	addi	r3,r23,-1
1001413c:	24403c36 	bltu	r4,r17,10014230 <__udivdi3+0x5dc>
10014140:	20803b2e 	bgeu	r4,r2,10014230 <__udivdi3+0x5dc>
10014144:	bdffff84 	addi	r23,r23,-2
10014148:	2449883a 	add	r4,r4,r17
1001414c:	20a1c83a 	sub	r16,r4,r2
10014150:	a80b883a 	mov	r5,r21
10014154:	8009883a 	mov	r4,r16
10014158:	00024c00 	call	100024c0 <__umodsi3>
1001415c:	a80b883a 	mov	r5,r21
10014160:	8009883a 	mov	r4,r16
10014164:	1027883a 	mov	r19,r2
10014168:	000245c0 	call	1000245c <__udivsi3>
1001416c:	a009883a 	mov	r4,r20
10014170:	100b883a 	mov	r5,r2
10014174:	9826943a 	slli	r19,r19,16
10014178:	1039883a 	mov	fp,r2
1001417c:	00059d40 	call	100059d4 <__mulsi3>
10014180:	b13fffcc 	andi	r4,r22,65535
10014184:	24c8b03a 	or	r4,r4,r19
10014188:	2080062e 	bgeu	r4,r2,100141a4 <__udivdi3+0x550>
1001418c:	2449883a 	add	r4,r4,r17
10014190:	e0ffffc4 	addi	r3,fp,-1
10014194:	24402436 	bltu	r4,r17,10014228 <__udivdi3+0x5d4>
10014198:	2080232e 	bgeu	r4,r2,10014228 <__udivdi3+0x5d4>
1001419c:	e73fff84 	addi	fp,fp,-2
100141a0:	2449883a 	add	r4,r4,r17
100141a4:	b82e943a 	slli	r23,r23,16
100141a8:	20a1c83a 	sub	r16,r4,r2
100141ac:	bf06b03a 	or	r3,r23,fp
100141b0:	003f2806 	br	10013e54 <__alt_data_end+0xf8013e54>
100141b4:	2021883a 	mov	r16,r4
100141b8:	003f5306 	br	10013f08 <__alt_data_end+0xf8013f08>
100141bc:	1821883a 	mov	r16,r3
100141c0:	003ef406 	br	10013d94 <__alt_data_end+0xf8013d94>
100141c4:	1806943a 	slli	r3,r3,16
100141c8:	9de6983a 	sll	r19,r19,r23
100141cc:	e73fffcc 	andi	fp,fp,65535
100141d0:	1f07883a 	add	r3,r3,fp
100141d4:	98ffbd2e 	bgeu	r19,r3,100140cc <__alt_data_end+0xf80140cc>
100141d8:	90bfffc4 	addi	r2,r18,-1
100141dc:	0007883a 	mov	r3,zero
100141e0:	003f4e06 	br	10013f1c <__alt_data_end+0xf8013f1c>
100141e4:	00800604 	movi	r2,24
100141e8:	003ef506 	br	10013dc0 <__alt_data_end+0xf8013dc0>
100141ec:	00800604 	movi	r2,24
100141f0:	003f0b06 	br	10013e20 <__alt_data_end+0xf8013e20>
100141f4:	00800604 	movi	r2,24
100141f8:	003ead06 	br	10013cb0 <__alt_data_end+0xf8013cb0>
100141fc:	0007883a 	mov	r3,zero
10014200:	00800044 	movi	r2,1
10014204:	003f4506 	br	10013f1c <__alt_data_end+0xf8013f1c>
10014208:	80bf8e2e 	bgeu	r16,r2,10014044 <__alt_data_end+0xf8014044>
1001420c:	8c7fff84 	addi	r17,r17,-2
10014210:	8721883a 	add	r16,r16,fp
10014214:	003f8c06 	br	10014048 <__alt_data_end+0xf8014048>
10014218:	18bf762e 	bgeu	r3,r2,10013ff4 <__alt_data_end+0xf8013ff4>
1001421c:	ad7fff84 	addi	r21,r21,-2
10014220:	1f07883a 	add	r3,r3,fp
10014224:	003f7406 	br	10013ff8 <__alt_data_end+0xf8013ff8>
10014228:	1839883a 	mov	fp,r3
1001422c:	003fdd06 	br	100141a4 <__alt_data_end+0xf80141a4>
10014230:	182f883a 	mov	r23,r3
10014234:	003fc506 	br	1001414c <__alt_data_end+0xf801414c>
10014238:	b5bfff84 	addi	r22,r22,-2
1001423c:	3c4f883a 	add	r7,r7,r17
10014240:	003f1a06 	br	10013eac <__alt_data_end+0xf8013eac>
10014244:	b5bfff84 	addi	r22,r22,-2
10014248:	1c47883a 	add	r3,r3,r17
1001424c:	003ebc06 	br	10013d40 <__alt_data_end+0xf8013d40>

10014250 <__umoddi3>:
10014250:	defff304 	addi	sp,sp,-52
10014254:	df000b15 	stw	fp,44(sp)
10014258:	dc400415 	stw	r17,16(sp)
1001425c:	dc000315 	stw	r16,12(sp)
10014260:	dfc00c15 	stw	ra,48(sp)
10014264:	ddc00a15 	stw	r23,40(sp)
10014268:	dd800915 	stw	r22,36(sp)
1001426c:	dd400815 	stw	r21,32(sp)
10014270:	dd000715 	stw	r20,28(sp)
10014274:	dcc00615 	stw	r19,24(sp)
10014278:	dc800515 	stw	r18,20(sp)
1001427c:	2021883a 	mov	r16,r4
10014280:	2823883a 	mov	r17,r5
10014284:	2839883a 	mov	fp,r5
10014288:	3800401e 	bne	r7,zero,1001438c <__umoddi3+0x13c>
1001428c:	3027883a 	mov	r19,r6
10014290:	2029883a 	mov	r20,r4
10014294:	2980552e 	bgeu	r5,r6,100143ec <__umoddi3+0x19c>
10014298:	00bfffd4 	movui	r2,65535
1001429c:	1180a236 	bltu	r2,r6,10014528 <__umoddi3+0x2d8>
100142a0:	01003fc4 	movi	r4,255
100142a4:	2189803a 	cmpltu	r4,r4,r6
100142a8:	200890fa 	slli	r4,r4,3
100142ac:	3104d83a 	srl	r2,r6,r4
100142b0:	00c40374 	movhi	r3,4109
100142b4:	18fcc704 	addi	r3,r3,-3300
100142b8:	1885883a 	add	r2,r3,r2
100142bc:	10c00003 	ldbu	r3,0(r2)
100142c0:	00800804 	movi	r2,32
100142c4:	1909883a 	add	r4,r3,r4
100142c8:	1125c83a 	sub	r18,r2,r4
100142cc:	90000526 	beq	r18,zero,100142e4 <__umoddi3+0x94>
100142d0:	8ca2983a 	sll	r17,r17,r18
100142d4:	8108d83a 	srl	r4,r16,r4
100142d8:	34a6983a 	sll	r19,r6,r18
100142dc:	84a8983a 	sll	r20,r16,r18
100142e0:	2478b03a 	or	fp,r4,r17
100142e4:	982cd43a 	srli	r22,r19,16
100142e8:	e009883a 	mov	r4,fp
100142ec:	9dffffcc 	andi	r23,r19,65535
100142f0:	b00b883a 	mov	r5,r22
100142f4:	00024c00 	call	100024c0 <__umodsi3>
100142f8:	b00b883a 	mov	r5,r22
100142fc:	e009883a 	mov	r4,fp
10014300:	102b883a 	mov	r21,r2
10014304:	000245c0 	call	1000245c <__udivsi3>
10014308:	100b883a 	mov	r5,r2
1001430c:	b809883a 	mov	r4,r23
10014310:	00059d40 	call	100059d4 <__mulsi3>
10014314:	a82a943a 	slli	r21,r21,16
10014318:	a006d43a 	srli	r3,r20,16
1001431c:	1d46b03a 	or	r3,r3,r21
10014320:	1880032e 	bgeu	r3,r2,10014330 <__umoddi3+0xe0>
10014324:	1cc7883a 	add	r3,r3,r19
10014328:	1cc00136 	bltu	r3,r19,10014330 <__umoddi3+0xe0>
1001432c:	18813136 	bltu	r3,r2,100147f4 <__umoddi3+0x5a4>
10014330:	18a1c83a 	sub	r16,r3,r2
10014334:	b00b883a 	mov	r5,r22
10014338:	8009883a 	mov	r4,r16
1001433c:	00024c00 	call	100024c0 <__umodsi3>
10014340:	b00b883a 	mov	r5,r22
10014344:	8009883a 	mov	r4,r16
10014348:	1023883a 	mov	r17,r2
1001434c:	000245c0 	call	1000245c <__udivsi3>
10014350:	100b883a 	mov	r5,r2
10014354:	b809883a 	mov	r4,r23
10014358:	8822943a 	slli	r17,r17,16
1001435c:	00059d40 	call	100059d4 <__mulsi3>
10014360:	a0ffffcc 	andi	r3,r20,65535
10014364:	1c46b03a 	or	r3,r3,r17
10014368:	1880042e 	bgeu	r3,r2,1001437c <__umoddi3+0x12c>
1001436c:	1cc7883a 	add	r3,r3,r19
10014370:	1cc00236 	bltu	r3,r19,1001437c <__umoddi3+0x12c>
10014374:	1880012e 	bgeu	r3,r2,1001437c <__umoddi3+0x12c>
10014378:	1cc7883a 	add	r3,r3,r19
1001437c:	1885c83a 	sub	r2,r3,r2
10014380:	1484d83a 	srl	r2,r2,r18
10014384:	0007883a 	mov	r3,zero
10014388:	00005306 	br	100144d8 <__umoddi3+0x288>
1001438c:	29c05036 	bltu	r5,r7,100144d0 <__umoddi3+0x280>
10014390:	00bfffd4 	movui	r2,65535
10014394:	11c05c2e 	bgeu	r2,r7,10014508 <__umoddi3+0x2b8>
10014398:	00804034 	movhi	r2,256
1001439c:	10bfffc4 	addi	r2,r2,-1
100143a0:	11c10636 	bltu	r2,r7,100147bc <__umoddi3+0x56c>
100143a4:	01000404 	movi	r4,16
100143a8:	3904d83a 	srl	r2,r7,r4
100143ac:	00c40374 	movhi	r3,4109
100143b0:	18fcc704 	addi	r3,r3,-3300
100143b4:	1885883a 	add	r2,r3,r2
100143b8:	14c00003 	ldbu	r19,0(r2)
100143bc:	00c00804 	movi	r3,32
100143c0:	9927883a 	add	r19,r19,r4
100143c4:	1ce9c83a 	sub	r20,r3,r19
100143c8:	a0005c1e 	bne	r20,zero,1001453c <__umoddi3+0x2ec>
100143cc:	3c400136 	bltu	r7,r17,100143d4 <__umoddi3+0x184>
100143d0:	81810a36 	bltu	r16,r6,100147fc <__umoddi3+0x5ac>
100143d4:	8185c83a 	sub	r2,r16,r6
100143d8:	89e3c83a 	sub	r17,r17,r7
100143dc:	8089803a 	cmpltu	r4,r16,r2
100143e0:	8939c83a 	sub	fp,r17,r4
100143e4:	e007883a 	mov	r3,fp
100143e8:	00003b06 	br	100144d8 <__umoddi3+0x288>
100143ec:	3000041e 	bne	r6,zero,10014400 <__umoddi3+0x1b0>
100143f0:	000b883a 	mov	r5,zero
100143f4:	01000044 	movi	r4,1
100143f8:	000245c0 	call	1000245c <__udivsi3>
100143fc:	1027883a 	mov	r19,r2
10014400:	00bfffd4 	movui	r2,65535
10014404:	14c0442e 	bgeu	r2,r19,10014518 <__umoddi3+0x2c8>
10014408:	00804034 	movhi	r2,256
1001440c:	10bfffc4 	addi	r2,r2,-1
10014410:	14c0ec36 	bltu	r2,r19,100147c4 <__umoddi3+0x574>
10014414:	00800404 	movi	r2,16
10014418:	9886d83a 	srl	r3,r19,r2
1001441c:	01040374 	movhi	r4,4109
10014420:	213cc704 	addi	r4,r4,-3300
10014424:	20c7883a 	add	r3,r4,r3
10014428:	18c00003 	ldbu	r3,0(r3)
1001442c:	1887883a 	add	r3,r3,r2
10014430:	00800804 	movi	r2,32
10014434:	10e5c83a 	sub	r18,r2,r3
10014438:	9000ab1e 	bne	r18,zero,100146e8 <__umoddi3+0x498>
1001443c:	982cd43a 	srli	r22,r19,16
10014440:	8ce3c83a 	sub	r17,r17,r19
10014444:	9dffffcc 	andi	r23,r19,65535
10014448:	b00b883a 	mov	r5,r22
1001444c:	8809883a 	mov	r4,r17
10014450:	00024c00 	call	100024c0 <__umodsi3>
10014454:	b00b883a 	mov	r5,r22
10014458:	8809883a 	mov	r4,r17
1001445c:	102b883a 	mov	r21,r2
10014460:	000245c0 	call	1000245c <__udivsi3>
10014464:	b80b883a 	mov	r5,r23
10014468:	1009883a 	mov	r4,r2
1001446c:	00059d40 	call	100059d4 <__mulsi3>
10014470:	a82a943a 	slli	r21,r21,16
10014474:	a006d43a 	srli	r3,r20,16
10014478:	1d46b03a 	or	r3,r3,r21
1001447c:	1880042e 	bgeu	r3,r2,10014490 <__umoddi3+0x240>
10014480:	1cc7883a 	add	r3,r3,r19
10014484:	1cc00236 	bltu	r3,r19,10014490 <__umoddi3+0x240>
10014488:	1880012e 	bgeu	r3,r2,10014490 <__umoddi3+0x240>
1001448c:	1cc7883a 	add	r3,r3,r19
10014490:	18a1c83a 	sub	r16,r3,r2
10014494:	b00b883a 	mov	r5,r22
10014498:	8009883a 	mov	r4,r16
1001449c:	00024c00 	call	100024c0 <__umodsi3>
100144a0:	1023883a 	mov	r17,r2
100144a4:	b00b883a 	mov	r5,r22
100144a8:	8009883a 	mov	r4,r16
100144ac:	000245c0 	call	1000245c <__udivsi3>
100144b0:	8822943a 	slli	r17,r17,16
100144b4:	b80b883a 	mov	r5,r23
100144b8:	1009883a 	mov	r4,r2
100144bc:	00059d40 	call	100059d4 <__mulsi3>
100144c0:	a53fffcc 	andi	r20,r20,65535
100144c4:	a446b03a 	or	r3,r20,r17
100144c8:	18bfac2e 	bgeu	r3,r2,1001437c <__alt_data_end+0xf801437c>
100144cc:	003fa706 	br	1001436c <__alt_data_end+0xf801436c>
100144d0:	2005883a 	mov	r2,r4
100144d4:	2807883a 	mov	r3,r5
100144d8:	dfc00c17 	ldw	ra,48(sp)
100144dc:	df000b17 	ldw	fp,44(sp)
100144e0:	ddc00a17 	ldw	r23,40(sp)
100144e4:	dd800917 	ldw	r22,36(sp)
100144e8:	dd400817 	ldw	r21,32(sp)
100144ec:	dd000717 	ldw	r20,28(sp)
100144f0:	dcc00617 	ldw	r19,24(sp)
100144f4:	dc800517 	ldw	r18,20(sp)
100144f8:	dc400417 	ldw	r17,16(sp)
100144fc:	dc000317 	ldw	r16,12(sp)
10014500:	dec00d04 	addi	sp,sp,52
10014504:	f800283a 	ret
10014508:	04c03fc4 	movi	r19,255
1001450c:	99c9803a 	cmpltu	r4,r19,r7
10014510:	200890fa 	slli	r4,r4,3
10014514:	003fa406 	br	100143a8 <__alt_data_end+0xf80143a8>
10014518:	00803fc4 	movi	r2,255
1001451c:	14c5803a 	cmpltu	r2,r2,r19
10014520:	100490fa 	slli	r2,r2,3
10014524:	003fbc06 	br	10014418 <__alt_data_end+0xf8014418>
10014528:	00804034 	movhi	r2,256
1001452c:	10bfffc4 	addi	r2,r2,-1
10014530:	1180a636 	bltu	r2,r6,100147cc <__umoddi3+0x57c>
10014534:	01000404 	movi	r4,16
10014538:	003f5c06 	br	100142ac <__alt_data_end+0xf80142ac>
1001453c:	3d0e983a 	sll	r7,r7,r20
10014540:	34ead83a 	srl	r21,r6,r19
10014544:	8cc6d83a 	srl	r3,r17,r19
10014548:	8d10983a 	sll	r8,r17,r20
1001454c:	3d6ab03a 	or	r21,r7,r21
10014550:	a82cd43a 	srli	r22,r21,16
10014554:	84e2d83a 	srl	r17,r16,r19
10014558:	1809883a 	mov	r4,r3
1001455c:	b00b883a 	mov	r5,r22
10014560:	8a22b03a 	or	r17,r17,r8
10014564:	3524983a 	sll	r18,r6,r20
10014568:	dc400015 	stw	r17,0(sp)
1001456c:	d8c00115 	stw	r3,4(sp)
10014570:	00024c00 	call	100024c0 <__umodsi3>
10014574:	d8c00117 	ldw	r3,4(sp)
10014578:	b00b883a 	mov	r5,r22
1001457c:	1039883a 	mov	fp,r2
10014580:	1809883a 	mov	r4,r3
10014584:	000245c0 	call	1000245c <__udivsi3>
10014588:	adffffcc 	andi	r23,r21,65535
1001458c:	100b883a 	mov	r5,r2
10014590:	b809883a 	mov	r4,r23
10014594:	1023883a 	mov	r17,r2
10014598:	00059d40 	call	100059d4 <__mulsi3>
1001459c:	d9400017 	ldw	r5,0(sp)
100145a0:	e008943a 	slli	r4,fp,16
100145a4:	8520983a 	sll	r16,r16,r20
100145a8:	2806d43a 	srli	r3,r5,16
100145ac:	1906b03a 	or	r3,r3,r4
100145b0:	1880042e 	bgeu	r3,r2,100145c4 <__umoddi3+0x374>
100145b4:	1d47883a 	add	r3,r3,r21
100145b8:	893fffc4 	addi	r4,r17,-1
100145bc:	1d40892e 	bgeu	r3,r21,100147e4 <__umoddi3+0x594>
100145c0:	2023883a 	mov	r17,r4
100145c4:	18b9c83a 	sub	fp,r3,r2
100145c8:	b00b883a 	mov	r5,r22
100145cc:	e009883a 	mov	r4,fp
100145d0:	00024c00 	call	100024c0 <__umodsi3>
100145d4:	b00b883a 	mov	r5,r22
100145d8:	e009883a 	mov	r4,fp
100145dc:	d8800215 	stw	r2,8(sp)
100145e0:	000245c0 	call	1000245c <__udivsi3>
100145e4:	100b883a 	mov	r5,r2
100145e8:	b809883a 	mov	r4,r23
100145ec:	102d883a 	mov	r22,r2
100145f0:	00059d40 	call	100059d4 <__mulsi3>
100145f4:	d9800217 	ldw	r6,8(sp)
100145f8:	d8c00017 	ldw	r3,0(sp)
100145fc:	300c943a 	slli	r6,r6,16
10014600:	1a3fffcc 	andi	r8,r3,65535
10014604:	4190b03a 	or	r8,r8,r6
10014608:	4080042e 	bgeu	r8,r2,1001461c <__umoddi3+0x3cc>
1001460c:	4551883a 	add	r8,r8,r21
10014610:	b0ffffc4 	addi	r3,r22,-1
10014614:	45406f2e 	bgeu	r8,r21,100147d4 <__umoddi3+0x584>
10014618:	182d883a 	mov	r22,r3
1001461c:	880e943a 	slli	r7,r17,16
10014620:	9006d43a 	srli	r3,r18,16
10014624:	91bfffcc 	andi	r6,r18,65535
10014628:	3dacb03a 	or	r22,r7,r22
1001462c:	b02ed43a 	srli	r23,r22,16
10014630:	b5bfffcc 	andi	r22,r22,65535
10014634:	300b883a 	mov	r5,r6
10014638:	b009883a 	mov	r4,r22
1001463c:	40a3c83a 	sub	r17,r8,r2
10014640:	d8c00115 	stw	r3,4(sp)
10014644:	d9800215 	stw	r6,8(sp)
10014648:	00059d40 	call	100059d4 <__mulsi3>
1001464c:	d9800217 	ldw	r6,8(sp)
10014650:	b809883a 	mov	r4,r23
10014654:	1039883a 	mov	fp,r2
10014658:	300b883a 	mov	r5,r6
1001465c:	00059d40 	call	100059d4 <__mulsi3>
10014660:	d8c00117 	ldw	r3,4(sp)
10014664:	b809883a 	mov	r4,r23
10014668:	d8800215 	stw	r2,8(sp)
1001466c:	180b883a 	mov	r5,r3
10014670:	00059d40 	call	100059d4 <__mulsi3>
10014674:	d8c00117 	ldw	r3,4(sp)
10014678:	b009883a 	mov	r4,r22
1001467c:	102f883a 	mov	r23,r2
10014680:	180b883a 	mov	r5,r3
10014684:	00059d40 	call	100059d4 <__mulsi3>
10014688:	d9800217 	ldw	r6,8(sp)
1001468c:	e006d43a 	srli	r3,fp,16
10014690:	1185883a 	add	r2,r2,r6
10014694:	1885883a 	add	r2,r3,r2
10014698:	1180022e 	bgeu	r2,r6,100146a4 <__umoddi3+0x454>
1001469c:	00c00074 	movhi	r3,1
100146a0:	b8ef883a 	add	r23,r23,r3
100146a4:	1006d43a 	srli	r3,r2,16
100146a8:	1004943a 	slli	r2,r2,16
100146ac:	e73fffcc 	andi	fp,fp,65535
100146b0:	1dc7883a 	add	r3,r3,r23
100146b4:	1739883a 	add	fp,r2,fp
100146b8:	88c03a36 	bltu	r17,r3,100147a4 <__umoddi3+0x554>
100146bc:	88c05126 	beq	r17,r3,10014804 <__umoddi3+0x5b4>
100146c0:	88c9c83a 	sub	r4,r17,r3
100146c4:	e00f883a 	mov	r7,fp
100146c8:	81cfc83a 	sub	r7,r16,r7
100146cc:	81c7803a 	cmpltu	r3,r16,r7
100146d0:	20c7c83a 	sub	r3,r4,r3
100146d4:	1cc4983a 	sll	r2,r3,r19
100146d8:	3d0ed83a 	srl	r7,r7,r20
100146dc:	1d06d83a 	srl	r3,r3,r20
100146e0:	11c4b03a 	or	r2,r2,r7
100146e4:	003f7c06 	br	100144d8 <__alt_data_end+0xf80144d8>
100146e8:	9ca6983a 	sll	r19,r19,r18
100146ec:	88f8d83a 	srl	fp,r17,r3
100146f0:	80c4d83a 	srl	r2,r16,r3
100146f4:	982cd43a 	srli	r22,r19,16
100146f8:	8ca2983a 	sll	r17,r17,r18
100146fc:	e009883a 	mov	r4,fp
10014700:	b00b883a 	mov	r5,r22
10014704:	146ab03a 	or	r21,r2,r17
10014708:	00024c00 	call	100024c0 <__umodsi3>
1001470c:	b00b883a 	mov	r5,r22
10014710:	e009883a 	mov	r4,fp
10014714:	1029883a 	mov	r20,r2
10014718:	9dffffcc 	andi	r23,r19,65535
1001471c:	000245c0 	call	1000245c <__udivsi3>
10014720:	b809883a 	mov	r4,r23
10014724:	100b883a 	mov	r5,r2
10014728:	00059d40 	call	100059d4 <__mulsi3>
1001472c:	a008943a 	slli	r4,r20,16
10014730:	a806d43a 	srli	r3,r21,16
10014734:	84a8983a 	sll	r20,r16,r18
10014738:	1906b03a 	or	r3,r3,r4
1001473c:	1880042e 	bgeu	r3,r2,10014750 <__umoddi3+0x500>
10014740:	1cc7883a 	add	r3,r3,r19
10014744:	1cc00236 	bltu	r3,r19,10014750 <__umoddi3+0x500>
10014748:	1880012e 	bgeu	r3,r2,10014750 <__umoddi3+0x500>
1001474c:	1cc7883a 	add	r3,r3,r19
10014750:	18a3c83a 	sub	r17,r3,r2
10014754:	b00b883a 	mov	r5,r22
10014758:	8809883a 	mov	r4,r17
1001475c:	00024c00 	call	100024c0 <__umodsi3>
10014760:	b00b883a 	mov	r5,r22
10014764:	8809883a 	mov	r4,r17
10014768:	1021883a 	mov	r16,r2
1001476c:	000245c0 	call	1000245c <__udivsi3>
10014770:	100b883a 	mov	r5,r2
10014774:	b809883a 	mov	r4,r23
10014778:	8020943a 	slli	r16,r16,16
1001477c:	00059d40 	call	100059d4 <__mulsi3>
10014780:	a8ffffcc 	andi	r3,r21,65535
10014784:	1c06b03a 	or	r3,r3,r16
10014788:	1880042e 	bgeu	r3,r2,1001479c <__umoddi3+0x54c>
1001478c:	1cc7883a 	add	r3,r3,r19
10014790:	1cc00236 	bltu	r3,r19,1001479c <__umoddi3+0x54c>
10014794:	1880012e 	bgeu	r3,r2,1001479c <__umoddi3+0x54c>
10014798:	1cc7883a 	add	r3,r3,r19
1001479c:	18a3c83a 	sub	r17,r3,r2
100147a0:	003f2906 	br	10014448 <__alt_data_end+0xf8014448>
100147a4:	e48fc83a 	sub	r7,fp,r18
100147a8:	1d49c83a 	sub	r4,r3,r21
100147ac:	e1f9803a 	cmpltu	fp,fp,r7
100147b0:	2739c83a 	sub	fp,r4,fp
100147b4:	8f09c83a 	sub	r4,r17,fp
100147b8:	003fc306 	br	100146c8 <__alt_data_end+0xf80146c8>
100147bc:	01000604 	movi	r4,24
100147c0:	003ef906 	br	100143a8 <__alt_data_end+0xf80143a8>
100147c4:	00800604 	movi	r2,24
100147c8:	003f1306 	br	10014418 <__alt_data_end+0xf8014418>
100147cc:	01000604 	movi	r4,24
100147d0:	003eb606 	br	100142ac <__alt_data_end+0xf80142ac>
100147d4:	40bf902e 	bgeu	r8,r2,10014618 <__alt_data_end+0xf8014618>
100147d8:	b5bfff84 	addi	r22,r22,-2
100147dc:	4551883a 	add	r8,r8,r21
100147e0:	003f8e06 	br	1001461c <__alt_data_end+0xf801461c>
100147e4:	18bf762e 	bgeu	r3,r2,100145c0 <__alt_data_end+0xf80145c0>
100147e8:	8c7fff84 	addi	r17,r17,-2
100147ec:	1d47883a 	add	r3,r3,r21
100147f0:	003f7406 	br	100145c4 <__alt_data_end+0xf80145c4>
100147f4:	1cc7883a 	add	r3,r3,r19
100147f8:	003ecd06 	br	10014330 <__alt_data_end+0xf8014330>
100147fc:	8005883a 	mov	r2,r16
10014800:	003ef806 	br	100143e4 <__alt_data_end+0xf80143e4>
10014804:	873fe736 	bltu	r16,fp,100147a4 <__alt_data_end+0xf80147a4>
10014808:	e00f883a 	mov	r7,fp
1001480c:	0009883a 	mov	r4,zero
10014810:	003fad06 	br	100146c8 <__alt_data_end+0xf80146c8>

10014814 <__divdf3>:
10014814:	defff004 	addi	sp,sp,-64
10014818:	dc800815 	stw	r18,32(sp)
1001481c:	2824d53a 	srli	r18,r5,20
10014820:	dd800c15 	stw	r22,48(sp)
10014824:	282cd7fa 	srli	r22,r5,31
10014828:	dc000615 	stw	r16,24(sp)
1001482c:	04000434 	movhi	r16,16
10014830:	843fffc4 	addi	r16,r16,-1
10014834:	dfc00f15 	stw	ra,60(sp)
10014838:	df000e15 	stw	fp,56(sp)
1001483c:	ddc00d15 	stw	r23,52(sp)
10014840:	dd400b15 	stw	r21,44(sp)
10014844:	dd000a15 	stw	r20,40(sp)
10014848:	dcc00915 	stw	r19,36(sp)
1001484c:	dc400715 	stw	r17,28(sp)
10014850:	9481ffcc 	andi	r18,r18,2047
10014854:	2c20703a 	and	r16,r5,r16
10014858:	b2003fcc 	andi	r8,r22,255
1001485c:	90006126 	beq	r18,zero,100149e4 <__divdf3+0x1d0>
10014860:	0081ffc4 	movi	r2,2047
10014864:	202b883a 	mov	r21,r4
10014868:	90803726 	beq	r18,r2,10014948 <__divdf3+0x134>
1001486c:	80c00434 	orhi	r3,r16,16
10014870:	180690fa 	slli	r3,r3,3
10014874:	2020d77a 	srli	r16,r4,29
10014878:	202a90fa 	slli	r21,r4,3
1001487c:	94bf0044 	addi	r18,r18,-1023
10014880:	80e0b03a 	or	r16,r16,r3
10014884:	0013883a 	mov	r9,zero
10014888:	000b883a 	mov	r5,zero
1001488c:	3806d53a 	srli	r3,r7,20
10014890:	382ed7fa 	srli	r23,r7,31
10014894:	04400434 	movhi	r17,16
10014898:	8c7fffc4 	addi	r17,r17,-1
1001489c:	18c1ffcc 	andi	r3,r3,2047
100148a0:	3029883a 	mov	r20,r6
100148a4:	3c62703a 	and	r17,r7,r17
100148a8:	bf003fcc 	andi	fp,r23,255
100148ac:	18006e26 	beq	r3,zero,10014a68 <__divdf3+0x254>
100148b0:	0081ffc4 	movi	r2,2047
100148b4:	18806626 	beq	r3,r2,10014a50 <__divdf3+0x23c>
100148b8:	89000434 	orhi	r4,r17,16
100148bc:	200890fa 	slli	r4,r4,3
100148c0:	3022d77a 	srli	r17,r6,29
100148c4:	302890fa 	slli	r20,r6,3
100148c8:	18ff0044 	addi	r3,r3,-1023
100148cc:	8922b03a 	or	r17,r17,r4
100148d0:	000f883a 	mov	r7,zero
100148d4:	b5e6f03a 	xor	r19,r22,r23
100148d8:	3a4cb03a 	or	r6,r7,r9
100148dc:	008003c4 	movi	r2,15
100148e0:	9809883a 	mov	r4,r19
100148e4:	90c7c83a 	sub	r3,r18,r3
100148e8:	9cc03fcc 	andi	r19,r19,255
100148ec:	11809636 	bltu	r2,r6,10014b48 <__divdf3+0x334>
100148f0:	300c90ba 	slli	r6,r6,2
100148f4:	00840074 	movhi	r2,4097
100148f8:	10924204 	addi	r2,r2,18696
100148fc:	308d883a 	add	r6,r6,r2
10014900:	30800017 	ldw	r2,0(r6)
10014904:	1000683a 	jmp	r2
10014908:	10014b48 	cmpgei	zero,r2,1325
1001490c:	10014980 	call	11001498 <__alt_heap_start+0xf1e85c>
10014910:	10014b38 	rdprs	zero,r2,1324
10014914:	10014974 	orhi	zero,r2,1317
10014918:	10014b38 	rdprs	zero,r2,1324
1001491c:	10014b0c 	andi	zero,r2,1324
10014920:	10014b38 	rdprs	zero,r2,1324
10014924:	10014974 	orhi	zero,r2,1317
10014928:	10014980 	call	11001498 <__alt_heap_start+0xf1e85c>
1001492c:	10014980 	call	11001498 <__alt_heap_start+0xf1e85c>
10014930:	10014b0c 	andi	zero,r2,1324
10014934:	10014974 	orhi	zero,r2,1317
10014938:	10014964 	muli	zero,r2,1317
1001493c:	10014964 	muli	zero,r2,1317
10014940:	10014964 	muli	zero,r2,1317
10014944:	10014ed0 	cmplti	zero,r2,1339
10014948:	2404b03a 	or	r2,r4,r16
1001494c:	10006c1e 	bne	r2,zero,10014b00 <__divdf3+0x2ec>
10014950:	02400204 	movi	r9,8
10014954:	0021883a 	mov	r16,zero
10014958:	002b883a 	mov	r21,zero
1001495c:	01400084 	movi	r5,2
10014960:	003fca06 	br	1001488c <__alt_data_end+0xf801488c>
10014964:	8023883a 	mov	r17,r16
10014968:	a829883a 	mov	r20,r21
1001496c:	4039883a 	mov	fp,r8
10014970:	280f883a 	mov	r7,r5
10014974:	00800084 	movi	r2,2
10014978:	3881601e 	bne	r7,r2,10014efc <__divdf3+0x6e8>
1001497c:	e027883a 	mov	r19,fp
10014980:	9900004c 	andi	r4,r19,1
10014984:	0081ffc4 	movi	r2,2047
10014988:	0021883a 	mov	r16,zero
1001498c:	002b883a 	mov	r21,zero
10014990:	1004953a 	slli	r2,r2,20
10014994:	20c03fcc 	andi	r3,r4,255
10014998:	01400434 	movhi	r5,16
1001499c:	297fffc4 	addi	r5,r5,-1
100149a0:	180697fa 	slli	r3,r3,31
100149a4:	8160703a 	and	r16,r16,r5
100149a8:	80a0b03a 	or	r16,r16,r2
100149ac:	80c6b03a 	or	r3,r16,r3
100149b0:	a805883a 	mov	r2,r21
100149b4:	dfc00f17 	ldw	ra,60(sp)
100149b8:	df000e17 	ldw	fp,56(sp)
100149bc:	ddc00d17 	ldw	r23,52(sp)
100149c0:	dd800c17 	ldw	r22,48(sp)
100149c4:	dd400b17 	ldw	r21,44(sp)
100149c8:	dd000a17 	ldw	r20,40(sp)
100149cc:	dcc00917 	ldw	r19,36(sp)
100149d0:	dc800817 	ldw	r18,32(sp)
100149d4:	dc400717 	ldw	r17,28(sp)
100149d8:	dc000617 	ldw	r16,24(sp)
100149dc:	dec01004 	addi	sp,sp,64
100149e0:	f800283a 	ret
100149e4:	2404b03a 	or	r2,r4,r16
100149e8:	2023883a 	mov	r17,r4
100149ec:	10003f26 	beq	r2,zero,10014aec <__divdf3+0x2d8>
100149f0:	80015e26 	beq	r16,zero,10014f6c <__divdf3+0x758>
100149f4:	8009883a 	mov	r4,r16
100149f8:	d9800215 	stw	r6,8(sp)
100149fc:	d9c00515 	stw	r7,20(sp)
10014a00:	da000415 	stw	r8,16(sp)
10014a04:	00059700 	call	10005970 <__clzsi2>
10014a08:	d9800217 	ldw	r6,8(sp)
10014a0c:	d9c00517 	ldw	r7,20(sp)
10014a10:	da000417 	ldw	r8,16(sp)
10014a14:	10fffd44 	addi	r3,r2,-11
10014a18:	01000704 	movi	r4,28
10014a1c:	20c14f16 	blt	r4,r3,10014f5c <__divdf3+0x748>
10014a20:	01000744 	movi	r4,29
10014a24:	157ffe04 	addi	r21,r2,-8
10014a28:	20c9c83a 	sub	r4,r4,r3
10014a2c:	8560983a 	sll	r16,r16,r21
10014a30:	8908d83a 	srl	r4,r17,r4
10014a34:	8d6a983a 	sll	r21,r17,r21
10014a38:	2420b03a 	or	r16,r4,r16
10014a3c:	04bf0084 	movi	r18,-1022
10014a40:	90e5c83a 	sub	r18,r18,r3
10014a44:	0013883a 	mov	r9,zero
10014a48:	000b883a 	mov	r5,zero
10014a4c:	003f8f06 	br	1001488c <__alt_data_end+0xf801488c>
10014a50:	3444b03a 	or	r2,r6,r17
10014a54:	1000231e 	bne	r2,zero,10014ae4 <__divdf3+0x2d0>
10014a58:	0023883a 	mov	r17,zero
10014a5c:	0029883a 	mov	r20,zero
10014a60:	01c00084 	movi	r7,2
10014a64:	003f9b06 	br	100148d4 <__alt_data_end+0xf80148d4>
10014a68:	3444b03a 	or	r2,r6,r17
10014a6c:	10001926 	beq	r2,zero,10014ad4 <__divdf3+0x2c0>
10014a70:	88014b26 	beq	r17,zero,10014fa0 <__divdf3+0x78c>
10014a74:	8809883a 	mov	r4,r17
10014a78:	d9400115 	stw	r5,4(sp)
10014a7c:	d9800215 	stw	r6,8(sp)
10014a80:	da000415 	stw	r8,16(sp)
10014a84:	da400315 	stw	r9,12(sp)
10014a88:	00059700 	call	10005970 <__clzsi2>
10014a8c:	d9400117 	ldw	r5,4(sp)
10014a90:	d9800217 	ldw	r6,8(sp)
10014a94:	da000417 	ldw	r8,16(sp)
10014a98:	da400317 	ldw	r9,12(sp)
10014a9c:	10fffd44 	addi	r3,r2,-11
10014aa0:	01000704 	movi	r4,28
10014aa4:	20c13a16 	blt	r4,r3,10014f90 <__divdf3+0x77c>
10014aa8:	01000744 	movi	r4,29
10014aac:	153ffe04 	addi	r20,r2,-8
10014ab0:	20c9c83a 	sub	r4,r4,r3
10014ab4:	8d22983a 	sll	r17,r17,r20
10014ab8:	3108d83a 	srl	r4,r6,r4
10014abc:	3528983a 	sll	r20,r6,r20
10014ac0:	2462b03a 	or	r17,r4,r17
10014ac4:	00bf0084 	movi	r2,-1022
10014ac8:	10c7c83a 	sub	r3,r2,r3
10014acc:	000f883a 	mov	r7,zero
10014ad0:	003f8006 	br	100148d4 <__alt_data_end+0xf80148d4>
10014ad4:	0023883a 	mov	r17,zero
10014ad8:	0029883a 	mov	r20,zero
10014adc:	01c00044 	movi	r7,1
10014ae0:	003f7c06 	br	100148d4 <__alt_data_end+0xf80148d4>
10014ae4:	01c000c4 	movi	r7,3
10014ae8:	003f7a06 	br	100148d4 <__alt_data_end+0xf80148d4>
10014aec:	02400104 	movi	r9,4
10014af0:	0021883a 	mov	r16,zero
10014af4:	002b883a 	mov	r21,zero
10014af8:	01400044 	movi	r5,1
10014afc:	003f6306 	br	1001488c <__alt_data_end+0xf801488c>
10014b00:	02400304 	movi	r9,12
10014b04:	014000c4 	movi	r5,3
10014b08:	003f6006 	br	1001488c <__alt_data_end+0xf801488c>
10014b0c:	04000434 	movhi	r16,16
10014b10:	0009883a 	mov	r4,zero
10014b14:	843fffc4 	addi	r16,r16,-1
10014b18:	057fffc4 	movi	r21,-1
10014b1c:	0081ffc4 	movi	r2,2047
10014b20:	003f9b06 	br	10014990 <__alt_data_end+0xf8014990>
10014b24:	00c00044 	movi	r3,1
10014b28:	1887c83a 	sub	r3,r3,r2
10014b2c:	01000e04 	movi	r4,56
10014b30:	20c1530e 	bge	r4,r3,10015080 <__divdf3+0x86c>
10014b34:	9900004c 	andi	r4,r19,1
10014b38:	0005883a 	mov	r2,zero
10014b3c:	0021883a 	mov	r16,zero
10014b40:	002b883a 	mov	r21,zero
10014b44:	003f9206 	br	10014990 <__alt_data_end+0xf8014990>
10014b48:	8c012e36 	bltu	r17,r16,10015004 <__divdf3+0x7f0>
10014b4c:	84412c26 	beq	r16,r17,10015000 <__divdf3+0x7ec>
10014b50:	a82f883a 	mov	r23,r21
10014b54:	18ffffc4 	addi	r3,r3,-1
10014b58:	002b883a 	mov	r21,zero
10014b5c:	a00ad63a 	srli	r5,r20,24
10014b60:	8822923a 	slli	r17,r17,8
10014b64:	a028923a 	slli	r20,r20,8
10014b68:	8009883a 	mov	r4,r16
10014b6c:	896cb03a 	or	r22,r17,r5
10014b70:	dd000015 	stw	r20,0(sp)
10014b74:	b028d43a 	srli	r20,r22,16
10014b78:	d8c00215 	stw	r3,8(sp)
10014b7c:	b4bfffcc 	andi	r18,r22,65535
10014b80:	a00b883a 	mov	r5,r20
10014b84:	000245c0 	call	1000245c <__udivsi3>
10014b88:	100b883a 	mov	r5,r2
10014b8c:	9009883a 	mov	r4,r18
10014b90:	1023883a 	mov	r17,r2
10014b94:	00059d40 	call	100059d4 <__mulsi3>
10014b98:	8009883a 	mov	r4,r16
10014b9c:	a00b883a 	mov	r5,r20
10014ba0:	1039883a 	mov	fp,r2
10014ba4:	00024c00 	call	100024c0 <__umodsi3>
10014ba8:	1004943a 	slli	r2,r2,16
10014bac:	b808d43a 	srli	r4,r23,16
10014bb0:	d8c00217 	ldw	r3,8(sp)
10014bb4:	2084b03a 	or	r2,r4,r2
10014bb8:	1700062e 	bgeu	r2,fp,10014bd4 <__divdf3+0x3c0>
10014bbc:	1585883a 	add	r2,r2,r22
10014bc0:	893fffc4 	addi	r4,r17,-1
10014bc4:	15811d36 	bltu	r2,r22,1001503c <__divdf3+0x828>
10014bc8:	17011c2e 	bgeu	r2,fp,1001503c <__divdf3+0x828>
10014bcc:	8c7fff84 	addi	r17,r17,-2
10014bd0:	1585883a 	add	r2,r2,r22
10014bd4:	1739c83a 	sub	fp,r2,fp
10014bd8:	a00b883a 	mov	r5,r20
10014bdc:	e009883a 	mov	r4,fp
10014be0:	d8c00215 	stw	r3,8(sp)
10014be4:	000245c0 	call	1000245c <__udivsi3>
10014be8:	100b883a 	mov	r5,r2
10014bec:	9009883a 	mov	r4,r18
10014bf0:	1021883a 	mov	r16,r2
10014bf4:	00059d40 	call	100059d4 <__mulsi3>
10014bf8:	a00b883a 	mov	r5,r20
10014bfc:	e009883a 	mov	r4,fp
10014c00:	d8800415 	stw	r2,16(sp)
10014c04:	00024c00 	call	100024c0 <__umodsi3>
10014c08:	1004943a 	slli	r2,r2,16
10014c0c:	da000417 	ldw	r8,16(sp)
10014c10:	bdffffcc 	andi	r23,r23,65535
10014c14:	b884b03a 	or	r2,r23,r2
10014c18:	d8c00217 	ldw	r3,8(sp)
10014c1c:	1200062e 	bgeu	r2,r8,10014c38 <__divdf3+0x424>
10014c20:	1585883a 	add	r2,r2,r22
10014c24:	813fffc4 	addi	r4,r16,-1
10014c28:	15810236 	bltu	r2,r22,10015034 <__divdf3+0x820>
10014c2c:	1201012e 	bgeu	r2,r8,10015034 <__divdf3+0x820>
10014c30:	843fff84 	addi	r16,r16,-2
10014c34:	1585883a 	add	r2,r2,r22
10014c38:	8822943a 	slli	r17,r17,16
10014c3c:	d9800017 	ldw	r6,0(sp)
10014c40:	1211c83a 	sub	r8,r2,r8
10014c44:	8c22b03a 	or	r17,r17,r16
10014c48:	373fffcc 	andi	fp,r6,65535
10014c4c:	8abfffcc 	andi	r10,r17,65535
10014c50:	8820d43a 	srli	r16,r17,16
10014c54:	5009883a 	mov	r4,r10
10014c58:	e00b883a 	mov	r5,fp
10014c5c:	302ed43a 	srli	r23,r6,16
10014c60:	d8c00215 	stw	r3,8(sp)
10014c64:	da000415 	stw	r8,16(sp)
10014c68:	da800115 	stw	r10,4(sp)
10014c6c:	00059d40 	call	100059d4 <__mulsi3>
10014c70:	800b883a 	mov	r5,r16
10014c74:	e009883a 	mov	r4,fp
10014c78:	d8800515 	stw	r2,20(sp)
10014c7c:	00059d40 	call	100059d4 <__mulsi3>
10014c80:	8009883a 	mov	r4,r16
10014c84:	b80b883a 	mov	r5,r23
10014c88:	d8800315 	stw	r2,12(sp)
10014c8c:	00059d40 	call	100059d4 <__mulsi3>
10014c90:	da800117 	ldw	r10,4(sp)
10014c94:	b80b883a 	mov	r5,r23
10014c98:	1021883a 	mov	r16,r2
10014c9c:	5009883a 	mov	r4,r10
10014ca0:	00059d40 	call	100059d4 <__mulsi3>
10014ca4:	d9c00517 	ldw	r7,20(sp)
10014ca8:	da400317 	ldw	r9,12(sp)
10014cac:	d8c00217 	ldw	r3,8(sp)
10014cb0:	3808d43a 	srli	r4,r7,16
10014cb4:	1245883a 	add	r2,r2,r9
10014cb8:	da000417 	ldw	r8,16(sp)
10014cbc:	2085883a 	add	r2,r4,r2
10014cc0:	1240022e 	bgeu	r2,r9,10014ccc <__divdf3+0x4b8>
10014cc4:	01000074 	movhi	r4,1
10014cc8:	8121883a 	add	r16,r16,r4
10014ccc:	1008d43a 	srli	r4,r2,16
10014cd0:	1004943a 	slli	r2,r2,16
10014cd4:	39ffffcc 	andi	r7,r7,65535
10014cd8:	2409883a 	add	r4,r4,r16
10014cdc:	11c5883a 	add	r2,r2,r7
10014ce0:	4100bb36 	bltu	r8,r4,10014fd0 <__divdf3+0x7bc>
10014ce4:	4100d726 	beq	r8,r4,10015044 <__divdf3+0x830>
10014ce8:	4109c83a 	sub	r4,r8,r4
10014cec:	a8a1c83a 	sub	r16,r21,r2
10014cf0:	ac2b803a 	cmpltu	r21,r21,r16
10014cf4:	256bc83a 	sub	r21,r4,r21
10014cf8:	b540d926 	beq	r22,r21,10015060 <__divdf3+0x84c>
10014cfc:	a00b883a 	mov	r5,r20
10014d00:	a809883a 	mov	r4,r21
10014d04:	d8c00215 	stw	r3,8(sp)
10014d08:	000245c0 	call	1000245c <__udivsi3>
10014d0c:	100b883a 	mov	r5,r2
10014d10:	9009883a 	mov	r4,r18
10014d14:	d8800515 	stw	r2,20(sp)
10014d18:	00059d40 	call	100059d4 <__mulsi3>
10014d1c:	a809883a 	mov	r4,r21
10014d20:	a00b883a 	mov	r5,r20
10014d24:	d8800415 	stw	r2,16(sp)
10014d28:	00024c00 	call	100024c0 <__umodsi3>
10014d2c:	1004943a 	slli	r2,r2,16
10014d30:	8008d43a 	srli	r4,r16,16
10014d34:	da000417 	ldw	r8,16(sp)
10014d38:	d8c00217 	ldw	r3,8(sp)
10014d3c:	2084b03a 	or	r2,r4,r2
10014d40:	d9c00517 	ldw	r7,20(sp)
10014d44:	1200062e 	bgeu	r2,r8,10014d60 <__divdf3+0x54c>
10014d48:	1585883a 	add	r2,r2,r22
10014d4c:	393fffc4 	addi	r4,r7,-1
10014d50:	1580c536 	bltu	r2,r22,10015068 <__divdf3+0x854>
10014d54:	1200c42e 	bgeu	r2,r8,10015068 <__divdf3+0x854>
10014d58:	39ffff84 	addi	r7,r7,-2
10014d5c:	1585883a 	add	r2,r2,r22
10014d60:	122bc83a 	sub	r21,r2,r8
10014d64:	a00b883a 	mov	r5,r20
10014d68:	a809883a 	mov	r4,r21
10014d6c:	d8c00215 	stw	r3,8(sp)
10014d70:	d9c00515 	stw	r7,20(sp)
10014d74:	000245c0 	call	1000245c <__udivsi3>
10014d78:	9009883a 	mov	r4,r18
10014d7c:	100b883a 	mov	r5,r2
10014d80:	d8800415 	stw	r2,16(sp)
10014d84:	00059d40 	call	100059d4 <__mulsi3>
10014d88:	a809883a 	mov	r4,r21
10014d8c:	a00b883a 	mov	r5,r20
10014d90:	1025883a 	mov	r18,r2
10014d94:	00024c00 	call	100024c0 <__umodsi3>
10014d98:	1004943a 	slli	r2,r2,16
10014d9c:	813fffcc 	andi	r4,r16,65535
10014da0:	d8c00217 	ldw	r3,8(sp)
10014da4:	20a0b03a 	or	r16,r4,r2
10014da8:	d9c00517 	ldw	r7,20(sp)
10014dac:	da000417 	ldw	r8,16(sp)
10014db0:	8480062e 	bgeu	r16,r18,10014dcc <__divdf3+0x5b8>
10014db4:	85a1883a 	add	r16,r16,r22
10014db8:	40bfffc4 	addi	r2,r8,-1
10014dbc:	8580ac36 	bltu	r16,r22,10015070 <__divdf3+0x85c>
10014dc0:	8480ab2e 	bgeu	r16,r18,10015070 <__divdf3+0x85c>
10014dc4:	423fff84 	addi	r8,r8,-2
10014dc8:	85a1883a 	add	r16,r16,r22
10014dcc:	3804943a 	slli	r2,r7,16
10014dd0:	84a1c83a 	sub	r16,r16,r18
10014dd4:	e009883a 	mov	r4,fp
10014dd8:	1228b03a 	or	r20,r2,r8
10014ddc:	a1ffffcc 	andi	r7,r20,65535
10014de0:	a024d43a 	srli	r18,r20,16
10014de4:	380b883a 	mov	r5,r7
10014de8:	d8c00215 	stw	r3,8(sp)
10014dec:	d9c00515 	stw	r7,20(sp)
10014df0:	00059d40 	call	100059d4 <__mulsi3>
10014df4:	900b883a 	mov	r5,r18
10014df8:	e009883a 	mov	r4,fp
10014dfc:	102b883a 	mov	r21,r2
10014e00:	00059d40 	call	100059d4 <__mulsi3>
10014e04:	900b883a 	mov	r5,r18
10014e08:	b809883a 	mov	r4,r23
10014e0c:	1039883a 	mov	fp,r2
10014e10:	00059d40 	call	100059d4 <__mulsi3>
10014e14:	d9c00517 	ldw	r7,20(sp)
10014e18:	b80b883a 	mov	r5,r23
10014e1c:	1025883a 	mov	r18,r2
10014e20:	3809883a 	mov	r4,r7
10014e24:	00059d40 	call	100059d4 <__mulsi3>
10014e28:	a808d43a 	srli	r4,r21,16
10014e2c:	1705883a 	add	r2,r2,fp
10014e30:	d8c00217 	ldw	r3,8(sp)
10014e34:	2085883a 	add	r2,r4,r2
10014e38:	1700022e 	bgeu	r2,fp,10014e44 <__divdf3+0x630>
10014e3c:	01000074 	movhi	r4,1
10014e40:	9125883a 	add	r18,r18,r4
10014e44:	1008d43a 	srli	r4,r2,16
10014e48:	1004943a 	slli	r2,r2,16
10014e4c:	ad7fffcc 	andi	r21,r21,65535
10014e50:	2489883a 	add	r4,r4,r18
10014e54:	1545883a 	add	r2,r2,r21
10014e58:	81003836 	bltu	r16,r4,10014f3c <__divdf3+0x728>
10014e5c:	81003626 	beq	r16,r4,10014f38 <__divdf3+0x724>
10014e60:	a5000054 	ori	r20,r20,1
10014e64:	1880ffc4 	addi	r2,r3,1023
10014e68:	00bf2e0e 	bge	zero,r2,10014b24 <__alt_data_end+0xf8014b24>
10014e6c:	a10001cc 	andi	r4,r20,7
10014e70:	20000726 	beq	r4,zero,10014e90 <__divdf3+0x67c>
10014e74:	a10003cc 	andi	r4,r20,15
10014e78:	01400104 	movi	r5,4
10014e7c:	21400426 	beq	r4,r5,10014e90 <__divdf3+0x67c>
10014e80:	a149883a 	add	r4,r20,r5
10014e84:	2529803a 	cmpltu	r20,r4,r20
10014e88:	8d23883a 	add	r17,r17,r20
10014e8c:	2029883a 	mov	r20,r4
10014e90:	8900402c 	andhi	r4,r17,256
10014e94:	20000426 	beq	r4,zero,10014ea8 <__divdf3+0x694>
10014e98:	18810004 	addi	r2,r3,1024
10014e9c:	00ffc034 	movhi	r3,65280
10014ea0:	18ffffc4 	addi	r3,r3,-1
10014ea4:	88e2703a 	and	r17,r17,r3
10014ea8:	00c1ff84 	movi	r3,2046
10014eac:	18beb416 	blt	r3,r2,10014980 <__alt_data_end+0xf8014980>
10014eb0:	a028d0fa 	srli	r20,r20,3
10014eb4:	882a977a 	slli	r21,r17,29
10014eb8:	8820927a 	slli	r16,r17,9
10014ebc:	1081ffcc 	andi	r2,r2,2047
10014ec0:	ad2ab03a 	or	r21,r21,r20
10014ec4:	8020d33a 	srli	r16,r16,12
10014ec8:	9900004c 	andi	r4,r19,1
10014ecc:	003eb006 	br	10014990 <__alt_data_end+0xf8014990>
10014ed0:	8080022c 	andhi	r2,r16,8
10014ed4:	10001226 	beq	r2,zero,10014f20 <__divdf3+0x70c>
10014ed8:	8880022c 	andhi	r2,r17,8
10014edc:	1000101e 	bne	r2,zero,10014f20 <__divdf3+0x70c>
10014ee0:	00800434 	movhi	r2,16
10014ee4:	8c000234 	orhi	r16,r17,8
10014ee8:	10bfffc4 	addi	r2,r2,-1
10014eec:	b809883a 	mov	r4,r23
10014ef0:	80a0703a 	and	r16,r16,r2
10014ef4:	a02b883a 	mov	r21,r20
10014ef8:	003f0806 	br	10014b1c <__alt_data_end+0xf8014b1c>
10014efc:	008000c4 	movi	r2,3
10014f00:	3880b126 	beq	r7,r2,100151c8 <__divdf3+0x9b4>
10014f04:	00800044 	movi	r2,1
10014f08:	38805b1e 	bne	r7,r2,10015078 <__divdf3+0x864>
10014f0c:	e009883a 	mov	r4,fp
10014f10:	0005883a 	mov	r2,zero
10014f14:	0021883a 	mov	r16,zero
10014f18:	002b883a 	mov	r21,zero
10014f1c:	003e9c06 	br	10014990 <__alt_data_end+0xf8014990>
10014f20:	00800434 	movhi	r2,16
10014f24:	84000234 	orhi	r16,r16,8
10014f28:	10bfffc4 	addi	r2,r2,-1
10014f2c:	b009883a 	mov	r4,r22
10014f30:	80a0703a 	and	r16,r16,r2
10014f34:	003ef906 	br	10014b1c <__alt_data_end+0xf8014b1c>
10014f38:	103fca26 	beq	r2,zero,10014e64 <__alt_data_end+0xf8014e64>
10014f3c:	b421883a 	add	r16,r22,r16
10014f40:	a17fffc4 	addi	r5,r20,-1
10014f44:	8580422e 	bgeu	r16,r22,10015050 <__divdf3+0x83c>
10014f48:	2829883a 	mov	r20,r5
10014f4c:	813fc41e 	bne	r16,r4,10014e60 <__alt_data_end+0xf8014e60>
10014f50:	d9800017 	ldw	r6,0(sp)
10014f54:	30bfc21e 	bne	r6,r2,10014e60 <__alt_data_end+0xf8014e60>
10014f58:	003fc206 	br	10014e64 <__alt_data_end+0xf8014e64>
10014f5c:	10bff604 	addi	r2,r2,-40
10014f60:	88a0983a 	sll	r16,r17,r2
10014f64:	002b883a 	mov	r21,zero
10014f68:	003eb406 	br	10014a3c <__alt_data_end+0xf8014a3c>
10014f6c:	d9800215 	stw	r6,8(sp)
10014f70:	d9c00515 	stw	r7,20(sp)
10014f74:	da000415 	stw	r8,16(sp)
10014f78:	00059700 	call	10005970 <__clzsi2>
10014f7c:	10800804 	addi	r2,r2,32
10014f80:	da000417 	ldw	r8,16(sp)
10014f84:	d9c00517 	ldw	r7,20(sp)
10014f88:	d9800217 	ldw	r6,8(sp)
10014f8c:	003ea106 	br	10014a14 <__alt_data_end+0xf8014a14>
10014f90:	10bff604 	addi	r2,r2,-40
10014f94:	30a2983a 	sll	r17,r6,r2
10014f98:	0029883a 	mov	r20,zero
10014f9c:	003ec906 	br	10014ac4 <__alt_data_end+0xf8014ac4>
10014fa0:	3009883a 	mov	r4,r6
10014fa4:	d9400115 	stw	r5,4(sp)
10014fa8:	d9800215 	stw	r6,8(sp)
10014fac:	da000415 	stw	r8,16(sp)
10014fb0:	da400315 	stw	r9,12(sp)
10014fb4:	00059700 	call	10005970 <__clzsi2>
10014fb8:	10800804 	addi	r2,r2,32
10014fbc:	da400317 	ldw	r9,12(sp)
10014fc0:	da000417 	ldw	r8,16(sp)
10014fc4:	d9800217 	ldw	r6,8(sp)
10014fc8:	d9400117 	ldw	r5,4(sp)
10014fcc:	003eb306 	br	10014a9c <__alt_data_end+0xf8014a9c>
10014fd0:	d9800017 	ldw	r6,0(sp)
10014fd4:	a9ab883a 	add	r21,r21,r6
10014fd8:	a98b803a 	cmpltu	r5,r21,r6
10014fdc:	2d8b883a 	add	r5,r5,r22
10014fe0:	2a11883a 	add	r8,r5,r8
10014fe4:	897fffc4 	addi	r5,r17,-1
10014fe8:	b2000c2e 	bgeu	r22,r8,1001501c <__divdf3+0x808>
10014fec:	41003f36 	bltu	r8,r4,100150ec <__divdf3+0x8d8>
10014ff0:	22006c26 	beq	r4,r8,100151a4 <__divdf3+0x990>
10014ff4:	4109c83a 	sub	r4,r8,r4
10014ff8:	2823883a 	mov	r17,r5
10014ffc:	003f3b06 	br	10014cec <__alt_data_end+0xf8014cec>
10015000:	ad3ed336 	bltu	r21,r20,10014b50 <__alt_data_end+0xf8014b50>
10015004:	a804d07a 	srli	r2,r21,1
10015008:	802e97fa 	slli	r23,r16,31
1001500c:	a82a97fa 	slli	r21,r21,31
10015010:	8020d07a 	srli	r16,r16,1
10015014:	b8aeb03a 	or	r23,r23,r2
10015018:	003ed006 	br	10014b5c <__alt_data_end+0xf8014b5c>
1001501c:	b23ff51e 	bne	r22,r8,10014ff4 <__alt_data_end+0xf8014ff4>
10015020:	d9800017 	ldw	r6,0(sp)
10015024:	a9bff12e 	bgeu	r21,r6,10014fec <__alt_data_end+0xf8014fec>
10015028:	b109c83a 	sub	r4,r22,r4
1001502c:	2823883a 	mov	r17,r5
10015030:	003f2e06 	br	10014cec <__alt_data_end+0xf8014cec>
10015034:	2021883a 	mov	r16,r4
10015038:	003eff06 	br	10014c38 <__alt_data_end+0xf8014c38>
1001503c:	2023883a 	mov	r17,r4
10015040:	003ee406 	br	10014bd4 <__alt_data_end+0xf8014bd4>
10015044:	a8bfe236 	bltu	r21,r2,10014fd0 <__alt_data_end+0xf8014fd0>
10015048:	0009883a 	mov	r4,zero
1001504c:	003f2706 	br	10014cec <__alt_data_end+0xf8014cec>
10015050:	81002d36 	bltu	r16,r4,10015108 <__divdf3+0x8f4>
10015054:	24005626 	beq	r4,r16,100151b0 <__divdf3+0x99c>
10015058:	2829883a 	mov	r20,r5
1001505c:	003f8006 	br	10014e60 <__alt_data_end+0xf8014e60>
10015060:	053fffc4 	movi	r20,-1
10015064:	003f7f06 	br	10014e64 <__alt_data_end+0xf8014e64>
10015068:	200f883a 	mov	r7,r4
1001506c:	003f3c06 	br	10014d60 <__alt_data_end+0xf8014d60>
10015070:	1011883a 	mov	r8,r2
10015074:	003f5506 	br	10014dcc <__alt_data_end+0xf8014dcc>
10015078:	e027883a 	mov	r19,fp
1001507c:	003f7906 	br	10014e64 <__alt_data_end+0xf8014e64>
10015080:	010007c4 	movi	r4,31
10015084:	20c02816 	blt	r4,r3,10015128 <__divdf3+0x914>
10015088:	00800804 	movi	r2,32
1001508c:	10c5c83a 	sub	r2,r2,r3
10015090:	888a983a 	sll	r5,r17,r2
10015094:	a0c8d83a 	srl	r4,r20,r3
10015098:	a084983a 	sll	r2,r20,r2
1001509c:	88e2d83a 	srl	r17,r17,r3
100150a0:	2906b03a 	or	r3,r5,r4
100150a4:	1004c03a 	cmpne	r2,r2,zero
100150a8:	1886b03a 	or	r3,r3,r2
100150ac:	188001cc 	andi	r2,r3,7
100150b0:	10000726 	beq	r2,zero,100150d0 <__divdf3+0x8bc>
100150b4:	188003cc 	andi	r2,r3,15
100150b8:	01000104 	movi	r4,4
100150bc:	11000426 	beq	r2,r4,100150d0 <__divdf3+0x8bc>
100150c0:	1805883a 	mov	r2,r3
100150c4:	10c00104 	addi	r3,r2,4
100150c8:	1885803a 	cmpltu	r2,r3,r2
100150cc:	88a3883a 	add	r17,r17,r2
100150d0:	8880202c 	andhi	r2,r17,128
100150d4:	10002926 	beq	r2,zero,1001517c <__divdf3+0x968>
100150d8:	9900004c 	andi	r4,r19,1
100150dc:	00800044 	movi	r2,1
100150e0:	0021883a 	mov	r16,zero
100150e4:	002b883a 	mov	r21,zero
100150e8:	003e2906 	br	10014990 <__alt_data_end+0xf8014990>
100150ec:	d9800017 	ldw	r6,0(sp)
100150f0:	8c7fff84 	addi	r17,r17,-2
100150f4:	a9ab883a 	add	r21,r21,r6
100150f8:	a98b803a 	cmpltu	r5,r21,r6
100150fc:	2d8b883a 	add	r5,r5,r22
10015100:	2a11883a 	add	r8,r5,r8
10015104:	003ef806 	br	10014ce8 <__alt_data_end+0xf8014ce8>
10015108:	d9800017 	ldw	r6,0(sp)
1001510c:	318f883a 	add	r7,r6,r6
10015110:	398b803a 	cmpltu	r5,r7,r6
10015114:	2d8d883a 	add	r6,r5,r22
10015118:	81a1883a 	add	r16,r16,r6
1001511c:	a17fff84 	addi	r5,r20,-2
10015120:	d9c00015 	stw	r7,0(sp)
10015124:	003f8806 	br	10014f48 <__alt_data_end+0xf8014f48>
10015128:	013ff844 	movi	r4,-31
1001512c:	2085c83a 	sub	r2,r4,r2
10015130:	8888d83a 	srl	r4,r17,r2
10015134:	00800804 	movi	r2,32
10015138:	18802126 	beq	r3,r2,100151c0 <__divdf3+0x9ac>
1001513c:	04001004 	movi	r16,64
10015140:	80c7c83a 	sub	r3,r16,r3
10015144:	88e0983a 	sll	r16,r17,r3
10015148:	8504b03a 	or	r2,r16,r20
1001514c:	1004c03a 	cmpne	r2,r2,zero
10015150:	2084b03a 	or	r2,r4,r2
10015154:	144001cc 	andi	r17,r2,7
10015158:	88000d1e 	bne	r17,zero,10015190 <__divdf3+0x97c>
1001515c:	0021883a 	mov	r16,zero
10015160:	102ad0fa 	srli	r21,r2,3
10015164:	9900004c 	andi	r4,r19,1
10015168:	0005883a 	mov	r2,zero
1001516c:	ac6ab03a 	or	r21,r21,r17
10015170:	003e0706 	br	10014990 <__alt_data_end+0xf8014990>
10015174:	1007883a 	mov	r3,r2
10015178:	0023883a 	mov	r17,zero
1001517c:	8820927a 	slli	r16,r17,9
10015180:	1805883a 	mov	r2,r3
10015184:	8822977a 	slli	r17,r17,29
10015188:	8020d33a 	srli	r16,r16,12
1001518c:	003ff406 	br	10015160 <__alt_data_end+0xf8015160>
10015190:	10c003cc 	andi	r3,r2,15
10015194:	01000104 	movi	r4,4
10015198:	193ff626 	beq	r3,r4,10015174 <__alt_data_end+0xf8015174>
1001519c:	0023883a 	mov	r17,zero
100151a0:	003fc806 	br	100150c4 <__alt_data_end+0xf80150c4>
100151a4:	a8bfd136 	bltu	r21,r2,100150ec <__alt_data_end+0xf80150ec>
100151a8:	2823883a 	mov	r17,r5
100151ac:	003fa606 	br	10015048 <__alt_data_end+0xf8015048>
100151b0:	d9800017 	ldw	r6,0(sp)
100151b4:	30bfd436 	bltu	r6,r2,10015108 <__alt_data_end+0xf8015108>
100151b8:	2829883a 	mov	r20,r5
100151bc:	003f6406 	br	10014f50 <__alt_data_end+0xf8014f50>
100151c0:	0021883a 	mov	r16,zero
100151c4:	003fe006 	br	10015148 <__alt_data_end+0xf8015148>
100151c8:	00800434 	movhi	r2,16
100151cc:	8c000234 	orhi	r16,r17,8
100151d0:	10bfffc4 	addi	r2,r2,-1
100151d4:	e009883a 	mov	r4,fp
100151d8:	80a0703a 	and	r16,r16,r2
100151dc:	a02b883a 	mov	r21,r20
100151e0:	003e4e06 	br	10014b1c <__alt_data_end+0xf8014b1c>

100151e4 <__eqdf2>:
100151e4:	2804d53a 	srli	r2,r5,20
100151e8:	3806d53a 	srli	r3,r7,20
100151ec:	02000434 	movhi	r8,16
100151f0:	423fffc4 	addi	r8,r8,-1
100151f4:	1081ffcc 	andi	r2,r2,2047
100151f8:	0281ffc4 	movi	r10,2047
100151fc:	2a12703a 	and	r9,r5,r8
10015200:	18c1ffcc 	andi	r3,r3,2047
10015204:	3a10703a 	and	r8,r7,r8
10015208:	280ad7fa 	srli	r5,r5,31
1001520c:	380ed7fa 	srli	r7,r7,31
10015210:	12801026 	beq	r2,r10,10015254 <__eqdf2+0x70>
10015214:	0281ffc4 	movi	r10,2047
10015218:	1a800a26 	beq	r3,r10,10015244 <__eqdf2+0x60>
1001521c:	10c00226 	beq	r2,r3,10015228 <__eqdf2+0x44>
10015220:	00800044 	movi	r2,1
10015224:	f800283a 	ret
10015228:	4a3ffd1e 	bne	r9,r8,10015220 <__alt_data_end+0xf8015220>
1001522c:	21bffc1e 	bne	r4,r6,10015220 <__alt_data_end+0xf8015220>
10015230:	29c00c26 	beq	r5,r7,10015264 <__eqdf2+0x80>
10015234:	103ffa1e 	bne	r2,zero,10015220 <__alt_data_end+0xf8015220>
10015238:	2244b03a 	or	r2,r4,r9
1001523c:	1004c03a 	cmpne	r2,r2,zero
10015240:	f800283a 	ret
10015244:	3214b03a 	or	r10,r6,r8
10015248:	503ff426 	beq	r10,zero,1001521c <__alt_data_end+0xf801521c>
1001524c:	00800044 	movi	r2,1
10015250:	f800283a 	ret
10015254:	2254b03a 	or	r10,r4,r9
10015258:	503fee26 	beq	r10,zero,10015214 <__alt_data_end+0xf8015214>
1001525c:	00800044 	movi	r2,1
10015260:	f800283a 	ret
10015264:	0005883a 	mov	r2,zero
10015268:	f800283a 	ret

1001526c <__gedf2>:
1001526c:	2804d53a 	srli	r2,r5,20
10015270:	3806d53a 	srli	r3,r7,20
10015274:	02000434 	movhi	r8,16
10015278:	423fffc4 	addi	r8,r8,-1
1001527c:	1081ffcc 	andi	r2,r2,2047
10015280:	0241ffc4 	movi	r9,2047
10015284:	2a14703a 	and	r10,r5,r8
10015288:	18c1ffcc 	andi	r3,r3,2047
1001528c:	3a10703a 	and	r8,r7,r8
10015290:	280ad7fa 	srli	r5,r5,31
10015294:	380ed7fa 	srli	r7,r7,31
10015298:	12401d26 	beq	r2,r9,10015310 <__gedf2+0xa4>
1001529c:	0241ffc4 	movi	r9,2047
100152a0:	1a401226 	beq	r3,r9,100152ec <__gedf2+0x80>
100152a4:	1000081e 	bne	r2,zero,100152c8 <__gedf2+0x5c>
100152a8:	2296b03a 	or	r11,r4,r10
100152ac:	5813003a 	cmpeq	r9,r11,zero
100152b0:	1800091e 	bne	r3,zero,100152d8 <__gedf2+0x6c>
100152b4:	3218b03a 	or	r12,r6,r8
100152b8:	6000071e 	bne	r12,zero,100152d8 <__gedf2+0x6c>
100152bc:	0005883a 	mov	r2,zero
100152c0:	5800101e 	bne	r11,zero,10015304 <__gedf2+0x98>
100152c4:	f800283a 	ret
100152c8:	18000c1e 	bne	r3,zero,100152fc <__gedf2+0x90>
100152cc:	3212b03a 	or	r9,r6,r8
100152d0:	48000c26 	beq	r9,zero,10015304 <__gedf2+0x98>
100152d4:	0013883a 	mov	r9,zero
100152d8:	39c03fcc 	andi	r7,r7,255
100152dc:	48000826 	beq	r9,zero,10015300 <__gedf2+0x94>
100152e0:	38000926 	beq	r7,zero,10015308 <__gedf2+0x9c>
100152e4:	00800044 	movi	r2,1
100152e8:	f800283a 	ret
100152ec:	3212b03a 	or	r9,r6,r8
100152f0:	483fec26 	beq	r9,zero,100152a4 <__alt_data_end+0xf80152a4>
100152f4:	00bfff84 	movi	r2,-2
100152f8:	f800283a 	ret
100152fc:	39c03fcc 	andi	r7,r7,255
10015300:	29c00626 	beq	r5,r7,1001531c <__gedf2+0xb0>
10015304:	283ff726 	beq	r5,zero,100152e4 <__alt_data_end+0xf80152e4>
10015308:	00bfffc4 	movi	r2,-1
1001530c:	f800283a 	ret
10015310:	2292b03a 	or	r9,r4,r10
10015314:	483fe126 	beq	r9,zero,1001529c <__alt_data_end+0xf801529c>
10015318:	003ff606 	br	100152f4 <__alt_data_end+0xf80152f4>
1001531c:	18bff916 	blt	r3,r2,10015304 <__alt_data_end+0xf8015304>
10015320:	10c00316 	blt	r2,r3,10015330 <__gedf2+0xc4>
10015324:	42bff736 	bltu	r8,r10,10015304 <__alt_data_end+0xf8015304>
10015328:	52000326 	beq	r10,r8,10015338 <__gedf2+0xcc>
1001532c:	5200042e 	bgeu	r10,r8,10015340 <__gedf2+0xd4>
10015330:	283fec1e 	bne	r5,zero,100152e4 <__alt_data_end+0xf80152e4>
10015334:	003ff406 	br	10015308 <__alt_data_end+0xf8015308>
10015338:	313ff236 	bltu	r6,r4,10015304 <__alt_data_end+0xf8015304>
1001533c:	21bffc36 	bltu	r4,r6,10015330 <__alt_data_end+0xf8015330>
10015340:	0005883a 	mov	r2,zero
10015344:	f800283a 	ret

10015348 <__fixdfsi>:
10015348:	280cd53a 	srli	r6,r5,20
1001534c:	00c00434 	movhi	r3,16
10015350:	18ffffc4 	addi	r3,r3,-1
10015354:	3181ffcc 	andi	r6,r6,2047
10015358:	01c0ff84 	movi	r7,1022
1001535c:	28c6703a 	and	r3,r5,r3
10015360:	280ad7fa 	srli	r5,r5,31
10015364:	3980120e 	bge	r7,r6,100153b0 <__fixdfsi+0x68>
10015368:	00810744 	movi	r2,1053
1001536c:	11800c16 	blt	r2,r6,100153a0 <__fixdfsi+0x58>
10015370:	00810cc4 	movi	r2,1075
10015374:	1185c83a 	sub	r2,r2,r6
10015378:	01c007c4 	movi	r7,31
1001537c:	18c00434 	orhi	r3,r3,16
10015380:	38800d16 	blt	r7,r2,100153b8 <__fixdfsi+0x70>
10015384:	31befb44 	addi	r6,r6,-1043
10015388:	2084d83a 	srl	r2,r4,r2
1001538c:	1986983a 	sll	r3,r3,r6
10015390:	1884b03a 	or	r2,r3,r2
10015394:	28000726 	beq	r5,zero,100153b4 <__fixdfsi+0x6c>
10015398:	0085c83a 	sub	r2,zero,r2
1001539c:	f800283a 	ret
100153a0:	00a00034 	movhi	r2,32768
100153a4:	10bfffc4 	addi	r2,r2,-1
100153a8:	2885883a 	add	r2,r5,r2
100153ac:	f800283a 	ret
100153b0:	0005883a 	mov	r2,zero
100153b4:	f800283a 	ret
100153b8:	008104c4 	movi	r2,1043
100153bc:	1185c83a 	sub	r2,r2,r6
100153c0:	1884d83a 	srl	r2,r3,r2
100153c4:	003ff306 	br	10015394 <__alt_data_end+0xf8015394>

100153c8 <__floatsidf>:
100153c8:	defffd04 	addi	sp,sp,-12
100153cc:	dfc00215 	stw	ra,8(sp)
100153d0:	dc400115 	stw	r17,4(sp)
100153d4:	dc000015 	stw	r16,0(sp)
100153d8:	20002b26 	beq	r4,zero,10015488 <__floatsidf+0xc0>
100153dc:	2023883a 	mov	r17,r4
100153e0:	2020d7fa 	srli	r16,r4,31
100153e4:	20002d16 	blt	r4,zero,1001549c <__floatsidf+0xd4>
100153e8:	8809883a 	mov	r4,r17
100153ec:	00059700 	call	10005970 <__clzsi2>
100153f0:	01410784 	movi	r5,1054
100153f4:	288bc83a 	sub	r5,r5,r2
100153f8:	01010cc4 	movi	r4,1075
100153fc:	2149c83a 	sub	r4,r4,r5
10015400:	00c007c4 	movi	r3,31
10015404:	1900160e 	bge	r3,r4,10015460 <__floatsidf+0x98>
10015408:	00c104c4 	movi	r3,1043
1001540c:	1947c83a 	sub	r3,r3,r5
10015410:	88c6983a 	sll	r3,r17,r3
10015414:	00800434 	movhi	r2,16
10015418:	10bfffc4 	addi	r2,r2,-1
1001541c:	1886703a 	and	r3,r3,r2
10015420:	2941ffcc 	andi	r5,r5,2047
10015424:	800d883a 	mov	r6,r16
10015428:	0005883a 	mov	r2,zero
1001542c:	280a953a 	slli	r5,r5,20
10015430:	31803fcc 	andi	r6,r6,255
10015434:	01000434 	movhi	r4,16
10015438:	300c97fa 	slli	r6,r6,31
1001543c:	213fffc4 	addi	r4,r4,-1
10015440:	1906703a 	and	r3,r3,r4
10015444:	1946b03a 	or	r3,r3,r5
10015448:	1986b03a 	or	r3,r3,r6
1001544c:	dfc00217 	ldw	ra,8(sp)
10015450:	dc400117 	ldw	r17,4(sp)
10015454:	dc000017 	ldw	r16,0(sp)
10015458:	dec00304 	addi	sp,sp,12
1001545c:	f800283a 	ret
10015460:	00c002c4 	movi	r3,11
10015464:	1887c83a 	sub	r3,r3,r2
10015468:	88c6d83a 	srl	r3,r17,r3
1001546c:	8904983a 	sll	r2,r17,r4
10015470:	01000434 	movhi	r4,16
10015474:	213fffc4 	addi	r4,r4,-1
10015478:	2941ffcc 	andi	r5,r5,2047
1001547c:	1906703a 	and	r3,r3,r4
10015480:	800d883a 	mov	r6,r16
10015484:	003fe906 	br	1001542c <__alt_data_end+0xf801542c>
10015488:	000d883a 	mov	r6,zero
1001548c:	000b883a 	mov	r5,zero
10015490:	0007883a 	mov	r3,zero
10015494:	0005883a 	mov	r2,zero
10015498:	003fe406 	br	1001542c <__alt_data_end+0xf801542c>
1001549c:	0123c83a 	sub	r17,zero,r4
100154a0:	003fd106 	br	100153e8 <__alt_data_end+0xf80153e8>

100154a4 <__floatunsidf>:
100154a4:	defffe04 	addi	sp,sp,-8
100154a8:	dc000015 	stw	r16,0(sp)
100154ac:	dfc00115 	stw	ra,4(sp)
100154b0:	2021883a 	mov	r16,r4
100154b4:	20002226 	beq	r4,zero,10015540 <__floatunsidf+0x9c>
100154b8:	00059700 	call	10005970 <__clzsi2>
100154bc:	01010784 	movi	r4,1054
100154c0:	2089c83a 	sub	r4,r4,r2
100154c4:	01810cc4 	movi	r6,1075
100154c8:	310dc83a 	sub	r6,r6,r4
100154cc:	00c007c4 	movi	r3,31
100154d0:	1980120e 	bge	r3,r6,1001551c <__floatunsidf+0x78>
100154d4:	00c104c4 	movi	r3,1043
100154d8:	1907c83a 	sub	r3,r3,r4
100154dc:	80ca983a 	sll	r5,r16,r3
100154e0:	00800434 	movhi	r2,16
100154e4:	10bfffc4 	addi	r2,r2,-1
100154e8:	2101ffcc 	andi	r4,r4,2047
100154ec:	0021883a 	mov	r16,zero
100154f0:	288a703a 	and	r5,r5,r2
100154f4:	2008953a 	slli	r4,r4,20
100154f8:	00c00434 	movhi	r3,16
100154fc:	18ffffc4 	addi	r3,r3,-1
10015500:	28c6703a 	and	r3,r5,r3
10015504:	8005883a 	mov	r2,r16
10015508:	1906b03a 	or	r3,r3,r4
1001550c:	dfc00117 	ldw	ra,4(sp)
10015510:	dc000017 	ldw	r16,0(sp)
10015514:	dec00204 	addi	sp,sp,8
10015518:	f800283a 	ret
1001551c:	00c002c4 	movi	r3,11
10015520:	188bc83a 	sub	r5,r3,r2
10015524:	814ad83a 	srl	r5,r16,r5
10015528:	00c00434 	movhi	r3,16
1001552c:	18ffffc4 	addi	r3,r3,-1
10015530:	81a0983a 	sll	r16,r16,r6
10015534:	2101ffcc 	andi	r4,r4,2047
10015538:	28ca703a 	and	r5,r5,r3
1001553c:	003fed06 	br	100154f4 <__alt_data_end+0xf80154f4>
10015540:	0009883a 	mov	r4,zero
10015544:	000b883a 	mov	r5,zero
10015548:	003fea06 	br	100154f4 <__alt_data_end+0xf80154f4>

1001554c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1001554c:	defffe04 	addi	sp,sp,-8
10015550:	dfc00115 	stw	ra,4(sp)
10015554:	df000015 	stw	fp,0(sp)
10015558:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1001555c:	008403b4 	movhi	r2,4110
10015560:	10a45604 	addi	r2,r2,-28328
10015564:	10800017 	ldw	r2,0(r2)
10015568:	10000526 	beq	r2,zero,10015580 <alt_get_errno+0x34>
1001556c:	008403b4 	movhi	r2,4110
10015570:	10a45604 	addi	r2,r2,-28328
10015574:	10800017 	ldw	r2,0(r2)
10015578:	103ee83a 	callr	r2
1001557c:	00000206 	br	10015588 <alt_get_errno+0x3c>
10015580:	008403b4 	movhi	r2,4110
10015584:	108a9b04 	addi	r2,r2,10860
}
10015588:	e037883a 	mov	sp,fp
1001558c:	dfc00117 	ldw	ra,4(sp)
10015590:	df000017 	ldw	fp,0(sp)
10015594:	dec00204 	addi	sp,sp,8
10015598:	f800283a 	ret

1001559c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1001559c:	defffb04 	addi	sp,sp,-20
100155a0:	dfc00415 	stw	ra,16(sp)
100155a4:	df000315 	stw	fp,12(sp)
100155a8:	df000304 	addi	fp,sp,12
100155ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100155b0:	e0bfff17 	ldw	r2,-4(fp)
100155b4:	10000816 	blt	r2,zero,100155d8 <close+0x3c>
100155b8:	01400304 	movi	r5,12
100155bc:	e13fff17 	ldw	r4,-4(fp)
100155c0:	00059d40 	call	100059d4 <__mulsi3>
100155c4:	1007883a 	mov	r3,r2
100155c8:	00840374 	movhi	r2,4109
100155cc:	109fba04 	addi	r2,r2,32488
100155d0:	1885883a 	add	r2,r3,r2
100155d4:	00000106 	br	100155dc <close+0x40>
100155d8:	0005883a 	mov	r2,zero
100155dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
100155e0:	e0bffd17 	ldw	r2,-12(fp)
100155e4:	10001926 	beq	r2,zero,1001564c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
100155e8:	e0bffd17 	ldw	r2,-12(fp)
100155ec:	10800017 	ldw	r2,0(r2)
100155f0:	10800417 	ldw	r2,16(r2)
100155f4:	10000626 	beq	r2,zero,10015610 <close+0x74>
100155f8:	e0bffd17 	ldw	r2,-12(fp)
100155fc:	10800017 	ldw	r2,0(r2)
10015600:	10800417 	ldw	r2,16(r2)
10015604:	e13ffd17 	ldw	r4,-12(fp)
10015608:	103ee83a 	callr	r2
1001560c:	00000106 	br	10015614 <close+0x78>
10015610:	0005883a 	mov	r2,zero
10015614:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10015618:	e13fff17 	ldw	r4,-4(fp)
1001561c:	0015ed80 	call	10015ed8 <alt_release_fd>
    if (rval < 0)
10015620:	e0bffe17 	ldw	r2,-8(fp)
10015624:	1000070e 	bge	r2,zero,10015644 <close+0xa8>
    {
      ALT_ERRNO = -rval;
10015628:	001554c0 	call	1001554c <alt_get_errno>
1001562c:	1007883a 	mov	r3,r2
10015630:	e0bffe17 	ldw	r2,-8(fp)
10015634:	0085c83a 	sub	r2,zero,r2
10015638:	18800015 	stw	r2,0(r3)
      return -1;
1001563c:	00bfffc4 	movi	r2,-1
10015640:	00000706 	br	10015660 <close+0xc4>
    }
    return 0;
10015644:	0005883a 	mov	r2,zero
10015648:	00000506 	br	10015660 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1001564c:	001554c0 	call	1001554c <alt_get_errno>
10015650:	1007883a 	mov	r3,r2
10015654:	00801444 	movi	r2,81
10015658:	18800015 	stw	r2,0(r3)
    return -1;
1001565c:	00bfffc4 	movi	r2,-1
  }
}
10015660:	e037883a 	mov	sp,fp
10015664:	dfc00117 	ldw	ra,4(sp)
10015668:	df000017 	ldw	fp,0(sp)
1001566c:	dec00204 	addi	sp,sp,8
10015670:	f800283a 	ret

10015674 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10015674:	defffc04 	addi	sp,sp,-16
10015678:	df000315 	stw	fp,12(sp)
1001567c:	df000304 	addi	fp,sp,12
10015680:	e13ffd15 	stw	r4,-12(fp)
10015684:	e17ffe15 	stw	r5,-8(fp)
10015688:	e1bfff15 	stw	r6,-4(fp)
  return len;
1001568c:	e0bfff17 	ldw	r2,-4(fp)
}
10015690:	e037883a 	mov	sp,fp
10015694:	df000017 	ldw	fp,0(sp)
10015698:	dec00104 	addi	sp,sp,4
1001569c:	f800283a 	ret

100156a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100156a0:	defffe04 	addi	sp,sp,-8
100156a4:	dfc00115 	stw	ra,4(sp)
100156a8:	df000015 	stw	fp,0(sp)
100156ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100156b0:	008403b4 	movhi	r2,4110
100156b4:	10a45604 	addi	r2,r2,-28328
100156b8:	10800017 	ldw	r2,0(r2)
100156bc:	10000526 	beq	r2,zero,100156d4 <alt_get_errno+0x34>
100156c0:	008403b4 	movhi	r2,4110
100156c4:	10a45604 	addi	r2,r2,-28328
100156c8:	10800017 	ldw	r2,0(r2)
100156cc:	103ee83a 	callr	r2
100156d0:	00000206 	br	100156dc <alt_get_errno+0x3c>
100156d4:	008403b4 	movhi	r2,4110
100156d8:	108a9b04 	addi	r2,r2,10860
}
100156dc:	e037883a 	mov	sp,fp
100156e0:	dfc00117 	ldw	ra,4(sp)
100156e4:	df000017 	ldw	fp,0(sp)
100156e8:	dec00204 	addi	sp,sp,8
100156ec:	f800283a 	ret

100156f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
100156f0:	defffb04 	addi	sp,sp,-20
100156f4:	dfc00415 	stw	ra,16(sp)
100156f8:	df000315 	stw	fp,12(sp)
100156fc:	df000304 	addi	fp,sp,12
10015700:	e13ffe15 	stw	r4,-8(fp)
10015704:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015708:	e0bffe17 	ldw	r2,-8(fp)
1001570c:	10000816 	blt	r2,zero,10015730 <fstat+0x40>
10015710:	01400304 	movi	r5,12
10015714:	e13ffe17 	ldw	r4,-8(fp)
10015718:	00059d40 	call	100059d4 <__mulsi3>
1001571c:	1007883a 	mov	r3,r2
10015720:	00840374 	movhi	r2,4109
10015724:	109fba04 	addi	r2,r2,32488
10015728:	1885883a 	add	r2,r3,r2
1001572c:	00000106 	br	10015734 <fstat+0x44>
10015730:	0005883a 	mov	r2,zero
10015734:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
10015738:	e0bffd17 	ldw	r2,-12(fp)
1001573c:	10001026 	beq	r2,zero,10015780 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10015740:	e0bffd17 	ldw	r2,-12(fp)
10015744:	10800017 	ldw	r2,0(r2)
10015748:	10800817 	ldw	r2,32(r2)
1001574c:	10000726 	beq	r2,zero,1001576c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10015750:	e0bffd17 	ldw	r2,-12(fp)
10015754:	10800017 	ldw	r2,0(r2)
10015758:	10800817 	ldw	r2,32(r2)
1001575c:	e17fff17 	ldw	r5,-4(fp)
10015760:	e13ffd17 	ldw	r4,-12(fp)
10015764:	103ee83a 	callr	r2
10015768:	00000a06 	br	10015794 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1001576c:	e0bfff17 	ldw	r2,-4(fp)
10015770:	00c80004 	movi	r3,8192
10015774:	10c00115 	stw	r3,4(r2)
      return 0;
10015778:	0005883a 	mov	r2,zero
1001577c:	00000506 	br	10015794 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015780:	00156a00 	call	100156a0 <alt_get_errno>
10015784:	1007883a 	mov	r3,r2
10015788:	00801444 	movi	r2,81
1001578c:	18800015 	stw	r2,0(r3)
    return -1;
10015790:	00bfffc4 	movi	r2,-1
  }
}
10015794:	e037883a 	mov	sp,fp
10015798:	dfc00117 	ldw	ra,4(sp)
1001579c:	df000017 	ldw	fp,0(sp)
100157a0:	dec00204 	addi	sp,sp,8
100157a4:	f800283a 	ret

100157a8 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
100157a8:	defff404 	addi	sp,sp,-48
100157ac:	dfc00b15 	stw	ra,44(sp)
100157b0:	df000a15 	stw	fp,40(sp)
100157b4:	dd000915 	stw	r20,36(sp)
100157b8:	dcc00815 	stw	r19,32(sp)
100157bc:	dc800715 	stw	r18,28(sp)
100157c0:	dc400615 	stw	r17,24(sp)
100157c4:	dc000515 	stw	r16,20(sp)
100157c8:	df000a04 	addi	fp,sp,40
100157cc:	e13ff915 	stw	r4,-28(fp)
100157d0:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
100157d4:	e0bffa17 	ldw	r2,-24(fp)
100157d8:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
100157dc:	008403b4 	movhi	r2,4110
100157e0:	108aa804 	addi	r2,r2,10912
100157e4:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
100157e8:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
100157ec:	008403b4 	movhi	r2,4110
100157f0:	108aa704 	addi	r2,r2,10908
100157f4:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
100157f8:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
100157fc:	e0bff817 	ldw	r2,-32(fp)
10015800:	10005f26 	beq	r2,zero,10015980 <gettimeofday+0x1d8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
10015804:	d0866617 	ldw	r2,6552(gp)
10015808:	1029883a 	mov	r20,r2
1001580c:	e17ff817 	ldw	r5,-32(fp)
10015810:	e13ff717 	ldw	r4,-36(fp)
10015814:	000245c0 	call	1000245c <__udivsi3>
10015818:	a085883a 	add	r2,r20,r2
1001581c:	1007883a 	mov	r3,r2
10015820:	e0bff917 	ldw	r2,-28(fp)
10015824:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
10015828:	d0866717 	ldw	r2,6556(gp)
1001582c:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
10015830:	e0bff717 	ldw	r2,-36(fp)
10015834:	1021883a 	mov	r16,r2
10015838:	0023883a 	mov	r17,zero
1001583c:	e17ff817 	ldw	r5,-32(fp)
10015840:	010003f4 	movhi	r4,15
10015844:	21109004 	addi	r4,r4,16960
10015848:	000245c0 	call	1000245c <__udivsi3>
1001584c:	1025883a 	mov	r18,r2
10015850:	0027883a 	mov	r19,zero
10015854:	900d883a 	mov	r6,r18
10015858:	980f883a 	mov	r7,r19
1001585c:	8009883a 	mov	r4,r16
10015860:	880b883a 	mov	r5,r17
10015864:	00185ec0 	call	100185ec <__muldi3>
10015868:	1009883a 	mov	r4,r2
1001586c:	180b883a 	mov	r5,r3
10015870:	2005883a 	mov	r2,r4
10015874:	2807883a 	mov	r3,r5
10015878:	018003f4 	movhi	r6,15
1001587c:	31909004 	addi	r6,r6,16960
10015880:	000f883a 	mov	r7,zero
10015884:	1009883a 	mov	r4,r2
10015888:	180b883a 	mov	r5,r3
1001588c:	00142500 	call	10014250 <__umoddi3>
10015890:	1009883a 	mov	r4,r2
10015894:	180b883a 	mov	r5,r3
10015898:	2005883a 	mov	r2,r4
1001589c:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
100158a0:	a085883a 	add	r2,r20,r2
100158a4:	1007883a 	mov	r3,r2
100158a8:	e0bff917 	ldw	r2,-28(fp)
100158ac:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
100158b0:	00001406 	br	10015904 <gettimeofday+0x15c>
      if (ptimeval->tv_sec <= 0)
100158b4:	e0bff917 	ldw	r2,-28(fp)
100158b8:	10800017 	ldw	r2,0(r2)
100158bc:	00800516 	blt	zero,r2,100158d4 <gettimeofday+0x12c>
      {
          ptimeval->tv_sec = 0;
100158c0:	e0bff917 	ldw	r2,-28(fp)
100158c4:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
100158c8:	e0bff917 	ldw	r2,-28(fp)
100158cc:	10000115 	stw	zero,4(r2)
          break;
100158d0:	00000f06 	br	10015910 <gettimeofday+0x168>
      }
      else
      {
          ptimeval->tv_sec--;
100158d4:	e0bff917 	ldw	r2,-28(fp)
100158d8:	10800017 	ldw	r2,0(r2)
100158dc:	10ffffc4 	addi	r3,r2,-1
100158e0:	e0bff917 	ldw	r2,-28(fp)
100158e4:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
100158e8:	e0bff917 	ldw	r2,-28(fp)
100158ec:	10c00117 	ldw	r3,4(r2)
100158f0:	008003f4 	movhi	r2,15
100158f4:	10909004 	addi	r2,r2,16960
100158f8:	1887883a 	add	r3,r3,r2
100158fc:	e0bff917 	ldw	r2,-28(fp)
10015900:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10015904:	e0bff917 	ldw	r2,-28(fp)
10015908:	10800117 	ldw	r2,4(r2)
1001590c:	103fe916 	blt	r2,zero,100158b4 <__alt_data_end+0xf80158b4>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10015910:	00000c06 	br	10015944 <gettimeofday+0x19c>
      ptimeval->tv_sec++;
10015914:	e0bff917 	ldw	r2,-28(fp)
10015918:	10800017 	ldw	r2,0(r2)
1001591c:	10c00044 	addi	r3,r2,1
10015920:	e0bff917 	ldw	r2,-28(fp)
10015924:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
10015928:	e0bff917 	ldw	r2,-28(fp)
1001592c:	10c00117 	ldw	r3,4(r2)
10015930:	00bffc74 	movhi	r2,65521
10015934:	10af7004 	addi	r2,r2,-16960
10015938:	1887883a 	add	r3,r3,r2
1001593c:	e0bff917 	ldw	r2,-28(fp)
10015940:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10015944:	e0bff917 	ldw	r2,-28(fp)
10015948:	10c00117 	ldw	r3,4(r2)
1001594c:	008003f4 	movhi	r2,15
10015950:	10908fc4 	addi	r2,r2,16959
10015954:	10ffef16 	blt	r2,r3,10015914 <__alt_data_end+0xf8015914>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
10015958:	e0bff617 	ldw	r2,-40(fp)
1001595c:	10000626 	beq	r2,zero,10015978 <gettimeofday+0x1d0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
10015960:	d0c66417 	ldw	r3,6544(gp)
10015964:	e0bff617 	ldw	r2,-40(fp)
10015968:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
1001596c:	d0c66517 	ldw	r3,6548(gp)
10015970:	e0bff617 	ldw	r2,-40(fp)
10015974:	10c00115 	stw	r3,4(r2)
    }

    return 0;
10015978:	0005883a 	mov	r2,zero
1001597c:	00000106 	br	10015984 <gettimeofday+0x1dc>
  }

  return -ENOTSUP;
10015980:	00bfde84 	movi	r2,-134
}
10015984:	e6fffb04 	addi	sp,fp,-20
10015988:	dfc00617 	ldw	ra,24(sp)
1001598c:	df000517 	ldw	fp,20(sp)
10015990:	dd000417 	ldw	r20,16(sp)
10015994:	dcc00317 	ldw	r19,12(sp)
10015998:	dc800217 	ldw	r18,8(sp)
1001599c:	dc400117 	ldw	r17,4(sp)
100159a0:	dc000017 	ldw	r16,0(sp)
100159a4:	dec00704 	addi	sp,sp,28
100159a8:	f800283a 	ret

100159ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100159ac:	defffe04 	addi	sp,sp,-8
100159b0:	dfc00115 	stw	ra,4(sp)
100159b4:	df000015 	stw	fp,0(sp)
100159b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100159bc:	008403b4 	movhi	r2,4110
100159c0:	10a45604 	addi	r2,r2,-28328
100159c4:	10800017 	ldw	r2,0(r2)
100159c8:	10000526 	beq	r2,zero,100159e0 <alt_get_errno+0x34>
100159cc:	008403b4 	movhi	r2,4110
100159d0:	10a45604 	addi	r2,r2,-28328
100159d4:	10800017 	ldw	r2,0(r2)
100159d8:	103ee83a 	callr	r2
100159dc:	00000206 	br	100159e8 <alt_get_errno+0x3c>
100159e0:	008403b4 	movhi	r2,4110
100159e4:	108a9b04 	addi	r2,r2,10860
}
100159e8:	e037883a 	mov	sp,fp
100159ec:	dfc00117 	ldw	ra,4(sp)
100159f0:	df000017 	ldw	fp,0(sp)
100159f4:	dec00204 	addi	sp,sp,8
100159f8:	f800283a 	ret

100159fc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
100159fc:	deffed04 	addi	sp,sp,-76
10015a00:	dfc01215 	stw	ra,72(sp)
10015a04:	df001115 	stw	fp,68(sp)
10015a08:	df001104 	addi	fp,sp,68
10015a0c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015a10:	e0bfff17 	ldw	r2,-4(fp)
10015a14:	10000816 	blt	r2,zero,10015a38 <isatty+0x3c>
10015a18:	01400304 	movi	r5,12
10015a1c:	e13fff17 	ldw	r4,-4(fp)
10015a20:	00059d40 	call	100059d4 <__mulsi3>
10015a24:	1007883a 	mov	r3,r2
10015a28:	00840374 	movhi	r2,4109
10015a2c:	109fba04 	addi	r2,r2,32488
10015a30:	1885883a 	add	r2,r3,r2
10015a34:	00000106 	br	10015a3c <isatty+0x40>
10015a38:	0005883a 	mov	r2,zero
10015a3c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10015a40:	e0bfef17 	ldw	r2,-68(fp)
10015a44:	10000e26 	beq	r2,zero,10015a80 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10015a48:	e0bfef17 	ldw	r2,-68(fp)
10015a4c:	10800017 	ldw	r2,0(r2)
10015a50:	10800817 	ldw	r2,32(r2)
10015a54:	1000021e 	bne	r2,zero,10015a60 <isatty+0x64>
    {
      return 1;
10015a58:	00800044 	movi	r2,1
10015a5c:	00000d06 	br	10015a94 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10015a60:	e0bff004 	addi	r2,fp,-64
10015a64:	100b883a 	mov	r5,r2
10015a68:	e13fff17 	ldw	r4,-4(fp)
10015a6c:	00156f00 	call	100156f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10015a70:	e0bff117 	ldw	r2,-60(fp)
10015a74:	10880020 	cmpeqi	r2,r2,8192
10015a78:	10803fcc 	andi	r2,r2,255
10015a7c:	00000506 	br	10015a94 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015a80:	00159ac0 	call	100159ac <alt_get_errno>
10015a84:	1007883a 	mov	r3,r2
10015a88:	00801444 	movi	r2,81
10015a8c:	18800015 	stw	r2,0(r3)
    return 0;
10015a90:	0005883a 	mov	r2,zero
  }
}
10015a94:	e037883a 	mov	sp,fp
10015a98:	dfc00117 	ldw	ra,4(sp)
10015a9c:	df000017 	ldw	fp,0(sp)
10015aa0:	dec00204 	addi	sp,sp,8
10015aa4:	f800283a 	ret

10015aa8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10015aa8:	defffc04 	addi	sp,sp,-16
10015aac:	df000315 	stw	fp,12(sp)
10015ab0:	df000304 	addi	fp,sp,12
10015ab4:	e13ffd15 	stw	r4,-12(fp)
10015ab8:	e17ffe15 	stw	r5,-8(fp)
10015abc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10015ac0:	e0fffe17 	ldw	r3,-8(fp)
10015ac4:	e0bffd17 	ldw	r2,-12(fp)
10015ac8:	18800c26 	beq	r3,r2,10015afc <alt_load_section+0x54>
  {
    while( to != end )
10015acc:	00000806 	br	10015af0 <alt_load_section+0x48>
    {
      *to++ = *from++;
10015ad0:	e0bffe17 	ldw	r2,-8(fp)
10015ad4:	10c00104 	addi	r3,r2,4
10015ad8:	e0fffe15 	stw	r3,-8(fp)
10015adc:	e0fffd17 	ldw	r3,-12(fp)
10015ae0:	19000104 	addi	r4,r3,4
10015ae4:	e13ffd15 	stw	r4,-12(fp)
10015ae8:	18c00017 	ldw	r3,0(r3)
10015aec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10015af0:	e0fffe17 	ldw	r3,-8(fp)
10015af4:	e0bfff17 	ldw	r2,-4(fp)
10015af8:	18bff51e 	bne	r3,r2,10015ad0 <__alt_data_end+0xf8015ad0>
    {
      *to++ = *from++;
    }
  }
}
10015afc:	0001883a 	nop
10015b00:	e037883a 	mov	sp,fp
10015b04:	df000017 	ldw	fp,0(sp)
10015b08:	dec00104 	addi	sp,sp,4
10015b0c:	f800283a 	ret

10015b10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10015b10:	defffe04 	addi	sp,sp,-8
10015b14:	dfc00115 	stw	ra,4(sp)
10015b18:	df000015 	stw	fp,0(sp)
10015b1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10015b20:	018403b4 	movhi	r6,4110
10015b24:	31a46d04 	addi	r6,r6,-28236
10015b28:	01440374 	movhi	r5,4109
10015b2c:	297e4704 	addi	r5,r5,-1764
10015b30:	010403b4 	movhi	r4,4110
10015b34:	21246d04 	addi	r4,r4,-28236
10015b38:	0015aa80 	call	10015aa8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10015b3c:	01840034 	movhi	r6,4096
10015b40:	31808c04 	addi	r6,r6,560
10015b44:	01440034 	movhi	r5,4096
10015b48:	29400804 	addi	r5,r5,32
10015b4c:	01040034 	movhi	r4,4096
10015b50:	21000804 	addi	r4,r4,32
10015b54:	0015aa80 	call	10015aa8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10015b58:	01840374 	movhi	r6,4109
10015b5c:	31be4704 	addi	r6,r6,-1764
10015b60:	014400b4 	movhi	r5,4098
10015b64:	2961cb04 	addi	r5,r5,-30932
10015b68:	010400b4 	movhi	r4,4098
10015b6c:	2121cb04 	addi	r4,r4,-30932
10015b70:	0015aa80 	call	10015aa8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10015b74:	00174040 	call	10017404 <alt_dcache_flush_all>
  alt_icache_flush_all();
10015b78:	001765c0 	call	1001765c <alt_icache_flush_all>
}
10015b7c:	0001883a 	nop
10015b80:	e037883a 	mov	sp,fp
10015b84:	dfc00117 	ldw	ra,4(sp)
10015b88:	df000017 	ldw	fp,0(sp)
10015b8c:	dec00204 	addi	sp,sp,8
10015b90:	f800283a 	ret

10015b94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015b94:	defffe04 	addi	sp,sp,-8
10015b98:	dfc00115 	stw	ra,4(sp)
10015b9c:	df000015 	stw	fp,0(sp)
10015ba0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015ba4:	008403b4 	movhi	r2,4110
10015ba8:	10a45604 	addi	r2,r2,-28328
10015bac:	10800017 	ldw	r2,0(r2)
10015bb0:	10000526 	beq	r2,zero,10015bc8 <alt_get_errno+0x34>
10015bb4:	008403b4 	movhi	r2,4110
10015bb8:	10a45604 	addi	r2,r2,-28328
10015bbc:	10800017 	ldw	r2,0(r2)
10015bc0:	103ee83a 	callr	r2
10015bc4:	00000206 	br	10015bd0 <alt_get_errno+0x3c>
10015bc8:	008403b4 	movhi	r2,4110
10015bcc:	108a9b04 	addi	r2,r2,10860
}
10015bd0:	e037883a 	mov	sp,fp
10015bd4:	dfc00117 	ldw	ra,4(sp)
10015bd8:	df000017 	ldw	fp,0(sp)
10015bdc:	dec00204 	addi	sp,sp,8
10015be0:	f800283a 	ret

10015be4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10015be4:	defff904 	addi	sp,sp,-28
10015be8:	dfc00615 	stw	ra,24(sp)
10015bec:	df000515 	stw	fp,20(sp)
10015bf0:	df000504 	addi	fp,sp,20
10015bf4:	e13ffd15 	stw	r4,-12(fp)
10015bf8:	e17ffe15 	stw	r5,-8(fp)
10015bfc:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10015c00:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015c04:	e0bffd17 	ldw	r2,-12(fp)
10015c08:	10000816 	blt	r2,zero,10015c2c <lseek+0x48>
10015c0c:	01400304 	movi	r5,12
10015c10:	e13ffd17 	ldw	r4,-12(fp)
10015c14:	00059d40 	call	100059d4 <__mulsi3>
10015c18:	1007883a 	mov	r3,r2
10015c1c:	00840374 	movhi	r2,4109
10015c20:	109fba04 	addi	r2,r2,32488
10015c24:	1885883a 	add	r2,r3,r2
10015c28:	00000106 	br	10015c30 <lseek+0x4c>
10015c2c:	0005883a 	mov	r2,zero
10015c30:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10015c34:	e0bffc17 	ldw	r2,-16(fp)
10015c38:	10001026 	beq	r2,zero,10015c7c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10015c3c:	e0bffc17 	ldw	r2,-16(fp)
10015c40:	10800017 	ldw	r2,0(r2)
10015c44:	10800717 	ldw	r2,28(r2)
10015c48:	10000926 	beq	r2,zero,10015c70 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10015c4c:	e0bffc17 	ldw	r2,-16(fp)
10015c50:	10800017 	ldw	r2,0(r2)
10015c54:	10800717 	ldw	r2,28(r2)
10015c58:	e1bfff17 	ldw	r6,-4(fp)
10015c5c:	e17ffe17 	ldw	r5,-8(fp)
10015c60:	e13ffc17 	ldw	r4,-16(fp)
10015c64:	103ee83a 	callr	r2
10015c68:	e0bffb15 	stw	r2,-20(fp)
10015c6c:	00000506 	br	10015c84 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10015c70:	00bfde84 	movi	r2,-134
10015c74:	e0bffb15 	stw	r2,-20(fp)
10015c78:	00000206 	br	10015c84 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10015c7c:	00bfebc4 	movi	r2,-81
10015c80:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10015c84:	e0bffb17 	ldw	r2,-20(fp)
10015c88:	1000070e 	bge	r2,zero,10015ca8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10015c8c:	0015b940 	call	10015b94 <alt_get_errno>
10015c90:	1007883a 	mov	r3,r2
10015c94:	e0bffb17 	ldw	r2,-20(fp)
10015c98:	0085c83a 	sub	r2,zero,r2
10015c9c:	18800015 	stw	r2,0(r3)
    rc = -1;
10015ca0:	00bfffc4 	movi	r2,-1
10015ca4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10015ca8:	e0bffb17 	ldw	r2,-20(fp)
}
10015cac:	e037883a 	mov	sp,fp
10015cb0:	dfc00117 	ldw	ra,4(sp)
10015cb4:	df000017 	ldw	fp,0(sp)
10015cb8:	dec00204 	addi	sp,sp,8
10015cbc:	f800283a 	ret

10015cc0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10015cc0:	defffd04 	addi	sp,sp,-12
10015cc4:	dfc00215 	stw	ra,8(sp)
10015cc8:	df000115 	stw	fp,4(sp)
10015ccc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10015cd0:	0009883a 	mov	r4,zero
10015cd4:	00163380 	call	10016338 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10015cd8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10015cdc:	00163700 	call	10016370 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10015ce0:	01840374 	movhi	r6,4109
10015ce4:	31be3a04 	addi	r6,r6,-1816
10015ce8:	01440374 	movhi	r5,4109
10015cec:	297e3a04 	addi	r5,r5,-1816
10015cf0:	01040374 	movhi	r4,4109
10015cf4:	213e3a04 	addi	r4,r4,-1816
10015cf8:	0017a300 	call	10017a30 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10015cfc:	00175180 	call	10017518 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10015d00:	01040074 	movhi	r4,4097
10015d04:	211d5e04 	addi	r4,r4,30072
10015d08:	00180880 	call	10018088 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10015d0c:	d0866817 	ldw	r2,6560(gp)
10015d10:	d0c66917 	ldw	r3,6564(gp)
10015d14:	d1066a17 	ldw	r4,6568(gp)
10015d18:	200d883a 	mov	r6,r4
10015d1c:	180b883a 	mov	r5,r3
10015d20:	1009883a 	mov	r4,r2
10015d24:	00007480 	call	10000748 <main>
10015d28:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10015d2c:	01000044 	movi	r4,1
10015d30:	001559c0 	call	1001559c <close>
  exit (result);
10015d34:	e13fff17 	ldw	r4,-4(fp)
10015d38:	00180c40 	call	100180c4 <exit>

10015d3c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10015d3c:	defffe04 	addi	sp,sp,-8
10015d40:	df000115 	stw	fp,4(sp)
10015d44:	df000104 	addi	fp,sp,4
10015d48:	e13fff15 	stw	r4,-4(fp)
}
10015d4c:	0001883a 	nop
10015d50:	e037883a 	mov	sp,fp
10015d54:	df000017 	ldw	fp,0(sp)
10015d58:	dec00104 	addi	sp,sp,4
10015d5c:	f800283a 	ret

10015d60 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10015d60:	defffe04 	addi	sp,sp,-8
10015d64:	df000115 	stw	fp,4(sp)
10015d68:	df000104 	addi	fp,sp,4
10015d6c:	e13fff15 	stw	r4,-4(fp)
}
10015d70:	0001883a 	nop
10015d74:	e037883a 	mov	sp,fp
10015d78:	df000017 	ldw	fp,0(sp)
10015d7c:	dec00104 	addi	sp,sp,4
10015d80:	f800283a 	ret

10015d84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015d84:	defffe04 	addi	sp,sp,-8
10015d88:	dfc00115 	stw	ra,4(sp)
10015d8c:	df000015 	stw	fp,0(sp)
10015d90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015d94:	008403b4 	movhi	r2,4110
10015d98:	10a45604 	addi	r2,r2,-28328
10015d9c:	10800017 	ldw	r2,0(r2)
10015da0:	10000526 	beq	r2,zero,10015db8 <alt_get_errno+0x34>
10015da4:	008403b4 	movhi	r2,4110
10015da8:	10a45604 	addi	r2,r2,-28328
10015dac:	10800017 	ldw	r2,0(r2)
10015db0:	103ee83a 	callr	r2
10015db4:	00000206 	br	10015dc0 <alt_get_errno+0x3c>
10015db8:	008403b4 	movhi	r2,4110
10015dbc:	108a9b04 	addi	r2,r2,10860
}
10015dc0:	e037883a 	mov	sp,fp
10015dc4:	dfc00117 	ldw	ra,4(sp)
10015dc8:	df000017 	ldw	fp,0(sp)
10015dcc:	dec00204 	addi	sp,sp,8
10015dd0:	f800283a 	ret

10015dd4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10015dd4:	defff904 	addi	sp,sp,-28
10015dd8:	dfc00615 	stw	ra,24(sp)
10015ddc:	df000515 	stw	fp,20(sp)
10015de0:	df000504 	addi	fp,sp,20
10015de4:	e13ffd15 	stw	r4,-12(fp)
10015de8:	e17ffe15 	stw	r5,-8(fp)
10015dec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015df0:	e0bffd17 	ldw	r2,-12(fp)
10015df4:	10000816 	blt	r2,zero,10015e18 <read+0x44>
10015df8:	01400304 	movi	r5,12
10015dfc:	e13ffd17 	ldw	r4,-12(fp)
10015e00:	00059d40 	call	100059d4 <__mulsi3>
10015e04:	1007883a 	mov	r3,r2
10015e08:	00840374 	movhi	r2,4109
10015e0c:	109fba04 	addi	r2,r2,32488
10015e10:	1885883a 	add	r2,r3,r2
10015e14:	00000106 	br	10015e1c <read+0x48>
10015e18:	0005883a 	mov	r2,zero
10015e1c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10015e20:	e0bffb17 	ldw	r2,-20(fp)
10015e24:	10002226 	beq	r2,zero,10015eb0 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10015e28:	e0bffb17 	ldw	r2,-20(fp)
10015e2c:	10800217 	ldw	r2,8(r2)
10015e30:	108000cc 	andi	r2,r2,3
10015e34:	10800060 	cmpeqi	r2,r2,1
10015e38:	1000181e 	bne	r2,zero,10015e9c <read+0xc8>
        (fd->dev->read))
10015e3c:	e0bffb17 	ldw	r2,-20(fp)
10015e40:	10800017 	ldw	r2,0(r2)
10015e44:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10015e48:	10001426 	beq	r2,zero,10015e9c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10015e4c:	e0bffb17 	ldw	r2,-20(fp)
10015e50:	10800017 	ldw	r2,0(r2)
10015e54:	10800517 	ldw	r2,20(r2)
10015e58:	e0ffff17 	ldw	r3,-4(fp)
10015e5c:	180d883a 	mov	r6,r3
10015e60:	e17ffe17 	ldw	r5,-8(fp)
10015e64:	e13ffb17 	ldw	r4,-20(fp)
10015e68:	103ee83a 	callr	r2
10015e6c:	e0bffc15 	stw	r2,-16(fp)
10015e70:	e0bffc17 	ldw	r2,-16(fp)
10015e74:	1000070e 	bge	r2,zero,10015e94 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10015e78:	0015d840 	call	10015d84 <alt_get_errno>
10015e7c:	1007883a 	mov	r3,r2
10015e80:	e0bffc17 	ldw	r2,-16(fp)
10015e84:	0085c83a 	sub	r2,zero,r2
10015e88:	18800015 	stw	r2,0(r3)
          return -1;
10015e8c:	00bfffc4 	movi	r2,-1
10015e90:	00000c06 	br	10015ec4 <read+0xf0>
        }
        return rval;
10015e94:	e0bffc17 	ldw	r2,-16(fp)
10015e98:	00000a06 	br	10015ec4 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10015e9c:	0015d840 	call	10015d84 <alt_get_errno>
10015ea0:	1007883a 	mov	r3,r2
10015ea4:	00800344 	movi	r2,13
10015ea8:	18800015 	stw	r2,0(r3)
10015eac:	00000406 	br	10015ec0 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10015eb0:	0015d840 	call	10015d84 <alt_get_errno>
10015eb4:	1007883a 	mov	r3,r2
10015eb8:	00801444 	movi	r2,81
10015ebc:	18800015 	stw	r2,0(r3)
  }
  return -1;
10015ec0:	00bfffc4 	movi	r2,-1
}
10015ec4:	e037883a 	mov	sp,fp
10015ec8:	dfc00117 	ldw	ra,4(sp)
10015ecc:	df000017 	ldw	fp,0(sp)
10015ed0:	dec00204 	addi	sp,sp,8
10015ed4:	f800283a 	ret

10015ed8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10015ed8:	defffc04 	addi	sp,sp,-16
10015edc:	dfc00315 	stw	ra,12(sp)
10015ee0:	df000215 	stw	fp,8(sp)
10015ee4:	dc000115 	stw	r16,4(sp)
10015ee8:	df000204 	addi	fp,sp,8
10015eec:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10015ef0:	e0bffe17 	ldw	r2,-8(fp)
10015ef4:	108000d0 	cmplti	r2,r2,3
10015ef8:	1000111e 	bne	r2,zero,10015f40 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10015efc:	04040374 	movhi	r16,4109
10015f00:	841fba04 	addi	r16,r16,32488
10015f04:	e0bffe17 	ldw	r2,-8(fp)
10015f08:	01400304 	movi	r5,12
10015f0c:	1009883a 	mov	r4,r2
10015f10:	00059d40 	call	100059d4 <__mulsi3>
10015f14:	8085883a 	add	r2,r16,r2
10015f18:	10800204 	addi	r2,r2,8
10015f1c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10015f20:	04040374 	movhi	r16,4109
10015f24:	841fba04 	addi	r16,r16,32488
10015f28:	e0bffe17 	ldw	r2,-8(fp)
10015f2c:	01400304 	movi	r5,12
10015f30:	1009883a 	mov	r4,r2
10015f34:	00059d40 	call	100059d4 <__mulsi3>
10015f38:	8085883a 	add	r2,r16,r2
10015f3c:	10000015 	stw	zero,0(r2)
  }
}
10015f40:	0001883a 	nop
10015f44:	e6ffff04 	addi	sp,fp,-4
10015f48:	dfc00217 	ldw	ra,8(sp)
10015f4c:	df000117 	ldw	fp,4(sp)
10015f50:	dc000017 	ldw	r16,0(sp)
10015f54:	dec00304 	addi	sp,sp,12
10015f58:	f800283a 	ret

10015f5c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10015f5c:	defff904 	addi	sp,sp,-28
10015f60:	df000615 	stw	fp,24(sp)
10015f64:	df000604 	addi	fp,sp,24
10015f68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015f6c:	0005303a 	rdctl	r2,status
10015f70:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015f74:	e0fffe17 	ldw	r3,-8(fp)
10015f78:	00bfff84 	movi	r2,-2
10015f7c:	1884703a 	and	r2,r3,r2
10015f80:	1001703a 	wrctl	status,r2
  
  return context;
10015f84:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10015f88:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10015f8c:	d0a01b17 	ldw	r2,-32660(gp)
10015f90:	10c000c4 	addi	r3,r2,3
10015f94:	00bfff04 	movi	r2,-4
10015f98:	1884703a 	and	r2,r3,r2
10015f9c:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10015fa0:	d0e01b17 	ldw	r3,-32660(gp)
10015fa4:	e0bfff17 	ldw	r2,-4(fp)
10015fa8:	1887883a 	add	r3,r3,r2
10015fac:	00860034 	movhi	r2,6144
10015fb0:	10800004 	addi	r2,r2,0
10015fb4:	10c0062e 	bgeu	r2,r3,10015fd0 <sbrk+0x74>
10015fb8:	e0bffb17 	ldw	r2,-20(fp)
10015fbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015fc0:	e0bffa17 	ldw	r2,-24(fp)
10015fc4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10015fc8:	00bfffc4 	movi	r2,-1
10015fcc:	00000b06 	br	10015ffc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10015fd0:	d0a01b17 	ldw	r2,-32660(gp)
10015fd4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
10015fd8:	d0e01b17 	ldw	r3,-32660(gp)
10015fdc:	e0bfff17 	ldw	r2,-4(fp)
10015fe0:	1885883a 	add	r2,r3,r2
10015fe4:	d0a01b15 	stw	r2,-32660(gp)
10015fe8:	e0bffb17 	ldw	r2,-20(fp)
10015fec:	e0bffc15 	stw	r2,-16(fp)
10015ff0:	e0bffc17 	ldw	r2,-16(fp)
10015ff4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
10015ff8:	e0bffd17 	ldw	r2,-12(fp)
} 
10015ffc:	e037883a 	mov	sp,fp
10016000:	df000017 	ldw	fp,0(sp)
10016004:	dec00104 	addi	sp,sp,4
10016008:	f800283a 	ret

1001600c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
1001600c:	defffa04 	addi	sp,sp,-24
10016010:	df000515 	stw	fp,20(sp)
10016014:	df000504 	addi	fp,sp,20
10016018:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001601c:	0005303a 	rdctl	r2,status
10016020:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016024:	e0fffc17 	ldw	r3,-16(fp)
10016028:	00bfff84 	movi	r2,-2
1001602c:	1884703a 	and	r2,r3,r2
10016030:	1001703a 	wrctl	status,r2
  
  return context;
10016034:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10016038:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
1001603c:	e0bfff17 	ldw	r2,-4(fp)
10016040:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10016044:	e0bffd17 	ldw	r2,-12(fp)
10016048:	10800017 	ldw	r2,0(r2)
1001604c:	e0fffd17 	ldw	r3,-12(fp)
10016050:	18c00117 	ldw	r3,4(r3)
10016054:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10016058:	e0bffd17 	ldw	r2,-12(fp)
1001605c:	10800117 	ldw	r2,4(r2)
10016060:	e0fffd17 	ldw	r3,-12(fp)
10016064:	18c00017 	ldw	r3,0(r3)
10016068:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
1001606c:	e0bffd17 	ldw	r2,-12(fp)
10016070:	e0fffd17 	ldw	r3,-12(fp)
10016074:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10016078:	e0bffd17 	ldw	r2,-12(fp)
1001607c:	e0fffd17 	ldw	r3,-12(fp)
10016080:	10c00015 	stw	r3,0(r2)
10016084:	e0bffb17 	ldw	r2,-20(fp)
10016088:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001608c:	e0bffe17 	ldw	r2,-8(fp)
10016090:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10016094:	0001883a 	nop
10016098:	e037883a 	mov	sp,fp
1001609c:	df000017 	ldw	fp,0(sp)
100160a0:	dec00104 	addi	sp,sp,4
100160a4:	f800283a 	ret

100160a8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100160a8:	defffb04 	addi	sp,sp,-20
100160ac:	dfc00415 	stw	ra,16(sp)
100160b0:	df000315 	stw	fp,12(sp)
100160b4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100160b8:	d0a01c17 	ldw	r2,-32656(gp)
100160bc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100160c0:	d0866c17 	ldw	r2,6576(gp)
100160c4:	10800044 	addi	r2,r2,1
100160c8:	d0866c15 	stw	r2,6576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100160cc:	00002e06 	br	10016188 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
100160d0:	e0bffd17 	ldw	r2,-12(fp)
100160d4:	10800017 	ldw	r2,0(r2)
100160d8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
100160dc:	e0bffd17 	ldw	r2,-12(fp)
100160e0:	10800403 	ldbu	r2,16(r2)
100160e4:	10803fcc 	andi	r2,r2,255
100160e8:	10000426 	beq	r2,zero,100160fc <alt_tick+0x54>
100160ec:	d0866c17 	ldw	r2,6576(gp)
100160f0:	1000021e 	bne	r2,zero,100160fc <alt_tick+0x54>
    {
      alarm->rollover = 0;
100160f4:	e0bffd17 	ldw	r2,-12(fp)
100160f8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
100160fc:	e0bffd17 	ldw	r2,-12(fp)
10016100:	10800217 	ldw	r2,8(r2)
10016104:	d0c66c17 	ldw	r3,6576(gp)
10016108:	18801d36 	bltu	r3,r2,10016180 <alt_tick+0xd8>
1001610c:	e0bffd17 	ldw	r2,-12(fp)
10016110:	10800403 	ldbu	r2,16(r2)
10016114:	10803fcc 	andi	r2,r2,255
10016118:	1000191e 	bne	r2,zero,10016180 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
1001611c:	e0bffd17 	ldw	r2,-12(fp)
10016120:	10800317 	ldw	r2,12(r2)
10016124:	e0fffd17 	ldw	r3,-12(fp)
10016128:	18c00517 	ldw	r3,20(r3)
1001612c:	1809883a 	mov	r4,r3
10016130:	103ee83a 	callr	r2
10016134:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10016138:	e0bfff17 	ldw	r2,-4(fp)
1001613c:	1000031e 	bne	r2,zero,1001614c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10016140:	e13ffd17 	ldw	r4,-12(fp)
10016144:	001600c0 	call	1001600c <alt_alarm_stop>
10016148:	00000d06 	br	10016180 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
1001614c:	e0bffd17 	ldw	r2,-12(fp)
10016150:	10c00217 	ldw	r3,8(r2)
10016154:	e0bfff17 	ldw	r2,-4(fp)
10016158:	1887883a 	add	r3,r3,r2
1001615c:	e0bffd17 	ldw	r2,-12(fp)
10016160:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10016164:	e0bffd17 	ldw	r2,-12(fp)
10016168:	10c00217 	ldw	r3,8(r2)
1001616c:	d0866c17 	ldw	r2,6576(gp)
10016170:	1880032e 	bgeu	r3,r2,10016180 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10016174:	e0bffd17 	ldw	r2,-12(fp)
10016178:	00c00044 	movi	r3,1
1001617c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10016180:	e0bffe17 	ldw	r2,-8(fp)
10016184:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10016188:	e0fffd17 	ldw	r3,-12(fp)
1001618c:	d0a01c04 	addi	r2,gp,-32656
10016190:	18bfcf1e 	bne	r3,r2,100160d0 <__alt_data_end+0xf80160d0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10016194:	0001883a 	nop
}
10016198:	0001883a 	nop
1001619c:	e037883a 	mov	sp,fp
100161a0:	dfc00117 	ldw	ra,4(sp)
100161a4:	df000017 	ldw	fp,0(sp)
100161a8:	dec00204 	addi	sp,sp,8
100161ac:	f800283a 	ret

100161b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100161b0:	defffe04 	addi	sp,sp,-8
100161b4:	dfc00115 	stw	ra,4(sp)
100161b8:	df000015 	stw	fp,0(sp)
100161bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100161c0:	008403b4 	movhi	r2,4110
100161c4:	10a45604 	addi	r2,r2,-28328
100161c8:	10800017 	ldw	r2,0(r2)
100161cc:	10000526 	beq	r2,zero,100161e4 <alt_get_errno+0x34>
100161d0:	008403b4 	movhi	r2,4110
100161d4:	10a45604 	addi	r2,r2,-28328
100161d8:	10800017 	ldw	r2,0(r2)
100161dc:	103ee83a 	callr	r2
100161e0:	00000206 	br	100161ec <alt_get_errno+0x3c>
100161e4:	008403b4 	movhi	r2,4110
100161e8:	108a9b04 	addi	r2,r2,10860
}
100161ec:	e037883a 	mov	sp,fp
100161f0:	dfc00117 	ldw	ra,4(sp)
100161f4:	df000017 	ldw	fp,0(sp)
100161f8:	dec00204 	addi	sp,sp,8
100161fc:	f800283a 	ret

10016200 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10016200:	defff904 	addi	sp,sp,-28
10016204:	dfc00615 	stw	ra,24(sp)
10016208:	df000515 	stw	fp,20(sp)
1001620c:	df000504 	addi	fp,sp,20
10016210:	e13ffd15 	stw	r4,-12(fp)
10016214:	e17ffe15 	stw	r5,-8(fp)
10016218:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001621c:	e0bffd17 	ldw	r2,-12(fp)
10016220:	10000816 	blt	r2,zero,10016244 <write+0x44>
10016224:	01400304 	movi	r5,12
10016228:	e13ffd17 	ldw	r4,-12(fp)
1001622c:	00059d40 	call	100059d4 <__mulsi3>
10016230:	1007883a 	mov	r3,r2
10016234:	00840374 	movhi	r2,4109
10016238:	109fba04 	addi	r2,r2,32488
1001623c:	1885883a 	add	r2,r3,r2
10016240:	00000106 	br	10016248 <write+0x48>
10016244:	0005883a 	mov	r2,zero
10016248:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1001624c:	e0bffb17 	ldw	r2,-20(fp)
10016250:	10002126 	beq	r2,zero,100162d8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10016254:	e0bffb17 	ldw	r2,-20(fp)
10016258:	10800217 	ldw	r2,8(r2)
1001625c:	108000cc 	andi	r2,r2,3
10016260:	10001826 	beq	r2,zero,100162c4 <write+0xc4>
10016264:	e0bffb17 	ldw	r2,-20(fp)
10016268:	10800017 	ldw	r2,0(r2)
1001626c:	10800617 	ldw	r2,24(r2)
10016270:	10001426 	beq	r2,zero,100162c4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10016274:	e0bffb17 	ldw	r2,-20(fp)
10016278:	10800017 	ldw	r2,0(r2)
1001627c:	10800617 	ldw	r2,24(r2)
10016280:	e0ffff17 	ldw	r3,-4(fp)
10016284:	180d883a 	mov	r6,r3
10016288:	e17ffe17 	ldw	r5,-8(fp)
1001628c:	e13ffb17 	ldw	r4,-20(fp)
10016290:	103ee83a 	callr	r2
10016294:	e0bffc15 	stw	r2,-16(fp)
10016298:	e0bffc17 	ldw	r2,-16(fp)
1001629c:	1000070e 	bge	r2,zero,100162bc <write+0xbc>
      {
        ALT_ERRNO = -rval;
100162a0:	00161b00 	call	100161b0 <alt_get_errno>
100162a4:	1007883a 	mov	r3,r2
100162a8:	e0bffc17 	ldw	r2,-16(fp)
100162ac:	0085c83a 	sub	r2,zero,r2
100162b0:	18800015 	stw	r2,0(r3)
        return -1;
100162b4:	00bfffc4 	movi	r2,-1
100162b8:	00000c06 	br	100162ec <write+0xec>
      }
      return rval;
100162bc:	e0bffc17 	ldw	r2,-16(fp)
100162c0:	00000a06 	br	100162ec <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100162c4:	00161b00 	call	100161b0 <alt_get_errno>
100162c8:	1007883a 	mov	r3,r2
100162cc:	00800344 	movi	r2,13
100162d0:	18800015 	stw	r2,0(r3)
100162d4:	00000406 	br	100162e8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
100162d8:	00161b00 	call	100161b0 <alt_get_errno>
100162dc:	1007883a 	mov	r3,r2
100162e0:	00801444 	movi	r2,81
100162e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
100162e8:	00bfffc4 	movi	r2,-1
}
100162ec:	e037883a 	mov	sp,fp
100162f0:	dfc00117 	ldw	ra,4(sp)
100162f4:	df000017 	ldw	fp,0(sp)
100162f8:	dec00204 	addi	sp,sp,8
100162fc:	f800283a 	ret

10016300 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10016300:	defffd04 	addi	sp,sp,-12
10016304:	dfc00215 	stw	ra,8(sp)
10016308:	df000115 	stw	fp,4(sp)
1001630c:	df000104 	addi	fp,sp,4
10016310:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10016314:	014403b4 	movhi	r5,4110
10016318:	29645304 	addi	r5,r5,-28340
1001631c:	e13fff17 	ldw	r4,-4(fp)
10016320:	00174740 	call	10017474 <alt_dev_llist_insert>
}
10016324:	e037883a 	mov	sp,fp
10016328:	dfc00117 	ldw	ra,4(sp)
1001632c:	df000017 	ldw	fp,0(sp)
10016330:	dec00204 	addi	sp,sp,8
10016334:	f800283a 	ret

10016338 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10016338:	defffd04 	addi	sp,sp,-12
1001633c:	dfc00215 	stw	ra,8(sp)
10016340:	df000115 	stw	fp,4(sp)
10016344:	df000104 	addi	fp,sp,4
10016348:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1001634c:	0017d500 	call	10017d50 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10016350:	00800044 	movi	r2,1
10016354:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10016358:	0001883a 	nop
1001635c:	e037883a 	mov	sp,fp
10016360:	dfc00117 	ldw	ra,4(sp)
10016364:	df000017 	ldw	fp,0(sp)
10016368:	dec00204 	addi	sp,sp,8
1001636c:	f800283a 	ret

10016370 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10016370:	defffe04 	addi	sp,sp,-8
10016374:	dfc00115 	stw	ra,4(sp)
10016378:	df000015 	stw	fp,0(sp)
1001637c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10016380:	01800144 	movi	r6,5
10016384:	000b883a 	mov	r5,zero
10016388:	010403b4 	movhi	r4,4110
1001638c:	21202404 	addi	r4,r4,-32624
10016390:	001652c0 	call	1001652c <altera_avalon_jtag_uart_init>
10016394:	010403b4 	movhi	r4,4110
10016398:	21201a04 	addi	r4,r4,-32664
1001639c:	00163000 	call	10016300 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100163a0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
100163a4:	010403b4 	movhi	r4,4110
100163a8:	21243204 	addi	r4,r4,-28472
100163ac:	00175d80 	call	100175d8 <alt_fs_reg>
}
100163b0:	0001883a 	nop
100163b4:	e037883a 	mov	sp,fp
100163b8:	dfc00117 	ldw	ra,4(sp)
100163bc:	df000017 	ldw	fp,0(sp)
100163c0:	dec00204 	addi	sp,sp,8
100163c4:	f800283a 	ret

100163c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100163c8:	defffa04 	addi	sp,sp,-24
100163cc:	dfc00515 	stw	ra,20(sp)
100163d0:	df000415 	stw	fp,16(sp)
100163d4:	df000404 	addi	fp,sp,16
100163d8:	e13ffd15 	stw	r4,-12(fp)
100163dc:	e17ffe15 	stw	r5,-8(fp)
100163e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100163e4:	e0bffd17 	ldw	r2,-12(fp)
100163e8:	10800017 	ldw	r2,0(r2)
100163ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
100163f0:	e0bffc17 	ldw	r2,-16(fp)
100163f4:	10c00a04 	addi	r3,r2,40
100163f8:	e0bffd17 	ldw	r2,-12(fp)
100163fc:	10800217 	ldw	r2,8(r2)
10016400:	100f883a 	mov	r7,r2
10016404:	e1bfff17 	ldw	r6,-4(fp)
10016408:	e17ffe17 	ldw	r5,-8(fp)
1001640c:	1809883a 	mov	r4,r3
10016410:	0016a000 	call	10016a00 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10016414:	e037883a 	mov	sp,fp
10016418:	dfc00117 	ldw	ra,4(sp)
1001641c:	df000017 	ldw	fp,0(sp)
10016420:	dec00204 	addi	sp,sp,8
10016424:	f800283a 	ret

10016428 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
10016428:	defffa04 	addi	sp,sp,-24
1001642c:	dfc00515 	stw	ra,20(sp)
10016430:	df000415 	stw	fp,16(sp)
10016434:	df000404 	addi	fp,sp,16
10016438:	e13ffd15 	stw	r4,-12(fp)
1001643c:	e17ffe15 	stw	r5,-8(fp)
10016440:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016444:	e0bffd17 	ldw	r2,-12(fp)
10016448:	10800017 	ldw	r2,0(r2)
1001644c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10016450:	e0bffc17 	ldw	r2,-16(fp)
10016454:	10c00a04 	addi	r3,r2,40
10016458:	e0bffd17 	ldw	r2,-12(fp)
1001645c:	10800217 	ldw	r2,8(r2)
10016460:	100f883a 	mov	r7,r2
10016464:	e1bfff17 	ldw	r6,-4(fp)
10016468:	e17ffe17 	ldw	r5,-8(fp)
1001646c:	1809883a 	mov	r4,r3
10016470:	0016c1c0 	call	10016c1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10016474:	e037883a 	mov	sp,fp
10016478:	dfc00117 	ldw	ra,4(sp)
1001647c:	df000017 	ldw	fp,0(sp)
10016480:	dec00204 	addi	sp,sp,8
10016484:	f800283a 	ret

10016488 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
10016488:	defffc04 	addi	sp,sp,-16
1001648c:	dfc00315 	stw	ra,12(sp)
10016490:	df000215 	stw	fp,8(sp)
10016494:	df000204 	addi	fp,sp,8
10016498:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1001649c:	e0bfff17 	ldw	r2,-4(fp)
100164a0:	10800017 	ldw	r2,0(r2)
100164a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100164a8:	e0bffe17 	ldw	r2,-8(fp)
100164ac:	10c00a04 	addi	r3,r2,40
100164b0:	e0bfff17 	ldw	r2,-4(fp)
100164b4:	10800217 	ldw	r2,8(r2)
100164b8:	100b883a 	mov	r5,r2
100164bc:	1809883a 	mov	r4,r3
100164c0:	00168a80 	call	100168a8 <altera_avalon_jtag_uart_close>
}
100164c4:	e037883a 	mov	sp,fp
100164c8:	dfc00117 	ldw	ra,4(sp)
100164cc:	df000017 	ldw	fp,0(sp)
100164d0:	dec00204 	addi	sp,sp,8
100164d4:	f800283a 	ret

100164d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
100164d8:	defffa04 	addi	sp,sp,-24
100164dc:	dfc00515 	stw	ra,20(sp)
100164e0:	df000415 	stw	fp,16(sp)
100164e4:	df000404 	addi	fp,sp,16
100164e8:	e13ffd15 	stw	r4,-12(fp)
100164ec:	e17ffe15 	stw	r5,-8(fp)
100164f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
100164f4:	e0bffd17 	ldw	r2,-12(fp)
100164f8:	10800017 	ldw	r2,0(r2)
100164fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10016500:	e0bffc17 	ldw	r2,-16(fp)
10016504:	10800a04 	addi	r2,r2,40
10016508:	e1bfff17 	ldw	r6,-4(fp)
1001650c:	e17ffe17 	ldw	r5,-8(fp)
10016510:	1009883a 	mov	r4,r2
10016514:	00169100 	call	10016910 <altera_avalon_jtag_uart_ioctl>
}
10016518:	e037883a 	mov	sp,fp
1001651c:	dfc00117 	ldw	ra,4(sp)
10016520:	df000017 	ldw	fp,0(sp)
10016524:	dec00204 	addi	sp,sp,8
10016528:	f800283a 	ret

1001652c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1001652c:	defffa04 	addi	sp,sp,-24
10016530:	dfc00515 	stw	ra,20(sp)
10016534:	df000415 	stw	fp,16(sp)
10016538:	df000404 	addi	fp,sp,16
1001653c:	e13ffd15 	stw	r4,-12(fp)
10016540:	e17ffe15 	stw	r5,-8(fp)
10016544:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10016548:	e0bffd17 	ldw	r2,-12(fp)
1001654c:	00c00044 	movi	r3,1
10016550:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10016554:	e0bffd17 	ldw	r2,-12(fp)
10016558:	10800017 	ldw	r2,0(r2)
1001655c:	10800104 	addi	r2,r2,4
10016560:	1007883a 	mov	r3,r2
10016564:	e0bffd17 	ldw	r2,-12(fp)
10016568:	10800817 	ldw	r2,32(r2)
1001656c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10016570:	e0bffe17 	ldw	r2,-8(fp)
10016574:	e0ffff17 	ldw	r3,-4(fp)
10016578:	d8000015 	stw	zero,0(sp)
1001657c:	e1fffd17 	ldw	r7,-12(fp)
10016580:	01840074 	movhi	r6,4097
10016584:	31997d04 	addi	r6,r6,26100
10016588:	180b883a 	mov	r5,r3
1001658c:	1009883a 	mov	r4,r2
10016590:	001767c0 	call	1001767c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10016594:	e0bffd17 	ldw	r2,-12(fp)
10016598:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1001659c:	e0bffd17 	ldw	r2,-12(fp)
100165a0:	10c00204 	addi	r3,r2,8
100165a4:	008403b4 	movhi	r2,4110
100165a8:	108aa704 	addi	r2,r2,10908
100165ac:	10800017 	ldw	r2,0(r2)
100165b0:	e1fffd17 	ldw	r7,-12(fp)
100165b4:	01840074 	movhi	r6,4097
100165b8:	319a0004 	addi	r6,r6,26624
100165bc:	100b883a 	mov	r5,r2
100165c0:	1809883a 	mov	r4,r3
100165c4:	00172c40 	call	100172c4 <alt_alarm_start>
100165c8:	1000040e 	bge	r2,zero,100165dc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
100165cc:	e0fffd17 	ldw	r3,-12(fp)
100165d0:	00a00034 	movhi	r2,32768
100165d4:	10bfffc4 	addi	r2,r2,-1
100165d8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
100165dc:	0001883a 	nop
100165e0:	e037883a 	mov	sp,fp
100165e4:	dfc00117 	ldw	ra,4(sp)
100165e8:	df000017 	ldw	fp,0(sp)
100165ec:	dec00204 	addi	sp,sp,8
100165f0:	f800283a 	ret

100165f4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
100165f4:	defff804 	addi	sp,sp,-32
100165f8:	df000715 	stw	fp,28(sp)
100165fc:	df000704 	addi	fp,sp,28
10016600:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10016604:	e0bfff17 	ldw	r2,-4(fp)
10016608:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1001660c:	e0bffb17 	ldw	r2,-20(fp)
10016610:	10800017 	ldw	r2,0(r2)
10016614:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10016618:	e0bffc17 	ldw	r2,-16(fp)
1001661c:	10800104 	addi	r2,r2,4
10016620:	10800037 	ldwio	r2,0(r2)
10016624:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
10016628:	e0bffd17 	ldw	r2,-12(fp)
1001662c:	1080c00c 	andi	r2,r2,768
10016630:	10006d26 	beq	r2,zero,100167e8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10016634:	e0bffd17 	ldw	r2,-12(fp)
10016638:	1080400c 	andi	r2,r2,256
1001663c:	10003526 	beq	r2,zero,10016714 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10016640:	00800074 	movhi	r2,1
10016644:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016648:	e0bffb17 	ldw	r2,-20(fp)
1001664c:	10800a17 	ldw	r2,40(r2)
10016650:	10800044 	addi	r2,r2,1
10016654:	1081ffcc 	andi	r2,r2,2047
10016658:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1001665c:	e0bffb17 	ldw	r2,-20(fp)
10016660:	10c00b17 	ldw	r3,44(r2)
10016664:	e0bffe17 	ldw	r2,-8(fp)
10016668:	18801526 	beq	r3,r2,100166c0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1001666c:	e0bffc17 	ldw	r2,-16(fp)
10016670:	10800037 	ldwio	r2,0(r2)
10016674:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10016678:	e0bff917 	ldw	r2,-28(fp)
1001667c:	10a0000c 	andi	r2,r2,32768
10016680:	10001126 	beq	r2,zero,100166c8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10016684:	e0bffb17 	ldw	r2,-20(fp)
10016688:	10800a17 	ldw	r2,40(r2)
1001668c:	e0fff917 	ldw	r3,-28(fp)
10016690:	1809883a 	mov	r4,r3
10016694:	e0fffb17 	ldw	r3,-20(fp)
10016698:	1885883a 	add	r2,r3,r2
1001669c:	10800e04 	addi	r2,r2,56
100166a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100166a4:	e0bffb17 	ldw	r2,-20(fp)
100166a8:	10800a17 	ldw	r2,40(r2)
100166ac:	10800044 	addi	r2,r2,1
100166b0:	10c1ffcc 	andi	r3,r2,2047
100166b4:	e0bffb17 	ldw	r2,-20(fp)
100166b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100166bc:	003fe206 	br	10016648 <__alt_data_end+0xf8016648>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100166c0:	0001883a 	nop
100166c4:	00000106 	br	100166cc <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100166c8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
100166cc:	e0bff917 	ldw	r2,-28(fp)
100166d0:	10bfffec 	andhi	r2,r2,65535
100166d4:	10000f26 	beq	r2,zero,10016714 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100166d8:	e0bffb17 	ldw	r2,-20(fp)
100166dc:	10c00817 	ldw	r3,32(r2)
100166e0:	00bfff84 	movi	r2,-2
100166e4:	1886703a 	and	r3,r3,r2
100166e8:	e0bffb17 	ldw	r2,-20(fp)
100166ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
100166f0:	e0bffc17 	ldw	r2,-16(fp)
100166f4:	10800104 	addi	r2,r2,4
100166f8:	1007883a 	mov	r3,r2
100166fc:	e0bffb17 	ldw	r2,-20(fp)
10016700:	10800817 	ldw	r2,32(r2)
10016704:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10016708:	e0bffc17 	ldw	r2,-16(fp)
1001670c:	10800104 	addi	r2,r2,4
10016710:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10016714:	e0bffd17 	ldw	r2,-12(fp)
10016718:	1080800c 	andi	r2,r2,512
1001671c:	103fbe26 	beq	r2,zero,10016618 <__alt_data_end+0xf8016618>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10016720:	e0bffd17 	ldw	r2,-12(fp)
10016724:	1004d43a 	srli	r2,r2,16
10016728:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1001672c:	00001406 	br	10016780 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10016730:	e0bffc17 	ldw	r2,-16(fp)
10016734:	e0fffb17 	ldw	r3,-20(fp)
10016738:	18c00d17 	ldw	r3,52(r3)
1001673c:	e13ffb17 	ldw	r4,-20(fp)
10016740:	20c7883a 	add	r3,r4,r3
10016744:	18c20e04 	addi	r3,r3,2104
10016748:	18c00003 	ldbu	r3,0(r3)
1001674c:	18c03fcc 	andi	r3,r3,255
10016750:	18c0201c 	xori	r3,r3,128
10016754:	18ffe004 	addi	r3,r3,-128
10016758:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001675c:	e0bffb17 	ldw	r2,-20(fp)
10016760:	10800d17 	ldw	r2,52(r2)
10016764:	10800044 	addi	r2,r2,1
10016768:	10c1ffcc 	andi	r3,r2,2047
1001676c:	e0bffb17 	ldw	r2,-20(fp)
10016770:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10016774:	e0bffa17 	ldw	r2,-24(fp)
10016778:	10bfffc4 	addi	r2,r2,-1
1001677c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
10016780:	e0bffa17 	ldw	r2,-24(fp)
10016784:	10000526 	beq	r2,zero,1001679c <altera_avalon_jtag_uart_irq+0x1a8>
10016788:	e0bffb17 	ldw	r2,-20(fp)
1001678c:	10c00d17 	ldw	r3,52(r2)
10016790:	e0bffb17 	ldw	r2,-20(fp)
10016794:	10800c17 	ldw	r2,48(r2)
10016798:	18bfe51e 	bne	r3,r2,10016730 <__alt_data_end+0xf8016730>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1001679c:	e0bffa17 	ldw	r2,-24(fp)
100167a0:	103f9d26 	beq	r2,zero,10016618 <__alt_data_end+0xf8016618>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100167a4:	e0bffb17 	ldw	r2,-20(fp)
100167a8:	10c00817 	ldw	r3,32(r2)
100167ac:	00bfff44 	movi	r2,-3
100167b0:	1886703a 	and	r3,r3,r2
100167b4:	e0bffb17 	ldw	r2,-20(fp)
100167b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100167bc:	e0bffb17 	ldw	r2,-20(fp)
100167c0:	10800017 	ldw	r2,0(r2)
100167c4:	10800104 	addi	r2,r2,4
100167c8:	1007883a 	mov	r3,r2
100167cc:	e0bffb17 	ldw	r2,-20(fp)
100167d0:	10800817 	ldw	r2,32(r2)
100167d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100167d8:	e0bffc17 	ldw	r2,-16(fp)
100167dc:	10800104 	addi	r2,r2,4
100167e0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
100167e4:	003f8c06 	br	10016618 <__alt_data_end+0xf8016618>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
100167e8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
100167ec:	0001883a 	nop
100167f0:	e037883a 	mov	sp,fp
100167f4:	df000017 	ldw	fp,0(sp)
100167f8:	dec00104 	addi	sp,sp,4
100167fc:	f800283a 	ret

10016800 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10016800:	defff804 	addi	sp,sp,-32
10016804:	df000715 	stw	fp,28(sp)
10016808:	df000704 	addi	fp,sp,28
1001680c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10016810:	e0bffb17 	ldw	r2,-20(fp)
10016814:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10016818:	e0bff917 	ldw	r2,-28(fp)
1001681c:	10800017 	ldw	r2,0(r2)
10016820:	10800104 	addi	r2,r2,4
10016824:	10800037 	ldwio	r2,0(r2)
10016828:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1001682c:	e0bffa17 	ldw	r2,-24(fp)
10016830:	1081000c 	andi	r2,r2,1024
10016834:	10000b26 	beq	r2,zero,10016864 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10016838:	e0bff917 	ldw	r2,-28(fp)
1001683c:	10800017 	ldw	r2,0(r2)
10016840:	10800104 	addi	r2,r2,4
10016844:	1007883a 	mov	r3,r2
10016848:	e0bff917 	ldw	r2,-28(fp)
1001684c:	10800817 	ldw	r2,32(r2)
10016850:	10810014 	ori	r2,r2,1024
10016854:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10016858:	e0bff917 	ldw	r2,-28(fp)
1001685c:	10000915 	stw	zero,36(r2)
10016860:	00000a06 	br	1001688c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10016864:	e0bff917 	ldw	r2,-28(fp)
10016868:	10c00917 	ldw	r3,36(r2)
1001686c:	00a00034 	movhi	r2,32768
10016870:	10bfff04 	addi	r2,r2,-4
10016874:	10c00536 	bltu	r2,r3,1001688c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10016878:	e0bff917 	ldw	r2,-28(fp)
1001687c:	10800917 	ldw	r2,36(r2)
10016880:	10c00044 	addi	r3,r2,1
10016884:	e0bff917 	ldw	r2,-28(fp)
10016888:	10c00915 	stw	r3,36(r2)
1001688c:	008403b4 	movhi	r2,4110
10016890:	108aa704 	addi	r2,r2,10908
10016894:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10016898:	e037883a 	mov	sp,fp
1001689c:	df000017 	ldw	fp,0(sp)
100168a0:	dec00104 	addi	sp,sp,4
100168a4:	f800283a 	ret

100168a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100168a8:	defffd04 	addi	sp,sp,-12
100168ac:	df000215 	stw	fp,8(sp)
100168b0:	df000204 	addi	fp,sp,8
100168b4:	e13ffe15 	stw	r4,-8(fp)
100168b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100168bc:	00000506 	br	100168d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100168c0:	e0bfff17 	ldw	r2,-4(fp)
100168c4:	1090000c 	andi	r2,r2,16384
100168c8:	10000226 	beq	r2,zero,100168d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
100168cc:	00bffd44 	movi	r2,-11
100168d0:	00000b06 	br	10016900 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100168d4:	e0bffe17 	ldw	r2,-8(fp)
100168d8:	10c00d17 	ldw	r3,52(r2)
100168dc:	e0bffe17 	ldw	r2,-8(fp)
100168e0:	10800c17 	ldw	r2,48(r2)
100168e4:	18800526 	beq	r3,r2,100168fc <altera_avalon_jtag_uart_close+0x54>
100168e8:	e0bffe17 	ldw	r2,-8(fp)
100168ec:	10c00917 	ldw	r3,36(r2)
100168f0:	e0bffe17 	ldw	r2,-8(fp)
100168f4:	10800117 	ldw	r2,4(r2)
100168f8:	18bff136 	bltu	r3,r2,100168c0 <__alt_data_end+0xf80168c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
100168fc:	0005883a 	mov	r2,zero
}
10016900:	e037883a 	mov	sp,fp
10016904:	df000017 	ldw	fp,0(sp)
10016908:	dec00104 	addi	sp,sp,4
1001690c:	f800283a 	ret

10016910 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10016910:	defffa04 	addi	sp,sp,-24
10016914:	df000515 	stw	fp,20(sp)
10016918:	df000504 	addi	fp,sp,20
1001691c:	e13ffd15 	stw	r4,-12(fp)
10016920:	e17ffe15 	stw	r5,-8(fp)
10016924:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10016928:	00bff9c4 	movi	r2,-25
1001692c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10016930:	e0bffe17 	ldw	r2,-8(fp)
10016934:	10da8060 	cmpeqi	r3,r2,27137
10016938:	1800031e 	bne	r3,zero,10016948 <altera_avalon_jtag_uart_ioctl+0x38>
1001693c:	109a80a0 	cmpeqi	r2,r2,27138
10016940:	1000181e 	bne	r2,zero,100169a4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10016944:	00002906 	br	100169ec <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10016948:	e0bffd17 	ldw	r2,-12(fp)
1001694c:	10c00117 	ldw	r3,4(r2)
10016950:	00a00034 	movhi	r2,32768
10016954:	10bfffc4 	addi	r2,r2,-1
10016958:	18802126 	beq	r3,r2,100169e0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
1001695c:	e0bfff17 	ldw	r2,-4(fp)
10016960:	10800017 	ldw	r2,0(r2)
10016964:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10016968:	e0bffc17 	ldw	r2,-16(fp)
1001696c:	10800090 	cmplti	r2,r2,2
10016970:	1000061e 	bne	r2,zero,1001698c <altera_avalon_jtag_uart_ioctl+0x7c>
10016974:	e0fffc17 	ldw	r3,-16(fp)
10016978:	00a00034 	movhi	r2,32768
1001697c:	10bfffc4 	addi	r2,r2,-1
10016980:	18800226 	beq	r3,r2,1001698c <altera_avalon_jtag_uart_ioctl+0x7c>
10016984:	e0bffc17 	ldw	r2,-16(fp)
10016988:	00000206 	br	10016994 <altera_avalon_jtag_uart_ioctl+0x84>
1001698c:	00a00034 	movhi	r2,32768
10016990:	10bfff84 	addi	r2,r2,-2
10016994:	e0fffd17 	ldw	r3,-12(fp)
10016998:	18800115 	stw	r2,4(r3)
      rc = 0;
1001699c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100169a0:	00000f06 	br	100169e0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100169a4:	e0bffd17 	ldw	r2,-12(fp)
100169a8:	10c00117 	ldw	r3,4(r2)
100169ac:	00a00034 	movhi	r2,32768
100169b0:	10bfffc4 	addi	r2,r2,-1
100169b4:	18800c26 	beq	r3,r2,100169e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100169b8:	e0bffd17 	ldw	r2,-12(fp)
100169bc:	10c00917 	ldw	r3,36(r2)
100169c0:	e0bffd17 	ldw	r2,-12(fp)
100169c4:	10800117 	ldw	r2,4(r2)
100169c8:	1885803a 	cmpltu	r2,r3,r2
100169cc:	10c03fcc 	andi	r3,r2,255
100169d0:	e0bfff17 	ldw	r2,-4(fp)
100169d4:	10c00015 	stw	r3,0(r2)
      rc = 0;
100169d8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100169dc:	00000206 	br	100169e8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
100169e0:	0001883a 	nop
100169e4:	00000106 	br	100169ec <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
100169e8:	0001883a 	nop

  default:
    break;
  }

  return rc;
100169ec:	e0bffb17 	ldw	r2,-20(fp)
}
100169f0:	e037883a 	mov	sp,fp
100169f4:	df000017 	ldw	fp,0(sp)
100169f8:	dec00104 	addi	sp,sp,4
100169fc:	f800283a 	ret

10016a00 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10016a00:	defff304 	addi	sp,sp,-52
10016a04:	dfc00c15 	stw	ra,48(sp)
10016a08:	df000b15 	stw	fp,44(sp)
10016a0c:	df000b04 	addi	fp,sp,44
10016a10:	e13ffc15 	stw	r4,-16(fp)
10016a14:	e17ffd15 	stw	r5,-12(fp)
10016a18:	e1bffe15 	stw	r6,-8(fp)
10016a1c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10016a20:	e0bffd17 	ldw	r2,-12(fp)
10016a24:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10016a28:	00004706 	br	10016b48 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10016a2c:	e0bffc17 	ldw	r2,-16(fp)
10016a30:	10800a17 	ldw	r2,40(r2)
10016a34:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10016a38:	e0bffc17 	ldw	r2,-16(fp)
10016a3c:	10800b17 	ldw	r2,44(r2)
10016a40:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10016a44:	e0fff717 	ldw	r3,-36(fp)
10016a48:	e0bff817 	ldw	r2,-32(fp)
10016a4c:	18800536 	bltu	r3,r2,10016a64 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10016a50:	e0fff717 	ldw	r3,-36(fp)
10016a54:	e0bff817 	ldw	r2,-32(fp)
10016a58:	1885c83a 	sub	r2,r3,r2
10016a5c:	e0bff615 	stw	r2,-40(fp)
10016a60:	00000406 	br	10016a74 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10016a64:	00c20004 	movi	r3,2048
10016a68:	e0bff817 	ldw	r2,-32(fp)
10016a6c:	1885c83a 	sub	r2,r3,r2
10016a70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016a74:	e0bff617 	ldw	r2,-40(fp)
10016a78:	10001e26 	beq	r2,zero,10016af4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10016a7c:	e0fffe17 	ldw	r3,-8(fp)
10016a80:	e0bff617 	ldw	r2,-40(fp)
10016a84:	1880022e 	bgeu	r3,r2,10016a90 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10016a88:	e0bffe17 	ldw	r2,-8(fp)
10016a8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10016a90:	e0bffc17 	ldw	r2,-16(fp)
10016a94:	10c00e04 	addi	r3,r2,56
10016a98:	e0bff817 	ldw	r2,-32(fp)
10016a9c:	1885883a 	add	r2,r3,r2
10016aa0:	e1bff617 	ldw	r6,-40(fp)
10016aa4:	100b883a 	mov	r5,r2
10016aa8:	e13ff517 	ldw	r4,-44(fp)
10016aac:	000f2700 	call	1000f270 <memcpy>
      ptr   += n;
10016ab0:	e0fff517 	ldw	r3,-44(fp)
10016ab4:	e0bff617 	ldw	r2,-40(fp)
10016ab8:	1885883a 	add	r2,r3,r2
10016abc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10016ac0:	e0fffe17 	ldw	r3,-8(fp)
10016ac4:	e0bff617 	ldw	r2,-40(fp)
10016ac8:	1885c83a 	sub	r2,r3,r2
10016acc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016ad0:	e0fff817 	ldw	r3,-32(fp)
10016ad4:	e0bff617 	ldw	r2,-40(fp)
10016ad8:	1885883a 	add	r2,r3,r2
10016adc:	10c1ffcc 	andi	r3,r2,2047
10016ae0:	e0bffc17 	ldw	r2,-16(fp)
10016ae4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10016ae8:	e0bffe17 	ldw	r2,-8(fp)
10016aec:	00bfcf16 	blt	zero,r2,10016a2c <__alt_data_end+0xf8016a2c>
10016af0:	00000106 	br	10016af8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10016af4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10016af8:	e0fff517 	ldw	r3,-44(fp)
10016afc:	e0bffd17 	ldw	r2,-12(fp)
10016b00:	1880141e 	bne	r3,r2,10016b54 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10016b04:	e0bfff17 	ldw	r2,-4(fp)
10016b08:	1090000c 	andi	r2,r2,16384
10016b0c:	1000131e 	bne	r2,zero,10016b5c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10016b10:	0001883a 	nop
10016b14:	e0bffc17 	ldw	r2,-16(fp)
10016b18:	10c00a17 	ldw	r3,40(r2)
10016b1c:	e0bff717 	ldw	r2,-36(fp)
10016b20:	1880051e 	bne	r3,r2,10016b38 <altera_avalon_jtag_uart_read+0x138>
10016b24:	e0bffc17 	ldw	r2,-16(fp)
10016b28:	10c00917 	ldw	r3,36(r2)
10016b2c:	e0bffc17 	ldw	r2,-16(fp)
10016b30:	10800117 	ldw	r2,4(r2)
10016b34:	18bff736 	bltu	r3,r2,10016b14 <__alt_data_end+0xf8016b14>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10016b38:	e0bffc17 	ldw	r2,-16(fp)
10016b3c:	10c00a17 	ldw	r3,40(r2)
10016b40:	e0bff717 	ldw	r2,-36(fp)
10016b44:	18800726 	beq	r3,r2,10016b64 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10016b48:	e0bffe17 	ldw	r2,-8(fp)
10016b4c:	00bfb716 	blt	zero,r2,10016a2c <__alt_data_end+0xf8016a2c>
10016b50:	00000506 	br	10016b68 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10016b54:	0001883a 	nop
10016b58:	00000306 	br	10016b68 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10016b5c:	0001883a 	nop
10016b60:	00000106 	br	10016b68 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10016b64:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10016b68:	e0fff517 	ldw	r3,-44(fp)
10016b6c:	e0bffd17 	ldw	r2,-12(fp)
10016b70:	18801826 	beq	r3,r2,10016bd4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016b74:	0005303a 	rdctl	r2,status
10016b78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016b7c:	e0fffb17 	ldw	r3,-20(fp)
10016b80:	00bfff84 	movi	r2,-2
10016b84:	1884703a 	and	r2,r3,r2
10016b88:	1001703a 	wrctl	status,r2
  
  return context;
10016b8c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10016b90:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10016b94:	e0bffc17 	ldw	r2,-16(fp)
10016b98:	10800817 	ldw	r2,32(r2)
10016b9c:	10c00054 	ori	r3,r2,1
10016ba0:	e0bffc17 	ldw	r2,-16(fp)
10016ba4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016ba8:	e0bffc17 	ldw	r2,-16(fp)
10016bac:	10800017 	ldw	r2,0(r2)
10016bb0:	10800104 	addi	r2,r2,4
10016bb4:	1007883a 	mov	r3,r2
10016bb8:	e0bffc17 	ldw	r2,-16(fp)
10016bbc:	10800817 	ldw	r2,32(r2)
10016bc0:	18800035 	stwio	r2,0(r3)
10016bc4:	e0bffa17 	ldw	r2,-24(fp)
10016bc8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016bcc:	e0bff917 	ldw	r2,-28(fp)
10016bd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10016bd4:	e0fff517 	ldw	r3,-44(fp)
10016bd8:	e0bffd17 	ldw	r2,-12(fp)
10016bdc:	18800426 	beq	r3,r2,10016bf0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10016be0:	e0fff517 	ldw	r3,-44(fp)
10016be4:	e0bffd17 	ldw	r2,-12(fp)
10016be8:	1885c83a 	sub	r2,r3,r2
10016bec:	00000606 	br	10016c08 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10016bf0:	e0bfff17 	ldw	r2,-4(fp)
10016bf4:	1090000c 	andi	r2,r2,16384
10016bf8:	10000226 	beq	r2,zero,10016c04 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10016bfc:	00bffd44 	movi	r2,-11
10016c00:	00000106 	br	10016c08 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10016c04:	00bffec4 	movi	r2,-5
}
10016c08:	e037883a 	mov	sp,fp
10016c0c:	dfc00117 	ldw	ra,4(sp)
10016c10:	df000017 	ldw	fp,0(sp)
10016c14:	dec00204 	addi	sp,sp,8
10016c18:	f800283a 	ret

10016c1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10016c1c:	defff304 	addi	sp,sp,-52
10016c20:	dfc00c15 	stw	ra,48(sp)
10016c24:	df000b15 	stw	fp,44(sp)
10016c28:	df000b04 	addi	fp,sp,44
10016c2c:	e13ffc15 	stw	r4,-16(fp)
10016c30:	e17ffd15 	stw	r5,-12(fp)
10016c34:	e1bffe15 	stw	r6,-8(fp)
10016c38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10016c3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10016c40:	e0bffd17 	ldw	r2,-12(fp)
10016c44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10016c48:	00003706 	br	10016d28 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10016c4c:	e0bffc17 	ldw	r2,-16(fp)
10016c50:	10800c17 	ldw	r2,48(r2)
10016c54:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10016c58:	e0bffc17 	ldw	r2,-16(fp)
10016c5c:	10800d17 	ldw	r2,52(r2)
10016c60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10016c64:	e0fff917 	ldw	r3,-28(fp)
10016c68:	e0bff517 	ldw	r2,-44(fp)
10016c6c:	1880062e 	bgeu	r3,r2,10016c88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10016c70:	e0fff517 	ldw	r3,-44(fp)
10016c74:	e0bff917 	ldw	r2,-28(fp)
10016c78:	1885c83a 	sub	r2,r3,r2
10016c7c:	10bfffc4 	addi	r2,r2,-1
10016c80:	e0bff615 	stw	r2,-40(fp)
10016c84:	00000b06 	br	10016cb4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10016c88:	e0bff517 	ldw	r2,-44(fp)
10016c8c:	10000526 	beq	r2,zero,10016ca4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10016c90:	00c20004 	movi	r3,2048
10016c94:	e0bff917 	ldw	r2,-28(fp)
10016c98:	1885c83a 	sub	r2,r3,r2
10016c9c:	e0bff615 	stw	r2,-40(fp)
10016ca0:	00000406 	br	10016cb4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10016ca4:	00c1ffc4 	movi	r3,2047
10016ca8:	e0bff917 	ldw	r2,-28(fp)
10016cac:	1885c83a 	sub	r2,r3,r2
10016cb0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016cb4:	e0bff617 	ldw	r2,-40(fp)
10016cb8:	10001e26 	beq	r2,zero,10016d34 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10016cbc:	e0fffe17 	ldw	r3,-8(fp)
10016cc0:	e0bff617 	ldw	r2,-40(fp)
10016cc4:	1880022e 	bgeu	r3,r2,10016cd0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10016cc8:	e0bffe17 	ldw	r2,-8(fp)
10016ccc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10016cd0:	e0bffc17 	ldw	r2,-16(fp)
10016cd4:	10c20e04 	addi	r3,r2,2104
10016cd8:	e0bff917 	ldw	r2,-28(fp)
10016cdc:	1885883a 	add	r2,r3,r2
10016ce0:	e1bff617 	ldw	r6,-40(fp)
10016ce4:	e17ffd17 	ldw	r5,-12(fp)
10016ce8:	1009883a 	mov	r4,r2
10016cec:	000f2700 	call	1000f270 <memcpy>
      ptr   += n;
10016cf0:	e0fffd17 	ldw	r3,-12(fp)
10016cf4:	e0bff617 	ldw	r2,-40(fp)
10016cf8:	1885883a 	add	r2,r3,r2
10016cfc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10016d00:	e0fffe17 	ldw	r3,-8(fp)
10016d04:	e0bff617 	ldw	r2,-40(fp)
10016d08:	1885c83a 	sub	r2,r3,r2
10016d0c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016d10:	e0fff917 	ldw	r3,-28(fp)
10016d14:	e0bff617 	ldw	r2,-40(fp)
10016d18:	1885883a 	add	r2,r3,r2
10016d1c:	10c1ffcc 	andi	r3,r2,2047
10016d20:	e0bffc17 	ldw	r2,-16(fp)
10016d24:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10016d28:	e0bffe17 	ldw	r2,-8(fp)
10016d2c:	00bfc716 	blt	zero,r2,10016c4c <__alt_data_end+0xf8016c4c>
10016d30:	00000106 	br	10016d38 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10016d34:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016d38:	0005303a 	rdctl	r2,status
10016d3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016d40:	e0fffb17 	ldw	r3,-20(fp)
10016d44:	00bfff84 	movi	r2,-2
10016d48:	1884703a 	and	r2,r3,r2
10016d4c:	1001703a 	wrctl	status,r2
  
  return context;
10016d50:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10016d54:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10016d58:	e0bffc17 	ldw	r2,-16(fp)
10016d5c:	10800817 	ldw	r2,32(r2)
10016d60:	10c00094 	ori	r3,r2,2
10016d64:	e0bffc17 	ldw	r2,-16(fp)
10016d68:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016d6c:	e0bffc17 	ldw	r2,-16(fp)
10016d70:	10800017 	ldw	r2,0(r2)
10016d74:	10800104 	addi	r2,r2,4
10016d78:	1007883a 	mov	r3,r2
10016d7c:	e0bffc17 	ldw	r2,-16(fp)
10016d80:	10800817 	ldw	r2,32(r2)
10016d84:	18800035 	stwio	r2,0(r3)
10016d88:	e0bffa17 	ldw	r2,-24(fp)
10016d8c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016d90:	e0bff817 	ldw	r2,-32(fp)
10016d94:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10016d98:	e0bffe17 	ldw	r2,-8(fp)
10016d9c:	0080100e 	bge	zero,r2,10016de0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10016da0:	e0bfff17 	ldw	r2,-4(fp)
10016da4:	1090000c 	andi	r2,r2,16384
10016da8:	1000101e 	bne	r2,zero,10016dec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10016dac:	0001883a 	nop
10016db0:	e0bffc17 	ldw	r2,-16(fp)
10016db4:	10c00d17 	ldw	r3,52(r2)
10016db8:	e0bff517 	ldw	r2,-44(fp)
10016dbc:	1880051e 	bne	r3,r2,10016dd4 <altera_avalon_jtag_uart_write+0x1b8>
10016dc0:	e0bffc17 	ldw	r2,-16(fp)
10016dc4:	10c00917 	ldw	r3,36(r2)
10016dc8:	e0bffc17 	ldw	r2,-16(fp)
10016dcc:	10800117 	ldw	r2,4(r2)
10016dd0:	18bff736 	bltu	r3,r2,10016db0 <__alt_data_end+0xf8016db0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10016dd4:	e0bffc17 	ldw	r2,-16(fp)
10016dd8:	10800917 	ldw	r2,36(r2)
10016ddc:	1000051e 	bne	r2,zero,10016df4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10016de0:	e0bffe17 	ldw	r2,-8(fp)
10016de4:	00bfd016 	blt	zero,r2,10016d28 <__alt_data_end+0xf8016d28>
10016de8:	00000306 	br	10016df8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10016dec:	0001883a 	nop
10016df0:	00000106 	br	10016df8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10016df4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10016df8:	e0fffd17 	ldw	r3,-12(fp)
10016dfc:	e0bff717 	ldw	r2,-36(fp)
10016e00:	18800426 	beq	r3,r2,10016e14 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10016e04:	e0fffd17 	ldw	r3,-12(fp)
10016e08:	e0bff717 	ldw	r2,-36(fp)
10016e0c:	1885c83a 	sub	r2,r3,r2
10016e10:	00000606 	br	10016e2c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10016e14:	e0bfff17 	ldw	r2,-4(fp)
10016e18:	1090000c 	andi	r2,r2,16384
10016e1c:	10000226 	beq	r2,zero,10016e28 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10016e20:	00bffd44 	movi	r2,-11
10016e24:	00000106 	br	10016e2c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10016e28:	00bffec4 	movi	r2,-5
}
10016e2c:	e037883a 	mov	sp,fp
10016e30:	dfc00117 	ldw	ra,4(sp)
10016e34:	df000017 	ldw	fp,0(sp)
10016e38:	dec00204 	addi	sp,sp,8
10016e3c:	f800283a 	ret

10016e40 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10016e40:	defff404 	addi	sp,sp,-48
10016e44:	df000b15 	stw	fp,44(sp)
10016e48:	df000b04 	addi	fp,sp,44
10016e4c:	e13ffc15 	stw	r4,-16(fp)
10016e50:	e17ffd15 	stw	r5,-12(fp)
10016e54:	e1bffe15 	stw	r6,-8(fp)
10016e58:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10016e5c:	e0bffc17 	ldw	r2,-16(fp)
10016e60:	10800017 	ldw	r2,0(r2)
10016e64:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10016e68:	e0bff517 	ldw	r2,-44(fp)
10016e6c:	10800217 	ldw	r2,8(r2)
10016e70:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10016e74:	e0bff617 	ldw	r2,-40(fp)
10016e78:	10bfffc4 	addi	r2,r2,-1
10016e7c:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10016e80:	e0bffb17 	ldw	r2,-20(fp)
10016e84:	10800044 	addi	r2,r2,1
10016e88:	e0bffb15 	stw	r2,-20(fp)
10016e8c:	e0bffb17 	ldw	r2,-20(fp)
10016e90:	10800003 	ldbu	r2,0(r2)
10016e94:	10803fcc 	andi	r2,r2,255
10016e98:	1080201c 	xori	r2,r2,128
10016e9c:	10bfe004 	addi	r2,r2,-128
10016ea0:	103ff71e 	bne	r2,zero,10016e80 <__alt_data_end+0xf8016e80>
    ;

  return ptr - string;
10016ea4:	e0fffb17 	ldw	r3,-20(fp)
10016ea8:	e0bff617 	ldw	r2,-40(fp)
10016eac:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10016eb0:	10800044 	addi	r2,r2,1
10016eb4:	1007883a 	mov	r3,r2
10016eb8:	e0bffd17 	ldw	r2,-12(fp)
10016ebc:	10c5883a 	add	r2,r2,r3
10016ec0:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10016ec4:	d0a01e04 	addi	r2,gp,-32648
10016ec8:	1007883a 	mov	r3,r2
  r4 = (int)name;
10016ecc:	e0bffd17 	ldw	r2,-12(fp)
10016ed0:	1009883a 	mov	r4,r2
  r5 = flags;
10016ed4:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10016ed8:	e1bfff17 	ldw	r6,-4(fp)
10016edc:	e0bffd17 	ldw	r2,-12(fp)
10016ee0:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10016ee4:	e0bff917 	ldw	r2,-28(fp)
10016ee8:	10bfffc4 	addi	r2,r2,-1
10016eec:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10016ef0:	e0bffa17 	ldw	r2,-24(fp)
10016ef4:	10800044 	addi	r2,r2,1
10016ef8:	e0bffa15 	stw	r2,-24(fp)
10016efc:	e0bffa17 	ldw	r2,-24(fp)
10016f00:	10800003 	ldbu	r2,0(r2)
10016f04:	10803fcc 	andi	r2,r2,255
10016f08:	1080201c 	xori	r2,r2,128
10016f0c:	10bfe004 	addi	r2,r2,-128
10016f10:	103ff71e 	bne	r2,zero,10016ef0 <__alt_data_end+0xf8016ef0>
    ;

  return ptr - string;
10016f14:	e1fffa17 	ldw	r7,-24(fp)
10016f18:	e0bff917 	ldw	r2,-28(fp)
10016f1c:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10016f20:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10016f24:	003da07a 	break	1

  handle = (void *)r2;
10016f28:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10016f2c:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10016f30:	e0bff817 	ldw	r2,-32(fp)
10016f34:	1000031e 	bne	r2,zero,10016f44 <alt_hostfs_open+0x104>
    fd->priv = handle;
10016f38:	e0bffc17 	ldw	r2,-16(fp)
10016f3c:	e0fff717 	ldw	r3,-36(fp)
10016f40:	10c00115 	stw	r3,4(r2)

  return -error;
10016f44:	e0bff817 	ldw	r2,-32(fp)
10016f48:	0085c83a 	sub	r2,zero,r2
}
10016f4c:	e037883a 	mov	sp,fp
10016f50:	df000017 	ldw	fp,0(sp)
10016f54:	dec00104 	addi	sp,sp,4
10016f58:	f800283a 	ret

10016f5c <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10016f5c:	defffd04 	addi	sp,sp,-12
10016f60:	df000215 	stw	fp,8(sp)
10016f64:	df000204 	addi	fp,sp,8
10016f68:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10016f6c:	d0a02104 	addi	r2,gp,-32636
10016f70:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10016f74:	e0bfff17 	ldw	r2,-4(fp)
10016f78:	10800117 	ldw	r2,4(r2)
10016f7c:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10016f80:	003da07a 	break	1

  error = r3;
10016f84:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10016f88:	e0bffe17 	ldw	r2,-8(fp)
10016f8c:	0085c83a 	sub	r2,zero,r2
}
10016f90:	e037883a 	mov	sp,fp
10016f94:	df000017 	ldw	fp,0(sp)
10016f98:	dec00104 	addi	sp,sp,4
10016f9c:	f800283a 	ret

10016fa0 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10016fa0:	defffa04 	addi	sp,sp,-24
10016fa4:	df000515 	stw	fp,20(sp)
10016fa8:	df000504 	addi	fp,sp,20
10016fac:	e13ffd15 	stw	r4,-12(fp)
10016fb0:	e17ffe15 	stw	r5,-8(fp)
10016fb4:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10016fb8:	d0a02404 	addi	r2,gp,-32624
10016fbc:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10016fc0:	e0bffd17 	ldw	r2,-12(fp)
10016fc4:	10800117 	ldw	r2,4(r2)
10016fc8:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10016fcc:	e0bffe17 	ldw	r2,-8(fp)
10016fd0:	100b883a 	mov	r5,r2
  r6 = len;
10016fd4:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10016fd8:	003da07a 	break	1

  rc = r2;
10016fdc:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10016fe0:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10016fe4:	e0bffc17 	ldw	r2,-16(fp)
10016fe8:	10000326 	beq	r2,zero,10016ff8 <alt_hostfs_read+0x58>
10016fec:	e0bffc17 	ldw	r2,-16(fp)
10016ff0:	0085c83a 	sub	r2,zero,r2
10016ff4:	00000106 	br	10016ffc <alt_hostfs_read+0x5c>
10016ff8:	e0bffb17 	ldw	r2,-20(fp)
}
10016ffc:	e037883a 	mov	sp,fp
10017000:	df000017 	ldw	fp,0(sp)
10017004:	dec00104 	addi	sp,sp,4
10017008:	f800283a 	ret

1001700c <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
1001700c:	defffa04 	addi	sp,sp,-24
10017010:	df000515 	stw	fp,20(sp)
10017014:	df000504 	addi	fp,sp,20
10017018:	e13ffd15 	stw	r4,-12(fp)
1001701c:	e17ffe15 	stw	r5,-8(fp)
10017020:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10017024:	d0a02704 	addi	r2,gp,-32612
10017028:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
1001702c:	e0bffd17 	ldw	r2,-12(fp)
10017030:	10800117 	ldw	r2,4(r2)
10017034:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10017038:	e0bffe17 	ldw	r2,-8(fp)
1001703c:	100b883a 	mov	r5,r2
  r6 = len;
10017040:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10017044:	003da07a 	break	1

  rc = r2;
10017048:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
1001704c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10017050:	e0bffc17 	ldw	r2,-16(fp)
10017054:	10000326 	beq	r2,zero,10017064 <alt_hostfs_write+0x58>
10017058:	e0bffc17 	ldw	r2,-16(fp)
1001705c:	0085c83a 	sub	r2,zero,r2
10017060:	00000106 	br	10017068 <alt_hostfs_write+0x5c>
10017064:	e0bffb17 	ldw	r2,-20(fp)
}
10017068:	e037883a 	mov	sp,fp
1001706c:	df000017 	ldw	fp,0(sp)
10017070:	dec00104 	addi	sp,sp,4
10017074:	f800283a 	ret

10017078 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
10017078:	defffa04 	addi	sp,sp,-24
1001707c:	df000515 	stw	fp,20(sp)
10017080:	df000504 	addi	fp,sp,20
10017084:	e13ffd15 	stw	r4,-12(fp)
10017088:	e17ffe15 	stw	r5,-8(fp)
1001708c:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10017090:	d0a02a04 	addi	r2,gp,-32600
10017094:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10017098:	e0bffd17 	ldw	r2,-12(fp)
1001709c:	10800117 	ldw	r2,4(r2)
100170a0:	1009883a 	mov	r4,r2
  r5 = ptr;
100170a4:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
100170a8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
100170ac:	003da07a 	break	1

  rc = r2;
100170b0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100170b4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100170b8:	e0bffc17 	ldw	r2,-16(fp)
100170bc:	10000326 	beq	r2,zero,100170cc <alt_hostfs_seek+0x54>
100170c0:	e0bffc17 	ldw	r2,-16(fp)
100170c4:	0085c83a 	sub	r2,zero,r2
100170c8:	00000106 	br	100170d0 <alt_hostfs_seek+0x58>
100170cc:	e0bffb17 	ldw	r2,-20(fp)
}
100170d0:	e037883a 	mov	sp,fp
100170d4:	df000017 	ldw	fp,0(sp)
100170d8:	dec00104 	addi	sp,sp,4
100170dc:	f800283a 	ret

100170e0 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
100170e0:	deffe904 	addi	sp,sp,-92
100170e4:	df001615 	stw	fp,88(sp)
100170e8:	df001604 	addi	fp,sp,88
100170ec:	e13ffe15 	stw	r4,-8(fp)
100170f0:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
100170f4:	d0a02d04 	addi	r2,gp,-32588
100170f8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100170fc:	e0bffe17 	ldw	r2,-8(fp)
10017100:	10800117 	ldw	r2,4(r2)
10017104:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
10017108:	e0bfee04 	addi	r2,fp,-72
1001710c:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10017110:	003da07a 	break	1

  rc = r2;
10017114:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
10017118:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
1001711c:	e0bfec17 	ldw	r2,-80(fp)
10017120:	1000621e 	bne	r2,zero,100172ac <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10017124:	e0bfee04 	addi	r2,fp,-72
10017128:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
1001712c:	e0bfea17 	ldw	r2,-88(fp)
10017130:	10801004 	addi	r2,r2,64
10017134:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
10017138:	00001606 	br	10017194 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1001713c:	e0bfea17 	ldw	r2,-88(fp)
10017140:	10800017 	ldw	r2,0(r2)
10017144:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
10017148:	e0bfea17 	ldw	r2,-88(fp)
1001714c:	10800017 	ldw	r2,0(r2)
10017150:	10803fec 	andhi	r2,r2,255
10017154:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10017158:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1001715c:	e0bfea17 	ldw	r2,-88(fp)
10017160:	10800017 	ldw	r2,0(r2)
10017164:	10bfc00c 	andi	r2,r2,65280
10017168:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
1001716c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
10017170:	e0bfea17 	ldw	r2,-88(fp)
10017174:	10800017 	ldw	r2,0(r2)
10017178:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
1001717c:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10017180:	e0bfea17 	ldw	r2,-88(fp)
10017184:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
10017188:	e0bfea17 	ldw	r2,-88(fp)
1001718c:	10800104 	addi	r2,r2,4
10017190:	e0bfea15 	stw	r2,-88(fp)
10017194:	e0ffea17 	ldw	r3,-88(fp)
10017198:	e0bfed17 	ldw	r2,-76(fp)
1001719c:	18bfe736 	bltu	r3,r2,1001713c <__alt_data_end+0xf801713c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
100171a0:	e0bfff17 	ldw	r2,-4(fp)
100171a4:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
100171a8:	e0bfea17 	ldw	r2,-88(fp)
100171ac:	10800f04 	addi	r2,r2,60
100171b0:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
100171b4:	00000506 	br	100171cc <alt_hostfs_fstat+0xec>
      *ptr = 0;
100171b8:	e0bfea17 	ldw	r2,-88(fp)
100171bc:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
100171c0:	e0bfea17 	ldw	r2,-88(fp)
100171c4:	10800104 	addi	r2,r2,4
100171c8:	e0bfea15 	stw	r2,-88(fp)
100171cc:	e0ffea17 	ldw	r3,-88(fp)
100171d0:	e0bfed17 	ldw	r2,-76(fp)
100171d4:	18bff836 	bltu	r3,r2,100171b8 <__alt_data_end+0xf80171b8>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
100171d8:	e0bfee17 	ldw	r2,-72(fp)
100171dc:	1007883a 	mov	r3,r2
100171e0:	e0bfff17 	ldw	r2,-4(fp)
100171e4:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
100171e8:	e0bfef17 	ldw	r2,-68(fp)
100171ec:	1007883a 	mov	r3,r2
100171f0:	e0bfff17 	ldw	r2,-4(fp)
100171f4:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
100171f8:	e0fff017 	ldw	r3,-64(fp)
100171fc:	e0bfff17 	ldw	r2,-4(fp)
10017200:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10017204:	e0bff117 	ldw	r2,-60(fp)
10017208:	1007883a 	mov	r3,r2
1001720c:	e0bfff17 	ldw	r2,-4(fp)
10017210:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10017214:	e0bff217 	ldw	r2,-56(fp)
10017218:	1007883a 	mov	r3,r2
1001721c:	e0bfff17 	ldw	r2,-4(fp)
10017220:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10017224:	e0bff317 	ldw	r2,-52(fp)
10017228:	1007883a 	mov	r3,r2
1001722c:	e0bfff17 	ldw	r2,-4(fp)
10017230:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10017234:	e0bff417 	ldw	r2,-48(fp)
10017238:	1007883a 	mov	r3,r2
1001723c:	e0bfff17 	ldw	r2,-4(fp)
10017240:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10017244:	e0bff617 	ldw	r2,-40(fp)
10017248:	1007883a 	mov	r3,r2
1001724c:	e0bfff17 	ldw	r2,-4(fp)
10017250:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10017254:	e0bffb17 	ldw	r2,-20(fp)
10017258:	1007883a 	mov	r3,r2
1001725c:	e0bfff17 	ldw	r2,-4(fp)
10017260:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10017264:	e0bffc17 	ldw	r2,-16(fp)
10017268:	1007883a 	mov	r3,r2
1001726c:	e0bfff17 	ldw	r2,-4(fp)
10017270:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
10017274:	e0bffd17 	ldw	r2,-12(fp)
10017278:	1007883a 	mov	r3,r2
1001727c:	e0bfff17 	ldw	r2,-4(fp)
10017280:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
10017284:	e0bff817 	ldw	r2,-32(fp)
10017288:	1007883a 	mov	r3,r2
1001728c:	e0bfff17 	ldw	r2,-4(fp)
10017290:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
10017294:	e0bffa17 	ldw	r2,-24(fp)
10017298:	1007883a 	mov	r3,r2
1001729c:	e0bfff17 	ldw	r2,-4(fp)
100172a0:	10c00c15 	stw	r3,48(r2)

    return rc;
100172a4:	e0bfeb17 	ldw	r2,-84(fp)
100172a8:	00000206 	br	100172b4 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
100172ac:	e0bfec17 	ldw	r2,-80(fp)
100172b0:	0085c83a 	sub	r2,zero,r2
}
100172b4:	e037883a 	mov	sp,fp
100172b8:	df000017 	ldw	fp,0(sp)
100172bc:	dec00104 	addi	sp,sp,4
100172c0:	f800283a 	ret

100172c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100172c4:	defff504 	addi	sp,sp,-44
100172c8:	df000a15 	stw	fp,40(sp)
100172cc:	df000a04 	addi	fp,sp,40
100172d0:	e13ffc15 	stw	r4,-16(fp)
100172d4:	e17ffd15 	stw	r5,-12(fp)
100172d8:	e1bffe15 	stw	r6,-8(fp)
100172dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100172e0:	e03ff615 	stw	zero,-40(fp)
100172e4:	008403b4 	movhi	r2,4110
100172e8:	108aa704 	addi	r2,r2,10908
100172ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100172f0:	10003f26 	beq	r2,zero,100173f0 <alt_alarm_start+0x12c>
  {
    if (alarm)
100172f4:	e0bffc17 	ldw	r2,-16(fp)
100172f8:	10003b26 	beq	r2,zero,100173e8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100172fc:	e0bffc17 	ldw	r2,-16(fp)
10017300:	e0fffe17 	ldw	r3,-8(fp)
10017304:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10017308:	e0bffc17 	ldw	r2,-16(fp)
1001730c:	e0ffff17 	ldw	r3,-4(fp)
10017310:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017314:	0005303a 	rdctl	r2,status
10017318:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1001731c:	e0fff917 	ldw	r3,-28(fp)
10017320:	00bfff84 	movi	r2,-2
10017324:	1884703a 	and	r2,r3,r2
10017328:	1001703a 	wrctl	status,r2
  
  return context;
1001732c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10017330:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10017334:	008403b4 	movhi	r2,4110
10017338:	108aa804 	addi	r2,r2,10912
1001733c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10017340:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10017344:	e0fffd17 	ldw	r3,-12(fp)
10017348:	e0bff617 	ldw	r2,-40(fp)
1001734c:	1885883a 	add	r2,r3,r2
10017350:	10c00044 	addi	r3,r2,1
10017354:	e0bffc17 	ldw	r2,-16(fp)
10017358:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
1001735c:	e0bffc17 	ldw	r2,-16(fp)
10017360:	10c00217 	ldw	r3,8(r2)
10017364:	e0bff617 	ldw	r2,-40(fp)
10017368:	1880042e 	bgeu	r3,r2,1001737c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
1001736c:	e0bffc17 	ldw	r2,-16(fp)
10017370:	00c00044 	movi	r3,1
10017374:	10c00405 	stb	r3,16(r2)
10017378:	00000206 	br	10017384 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
1001737c:	e0bffc17 	ldw	r2,-16(fp)
10017380:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10017384:	e0fffc17 	ldw	r3,-16(fp)
10017388:	008403b4 	movhi	r2,4110
1001738c:	10a45804 	addi	r2,r2,-28320
10017390:	e0bffa15 	stw	r2,-24(fp)
10017394:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10017398:	e0bffb17 	ldw	r2,-20(fp)
1001739c:	e0fffa17 	ldw	r3,-24(fp)
100173a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100173a4:	e0bffa17 	ldw	r2,-24(fp)
100173a8:	10c00017 	ldw	r3,0(r2)
100173ac:	e0bffb17 	ldw	r2,-20(fp)
100173b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100173b4:	e0bffa17 	ldw	r2,-24(fp)
100173b8:	10800017 	ldw	r2,0(r2)
100173bc:	e0fffb17 	ldw	r3,-20(fp)
100173c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100173c4:	e0bffa17 	ldw	r2,-24(fp)
100173c8:	e0fffb17 	ldw	r3,-20(fp)
100173cc:	10c00015 	stw	r3,0(r2)
100173d0:	e0bff817 	ldw	r2,-32(fp)
100173d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100173d8:	e0bff717 	ldw	r2,-36(fp)
100173dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100173e0:	0005883a 	mov	r2,zero
100173e4:	00000306 	br	100173f4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100173e8:	00bffa84 	movi	r2,-22
100173ec:	00000106 	br	100173f4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100173f0:	00bfde84 	movi	r2,-134
  }
}
100173f4:	e037883a 	mov	sp,fp
100173f8:	df000017 	ldw	fp,0(sp)
100173fc:	dec00104 	addi	sp,sp,4
10017400:	f800283a 	ret

10017404 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10017404:	deffff04 	addi	sp,sp,-4
10017408:	df000015 	stw	fp,0(sp)
1001740c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10017410:	0001883a 	nop
10017414:	e037883a 	mov	sp,fp
10017418:	df000017 	ldw	fp,0(sp)
1001741c:	dec00104 	addi	sp,sp,4
10017420:	f800283a 	ret

10017424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017424:	defffe04 	addi	sp,sp,-8
10017428:	dfc00115 	stw	ra,4(sp)
1001742c:	df000015 	stw	fp,0(sp)
10017430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017434:	008403b4 	movhi	r2,4110
10017438:	10a45604 	addi	r2,r2,-28328
1001743c:	10800017 	ldw	r2,0(r2)
10017440:	10000526 	beq	r2,zero,10017458 <alt_get_errno+0x34>
10017444:	008403b4 	movhi	r2,4110
10017448:	10a45604 	addi	r2,r2,-28328
1001744c:	10800017 	ldw	r2,0(r2)
10017450:	103ee83a 	callr	r2
10017454:	00000206 	br	10017460 <alt_get_errno+0x3c>
10017458:	008403b4 	movhi	r2,4110
1001745c:	108a9b04 	addi	r2,r2,10860
}
10017460:	e037883a 	mov	sp,fp
10017464:	dfc00117 	ldw	ra,4(sp)
10017468:	df000017 	ldw	fp,0(sp)
1001746c:	dec00204 	addi	sp,sp,8
10017470:	f800283a 	ret

10017474 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10017474:	defffa04 	addi	sp,sp,-24
10017478:	dfc00515 	stw	ra,20(sp)
1001747c:	df000415 	stw	fp,16(sp)
10017480:	df000404 	addi	fp,sp,16
10017484:	e13ffe15 	stw	r4,-8(fp)
10017488:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
1001748c:	e0bffe17 	ldw	r2,-8(fp)
10017490:	10000326 	beq	r2,zero,100174a0 <alt_dev_llist_insert+0x2c>
10017494:	e0bffe17 	ldw	r2,-8(fp)
10017498:	10800217 	ldw	r2,8(r2)
1001749c:	1000061e 	bne	r2,zero,100174b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100174a0:	00174240 	call	10017424 <alt_get_errno>
100174a4:	1007883a 	mov	r3,r2
100174a8:	00800584 	movi	r2,22
100174ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100174b0:	00bffa84 	movi	r2,-22
100174b4:	00001306 	br	10017504 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100174b8:	e0bffe17 	ldw	r2,-8(fp)
100174bc:	e0ffff17 	ldw	r3,-4(fp)
100174c0:	e0fffc15 	stw	r3,-16(fp)
100174c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100174c8:	e0bffd17 	ldw	r2,-12(fp)
100174cc:	e0fffc17 	ldw	r3,-16(fp)
100174d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100174d4:	e0bffc17 	ldw	r2,-16(fp)
100174d8:	10c00017 	ldw	r3,0(r2)
100174dc:	e0bffd17 	ldw	r2,-12(fp)
100174e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100174e4:	e0bffc17 	ldw	r2,-16(fp)
100174e8:	10800017 	ldw	r2,0(r2)
100174ec:	e0fffd17 	ldw	r3,-12(fp)
100174f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100174f4:	e0bffc17 	ldw	r2,-16(fp)
100174f8:	e0fffd17 	ldw	r3,-12(fp)
100174fc:	10c00015 	stw	r3,0(r2)

  return 0;  
10017500:	0005883a 	mov	r2,zero
}
10017504:	e037883a 	mov	sp,fp
10017508:	dfc00117 	ldw	ra,4(sp)
1001750c:	df000017 	ldw	fp,0(sp)
10017510:	dec00204 	addi	sp,sp,8
10017514:	f800283a 	ret

10017518 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10017518:	defffd04 	addi	sp,sp,-12
1001751c:	dfc00215 	stw	ra,8(sp)
10017520:	df000115 	stw	fp,4(sp)
10017524:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10017528:	008400b4 	movhi	r2,4098
1001752c:	10a1ca04 	addi	r2,r2,-30936
10017530:	e0bfff15 	stw	r2,-4(fp)
10017534:	00000606 	br	10017550 <_do_ctors+0x38>
        (*ctor) (); 
10017538:	e0bfff17 	ldw	r2,-4(fp)
1001753c:	10800017 	ldw	r2,0(r2)
10017540:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10017544:	e0bfff17 	ldw	r2,-4(fp)
10017548:	10bfff04 	addi	r2,r2,-4
1001754c:	e0bfff15 	stw	r2,-4(fp)
10017550:	e0ffff17 	ldw	r3,-4(fp)
10017554:	008400b4 	movhi	r2,4098
10017558:	10a1cb04 	addi	r2,r2,-30932
1001755c:	18bff62e 	bgeu	r3,r2,10017538 <__alt_data_end+0xf8017538>
        (*ctor) (); 
}
10017560:	0001883a 	nop
10017564:	e037883a 	mov	sp,fp
10017568:	dfc00117 	ldw	ra,4(sp)
1001756c:	df000017 	ldw	fp,0(sp)
10017570:	dec00204 	addi	sp,sp,8
10017574:	f800283a 	ret

10017578 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10017578:	defffd04 	addi	sp,sp,-12
1001757c:	dfc00215 	stw	ra,8(sp)
10017580:	df000115 	stw	fp,4(sp)
10017584:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10017588:	008400b4 	movhi	r2,4098
1001758c:	10a1ca04 	addi	r2,r2,-30936
10017590:	e0bfff15 	stw	r2,-4(fp)
10017594:	00000606 	br	100175b0 <_do_dtors+0x38>
        (*dtor) (); 
10017598:	e0bfff17 	ldw	r2,-4(fp)
1001759c:	10800017 	ldw	r2,0(r2)
100175a0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100175a4:	e0bfff17 	ldw	r2,-4(fp)
100175a8:	10bfff04 	addi	r2,r2,-4
100175ac:	e0bfff15 	stw	r2,-4(fp)
100175b0:	e0ffff17 	ldw	r3,-4(fp)
100175b4:	008400b4 	movhi	r2,4098
100175b8:	10a1cb04 	addi	r2,r2,-30932
100175bc:	18bff62e 	bgeu	r3,r2,10017598 <__alt_data_end+0xf8017598>
        (*dtor) (); 
}
100175c0:	0001883a 	nop
100175c4:	e037883a 	mov	sp,fp
100175c8:	dfc00117 	ldw	ra,4(sp)
100175cc:	df000017 	ldw	fp,0(sp)
100175d0:	dec00204 	addi	sp,sp,8
100175d4:	f800283a 	ret

100175d8 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
100175d8:	defffc04 	addi	sp,sp,-16
100175dc:	df000315 	stw	fp,12(sp)
100175e0:	df000304 	addi	fp,sp,12
100175e4:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
100175e8:	e0bfff17 	ldw	r2,-4(fp)
100175ec:	10800217 	ldw	r2,8(r2)
100175f0:	1000021e 	bne	r2,zero,100175fc <alt_fs_reg+0x24>
  {
    return -ENODEV;
100175f4:	00bffb44 	movi	r2,-19
100175f8:	00001406 	br	1001764c <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
100175fc:	e0ffff17 	ldw	r3,-4(fp)
10017600:	008403b4 	movhi	r2,4110
10017604:	10a45104 	addi	r2,r2,-28348
10017608:	e0bffd15 	stw	r2,-12(fp)
1001760c:	e0fffe15 	stw	r3,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10017610:	e0bffe17 	ldw	r2,-8(fp)
10017614:	e0fffd17 	ldw	r3,-12(fp)
10017618:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
1001761c:	e0bffd17 	ldw	r2,-12(fp)
10017620:	10c00017 	ldw	r3,0(r2)
10017624:	e0bffe17 	ldw	r2,-8(fp)
10017628:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
1001762c:	e0bffd17 	ldw	r2,-12(fp)
10017630:	10800017 	ldw	r2,0(r2)
10017634:	e0fffe17 	ldw	r3,-8(fp)
10017638:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
1001763c:	e0bffd17 	ldw	r2,-12(fp)
10017640:	e0fffe17 	ldw	r3,-8(fp)
10017644:	10c00015 	stw	r3,0(r2)

  return 0;
10017648:	0005883a 	mov	r2,zero
} 
1001764c:	e037883a 	mov	sp,fp
10017650:	df000017 	ldw	fp,0(sp)
10017654:	dec00104 	addi	sp,sp,4
10017658:	f800283a 	ret

1001765c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
1001765c:	deffff04 	addi	sp,sp,-4
10017660:	df000015 	stw	fp,0(sp)
10017664:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10017668:	0001883a 	nop
1001766c:	e037883a 	mov	sp,fp
10017670:	df000017 	ldw	fp,0(sp)
10017674:	dec00104 	addi	sp,sp,4
10017678:	f800283a 	ret

1001767c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001767c:	defff904 	addi	sp,sp,-28
10017680:	dfc00615 	stw	ra,24(sp)
10017684:	df000515 	stw	fp,20(sp)
10017688:	df000504 	addi	fp,sp,20
1001768c:	e13ffc15 	stw	r4,-16(fp)
10017690:	e17ffd15 	stw	r5,-12(fp)
10017694:	e1bffe15 	stw	r6,-8(fp)
10017698:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1001769c:	e0800217 	ldw	r2,8(fp)
100176a0:	d8800015 	stw	r2,0(sp)
100176a4:	e1ffff17 	ldw	r7,-4(fp)
100176a8:	e1bffe17 	ldw	r6,-8(fp)
100176ac:	e17ffd17 	ldw	r5,-12(fp)
100176b0:	e13ffc17 	ldw	r4,-16(fp)
100176b4:	001785c0 	call	1001785c <alt_iic_isr_register>
}  
100176b8:	e037883a 	mov	sp,fp
100176bc:	dfc00117 	ldw	ra,4(sp)
100176c0:	df000017 	ldw	fp,0(sp)
100176c4:	dec00204 	addi	sp,sp,8
100176c8:	f800283a 	ret

100176cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100176cc:	defff904 	addi	sp,sp,-28
100176d0:	df000615 	stw	fp,24(sp)
100176d4:	df000604 	addi	fp,sp,24
100176d8:	e13ffe15 	stw	r4,-8(fp)
100176dc:	e17fff15 	stw	r5,-4(fp)
100176e0:	e0bfff17 	ldw	r2,-4(fp)
100176e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100176e8:	0005303a 	rdctl	r2,status
100176ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100176f0:	e0fffb17 	ldw	r3,-20(fp)
100176f4:	00bfff84 	movi	r2,-2
100176f8:	1884703a 	and	r2,r3,r2
100176fc:	1001703a 	wrctl	status,r2
  
  return context;
10017700:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10017704:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10017708:	00c00044 	movi	r3,1
1001770c:	e0bffa17 	ldw	r2,-24(fp)
10017710:	1884983a 	sll	r2,r3,r2
10017714:	1007883a 	mov	r3,r2
10017718:	008403b4 	movhi	r2,4110
1001771c:	108aa904 	addi	r2,r2,10916
10017720:	10800017 	ldw	r2,0(r2)
10017724:	1886b03a 	or	r3,r3,r2
10017728:	008403b4 	movhi	r2,4110
1001772c:	108aa904 	addi	r2,r2,10916
10017730:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10017734:	008403b4 	movhi	r2,4110
10017738:	108aa904 	addi	r2,r2,10916
1001773c:	10800017 	ldw	r2,0(r2)
10017740:	100170fa 	wrctl	ienable,r2
10017744:	e0bffc17 	ldw	r2,-16(fp)
10017748:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001774c:	e0bffd17 	ldw	r2,-12(fp)
10017750:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10017754:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10017758:	0001883a 	nop
}
1001775c:	e037883a 	mov	sp,fp
10017760:	df000017 	ldw	fp,0(sp)
10017764:	dec00104 	addi	sp,sp,4
10017768:	f800283a 	ret

1001776c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1001776c:	defff904 	addi	sp,sp,-28
10017770:	df000615 	stw	fp,24(sp)
10017774:	df000604 	addi	fp,sp,24
10017778:	e13ffe15 	stw	r4,-8(fp)
1001777c:	e17fff15 	stw	r5,-4(fp)
10017780:	e0bfff17 	ldw	r2,-4(fp)
10017784:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017788:	0005303a 	rdctl	r2,status
1001778c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017790:	e0fffb17 	ldw	r3,-20(fp)
10017794:	00bfff84 	movi	r2,-2
10017798:	1884703a 	and	r2,r3,r2
1001779c:	1001703a 	wrctl	status,r2
  
  return context;
100177a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100177a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100177a8:	00c00044 	movi	r3,1
100177ac:	e0bffa17 	ldw	r2,-24(fp)
100177b0:	1884983a 	sll	r2,r3,r2
100177b4:	0084303a 	nor	r2,zero,r2
100177b8:	1007883a 	mov	r3,r2
100177bc:	008403b4 	movhi	r2,4110
100177c0:	108aa904 	addi	r2,r2,10916
100177c4:	10800017 	ldw	r2,0(r2)
100177c8:	1886703a 	and	r3,r3,r2
100177cc:	008403b4 	movhi	r2,4110
100177d0:	108aa904 	addi	r2,r2,10916
100177d4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100177d8:	008403b4 	movhi	r2,4110
100177dc:	108aa904 	addi	r2,r2,10916
100177e0:	10800017 	ldw	r2,0(r2)
100177e4:	100170fa 	wrctl	ienable,r2
100177e8:	e0bffc17 	ldw	r2,-16(fp)
100177ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100177f0:	e0bffd17 	ldw	r2,-12(fp)
100177f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100177f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100177fc:	0001883a 	nop
}
10017800:	e037883a 	mov	sp,fp
10017804:	df000017 	ldw	fp,0(sp)
10017808:	dec00104 	addi	sp,sp,4
1001780c:	f800283a 	ret

10017810 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10017810:	defffc04 	addi	sp,sp,-16
10017814:	df000315 	stw	fp,12(sp)
10017818:	df000304 	addi	fp,sp,12
1001781c:	e13ffe15 	stw	r4,-8(fp)
10017820:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10017824:	000530fa 	rdctl	r2,ienable
10017828:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
1001782c:	00c00044 	movi	r3,1
10017830:	e0bfff17 	ldw	r2,-4(fp)
10017834:	1884983a 	sll	r2,r3,r2
10017838:	1007883a 	mov	r3,r2
1001783c:	e0bffd17 	ldw	r2,-12(fp)
10017840:	1884703a 	and	r2,r3,r2
10017844:	1004c03a 	cmpne	r2,r2,zero
10017848:	10803fcc 	andi	r2,r2,255
}
1001784c:	e037883a 	mov	sp,fp
10017850:	df000017 	ldw	fp,0(sp)
10017854:	dec00104 	addi	sp,sp,4
10017858:	f800283a 	ret

1001785c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001785c:	defff504 	addi	sp,sp,-44
10017860:	dfc00a15 	stw	ra,40(sp)
10017864:	df000915 	stw	fp,36(sp)
10017868:	df000904 	addi	fp,sp,36
1001786c:	e13ffc15 	stw	r4,-16(fp)
10017870:	e17ffd15 	stw	r5,-12(fp)
10017874:	e1bffe15 	stw	r6,-8(fp)
10017878:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1001787c:	00bffa84 	movi	r2,-22
10017880:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10017884:	e0bffd17 	ldw	r2,-12(fp)
10017888:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1001788c:	e0bff817 	ldw	r2,-32(fp)
10017890:	10800808 	cmpgei	r2,r2,32
10017894:	1000271e 	bne	r2,zero,10017934 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017898:	0005303a 	rdctl	r2,status
1001789c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100178a0:	e0fffb17 	ldw	r3,-20(fp)
100178a4:	00bfff84 	movi	r2,-2
100178a8:	1884703a 	and	r2,r3,r2
100178ac:	1001703a 	wrctl	status,r2
  
  return context;
100178b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100178b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100178b8:	008403b4 	movhi	r2,4110
100178bc:	108acf04 	addi	r2,r2,11068
100178c0:	e0fff817 	ldw	r3,-32(fp)
100178c4:	180690fa 	slli	r3,r3,3
100178c8:	10c5883a 	add	r2,r2,r3
100178cc:	e0fffe17 	ldw	r3,-8(fp)
100178d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100178d4:	008403b4 	movhi	r2,4110
100178d8:	108acf04 	addi	r2,r2,11068
100178dc:	e0fff817 	ldw	r3,-32(fp)
100178e0:	180690fa 	slli	r3,r3,3
100178e4:	10c5883a 	add	r2,r2,r3
100178e8:	10800104 	addi	r2,r2,4
100178ec:	e0ffff17 	ldw	r3,-4(fp)
100178f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100178f4:	e0bffe17 	ldw	r2,-8(fp)
100178f8:	10000526 	beq	r2,zero,10017910 <alt_iic_isr_register+0xb4>
100178fc:	e0bff817 	ldw	r2,-32(fp)
10017900:	100b883a 	mov	r5,r2
10017904:	e13ffc17 	ldw	r4,-16(fp)
10017908:	00176cc0 	call	100176cc <alt_ic_irq_enable>
1001790c:	00000406 	br	10017920 <alt_iic_isr_register+0xc4>
10017910:	e0bff817 	ldw	r2,-32(fp)
10017914:	100b883a 	mov	r5,r2
10017918:	e13ffc17 	ldw	r4,-16(fp)
1001791c:	001776c0 	call	1001776c <alt_ic_irq_disable>
10017920:	e0bff715 	stw	r2,-36(fp)
10017924:	e0bffa17 	ldw	r2,-24(fp)
10017928:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001792c:	e0bff917 	ldw	r2,-28(fp)
10017930:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10017934:	e0bff717 	ldw	r2,-36(fp)
}
10017938:	e037883a 	mov	sp,fp
1001793c:	dfc00117 	ldw	ra,4(sp)
10017940:	df000017 	ldw	fp,0(sp)
10017944:	dec00204 	addi	sp,sp,8
10017948:	f800283a 	ret

1001794c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001794c:	defff804 	addi	sp,sp,-32
10017950:	dfc00715 	stw	ra,28(sp)
10017954:	df000615 	stw	fp,24(sp)
10017958:	dc000515 	stw	r16,20(sp)
1001795c:	df000604 	addi	fp,sp,24
10017960:	e13ffb15 	stw	r4,-20(fp)
10017964:	e17ffc15 	stw	r5,-16(fp)
10017968:	e1bffd15 	stw	r6,-12(fp)
1001796c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10017970:	e1bffe17 	ldw	r6,-8(fp)
10017974:	e17ffd17 	ldw	r5,-12(fp)
10017978:	e13ffc17 	ldw	r4,-16(fp)
1001797c:	0017bf00 	call	10017bf0 <open>
10017980:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10017984:	e0bffa17 	ldw	r2,-24(fp)
10017988:	10002216 	blt	r2,zero,10017a14 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1001798c:	04040374 	movhi	r16,4109
10017990:	841fba04 	addi	r16,r16,32488
10017994:	e0bffa17 	ldw	r2,-24(fp)
10017998:	01400304 	movi	r5,12
1001799c:	1009883a 	mov	r4,r2
100179a0:	00059d40 	call	100059d4 <__mulsi3>
100179a4:	8085883a 	add	r2,r16,r2
100179a8:	10c00017 	ldw	r3,0(r2)
100179ac:	e0bffb17 	ldw	r2,-20(fp)
100179b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100179b4:	04040374 	movhi	r16,4109
100179b8:	841fba04 	addi	r16,r16,32488
100179bc:	e0bffa17 	ldw	r2,-24(fp)
100179c0:	01400304 	movi	r5,12
100179c4:	1009883a 	mov	r4,r2
100179c8:	00059d40 	call	100059d4 <__mulsi3>
100179cc:	8085883a 	add	r2,r16,r2
100179d0:	10800104 	addi	r2,r2,4
100179d4:	10c00017 	ldw	r3,0(r2)
100179d8:	e0bffb17 	ldw	r2,-20(fp)
100179dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100179e0:	04040374 	movhi	r16,4109
100179e4:	841fba04 	addi	r16,r16,32488
100179e8:	e0bffa17 	ldw	r2,-24(fp)
100179ec:	01400304 	movi	r5,12
100179f0:	1009883a 	mov	r4,r2
100179f4:	00059d40 	call	100059d4 <__mulsi3>
100179f8:	8085883a 	add	r2,r16,r2
100179fc:	10800204 	addi	r2,r2,8
10017a00:	10c00017 	ldw	r3,0(r2)
10017a04:	e0bffb17 	ldw	r2,-20(fp)
10017a08:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10017a0c:	e13ffa17 	ldw	r4,-24(fp)
10017a10:	0015ed80 	call	10015ed8 <alt_release_fd>
  }
} 
10017a14:	0001883a 	nop
10017a18:	e6ffff04 	addi	sp,fp,-4
10017a1c:	dfc00217 	ldw	ra,8(sp)
10017a20:	df000117 	ldw	fp,4(sp)
10017a24:	dc000017 	ldw	r16,0(sp)
10017a28:	dec00304 	addi	sp,sp,12
10017a2c:	f800283a 	ret

10017a30 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10017a30:	defffb04 	addi	sp,sp,-20
10017a34:	dfc00415 	stw	ra,16(sp)
10017a38:	df000315 	stw	fp,12(sp)
10017a3c:	df000304 	addi	fp,sp,12
10017a40:	e13ffd15 	stw	r4,-12(fp)
10017a44:	e17ffe15 	stw	r5,-8(fp)
10017a48:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10017a4c:	01c07fc4 	movi	r7,511
10017a50:	01800044 	movi	r6,1
10017a54:	e17ffd17 	ldw	r5,-12(fp)
10017a58:	01040374 	movhi	r4,4109
10017a5c:	211fbd04 	addi	r4,r4,32500
10017a60:	001794c0 	call	1001794c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10017a64:	01c07fc4 	movi	r7,511
10017a68:	000d883a 	mov	r6,zero
10017a6c:	e17ffe17 	ldw	r5,-8(fp)
10017a70:	01040374 	movhi	r4,4109
10017a74:	211fba04 	addi	r4,r4,32488
10017a78:	001794c0 	call	1001794c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10017a7c:	01c07fc4 	movi	r7,511
10017a80:	01800044 	movi	r6,1
10017a84:	e17fff17 	ldw	r5,-4(fp)
10017a88:	01040374 	movhi	r4,4109
10017a8c:	211fc004 	addi	r4,r4,32512
10017a90:	001794c0 	call	1001794c <alt_open_fd>
}  
10017a94:	0001883a 	nop
10017a98:	e037883a 	mov	sp,fp
10017a9c:	dfc00117 	ldw	ra,4(sp)
10017aa0:	df000017 	ldw	fp,0(sp)
10017aa4:	dec00204 	addi	sp,sp,8
10017aa8:	f800283a 	ret

10017aac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017aac:	defffe04 	addi	sp,sp,-8
10017ab0:	dfc00115 	stw	ra,4(sp)
10017ab4:	df000015 	stw	fp,0(sp)
10017ab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017abc:	008403b4 	movhi	r2,4110
10017ac0:	10a45604 	addi	r2,r2,-28328
10017ac4:	10800017 	ldw	r2,0(r2)
10017ac8:	10000526 	beq	r2,zero,10017ae0 <alt_get_errno+0x34>
10017acc:	008403b4 	movhi	r2,4110
10017ad0:	10a45604 	addi	r2,r2,-28328
10017ad4:	10800017 	ldw	r2,0(r2)
10017ad8:	103ee83a 	callr	r2
10017adc:	00000206 	br	10017ae8 <alt_get_errno+0x3c>
10017ae0:	008403b4 	movhi	r2,4110
10017ae4:	108a9b04 	addi	r2,r2,10860
}
10017ae8:	e037883a 	mov	sp,fp
10017aec:	dfc00117 	ldw	ra,4(sp)
10017af0:	df000017 	ldw	fp,0(sp)
10017af4:	dec00204 	addi	sp,sp,8
10017af8:	f800283a 	ret

10017afc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10017afc:	defffb04 	addi	sp,sp,-20
10017b00:	dfc00415 	stw	ra,16(sp)
10017b04:	df000315 	stw	fp,12(sp)
10017b08:	dc000215 	stw	r16,8(sp)
10017b0c:	df000304 	addi	fp,sp,12
10017b10:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10017b14:	e0bffe17 	ldw	r2,-8(fp)
10017b18:	10800217 	ldw	r2,8(r2)
10017b1c:	10d00034 	orhi	r3,r2,16384
10017b20:	e0bffe17 	ldw	r2,-8(fp)
10017b24:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017b28:	e03ffd15 	stw	zero,-12(fp)
10017b2c:	00002306 	br	10017bbc <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017b30:	04040374 	movhi	r16,4109
10017b34:	841fba04 	addi	r16,r16,32488
10017b38:	e0bffd17 	ldw	r2,-12(fp)
10017b3c:	01400304 	movi	r5,12
10017b40:	1009883a 	mov	r4,r2
10017b44:	00059d40 	call	100059d4 <__mulsi3>
10017b48:	8085883a 	add	r2,r16,r2
10017b4c:	10c00017 	ldw	r3,0(r2)
10017b50:	e0bffe17 	ldw	r2,-8(fp)
10017b54:	10800017 	ldw	r2,0(r2)
10017b58:	1880151e 	bne	r3,r2,10017bb0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017b5c:	04040374 	movhi	r16,4109
10017b60:	841fba04 	addi	r16,r16,32488
10017b64:	e0bffd17 	ldw	r2,-12(fp)
10017b68:	01400304 	movi	r5,12
10017b6c:	1009883a 	mov	r4,r2
10017b70:	00059d40 	call	100059d4 <__mulsi3>
10017b74:	8085883a 	add	r2,r16,r2
10017b78:	10800204 	addi	r2,r2,8
10017b7c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017b80:	10000b0e 	bge	r2,zero,10017bb0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10017b84:	01400304 	movi	r5,12
10017b88:	e13ffd17 	ldw	r4,-12(fp)
10017b8c:	00059d40 	call	100059d4 <__mulsi3>
10017b90:	1007883a 	mov	r3,r2
10017b94:	00840374 	movhi	r2,4109
10017b98:	109fba04 	addi	r2,r2,32488
10017b9c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017ba0:	e0bffe17 	ldw	r2,-8(fp)
10017ba4:	18800226 	beq	r3,r2,10017bb0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10017ba8:	00bffcc4 	movi	r2,-13
10017bac:	00000a06 	br	10017bd8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017bb0:	e0bffd17 	ldw	r2,-12(fp)
10017bb4:	10800044 	addi	r2,r2,1
10017bb8:	e0bffd15 	stw	r2,-12(fp)
10017bbc:	008403b4 	movhi	r2,4110
10017bc0:	10a45504 	addi	r2,r2,-28332
10017bc4:	10800017 	ldw	r2,0(r2)
10017bc8:	1007883a 	mov	r3,r2
10017bcc:	e0bffd17 	ldw	r2,-12(fp)
10017bd0:	18bfd72e 	bgeu	r3,r2,10017b30 <__alt_data_end+0xf8017b30>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10017bd4:	0005883a 	mov	r2,zero
}
10017bd8:	e6ffff04 	addi	sp,fp,-4
10017bdc:	dfc00217 	ldw	ra,8(sp)
10017be0:	df000117 	ldw	fp,4(sp)
10017be4:	dc000017 	ldw	r16,0(sp)
10017be8:	dec00304 	addi	sp,sp,12
10017bec:	f800283a 	ret

10017bf0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10017bf0:	defff604 	addi	sp,sp,-40
10017bf4:	dfc00915 	stw	ra,36(sp)
10017bf8:	df000815 	stw	fp,32(sp)
10017bfc:	df000804 	addi	fp,sp,32
10017c00:	e13ffd15 	stw	r4,-12(fp)
10017c04:	e17ffe15 	stw	r5,-8(fp)
10017c08:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10017c0c:	00bfffc4 	movi	r2,-1
10017c10:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10017c14:	00bffb44 	movi	r2,-19
10017c18:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10017c1c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10017c20:	014403b4 	movhi	r5,4110
10017c24:	29645304 	addi	r5,r5,-28340
10017c28:	e13ffd17 	ldw	r4,-12(fp)
10017c2c:	0017d740 	call	10017d74 <alt_find_dev>
10017c30:	e0bff815 	stw	r2,-32(fp)
10017c34:	e0bff817 	ldw	r2,-32(fp)
10017c38:	1000051e 	bne	r2,zero,10017c50 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10017c3c:	e13ffd17 	ldw	r4,-12(fp)
10017c40:	0017e040 	call	10017e04 <alt_find_file>
10017c44:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10017c48:	00800044 	movi	r2,1
10017c4c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10017c50:	e0bff817 	ldw	r2,-32(fp)
10017c54:	10002b26 	beq	r2,zero,10017d04 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10017c58:	e13ff817 	ldw	r4,-32(fp)
10017c5c:	0017f180 	call	10017f18 <alt_get_fd>
10017c60:	e0bff915 	stw	r2,-28(fp)
10017c64:	e0bff917 	ldw	r2,-28(fp)
10017c68:	1000030e 	bge	r2,zero,10017c78 <open+0x88>
    {
      status = index;
10017c6c:	e0bff917 	ldw	r2,-28(fp)
10017c70:	e0bffa15 	stw	r2,-24(fp)
10017c74:	00002506 	br	10017d0c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10017c78:	01400304 	movi	r5,12
10017c7c:	e13ff917 	ldw	r4,-28(fp)
10017c80:	00059d40 	call	100059d4 <__mulsi3>
10017c84:	1007883a 	mov	r3,r2
10017c88:	00840374 	movhi	r2,4109
10017c8c:	109fba04 	addi	r2,r2,32488
10017c90:	1885883a 	add	r2,r3,r2
10017c94:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10017c98:	e0fffe17 	ldw	r3,-8(fp)
10017c9c:	00900034 	movhi	r2,16384
10017ca0:	10bfffc4 	addi	r2,r2,-1
10017ca4:	1886703a 	and	r3,r3,r2
10017ca8:	e0bffc17 	ldw	r2,-16(fp)
10017cac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10017cb0:	e0bffb17 	ldw	r2,-20(fp)
10017cb4:	1000051e 	bne	r2,zero,10017ccc <open+0xdc>
10017cb8:	e13ffc17 	ldw	r4,-16(fp)
10017cbc:	0017afc0 	call	10017afc <alt_file_locked>
10017cc0:	e0bffa15 	stw	r2,-24(fp)
10017cc4:	e0bffa17 	ldw	r2,-24(fp)
10017cc8:	10001016 	blt	r2,zero,10017d0c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10017ccc:	e0bff817 	ldw	r2,-32(fp)
10017cd0:	10800317 	ldw	r2,12(r2)
10017cd4:	10000826 	beq	r2,zero,10017cf8 <open+0x108>
10017cd8:	e0bff817 	ldw	r2,-32(fp)
10017cdc:	10800317 	ldw	r2,12(r2)
10017ce0:	e1ffff17 	ldw	r7,-4(fp)
10017ce4:	e1bffe17 	ldw	r6,-8(fp)
10017ce8:	e17ffd17 	ldw	r5,-12(fp)
10017cec:	e13ffc17 	ldw	r4,-16(fp)
10017cf0:	103ee83a 	callr	r2
10017cf4:	00000106 	br	10017cfc <open+0x10c>
10017cf8:	0005883a 	mov	r2,zero
10017cfc:	e0bffa15 	stw	r2,-24(fp)
10017d00:	00000206 	br	10017d0c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10017d04:	00bffb44 	movi	r2,-19
10017d08:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10017d0c:	e0bffa17 	ldw	r2,-24(fp)
10017d10:	1000090e 	bge	r2,zero,10017d38 <open+0x148>
  {
    alt_release_fd (index);  
10017d14:	e13ff917 	ldw	r4,-28(fp)
10017d18:	0015ed80 	call	10015ed8 <alt_release_fd>
    ALT_ERRNO = -status;
10017d1c:	0017aac0 	call	10017aac <alt_get_errno>
10017d20:	1007883a 	mov	r3,r2
10017d24:	e0bffa17 	ldw	r2,-24(fp)
10017d28:	0085c83a 	sub	r2,zero,r2
10017d2c:	18800015 	stw	r2,0(r3)
    return -1;
10017d30:	00bfffc4 	movi	r2,-1
10017d34:	00000106 	br	10017d3c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10017d38:	e0bff917 	ldw	r2,-28(fp)
}
10017d3c:	e037883a 	mov	sp,fp
10017d40:	dfc00117 	ldw	ra,4(sp)
10017d44:	df000017 	ldw	fp,0(sp)
10017d48:	dec00204 	addi	sp,sp,8
10017d4c:	f800283a 	ret

10017d50 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10017d50:	deffff04 	addi	sp,sp,-4
10017d54:	df000015 	stw	fp,0(sp)
10017d58:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10017d5c:	000170fa 	wrctl	ienable,zero
}
10017d60:	0001883a 	nop
10017d64:	e037883a 	mov	sp,fp
10017d68:	df000017 	ldw	fp,0(sp)
10017d6c:	dec00104 	addi	sp,sp,4
10017d70:	f800283a 	ret

10017d74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10017d74:	defffa04 	addi	sp,sp,-24
10017d78:	dfc00515 	stw	ra,20(sp)
10017d7c:	df000415 	stw	fp,16(sp)
10017d80:	df000404 	addi	fp,sp,16
10017d84:	e13ffe15 	stw	r4,-8(fp)
10017d88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10017d8c:	e0bfff17 	ldw	r2,-4(fp)
10017d90:	10800017 	ldw	r2,0(r2)
10017d94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10017d98:	e13ffe17 	ldw	r4,-8(fp)
10017d9c:	00088540 	call	10008854 <strlen>
10017da0:	10800044 	addi	r2,r2,1
10017da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10017da8:	00000d06 	br	10017de0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10017dac:	e0bffc17 	ldw	r2,-16(fp)
10017db0:	10800217 	ldw	r2,8(r2)
10017db4:	e0fffd17 	ldw	r3,-12(fp)
10017db8:	180d883a 	mov	r6,r3
10017dbc:	e17ffe17 	ldw	r5,-8(fp)
10017dc0:	1009883a 	mov	r4,r2
10017dc4:	00181240 	call	10018124 <memcmp>
10017dc8:	1000021e 	bne	r2,zero,10017dd4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10017dcc:	e0bffc17 	ldw	r2,-16(fp)
10017dd0:	00000706 	br	10017df0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10017dd4:	e0bffc17 	ldw	r2,-16(fp)
10017dd8:	10800017 	ldw	r2,0(r2)
10017ddc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10017de0:	e0fffc17 	ldw	r3,-16(fp)
10017de4:	e0bfff17 	ldw	r2,-4(fp)
10017de8:	18bff01e 	bne	r3,r2,10017dac <__alt_data_end+0xf8017dac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10017dec:	0005883a 	mov	r2,zero
}
10017df0:	e037883a 	mov	sp,fp
10017df4:	dfc00117 	ldw	ra,4(sp)
10017df8:	df000017 	ldw	fp,0(sp)
10017dfc:	dec00204 	addi	sp,sp,8
10017e00:	f800283a 	ret

10017e04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10017e04:	defffb04 	addi	sp,sp,-20
10017e08:	dfc00415 	stw	ra,16(sp)
10017e0c:	df000315 	stw	fp,12(sp)
10017e10:	df000304 	addi	fp,sp,12
10017e14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10017e18:	008403b4 	movhi	r2,4110
10017e1c:	10a45104 	addi	r2,r2,-28348
10017e20:	10800017 	ldw	r2,0(r2)
10017e24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10017e28:	00003106 	br	10017ef0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10017e2c:	e0bffd17 	ldw	r2,-12(fp)
10017e30:	10800217 	ldw	r2,8(r2)
10017e34:	1009883a 	mov	r4,r2
10017e38:	00088540 	call	10008854 <strlen>
10017e3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10017e40:	e0bffd17 	ldw	r2,-12(fp)
10017e44:	10c00217 	ldw	r3,8(r2)
10017e48:	e0bffe17 	ldw	r2,-8(fp)
10017e4c:	10bfffc4 	addi	r2,r2,-1
10017e50:	1885883a 	add	r2,r3,r2
10017e54:	10800003 	ldbu	r2,0(r2)
10017e58:	10803fcc 	andi	r2,r2,255
10017e5c:	1080201c 	xori	r2,r2,128
10017e60:	10bfe004 	addi	r2,r2,-128
10017e64:	10800bd8 	cmpnei	r2,r2,47
10017e68:	1000031e 	bne	r2,zero,10017e78 <alt_find_file+0x74>
    {
      len -= 1;
10017e6c:	e0bffe17 	ldw	r2,-8(fp)
10017e70:	10bfffc4 	addi	r2,r2,-1
10017e74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10017e78:	e0bffe17 	ldw	r2,-8(fp)
10017e7c:	e0ffff17 	ldw	r3,-4(fp)
10017e80:	1885883a 	add	r2,r3,r2
10017e84:	10800003 	ldbu	r2,0(r2)
10017e88:	10803fcc 	andi	r2,r2,255
10017e8c:	1080201c 	xori	r2,r2,128
10017e90:	10bfe004 	addi	r2,r2,-128
10017e94:	10800be0 	cmpeqi	r2,r2,47
10017e98:	1000081e 	bne	r2,zero,10017ebc <alt_find_file+0xb8>
10017e9c:	e0bffe17 	ldw	r2,-8(fp)
10017ea0:	e0ffff17 	ldw	r3,-4(fp)
10017ea4:	1885883a 	add	r2,r3,r2
10017ea8:	10800003 	ldbu	r2,0(r2)
10017eac:	10803fcc 	andi	r2,r2,255
10017eb0:	1080201c 	xori	r2,r2,128
10017eb4:	10bfe004 	addi	r2,r2,-128
10017eb8:	10000a1e 	bne	r2,zero,10017ee4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10017ebc:	e0bffd17 	ldw	r2,-12(fp)
10017ec0:	10800217 	ldw	r2,8(r2)
10017ec4:	e0fffe17 	ldw	r3,-8(fp)
10017ec8:	180d883a 	mov	r6,r3
10017ecc:	e17fff17 	ldw	r5,-4(fp)
10017ed0:	1009883a 	mov	r4,r2
10017ed4:	00181240 	call	10018124 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10017ed8:	1000021e 	bne	r2,zero,10017ee4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10017edc:	e0bffd17 	ldw	r2,-12(fp)
10017ee0:	00000806 	br	10017f04 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10017ee4:	e0bffd17 	ldw	r2,-12(fp)
10017ee8:	10800017 	ldw	r2,0(r2)
10017eec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10017ef0:	e0fffd17 	ldw	r3,-12(fp)
10017ef4:	008403b4 	movhi	r2,4110
10017ef8:	10a45104 	addi	r2,r2,-28348
10017efc:	18bfcb1e 	bne	r3,r2,10017e2c <__alt_data_end+0xf8017e2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10017f00:	0005883a 	mov	r2,zero
}
10017f04:	e037883a 	mov	sp,fp
10017f08:	dfc00117 	ldw	ra,4(sp)
10017f0c:	df000017 	ldw	fp,0(sp)
10017f10:	dec00204 	addi	sp,sp,8
10017f14:	f800283a 	ret

10017f18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10017f18:	defffa04 	addi	sp,sp,-24
10017f1c:	dfc00515 	stw	ra,20(sp)
10017f20:	df000415 	stw	fp,16(sp)
10017f24:	dc000315 	stw	r16,12(sp)
10017f28:	df000404 	addi	fp,sp,16
10017f2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10017f30:	00bffa04 	movi	r2,-24
10017f34:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10017f38:	e03ffc15 	stw	zero,-16(fp)
10017f3c:	00002106 	br	10017fc4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10017f40:	04040374 	movhi	r16,4109
10017f44:	841fba04 	addi	r16,r16,32488
10017f48:	e0bffc17 	ldw	r2,-16(fp)
10017f4c:	01400304 	movi	r5,12
10017f50:	1009883a 	mov	r4,r2
10017f54:	00059d40 	call	100059d4 <__mulsi3>
10017f58:	8085883a 	add	r2,r16,r2
10017f5c:	10800017 	ldw	r2,0(r2)
10017f60:	1000151e 	bne	r2,zero,10017fb8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10017f64:	04040374 	movhi	r16,4109
10017f68:	841fba04 	addi	r16,r16,32488
10017f6c:	e0bffc17 	ldw	r2,-16(fp)
10017f70:	01400304 	movi	r5,12
10017f74:	1009883a 	mov	r4,r2
10017f78:	00059d40 	call	100059d4 <__mulsi3>
10017f7c:	8085883a 	add	r2,r16,r2
10017f80:	e0fffe17 	ldw	r3,-8(fp)
10017f84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10017f88:	008403b4 	movhi	r2,4110
10017f8c:	10a45504 	addi	r2,r2,-28332
10017f90:	10c00017 	ldw	r3,0(r2)
10017f94:	e0bffc17 	ldw	r2,-16(fp)
10017f98:	1880040e 	bge	r3,r2,10017fac <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10017f9c:	008403b4 	movhi	r2,4110
10017fa0:	10a45504 	addi	r2,r2,-28332
10017fa4:	e0fffc17 	ldw	r3,-16(fp)
10017fa8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10017fac:	e0bffc17 	ldw	r2,-16(fp)
10017fb0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10017fb4:	00000606 	br	10017fd0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10017fb8:	e0bffc17 	ldw	r2,-16(fp)
10017fbc:	10800044 	addi	r2,r2,1
10017fc0:	e0bffc15 	stw	r2,-16(fp)
10017fc4:	e0bffc17 	ldw	r2,-16(fp)
10017fc8:	10800810 	cmplti	r2,r2,32
10017fcc:	103fdc1e 	bne	r2,zero,10017f40 <__alt_data_end+0xf8017f40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10017fd0:	e0bffd17 	ldw	r2,-12(fp)
}
10017fd4:	e6ffff04 	addi	sp,fp,-4
10017fd8:	dfc00217 	ldw	ra,8(sp)
10017fdc:	df000117 	ldw	fp,4(sp)
10017fe0:	dc000017 	ldw	r16,0(sp)
10017fe4:	dec00304 	addi	sp,sp,12
10017fe8:	f800283a 	ret

10017fec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10017fec:	defffe04 	addi	sp,sp,-8
10017ff0:	df000115 	stw	fp,4(sp)
10017ff4:	df000104 	addi	fp,sp,4
10017ff8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10017ffc:	e0bfff17 	ldw	r2,-4(fp)
10018000:	10bffe84 	addi	r2,r2,-6
10018004:	10c00428 	cmpgeui	r3,r2,16
10018008:	18001a1e 	bne	r3,zero,10018074 <alt_exception_cause_generated_bad_addr+0x88>
1001800c:	100690ba 	slli	r3,r2,2
10018010:	008400b4 	movhi	r2,4098
10018014:	10a00904 	addi	r2,r2,-32732
10018018:	1885883a 	add	r2,r3,r2
1001801c:	10800017 	ldw	r2,0(r2)
10018020:	1000683a 	jmp	r2
10018024:	10018064 	muli	zero,r2,1537
10018028:	10018064 	muli	zero,r2,1537
1001802c:	10018074 	orhi	zero,r2,1537
10018030:	10018074 	orhi	zero,r2,1537
10018034:	10018074 	orhi	zero,r2,1537
10018038:	10018064 	muli	zero,r2,1537
1001803c:	1001806c 	andhi	zero,r2,1537
10018040:	10018074 	orhi	zero,r2,1537
10018044:	10018064 	muli	zero,r2,1537
10018048:	10018064 	muli	zero,r2,1537
1001804c:	10018074 	orhi	zero,r2,1537
10018050:	10018064 	muli	zero,r2,1537
10018054:	1001806c 	andhi	zero,r2,1537
10018058:	10018074 	orhi	zero,r2,1537
1001805c:	10018074 	orhi	zero,r2,1537
10018060:	10018064 	muli	zero,r2,1537
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10018064:	00800044 	movi	r2,1
10018068:	00000306 	br	10018078 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
1001806c:	0005883a 	mov	r2,zero
10018070:	00000106 	br	10018078 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10018074:	0005883a 	mov	r2,zero
  }
}
10018078:	e037883a 	mov	sp,fp
1001807c:	df000017 	ldw	fp,0(sp)
10018080:	dec00104 	addi	sp,sp,4
10018084:	f800283a 	ret

10018088 <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
10018088:	defffd04 	addi	sp,sp,-12
1001808c:	dfc00215 	stw	ra,8(sp)
10018090:	df000115 	stw	fp,4(sp)
10018094:	df000104 	addi	fp,sp,4
10018098:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
1001809c:	000f883a 	mov	r7,zero
100180a0:	000d883a 	mov	r6,zero
100180a4:	e17fff17 	ldw	r5,-4(fp)
100180a8:	0009883a 	mov	r4,zero
100180ac:	00182580 	call	10018258 <__register_exitproc>
}
100180b0:	e037883a 	mov	sp,fp
100180b4:	dfc00117 	ldw	ra,4(sp)
100180b8:	df000017 	ldw	fp,0(sp)
100180bc:	dec00204 	addi	sp,sp,8
100180c0:	f800283a 	ret

100180c4 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
100180c4:	defffd04 	addi	sp,sp,-12
100180c8:	dfc00215 	stw	ra,8(sp)
100180cc:	df000115 	stw	fp,4(sp)
100180d0:	df000104 	addi	fp,sp,4
100180d4:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
100180d8:	000b883a 	mov	r5,zero
100180dc:	e13fff17 	ldw	r4,-4(fp)
100180e0:	00183f00 	call	100183f0 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
100180e4:	008403b4 	movhi	r2,4110
100180e8:	10a44304 	addi	r2,r2,-28404
100180ec:	10800017 	ldw	r2,0(r2)
100180f0:	10800f17 	ldw	r2,60(r2)
100180f4:	10000926 	beq	r2,zero,1001811c <exit+0x58>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
100180f8:	008403b4 	movhi	r2,4110
100180fc:	10a44304 	addi	r2,r2,-28404
10018100:	10800017 	ldw	r2,0(r2)
10018104:	10c00f17 	ldw	r3,60(r2)
10018108:	008403b4 	movhi	r2,4110
1001810c:	10a44304 	addi	r2,r2,-28404
10018110:	10800017 	ldw	r2,0(r2)
10018114:	1009883a 	mov	r4,r2
10018118:	183ee83a 	callr	r3
#endif							/* AlteraSpecific */
  _exit (code);
1001811c:	e13fff17 	ldw	r4,-4(fp)
10018120:	00186f80 	call	100186f8 <_exit>

10018124 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
10018124:	defff804 	addi	sp,sp,-32
10018128:	df000715 	stw	fp,28(sp)
1001812c:	df000704 	addi	fp,sp,28
10018130:	e13ffd15 	stw	r4,-12(fp)
10018134:	e17ffe15 	stw	r5,-8(fp)
10018138:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
1001813c:	e0bffd17 	ldw	r2,-12(fp)
10018140:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
10018144:	e0bffe17 	ldw	r2,-8(fp)
10018148:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
1001814c:	e0bfff17 	ldw	r2,-4(fp)
10018150:	10800130 	cmpltui	r2,r2,4
10018154:	1000371e 	bne	r2,zero,10018234 <memcmp+0x110>
10018158:	e0fff917 	ldw	r3,-28(fp)
1001815c:	e0bffa17 	ldw	r2,-24(fp)
10018160:	1884b03a 	or	r2,r3,r2
10018164:	108000cc 	andi	r2,r2,3
10018168:	1000321e 	bne	r2,zero,10018234 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
1001816c:	e0bff917 	ldw	r2,-28(fp)
10018170:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
10018174:	e0bffa17 	ldw	r2,-24(fp)
10018178:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
1001817c:	00000e06 	br	100181b8 <memcmp+0x94>
        {
          if (*a1 != *a2) 
10018180:	e0bffb17 	ldw	r2,-20(fp)
10018184:	10c00017 	ldw	r3,0(r2)
10018188:	e0bffc17 	ldw	r2,-16(fp)
1001818c:	10800017 	ldw	r2,0(r2)
10018190:	18800d1e 	bne	r3,r2,100181c8 <memcmp+0xa4>
   	    break;
          a1++;
10018194:	e0bffb17 	ldw	r2,-20(fp)
10018198:	10800104 	addi	r2,r2,4
1001819c:	e0bffb15 	stw	r2,-20(fp)
          a2++;
100181a0:	e0bffc17 	ldw	r2,-16(fp)
100181a4:	10800104 	addi	r2,r2,4
100181a8:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
100181ac:	e0bfff17 	ldw	r2,-4(fp)
100181b0:	10bfff04 	addi	r2,r2,-4
100181b4:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
100181b8:	e0bfff17 	ldw	r2,-4(fp)
100181bc:	10800128 	cmpgeui	r2,r2,4
100181c0:	103fef1e 	bne	r2,zero,10018180 <__alt_data_end+0xf8018180>
100181c4:	00000106 	br	100181cc <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
100181c8:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
100181cc:	e0bffb17 	ldw	r2,-20(fp)
100181d0:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
100181d4:	e0bffc17 	ldw	r2,-16(fp)
100181d8:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
100181dc:	00001506 	br	10018234 <memcmp+0x110>
    {
      if (*s1 != *s2)
100181e0:	e0bff917 	ldw	r2,-28(fp)
100181e4:	10c00003 	ldbu	r3,0(r2)
100181e8:	e0bffa17 	ldw	r2,-24(fp)
100181ec:	10800003 	ldbu	r2,0(r2)
100181f0:	18c03fcc 	andi	r3,r3,255
100181f4:	10803fcc 	andi	r2,r2,255
100181f8:	18800826 	beq	r3,r2,1001821c <memcmp+0xf8>
	return *s1 - *s2;
100181fc:	e0bff917 	ldw	r2,-28(fp)
10018200:	10800003 	ldbu	r2,0(r2)
10018204:	10c03fcc 	andi	r3,r2,255
10018208:	e0bffa17 	ldw	r2,-24(fp)
1001820c:	10800003 	ldbu	r2,0(r2)
10018210:	10803fcc 	andi	r2,r2,255
10018214:	1885c83a 	sub	r2,r3,r2
10018218:	00000b06 	br	10018248 <memcmp+0x124>
      s1++;
1001821c:	e0bff917 	ldw	r2,-28(fp)
10018220:	10800044 	addi	r2,r2,1
10018224:	e0bff915 	stw	r2,-28(fp)
      s2++;
10018228:	e0bffa17 	ldw	r2,-24(fp)
1001822c:	10800044 	addi	r2,r2,1
10018230:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
10018234:	e0bfff17 	ldw	r2,-4(fp)
10018238:	10ffffc4 	addi	r3,r2,-1
1001823c:	e0ffff15 	stw	r3,-4(fp)
10018240:	103fe71e 	bne	r2,zero,100181e0 <__alt_data_end+0xf80181e0>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
10018244:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10018248:	e037883a 	mov	sp,fp
1001824c:	df000017 	ldw	fp,0(sp)
10018250:	dec00104 	addi	sp,sp,4
10018254:	f800283a 	ret

10018258 <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
10018258:	defff804 	addi	sp,sp,-32
1001825c:	dfc00715 	stw	ra,28(sp)
10018260:	df000615 	stw	fp,24(sp)
10018264:	dc000515 	stw	r16,20(sp)
10018268:	df000604 	addi	fp,sp,24
1001826c:	e13ffb15 	stw	r4,-20(fp)
10018270:	e17ffc15 	stw	r5,-16(fp)
10018274:	e1bffd15 	stw	r6,-12(fp)
10018278:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
1001827c:	008403b4 	movhi	r2,4110
10018280:	10a44304 	addi	r2,r2,-28404
10018284:	10800017 	ldw	r2,0(r2)
10018288:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
1001828c:	8000081e 	bne	r16,zero,100182b0 <__register_exitproc+0x58>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
10018290:	008403b4 	movhi	r2,4110
10018294:	10a44304 	addi	r2,r2,-28404
10018298:	10c00017 	ldw	r3,0(r2)
1001829c:	008403b4 	movhi	r2,4110
100182a0:	10a44304 	addi	r2,r2,-28404
100182a4:	10800017 	ldw	r2,0(r2)
100182a8:	14005304 	addi	r16,r2,332
100182ac:	1c005215 	stw	r16,328(r3)
  if (p->_ind >= _ATEXIT_SIZE)
100182b0:	80800117 	ldw	r2,4(r16)
100182b4:	10800810 	cmplti	r2,r2,32
100182b8:	1000171e 	bne	r2,zero,10018318 <__register_exitproc+0xc0>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
100182bc:	00840034 	movhi	r2,4096
100182c0:	1097e704 	addi	r2,r2,24476
100182c4:	1000021e 	bne	r2,zero,100182d0 <__register_exitproc+0x78>
	return -1;
100182c8:	00bfffc4 	movi	r2,-1
100182cc:	00004206 	br	100183d8 <__register_exitproc+0x180>

      p = (struct _atexit *) malloc (sizeof *p);
100182d0:	01006404 	movi	r4,400
100182d4:	0005f9c0 	call	10005f9c <malloc>
100182d8:	1021883a 	mov	r16,r2
      if (p == NULL)
100182dc:	8000021e 	bne	r16,zero,100182e8 <__register_exitproc+0x90>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
100182e0:	00bfffc4 	movi	r2,-1
100182e4:	00003c06 	br	100183d8 <__register_exitproc+0x180>
	}
      p->_ind = 0;
100182e8:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
100182ec:	008403b4 	movhi	r2,4110
100182f0:	10a44304 	addi	r2,r2,-28404
100182f4:	10800017 	ldw	r2,0(r2)
100182f8:	10805217 	ldw	r2,328(r2)
100182fc:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
10018300:	008403b4 	movhi	r2,4110
10018304:	10a44304 	addi	r2,r2,-28404
10018308:	10800017 	ldw	r2,0(r2)
1001830c:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
10018310:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
10018314:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
10018318:	e0bffb17 	ldw	r2,-20(fp)
1001831c:	10002426 	beq	r2,zero,100183b0 <__register_exitproc+0x158>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
10018320:	80802204 	addi	r2,r16,136
10018324:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
10018328:	80800117 	ldw	r2,4(r16)
1001832c:	e0fffa17 	ldw	r3,-24(fp)
10018330:	1085883a 	add	r2,r2,r2
10018334:	1085883a 	add	r2,r2,r2
10018338:	1885883a 	add	r2,r3,r2
1001833c:	e0fffd17 	ldw	r3,-12(fp)
10018340:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
10018344:	e0bffa17 	ldw	r2,-24(fp)
10018348:	10804017 	ldw	r2,256(r2)
1001834c:	80c00117 	ldw	r3,4(r16)
10018350:	01000044 	movi	r4,1
10018354:	20c6983a 	sll	r3,r4,r3
10018358:	10c6b03a 	or	r3,r2,r3
1001835c:	e0bffa17 	ldw	r2,-24(fp)
10018360:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
10018364:	80800117 	ldw	r2,4(r16)
10018368:	e0fffa17 	ldw	r3,-24(fp)
1001836c:	10800804 	addi	r2,r2,32
10018370:	1085883a 	add	r2,r2,r2
10018374:	1085883a 	add	r2,r2,r2
10018378:	1885883a 	add	r2,r3,r2
1001837c:	e0fffe17 	ldw	r3,-8(fp)
10018380:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
10018384:	e0bffb17 	ldw	r2,-20(fp)
10018388:	10800098 	cmpnei	r2,r2,2
1001838c:	1000081e 	bne	r2,zero,100183b0 <__register_exitproc+0x158>
	args->_is_cxa |= (1 << p->_ind);
10018390:	e0bffa17 	ldw	r2,-24(fp)
10018394:	10804117 	ldw	r2,260(r2)
10018398:	80c00117 	ldw	r3,4(r16)
1001839c:	01000044 	movi	r4,1
100183a0:	20c6983a 	sll	r3,r4,r3
100183a4:	10c6b03a 	or	r3,r2,r3
100183a8:	e0bffa17 	ldw	r2,-24(fp)
100183ac:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
100183b0:	80800117 	ldw	r2,4(r16)
100183b4:	10c00044 	addi	r3,r2,1
100183b8:	80c00115 	stw	r3,4(r16)
100183bc:	10800084 	addi	r2,r2,2
100183c0:	1085883a 	add	r2,r2,r2
100183c4:	1085883a 	add	r2,r2,r2
100183c8:	8085883a 	add	r2,r16,r2
100183cc:	e0fffc17 	ldw	r3,-16(fp)
100183d0:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
100183d4:	0005883a 	mov	r2,zero
}
100183d8:	e6ffff04 	addi	sp,fp,-4
100183dc:	dfc00217 	ldw	ra,8(sp)
100183e0:	df000117 	ldw	fp,4(sp)
100183e4:	dc000017 	ldw	r16,0(sp)
100183e8:	dec00304 	addi	sp,sp,12
100183ec:	f800283a 	ret

100183f0 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
100183f0:	defff504 	addi	sp,sp,-44
100183f4:	dfc00a15 	stw	ra,40(sp)
100183f8:	df000915 	stw	fp,36(sp)
100183fc:	dc800815 	stw	r18,32(sp)
10018400:	dc400715 	stw	r17,28(sp)
10018404:	dc000615 	stw	r16,24(sp)
10018408:	df000904 	addi	fp,sp,36
1001840c:	e13ffb15 	stw	r4,-20(fp)
10018410:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
10018414:	008403b4 	movhi	r2,4110
10018418:	10a44304 	addi	r2,r2,-28404
1001841c:	10800017 	ldw	r2,0(r2)
10018420:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
10018424:	008403b4 	movhi	r2,4110
10018428:	10a44304 	addi	r2,r2,-28404
1001842c:	10800017 	ldw	r2,0(r2)
10018430:	10805204 	addi	r2,r2,328
10018434:	e0bff715 	stw	r2,-36(fp)
  while (p)
10018438:	00006006 	br	100185bc <__call_exitprocs+0x1cc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
1001843c:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
10018440:	80800117 	ldw	r2,4(r16)
10018444:	147fffc4 	addi	r17,r2,-1
10018448:	00004a06 	br	10018574 <__call_exitprocs+0x184>
	{
	  int ind;

	  i = 1 << n;
1001844c:	00800044 	movi	r2,1
10018450:	1444983a 	sll	r2,r2,r17
10018454:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
10018458:	e0bffc17 	ldw	r2,-16(fp)
1001845c:	10000826 	beq	r2,zero,10018480 <__call_exitprocs+0x90>
10018460:	90004026 	beq	r18,zero,10018564 <__call_exitprocs+0x174>
10018464:	88800804 	addi	r2,r17,32
10018468:	1085883a 	add	r2,r2,r2
1001846c:	1085883a 	add	r2,r2,r2
10018470:	9085883a 	add	r2,r18,r2
10018474:	10c00017 	ldw	r3,0(r2)
10018478:	e0bffc17 	ldw	r2,-16(fp)
1001847c:	1880391e 	bne	r3,r2,10018564 <__call_exitprocs+0x174>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
10018480:	88800084 	addi	r2,r17,2
10018484:	1085883a 	add	r2,r2,r2
10018488:	1085883a 	add	r2,r2,r2
1001848c:	8085883a 	add	r2,r16,r2
10018490:	10800017 	ldw	r2,0(r2)
10018494:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
10018498:	80800117 	ldw	r2,4(r16)
1001849c:	10bfffc4 	addi	r2,r2,-1
100184a0:	1440041e 	bne	r2,r17,100184b4 <__call_exitprocs+0xc4>
	    p->_ind--;
100184a4:	80800117 	ldw	r2,4(r16)
100184a8:	10bfffc4 	addi	r2,r2,-1
100184ac:	80800115 	stw	r2,4(r16)
100184b0:	00000506 	br	100184c8 <__call_exitprocs+0xd8>
	  else
	    p->_fns[n] = NULL;
100184b4:	88800084 	addi	r2,r17,2
100184b8:	1085883a 	add	r2,r2,r2
100184bc:	1085883a 	add	r2,r2,r2
100184c0:	8085883a 	add	r2,r16,r2
100184c4:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
100184c8:	e0bff917 	ldw	r2,-28(fp)
100184cc:	10002726 	beq	r2,zero,1001856c <__call_exitprocs+0x17c>
	    continue;

	  ind = p->_ind;
100184d0:	80800117 	ldw	r2,4(r16)
100184d4:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
100184d8:	90000426 	beq	r18,zero,100184ec <__call_exitprocs+0xfc>
100184dc:	90c04017 	ldw	r3,256(r18)
100184e0:	e0bff817 	ldw	r2,-32(fp)
100184e4:	1884703a 	and	r2,r3,r2
100184e8:	1000031e 	bne	r2,zero,100184f8 <__call_exitprocs+0x108>
	    fn ();
100184ec:	e0bff917 	ldw	r2,-28(fp)
100184f0:	103ee83a 	callr	r2
100184f4:	00001406 	br	10018548 <__call_exitprocs+0x158>
	  else if ((args->_is_cxa & i) == 0)
100184f8:	90c04117 	ldw	r3,260(r18)
100184fc:	e0bff817 	ldw	r2,-32(fp)
10018500:	1884703a 	and	r2,r3,r2
10018504:	1000091e 	bne	r2,zero,1001852c <__call_exitprocs+0x13c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
10018508:	8c45883a 	add	r2,r17,r17
1001850c:	1085883a 	add	r2,r2,r2
10018510:	9085883a 	add	r2,r18,r2
10018514:	10c00017 	ldw	r3,0(r2)
10018518:	e0bff917 	ldw	r2,-28(fp)
1001851c:	180b883a 	mov	r5,r3
10018520:	e13ffb17 	ldw	r4,-20(fp)
10018524:	103ee83a 	callr	r2
10018528:	00000706 	br	10018548 <__call_exitprocs+0x158>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
1001852c:	8c45883a 	add	r2,r17,r17
10018530:	1085883a 	add	r2,r2,r2
10018534:	9085883a 	add	r2,r18,r2
10018538:	10c00017 	ldw	r3,0(r2)
1001853c:	e0bff917 	ldw	r2,-28(fp)
10018540:	1809883a 	mov	r4,r3
10018544:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
10018548:	80c00117 	ldw	r3,4(r16)
1001854c:	e0bffa17 	ldw	r2,-24(fp)
10018550:	18bfb01e 	bne	r3,r2,10018414 <__alt_data_end+0xf8018414>
10018554:	e0bff717 	ldw	r2,-36(fp)
10018558:	10800017 	ldw	r2,0(r2)
1001855c:	143fad1e 	bne	r2,r16,10018414 <__alt_data_end+0xf8018414>
10018560:	00000306 	br	10018570 <__call_exitprocs+0x180>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
10018564:	0001883a 	nop
10018568:	00000106 	br	10018570 <__call_exitprocs+0x180>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
1001856c:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
10018570:	8c7fffc4 	addi	r17,r17,-1
10018574:	883fb50e 	bge	r17,zero,1001844c <__alt_data_end+0xf801844c>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
10018578:	00840034 	movhi	r2,4096
1001857c:	1097f704 	addi	r2,r2,24540
10018580:	10001026 	beq	r2,zero,100185c4 <__call_exitprocs+0x1d4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
10018584:	80800117 	ldw	r2,4(r16)
10018588:	10000a1e 	bne	r2,zero,100185b4 <__call_exitprocs+0x1c4>
1001858c:	80800017 	ldw	r2,0(r16)
10018590:	10000826 	beq	r2,zero,100185b4 <__call_exitprocs+0x1c4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
10018594:	80c00017 	ldw	r3,0(r16)
10018598:	e0bff717 	ldw	r2,-36(fp)
1001859c:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
100185a0:	8009883a 	mov	r4,r16
100185a4:	0005fdc0 	call	10005fdc <free>
	  p = *lastp;
100185a8:	e0bff717 	ldw	r2,-36(fp)
100185ac:	14000017 	ldw	r16,0(r2)
100185b0:	00000206 	br	100185bc <__call_exitprocs+0x1cc>
	}
      else
	{
	  lastp = &p->_next;
100185b4:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
100185b8:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
100185bc:	803f9f1e 	bne	r16,zero,1001843c <__alt_data_end+0xf801843c>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
100185c0:	00000106 	br	100185c8 <__call_exitprocs+0x1d8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
100185c4:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
100185c8:	0001883a 	nop
100185cc:	e6fffd04 	addi	sp,fp,-12
100185d0:	dfc00417 	ldw	ra,16(sp)
100185d4:	df000317 	ldw	fp,12(sp)
100185d8:	dc800217 	ldw	r18,8(sp)
100185dc:	dc400117 	ldw	r17,4(sp)
100185e0:	dc000017 	ldw	r16,0(sp)
100185e4:	dec00504 	addi	sp,sp,20
100185e8:	f800283a 	ret

100185ec <__muldi3>:
100185ec:	defff604 	addi	sp,sp,-40
100185f0:	dd800615 	stw	r22,24(sp)
100185f4:	dd400515 	stw	r21,20(sp)
100185f8:	dc400115 	stw	r17,4(sp)
100185fc:	357fffcc 	andi	r21,r6,65535
10018600:	2022d43a 	srli	r17,r4,16
10018604:	25bfffcc 	andi	r22,r4,65535
10018608:	dcc00315 	stw	r19,12(sp)
1001860c:	dc800215 	stw	r18,8(sp)
10018610:	2027883a 	mov	r19,r4
10018614:	2825883a 	mov	r18,r5
10018618:	b009883a 	mov	r4,r22
1001861c:	a80b883a 	mov	r5,r21
10018620:	dfc00915 	stw	ra,36(sp)
10018624:	df000815 	stw	fp,32(sp)
10018628:	ddc00715 	stw	r23,28(sp)
1001862c:	3839883a 	mov	fp,r7
10018630:	302ed43a 	srli	r23,r6,16
10018634:	dd000415 	stw	r20,16(sp)
10018638:	dc000015 	stw	r16,0(sp)
1001863c:	3029883a 	mov	r20,r6
10018640:	00059d40 	call	100059d4 <__mulsi3>
10018644:	a80b883a 	mov	r5,r21
10018648:	8809883a 	mov	r4,r17
1001864c:	1021883a 	mov	r16,r2
10018650:	00059d40 	call	100059d4 <__mulsi3>
10018654:	8809883a 	mov	r4,r17
10018658:	b80b883a 	mov	r5,r23
1001865c:	102b883a 	mov	r21,r2
10018660:	00059d40 	call	100059d4 <__mulsi3>
10018664:	b80b883a 	mov	r5,r23
10018668:	b009883a 	mov	r4,r22
1001866c:	1023883a 	mov	r17,r2
10018670:	00059d40 	call	100059d4 <__mulsi3>
10018674:	8006d43a 	srli	r3,r16,16
10018678:	1545883a 	add	r2,r2,r21
1001867c:	1885883a 	add	r2,r3,r2
10018680:	1540022e 	bgeu	r2,r21,1001868c <__muldi3+0xa0>
10018684:	00c00074 	movhi	r3,1
10018688:	88e3883a 	add	r17,r17,r3
1001868c:	1006d43a 	srli	r3,r2,16
10018690:	1004943a 	slli	r2,r2,16
10018694:	e00b883a 	mov	r5,fp
10018698:	9809883a 	mov	r4,r19
1001869c:	843fffcc 	andi	r16,r16,65535
100186a0:	1c63883a 	add	r17,r3,r17
100186a4:	1421883a 	add	r16,r2,r16
100186a8:	00059d40 	call	100059d4 <__mulsi3>
100186ac:	900b883a 	mov	r5,r18
100186b0:	a009883a 	mov	r4,r20
100186b4:	1027883a 	mov	r19,r2
100186b8:	00059d40 	call	100059d4 <__mulsi3>
100186bc:	9885883a 	add	r2,r19,r2
100186c0:	1447883a 	add	r3,r2,r17
100186c4:	8005883a 	mov	r2,r16
100186c8:	dfc00917 	ldw	ra,36(sp)
100186cc:	df000817 	ldw	fp,32(sp)
100186d0:	ddc00717 	ldw	r23,28(sp)
100186d4:	dd800617 	ldw	r22,24(sp)
100186d8:	dd400517 	ldw	r21,20(sp)
100186dc:	dd000417 	ldw	r20,16(sp)
100186e0:	dcc00317 	ldw	r19,12(sp)
100186e4:	dc800217 	ldw	r18,8(sp)
100186e8:	dc400117 	ldw	r17,4(sp)
100186ec:	dc000017 	ldw	r16,0(sp)
100186f0:	dec00a04 	addi	sp,sp,40
100186f4:	f800283a 	ret

100186f8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100186f8:	defffd04 	addi	sp,sp,-12
100186fc:	df000215 	stw	fp,8(sp)
10018700:	df000204 	addi	fp,sp,8
10018704:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10018708:	0001883a 	nop
1001870c:	e0bfff17 	ldw	r2,-4(fp)
10018710:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10018714:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10018718:	10000226 	beq	r2,zero,10018724 <_exit+0x2c>
    ALT_SIM_FAIL();
1001871c:	002af070 	cmpltui	zero,zero,43969
10018720:	00000106 	br	10018728 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10018724:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10018728:	003fff06 	br	10018728 <__alt_data_end+0xf8018728>
