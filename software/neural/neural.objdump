
neural.elf:     file format elf32-littlenios2
neural.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000cf934 memsz 0x000cf934 flags r-x
    LOAD off    0x000d0954 vaddr 0x100cf954 paddr 0x100d91ec align 2**12
         filesz 0x00009898 memsz 0x00009898 flags rw-
    LOAD off    0x000daa84 vaddr 0x100e2a84 paddr 0x100e2a84 align 2**12
         filesz 0x00000000 memsz 0x000001f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018530  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000b71f4  10018760  10018760  00019760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00009898  100cf954  100d91ec  000d0954  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f0  100e2a84  100e2a84  000daa84  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000da1ec  2**0
                  CONTENTS
  7 .sdram        00000000  100e2c74  100e2c74  000da1ec  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000da1ec  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001438  00000000  00000000  000da210  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e786  00000000  00000000  000db648  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b931  00000000  00000000  00109dce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d605  00000000  00000000  001156ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003240  00000000  00000000  00122d04  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000480a  00000000  00000000  00125f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bb43  00000000  00000000  0012a74e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00136294  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b20  00000000  00000000  001362a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0013be7e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0013be81  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0013be8d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0013be8e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0013be8f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0013be93  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0013be97  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0013be9b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0013bea6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0013beb1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0013bebc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000016  00000000  00000000  0013bec6  2**0
                  CONTENTS, READONLY
 30 .jdi          000043c0  00000000  00000000  0013bedc  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00081130  00000000  00000000  0014029c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10018760 l    d  .rodata	00000000 .rodata
100cf954 l    d  .rwdata	00000000 .rwdata
100e2a84 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100e2c74 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../neural_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 formula.c
10000428 l     F .text	000000b8 printme
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 types.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 drand48.c
00000000 l    df *ABS*	00000000 erand48.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
100d7654 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
10006054 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand48.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 s_ldexp.c
00000000 l    df *ABS*	00000000 s_scalbn.c
100d9150 l     O .rwdata	00000008 two54
100d9158 l     O .rwdata	00000008 twom54
100d9160 l     O .rwdata	00000008 huge
100d9168 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
10008d20 l     F .text	000000f0 __sbprintf
1000af50 l     F .text	0000020c cvt
1000b15c l     F .text	00000140 exponent
100cf4ba l     O .rodata	00000010 blanks.4403
100cf4ca l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
100cf4da l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
1000b444 l     F .text	000003c4 quorem
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000d798 l     F .text	000000f4 std
100e2a9c l     O .bss	00000004 __sfp_lock
100e2aa0 l     O .bss	00000004 __sinit_lock
1000dccc l     F .text	00000024 __fp_lock
1000dcf0 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
100d7e80 l     O .rwdata	00000038 lconv
100d7eb8 l     O .rwdata	00000020 lc_ctype_charset
100d7ed8 l     O .rwdata	00000020 lc_message_charset
100e2ab4 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
100cf89c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
100112f8 l     F .text	00000050 lflush
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011ca4 l     F .text	000000f0 __sbprintf
100cf8f2 l     O .rodata	00000010 blanks.4348
100cf902 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10015580 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100156a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100156d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
100159e0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10015adc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10015bc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10015db8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100d9194 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
100161e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10016334 l     F .text	00000038 alt_dev_reg
100d80a0 l     O .rwdata	00001060 jtag_uart_0
100d9100 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10016628 l     F .text	0000020c altera_avalon_jtag_uart_irq
10016834 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
100d91a0 l     O .rwdata	00000009 hcinfo.2538
100d91ac l     O .rwdata	0000000a hcinfo.2551
100d91b8 l     O .rwdata	00000009 hcinfo.2560
100d91c4 l     O .rwdata	0000000a hcinfo.2573
100d91d0 l     O .rwdata	0000000a hcinfo.2586
100d91dc l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10017458 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10017980 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10017ae0 l     F .text	00000050 alt_get_errno
10017b30 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
100e2ae4 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
100e2ae0 g     O .bss	00000004 alt_instruction_exception_handler
10007268 g     F .text	00000050 putchar
10010e30 g     F .text	000000b0 _mprec_log10
10010fb0 g     F .text	00000134 __any_on
10013850 g     F .text	00000078 _isatty_r
100cf874 g     O .rodata	00000028 __mprec_tinytens
10015cf4 g     F .text	0000007c alt_main
100072b8 g     F .text	00000118 _puts_r
100e2b74 g     O .bss	00000100 alt_irq
100138c8 g     F .text	00000088 _lseek_r
100d91ec g       *ABS*	00000000 __flash_rwdata_start
10015218 g     F .text	00000088 .hidden __eqdf2
1000ec88 g     F .text	00000080 _gettimeofday_r
100e2c74 g       *ABS*	00000000 __alt_heap_start
100071ac g     F .text	00000078 printf
100139d8 g     F .text	000000e4 _wcrtomb_r
10011934 g     F .text	000000a0 __sseek
1000db74 g     F .text	000000d8 __sinit
100130c8 g     F .text	00000168 __swbuf_r
1000ed08 g     F .text	00000084 _setlocale_r
1000d88c g     F .text	000000bc __sfmoreglue
10015d94 g     F .text	00000024 __malloc_unlock
10016e74 g     F .text	0000011c alt_hostfs_open
10002a14 g     F .text	00000440 .hidden __divsf3
100e2b10 g     O .bss	00000028 layer_2
1000f42c g     F .text	00000208 memmove
1000db38 g     F .text	0000003c _cleanup
1000f634 g     F .text	00000130 _Balloc
10003964 g     F .text	00000070 .hidden __fixsfsi
100152a0 g     F .text	000000dc .hidden __gtdf2
10017d84 g     F .text	00000024 altera_nios2_gen2_irq_init
1000d380 g     F .text	00000028 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100137d0 g     F .text	00000080 _fstat_r
100e2aa4 g     O .bss	00000004 errno
10008290 g     F .text	00000040 __srget
10011850 g     F .text	00000030 __seofread
100e2acc g     O .bss	00000004 alt_argv
100e1128 g       *ABS*	00000000 _gp
10001f1c g     F .text	000002b8 backprop_layer_2
10003480 g     F .text	000004e4 .hidden __subsf3
100d7f20 g     O .rwdata	00000180 alt_fd_list
10005e94 g     F .text	00000098 _getc_r
10005f2c g     F .text	000000a4 getc
100170ac g     F .text	00000068 alt_hostfs_seek
10007224 g     F .text	00000044 _putchar_r
10017da8 g     F .text	00000090 alt_find_dev
1000f2a4 g     F .text	00000188 memcpy
1000daf4 g     F .text	00000044 _cleanup_r
100153fc g     F .text	000000dc .hidden __floatsidf
1001760c g     F .text	00000084 alt_fs_reg
10017a64 g     F .text	0000007c alt_io_redirect
10004494 g     F .text	000000f4 .hidden __ltdf2
10018760 g       *ABS*	00000000 __DTOR_END__
100073d0 g     F .text	00000040 puts
10018020 g     F .text	0000009c alt_exception_cause_generated_bad_addr
100e2a84 g     O .bss	00000004 total_runs
100116b0 g     F .text	00000104 __fpclassifyd
1000026c g     F .text	00000038 sigmoid
10010d14 g     F .text	0000011c __ratio
10011d94 g     F .text	00000058 __vfiprintf_internal
100d9130 g     O .rwdata	00000004 to_isig_hw_port
10016a34 g     F .text	0000021c altera_avalon_jtag_uart_read
10005fd0 g     F .text	00000040 malloc
10007148 g     F .text	00000064 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002490 g     F .text	00000064 .hidden __udivsi3
10015a30 g     F .text	000000ac isatty
100cf784 g     O .rodata	000000c8 __mprec_tens
1000ed8c g     F .text	00000024 __locale_charset
100082d0 g     F .text	000000cc ldexp
10002f88 g     F .text	000000c8 .hidden __lesf2
100e2ab8 g     O .bss	00000008 alt_timezone
100e2a90 g     O .bss	00000004 __malloc_top_pad
100d9174 g     O .rwdata	00000004 __mb_cur_max
1000ee14 g     F .text	00000028 _localeconv_r
1000fc94 g     F .text	00000058 __i2b
1000e4ec g     F .text	000005e8 __sfvwrite_r
10008744 g     F .text	00000078 _sbrk_r
10016fd4 g     F .text	0000006c alt_hostfs_read
10013950 g     F .text	00000088 _read_r
100d918c g     O .rwdata	00000004 alt_max_fd
10013378 g     F .text	0000012c _fclose_r
10001e00 g     F .text	0000011c eval_layer_2
1000d734 g     F .text	00000064 fflush
100e2a94 g     O .bss	00000004 __malloc_max_sbrked_mem
100056ec g     F .text	00000110 .hidden __extendsfdf2
100003a8 g     F .text	00000080 debug
10003be8 g     F .text	000008ac .hidden __adddf3
10002e54 g     F .text	00000078 .hidden __nesf2
100108d0 g     F .text	00000204 __b2d
10014284 g     F .text	000005c4 .hidden __umoddi3
10015c18 g     F .text	000000dc lseek
100d9144 g     O .rwdata	00000004 _global_impure_ptr
10007610 g     F .text	00000bf0 _realloc_r
100e2c74 g       *ABS*	00000000 __bss_end
10017890 g     F .text	000000f0 alt_iic_isr_register
100160dc g     F .text	00000108 alt_tick
10013c88 g     F .text	000005fc .hidden __udivdi3
100136d8 g     F .text	00000088 _fputwc_r
100cf84c g     O .rodata	00000028 __mprec_bigtens
1000f98c g     F .text	0000018c __s2b
100154d8 g     F .text	000000a8 .hidden __floatunsidf
1001044c g     F .text	00000114 __mcmp
100021d4 g     F .text	00000164 free_layer_2
1000dd14 g     F .text	00000048 __fp_lock_all
10017844 g     F .text	0000004c alt_ic_irq_enabled
10001b0c g     F .text	000002f4 init_layer_2
10016040 g     F .text	0000009c alt_alarm_stop
10008c68 g     F .text	00000050 strtol
100e2adc g     O .bss	00000004 alt_irq_active
10016f90 g     F .text	00000044 alt_hostfs_close
100000fc g     F .exceptions	000000d4 alt_irq_handler
100d7ef8 g     O .rwdata	00000028 alt_dev_null
10017438 g     F .text	00000020 alt_dcache_flush_all
1000fb18 g     F .text	00000090 __hi0bits
1001537c g     F .text	00000080 .hidden __fixdfsi
10005aa8 g     F .text	00000048 calloc
100d91ec g       *ABS*	00000000 __ram_rwdata_end
100d9184 g     O .rwdata	00000008 alt_dev_list
10000638 g     F .text	00000134 parse_testing_data
10016234 g     F .text	00000100 write
100110e4 g     F .text	00000104 _putc_r
10002ecc g     F .text	000000bc .hidden __gtsf2
100cf954 g       *ABS*	00000000 __ram_rodata_end
10015724 g     F .text	000000b8 fstat
10004494 g     F .text	000000f4 .hidden __ledf2
10005cf8 g     F .text	00000144 _erand48_r
100100dc g     F .text	00000178 __pow5mult
10011dec g     F .text	000012dc ___vfiprintf_internal_r
100e2aa8 g     O .bss	00000004 __nlocale_changed
100024f4 g     F .text	00000058 .hidden __umodsi3
10000ee8 g     F .text	00000060 get_array_value
100e2c74 g       *ABS*	00000000 end
10005a68 g     F .text	00000040 _atoi_r
10016560 g     F .text	000000c8 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
100d913c g     O .rwdata	00000004 to_sw_sig
10018760 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100059a4 g     F .text	00000064 .hidden __clzsi2
10016c50 g     F .text	00000224 altera_avalon_jtag_uart_write
1000dc4c g     F .text	00000020 __sfp_lock_acquire
1000f0e8 g     F .text	000001bc memchr
10008e68 g     F .text	000020e8 ___vfprintf_internal_r
1000dda4 g     F .text	00000570 _free_r
10000f9c g     F .text	000000a4 print_array
1000edb0 g     F .text	00000020 __locale_mb_cur_max
100d9128 g     O .rwdata	00000004 to_sig_hw_port
10018424 g     F .text	000001fc __call_exitprocs
10008200 g     F .text	00000090 __srget_r
100e2aac g     O .bss	00000004 __mlocale_changed
100d914c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100e2ad4 g     O .bss	00000004 _alt_tick_rate
10010254 g     F .text	000001f8 __lshift
100e2ad8 g     O .bss	00000004 _alt_nticks
10015e08 g     F .text	00000104 read
100163a4 g     F .text	00000058 alt_sys_init
100039d4 g     F .text	00000124 .hidden __floatsisf
1001828c g     F .text	00000198 __register_exitproc
100e2b38 g     O .bss	00000024 layer_1
1000fcec g     F .text	000003f0 __multiply
100168dc g     F .text	00000068 altera_avalon_jtag_uart_close
10005a08 g     F .text	00000028 .hidden __mulsi3
100cf954 g       *ABS*	00000000 __ram_rwdata_start
10018760 g       *ABS*	00000000 __ram_rodata_start
100e2ae8 g     O .bss	00000028 __malloc_current_mallinfo
10002e54 g     F .text	00000078 .hidden __eqsf2
10010ad4 g     F .text	00000240 __d2b
100d66b4 g     O .rwdata	00000fa0 testing_data
100075c8 g     F .text	00000048 realloc
100163fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10017f4c g     F .text	000000d4 alt_get_fd
100d912c g     O .rwdata	00000004 to_sig_sw_port
10013300 g     F .text	00000078 _close_r
10018158 g     F .text	00000134 memcmp
100164bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100e2c74 g       *ABS*	00000000 __alt_stack_base
1001650c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000b29c g     F .text	000001a8 __swsetup_r
10014848 g     F .text	000009d0 .hidden __divdf3
1000d948 g     F .text	000001ac __sfp
10010ee0 g     F .text	000000d0 __copybits
100d7a78 g     O .rwdata	00000408 __malloc_av_
1000dcac g     F .text	00000020 __sinit_lock_release
10004588 g     F .text	00000868 .hidden __muldf3
10008844 g     F .text	00000044 srand48
100117b4 g     F .text	0000009c __sread
10017e38 g     F .text	00000114 alt_find_file
100004e0 g     F .text	00000158 parse_training_data
100174a8 g     F .text	000000a4 alt_dev_llist_insert
10015d70 g     F .text	00000024 __malloc_lock
10015f90 g     F .text	000000b0 sbrk
1000d6ac g     F .text	00000088 _fflush_r
10005af0 g     F .text	00000164 _calloc_r
10000d7c g     F .text	00000074 init_array
100157dc g     F .text	00000204 gettimeofday
10001568 g     F .text	0000013c eval_layer_1
100e2a84 g       *ABS*	00000000 __bss_start
10006f84 g     F .text	000001c4 memset
100002dc g     F .text	00000088 err
1000076c g     F .text	00000610 main
100e2ad0 g     O .bss	00000004 alt_envp
100e2a98 g     O .bss	00000004 __malloc_max_total_mem
1001645c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10013230 g     F .text	00000048 __swbuf
10002f88 g     F .text	000000c8 .hidden __ltsf2
100119d4 g     F .text	00000054 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
100134a4 g     F .text	00000040 fclose
1000897c g     F .text	000002ec _strtol_r
100057fc g     F .text	000001a8 .hidden __truncdfsf2
1000b808 g     F .text	00001b78 _dtoa_r
10006408 g     F .text	00000b7c _malloc_r
10013c10 g     F .text	00000078 __ascii_wctomb
10008cb8 g     F .text	00000068 time
10007410 g     F .text	000001b8 __dorand48
100d9190 g     O .rwdata	00000004 alt_errno
1000ead4 g     F .text	000000d8 _fwalk
100111e8 g     F .text	00000110 putc
10002398 g     F .text	00000084 .hidden __divsi3
1000e314 g     F .text	000001d8 _malloc_trim_r
10018760 g       *ABS*	00000000 __CTOR_END__
10003050 g     F .text	00000430 .hidden __mulsf3
10011658 g     F .text	00000058 finite
10011a28 g     F .text	00000140 strcmp
10018760 g       *ABS*	00000000 __flash_rodata_start
10018760 g       *ABS*	00000000 __DTOR_LIST__
100115a4 g     F .text	000000b4 copysign
10015218 g     F .text	00000088 .hidden __nedf2
1001636c g     F .text	00000038 alt_irq_init
10015f0c g     F .text	00000084 alt_release_fd
100cf354 g     O .rodata	00000100 .hidden __clz_tab
100e2ab0 g     O .bss	00000004 _PathLocale
100180bc g     F .text	0000003c atexit
10002ecc g     F .text	000000bc .hidden __gesf2
100d9138 g     O .rwdata	00000004 to_hw_sig
10013278 g     F .text	00000088 _write_r
1000ee3c g     F .text	00000048 setlocale
100d9140 g     O .rwdata	00000004 _impure_ptr
100e2ac8 g     O .bss	00000004 alt_argc
10005c54 g     F .text	00000054 _drand48_r
10005e3c g     F .text	00000058 erand48
1000d3a8 g     F .text	00000304 __sflush_r
1000839c g     F .text	000003a8 scalbn
100175ac g     F .text	00000060 _do_dtors
1000edf4 g     F .text	00000020 __locale_cjk_lang
10001040 g     F .text	00000090 print_float_array
10011348 g     F .text	0000025c __srefill_r
100019a0 g     F .text	0000016c free_layer_1
10000020 g       .exceptions	00000000 alt_irq_entry
10010804 g     F .text	000000cc __ulp
1000dd5c g     F .text	00000048 __fp_unlock_all
100016a4 g     F .text	000002fc backprop_layer_1
100d917c g     O .rwdata	00000008 alt_fs_list
10017040 g     F .text	0000006c alt_hostfs_write
100e2ac0 g     O .bss	00000008 alt_resettime
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000ee84 g     F .text	00000038 localeconv
10000364 g     F .text	00000044 inv_err
100176b0 g     F .text	00000050 alt_ic_isr_register
100002a4 g     F .text	00000038 inv_sigmoid
100e2b5c g     O .bss	0000000c target_vals
100d91ec g       *ABS*	00000000 _edata
100e2c74 g       *ABS*	00000000 _end
100134e4 g     F .text	000001f4 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
100087bc g     F .text	00000088 _srand48_r
10016944 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10005ca8 g     F .text	00000050 drand48
100cf954 g     O .rwdata	00006d60 training_data
100177a0 g     F .text	000000a4 alt_ic_irq_disable
10011880 g     F .text	000000b4 __swrite
100e2b68 g     O .bss	0000000c attr_vals
100d9148 g     O .rwdata	00000004 __malloc_trim_threshold
100e2a88 g     O .bss	00000004 num_incorrect
1000edd0 g     F .text	00000024 __locale_msgcharset
100180f8 g     F .text	00000060 exit
1000ebac g     F .text	000000dc _fwalk_reent
10003af8 g     F .text	000000f0 .hidden __floatunsisf
10010560 g     F .text	000002a4 __mdiff
1000241c g     F .text	00000074 .hidden __modsi3
100d9170 g     O .rwdata	00000004 __ctype_ptr__
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000dc6c g     F .text	00000020 __sfp_lock_release
100010d0 g     F .text	00000114 dot_product_1
100011e4 g     F .text	000000d0 dot_product_2
10000000 g       *ABS*	00000000 __alt_mem_sdram
10000f48 g     F .text	00000054 free_array
10005a30 g     F .text	00000038 atoi
100d9134 g     O .rwdata	00000004 to_isig_sw_port
100e2a8c g     O .bss	00000004 curr_point
100cf65a g     O .rodata	00000101 _ctype_
10002338 g     F .text	00000060 .hidden __fixunssfsi
1001872c g     F .text	00000034 _exit
100172f8 g     F .text	00000140 alt_alarm_start
10018620 g     F .text	0000010c .hidden __muldi3
1000eebc g     F .text	0000022c __smakebuf_r
10008888 g     F .text	000000f4 strlen
10017c24 g     F .text	00000160 open
100152a0 g     F .text	000000dc .hidden __gedf2
100d9178 g     O .rwdata	00000004 __wctomb
10011b68 g     F .text	0000013c __sprint_r
10017690 g     F .text	00000020 alt_icache_flush_all
100d91e8 g     O .rwdata	00000004 alt_priority_mask
10017700 g     F .text	000000a0 alt_ic_irq_enable
10008e10 g     F .text	00000058 __vfprintf_internal
10013bac g     F .text	00000064 _wctomb_r
10004df0 g     F .text	000008fc .hidden __subdf3
1000fba8 g     F .text	000000ec __lo0bits
100d9198 g     O .rwdata	00000008 alt_alarm_list
1001754c g     F .text	00000060 _do_ctors
100012b4 g     F .text	000002b4 init_layer_1
10013abc g     F .text	000000f0 wcrtomb
100155d0 g     F .text	000000d8 close
1000254c g     F .text	000004c8 .hidden __addsf3
10000df0 g     F .text	000000f8 insert_array
10015b44 g     F .text	00000084 alt_load
10013760 g     F .text	00000070 fputwc
10006010 g     F .text	00000044 free
1000dc8c g     F .text	00000020 __sinit_lock_acquire
1000f7e0 g     F .text	000001ac __multadd
1000f764 g     F .text	0000007c _Bfree
10017114 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008403b4 	movhi	r2,4110
10000140:	108add04 	addi	r2,r2,11124
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008403b4 	movhi	r2,4110
10000158:	108add04 	addi	r2,r2,11124
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0866e17 	ldw	r2,6584(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0866e17 	ldw	r2,6584(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068403b4 	movhi	gp,4110
    ori gp, gp, %lo(_gp)
1000023c:	d6844a14 	ori	gp,gp,4392
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008403b4 	movhi	r2,4110
    ori r2, r2, %lo(__bss_start)
10000244:	108aa114 	ori	r2,r2,10884

    movhi r3, %hi(__bss_end)
10000248:	00c403b4 	movhi	r3,4110
    ori r3, r3, %lo(__bss_end)
1000024c:	18cb1d14 	ori	r3,r3,11380

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0015b440 	call	10015b44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0015cf40 	call	10015cf4 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <sigmoid>:
volatile float *to_sig_sw_port = (float *) 0x00000090;

volatile float *to_isig_hw_port = (float *) 0x000000c0;
volatile float *to_isig_sw_port = (float *) 0x000000d0;

float sigmoid(float x) {
1000026c:	defffe04 	addi	sp,sp,-8
10000270:	df000115 	stw	fp,4(sp)
10000274:	df000104 	addi	fp,sp,4
10000278:	e13fff15 	stw	r4,-4(fp)
        	return approx / (1.0 + approx);
        } else {
        	return 1.0 / (1.0 + approx);
        }
    } else {
    	*to_sig_hw_port = x;
1000027c:	d0a00017 	ldw	r2,-32768(gp)
10000280:	e0ffff17 	ldw	r3,-4(fp)
10000284:	10c00015 	stw	r3,0(r2)
    	return *to_sig_sw_port;
10000288:	d0a00117 	ldw	r2,-32764(gp)
1000028c:	10c00017 	ldw	r3,0(r2)
10000290:	1805883a 	mov	r2,r3
    }
}
10000294:	e037883a 	mov	sp,fp
10000298:	df000017 	ldw	fp,0(sp)
1000029c:	dec00104 	addi	sp,sp,4
100002a0:	f800283a 	ret

100002a4 <inv_sigmoid>:

float inv_sigmoid(float x) {
100002a4:	defffe04 	addi	sp,sp,-8
100002a8:	df000115 	stw	fp,4(sp)
100002ac:	df000104 	addi	fp,sp,4
100002b0:	e13fff15 	stw	r4,-4(fp)
	if(!ON_FPGA) {
		return sigmoid(x) * (1 - sigmoid(x));
	} else {
		*to_isig_hw_port = x;
100002b4:	d0a00217 	ldw	r2,-32760(gp)
100002b8:	e0ffff17 	ldw	r3,-4(fp)
100002bc:	10c00015 	stw	r3,0(r2)
		return *to_isig_sw_port;
100002c0:	d0a00317 	ldw	r2,-32756(gp)
100002c4:	10c00017 	ldw	r3,0(r2)
100002c8:	1805883a 	mov	r2,r3
	}
}
100002cc:	e037883a 	mov	sp,fp
100002d0:	df000017 	ldw	fp,0(sp)
100002d4:	dec00104 	addi	sp,sp,4
100002d8:	f800283a 	ret

100002dc <err>:

float err(float o, float t) {
100002dc:	defffb04 	addi	sp,sp,-20
100002e0:	dfc00415 	stw	ra,16(sp)
100002e4:	df000315 	stw	fp,12(sp)
100002e8:	dc000215 	stw	r16,8(sp)
100002ec:	df000304 	addi	fp,sp,12
100002f0:	e13ffd15 	stw	r4,-12(fp)
100002f4:	e17ffe15 	stw	r5,-8(fp)
	return 0.5 * ((t - o) * (t - o));
100002f8:	e17ffd17 	ldw	r5,-12(fp)
100002fc:	e13ffe17 	ldw	r4,-8(fp)
10000300:	00034800 	call	10003480 <__subsf3>
10000304:	1007883a 	mov	r3,r2
10000308:	1821883a 	mov	r16,r3
1000030c:	e17ffd17 	ldw	r5,-12(fp)
10000310:	e13ffe17 	ldw	r4,-8(fp)
10000314:	00034800 	call	10003480 <__subsf3>
10000318:	1007883a 	mov	r3,r2
1000031c:	1805883a 	mov	r2,r3
10000320:	100b883a 	mov	r5,r2
10000324:	8009883a 	mov	r4,r16
10000328:	00030500 	call	10003050 <__mulsf3>
1000032c:	1007883a 	mov	r3,r2
10000330:	1805883a 	mov	r2,r3
10000334:	014fc034 	movhi	r5,16128
10000338:	1009883a 	mov	r4,r2
1000033c:	00030500 	call	10003050 <__mulsf3>
10000340:	1009883a 	mov	r4,r2
10000344:	2007883a 	mov	r3,r4
10000348:	1805883a 	mov	r2,r3
}
1000034c:	e6ffff04 	addi	sp,fp,-4
10000350:	dfc00217 	ldw	ra,8(sp)
10000354:	df000117 	ldw	fp,4(sp)
10000358:	dc000017 	ldw	r16,0(sp)
1000035c:	dec00304 	addi	sp,sp,12
10000360:	f800283a 	ret

10000364 <inv_err>:

float inv_err(float o, float t) {
10000364:	defffc04 	addi	sp,sp,-16
10000368:	dfc00315 	stw	ra,12(sp)
1000036c:	df000215 	stw	fp,8(sp)
10000370:	df000204 	addi	fp,sp,8
10000374:	e13ffe15 	stw	r4,-8(fp)
10000378:	e17fff15 	stw	r5,-4(fp)
	return (o - t);
1000037c:	e17fff17 	ldw	r5,-4(fp)
10000380:	e13ffe17 	ldw	r4,-8(fp)
10000384:	00034800 	call	10003480 <__subsf3>
10000388:	1009883a 	mov	r4,r2
1000038c:	2007883a 	mov	r3,r4
10000390:	1805883a 	mov	r2,r3
}
10000394:	e037883a 	mov	sp,fp
10000398:	dfc00117 	ldw	ra,4(sp)
1000039c:	df000017 	ldw	fp,0(sp)
100003a0:	dec00204 	addi	sp,sp,8
100003a4:	f800283a 	ret

100003a8 <debug>:

void debug(float x) {
100003a8:	defffd04 	addi	sp,sp,-12
100003ac:	dfc00215 	stw	ra,8(sp)
100003b0:	df000115 	stw	fp,4(sp)
100003b4:	df000104 	addi	fp,sp,4
100003b8:	e13fff15 	stw	r4,-4(fp)
	printf("Floating Point:\n");
100003bc:	010400b4 	movhi	r4,4098
100003c0:	2121d804 	addi	r4,r4,-30880
100003c4:	00073d00 	call	100073d0 <puts>
	printf("%f : ", x);
100003c8:	e0bfff17 	ldw	r2,-4(fp)
100003cc:	1009883a 	mov	r4,r2
100003d0:	00056ec0 	call	100056ec <__extendsfdf2>
100003d4:	100d883a 	mov	r6,r2
100003d8:	180f883a 	mov	r7,r3
100003dc:	300b883a 	mov	r5,r6
100003e0:	380d883a 	mov	r6,r7
100003e4:	010400b4 	movhi	r4,4098
100003e8:	2121dc04 	addi	r4,r4,-30864
100003ec:	00071ac0 	call	100071ac <printf>
	printme(&x, sizeof(float));
100003f0:	01400104 	movi	r5,4
100003f4:	e13fff04 	addi	r4,fp,-4
100003f8:	00004280 	call	10000428 <printme>

	printf("Fixed Point:\n");
100003fc:	010400b4 	movhi	r4,4098
10000400:	2121de04 	addi	r4,r4,-30856
10000404:	00073d00 	call	100073d0 <puts>
	// convert to fixed point
	printf("\n");
10000408:	01000284 	movi	r4,10
1000040c:	00072680 	call	10007268 <putchar>
}
10000410:	0001883a 	nop
10000414:	e037883a 	mov	sp,fp
10000418:	dfc00117 	ldw	ra,4(sp)
1000041c:	df000017 	ldw	fp,0(sp)
10000420:	dec00204 	addi	sp,sp,8
10000424:	f800283a 	ret

10000428 <printme>:

static void printme(void *c, size_t n) {
10000428:	defffa04 	addi	sp,sp,-24
1000042c:	dfc00515 	stw	ra,20(sp)
10000430:	df000415 	stw	fp,16(sp)
10000434:	df000404 	addi	fp,sp,16
10000438:	e13ffe15 	stw	r4,-8(fp)
1000043c:	e17fff15 	stw	r5,-4(fp)
	unsigned char *t = c;
10000440:	e0bffe17 	ldw	r2,-8(fp)
10000444:	e0bffd15 	stw	r2,-12(fp)
	if (c == NULL)
10000448:	e0bffe17 	ldw	r2,-8(fp)
1000044c:	10001e26 	beq	r2,zero,100004c8 <printme+0xa0>
		return;
	while (n > 0) {
10000450:	00001806 	br	100004b4 <printme+0x8c>
		int q;
		--n;
10000454:	e0bfff17 	ldw	r2,-4(fp)
10000458:	10bfffc4 	addi	r2,r2,-1
1000045c:	e0bfff15 	stw	r2,-4(fp)
		for(q = 0x80; q; q >>= 1)
10000460:	00802004 	movi	r2,128
10000464:	e0bffc15 	stw	r2,-16(fp)
10000468:	00001006 	br	100004ac <printme+0x84>
			printf("%x", !!(t[n] & q));
1000046c:	e0fffd17 	ldw	r3,-12(fp)
10000470:	e0bfff17 	ldw	r2,-4(fp)
10000474:	1885883a 	add	r2,r3,r2
10000478:	10800003 	ldbu	r2,0(r2)
1000047c:	10c03fcc 	andi	r3,r2,255
10000480:	e0bffc17 	ldw	r2,-16(fp)
10000484:	1884703a 	and	r2,r3,r2
10000488:	1004c03a 	cmpne	r2,r2,zero
1000048c:	10803fcc 	andi	r2,r2,255
10000490:	100b883a 	mov	r5,r2
10000494:	010400b4 	movhi	r4,4098
10000498:	2121e204 	addi	r4,r4,-30840
1000049c:	00071ac0 	call	100071ac <printf>
	if (c == NULL)
		return;
	while (n > 0) {
		int q;
		--n;
		for(q = 0x80; q; q >>= 1)
100004a0:	e0bffc17 	ldw	r2,-16(fp)
100004a4:	1005d07a 	srai	r2,r2,1
100004a8:	e0bffc15 	stw	r2,-16(fp)
100004ac:	e0bffc17 	ldw	r2,-16(fp)
100004b0:	103fee1e 	bne	r2,zero,1000046c <__alt_data_end+0xf800046c>

static void printme(void *c, size_t n) {
	unsigned char *t = c;
	if (c == NULL)
		return;
	while (n > 0) {
100004b4:	e0bfff17 	ldw	r2,-4(fp)
100004b8:	103fe61e 	bne	r2,zero,10000454 <__alt_data_end+0xf8000454>
		int q;
		--n;
		for(q = 0x80; q; q >>= 1)
			printf("%x", !!(t[n] & q));
	}
	printf("\n");
100004bc:	01000284 	movi	r4,10
100004c0:	00072680 	call	10007268 <putchar>
100004c4:	00000106 	br	100004cc <printme+0xa4>
}

static void printme(void *c, size_t n) {
	unsigned char *t = c;
	if (c == NULL)
		return;
100004c8:	0001883a 	nop
		--n;
		for(q = 0x80; q; q >>= 1)
			printf("%x", !!(t[n] & q));
	}
	printf("\n");
}
100004cc:	e037883a 	mov	sp,fp
100004d0:	dfc00117 	ldw	ra,4(sp)
100004d4:	df000017 	ldw	fp,0(sp)
100004d8:	dec00204 	addi	sp,sp,8
100004dc:	f800283a 	ret

100004e0 <parse_training_data>:

uint32_t	curr_point;
uint32_t 	total_runs;
uint32_t	num_incorrect;

int parse_training_data() {
100004e0:	defff904 	addi	sp,sp,-28
100004e4:	dfc00615 	stw	ra,24(sp)
100004e8:	df000515 	stw	fp,20(sp)
100004ec:	df000504 	addi	fp,sp,20
	// reset dataset
	init_array(&target_vals, INITIAL_ARR_SIZE);
100004f0:	0150b234 	movhi	r5,17096
100004f4:	010403b4 	movhi	r4,4110
100004f8:	210ad704 	addi	r4,r4,11100
100004fc:	0000d7c0 	call	10000d7c <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
10000500:	0150b234 	movhi	r5,17096
10000504:	010403b4 	movhi	r4,4110
10000508:	210ada04 	addi	r4,r4,11112
1000050c:	0000d7c0 	call	10000d7c <init_array>
	curr_point 		= 0;
10000510:	008403b4 	movhi	r2,4110
10000514:	108aa304 	addi	r2,r2,10892
10000518:	10000015 	stw	zero,0(r2)
	total_runs 		= 0;
1000051c:	008403b4 	movhi	r2,4110
10000520:	108aa104 	addi	r2,r2,10884
10000524:	10000015 	stw	zero,0(r2)
	num_incorrect 	= 0;
10000528:	008403b4 	movhi	r2,4110
1000052c:	108aa204 	addi	r2,r2,10888
10000530:	10000015 	stw	zero,0(r2)

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
10000534:	e03ffc15 	stw	zero,-16(fp)
10000538:	00003606 	br	10000614 <parse_training_data+0x134>
		line = training_data[i];
1000053c:	00840374 	movhi	r2,4109
10000540:	10be5504 	addi	r2,r2,-1708
10000544:	e0fffc17 	ldw	r3,-16(fp)
10000548:	18c7883a 	add	r3,r3,r3
1000054c:	18c7883a 	add	r3,r3,r3
10000550:	10c5883a 	add	r2,r2,r3
10000554:	10800017 	ldw	r2,0(r2)
10000558:	e0bffe15 	stw	r2,-8(fp)
		first_elem = 1;
1000055c:	00800044 	movi	r2,1
10000560:	e0bffb05 	stb	r2,-20(fp)
		if (i % 100 == 0) printf("%d\n", i);
10000564:	e0bffc17 	ldw	r2,-16(fp)
10000568:	01401904 	movi	r5,100
1000056c:	1009883a 	mov	r4,r2
10000570:	000241c0 	call	1000241c <__modsi3>
10000574:	1000041e 	bne	r2,zero,10000588 <parse_training_data+0xa8>
10000578:	e17ffc17 	ldw	r5,-16(fp)
1000057c:	01040374 	movhi	r4,4109
10000580:	213c6c04 	addi	r4,r4,-3664
10000584:	00071ac0 	call	100071ac <printf>
	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000588:	e03ffd15 	stw	zero,-12(fp)
1000058c:	00001b06 	br	100005fc <parse_training_data+0x11c>
			int value = atoi(line + j);
10000590:	e0bffd17 	ldw	r2,-12(fp)
10000594:	e0fffe17 	ldw	r3,-8(fp)
10000598:	1885883a 	add	r2,r3,r2
1000059c:	1009883a 	mov	r4,r2
100005a0:	0005a300 	call	10005a30 <atoi>
100005a4:	e0bfff15 	stw	r2,-4(fp)
			if (first_elem) {
100005a8:	e0bffb03 	ldbu	r2,-20(fp)
100005ac:	10000926 	beq	r2,zero,100005d4 <parse_training_data+0xf4>
				insert_array(&target_vals, value);
100005b0:	e13fff17 	ldw	r4,-4(fp)
100005b4:	00039d40 	call	100039d4 <__floatsisf>
100005b8:	1007883a 	mov	r3,r2
100005bc:	180b883a 	mov	r5,r3
100005c0:	010403b4 	movhi	r4,4110
100005c4:	210ad704 	addi	r4,r4,11100
100005c8:	0000df00 	call	10000df0 <insert_array>
				first_elem = 0;
100005cc:	e03ffb05 	stb	zero,-20(fp)
100005d0:	00000706 	br	100005f0 <parse_training_data+0x110>
			} else {
				insert_array(&attr_vals, value);
100005d4:	e13fff17 	ldw	r4,-4(fp)
100005d8:	00039d40 	call	100039d4 <__floatsisf>
100005dc:	1007883a 	mov	r3,r2
100005e0:	180b883a 	mov	r5,r3
100005e4:	010403b4 	movhi	r4,4110
100005e8:	210ada04 	addi	r4,r4,11112
100005ec:	0000df00 	call	10000df0 <insert_array>
	for(int i = 0; i < 100; i++) {
		line = training_data[i];
		first_elem = 1;
		if (i % 100 == 0) printf("%d\n", i);
	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
100005f0:	e0bffd17 	ldw	r2,-12(fp)
100005f4:	10800084 	addi	r2,r2,2
100005f8:	e0bffd15 	stw	r2,-12(fp)
100005fc:	e0bffd17 	ldw	r2,-12(fp)
10000600:	10803250 	cmplti	r2,r2,201
10000604:	103fe21e 	bne	r2,zero,10000590 <__alt_data_end+0xf8000590>
	total_runs 		= 0;
	num_incorrect 	= 0;

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
10000608:	e0bffc17 	ldw	r2,-16(fp)
1000060c:	10800044 	addi	r2,r2,1
10000610:	e0bffc15 	stw	r2,-16(fp)
10000614:	e0bffc17 	ldw	r2,-16(fp)
10000618:	10801910 	cmplti	r2,r2,100
1000061c:	103fc71e 	bne	r2,zero,1000053c <__alt_data_end+0xf800053c>
				insert_array(&attr_vals, value);
			}
		}
	}

	return 0;
10000620:	0005883a 	mov	r2,zero
}
10000624:	e037883a 	mov	sp,fp
10000628:	dfc00117 	ldw	ra,4(sp)
1000062c:	df000017 	ldw	fp,0(sp)
10000630:	dec00204 	addi	sp,sp,8
10000634:	f800283a 	ret

10000638 <parse_testing_data>:

int parse_testing_data() {
10000638:	defff904 	addi	sp,sp,-28
1000063c:	dfc00615 	stw	ra,24(sp)
10000640:	df000515 	stw	fp,20(sp)
10000644:	df000504 	addi	fp,sp,20
	// reset dataset
	init_array(&target_vals, INITIAL_ARR_SIZE);
10000648:	0150b234 	movhi	r5,17096
1000064c:	010403b4 	movhi	r4,4110
10000650:	210ad704 	addi	r4,r4,11100
10000654:	0000d7c0 	call	10000d7c <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
10000658:	0150b234 	movhi	r5,17096
1000065c:	010403b4 	movhi	r4,4110
10000660:	210ada04 	addi	r4,r4,11112
10000664:	0000d7c0 	call	10000d7c <init_array>
	curr_point 		= 0;
10000668:	008403b4 	movhi	r2,4110
1000066c:	108aa304 	addi	r2,r2,10892
10000670:	10000015 	stw	zero,0(r2)
	total_runs 		= 0;
10000674:	008403b4 	movhi	r2,4110
10000678:	108aa104 	addi	r2,r2,10884
1000067c:	10000015 	stw	zero,0(r2)
	num_incorrect 	= 0;
10000680:	008403b4 	movhi	r2,4110
10000684:	108aa204 	addi	r2,r2,10888
10000688:	10000015 	stw	zero,0(r2)

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
1000068c:	e03ffc15 	stw	zero,-16(fp)
10000690:	00002d06 	br	10000748 <parse_testing_data+0x110>
		line = testing_data[i];
10000694:	00840374 	movhi	r2,4109
10000698:	1099ad04 	addi	r2,r2,26292
1000069c:	e0fffc17 	ldw	r3,-16(fp)
100006a0:	18c7883a 	add	r3,r3,r3
100006a4:	18c7883a 	add	r3,r3,r3
100006a8:	10c5883a 	add	r2,r2,r3
100006ac:	10800017 	ldw	r2,0(r2)
100006b0:	e0bffe15 	stw	r2,-8(fp)
		first_elem = 1;
100006b4:	00800044 	movi	r2,1
100006b8:	e0bffb05 	stb	r2,-20(fp)

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
100006bc:	e03ffd15 	stw	zero,-12(fp)
100006c0:	00001b06 	br	10000730 <parse_testing_data+0xf8>
			int value = atoi(line + j);
100006c4:	e0bffd17 	ldw	r2,-12(fp)
100006c8:	e0fffe17 	ldw	r3,-8(fp)
100006cc:	1885883a 	add	r2,r3,r2
100006d0:	1009883a 	mov	r4,r2
100006d4:	0005a300 	call	10005a30 <atoi>
100006d8:	e0bfff15 	stw	r2,-4(fp)
			if (first_elem) {
100006dc:	e0bffb03 	ldbu	r2,-20(fp)
100006e0:	10000926 	beq	r2,zero,10000708 <parse_testing_data+0xd0>
				insert_array(&target_vals, value);
100006e4:	e13fff17 	ldw	r4,-4(fp)
100006e8:	00039d40 	call	100039d4 <__floatsisf>
100006ec:	1007883a 	mov	r3,r2
100006f0:	180b883a 	mov	r5,r3
100006f4:	010403b4 	movhi	r4,4110
100006f8:	210ad704 	addi	r4,r4,11100
100006fc:	0000df00 	call	10000df0 <insert_array>
				first_elem = 0;
10000700:	e03ffb05 	stb	zero,-20(fp)
10000704:	00000706 	br	10000724 <parse_testing_data+0xec>
			} else {
				insert_array(&attr_vals, value);
10000708:	e13fff17 	ldw	r4,-4(fp)
1000070c:	00039d40 	call	100039d4 <__floatsisf>
10000710:	1007883a 	mov	r3,r2
10000714:	180b883a 	mov	r5,r3
10000718:	010403b4 	movhi	r4,4110
1000071c:	210ada04 	addi	r4,r4,11112
10000720:	0000df00 	call	10000df0 <insert_array>
	for(int i = 0; i < 100; i++) {
		line = testing_data[i];
		first_elem = 1;

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000724:	e0bffd17 	ldw	r2,-12(fp)
10000728:	10800084 	addi	r2,r2,2
1000072c:	e0bffd15 	stw	r2,-12(fp)
10000730:	e0bffd17 	ldw	r2,-12(fp)
10000734:	10803250 	cmplti	r2,r2,201
10000738:	103fe21e 	bne	r2,zero,100006c4 <__alt_data_end+0xf80006c4>
	total_runs 		= 0;
	num_incorrect 	= 0;

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
1000073c:	e0bffc17 	ldw	r2,-16(fp)
10000740:	10800044 	addi	r2,r2,1
10000744:	e0bffc15 	stw	r2,-16(fp)
10000748:	e0bffc17 	ldw	r2,-16(fp)
1000074c:	10801910 	cmplti	r2,r2,100
10000750:	103fd01e 	bne	r2,zero,10000694 <__alt_data_end+0xf8000694>
				insert_array(&attr_vals, value);
			}
		}
	}

	return 0;
10000754:	0005883a 	mov	r2,zero
}
10000758:	e037883a 	mov	sp,fp
1000075c:	dfc00117 	ldw	ra,4(sp)
10000760:	df000017 	ldw	fp,0(sp)
10000764:	dec00204 	addi	sp,sp,8
10000768:	f800283a 	ret

1000076c <main>:

int main() {
1000076c:	defff804 	addi	sp,sp,-32
10000770:	dfc00715 	stw	ra,28(sp)
10000774:	df000615 	stw	fp,24(sp)
10000778:	dc000515 	stw	r16,20(sp)
1000077c:	df000604 	addi	fp,sp,24
	printf("Initializing neural network...\n");
10000780:	01040374 	movhi	r4,4109
10000784:	213c6d04 	addi	r4,r4,-3660
10000788:	00073d00 	call	100073d0 <puts>
	*to_hw_sig = 0;
1000078c:	d0a00417 	ldw	r2,-32752(gp)
10000790:	10000015 	stw	zero,0(r2)
	srand48(time(NULL));
10000794:	0009883a 	mov	r4,zero
10000798:	0008cb80 	call	10008cb8 <time>
1000079c:	1009883a 	mov	r4,r2
100007a0:	00088440 	call	10008844 <srand48>

	init_array(&target_vals, INITIAL_ARR_SIZE);
100007a4:	0150b234 	movhi	r5,17096
100007a8:	010403b4 	movhi	r4,4110
100007ac:	210ad704 	addi	r4,r4,11100
100007b0:	0000d7c0 	call	10000d7c <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
100007b4:	0150b234 	movhi	r5,17096
100007b8:	010403b4 	movhi	r4,4110
100007bc:	210ada04 	addi	r4,r4,11112
100007c0:	0000d7c0 	call	10000d7c <init_array>

	init_layer_1(&layer_1, &attr_vals, curr_point, LAYER_1_NUM_NODES, 1);
100007c4:	008403b4 	movhi	r2,4110
100007c8:	108aa304 	addi	r2,r2,10892
100007cc:	10800017 	ldw	r2,0(r2)
100007d0:	1009883a 	mov	r4,r2
100007d4:	0003af80 	call	10003af8 <__floatunsisf>
100007d8:	1007883a 	mov	r3,r2
100007dc:	008fe034 	movhi	r2,16256
100007e0:	d8800015 	stw	r2,0(sp)
100007e4:	01d03034 	movhi	r7,16576
100007e8:	180d883a 	mov	r6,r3
100007ec:	014403b4 	movhi	r5,4110
100007f0:	294ada04 	addi	r5,r5,11112
100007f4:	010403b4 	movhi	r4,4110
100007f8:	210ace04 	addi	r4,r4,11064
100007fc:	00012b40 	call	100012b4 <init_layer_1>
	init_layer_2(&layer_2, layer_1.layer_out, curr_point, 1, 2, LAYER_1_NUM_NODES);
10000800:	008403b4 	movhi	r2,4110
10000804:	108ace04 	addi	r2,r2,11064
10000808:	14000717 	ldw	r16,28(r2)
1000080c:	008403b4 	movhi	r2,4110
10000810:	108aa304 	addi	r2,r2,10892
10000814:	10800017 	ldw	r2,0(r2)
10000818:	1009883a 	mov	r4,r2
1000081c:	0003af80 	call	10003af8 <__floatunsisf>
10000820:	1007883a 	mov	r3,r2
10000824:	00903034 	movhi	r2,16576
10000828:	d8800115 	stw	r2,4(sp)
1000082c:	00900034 	movhi	r2,16384
10000830:	d8800015 	stw	r2,0(sp)
10000834:	01cfe034 	movhi	r7,16256
10000838:	180d883a 	mov	r6,r3
1000083c:	800b883a 	mov	r5,r16
10000840:	010403b4 	movhi	r4,4110
10000844:	210ac404 	addi	r4,r4,11024
10000848:	0001b0c0 	call	10001b0c <init_layer_2>

	printf("Parsing training dataset...\n");
1000084c:	01040374 	movhi	r4,4109
10000850:	213c7504 	addi	r4,r4,-3628
10000854:	00073d00 	call	100073d0 <puts>
	if(parse_training_data() == -1) {
10000858:	00004e00 	call	100004e0 <parse_training_data>
1000085c:	10bfffd8 	cmpnei	r2,r2,-1
10000860:	1000051e 	bne	r2,zero,10000878 <main+0x10c>
		printf("Failed to parse dataset\n");
10000864:	01040374 	movhi	r4,4109
10000868:	213c7c04 	addi	r4,r4,-3600
1000086c:	00073d00 	call	100073d0 <puts>
		return -1;
10000870:	00bfffc4 	movi	r2,-1
10000874:	00013b06 	br	10000d64 <main+0x5f8>
	}

	printf("Starting training...\n");
10000878:	01040374 	movhi	r4,4109
1000087c:	213c8204 	addi	r4,r4,-3576
10000880:	00073d00 	call	100073d0 <puts>
	float total_err = 0;
10000884:	e03ffc15 	stw	zero,-16(fp)
	while(total_runs < 1000) {
10000888:	00008706 	br	10000aa8 <main+0x33c>
		// set up the first layer and evaluate it
		layer_1.curr_point = curr_point;
1000088c:	008403b4 	movhi	r2,4110
10000890:	108aa304 	addi	r2,r2,10892
10000894:	10800017 	ldw	r2,0(r2)
10000898:	1009883a 	mov	r4,r2
1000089c:	0003af80 	call	10003af8 <__floatunsisf>
100008a0:	1007883a 	mov	r3,r2
100008a4:	008403b4 	movhi	r2,4110
100008a8:	108ace04 	addi	r2,r2,11064
100008ac:	10c00115 	stw	r3,4(r2)
		eval_layer_1(&layer_1);
100008b0:	010403b4 	movhi	r4,4110
100008b4:	210ace04 	addi	r4,r4,11064
100008b8:	00015680 	call	10001568 <eval_layer_1>

		// set up the second layer and evaluate it
		layer_2.curr_point = curr_point;
100008bc:	008403b4 	movhi	r2,4110
100008c0:	108aa304 	addi	r2,r2,10892
100008c4:	10800017 	ldw	r2,0(r2)
100008c8:	1009883a 	mov	r4,r2
100008cc:	0003af80 	call	10003af8 <__floatunsisf>
100008d0:	1007883a 	mov	r3,r2
100008d4:	008403b4 	movhi	r2,4110
100008d8:	108ac404 	addi	r2,r2,11024
100008dc:	10c00115 	stw	r3,4(r2)
		eval_layer_2(&layer_2);
100008e0:	010403b4 	movhi	r4,4110
100008e4:	210ac404 	addi	r4,r4,11024
100008e8:	0001e000 	call	10001e00 <eval_layer_2>

		backprop_layer_2(&layer_2, get_array_value(&target_vals, curr_point));
100008ec:	008403b4 	movhi	r2,4110
100008f0:	108aa304 	addi	r2,r2,10892
100008f4:	10800017 	ldw	r2,0(r2)
100008f8:	100b883a 	mov	r5,r2
100008fc:	010403b4 	movhi	r4,4110
10000900:	210ad704 	addi	r4,r4,11100
10000904:	0000ee80 	call	10000ee8 <get_array_value>
10000908:	1007883a 	mov	r3,r2
1000090c:	180b883a 	mov	r5,r3
10000910:	010403b4 	movhi	r4,4110
10000914:	210ac404 	addi	r4,r4,11024
10000918:	0001f1c0 	call	10001f1c <backprop_layer_2>
		backprop_layer_1(&layer_1, &layer_2);
1000091c:	014403b4 	movhi	r5,4110
10000920:	294ac404 	addi	r5,r5,11024
10000924:	010403b4 	movhi	r4,4110
10000928:	210ace04 	addi	r4,r4,11064
1000092c:	00016a40 	call	100016a4 <backprop_layer_1>

		float curr_err = err(layer_2.layer_out[0], get_array_value(&target_vals, curr_point));
10000930:	008403b4 	movhi	r2,4110
10000934:	108ac404 	addi	r2,r2,11024
10000938:	10800817 	ldw	r2,32(r2)
1000093c:	14000017 	ldw	r16,0(r2)
10000940:	008403b4 	movhi	r2,4110
10000944:	108aa304 	addi	r2,r2,10892
10000948:	10800017 	ldw	r2,0(r2)
1000094c:	100b883a 	mov	r5,r2
10000950:	010403b4 	movhi	r4,4110
10000954:	210ad704 	addi	r4,r4,11100
10000958:	0000ee80 	call	10000ee8 <get_array_value>
1000095c:	1007883a 	mov	r3,r2
10000960:	180b883a 	mov	r5,r3
10000964:	8009883a 	mov	r4,r16
10000968:	00002dc0 	call	100002dc <err>
1000096c:	e0bffe15 	stw	r2,-8(fp)
		total_err += curr_err;
10000970:	e17ffe17 	ldw	r5,-8(fp)
10000974:	e13ffc17 	ldw	r4,-16(fp)
10000978:	000254c0 	call	1000254c <__addsf3>
1000097c:	1007883a 	mov	r3,r2
10000980:	e0fffc15 	stw	r3,-16(fp)
		if(total_runs % ITER_TO_CHECK == 0) {
10000984:	008403b4 	movhi	r2,4110
10000988:	108aa104 	addi	r2,r2,10884
1000098c:	10800017 	ldw	r2,0(r2)
10000990:	01400284 	movi	r5,10
10000994:	1009883a 	mov	r4,r2
10000998:	00024f40 	call	100024f4 <__umodsi3>
1000099c:	10002a1e 	bne	r2,zero,10000a48 <main+0x2dc>
			if((total_err / ITER_TO_CHECK) < CONVERGENCE_THRESHOLD) {
100009a0:	01504834 	movhi	r5,16672
100009a4:	e13ffc17 	ldw	r4,-16(fp)
100009a8:	0002a140 	call	10002a14 <__divsf3>
100009ac:	1007883a 	mov	r3,r2
100009b0:	1805883a 	mov	r2,r3
100009b4:	1009883a 	mov	r4,r2
100009b8:	00056ec0 	call	100056ec <__extendsfdf2>
100009bc:	1011883a 	mov	r8,r2
100009c0:	1813883a 	mov	r9,r3
100009c4:	0191ebb4 	movhi	r6,18350
100009c8:	31851ec4 	addi	r6,r6,5243
100009cc:	01cfe134 	movhi	r7,16260
100009d0:	39deb844 	addi	r7,r7,31457
100009d4:	4009883a 	mov	r4,r8
100009d8:	480b883a 	mov	r5,r9
100009dc:	00044940 	call	10004494 <__ledf2>
100009e0:	1000080e 	bge	r2,zero,10000a04 <main+0x298>
				printf("Data has converged at the %dth run\n", total_runs);
100009e4:	008403b4 	movhi	r2,4110
100009e8:	108aa104 	addi	r2,r2,10884
100009ec:	10800017 	ldw	r2,0(r2)
100009f0:	100b883a 	mov	r5,r2
100009f4:	01040374 	movhi	r4,4109
100009f8:	213c8804 	addi	r4,r4,-3552
100009fc:	00071ac0 	call	100071ac <printf>
				break;
10000a00:	00002e06 	br	10000abc <main+0x350>
			}
			total_err = 0;
10000a04:	e03ffc15 	stw	zero,-16(fp)

			printf("Current iteration: %d\n", total_runs);
10000a08:	008403b4 	movhi	r2,4110
10000a0c:	108aa104 	addi	r2,r2,10884
10000a10:	10800017 	ldw	r2,0(r2)
10000a14:	100b883a 	mov	r5,r2
10000a18:	01040374 	movhi	r4,4109
10000a1c:	213c9104 	addi	r4,r4,-3516
10000a20:	00071ac0 	call	100071ac <printf>
			printf("Current error: %f\n\n", curr_err);
10000a24:	e13ffe17 	ldw	r4,-8(fp)
10000a28:	00056ec0 	call	100056ec <__extendsfdf2>
10000a2c:	100d883a 	mov	r6,r2
10000a30:	180f883a 	mov	r7,r3
10000a34:	300b883a 	mov	r5,r6
10000a38:	380d883a 	mov	r6,r7
10000a3c:	01040374 	movhi	r4,4109
10000a40:	213c9704 	addi	r4,r4,-3492
10000a44:	00071ac0 	call	100071ac <printf>
		}

		// move onto the next data entry
		total_runs++;
10000a48:	008403b4 	movhi	r2,4110
10000a4c:	108aa104 	addi	r2,r2,10884
10000a50:	10800017 	ldw	r2,0(r2)
10000a54:	10c00044 	addi	r3,r2,1
10000a58:	008403b4 	movhi	r2,4110
10000a5c:	108aa104 	addi	r2,r2,10884
10000a60:	10c00015 	stw	r3,0(r2)
		curr_point++;
10000a64:	008403b4 	movhi	r2,4110
10000a68:	108aa304 	addi	r2,r2,10892
10000a6c:	10800017 	ldw	r2,0(r2)
10000a70:	10c00044 	addi	r3,r2,1
10000a74:	008403b4 	movhi	r2,4110
10000a78:	108aa304 	addi	r2,r2,10892
10000a7c:	10c00015 	stw	r3,0(r2)
		if(curr_point >= target_vals.used) {
10000a80:	008403b4 	movhi	r2,4110
10000a84:	108ad704 	addi	r2,r2,11100
10000a88:	10c00117 	ldw	r3,4(r2)
10000a8c:	008403b4 	movhi	r2,4110
10000a90:	108aa304 	addi	r2,r2,10892
10000a94:	10800017 	ldw	r2,0(r2)
10000a98:	10c00336 	bltu	r2,r3,10000aa8 <main+0x33c>
			curr_point = 0;
10000a9c:	008403b4 	movhi	r2,4110
10000aa0:	108aa304 	addi	r2,r2,10892
10000aa4:	10000015 	stw	zero,0(r2)
		return -1;
	}

	printf("Starting training...\n");
	float total_err = 0;
	while(total_runs < 1000) {
10000aa8:	008403b4 	movhi	r2,4110
10000aac:	108aa104 	addi	r2,r2,10884
10000ab0:	10800017 	ldw	r2,0(r2)
10000ab4:	1080fa30 	cmpltui	r2,r2,1000
10000ab8:	103f741e 	bne	r2,zero,1000088c <__alt_data_end+0xf800088c>
		if(curr_point >= target_vals.used) {
			curr_point = 0;
		}
	}

	printf("Done training! Press ENTER to begin testing the neural network.\n");
10000abc:	01040374 	movhi	r4,4109
10000ac0:	213c9c04 	addi	r4,r4,-3472
10000ac4:	00073d00 	call	100073d0 <puts>
	getchar();
10000ac8:	008403b4 	movhi	r2,4110
10000acc:	10a45004 	addi	r2,r2,-28352
10000ad0:	10800017 	ldw	r2,0(r2)
10000ad4:	10800117 	ldw	r2,4(r2)
10000ad8:	1009883a 	mov	r4,r2
10000adc:	0005f2c0 	call	10005f2c <getc>

	// clean up arrays from training
	free_array(&target_vals);
10000ae0:	010403b4 	movhi	r4,4110
10000ae4:	210ad704 	addi	r4,r4,11100
10000ae8:	0000f480 	call	10000f48 <free_array>
	free_array(&attr_vals);
10000aec:	010403b4 	movhi	r4,4110
10000af0:	210ada04 	addi	r4,r4,11112
10000af4:	0000f480 	call	10000f48 <free_array>
	printf("Parsing testing dataset...\n");
10000af8:	01040374 	movhi	r4,4109
10000afc:	213cac04 	addi	r4,r4,-3408
10000b00:	00073d00 	call	100073d0 <puts>
	if(parse_testing_data() == -1) {
10000b04:	00006380 	call	10000638 <parse_testing_data>
10000b08:	10bfffd8 	cmpnei	r2,r2,-1
10000b0c:	1000051e 	bne	r2,zero,10000b24 <main+0x3b8>
		printf("Failed to parse dataset\n");
10000b10:	01040374 	movhi	r4,4109
10000b14:	213c7c04 	addi	r4,r4,-3600
10000b18:	00073d00 	call	100073d0 <puts>
		return -1;
10000b1c:	00bfffc4 	movi	r2,-1
10000b20:	00009006 	br	10000d64 <main+0x5f8>
	}

	// test here
	printf("Starting testing...\n");
10000b24:	01040374 	movhi	r4,4109
10000b28:	213cb304 	addi	r4,r4,-3380
10000b2c:	00073d00 	call	100073d0 <puts>
	while(curr_point < target_vals.used) {
10000b30:	00004406 	br	10000c44 <main+0x4d8>
		// set up the first layer and evaluate it
		layer_1.curr_point = curr_point;
10000b34:	008403b4 	movhi	r2,4110
10000b38:	108aa304 	addi	r2,r2,10892
10000b3c:	10800017 	ldw	r2,0(r2)
10000b40:	1009883a 	mov	r4,r2
10000b44:	0003af80 	call	10003af8 <__floatunsisf>
10000b48:	1007883a 	mov	r3,r2
10000b4c:	008403b4 	movhi	r2,4110
10000b50:	108ace04 	addi	r2,r2,11064
10000b54:	10c00115 	stw	r3,4(r2)
		eval_layer_1(&layer_1);
10000b58:	010403b4 	movhi	r4,4110
10000b5c:	210ace04 	addi	r4,r4,11064
10000b60:	00015680 	call	10001568 <eval_layer_1>

		// set up the second layer and evaluate it
		layer_2.curr_point = curr_point;
10000b64:	008403b4 	movhi	r2,4110
10000b68:	108aa304 	addi	r2,r2,10892
10000b6c:	10800017 	ldw	r2,0(r2)
10000b70:	1009883a 	mov	r4,r2
10000b74:	0003af80 	call	10003af8 <__floatunsisf>
10000b78:	1007883a 	mov	r3,r2
10000b7c:	008403b4 	movhi	r2,4110
10000b80:	108ac404 	addi	r2,r2,11024
10000b84:	10c00115 	stw	r3,4(r2)
		eval_layer_2(&layer_2);
10000b88:	010403b4 	movhi	r4,4110
10000b8c:	210ac404 	addi	r4,r4,11024
10000b90:	0001e000 	call	10001e00 <eval_layer_2>

		// round up or down
		float temp = 0;
10000b94:	e03ffd15 	stw	zero,-12(fp)
		if(layer_2.layer_out[0] >= 0.5) {
10000b98:	008403b4 	movhi	r2,4110
10000b9c:	108ac404 	addi	r2,r2,11024
10000ba0:	10800817 	ldw	r2,32(r2)
10000ba4:	10c00017 	ldw	r3,0(r2)
10000ba8:	014fc034 	movhi	r5,16128
10000bac:	1809883a 	mov	r4,r3
10000bb0:	0002ecc0 	call	10002ecc <__gesf2>
10000bb4:	10000216 	blt	r2,zero,10000bc0 <main+0x454>
			temp = 1;
10000bb8:	008fe034 	movhi	r2,16256
10000bbc:	e0bffd15 	stw	r2,-12(fp)
		}

		// check for validity of input
		if(temp != get_array_value(&target_vals, curr_point)) {
10000bc0:	008403b4 	movhi	r2,4110
10000bc4:	108aa304 	addi	r2,r2,10892
10000bc8:	10800017 	ldw	r2,0(r2)
10000bcc:	100b883a 	mov	r5,r2
10000bd0:	010403b4 	movhi	r4,4110
10000bd4:	210ad704 	addi	r4,r4,11100
10000bd8:	0000ee80 	call	10000ee8 <get_array_value>
10000bdc:	1007883a 	mov	r3,r2
10000be0:	e17ffd17 	ldw	r5,-12(fp)
10000be4:	1809883a 	mov	r4,r3
10000be8:	0002e540 	call	10002e54 <__eqsf2>
10000bec:	10000726 	beq	r2,zero,10000c0c <main+0x4a0>
			num_incorrect++;
10000bf0:	008403b4 	movhi	r2,4110
10000bf4:	108aa204 	addi	r2,r2,10888
10000bf8:	10800017 	ldw	r2,0(r2)
10000bfc:	10c00044 	addi	r3,r2,1
10000c00:	008403b4 	movhi	r2,4110
10000c04:	108aa204 	addi	r2,r2,10888
10000c08:	10c00015 	stw	r3,0(r2)
		}

		// move onto the next data entry
		total_runs++;
10000c0c:	008403b4 	movhi	r2,4110
10000c10:	108aa104 	addi	r2,r2,10884
10000c14:	10800017 	ldw	r2,0(r2)
10000c18:	10c00044 	addi	r3,r2,1
10000c1c:	008403b4 	movhi	r2,4110
10000c20:	108aa104 	addi	r2,r2,10884
10000c24:	10c00015 	stw	r3,0(r2)
		curr_point++;
10000c28:	008403b4 	movhi	r2,4110
10000c2c:	108aa304 	addi	r2,r2,10892
10000c30:	10800017 	ldw	r2,0(r2)
10000c34:	10c00044 	addi	r3,r2,1
10000c38:	008403b4 	movhi	r2,4110
10000c3c:	108aa304 	addi	r2,r2,10892
10000c40:	10c00015 	stw	r3,0(r2)
		return -1;
	}

	// test here
	printf("Starting testing...\n");
	while(curr_point < target_vals.used) {
10000c44:	008403b4 	movhi	r2,4110
10000c48:	108ad704 	addi	r2,r2,11100
10000c4c:	10c00117 	ldw	r3,4(r2)
10000c50:	008403b4 	movhi	r2,4110
10000c54:	108aa304 	addi	r2,r2,10892
10000c58:	10800017 	ldw	r2,0(r2)
10000c5c:	10ffb536 	bltu	r2,r3,10000b34 <__alt_data_end+0xf8000b34>
		// move onto the next data entry
		total_runs++;
		curr_point++;
	}

	printf("Incorrectly classified from testing dataset: %d\n", num_incorrect);
10000c60:	008403b4 	movhi	r2,4110
10000c64:	108aa204 	addi	r2,r2,10888
10000c68:	10800017 	ldw	r2,0(r2)
10000c6c:	100b883a 	mov	r5,r2
10000c70:	01040374 	movhi	r4,4109
10000c74:	213cb804 	addi	r4,r4,-3360
10000c78:	00071ac0 	call	100071ac <printf>
	printf("Accuracy percentage: %0.2f%%\n", (1 - ((float) num_incorrect) / target_vals.used) * 100);
10000c7c:	008403b4 	movhi	r2,4110
10000c80:	108aa204 	addi	r2,r2,10888
10000c84:	10800017 	ldw	r2,0(r2)
10000c88:	1009883a 	mov	r4,r2
10000c8c:	0003af80 	call	10003af8 <__floatunsisf>
10000c90:	1021883a 	mov	r16,r2
10000c94:	008403b4 	movhi	r2,4110
10000c98:	108ad704 	addi	r2,r2,11100
10000c9c:	10800117 	ldw	r2,4(r2)
10000ca0:	1009883a 	mov	r4,r2
10000ca4:	0003af80 	call	10003af8 <__floatunsisf>
10000ca8:	1007883a 	mov	r3,r2
10000cac:	180b883a 	mov	r5,r3
10000cb0:	8009883a 	mov	r4,r16
10000cb4:	0002a140 	call	10002a14 <__divsf3>
10000cb8:	1007883a 	mov	r3,r2
10000cbc:	1805883a 	mov	r2,r3
10000cc0:	100b883a 	mov	r5,r2
10000cc4:	010fe034 	movhi	r4,16256
10000cc8:	00034800 	call	10003480 <__subsf3>
10000ccc:	1007883a 	mov	r3,r2
10000cd0:	1805883a 	mov	r2,r3
10000cd4:	0150b234 	movhi	r5,17096
10000cd8:	1009883a 	mov	r4,r2
10000cdc:	00030500 	call	10003050 <__mulsf3>
10000ce0:	1007883a 	mov	r3,r2
10000ce4:	1805883a 	mov	r2,r3
10000ce8:	1009883a 	mov	r4,r2
10000cec:	00056ec0 	call	100056ec <__extendsfdf2>
10000cf0:	100d883a 	mov	r6,r2
10000cf4:	180f883a 	mov	r7,r3
10000cf8:	300b883a 	mov	r5,r6
10000cfc:	380d883a 	mov	r6,r7
10000d00:	01040374 	movhi	r4,4109
10000d04:	213cc504 	addi	r4,r4,-3308
10000d08:	00071ac0 	call	100071ac <printf>
	getchar();
10000d0c:	008403b4 	movhi	r2,4110
10000d10:	10a45004 	addi	r2,r2,-28352
10000d14:	10800017 	ldw	r2,0(r2)
10000d18:	10800117 	ldw	r2,4(r2)
10000d1c:	1009883a 	mov	r4,r2
10000d20:	0005f2c0 	call	10005f2c <getc>

	*to_hw_sig = 1;
10000d24:	d0a00417 	ldw	r2,-32752(gp)
10000d28:	00cfe034 	movhi	r3,16256
10000d2c:	10c00015 	stw	r3,0(r2)
	free_layer_1(&layer_1);
10000d30:	010403b4 	movhi	r4,4110
10000d34:	210ace04 	addi	r4,r4,11064
10000d38:	00019a00 	call	100019a0 <free_layer_1>
	free_layer_2(&layer_2);
10000d3c:	010403b4 	movhi	r4,4110
10000d40:	210ac404 	addi	r4,r4,11024
10000d44:	00021d40 	call	100021d4 <free_layer_2>
	free_array(&target_vals);
10000d48:	010403b4 	movhi	r4,4110
10000d4c:	210ad704 	addi	r4,r4,11100
10000d50:	0000f480 	call	10000f48 <free_array>
	free_array(&attr_vals);
10000d54:	010403b4 	movhi	r4,4110
10000d58:	210ada04 	addi	r4,r4,11112
10000d5c:	0000f480 	call	10000f48 <free_array>

	return 0;
10000d60:	0005883a 	mov	r2,zero
}
10000d64:	e6ffff04 	addi	sp,fp,-4
10000d68:	dfc00217 	ldw	ra,8(sp)
10000d6c:	df000117 	ldw	fp,4(sp)
10000d70:	dc000017 	ldw	r16,0(sp)
10000d74:	dec00304 	addi	sp,sp,12
10000d78:	f800283a 	ret

10000d7c <init_array>:
#include "types.h"

// dynamically sized array
void init_array(array_t * a, float initial_size) {
10000d7c:	defffc04 	addi	sp,sp,-16
10000d80:	dfc00315 	stw	ra,12(sp)
10000d84:	df000215 	stw	fp,8(sp)
10000d88:	df000204 	addi	fp,sp,8
10000d8c:	e13ffe15 	stw	r4,-8(fp)
10000d90:	e17fff15 	stw	r5,-4(fp)
    a->array = (float *) malloc(initial_size * sizeof(float));
10000d94:	01502034 	movhi	r5,16512
10000d98:	e13fff17 	ldw	r4,-4(fp)
10000d9c:	00030500 	call	10003050 <__mulsf3>
10000da0:	1007883a 	mov	r3,r2
10000da4:	1805883a 	mov	r2,r3
10000da8:	1009883a 	mov	r4,r2
10000dac:	00023380 	call	10002338 <__fixunssfsi>
10000db0:	1009883a 	mov	r4,r2
10000db4:	0005fd00 	call	10005fd0 <malloc>
10000db8:	1007883a 	mov	r3,r2
10000dbc:	e0bffe17 	ldw	r2,-8(fp)
10000dc0:	10c00015 	stw	r3,0(r2)
    a->used = 0;
10000dc4:	e0bffe17 	ldw	r2,-8(fp)
10000dc8:	10000115 	stw	zero,4(r2)
    a->size = initial_size;
10000dcc:	e0bffe17 	ldw	r2,-8(fp)
10000dd0:	e0ffff17 	ldw	r3,-4(fp)
10000dd4:	10c00215 	stw	r3,8(r2)
}
10000dd8:	0001883a 	nop
10000ddc:	e037883a 	mov	sp,fp
10000de0:	dfc00117 	ldw	ra,4(sp)
10000de4:	df000017 	ldw	fp,0(sp)
10000de8:	dec00204 	addi	sp,sp,8
10000dec:	f800283a 	ret

10000df0 <insert_array>:

void insert_array(array_t * a, float element) {
10000df0:	defffb04 	addi	sp,sp,-20
10000df4:	dfc00415 	stw	ra,16(sp)
10000df8:	df000315 	stw	fp,12(sp)
10000dfc:	dc000215 	stw	r16,8(sp)
10000e00:	df000304 	addi	fp,sp,12
10000e04:	e13ffd15 	stw	r4,-12(fp)
10000e08:	e17ffe15 	stw	r5,-8(fp)
    if (a->used == a->size) {
10000e0c:	e0bffd17 	ldw	r2,-12(fp)
10000e10:	10800117 	ldw	r2,4(r2)
10000e14:	1009883a 	mov	r4,r2
10000e18:	0003af80 	call	10003af8 <__floatunsisf>
10000e1c:	1009883a 	mov	r4,r2
10000e20:	e0bffd17 	ldw	r2,-12(fp)
10000e24:	10c00217 	ldw	r3,8(r2)
10000e28:	180b883a 	mov	r5,r3
10000e2c:	0002e540 	call	10002e54 <__eqsf2>
10000e30:	10001a1e 	bne	r2,zero,10000e9c <insert_array+0xac>
        a->size *= 2;
10000e34:	e0fffd17 	ldw	r3,-12(fp)
10000e38:	18800217 	ldw	r2,8(r3)
10000e3c:	100b883a 	mov	r5,r2
10000e40:	1009883a 	mov	r4,r2
10000e44:	000254c0 	call	1000254c <__addsf3>
10000e48:	1009883a 	mov	r4,r2
10000e4c:	2007883a 	mov	r3,r4
10000e50:	e0bffd17 	ldw	r2,-12(fp)
10000e54:	10c00215 	stw	r3,8(r2)
        a->array = (float *) realloc(a->array, a->size * sizeof(float));
10000e58:	e0bffd17 	ldw	r2,-12(fp)
10000e5c:	14000017 	ldw	r16,0(r2)
10000e60:	e0bffd17 	ldw	r2,-12(fp)
10000e64:	10c00217 	ldw	r3,8(r2)
10000e68:	01502034 	movhi	r5,16512
10000e6c:	1809883a 	mov	r4,r3
10000e70:	00030500 	call	10003050 <__mulsf3>
10000e74:	1007883a 	mov	r3,r2
10000e78:	1805883a 	mov	r2,r3
10000e7c:	1009883a 	mov	r4,r2
10000e80:	00023380 	call	10002338 <__fixunssfsi>
10000e84:	100b883a 	mov	r5,r2
10000e88:	8009883a 	mov	r4,r16
10000e8c:	00075c80 	call	100075c8 <realloc>
10000e90:	1007883a 	mov	r3,r2
10000e94:	e0bffd17 	ldw	r2,-12(fp)
10000e98:	10c00015 	stw	r3,0(r2)
    }

    a->array[a->used++] = element;
10000e9c:	e0bffd17 	ldw	r2,-12(fp)
10000ea0:	10c00017 	ldw	r3,0(r2)
10000ea4:	e0bffd17 	ldw	r2,-12(fp)
10000ea8:	10800117 	ldw	r2,4(r2)
10000eac:	11400044 	addi	r5,r2,1
10000eb0:	e13ffd17 	ldw	r4,-12(fp)
10000eb4:	21400115 	stw	r5,4(r4)
10000eb8:	1085883a 	add	r2,r2,r2
10000ebc:	1085883a 	add	r2,r2,r2
10000ec0:	1885883a 	add	r2,r3,r2
10000ec4:	e0fffe17 	ldw	r3,-8(fp)
10000ec8:	10c00015 	stw	r3,0(r2)
}
10000ecc:	0001883a 	nop
10000ed0:	e6ffff04 	addi	sp,fp,-4
10000ed4:	dfc00217 	ldw	ra,8(sp)
10000ed8:	df000117 	ldw	fp,4(sp)
10000edc:	dc000017 	ldw	r16,0(sp)
10000ee0:	dec00304 	addi	sp,sp,12
10000ee4:	f800283a 	ret

10000ee8 <get_array_value>:

float get_array_value(array_t * a, uint32_t idx) {
10000ee8:	defffd04 	addi	sp,sp,-12
10000eec:	df000215 	stw	fp,8(sp)
10000ef0:	df000204 	addi	fp,sp,8
10000ef4:	e13ffe15 	stw	r4,-8(fp)
10000ef8:	e17fff15 	stw	r5,-4(fp)
    if(idx >= a->used) {
10000efc:	e0bffe17 	ldw	r2,-8(fp)
10000f00:	10800117 	ldw	r2,4(r2)
10000f04:	e0ffff17 	ldw	r3,-4(fp)
10000f08:	18800236 	bltu	r3,r2,10000f14 <get_array_value+0x2c>
        return -1;
10000f0c:	00afe034 	movhi	r2,49024
10000f10:	00000706 	br	10000f30 <get_array_value+0x48>
    } else {
        return a->array[idx];
10000f14:	e0bffe17 	ldw	r2,-8(fp)
10000f18:	10c00017 	ldw	r3,0(r2)
10000f1c:	e0bfff17 	ldw	r2,-4(fp)
10000f20:	1085883a 	add	r2,r2,r2
10000f24:	1085883a 	add	r2,r2,r2
10000f28:	1887883a 	add	r3,r3,r2
10000f2c:	18800017 	ldw	r2,0(r3)
10000f30:	1007883a 	mov	r3,r2
    }
}
10000f34:	1805883a 	mov	r2,r3
10000f38:	e037883a 	mov	sp,fp
10000f3c:	df000017 	ldw	fp,0(sp)
10000f40:	dec00104 	addi	sp,sp,4
10000f44:	f800283a 	ret

10000f48 <free_array>:

void free_array(array_t *a) {
10000f48:	defffd04 	addi	sp,sp,-12
10000f4c:	dfc00215 	stw	ra,8(sp)
10000f50:	df000115 	stw	fp,4(sp)
10000f54:	df000104 	addi	fp,sp,4
10000f58:	e13fff15 	stw	r4,-4(fp)
    free(a->array);
10000f5c:	e0bfff17 	ldw	r2,-4(fp)
10000f60:	10800017 	ldw	r2,0(r2)
10000f64:	1009883a 	mov	r4,r2
10000f68:	00060100 	call	10006010 <free>
    a->array = NULL;
10000f6c:	e0bfff17 	ldw	r2,-4(fp)
10000f70:	10000015 	stw	zero,0(r2)
    a->used = a->size = 0;
10000f74:	e0bfff17 	ldw	r2,-4(fp)
10000f78:	10000215 	stw	zero,8(r2)
10000f7c:	e0bfff17 	ldw	r2,-4(fp)
10000f80:	10000115 	stw	zero,4(r2)
}
10000f84:	0001883a 	nop
10000f88:	e037883a 	mov	sp,fp
10000f8c:	dfc00117 	ldw	ra,4(sp)
10000f90:	df000017 	ldw	fp,0(sp)
10000f94:	dec00204 	addi	sp,sp,8
10000f98:	f800283a 	ret

10000f9c <print_array>:

void print_array(array_t * a) {
10000f9c:	defffc04 	addi	sp,sp,-16
10000fa0:	dfc00315 	stw	ra,12(sp)
10000fa4:	df000215 	stw	fp,8(sp)
10000fa8:	df000204 	addi	fp,sp,8
10000fac:	e13fff15 	stw	r4,-4(fp)
    printf("Size of array is %d\n", a->used);
10000fb0:	e0bfff17 	ldw	r2,-4(fp)
10000fb4:	10800117 	ldw	r2,4(r2)
10000fb8:	100b883a 	mov	r5,r2
10000fbc:	01040374 	movhi	r4,4109
10000fc0:	213ccd04 	addi	r4,r4,-3276
10000fc4:	00071ac0 	call	100071ac <printf>
    for(int i = 0; i < a->used; i++) {
10000fc8:	e03ffe15 	stw	zero,-8(fp)
10000fcc:	00001006 	br	10001010 <print_array+0x74>
        printf("%d ", (uint32_t) a->array[i]);
10000fd0:	e0bfff17 	ldw	r2,-4(fp)
10000fd4:	10c00017 	ldw	r3,0(r2)
10000fd8:	e0bffe17 	ldw	r2,-8(fp)
10000fdc:	1085883a 	add	r2,r2,r2
10000fe0:	1085883a 	add	r2,r2,r2
10000fe4:	1885883a 	add	r2,r3,r2
10000fe8:	10c00017 	ldw	r3,0(r2)
10000fec:	1809883a 	mov	r4,r3
10000ff0:	00023380 	call	10002338 <__fixunssfsi>
10000ff4:	100b883a 	mov	r5,r2
10000ff8:	01040374 	movhi	r4,4109
10000ffc:	213cd304 	addi	r4,r4,-3252
10001000:	00071ac0 	call	100071ac <printf>
    a->used = a->size = 0;
}

void print_array(array_t * a) {
    printf("Size of array is %d\n", a->used);
    for(int i = 0; i < a->used; i++) {
10001004:	e0bffe17 	ldw	r2,-8(fp)
10001008:	10800044 	addi	r2,r2,1
1000100c:	e0bffe15 	stw	r2,-8(fp)
10001010:	e0bfff17 	ldw	r2,-4(fp)
10001014:	10800117 	ldw	r2,4(r2)
10001018:	e0fffe17 	ldw	r3,-8(fp)
1000101c:	18bfec36 	bltu	r3,r2,10000fd0 <__alt_data_end+0xf8000fd0>
        printf("%d ", (uint32_t) a->array[i]);
    }
    printf("\n");
10001020:	01000284 	movi	r4,10
10001024:	00072680 	call	10007268 <putchar>
}
10001028:	0001883a 	nop
1000102c:	e037883a 	mov	sp,fp
10001030:	dfc00117 	ldw	ra,4(sp)
10001034:	df000017 	ldw	fp,0(sp)
10001038:	dec00204 	addi	sp,sp,8
1000103c:	f800283a 	ret

10001040 <print_float_array>:

void print_float_array(float * arr, uint32_t size) {
10001040:	defffb04 	addi	sp,sp,-20
10001044:	dfc00415 	stw	ra,16(sp)
10001048:	df000315 	stw	fp,12(sp)
1000104c:	df000304 	addi	fp,sp,12
10001050:	e13ffe15 	stw	r4,-8(fp)
10001054:	e17fff15 	stw	r5,-4(fp)
    for(int i = 0; i < size; i++) {
10001058:	e03ffd15 	stw	zero,-12(fp)
1000105c:	00001306 	br	100010ac <print_float_array+0x6c>
        printf("%f ", arr[i]);
10001060:	e0bffd17 	ldw	r2,-12(fp)
10001064:	1085883a 	add	r2,r2,r2
10001068:	1085883a 	add	r2,r2,r2
1000106c:	1007883a 	mov	r3,r2
10001070:	e0bffe17 	ldw	r2,-8(fp)
10001074:	10c5883a 	add	r2,r2,r3
10001078:	10c00017 	ldw	r3,0(r2)
1000107c:	1809883a 	mov	r4,r3
10001080:	00056ec0 	call	100056ec <__extendsfdf2>
10001084:	100d883a 	mov	r6,r2
10001088:	180f883a 	mov	r7,r3
1000108c:	300b883a 	mov	r5,r6
10001090:	380d883a 	mov	r6,r7
10001094:	01040374 	movhi	r4,4109
10001098:	213cd404 	addi	r4,r4,-3248
1000109c:	00071ac0 	call	100071ac <printf>
    }
    printf("\n");
}

void print_float_array(float * arr, uint32_t size) {
    for(int i = 0; i < size; i++) {
100010a0:	e0bffd17 	ldw	r2,-12(fp)
100010a4:	10800044 	addi	r2,r2,1
100010a8:	e0bffd15 	stw	r2,-12(fp)
100010ac:	e0fffd17 	ldw	r3,-12(fp)
100010b0:	e0bfff17 	ldw	r2,-4(fp)
100010b4:	18bfea36 	bltu	r3,r2,10001060 <__alt_data_end+0xf8001060>
        printf("%f ", arr[i]);
    }
}
100010b8:	0001883a 	nop
100010bc:	e037883a 	mov	sp,fp
100010c0:	dfc00117 	ldw	ra,4(sp)
100010c4:	df000017 	ldw	fp,0(sp)
100010c8:	dec00204 	addi	sp,sp,8
100010cc:	f800283a 	ret

100010d0 <dot_product_1>:

float dot_product_1(array_t * arr1, float * arr2, float size, uint32_t curr_point) {
100010d0:	defff704 	addi	sp,sp,-36
100010d4:	dfc00815 	stw	ra,32(sp)
100010d8:	df000715 	stw	fp,28(sp)
100010dc:	dc000615 	stw	r16,24(sp)
100010e0:	df000704 	addi	fp,sp,28
100010e4:	e13ffb15 	stw	r4,-20(fp)
100010e8:	e17ffc15 	stw	r5,-16(fp)
100010ec:	e1bffd15 	stw	r6,-12(fp)
100010f0:	e1fffe15 	stw	r7,-8(fp)
    float total_sum = 0;
100010f4:	e03ff915 	stw	zero,-28(fp)
    for(int i = 0; i < size; i++) {
100010f8:	e03ffa15 	stw	zero,-24(fp)
100010fc:	00002906 	br	100011a4 <dot_product_1+0xd4>
        total_sum += (get_array_value(arr1, size * curr_point + i) * arr2[i]);
10001100:	e13ffe17 	ldw	r4,-8(fp)
10001104:	0003af80 	call	10003af8 <__floatunsisf>
10001108:	1007883a 	mov	r3,r2
1000110c:	e17ffd17 	ldw	r5,-12(fp)
10001110:	1809883a 	mov	r4,r3
10001114:	00030500 	call	10003050 <__mulsf3>
10001118:	1007883a 	mov	r3,r2
1000111c:	1821883a 	mov	r16,r3
10001120:	e13ffa17 	ldw	r4,-24(fp)
10001124:	00039d40 	call	100039d4 <__floatsisf>
10001128:	1007883a 	mov	r3,r2
1000112c:	180b883a 	mov	r5,r3
10001130:	8009883a 	mov	r4,r16
10001134:	000254c0 	call	1000254c <__addsf3>
10001138:	1007883a 	mov	r3,r2
1000113c:	1805883a 	mov	r2,r3
10001140:	1009883a 	mov	r4,r2
10001144:	00023380 	call	10002338 <__fixunssfsi>
10001148:	100b883a 	mov	r5,r2
1000114c:	e13ffb17 	ldw	r4,-20(fp)
10001150:	0000ee80 	call	10000ee8 <get_array_value>
10001154:	1009883a 	mov	r4,r2
10001158:	e0bffa17 	ldw	r2,-24(fp)
1000115c:	1085883a 	add	r2,r2,r2
10001160:	1085883a 	add	r2,r2,r2
10001164:	1007883a 	mov	r3,r2
10001168:	e0bffc17 	ldw	r2,-16(fp)
1000116c:	10c5883a 	add	r2,r2,r3
10001170:	10c00017 	ldw	r3,0(r2)
10001174:	180b883a 	mov	r5,r3
10001178:	00030500 	call	10003050 <__mulsf3>
1000117c:	1007883a 	mov	r3,r2
10001180:	1805883a 	mov	r2,r3
10001184:	100b883a 	mov	r5,r2
10001188:	e13ff917 	ldw	r4,-28(fp)
1000118c:	000254c0 	call	1000254c <__addsf3>
10001190:	1007883a 	mov	r3,r2
10001194:	e0fff915 	stw	r3,-28(fp)
    }
}

float dot_product_1(array_t * arr1, float * arr2, float size, uint32_t curr_point) {
    float total_sum = 0;
    for(int i = 0; i < size; i++) {
10001198:	e0bffa17 	ldw	r2,-24(fp)
1000119c:	10800044 	addi	r2,r2,1
100011a0:	e0bffa15 	stw	r2,-24(fp)
100011a4:	e13ffa17 	ldw	r4,-24(fp)
100011a8:	00039d40 	call	100039d4 <__floatsisf>
100011ac:	1007883a 	mov	r3,r2
100011b0:	e17ffd17 	ldw	r5,-12(fp)
100011b4:	1809883a 	mov	r4,r3
100011b8:	0002f880 	call	10002f88 <__lesf2>
100011bc:	103fd016 	blt	r2,zero,10001100 <__alt_data_end+0xf8001100>
        total_sum += (get_array_value(arr1, size * curr_point + i) * arr2[i]);
    }

    return total_sum;
100011c0:	e0bff917 	ldw	r2,-28(fp)
100011c4:	1007883a 	mov	r3,r2
}
100011c8:	1805883a 	mov	r2,r3
100011cc:	e6ffff04 	addi	sp,fp,-4
100011d0:	dfc00217 	ldw	ra,8(sp)
100011d4:	df000117 	ldw	fp,4(sp)
100011d8:	dc000017 	ldw	r16,0(sp)
100011dc:	dec00304 	addi	sp,sp,12
100011e0:	f800283a 	ret

100011e4 <dot_product_2>:

float dot_product_2(float * arr1, float * arr2, float size) {
100011e4:	defff904 	addi	sp,sp,-28
100011e8:	dfc00615 	stw	ra,24(sp)
100011ec:	df000515 	stw	fp,20(sp)
100011f0:	df000504 	addi	fp,sp,20
100011f4:	e13ffd15 	stw	r4,-12(fp)
100011f8:	e17ffe15 	stw	r5,-8(fp)
100011fc:	e1bfff15 	stw	r6,-4(fp)
    float total_sum = 0;
10001200:	e03ffb15 	stw	zero,-20(fp)
    for(int i = 0; i < size; i++) {
10001204:	e03ffc15 	stw	zero,-16(fp)
10001208:	00001b06 	br	10001278 <dot_product_2+0x94>
        total_sum += (arr1[i] * arr2[i]);
1000120c:	e0bffc17 	ldw	r2,-16(fp)
10001210:	1085883a 	add	r2,r2,r2
10001214:	1085883a 	add	r2,r2,r2
10001218:	1007883a 	mov	r3,r2
1000121c:	e0bffd17 	ldw	r2,-12(fp)
10001220:	10c5883a 	add	r2,r2,r3
10001224:	10c00017 	ldw	r3,0(r2)
10001228:	e0bffc17 	ldw	r2,-16(fp)
1000122c:	1085883a 	add	r2,r2,r2
10001230:	1085883a 	add	r2,r2,r2
10001234:	1009883a 	mov	r4,r2
10001238:	e0bffe17 	ldw	r2,-8(fp)
1000123c:	1105883a 	add	r2,r2,r4
10001240:	11000017 	ldw	r4,0(r2)
10001244:	200b883a 	mov	r5,r4
10001248:	1809883a 	mov	r4,r3
1000124c:	00030500 	call	10003050 <__mulsf3>
10001250:	1007883a 	mov	r3,r2
10001254:	1805883a 	mov	r2,r3
10001258:	100b883a 	mov	r5,r2
1000125c:	e13ffb17 	ldw	r4,-20(fp)
10001260:	000254c0 	call	1000254c <__addsf3>
10001264:	1007883a 	mov	r3,r2
10001268:	e0fffb15 	stw	r3,-20(fp)
    return total_sum;
}

float dot_product_2(float * arr1, float * arr2, float size) {
    float total_sum = 0;
    for(int i = 0; i < size; i++) {
1000126c:	e0bffc17 	ldw	r2,-16(fp)
10001270:	10800044 	addi	r2,r2,1
10001274:	e0bffc15 	stw	r2,-16(fp)
10001278:	e13ffc17 	ldw	r4,-16(fp)
1000127c:	00039d40 	call	100039d4 <__floatsisf>
10001280:	1007883a 	mov	r3,r2
10001284:	e17fff17 	ldw	r5,-4(fp)
10001288:	1809883a 	mov	r4,r3
1000128c:	0002f880 	call	10002f88 <__lesf2>
10001290:	103fde16 	blt	r2,zero,1000120c <__alt_data_end+0xf800120c>
        total_sum += (arr1[i] * arr2[i]);
    }

    return total_sum;
10001294:	e0bffb17 	ldw	r2,-20(fp)
10001298:	1007883a 	mov	r3,r2
}
1000129c:	1805883a 	mov	r2,r3
100012a0:	e037883a 	mov	sp,fp
100012a4:	dfc00117 	ldw	ra,4(sp)
100012a8:	df000017 	ldw	fp,0(sp)
100012ac:	dec00204 	addi	sp,sp,8
100012b0:	f800283a 	ret

100012b4 <init_layer_1>:

// layers
void init_layer_1(layer_1_t * l, array_t * input_vals, float curr_point, float num_nodes, float layer_num) {
100012b4:	defff504 	addi	sp,sp,-44
100012b8:	dfc00a15 	stw	ra,40(sp)
100012bc:	df000915 	stw	fp,36(sp)
100012c0:	dc000815 	stw	r16,32(sp)
100012c4:	df000904 	addi	fp,sp,36
100012c8:	e13ffb15 	stw	r4,-20(fp)
100012cc:	e17ffc15 	stw	r5,-16(fp)
100012d0:	e1bffd15 	stw	r6,-12(fp)
100012d4:	e1fffe15 	stw	r7,-8(fp)
    l->input_vals = input_vals;
100012d8:	e0bffb17 	ldw	r2,-20(fp)
100012dc:	e0fffc17 	ldw	r3,-16(fp)
100012e0:	10c00015 	stw	r3,0(r2)
    l->curr_point = curr_point;
100012e4:	e0bffb17 	ldw	r2,-20(fp)
100012e8:	e0fffd17 	ldw	r3,-12(fp)
100012ec:	10c00115 	stw	r3,4(r2)
    l->num_nodes = num_nodes;
100012f0:	e0bffb17 	ldw	r2,-20(fp)
100012f4:	e0fffe17 	ldw	r3,-8(fp)
100012f8:	10c00215 	stw	r3,8(r2)
    l->layer_num = layer_num;
100012fc:	e0bffb17 	ldw	r2,-20(fp)
10001300:	e0c00217 	ldw	r3,8(fp)
10001304:	10c00315 	stw	r3,12(r2)

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
10001308:	01502034 	movhi	r5,16512
1000130c:	e13ffe17 	ldw	r4,-8(fp)
10001310:	00030500 	call	10003050 <__mulsf3>
10001314:	1007883a 	mov	r3,r2
10001318:	1805883a 	mov	r2,r3
1000131c:	1009883a 	mov	r4,r2
10001320:	00023380 	call	10002338 <__fixunssfsi>
10001324:	1009883a 	mov	r4,r2
10001328:	0005fd00 	call	10005fd0 <malloc>
1000132c:	1007883a 	mov	r3,r2
10001330:	e0bffb17 	ldw	r2,-20(fp)
10001334:	10c00415 	stw	r3,16(r2)
    for(int i = 0; i < num_nodes; i++) {
10001338:	e03ff715 	stw	zero,-36(fp)
1000133c:	00000c06 	br	10001370 <init_layer_1+0xbc>
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
10001340:	e0bffb17 	ldw	r2,-20(fp)
10001344:	10c00417 	ldw	r3,16(r2)
10001348:	e0bff717 	ldw	r2,-36(fp)
1000134c:	1085883a 	add	r2,r2,r2
10001350:	1085883a 	add	r2,r2,r2
10001354:	18a1883a 	add	r16,r3,r2
10001358:	01006404 	movi	r4,400
1000135c:	0005fd00 	call	10005fd0 <malloc>
10001360:	80800015 	stw	r2,0(r16)
    l->curr_point = curr_point;
    l->num_nodes = num_nodes;
    l->layer_num = layer_num;

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001364:	e0bff717 	ldw	r2,-36(fp)
10001368:	10800044 	addi	r2,r2,1
1000136c:	e0bff715 	stw	r2,-36(fp)
10001370:	e13ff717 	ldw	r4,-36(fp)
10001374:	00039d40 	call	100039d4 <__floatsisf>
10001378:	1007883a 	mov	r3,r2
1000137c:	e17ffe17 	ldw	r5,-8(fp)
10001380:	1809883a 	mov	r4,r3
10001384:	0002f880 	call	10002f88 <__lesf2>
10001388:	103fed16 	blt	r2,zero,10001340 <__alt_data_end+0xf8001340>
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
1000138c:	e03ff815 	stw	zero,-32(fp)
10001390:	00001e06 	br	1000140c <init_layer_1+0x158>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
10001394:	e03ff915 	stw	zero,-28(fp)
10001398:	00001606 	br	100013f4 <init_layer_1+0x140>
            l->weights[i][j] = drand48();
1000139c:	e0bffb17 	ldw	r2,-20(fp)
100013a0:	10c00417 	ldw	r3,16(r2)
100013a4:	e0bff817 	ldw	r2,-32(fp)
100013a8:	1085883a 	add	r2,r2,r2
100013ac:	1085883a 	add	r2,r2,r2
100013b0:	1885883a 	add	r2,r3,r2
100013b4:	10c00017 	ldw	r3,0(r2)
100013b8:	e0bff917 	ldw	r2,-28(fp)
100013bc:	1085883a 	add	r2,r2,r2
100013c0:	1085883a 	add	r2,r2,r2
100013c4:	18a1883a 	add	r16,r3,r2
100013c8:	0005ca80 	call	10005ca8 <drand48>
100013cc:	100b883a 	mov	r5,r2
100013d0:	180d883a 	mov	r6,r3
100013d4:	2809883a 	mov	r4,r5
100013d8:	300b883a 	mov	r5,r6
100013dc:	00057fc0 	call	100057fc <__truncdfsf2>
100013e0:	1007883a 	mov	r3,r2
100013e4:	80c00015 	stw	r3,0(r16)
    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100013e8:	e0bff917 	ldw	r2,-28(fp)
100013ec:	10800044 	addi	r2,r2,1
100013f0:	e0bff915 	stw	r2,-28(fp)
100013f4:	e0bff917 	ldw	r2,-28(fp)
100013f8:	10801910 	cmplti	r2,r2,100
100013fc:	103fe71e 	bne	r2,zero,1000139c <__alt_data_end+0xf800139c>

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001400:	e0bff817 	ldw	r2,-32(fp)
10001404:	10800044 	addi	r2,r2,1
10001408:	e0bff815 	stw	r2,-32(fp)
1000140c:	e13ff817 	ldw	r4,-32(fp)
10001410:	00039d40 	call	100039d4 <__floatsisf>
10001414:	1007883a 	mov	r3,r2
10001418:	e17ffe17 	ldw	r5,-8(fp)
1000141c:	1809883a 	mov	r4,r3
10001420:	0002f880 	call	10002f88 <__lesf2>
10001424:	103fdb16 	blt	r2,zero,10001394 <__alt_data_end+0xf8001394>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
10001428:	e13ffe17 	ldw	r4,-8(fp)
1000142c:	00023380 	call	10002338 <__fixunssfsi>
10001430:	01400104 	movi	r5,4
10001434:	1009883a 	mov	r4,r2
10001438:	0005aa80 	call	10005aa8 <calloc>
1000143c:	1007883a 	mov	r3,r2
10001440:	e0bffb17 	ldw	r2,-20(fp)
10001444:	10c00515 	stw	r3,20(r2)
    for(int i = 0; i < num_nodes; i++) {
10001448:	e03ffa15 	stw	zero,-24(fp)
1000144c:	00000d06 	br	10001484 <init_layer_1+0x1d0>
        l->weight_deltas[i] = (float *) calloc(ATTRS_PER_ENTRY, sizeof(float));
10001450:	e0bffb17 	ldw	r2,-20(fp)
10001454:	10c00517 	ldw	r3,20(r2)
10001458:	e0bffa17 	ldw	r2,-24(fp)
1000145c:	1085883a 	add	r2,r2,r2
10001460:	1085883a 	add	r2,r2,r2
10001464:	18a1883a 	add	r16,r3,r2
10001468:	01400104 	movi	r5,4
1000146c:	01001904 	movi	r4,100
10001470:	0005aa80 	call	10005aa8 <calloc>
10001474:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001478:	e0bffa17 	ldw	r2,-24(fp)
1000147c:	10800044 	addi	r2,r2,1
10001480:	e0bffa15 	stw	r2,-24(fp)
10001484:	e13ffa17 	ldw	r4,-24(fp)
10001488:	00039d40 	call	100039d4 <__floatsisf>
1000148c:	1007883a 	mov	r3,r2
10001490:	e17ffe17 	ldw	r5,-8(fp)
10001494:	1809883a 	mov	r4,r3
10001498:	0002f880 	call	10002f88 <__lesf2>
1000149c:	103fec16 	blt	r2,zero,10001450 <__alt_data_end+0xf8001450>
        l->weight_deltas[i] = (float *) calloc(ATTRS_PER_ENTRY, sizeof(float));
    }

    l->layer_net = (float *) calloc(num_nodes, sizeof(float));
100014a0:	e13ffe17 	ldw	r4,-8(fp)
100014a4:	00023380 	call	10002338 <__fixunssfsi>
100014a8:	01400104 	movi	r5,4
100014ac:	1009883a 	mov	r4,r2
100014b0:	0005aa80 	call	10005aa8 <calloc>
100014b4:	1007883a 	mov	r3,r2
100014b8:	e0bffb17 	ldw	r2,-20(fp)
100014bc:	10c00615 	stw	r3,24(r2)
    l->layer_out = (float *) calloc(num_nodes, sizeof(float));
100014c0:	e13ffe17 	ldw	r4,-8(fp)
100014c4:	00023380 	call	10002338 <__fixunssfsi>
100014c8:	01400104 	movi	r5,4
100014cc:	1009883a 	mov	r4,r2
100014d0:	0005aa80 	call	10005aa8 <calloc>
100014d4:	1007883a 	mov	r3,r2
100014d8:	e0bffb17 	ldw	r2,-20(fp)
100014dc:	10c00715 	stw	r3,28(r2)
    l->bias = (drand48() * 2) - 1;
100014e0:	0005ca80 	call	10005ca8 <drand48>
100014e4:	1011883a 	mov	r8,r2
100014e8:	1813883a 	mov	r9,r3
100014ec:	400d883a 	mov	r6,r8
100014f0:	480f883a 	mov	r7,r9
100014f4:	4009883a 	mov	r4,r8
100014f8:	480b883a 	mov	r5,r9
100014fc:	0003be80 	call	10003be8 <__adddf3>
10001500:	1009883a 	mov	r4,r2
10001504:	180b883a 	mov	r5,r3
10001508:	2005883a 	mov	r2,r4
1000150c:	2807883a 	mov	r3,r5
10001510:	000d883a 	mov	r6,zero
10001514:	01cffc34 	movhi	r7,16368
10001518:	1009883a 	mov	r4,r2
1000151c:	180b883a 	mov	r5,r3
10001520:	0004df00 	call	10004df0 <__subdf3>
10001524:	1009883a 	mov	r4,r2
10001528:	180b883a 	mov	r5,r3
1000152c:	2005883a 	mov	r2,r4
10001530:	2807883a 	mov	r3,r5
10001534:	1009883a 	mov	r4,r2
10001538:	180b883a 	mov	r5,r3
1000153c:	00057fc0 	call	100057fc <__truncdfsf2>
10001540:	1007883a 	mov	r3,r2
10001544:	e0bffb17 	ldw	r2,-20(fp)
10001548:	10c00815 	stw	r3,32(r2)
}
1000154c:	0001883a 	nop
10001550:	e6ffff04 	addi	sp,fp,-4
10001554:	dfc00217 	ldw	ra,8(sp)
10001558:	df000117 	ldw	fp,4(sp)
1000155c:	dc000017 	ldw	r16,0(sp)
10001560:	dec00304 	addi	sp,sp,12
10001564:	f800283a 	ret

10001568 <eval_layer_1>:

void eval_layer_1(layer_1_t * l) {
10001568:	defff904 	addi	sp,sp,-28
1000156c:	dfc00615 	stw	ra,24(sp)
10001570:	df000515 	stw	fp,20(sp)
10001574:	dc800415 	stw	r18,16(sp)
10001578:	dc400315 	stw	r17,12(sp)
1000157c:	dc000215 	stw	r16,8(sp)
10001580:	df000504 	addi	fp,sp,20
10001584:	e13ffc15 	stw	r4,-16(fp)
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001588:	e03ffb15 	stw	zero,-20(fp)
1000158c:	00003406 	br	10001660 <eval_layer_1+0xf8>
        l->layer_net[i] = dot_product_1(l->input_vals, l->weights[i], ATTRS_PER_ENTRY, l->curr_point) + l->bias;
10001590:	e0bffc17 	ldw	r2,-16(fp)
10001594:	10c00617 	ldw	r3,24(r2)
10001598:	e0bffb17 	ldw	r2,-20(fp)
1000159c:	1085883a 	add	r2,r2,r2
100015a0:	1085883a 	add	r2,r2,r2
100015a4:	18a1883a 	add	r16,r3,r2
100015a8:	e0bffc17 	ldw	r2,-16(fp)
100015ac:	14400017 	ldw	r17,0(r2)
100015b0:	e0bffc17 	ldw	r2,-16(fp)
100015b4:	10c00417 	ldw	r3,16(r2)
100015b8:	e0bffb17 	ldw	r2,-20(fp)
100015bc:	1085883a 	add	r2,r2,r2
100015c0:	1085883a 	add	r2,r2,r2
100015c4:	1885883a 	add	r2,r3,r2
100015c8:	14800017 	ldw	r18,0(r2)
100015cc:	e0bffc17 	ldw	r2,-16(fp)
100015d0:	10c00117 	ldw	r3,4(r2)
100015d4:	1809883a 	mov	r4,r3
100015d8:	00023380 	call	10002338 <__fixunssfsi>
100015dc:	100f883a 	mov	r7,r2
100015e0:	0190b234 	movhi	r6,17096
100015e4:	900b883a 	mov	r5,r18
100015e8:	8809883a 	mov	r4,r17
100015ec:	00010d00 	call	100010d0 <dot_product_1>
100015f0:	1009883a 	mov	r4,r2
100015f4:	e0bffc17 	ldw	r2,-16(fp)
100015f8:	10c00817 	ldw	r3,32(r2)
100015fc:	180b883a 	mov	r5,r3
10001600:	000254c0 	call	1000254c <__addsf3>
10001604:	1007883a 	mov	r3,r2
10001608:	1805883a 	mov	r2,r3
1000160c:	80800015 	stw	r2,0(r16)
        l->layer_out[i] = sigmoid(l->layer_net[i]);
10001610:	e0bffc17 	ldw	r2,-16(fp)
10001614:	10c00717 	ldw	r3,28(r2)
10001618:	e0bffb17 	ldw	r2,-20(fp)
1000161c:	1085883a 	add	r2,r2,r2
10001620:	1085883a 	add	r2,r2,r2
10001624:	18a1883a 	add	r16,r3,r2
10001628:	e0bffc17 	ldw	r2,-16(fp)
1000162c:	10c00617 	ldw	r3,24(r2)
10001630:	e0bffb17 	ldw	r2,-20(fp)
10001634:	1085883a 	add	r2,r2,r2
10001638:	1085883a 	add	r2,r2,r2
1000163c:	1885883a 	add	r2,r3,r2
10001640:	10c00017 	ldw	r3,0(r2)
10001644:	1809883a 	mov	r4,r3
10001648:	000026c0 	call	1000026c <sigmoid>
1000164c:	1007883a 	mov	r3,r2
10001650:	80c00015 	stw	r3,0(r16)
}

void eval_layer_1(layer_1_t * l) {
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001654:	e0bffb17 	ldw	r2,-20(fp)
10001658:	10800044 	addi	r2,r2,1
1000165c:	e0bffb15 	stw	r2,-20(fp)
10001660:	e13ffb17 	ldw	r4,-20(fp)
10001664:	00039d40 	call	100039d4 <__floatsisf>
10001668:	1009883a 	mov	r4,r2
1000166c:	e0bffc17 	ldw	r2,-16(fp)
10001670:	10c00217 	ldw	r3,8(r2)
10001674:	180b883a 	mov	r5,r3
10001678:	0002f880 	call	10002f88 <__lesf2>
1000167c:	103fc416 	blt	r2,zero,10001590 <__alt_data_end+0xf8001590>
        l->layer_net[i] = dot_product_1(l->input_vals, l->weights[i], ATTRS_PER_ENTRY, l->curr_point) + l->bias;
        l->layer_out[i] = sigmoid(l->layer_net[i]);
    }

    return;
10001680:	0001883a 	nop
}
10001684:	e6fffd04 	addi	sp,fp,-12
10001688:	dfc00417 	ldw	ra,16(sp)
1000168c:	df000317 	ldw	fp,12(sp)
10001690:	dc800217 	ldw	r18,8(sp)
10001694:	dc400117 	ldw	r17,4(sp)
10001698:	dc000017 	ldw	r16,0(sp)
1000169c:	dec00504 	addi	sp,sp,20
100016a0:	f800283a 	ret

100016a4 <backprop_layer_1>:

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
100016a4:	defff304 	addi	sp,sp,-52
100016a8:	dfc00c15 	stw	ra,48(sp)
100016ac:	df000b15 	stw	fp,44(sp)
100016b0:	dd800a15 	stw	r22,40(sp)
100016b4:	dd400915 	stw	r21,36(sp)
100016b8:	dd000815 	stw	r20,32(sp)
100016bc:	dcc00715 	stw	r19,28(sp)
100016c0:	dc800615 	stw	r18,24(sp)
100016c4:	dc400515 	stw	r17,20(sp)
100016c8:	dc000415 	stw	r16,16(sp)
100016cc:	df000b04 	addi	fp,sp,44
100016d0:	e13ff715 	stw	r4,-36(fp)
100016d4:	e17ff815 	stw	r5,-32(fp)
    for(int i = 0; i < l->num_nodes; i++) {
100016d8:	e03ff515 	stw	zero,-44(fp)
100016dc:	00009b06 	br	1000194c <backprop_layer_1+0x2a8>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100016e0:	e03ff615 	stw	zero,-40(fp)
100016e4:	00009306 	br	10001934 <backprop_layer_1+0x290>
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * other->weight_deltas[0][i] * get_array_value(l->input_vals, (l->curr_point * ATTRS_PER_ENTRY + j)) * other->weights[0][i] * inv_sigmoid(l->layer_out[i]));
100016e8:	e0bff717 	ldw	r2,-36(fp)
100016ec:	10c00417 	ldw	r3,16(r2)
100016f0:	e0bff517 	ldw	r2,-44(fp)
100016f4:	1085883a 	add	r2,r2,r2
100016f8:	1085883a 	add	r2,r2,r2
100016fc:	1885883a 	add	r2,r3,r2
10001700:	10c00017 	ldw	r3,0(r2)
10001704:	e0bff617 	ldw	r2,-40(fp)
10001708:	1085883a 	add	r2,r2,r2
1000170c:	1085883a 	add	r2,r2,r2
10001710:	18a9883a 	add	r20,r3,r2
10001714:	e0bff717 	ldw	r2,-36(fp)
10001718:	10c00417 	ldw	r3,16(r2)
1000171c:	e0bff517 	ldw	r2,-44(fp)
10001720:	1085883a 	add	r2,r2,r2
10001724:	1085883a 	add	r2,r2,r2
10001728:	1885883a 	add	r2,r3,r2
1000172c:	10c00017 	ldw	r3,0(r2)
10001730:	e0bff617 	ldw	r2,-40(fp)
10001734:	1085883a 	add	r2,r2,r2
10001738:	1085883a 	add	r2,r2,r2
1000173c:	1885883a 	add	r2,r3,r2
10001740:	10c00017 	ldw	r3,0(r2)
10001744:	1809883a 	mov	r4,r3
10001748:	00056ec0 	call	100056ec <__extendsfdf2>
1000174c:	1021883a 	mov	r16,r2
10001750:	1823883a 	mov	r17,r3
10001754:	e0bff817 	ldw	r2,-32(fp)
10001758:	10800617 	ldw	r2,24(r2)
1000175c:	10c00017 	ldw	r3,0(r2)
10001760:	e0bff517 	ldw	r2,-44(fp)
10001764:	1085883a 	add	r2,r2,r2
10001768:	1085883a 	add	r2,r2,r2
1000176c:	1885883a 	add	r2,r3,r2
10001770:	10c00017 	ldw	r3,0(r2)
10001774:	1809883a 	mov	r4,r3
10001778:	00056ec0 	call	100056ec <__extendsfdf2>
1000177c:	1011883a 	mov	r8,r2
10001780:	1813883a 	mov	r9,r3
10001784:	01a666b4 	movhi	r6,39322
10001788:	31a66684 	addi	r6,r6,-26214
1000178c:	01cff2b4 	movhi	r7,16330
10001790:	39e66644 	addi	r7,r7,-26215
10001794:	4009883a 	mov	r4,r8
10001798:	480b883a 	mov	r5,r9
1000179c:	00045880 	call	10004588 <__muldf3>
100017a0:	1009883a 	mov	r4,r2
100017a4:	180b883a 	mov	r5,r3
100017a8:	2025883a 	mov	r18,r4
100017ac:	2827883a 	mov	r19,r5
100017b0:	e0bff717 	ldw	r2,-36(fp)
100017b4:	15400017 	ldw	r21,0(r2)
100017b8:	e0bff717 	ldw	r2,-36(fp)
100017bc:	10c00117 	ldw	r3,4(r2)
100017c0:	0150b234 	movhi	r5,17096
100017c4:	1809883a 	mov	r4,r3
100017c8:	00030500 	call	10003050 <__mulsf3>
100017cc:	1007883a 	mov	r3,r2
100017d0:	182d883a 	mov	r22,r3
100017d4:	e13ff617 	ldw	r4,-40(fp)
100017d8:	00039d40 	call	100039d4 <__floatsisf>
100017dc:	1007883a 	mov	r3,r2
100017e0:	180b883a 	mov	r5,r3
100017e4:	b009883a 	mov	r4,r22
100017e8:	000254c0 	call	1000254c <__addsf3>
100017ec:	1007883a 	mov	r3,r2
100017f0:	1805883a 	mov	r2,r3
100017f4:	1009883a 	mov	r4,r2
100017f8:	00023380 	call	10002338 <__fixunssfsi>
100017fc:	100b883a 	mov	r5,r2
10001800:	a809883a 	mov	r4,r21
10001804:	0000ee80 	call	10000ee8 <get_array_value>
10001808:	1007883a 	mov	r3,r2
1000180c:	1809883a 	mov	r4,r3
10001810:	00056ec0 	call	100056ec <__extendsfdf2>
10001814:	1009883a 	mov	r4,r2
10001818:	180b883a 	mov	r5,r3
1000181c:	200d883a 	mov	r6,r4
10001820:	280f883a 	mov	r7,r5
10001824:	9009883a 	mov	r4,r18
10001828:	980b883a 	mov	r5,r19
1000182c:	00045880 	call	10004588 <__muldf3>
10001830:	1009883a 	mov	r4,r2
10001834:	180b883a 	mov	r5,r3
10001838:	2025883a 	mov	r18,r4
1000183c:	2827883a 	mov	r19,r5
10001840:	e0bff817 	ldw	r2,-32(fp)
10001844:	10800517 	ldw	r2,20(r2)
10001848:	10c00017 	ldw	r3,0(r2)
1000184c:	e0bff517 	ldw	r2,-44(fp)
10001850:	1085883a 	add	r2,r2,r2
10001854:	1085883a 	add	r2,r2,r2
10001858:	1885883a 	add	r2,r3,r2
1000185c:	10c00017 	ldw	r3,0(r2)
10001860:	1809883a 	mov	r4,r3
10001864:	00056ec0 	call	100056ec <__extendsfdf2>
10001868:	1009883a 	mov	r4,r2
1000186c:	180b883a 	mov	r5,r3
10001870:	200d883a 	mov	r6,r4
10001874:	280f883a 	mov	r7,r5
10001878:	9009883a 	mov	r4,r18
1000187c:	980b883a 	mov	r5,r19
10001880:	00045880 	call	10004588 <__muldf3>
10001884:	1009883a 	mov	r4,r2
10001888:	180b883a 	mov	r5,r3
1000188c:	2025883a 	mov	r18,r4
10001890:	2827883a 	mov	r19,r5
10001894:	e0bff717 	ldw	r2,-36(fp)
10001898:	10c00717 	ldw	r3,28(r2)
1000189c:	e0bff517 	ldw	r2,-44(fp)
100018a0:	1085883a 	add	r2,r2,r2
100018a4:	1085883a 	add	r2,r2,r2
100018a8:	1885883a 	add	r2,r3,r2
100018ac:	10c00017 	ldw	r3,0(r2)
100018b0:	1809883a 	mov	r4,r3
100018b4:	00002a40 	call	100002a4 <inv_sigmoid>
100018b8:	1007883a 	mov	r3,r2
100018bc:	1809883a 	mov	r4,r3
100018c0:	00056ec0 	call	100056ec <__extendsfdf2>
100018c4:	1009883a 	mov	r4,r2
100018c8:	180b883a 	mov	r5,r3
100018cc:	200d883a 	mov	r6,r4
100018d0:	280f883a 	mov	r7,r5
100018d4:	9009883a 	mov	r4,r18
100018d8:	980b883a 	mov	r5,r19
100018dc:	00045880 	call	10004588 <__muldf3>
100018e0:	1009883a 	mov	r4,r2
100018e4:	180b883a 	mov	r5,r3
100018e8:	2005883a 	mov	r2,r4
100018ec:	2807883a 	mov	r3,r5
100018f0:	100d883a 	mov	r6,r2
100018f4:	180f883a 	mov	r7,r3
100018f8:	8009883a 	mov	r4,r16
100018fc:	880b883a 	mov	r5,r17
10001900:	0004df00 	call	10004df0 <__subdf3>
10001904:	1009883a 	mov	r4,r2
10001908:	180b883a 	mov	r5,r3
1000190c:	2005883a 	mov	r2,r4
10001910:	2807883a 	mov	r3,r5
10001914:	1009883a 	mov	r4,r2
10001918:	180b883a 	mov	r5,r3
1000191c:	00057fc0 	call	100057fc <__truncdfsf2>
10001920:	1007883a 	mov	r3,r2
10001924:	a0c00015 	stw	r3,0(r20)
    return;
}

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
    for(int i = 0; i < l->num_nodes; i++) {
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
10001928:	e0bff617 	ldw	r2,-40(fp)
1000192c:	10800044 	addi	r2,r2,1
10001930:	e0bff615 	stw	r2,-40(fp)
10001934:	e0bff617 	ldw	r2,-40(fp)
10001938:	10801910 	cmplti	r2,r2,100
1000193c:	103f6a1e 	bne	r2,zero,100016e8 <__alt_data_end+0xf80016e8>

    return;
}

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
    for(int i = 0; i < l->num_nodes; i++) {
10001940:	e0bff517 	ldw	r2,-44(fp)
10001944:	10800044 	addi	r2,r2,1
10001948:	e0bff515 	stw	r2,-44(fp)
1000194c:	e13ff517 	ldw	r4,-44(fp)
10001950:	00039d40 	call	100039d4 <__floatsisf>
10001954:	1009883a 	mov	r4,r2
10001958:	e0bff717 	ldw	r2,-36(fp)
1000195c:	10c00217 	ldw	r3,8(r2)
10001960:	180b883a 	mov	r5,r3
10001964:	0002f880 	call	10002f88 <__lesf2>
10001968:	103f5d16 	blt	r2,zero,100016e0 <__alt_data_end+0xf80016e0>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * other->weight_deltas[0][i] * get_array_value(l->input_vals, (l->curr_point * ATTRS_PER_ENTRY + j)) * other->weights[0][i] * inv_sigmoid(l->layer_out[i]));
        }
    }
    return;
1000196c:	0001883a 	nop
}
10001970:	e6fff904 	addi	sp,fp,-28
10001974:	dfc00817 	ldw	ra,32(sp)
10001978:	df000717 	ldw	fp,28(sp)
1000197c:	dd800617 	ldw	r22,24(sp)
10001980:	dd400517 	ldw	r21,20(sp)
10001984:	dd000417 	ldw	r20,16(sp)
10001988:	dcc00317 	ldw	r19,12(sp)
1000198c:	dc800217 	ldw	r18,8(sp)
10001990:	dc400117 	ldw	r17,4(sp)
10001994:	dc000017 	ldw	r16,0(sp)
10001998:	dec00904 	addi	sp,sp,36
1000199c:	f800283a 	ret

100019a0 <free_layer_1>:

void free_layer_1(layer_1_t * l) {
100019a0:	defffb04 	addi	sp,sp,-20
100019a4:	dfc00415 	stw	ra,16(sp)
100019a8:	df000315 	stw	fp,12(sp)
100019ac:	df000304 	addi	fp,sp,12
100019b0:	e13fff15 	stw	r4,-4(fp)
    free_array(l->input_vals);
100019b4:	e0bfff17 	ldw	r2,-4(fp)
100019b8:	10800017 	ldw	r2,0(r2)
100019bc:	1009883a 	mov	r4,r2
100019c0:	0000f480 	call	10000f48 <free_array>

    for(int i = 0; i < l->num_nodes; i++) {
100019c4:	e03ffd15 	stw	zero,-12(fp)
100019c8:	00000c06 	br	100019fc <free_layer_1+0x5c>
        free(l->weights[i]);
100019cc:	e0bfff17 	ldw	r2,-4(fp)
100019d0:	10c00417 	ldw	r3,16(r2)
100019d4:	e0bffd17 	ldw	r2,-12(fp)
100019d8:	1085883a 	add	r2,r2,r2
100019dc:	1085883a 	add	r2,r2,r2
100019e0:	1885883a 	add	r2,r3,r2
100019e4:	10800017 	ldw	r2,0(r2)
100019e8:	1009883a 	mov	r4,r2
100019ec:	00060100 	call	10006010 <free>
}

void free_layer_1(layer_1_t * l) {
    free_array(l->input_vals);

    for(int i = 0; i < l->num_nodes; i++) {
100019f0:	e0bffd17 	ldw	r2,-12(fp)
100019f4:	10800044 	addi	r2,r2,1
100019f8:	e0bffd15 	stw	r2,-12(fp)
100019fc:	e13ffd17 	ldw	r4,-12(fp)
10001a00:	00039d40 	call	100039d4 <__floatsisf>
10001a04:	1009883a 	mov	r4,r2
10001a08:	e0bfff17 	ldw	r2,-4(fp)
10001a0c:	10c00217 	ldw	r3,8(r2)
10001a10:	180b883a 	mov	r5,r3
10001a14:	0002f880 	call	10002f88 <__lesf2>
10001a18:	103fec16 	blt	r2,zero,100019cc <__alt_data_end+0xf80019cc>
        free(l->weights[i]);
    }
    free(l->weights);
10001a1c:	e0bfff17 	ldw	r2,-4(fp)
10001a20:	10800417 	ldw	r2,16(r2)
10001a24:	1009883a 	mov	r4,r2
10001a28:	00060100 	call	10006010 <free>
    l->weights = NULL;
10001a2c:	e0bfff17 	ldw	r2,-4(fp)
10001a30:	10000415 	stw	zero,16(r2)

    for(int i = 0; i < l->num_nodes; i++) {
10001a34:	e03ffe15 	stw	zero,-8(fp)
10001a38:	00000c06 	br	10001a6c <free_layer_1+0xcc>
        free(l->weight_deltas[i]);
10001a3c:	e0bfff17 	ldw	r2,-4(fp)
10001a40:	10c00517 	ldw	r3,20(r2)
10001a44:	e0bffe17 	ldw	r2,-8(fp)
10001a48:	1085883a 	add	r2,r2,r2
10001a4c:	1085883a 	add	r2,r2,r2
10001a50:	1885883a 	add	r2,r3,r2
10001a54:	10800017 	ldw	r2,0(r2)
10001a58:	1009883a 	mov	r4,r2
10001a5c:	00060100 	call	10006010 <free>
        free(l->weights[i]);
    }
    free(l->weights);
    l->weights = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
10001a60:	e0bffe17 	ldw	r2,-8(fp)
10001a64:	10800044 	addi	r2,r2,1
10001a68:	e0bffe15 	stw	r2,-8(fp)
10001a6c:	e13ffe17 	ldw	r4,-8(fp)
10001a70:	00039d40 	call	100039d4 <__floatsisf>
10001a74:	1009883a 	mov	r4,r2
10001a78:	e0bfff17 	ldw	r2,-4(fp)
10001a7c:	10c00217 	ldw	r3,8(r2)
10001a80:	180b883a 	mov	r5,r3
10001a84:	0002f880 	call	10002f88 <__lesf2>
10001a88:	103fec16 	blt	r2,zero,10001a3c <__alt_data_end+0xf8001a3c>
        free(l->weight_deltas[i]);
    }
    free(l->weight_deltas);
10001a8c:	e0bfff17 	ldw	r2,-4(fp)
10001a90:	10800517 	ldw	r2,20(r2)
10001a94:	1009883a 	mov	r4,r2
10001a98:	00060100 	call	10006010 <free>
    l->weight_deltas = NULL;
10001a9c:	e0bfff17 	ldw	r2,-4(fp)
10001aa0:	10000515 	stw	zero,20(r2)

    free(l->layer_net);
10001aa4:	e0bfff17 	ldw	r2,-4(fp)
10001aa8:	10800617 	ldw	r2,24(r2)
10001aac:	1009883a 	mov	r4,r2
10001ab0:	00060100 	call	10006010 <free>
    l->layer_net = NULL;
10001ab4:	e0bfff17 	ldw	r2,-4(fp)
10001ab8:	10000615 	stw	zero,24(r2)

    free(l->layer_out);
10001abc:	e0bfff17 	ldw	r2,-4(fp)
10001ac0:	10800717 	ldw	r2,28(r2)
10001ac4:	1009883a 	mov	r4,r2
10001ac8:	00060100 	call	10006010 <free>
    l->layer_out = NULL;
10001acc:	e0bfff17 	ldw	r2,-4(fp)
10001ad0:	10000715 	stw	zero,28(r2)

    l->curr_point = 0;
10001ad4:	e0bfff17 	ldw	r2,-4(fp)
10001ad8:	10000115 	stw	zero,4(r2)
    l->num_nodes = 0;
10001adc:	e0bfff17 	ldw	r2,-4(fp)
10001ae0:	10000215 	stw	zero,8(r2)
    l->layer_num = 0;
10001ae4:	e0bfff17 	ldw	r2,-4(fp)
10001ae8:	10000315 	stw	zero,12(r2)
    l->bias = 0;
10001aec:	e0bfff17 	ldw	r2,-4(fp)
10001af0:	10000815 	stw	zero,32(r2)
}
10001af4:	0001883a 	nop
10001af8:	e037883a 	mov	sp,fp
10001afc:	dfc00117 	ldw	ra,4(sp)
10001b00:	df000017 	ldw	fp,0(sp)
10001b04:	dec00204 	addi	sp,sp,8
10001b08:	f800283a 	ret

10001b0c <init_layer_2>:

void init_layer_2(layer_2_t * l, float * input_vals, float curr_point, float num_nodes, float layer_num, float input_num_nodes) {
10001b0c:	defff504 	addi	sp,sp,-44
10001b10:	dfc00a15 	stw	ra,40(sp)
10001b14:	df000915 	stw	fp,36(sp)
10001b18:	dc000815 	stw	r16,32(sp)
10001b1c:	df000904 	addi	fp,sp,36
10001b20:	e13ffb15 	stw	r4,-20(fp)
10001b24:	e17ffc15 	stw	r5,-16(fp)
10001b28:	e1bffd15 	stw	r6,-12(fp)
10001b2c:	e1fffe15 	stw	r7,-8(fp)
    l->input_vals = input_vals;
10001b30:	e0bffb17 	ldw	r2,-20(fp)
10001b34:	e0fffc17 	ldw	r3,-16(fp)
10001b38:	10c00015 	stw	r3,0(r2)
    l->curr_point = curr_point;
10001b3c:	e0bffb17 	ldw	r2,-20(fp)
10001b40:	e0fffd17 	ldw	r3,-12(fp)
10001b44:	10c00115 	stw	r3,4(r2)
    l->num_nodes = num_nodes;
10001b48:	e0bffb17 	ldw	r2,-20(fp)
10001b4c:	e0fffe17 	ldw	r3,-8(fp)
10001b50:	10c00215 	stw	r3,8(r2)
    l->layer_num = layer_num;
10001b54:	e0bffb17 	ldw	r2,-20(fp)
10001b58:	e0c00217 	ldw	r3,8(fp)
10001b5c:	10c00315 	stw	r3,12(r2)
    l->input_num_nodes = input_num_nodes;
10001b60:	e0bffb17 	ldw	r2,-20(fp)
10001b64:	e0c00317 	ldw	r3,12(fp)
10001b68:	10c00415 	stw	r3,16(r2)

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
10001b6c:	01502034 	movhi	r5,16512
10001b70:	e13ffe17 	ldw	r4,-8(fp)
10001b74:	00030500 	call	10003050 <__mulsf3>
10001b78:	1007883a 	mov	r3,r2
10001b7c:	1805883a 	mov	r2,r3
10001b80:	1009883a 	mov	r4,r2
10001b84:	00023380 	call	10002338 <__fixunssfsi>
10001b88:	1009883a 	mov	r4,r2
10001b8c:	0005fd00 	call	10005fd0 <malloc>
10001b90:	1007883a 	mov	r3,r2
10001b94:	e0bffb17 	ldw	r2,-20(fp)
10001b98:	10c00515 	stw	r3,20(r2)
    for(int i = 0; i < num_nodes; i++) {
10001b9c:	e03ff715 	stw	zero,-36(fp)
10001ba0:	00001306 	br	10001bf0 <init_layer_2+0xe4>
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
10001ba4:	e0bffb17 	ldw	r2,-20(fp)
10001ba8:	10c00517 	ldw	r3,20(r2)
10001bac:	e0bff717 	ldw	r2,-36(fp)
10001bb0:	1085883a 	add	r2,r2,r2
10001bb4:	1085883a 	add	r2,r2,r2
10001bb8:	18a1883a 	add	r16,r3,r2
10001bbc:	01502034 	movhi	r5,16512
10001bc0:	e1000317 	ldw	r4,12(fp)
10001bc4:	00030500 	call	10003050 <__mulsf3>
10001bc8:	1007883a 	mov	r3,r2
10001bcc:	1805883a 	mov	r2,r3
10001bd0:	1009883a 	mov	r4,r2
10001bd4:	00023380 	call	10002338 <__fixunssfsi>
10001bd8:	1009883a 	mov	r4,r2
10001bdc:	0005fd00 	call	10005fd0 <malloc>
10001be0:	80800015 	stw	r2,0(r16)
    l->num_nodes = num_nodes;
    l->layer_num = layer_num;
    l->input_num_nodes = input_num_nodes;

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001be4:	e0bff717 	ldw	r2,-36(fp)
10001be8:	10800044 	addi	r2,r2,1
10001bec:	e0bff715 	stw	r2,-36(fp)
10001bf0:	e13ff717 	ldw	r4,-36(fp)
10001bf4:	00039d40 	call	100039d4 <__floatsisf>
10001bf8:	1007883a 	mov	r3,r2
10001bfc:	e17ffe17 	ldw	r5,-8(fp)
10001c00:	1809883a 	mov	r4,r3
10001c04:	0002f880 	call	10002f88 <__lesf2>
10001c08:	103fe616 	blt	r2,zero,10001ba4 <__alt_data_end+0xf8001ba4>
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001c0c:	e03ff815 	stw	zero,-32(fp)
10001c10:	00002206 	br	10001c9c <init_layer_2+0x190>
        for(int j = 0; j < input_num_nodes; j++) {
10001c14:	e03ff915 	stw	zero,-28(fp)
10001c18:	00001606 	br	10001c74 <init_layer_2+0x168>
            l->weights[i][j] = drand48();
10001c1c:	e0bffb17 	ldw	r2,-20(fp)
10001c20:	10c00517 	ldw	r3,20(r2)
10001c24:	e0bff817 	ldw	r2,-32(fp)
10001c28:	1085883a 	add	r2,r2,r2
10001c2c:	1085883a 	add	r2,r2,r2
10001c30:	1885883a 	add	r2,r3,r2
10001c34:	10c00017 	ldw	r3,0(r2)
10001c38:	e0bff917 	ldw	r2,-28(fp)
10001c3c:	1085883a 	add	r2,r2,r2
10001c40:	1085883a 	add	r2,r2,r2
10001c44:	18a1883a 	add	r16,r3,r2
10001c48:	0005ca80 	call	10005ca8 <drand48>
10001c4c:	100b883a 	mov	r5,r2
10001c50:	180d883a 	mov	r6,r3
10001c54:	2809883a 	mov	r4,r5
10001c58:	300b883a 	mov	r5,r6
10001c5c:	00057fc0 	call	100057fc <__truncdfsf2>
10001c60:	1007883a 	mov	r3,r2
10001c64:	80c00015 	stw	r3,0(r16)
    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
        for(int j = 0; j < input_num_nodes; j++) {
10001c68:	e0bff917 	ldw	r2,-28(fp)
10001c6c:	10800044 	addi	r2,r2,1
10001c70:	e0bff915 	stw	r2,-28(fp)
10001c74:	e13ff917 	ldw	r4,-28(fp)
10001c78:	00039d40 	call	100039d4 <__floatsisf>
10001c7c:	1007883a 	mov	r3,r2
10001c80:	e1400317 	ldw	r5,12(fp)
10001c84:	1809883a 	mov	r4,r3
10001c88:	0002f880 	call	10002f88 <__lesf2>
10001c8c:	103fe316 	blt	r2,zero,10001c1c <__alt_data_end+0xf8001c1c>

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001c90:	e0bff817 	ldw	r2,-32(fp)
10001c94:	10800044 	addi	r2,r2,1
10001c98:	e0bff815 	stw	r2,-32(fp)
10001c9c:	e13ff817 	ldw	r4,-32(fp)
10001ca0:	00039d40 	call	100039d4 <__floatsisf>
10001ca4:	1007883a 	mov	r3,r2
10001ca8:	e17ffe17 	ldw	r5,-8(fp)
10001cac:	1809883a 	mov	r4,r3
10001cb0:	0002f880 	call	10002f88 <__lesf2>
10001cb4:	103fd716 	blt	r2,zero,10001c14 <__alt_data_end+0xf8001c14>
        for(int j = 0; j < input_num_nodes; j++) {
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
10001cb8:	e13ffe17 	ldw	r4,-8(fp)
10001cbc:	00023380 	call	10002338 <__fixunssfsi>
10001cc0:	01400104 	movi	r5,4
10001cc4:	1009883a 	mov	r4,r2
10001cc8:	0005aa80 	call	10005aa8 <calloc>
10001ccc:	1007883a 	mov	r3,r2
10001cd0:	e0bffb17 	ldw	r2,-20(fp)
10001cd4:	10c00615 	stw	r3,24(r2)
    for(int i = 0; i < num_nodes; i++) {
10001cd8:	e03ffa15 	stw	zero,-24(fp)
10001cdc:	00000f06 	br	10001d1c <init_layer_2+0x210>
        l->weight_deltas[i] = (float *) calloc(input_num_nodes, sizeof(float));
10001ce0:	e0bffb17 	ldw	r2,-20(fp)
10001ce4:	10c00617 	ldw	r3,24(r2)
10001ce8:	e0bffa17 	ldw	r2,-24(fp)
10001cec:	1085883a 	add	r2,r2,r2
10001cf0:	1085883a 	add	r2,r2,r2
10001cf4:	18a1883a 	add	r16,r3,r2
10001cf8:	e1000317 	ldw	r4,12(fp)
10001cfc:	00023380 	call	10002338 <__fixunssfsi>
10001d00:	01400104 	movi	r5,4
10001d04:	1009883a 	mov	r4,r2
10001d08:	0005aa80 	call	10005aa8 <calloc>
10001d0c:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001d10:	e0bffa17 	ldw	r2,-24(fp)
10001d14:	10800044 	addi	r2,r2,1
10001d18:	e0bffa15 	stw	r2,-24(fp)
10001d1c:	e13ffa17 	ldw	r4,-24(fp)
10001d20:	00039d40 	call	100039d4 <__floatsisf>
10001d24:	1007883a 	mov	r3,r2
10001d28:	e17ffe17 	ldw	r5,-8(fp)
10001d2c:	1809883a 	mov	r4,r3
10001d30:	0002f880 	call	10002f88 <__lesf2>
10001d34:	103fea16 	blt	r2,zero,10001ce0 <__alt_data_end+0xf8001ce0>
        l->weight_deltas[i] = (float *) calloc(input_num_nodes, sizeof(float));
    }

    l->layer_net = (float *) calloc(num_nodes, sizeof(float));
10001d38:	e13ffe17 	ldw	r4,-8(fp)
10001d3c:	00023380 	call	10002338 <__fixunssfsi>
10001d40:	01400104 	movi	r5,4
10001d44:	1009883a 	mov	r4,r2
10001d48:	0005aa80 	call	10005aa8 <calloc>
10001d4c:	1007883a 	mov	r3,r2
10001d50:	e0bffb17 	ldw	r2,-20(fp)
10001d54:	10c00715 	stw	r3,28(r2)
    l->layer_out = (float *) calloc(num_nodes, sizeof(float));
10001d58:	e13ffe17 	ldw	r4,-8(fp)
10001d5c:	00023380 	call	10002338 <__fixunssfsi>
10001d60:	01400104 	movi	r5,4
10001d64:	1009883a 	mov	r4,r2
10001d68:	0005aa80 	call	10005aa8 <calloc>
10001d6c:	1007883a 	mov	r3,r2
10001d70:	e0bffb17 	ldw	r2,-20(fp)
10001d74:	10c00815 	stw	r3,32(r2)
    l->bias = (drand48() * 2) - 1;
10001d78:	0005ca80 	call	10005ca8 <drand48>
10001d7c:	1011883a 	mov	r8,r2
10001d80:	1813883a 	mov	r9,r3
10001d84:	400d883a 	mov	r6,r8
10001d88:	480f883a 	mov	r7,r9
10001d8c:	4009883a 	mov	r4,r8
10001d90:	480b883a 	mov	r5,r9
10001d94:	0003be80 	call	10003be8 <__adddf3>
10001d98:	1009883a 	mov	r4,r2
10001d9c:	180b883a 	mov	r5,r3
10001da0:	2005883a 	mov	r2,r4
10001da4:	2807883a 	mov	r3,r5
10001da8:	000d883a 	mov	r6,zero
10001dac:	01cffc34 	movhi	r7,16368
10001db0:	1009883a 	mov	r4,r2
10001db4:	180b883a 	mov	r5,r3
10001db8:	0004df00 	call	10004df0 <__subdf3>
10001dbc:	1009883a 	mov	r4,r2
10001dc0:	180b883a 	mov	r5,r3
10001dc4:	2005883a 	mov	r2,r4
10001dc8:	2807883a 	mov	r3,r5
10001dcc:	1009883a 	mov	r4,r2
10001dd0:	180b883a 	mov	r5,r3
10001dd4:	00057fc0 	call	100057fc <__truncdfsf2>
10001dd8:	1007883a 	mov	r3,r2
10001ddc:	e0bffb17 	ldw	r2,-20(fp)
10001de0:	10c00915 	stw	r3,36(r2)
}
10001de4:	0001883a 	nop
10001de8:	e6ffff04 	addi	sp,fp,-4
10001dec:	dfc00217 	ldw	ra,8(sp)
10001df0:	df000117 	ldw	fp,4(sp)
10001df4:	dc000017 	ldw	r16,0(sp)
10001df8:	dec00304 	addi	sp,sp,12
10001dfc:	f800283a 	ret

10001e00 <eval_layer_2>:

void eval_layer_2(layer_2_t * l) {
10001e00:	defffb04 	addi	sp,sp,-20
10001e04:	dfc00415 	stw	ra,16(sp)
10001e08:	df000315 	stw	fp,12(sp)
10001e0c:	dc000215 	stw	r16,8(sp)
10001e10:	df000304 	addi	fp,sp,12
10001e14:	e13ffe15 	stw	r4,-8(fp)
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001e18:	e03ffd15 	stw	zero,-12(fp)
10001e1c:	00003006 	br	10001ee0 <eval_layer_2+0xe0>
        l->layer_net[i] = dot_product_2(l->input_vals, l->weights[i], l->input_num_nodes) + l->bias;
10001e20:	e0bffe17 	ldw	r2,-8(fp)
10001e24:	10c00717 	ldw	r3,28(r2)
10001e28:	e0bffd17 	ldw	r2,-12(fp)
10001e2c:	1085883a 	add	r2,r2,r2
10001e30:	1085883a 	add	r2,r2,r2
10001e34:	18a1883a 	add	r16,r3,r2
10001e38:	e0bffe17 	ldw	r2,-8(fp)
10001e3c:	11000017 	ldw	r4,0(r2)
10001e40:	e0bffe17 	ldw	r2,-8(fp)
10001e44:	10c00517 	ldw	r3,20(r2)
10001e48:	e0bffd17 	ldw	r2,-12(fp)
10001e4c:	1085883a 	add	r2,r2,r2
10001e50:	1085883a 	add	r2,r2,r2
10001e54:	1885883a 	add	r2,r3,r2
10001e58:	10c00017 	ldw	r3,0(r2)
10001e5c:	e0bffe17 	ldw	r2,-8(fp)
10001e60:	11400417 	ldw	r5,16(r2)
10001e64:	280d883a 	mov	r6,r5
10001e68:	180b883a 	mov	r5,r3
10001e6c:	00011e40 	call	100011e4 <dot_product_2>
10001e70:	1009883a 	mov	r4,r2
10001e74:	e0bffe17 	ldw	r2,-8(fp)
10001e78:	10c00917 	ldw	r3,36(r2)
10001e7c:	180b883a 	mov	r5,r3
10001e80:	000254c0 	call	1000254c <__addsf3>
10001e84:	1007883a 	mov	r3,r2
10001e88:	1805883a 	mov	r2,r3
10001e8c:	80800015 	stw	r2,0(r16)
        l->layer_out[i] = sigmoid(l->layer_net[i]);
10001e90:	e0bffe17 	ldw	r2,-8(fp)
10001e94:	10c00817 	ldw	r3,32(r2)
10001e98:	e0bffd17 	ldw	r2,-12(fp)
10001e9c:	1085883a 	add	r2,r2,r2
10001ea0:	1085883a 	add	r2,r2,r2
10001ea4:	18a1883a 	add	r16,r3,r2
10001ea8:	e0bffe17 	ldw	r2,-8(fp)
10001eac:	10c00717 	ldw	r3,28(r2)
10001eb0:	e0bffd17 	ldw	r2,-12(fp)
10001eb4:	1085883a 	add	r2,r2,r2
10001eb8:	1085883a 	add	r2,r2,r2
10001ebc:	1885883a 	add	r2,r3,r2
10001ec0:	10c00017 	ldw	r3,0(r2)
10001ec4:	1809883a 	mov	r4,r3
10001ec8:	000026c0 	call	1000026c <sigmoid>
10001ecc:	1007883a 	mov	r3,r2
10001ed0:	80c00015 	stw	r3,0(r16)
}

void eval_layer_2(layer_2_t * l) {
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001ed4:	e0bffd17 	ldw	r2,-12(fp)
10001ed8:	10800044 	addi	r2,r2,1
10001edc:	e0bffd15 	stw	r2,-12(fp)
10001ee0:	e13ffd17 	ldw	r4,-12(fp)
10001ee4:	00039d40 	call	100039d4 <__floatsisf>
10001ee8:	1009883a 	mov	r4,r2
10001eec:	e0bffe17 	ldw	r2,-8(fp)
10001ef0:	10c00217 	ldw	r3,8(r2)
10001ef4:	180b883a 	mov	r5,r3
10001ef8:	0002f880 	call	10002f88 <__lesf2>
10001efc:	103fc816 	blt	r2,zero,10001e20 <__alt_data_end+0xf8001e20>
        l->layer_net[i] = dot_product_2(l->input_vals, l->weights[i], l->input_num_nodes) + l->bias;
        l->layer_out[i] = sigmoid(l->layer_net[i]);
    }

    return;
10001f00:	0001883a 	nop
}
10001f04:	e6ffff04 	addi	sp,fp,-4
10001f08:	dfc00217 	ldw	ra,8(sp)
10001f0c:	df000117 	ldw	fp,4(sp)
10001f10:	dc000017 	ldw	r16,0(sp)
10001f14:	dec00304 	addi	sp,sp,12
10001f18:	f800283a 	ret

10001f1c <backprop_layer_2>:

void backprop_layer_2(layer_2_t * l, float other) {
10001f1c:	defff504 	addi	sp,sp,-44
10001f20:	dfc00a15 	stw	ra,40(sp)
10001f24:	df000915 	stw	fp,36(sp)
10001f28:	dd000815 	stw	r20,32(sp)
10001f2c:	dcc00715 	stw	r19,28(sp)
10001f30:	dc800615 	stw	r18,24(sp)
10001f34:	dc400515 	stw	r17,20(sp)
10001f38:	dc000415 	stw	r16,16(sp)
10001f3c:	df000904 	addi	fp,sp,36
10001f40:	e13ff915 	stw	r4,-28(fp)
10001f44:	e17ffa15 	stw	r5,-24(fp)
    for(int i = 0; i < l->num_nodes; i++) {
10001f48:	e03ff715 	stw	zero,-36(fp)
10001f4c:	00008e06 	br	10002188 <backprop_layer_2+0x26c>
        for(int j = 0; j < l->input_num_nodes; j++) {
10001f50:	e03ff815 	stw	zero,-32(fp)
10001f54:	00008106 	br	1000215c <backprop_layer_2+0x240>
            l->weight_deltas[i][j] = inv_sigmoid(l->layer_out[i]) * inv_err(l->layer_out[i], other);
10001f58:	e0bff917 	ldw	r2,-28(fp)
10001f5c:	10c00617 	ldw	r3,24(r2)
10001f60:	e0bff717 	ldw	r2,-36(fp)
10001f64:	1085883a 	add	r2,r2,r2
10001f68:	1085883a 	add	r2,r2,r2
10001f6c:	1885883a 	add	r2,r3,r2
10001f70:	10c00017 	ldw	r3,0(r2)
10001f74:	e0bff817 	ldw	r2,-32(fp)
10001f78:	1085883a 	add	r2,r2,r2
10001f7c:	1085883a 	add	r2,r2,r2
10001f80:	18a1883a 	add	r16,r3,r2
10001f84:	e0bff917 	ldw	r2,-28(fp)
10001f88:	10c00817 	ldw	r3,32(r2)
10001f8c:	e0bff717 	ldw	r2,-36(fp)
10001f90:	1085883a 	add	r2,r2,r2
10001f94:	1085883a 	add	r2,r2,r2
10001f98:	1885883a 	add	r2,r3,r2
10001f9c:	10c00017 	ldw	r3,0(r2)
10001fa0:	1809883a 	mov	r4,r3
10001fa4:	00002a40 	call	100002a4 <inv_sigmoid>
10001fa8:	1023883a 	mov	r17,r2
10001fac:	e0bff917 	ldw	r2,-28(fp)
10001fb0:	10c00817 	ldw	r3,32(r2)
10001fb4:	e0bff717 	ldw	r2,-36(fp)
10001fb8:	1085883a 	add	r2,r2,r2
10001fbc:	1085883a 	add	r2,r2,r2
10001fc0:	1885883a 	add	r2,r3,r2
10001fc4:	10c00017 	ldw	r3,0(r2)
10001fc8:	e17ffa17 	ldw	r5,-24(fp)
10001fcc:	1809883a 	mov	r4,r3
10001fd0:	00003640 	call	10000364 <inv_err>
10001fd4:	1007883a 	mov	r3,r2
10001fd8:	180b883a 	mov	r5,r3
10001fdc:	8809883a 	mov	r4,r17
10001fe0:	00030500 	call	10003050 <__mulsf3>
10001fe4:	1007883a 	mov	r3,r2
10001fe8:	1805883a 	mov	r2,r3
10001fec:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * l->weight_deltas[i][j] * l->input_vals[j]);
10001ff0:	e0bff917 	ldw	r2,-28(fp)
10001ff4:	10c00517 	ldw	r3,20(r2)
10001ff8:	e0bff717 	ldw	r2,-36(fp)
10001ffc:	1085883a 	add	r2,r2,r2
10002000:	1085883a 	add	r2,r2,r2
10002004:	1885883a 	add	r2,r3,r2
10002008:	10c00017 	ldw	r3,0(r2)
1000200c:	e0bff817 	ldw	r2,-32(fp)
10002010:	1085883a 	add	r2,r2,r2
10002014:	1085883a 	add	r2,r2,r2
10002018:	18a9883a 	add	r20,r3,r2
1000201c:	e0bff917 	ldw	r2,-28(fp)
10002020:	10c00517 	ldw	r3,20(r2)
10002024:	e0bff717 	ldw	r2,-36(fp)
10002028:	1085883a 	add	r2,r2,r2
1000202c:	1085883a 	add	r2,r2,r2
10002030:	1885883a 	add	r2,r3,r2
10002034:	10c00017 	ldw	r3,0(r2)
10002038:	e0bff817 	ldw	r2,-32(fp)
1000203c:	1085883a 	add	r2,r2,r2
10002040:	1085883a 	add	r2,r2,r2
10002044:	1885883a 	add	r2,r3,r2
10002048:	10c00017 	ldw	r3,0(r2)
1000204c:	1809883a 	mov	r4,r3
10002050:	00056ec0 	call	100056ec <__extendsfdf2>
10002054:	1021883a 	mov	r16,r2
10002058:	1823883a 	mov	r17,r3
1000205c:	e0bff917 	ldw	r2,-28(fp)
10002060:	10c00617 	ldw	r3,24(r2)
10002064:	e0bff717 	ldw	r2,-36(fp)
10002068:	1085883a 	add	r2,r2,r2
1000206c:	1085883a 	add	r2,r2,r2
10002070:	1885883a 	add	r2,r3,r2
10002074:	10c00017 	ldw	r3,0(r2)
10002078:	e0bff817 	ldw	r2,-32(fp)
1000207c:	1085883a 	add	r2,r2,r2
10002080:	1085883a 	add	r2,r2,r2
10002084:	1885883a 	add	r2,r3,r2
10002088:	10c00017 	ldw	r3,0(r2)
1000208c:	1809883a 	mov	r4,r3
10002090:	00056ec0 	call	100056ec <__extendsfdf2>
10002094:	1011883a 	mov	r8,r2
10002098:	1813883a 	mov	r9,r3
1000209c:	01a666b4 	movhi	r6,39322
100020a0:	31a66684 	addi	r6,r6,-26214
100020a4:	01cff2b4 	movhi	r7,16330
100020a8:	39e66644 	addi	r7,r7,-26215
100020ac:	4009883a 	mov	r4,r8
100020b0:	480b883a 	mov	r5,r9
100020b4:	00045880 	call	10004588 <__muldf3>
100020b8:	1009883a 	mov	r4,r2
100020bc:	180b883a 	mov	r5,r3
100020c0:	2025883a 	mov	r18,r4
100020c4:	2827883a 	mov	r19,r5
100020c8:	e0bff917 	ldw	r2,-28(fp)
100020cc:	10c00017 	ldw	r3,0(r2)
100020d0:	e0bff817 	ldw	r2,-32(fp)
100020d4:	1085883a 	add	r2,r2,r2
100020d8:	1085883a 	add	r2,r2,r2
100020dc:	1885883a 	add	r2,r3,r2
100020e0:	10c00017 	ldw	r3,0(r2)
100020e4:	1809883a 	mov	r4,r3
100020e8:	00056ec0 	call	100056ec <__extendsfdf2>
100020ec:	1009883a 	mov	r4,r2
100020f0:	180b883a 	mov	r5,r3
100020f4:	200d883a 	mov	r6,r4
100020f8:	280f883a 	mov	r7,r5
100020fc:	9009883a 	mov	r4,r18
10002100:	980b883a 	mov	r5,r19
10002104:	00045880 	call	10004588 <__muldf3>
10002108:	1009883a 	mov	r4,r2
1000210c:	180b883a 	mov	r5,r3
10002110:	2005883a 	mov	r2,r4
10002114:	2807883a 	mov	r3,r5
10002118:	100d883a 	mov	r6,r2
1000211c:	180f883a 	mov	r7,r3
10002120:	8009883a 	mov	r4,r16
10002124:	880b883a 	mov	r5,r17
10002128:	0004df00 	call	10004df0 <__subdf3>
1000212c:	1009883a 	mov	r4,r2
10002130:	180b883a 	mov	r5,r3
10002134:	2005883a 	mov	r2,r4
10002138:	2807883a 	mov	r3,r5
1000213c:	1009883a 	mov	r4,r2
10002140:	180b883a 	mov	r5,r3
10002144:	00057fc0 	call	100057fc <__truncdfsf2>
10002148:	1007883a 	mov	r3,r2
1000214c:	a0c00015 	stw	r3,0(r20)
    return;
}

void backprop_layer_2(layer_2_t * l, float other) {
    for(int i = 0; i < l->num_nodes; i++) {
        for(int j = 0; j < l->input_num_nodes; j++) {
10002150:	e0bff817 	ldw	r2,-32(fp)
10002154:	10800044 	addi	r2,r2,1
10002158:	e0bff815 	stw	r2,-32(fp)
1000215c:	e13ff817 	ldw	r4,-32(fp)
10002160:	00039d40 	call	100039d4 <__floatsisf>
10002164:	1009883a 	mov	r4,r2
10002168:	e0bff917 	ldw	r2,-28(fp)
1000216c:	10c00417 	ldw	r3,16(r2)
10002170:	180b883a 	mov	r5,r3
10002174:	0002f880 	call	10002f88 <__lesf2>
10002178:	103f7716 	blt	r2,zero,10001f58 <__alt_data_end+0xf8001f58>

    return;
}

void backprop_layer_2(layer_2_t * l, float other) {
    for(int i = 0; i < l->num_nodes; i++) {
1000217c:	e0bff717 	ldw	r2,-36(fp)
10002180:	10800044 	addi	r2,r2,1
10002184:	e0bff715 	stw	r2,-36(fp)
10002188:	e13ff717 	ldw	r4,-36(fp)
1000218c:	00039d40 	call	100039d4 <__floatsisf>
10002190:	1009883a 	mov	r4,r2
10002194:	e0bff917 	ldw	r2,-28(fp)
10002198:	10c00217 	ldw	r3,8(r2)
1000219c:	180b883a 	mov	r5,r3
100021a0:	0002f880 	call	10002f88 <__lesf2>
100021a4:	103f6a16 	blt	r2,zero,10001f50 <__alt_data_end+0xf8001f50>
        for(int j = 0; j < l->input_num_nodes; j++) {
            l->weight_deltas[i][j] = inv_sigmoid(l->layer_out[i]) * inv_err(l->layer_out[i], other);
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * l->weight_deltas[i][j] * l->input_vals[j]);
        }
    }
    return;
100021a8:	0001883a 	nop
}
100021ac:	e6fffb04 	addi	sp,fp,-20
100021b0:	dfc00617 	ldw	ra,24(sp)
100021b4:	df000517 	ldw	fp,20(sp)
100021b8:	dd000417 	ldw	r20,16(sp)
100021bc:	dcc00317 	ldw	r19,12(sp)
100021c0:	dc800217 	ldw	r18,8(sp)
100021c4:	dc400117 	ldw	r17,4(sp)
100021c8:	dc000017 	ldw	r16,0(sp)
100021cc:	dec00704 	addi	sp,sp,28
100021d0:	f800283a 	ret

100021d4 <free_layer_2>:

void free_layer_2(layer_2_t * l) {
100021d4:	defffb04 	addi	sp,sp,-20
100021d8:	dfc00415 	stw	ra,16(sp)
100021dc:	df000315 	stw	fp,12(sp)
100021e0:	df000304 	addi	fp,sp,12
100021e4:	e13fff15 	stw	r4,-4(fp)
    l->input_vals = NULL;
100021e8:	e0bfff17 	ldw	r2,-4(fp)
100021ec:	10000015 	stw	zero,0(r2)

    for(int i = 0; i < l->num_nodes; i++) {
100021f0:	e03ffd15 	stw	zero,-12(fp)
100021f4:	00000c06 	br	10002228 <free_layer_2+0x54>
        free(l->weights[i]);
100021f8:	e0bfff17 	ldw	r2,-4(fp)
100021fc:	10c00517 	ldw	r3,20(r2)
10002200:	e0bffd17 	ldw	r2,-12(fp)
10002204:	1085883a 	add	r2,r2,r2
10002208:	1085883a 	add	r2,r2,r2
1000220c:	1885883a 	add	r2,r3,r2
10002210:	10800017 	ldw	r2,0(r2)
10002214:	1009883a 	mov	r4,r2
10002218:	00060100 	call	10006010 <free>
}

void free_layer_2(layer_2_t * l) {
    l->input_vals = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
1000221c:	e0bffd17 	ldw	r2,-12(fp)
10002220:	10800044 	addi	r2,r2,1
10002224:	e0bffd15 	stw	r2,-12(fp)
10002228:	e13ffd17 	ldw	r4,-12(fp)
1000222c:	00039d40 	call	100039d4 <__floatsisf>
10002230:	1009883a 	mov	r4,r2
10002234:	e0bfff17 	ldw	r2,-4(fp)
10002238:	10c00217 	ldw	r3,8(r2)
1000223c:	180b883a 	mov	r5,r3
10002240:	0002f880 	call	10002f88 <__lesf2>
10002244:	103fec16 	blt	r2,zero,100021f8 <__alt_data_end+0xf80021f8>
        free(l->weights[i]);
    }
    free(l->weights);
10002248:	e0bfff17 	ldw	r2,-4(fp)
1000224c:	10800517 	ldw	r2,20(r2)
10002250:	1009883a 	mov	r4,r2
10002254:	00060100 	call	10006010 <free>
    l->weights = NULL;
10002258:	e0bfff17 	ldw	r2,-4(fp)
1000225c:	10000515 	stw	zero,20(r2)

    for(int i = 0; i < l->num_nodes; i++) {
10002260:	e03ffe15 	stw	zero,-8(fp)
10002264:	00000c06 	br	10002298 <free_layer_2+0xc4>
        free(l->weight_deltas[i]);
10002268:	e0bfff17 	ldw	r2,-4(fp)
1000226c:	10c00617 	ldw	r3,24(r2)
10002270:	e0bffe17 	ldw	r2,-8(fp)
10002274:	1085883a 	add	r2,r2,r2
10002278:	1085883a 	add	r2,r2,r2
1000227c:	1885883a 	add	r2,r3,r2
10002280:	10800017 	ldw	r2,0(r2)
10002284:	1009883a 	mov	r4,r2
10002288:	00060100 	call	10006010 <free>
        free(l->weights[i]);
    }
    free(l->weights);
    l->weights = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
1000228c:	e0bffe17 	ldw	r2,-8(fp)
10002290:	10800044 	addi	r2,r2,1
10002294:	e0bffe15 	stw	r2,-8(fp)
10002298:	e13ffe17 	ldw	r4,-8(fp)
1000229c:	00039d40 	call	100039d4 <__floatsisf>
100022a0:	1009883a 	mov	r4,r2
100022a4:	e0bfff17 	ldw	r2,-4(fp)
100022a8:	10c00217 	ldw	r3,8(r2)
100022ac:	180b883a 	mov	r5,r3
100022b0:	0002f880 	call	10002f88 <__lesf2>
100022b4:	103fec16 	blt	r2,zero,10002268 <__alt_data_end+0xf8002268>
        free(l->weight_deltas[i]);
    }
    free(l->weight_deltas);
100022b8:	e0bfff17 	ldw	r2,-4(fp)
100022bc:	10800617 	ldw	r2,24(r2)
100022c0:	1009883a 	mov	r4,r2
100022c4:	00060100 	call	10006010 <free>
    l->weight_deltas = NULL;
100022c8:	e0bfff17 	ldw	r2,-4(fp)
100022cc:	10000615 	stw	zero,24(r2)

    free(l->layer_net);
100022d0:	e0bfff17 	ldw	r2,-4(fp)
100022d4:	10800717 	ldw	r2,28(r2)
100022d8:	1009883a 	mov	r4,r2
100022dc:	00060100 	call	10006010 <free>
    l->layer_net = NULL;
100022e0:	e0bfff17 	ldw	r2,-4(fp)
100022e4:	10000715 	stw	zero,28(r2)

    free(l->layer_out);
100022e8:	e0bfff17 	ldw	r2,-4(fp)
100022ec:	10800817 	ldw	r2,32(r2)
100022f0:	1009883a 	mov	r4,r2
100022f4:	00060100 	call	10006010 <free>
    l->layer_out = NULL;
100022f8:	e0bfff17 	ldw	r2,-4(fp)
100022fc:	10000815 	stw	zero,32(r2)

    l->curr_point = 0;
10002300:	e0bfff17 	ldw	r2,-4(fp)
10002304:	10000115 	stw	zero,4(r2)
    l->num_nodes = 0;
10002308:	e0bfff17 	ldw	r2,-4(fp)
1000230c:	10000215 	stw	zero,8(r2)
    l->layer_num = 0;
10002310:	e0bfff17 	ldw	r2,-4(fp)
10002314:	10000315 	stw	zero,12(r2)
    l->bias = 0;
10002318:	e0bfff17 	ldw	r2,-4(fp)
1000231c:	10000915 	stw	zero,36(r2)
10002320:	0001883a 	nop
10002324:	e037883a 	mov	sp,fp
10002328:	dfc00117 	ldw	ra,4(sp)
1000232c:	df000017 	ldw	fp,0(sp)
10002330:	dec00204 	addi	sp,sp,8
10002334:	f800283a 	ret

10002338 <__fixunssfsi>:
10002338:	defffd04 	addi	sp,sp,-12
1000233c:	dc000015 	stw	r16,0(sp)
10002340:	0413c034 	movhi	r16,20224
10002344:	800b883a 	mov	r5,r16
10002348:	dc400115 	stw	r17,4(sp)
1000234c:	dfc00215 	stw	ra,8(sp)
10002350:	2023883a 	mov	r17,r4
10002354:	0002ecc0 	call	10002ecc <__gesf2>
10002358:	1000070e 	bge	r2,zero,10002378 <__fixunssfsi+0x40>
1000235c:	8809883a 	mov	r4,r17
10002360:	00039640 	call	10003964 <__fixsfsi>
10002364:	dfc00217 	ldw	ra,8(sp)
10002368:	dc400117 	ldw	r17,4(sp)
1000236c:	dc000017 	ldw	r16,0(sp)
10002370:	dec00304 	addi	sp,sp,12
10002374:	f800283a 	ret
10002378:	800b883a 	mov	r5,r16
1000237c:	8809883a 	mov	r4,r17
10002380:	00034800 	call	10003480 <__subsf3>
10002384:	1009883a 	mov	r4,r2
10002388:	00039640 	call	10003964 <__fixsfsi>
1000238c:	00e00034 	movhi	r3,32768
10002390:	10c5883a 	add	r2,r2,r3
10002394:	003ff306 	br	10002364 <__alt_data_end+0xf8002364>

10002398 <__divsi3>:
10002398:	20001b16 	blt	r4,zero,10002408 <__divsi3+0x70>
1000239c:	000f883a 	mov	r7,zero
100023a0:	28001616 	blt	r5,zero,100023fc <__divsi3+0x64>
100023a4:	200d883a 	mov	r6,r4
100023a8:	29001a2e 	bgeu	r5,r4,10002414 <__divsi3+0x7c>
100023ac:	00800804 	movi	r2,32
100023b0:	00c00044 	movi	r3,1
100023b4:	00000106 	br	100023bc <__divsi3+0x24>
100023b8:	10000d26 	beq	r2,zero,100023f0 <__divsi3+0x58>
100023bc:	294b883a 	add	r5,r5,r5
100023c0:	10bfffc4 	addi	r2,r2,-1
100023c4:	18c7883a 	add	r3,r3,r3
100023c8:	293ffb36 	bltu	r5,r4,100023b8 <__alt_data_end+0xf80023b8>
100023cc:	0005883a 	mov	r2,zero
100023d0:	18000726 	beq	r3,zero,100023f0 <__divsi3+0x58>
100023d4:	0005883a 	mov	r2,zero
100023d8:	31400236 	bltu	r6,r5,100023e4 <__divsi3+0x4c>
100023dc:	314dc83a 	sub	r6,r6,r5
100023e0:	10c4b03a 	or	r2,r2,r3
100023e4:	1806d07a 	srli	r3,r3,1
100023e8:	280ad07a 	srli	r5,r5,1
100023ec:	183ffa1e 	bne	r3,zero,100023d8 <__alt_data_end+0xf80023d8>
100023f0:	38000126 	beq	r7,zero,100023f8 <__divsi3+0x60>
100023f4:	0085c83a 	sub	r2,zero,r2
100023f8:	f800283a 	ret
100023fc:	014bc83a 	sub	r5,zero,r5
10002400:	39c0005c 	xori	r7,r7,1
10002404:	003fe706 	br	100023a4 <__alt_data_end+0xf80023a4>
10002408:	0109c83a 	sub	r4,zero,r4
1000240c:	01c00044 	movi	r7,1
10002410:	003fe306 	br	100023a0 <__alt_data_end+0xf80023a0>
10002414:	00c00044 	movi	r3,1
10002418:	003fee06 	br	100023d4 <__alt_data_end+0xf80023d4>

1000241c <__modsi3>:
1000241c:	20001716 	blt	r4,zero,1000247c <__modsi3+0x60>
10002420:	000f883a 	mov	r7,zero
10002424:	2005883a 	mov	r2,r4
10002428:	28001216 	blt	r5,zero,10002474 <__modsi3+0x58>
1000242c:	2900162e 	bgeu	r5,r4,10002488 <__modsi3+0x6c>
10002430:	01800804 	movi	r6,32
10002434:	00c00044 	movi	r3,1
10002438:	00000106 	br	10002440 <__modsi3+0x24>
1000243c:	30000a26 	beq	r6,zero,10002468 <__modsi3+0x4c>
10002440:	294b883a 	add	r5,r5,r5
10002444:	31bfffc4 	addi	r6,r6,-1
10002448:	18c7883a 	add	r3,r3,r3
1000244c:	293ffb36 	bltu	r5,r4,1000243c <__alt_data_end+0xf800243c>
10002450:	18000526 	beq	r3,zero,10002468 <__modsi3+0x4c>
10002454:	1806d07a 	srli	r3,r3,1
10002458:	11400136 	bltu	r2,r5,10002460 <__modsi3+0x44>
1000245c:	1145c83a 	sub	r2,r2,r5
10002460:	280ad07a 	srli	r5,r5,1
10002464:	183ffb1e 	bne	r3,zero,10002454 <__alt_data_end+0xf8002454>
10002468:	38000126 	beq	r7,zero,10002470 <__modsi3+0x54>
1000246c:	0085c83a 	sub	r2,zero,r2
10002470:	f800283a 	ret
10002474:	014bc83a 	sub	r5,zero,r5
10002478:	003fec06 	br	1000242c <__alt_data_end+0xf800242c>
1000247c:	0109c83a 	sub	r4,zero,r4
10002480:	01c00044 	movi	r7,1
10002484:	003fe706 	br	10002424 <__alt_data_end+0xf8002424>
10002488:	00c00044 	movi	r3,1
1000248c:	003ff106 	br	10002454 <__alt_data_end+0xf8002454>

10002490 <__udivsi3>:
10002490:	200d883a 	mov	r6,r4
10002494:	2900152e 	bgeu	r5,r4,100024ec <__udivsi3+0x5c>
10002498:	28001416 	blt	r5,zero,100024ec <__udivsi3+0x5c>
1000249c:	00800804 	movi	r2,32
100024a0:	00c00044 	movi	r3,1
100024a4:	00000206 	br	100024b0 <__udivsi3+0x20>
100024a8:	10000e26 	beq	r2,zero,100024e4 <__udivsi3+0x54>
100024ac:	28000516 	blt	r5,zero,100024c4 <__udivsi3+0x34>
100024b0:	294b883a 	add	r5,r5,r5
100024b4:	10bfffc4 	addi	r2,r2,-1
100024b8:	18c7883a 	add	r3,r3,r3
100024bc:	293ffa36 	bltu	r5,r4,100024a8 <__alt_data_end+0xf80024a8>
100024c0:	18000826 	beq	r3,zero,100024e4 <__udivsi3+0x54>
100024c4:	0005883a 	mov	r2,zero
100024c8:	31400236 	bltu	r6,r5,100024d4 <__udivsi3+0x44>
100024cc:	314dc83a 	sub	r6,r6,r5
100024d0:	10c4b03a 	or	r2,r2,r3
100024d4:	1806d07a 	srli	r3,r3,1
100024d8:	280ad07a 	srli	r5,r5,1
100024dc:	183ffa1e 	bne	r3,zero,100024c8 <__alt_data_end+0xf80024c8>
100024e0:	f800283a 	ret
100024e4:	0005883a 	mov	r2,zero
100024e8:	f800283a 	ret
100024ec:	00c00044 	movi	r3,1
100024f0:	003ff406 	br	100024c4 <__alt_data_end+0xf80024c4>

100024f4 <__umodsi3>:
100024f4:	2005883a 	mov	r2,r4
100024f8:	2900122e 	bgeu	r5,r4,10002544 <__umodsi3+0x50>
100024fc:	28001116 	blt	r5,zero,10002544 <__umodsi3+0x50>
10002500:	01800804 	movi	r6,32
10002504:	00c00044 	movi	r3,1
10002508:	00000206 	br	10002514 <__umodsi3+0x20>
1000250c:	30000c26 	beq	r6,zero,10002540 <__umodsi3+0x4c>
10002510:	28000516 	blt	r5,zero,10002528 <__umodsi3+0x34>
10002514:	294b883a 	add	r5,r5,r5
10002518:	31bfffc4 	addi	r6,r6,-1
1000251c:	18c7883a 	add	r3,r3,r3
10002520:	293ffa36 	bltu	r5,r4,1000250c <__alt_data_end+0xf800250c>
10002524:	18000626 	beq	r3,zero,10002540 <__umodsi3+0x4c>
10002528:	1806d07a 	srli	r3,r3,1
1000252c:	11400136 	bltu	r2,r5,10002534 <__umodsi3+0x40>
10002530:	1145c83a 	sub	r2,r2,r5
10002534:	280ad07a 	srli	r5,r5,1
10002538:	183ffb1e 	bne	r3,zero,10002528 <__alt_data_end+0xf8002528>
1000253c:	f800283a 	ret
10002540:	f800283a 	ret
10002544:	00c00044 	movi	r3,1
10002548:	003ff706 	br	10002528 <__alt_data_end+0xf8002528>

1000254c <__addsf3>:
1000254c:	defffc04 	addi	sp,sp,-16
10002550:	2004d7fa 	srli	r2,r4,31
10002554:	280cd5fa 	srli	r6,r5,23
10002558:	dc000015 	stw	r16,0(sp)
1000255c:	00c02034 	movhi	r3,128
10002560:	2020d5fa 	srli	r16,r4,23
10002564:	280ed7fa 	srli	r7,r5,31
10002568:	18ffffc4 	addi	r3,r3,-1
1000256c:	dc400115 	stw	r17,4(sp)
10002570:	1908703a 	and	r4,r3,r4
10002574:	194a703a 	and	r5,r3,r5
10002578:	dfc00315 	stw	ra,12(sp)
1000257c:	dc800215 	stw	r18,8(sp)
10002580:	14403fcc 	andi	r17,r2,255
10002584:	84003fcc 	andi	r16,r16,255
10002588:	200890fa 	slli	r4,r4,3
1000258c:	31803fcc 	andi	r6,r6,255
10002590:	280a90fa 	slli	r5,r5,3
10002594:	89c05026 	beq	r17,r7,100026d8 <__addsf3+0x18c>
10002598:	8185c83a 	sub	r2,r16,r6
1000259c:	00807a0e 	bge	zero,r2,10002788 <__addsf3+0x23c>
100025a0:	30001e1e 	bne	r6,zero,1000261c <__addsf3+0xd0>
100025a4:	28006d1e 	bne	r5,zero,1000275c <__addsf3+0x210>
100025a8:	208001cc 	andi	r2,r4,7
100025ac:	10000426 	beq	r2,zero,100025c0 <__addsf3+0x74>
100025b0:	208003cc 	andi	r2,r4,15
100025b4:	00c00104 	movi	r3,4
100025b8:	10c00126 	beq	r2,r3,100025c0 <__addsf3+0x74>
100025bc:	20c9883a 	add	r4,r4,r3
100025c0:	2081002c 	andhi	r2,r4,1024
100025c4:	10003926 	beq	r2,zero,100026ac <__addsf3+0x160>
100025c8:	84000044 	addi	r16,r16,1
100025cc:	00803fc4 	movi	r2,255
100025d0:	80807826 	beq	r16,r2,100027b4 <__addsf3+0x268>
100025d4:	200891ba 	slli	r4,r4,6
100025d8:	8805883a 	mov	r2,r17
100025dc:	2008d27a 	srli	r4,r4,9
100025e0:	84003fcc 	andi	r16,r16,255
100025e4:	800695fa 	slli	r3,r16,23
100025e8:	10803fcc 	andi	r2,r2,255
100025ec:	04002034 	movhi	r16,128
100025f0:	843fffc4 	addi	r16,r16,-1
100025f4:	100497fa 	slli	r2,r2,31
100025f8:	2408703a 	and	r4,r4,r16
100025fc:	20e0b03a 	or	r16,r4,r3
10002600:	8084b03a 	or	r2,r16,r2
10002604:	dfc00317 	ldw	ra,12(sp)
10002608:	dc800217 	ldw	r18,8(sp)
1000260c:	dc400117 	ldw	r17,4(sp)
10002610:	dc000017 	ldw	r16,0(sp)
10002614:	dec00404 	addi	sp,sp,16
10002618:	f800283a 	ret
1000261c:	00c03fc4 	movi	r3,255
10002620:	80ffe126 	beq	r16,r3,100025a8 <__alt_data_end+0xf80025a8>
10002624:	29410034 	orhi	r5,r5,1024
10002628:	00c006c4 	movi	r3,27
1000262c:	18807516 	blt	r3,r2,10002804 <__addsf3+0x2b8>
10002630:	00c00804 	movi	r3,32
10002634:	1887c83a 	sub	r3,r3,r2
10002638:	28c6983a 	sll	r3,r5,r3
1000263c:	288ad83a 	srl	r5,r5,r2
10002640:	1804c03a 	cmpne	r2,r3,zero
10002644:	288ab03a 	or	r5,r5,r2
10002648:	2149c83a 	sub	r4,r4,r5
1000264c:	2081002c 	andhi	r2,r4,1024
10002650:	10001426 	beq	r2,zero,100026a4 <__addsf3+0x158>
10002654:	04810034 	movhi	r18,1024
10002658:	94bfffc4 	addi	r18,r18,-1
1000265c:	24a4703a 	and	r18,r4,r18
10002660:	9009883a 	mov	r4,r18
10002664:	00059a40 	call	100059a4 <__clzsi2>
10002668:	10bffec4 	addi	r2,r2,-5
1000266c:	90a4983a 	sll	r18,r18,r2
10002670:	14005416 	blt	r2,r16,100027c4 <__addsf3+0x278>
10002674:	1405c83a 	sub	r2,r2,r16
10002678:	11000044 	addi	r4,r2,1
1000267c:	00800804 	movi	r2,32
10002680:	1105c83a 	sub	r2,r2,r4
10002684:	9084983a 	sll	r2,r18,r2
10002688:	9124d83a 	srl	r18,r18,r4
1000268c:	0021883a 	mov	r16,zero
10002690:	1008c03a 	cmpne	r4,r2,zero
10002694:	9108b03a 	or	r4,r18,r4
10002698:	003fc306 	br	100025a8 <__alt_data_end+0xf80025a8>
1000269c:	1000db26 	beq	r2,zero,10002a0c <__addsf3+0x4c0>
100026a0:	1009883a 	mov	r4,r2
100026a4:	208001cc 	andi	r2,r4,7
100026a8:	103fc11e 	bne	r2,zero,100025b0 <__alt_data_end+0xf80025b0>
100026ac:	2006d0fa 	srli	r3,r4,3
100026b0:	01003fc4 	movi	r4,255
100026b4:	8805883a 	mov	r2,r17
100026b8:	8100241e 	bne	r16,r4,1000274c <__addsf3+0x200>
100026bc:	18006e26 	beq	r3,zero,10002878 <__addsf3+0x32c>
100026c0:	19001034 	orhi	r4,r3,64
100026c4:	00c02034 	movhi	r3,128
100026c8:	18ffffc4 	addi	r3,r3,-1
100026cc:	043fffc4 	movi	r16,-1
100026d0:	20c8703a 	and	r4,r4,r3
100026d4:	003fc206 	br	100025e0 <__alt_data_end+0xf80025e0>
100026d8:	8187c83a 	sub	r3,r16,r6
100026dc:	00c03e0e 	bge	zero,r3,100027d8 <__addsf3+0x28c>
100026e0:	30002326 	beq	r6,zero,10002770 <__addsf3+0x224>
100026e4:	01803fc4 	movi	r6,255
100026e8:	81bfaf26 	beq	r16,r6,100025a8 <__alt_data_end+0xf80025a8>
100026ec:	29410034 	orhi	r5,r5,1024
100026f0:	018006c4 	movi	r6,27
100026f4:	30c07416 	blt	r6,r3,100028c8 <__addsf3+0x37c>
100026f8:	01800804 	movi	r6,32
100026fc:	30cdc83a 	sub	r6,r6,r3
10002700:	298c983a 	sll	r6,r5,r6
10002704:	28cad83a 	srl	r5,r5,r3
10002708:	3006c03a 	cmpne	r3,r6,zero
1000270c:	28cab03a 	or	r5,r5,r3
10002710:	2149883a 	add	r4,r4,r5
10002714:	20c1002c 	andhi	r3,r4,1024
10002718:	183fe226 	beq	r3,zero,100026a4 <__alt_data_end+0xf80026a4>
1000271c:	84000044 	addi	r16,r16,1
10002720:	00c03fc4 	movi	r3,255
10002724:	80c05426 	beq	r16,r3,10002878 <__addsf3+0x32c>
10002728:	00bf0034 	movhi	r2,64512
1000272c:	10bfffc4 	addi	r2,r2,-1
10002730:	20c0004c 	andi	r3,r4,1
10002734:	2088703a 	and	r4,r4,r2
10002738:	2008d07a 	srli	r4,r4,1
1000273c:	20c8b03a 	or	r4,r4,r3
10002740:	003f9906 	br	100025a8 <__alt_data_end+0xf80025a8>
10002744:	0007883a 	mov	r3,zero
10002748:	0005883a 	mov	r2,zero
1000274c:	01002034 	movhi	r4,128
10002750:	213fffc4 	addi	r4,r4,-1
10002754:	1908703a 	and	r4,r3,r4
10002758:	003fa106 	br	100025e0 <__alt_data_end+0xf80025e0>
1000275c:	10bfffc4 	addi	r2,r2,-1
10002760:	103fb926 	beq	r2,zero,10002648 <__alt_data_end+0xf8002648>
10002764:	00c03fc4 	movi	r3,255
10002768:	80ffaf1e 	bne	r16,r3,10002628 <__alt_data_end+0xf8002628>
1000276c:	003f8e06 	br	100025a8 <__alt_data_end+0xf80025a8>
10002770:	283f8d26 	beq	r5,zero,100025a8 <__alt_data_end+0xf80025a8>
10002774:	18ffffc4 	addi	r3,r3,-1
10002778:	183fe526 	beq	r3,zero,10002710 <__alt_data_end+0xf8002710>
1000277c:	01803fc4 	movi	r6,255
10002780:	81bfdb1e 	bne	r16,r6,100026f0 <__alt_data_end+0xf80026f0>
10002784:	003f8806 	br	100025a8 <__alt_data_end+0xf80025a8>
10002788:	1000201e 	bne	r2,zero,1000280c <__addsf3+0x2c0>
1000278c:	80800044 	addi	r2,r16,1
10002790:	10803fcc 	andi	r2,r2,255
10002794:	01800044 	movi	r6,1
10002798:	3080450e 	bge	r6,r2,100028b0 <__addsf3+0x364>
1000279c:	2165c83a 	sub	r18,r4,r5
100027a0:	90c1002c 	andhi	r3,r18,1024
100027a4:	18002b26 	beq	r3,zero,10002854 <__addsf3+0x308>
100027a8:	2925c83a 	sub	r18,r5,r4
100027ac:	3823883a 	mov	r17,r7
100027b0:	003fab06 	br	10002660 <__alt_data_end+0xf8002660>
100027b4:	8805883a 	mov	r2,r17
100027b8:	043fffc4 	movi	r16,-1
100027bc:	0009883a 	mov	r4,zero
100027c0:	003f8706 	br	100025e0 <__alt_data_end+0xf80025e0>
100027c4:	013f0034 	movhi	r4,64512
100027c8:	213fffc4 	addi	r4,r4,-1
100027cc:	80a1c83a 	sub	r16,r16,r2
100027d0:	9108703a 	and	r4,r18,r4
100027d4:	003f7406 	br	100025a8 <__alt_data_end+0xf80025a8>
100027d8:	1800411e 	bne	r3,zero,100028e0 <__addsf3+0x394>
100027dc:	80c00044 	addi	r3,r16,1
100027e0:	19c03fcc 	andi	r7,r3,255
100027e4:	01800044 	movi	r6,1
100027e8:	31c0260e 	bge	r6,r7,10002884 <__addsf3+0x338>
100027ec:	01803fc4 	movi	r6,255
100027f0:	19802126 	beq	r3,r6,10002878 <__addsf3+0x32c>
100027f4:	2149883a 	add	r4,r4,r5
100027f8:	2008d07a 	srli	r4,r4,1
100027fc:	1821883a 	mov	r16,r3
10002800:	003f6906 	br	100025a8 <__alt_data_end+0xf80025a8>
10002804:	01400044 	movi	r5,1
10002808:	003f8f06 	br	10002648 <__alt_data_end+0xf8002648>
1000280c:	8000151e 	bne	r16,zero,10002864 <__addsf3+0x318>
10002810:	20002f26 	beq	r4,zero,100028d0 <__addsf3+0x384>
10002814:	0084303a 	nor	r2,zero,r2
10002818:	10000a26 	beq	r2,zero,10002844 <__addsf3+0x2f8>
1000281c:	00c03fc4 	movi	r3,255
10002820:	30c02b26 	beq	r6,r3,100028d0 <__addsf3+0x384>
10002824:	00c006c4 	movi	r3,27
10002828:	18806d16 	blt	r3,r2,100029e0 <__addsf3+0x494>
1000282c:	00c00804 	movi	r3,32
10002830:	1887c83a 	sub	r3,r3,r2
10002834:	20c6983a 	sll	r3,r4,r3
10002838:	2084d83a 	srl	r2,r4,r2
1000283c:	1808c03a 	cmpne	r4,r3,zero
10002840:	1108b03a 	or	r4,r2,r4
10002844:	2909c83a 	sub	r4,r5,r4
10002848:	3021883a 	mov	r16,r6
1000284c:	3823883a 	mov	r17,r7
10002850:	003f7e06 	br	1000264c <__alt_data_end+0xf800264c>
10002854:	903f821e 	bne	r18,zero,10002660 <__alt_data_end+0xf8002660>
10002858:	0005883a 	mov	r2,zero
1000285c:	0021883a 	mov	r16,zero
10002860:	003fba06 	br	1000274c <__alt_data_end+0xf800274c>
10002864:	00c03fc4 	movi	r3,255
10002868:	30c01926 	beq	r6,r3,100028d0 <__addsf3+0x384>
1000286c:	0085c83a 	sub	r2,zero,r2
10002870:	21010034 	orhi	r4,r4,1024
10002874:	003feb06 	br	10002824 <__alt_data_end+0xf8002824>
10002878:	043fffc4 	movi	r16,-1
1000287c:	0009883a 	mov	r4,zero
10002880:	003f5706 	br	100025e0 <__alt_data_end+0xf80025e0>
10002884:	80004a1e 	bne	r16,zero,100029b0 <__addsf3+0x464>
10002888:	20005926 	beq	r4,zero,100029f0 <__addsf3+0x4a4>
1000288c:	283f4626 	beq	r5,zero,100025a8 <__alt_data_end+0xf80025a8>
10002890:	2149883a 	add	r4,r4,r5
10002894:	2081002c 	andhi	r2,r4,1024
10002898:	103f8226 	beq	r2,zero,100026a4 <__alt_data_end+0xf80026a4>
1000289c:	00bf0034 	movhi	r2,64512
100028a0:	10bfffc4 	addi	r2,r2,-1
100028a4:	3021883a 	mov	r16,r6
100028a8:	2088703a 	and	r4,r4,r2
100028ac:	003f3e06 	br	100025a8 <__alt_data_end+0xf80025a8>
100028b0:	8000121e 	bne	r16,zero,100028fc <__addsf3+0x3b0>
100028b4:	2000261e 	bne	r4,zero,10002950 <__addsf3+0x404>
100028b8:	283fa226 	beq	r5,zero,10002744 <__alt_data_end+0xf8002744>
100028bc:	2809883a 	mov	r4,r5
100028c0:	3823883a 	mov	r17,r7
100028c4:	003f3806 	br	100025a8 <__alt_data_end+0xf80025a8>
100028c8:	01400044 	movi	r5,1
100028cc:	003f9006 	br	10002710 <__alt_data_end+0xf8002710>
100028d0:	2809883a 	mov	r4,r5
100028d4:	3021883a 	mov	r16,r6
100028d8:	3823883a 	mov	r17,r7
100028dc:	003f3206 	br	100025a8 <__alt_data_end+0xf80025a8>
100028e0:	80000c1e 	bne	r16,zero,10002914 <__addsf3+0x3c8>
100028e4:	20002f26 	beq	r4,zero,100029a4 <__addsf3+0x458>
100028e8:	00c6303a 	nor	r3,zero,r3
100028ec:	18002b1e 	bne	r3,zero,1000299c <__addsf3+0x450>
100028f0:	2149883a 	add	r4,r4,r5
100028f4:	3021883a 	mov	r16,r6
100028f8:	003f8606 	br	10002714 <__alt_data_end+0xf8002714>
100028fc:	20001b1e 	bne	r4,zero,1000296c <__addsf3+0x420>
10002900:	28003926 	beq	r5,zero,100029e8 <__addsf3+0x49c>
10002904:	2809883a 	mov	r4,r5
10002908:	3823883a 	mov	r17,r7
1000290c:	04003fc4 	movi	r16,255
10002910:	003f2506 	br	100025a8 <__alt_data_end+0xf80025a8>
10002914:	01c03fc4 	movi	r7,255
10002918:	31c02226 	beq	r6,r7,100029a4 <__addsf3+0x458>
1000291c:	00c7c83a 	sub	r3,zero,r3
10002920:	21010034 	orhi	r4,r4,1024
10002924:	01c006c4 	movi	r7,27
10002928:	38c03616 	blt	r7,r3,10002a04 <__addsf3+0x4b8>
1000292c:	01c00804 	movi	r7,32
10002930:	38cfc83a 	sub	r7,r7,r3
10002934:	21ce983a 	sll	r7,r4,r7
10002938:	20c6d83a 	srl	r3,r4,r3
1000293c:	3808c03a 	cmpne	r4,r7,zero
10002940:	1906b03a 	or	r3,r3,r4
10002944:	1949883a 	add	r4,r3,r5
10002948:	3021883a 	mov	r16,r6
1000294c:	003f7106 	br	10002714 <__alt_data_end+0xf8002714>
10002950:	283f1526 	beq	r5,zero,100025a8 <__alt_data_end+0xf80025a8>
10002954:	2145c83a 	sub	r2,r4,r5
10002958:	10c1002c 	andhi	r3,r2,1024
1000295c:	183f4f26 	beq	r3,zero,1000269c <__alt_data_end+0xf800269c>
10002960:	2909c83a 	sub	r4,r5,r4
10002964:	3823883a 	mov	r17,r7
10002968:	003f0f06 	br	100025a8 <__alt_data_end+0xf80025a8>
1000296c:	28001a26 	beq	r5,zero,100029d8 <__addsf3+0x48c>
10002970:	2008d0fa 	srli	r4,r4,3
10002974:	2080102c 	andhi	r2,r4,64
10002978:	10000526 	beq	r2,zero,10002990 <__addsf3+0x444>
1000297c:	280ad0fa 	srli	r5,r5,3
10002980:	2880102c 	andhi	r2,r5,64
10002984:	1000021e 	bne	r2,zero,10002990 <__addsf3+0x444>
10002988:	2809883a 	mov	r4,r5
1000298c:	3823883a 	mov	r17,r7
10002990:	200890fa 	slli	r4,r4,3
10002994:	04003fc4 	movi	r16,255
10002998:	003f0306 	br	100025a8 <__alt_data_end+0xf80025a8>
1000299c:	01c03fc4 	movi	r7,255
100029a0:	31ffe01e 	bne	r6,r7,10002924 <__alt_data_end+0xf8002924>
100029a4:	2809883a 	mov	r4,r5
100029a8:	3021883a 	mov	r16,r6
100029ac:	003efe06 	br	100025a8 <__alt_data_end+0xf80025a8>
100029b0:	20001126 	beq	r4,zero,100029f8 <__addsf3+0x4ac>
100029b4:	28000826 	beq	r5,zero,100029d8 <__addsf3+0x48c>
100029b8:	2008d0fa 	srli	r4,r4,3
100029bc:	2080102c 	andhi	r2,r4,64
100029c0:	103ff326 	beq	r2,zero,10002990 <__alt_data_end+0xf8002990>
100029c4:	280ad0fa 	srli	r5,r5,3
100029c8:	2880102c 	andhi	r2,r5,64
100029cc:	103ff01e 	bne	r2,zero,10002990 <__alt_data_end+0xf8002990>
100029d0:	2809883a 	mov	r4,r5
100029d4:	003fee06 	br	10002990 <__alt_data_end+0xf8002990>
100029d8:	04003fc4 	movi	r16,255
100029dc:	003ef206 	br	100025a8 <__alt_data_end+0xf80025a8>
100029e0:	01000044 	movi	r4,1
100029e4:	003f9706 	br	10002844 <__alt_data_end+0xf8002844>
100029e8:	0005883a 	mov	r2,zero
100029ec:	003f3406 	br	100026c0 <__alt_data_end+0xf80026c0>
100029f0:	2809883a 	mov	r4,r5
100029f4:	003eec06 	br	100025a8 <__alt_data_end+0xf80025a8>
100029f8:	2809883a 	mov	r4,r5
100029fc:	04003fc4 	movi	r16,255
10002a00:	003ee906 	br	100025a8 <__alt_data_end+0xf80025a8>
10002a04:	00c00044 	movi	r3,1
10002a08:	003fce06 	br	10002944 <__alt_data_end+0xf8002944>
10002a0c:	0005883a 	mov	r2,zero
10002a10:	003f4e06 	br	1000274c <__alt_data_end+0xf800274c>

10002a14 <__divsf3>:
10002a14:	defff504 	addi	sp,sp,-44
10002a18:	2004d5fa 	srli	r2,r4,23
10002a1c:	dcc00415 	stw	r19,16(sp)
10002a20:	2026d7fa 	srli	r19,r4,31
10002a24:	01c02034 	movhi	r7,128
10002a28:	dd800715 	stw	r22,28(sp)
10002a2c:	dd000515 	stw	r20,20(sp)
10002a30:	dc800315 	stw	r18,12(sp)
10002a34:	39ffffc4 	addi	r7,r7,-1
10002a38:	dfc00a15 	stw	ra,40(sp)
10002a3c:	df000915 	stw	fp,36(sp)
10002a40:	ddc00815 	stw	r23,32(sp)
10002a44:	dd400615 	stw	r21,24(sp)
10002a48:	dc400215 	stw	r17,8(sp)
10002a4c:	dc000115 	stw	r16,4(sp)
10002a50:	15003fcc 	andi	r20,r2,255
10002a54:	3924703a 	and	r18,r7,r4
10002a58:	9d803fcc 	andi	r22,r19,255
10002a5c:	a0005226 	beq	r20,zero,10002ba8 <__divsf3+0x194>
10002a60:	00803fc4 	movi	r2,255
10002a64:	a0802e26 	beq	r20,r2,10002b20 <__divsf3+0x10c>
10002a68:	91002034 	orhi	r4,r18,128
10002a6c:	202490fa 	slli	r18,r4,3
10002a70:	a53fe044 	addi	r20,r20,-127
10002a74:	0021883a 	mov	r16,zero
10002a78:	002f883a 	mov	r23,zero
10002a7c:	2804d5fa 	srli	r2,r5,23
10002a80:	282ad7fa 	srli	r21,r5,31
10002a84:	01c02034 	movhi	r7,128
10002a88:	39ffffc4 	addi	r7,r7,-1
10002a8c:	10803fcc 	andi	r2,r2,255
10002a90:	3962703a 	and	r17,r7,r5
10002a94:	af003fcc 	andi	fp,r21,255
10002a98:	10004a26 	beq	r2,zero,10002bc4 <__divsf3+0x1b0>
10002a9c:	00c03fc4 	movi	r3,255
10002aa0:	10c04526 	beq	r2,r3,10002bb8 <__divsf3+0x1a4>
10002aa4:	89402034 	orhi	r5,r17,128
10002aa8:	282290fa 	slli	r17,r5,3
10002aac:	10bfe044 	addi	r2,r2,-127
10002ab0:	000b883a 	mov	r5,zero
10002ab4:	2c20b03a 	or	r16,r5,r16
10002ab8:	802090ba 	slli	r16,r16,2
10002abc:	00c40034 	movhi	r3,4096
10002ac0:	18cab804 	addi	r3,r3,10976
10002ac4:	80e1883a 	add	r16,r16,r3
10002ac8:	80c00017 	ldw	r3,0(r16)
10002acc:	9d48f03a 	xor	r4,r19,r21
10002ad0:	200d883a 	mov	r6,r4
10002ad4:	22003fcc 	andi	r8,r4,255
10002ad8:	a085c83a 	sub	r2,r20,r2
10002adc:	1800683a 	jmp	r3
10002ae0:	10002cc4 	addi	zero,r2,179
10002ae4:	10002b48 	cmpgei	zero,r2,173
10002ae8:	10002cb8 	rdprs	zero,r2,178
10002aec:	10002b34 	orhi	zero,r2,172
10002af0:	10002cb8 	rdprs	zero,r2,178
10002af4:	10002c90 	cmplti	zero,r2,178
10002af8:	10002cb8 	rdprs	zero,r2,178
10002afc:	10002b34 	orhi	zero,r2,172
10002b00:	10002b48 	cmpgei	zero,r2,173
10002b04:	10002b48 	cmpgei	zero,r2,173
10002b08:	10002c90 	cmplti	zero,r2,178
10002b0c:	10002b34 	orhi	zero,r2,172
10002b10:	10002da4 	muli	zero,r2,182
10002b14:	10002da4 	muli	zero,r2,182
10002b18:	10002da4 	muli	zero,r2,182
10002b1c:	10002d58 	cmpnei	zero,r2,181
10002b20:	9000581e 	bne	r18,zero,10002c84 <__divsf3+0x270>
10002b24:	04000204 	movi	r16,8
10002b28:	05c00084 	movi	r23,2
10002b2c:	003fd306 	br	10002a7c <__alt_data_end+0xf8002a7c>
10002b30:	0023883a 	mov	r17,zero
10002b34:	e02d883a 	mov	r22,fp
10002b38:	282f883a 	mov	r23,r5
10002b3c:	00c00084 	movi	r3,2
10002b40:	b8c08f1e 	bne	r23,r3,10002d80 <__divsf3+0x36c>
10002b44:	b011883a 	mov	r8,r22
10002b48:	4180004c 	andi	r6,r8,1
10002b4c:	013fffc4 	movi	r4,-1
10002b50:	000f883a 	mov	r7,zero
10002b54:	21003fcc 	andi	r4,r4,255
10002b58:	200895fa 	slli	r4,r4,23
10002b5c:	30803fcc 	andi	r2,r6,255
10002b60:	00c02034 	movhi	r3,128
10002b64:	100497fa 	slli	r2,r2,31
10002b68:	18ffffc4 	addi	r3,r3,-1
10002b6c:	38c6703a 	and	r3,r7,r3
10002b70:	1906b03a 	or	r3,r3,r4
10002b74:	1884b03a 	or	r2,r3,r2
10002b78:	dfc00a17 	ldw	ra,40(sp)
10002b7c:	df000917 	ldw	fp,36(sp)
10002b80:	ddc00817 	ldw	r23,32(sp)
10002b84:	dd800717 	ldw	r22,28(sp)
10002b88:	dd400617 	ldw	r21,24(sp)
10002b8c:	dd000517 	ldw	r20,20(sp)
10002b90:	dcc00417 	ldw	r19,16(sp)
10002b94:	dc800317 	ldw	r18,12(sp)
10002b98:	dc400217 	ldw	r17,8(sp)
10002b9c:	dc000117 	ldw	r16,4(sp)
10002ba0:	dec00b04 	addi	sp,sp,44
10002ba4:	f800283a 	ret
10002ba8:	90002b1e 	bne	r18,zero,10002c58 <__divsf3+0x244>
10002bac:	04000104 	movi	r16,4
10002bb0:	05c00044 	movi	r23,1
10002bb4:	003fb106 	br	10002a7c <__alt_data_end+0xf8002a7c>
10002bb8:	8800251e 	bne	r17,zero,10002c50 <__divsf3+0x23c>
10002bbc:	01400084 	movi	r5,2
10002bc0:	00000206 	br	10002bcc <__divsf3+0x1b8>
10002bc4:	88001a1e 	bne	r17,zero,10002c30 <__divsf3+0x21c>
10002bc8:	01400044 	movi	r5,1
10002bcc:	8160b03a 	or	r16,r16,r5
10002bd0:	802090ba 	slli	r16,r16,2
10002bd4:	00c40034 	movhi	r3,4096
10002bd8:	18cafc04 	addi	r3,r3,11248
10002bdc:	80e1883a 	add	r16,r16,r3
10002be0:	80c00017 	ldw	r3,0(r16)
10002be4:	9d50f03a 	xor	r8,r19,r21
10002be8:	a085c83a 	sub	r2,r20,r2
10002bec:	1800683a 	jmp	r3
10002bf0:	10002b48 	cmpgei	zero,r2,173
10002bf4:	10002b48 	cmpgei	zero,r2,173
10002bf8:	10002d94 	ori	zero,r2,182
10002bfc:	10002b30 	cmpltui	zero,r2,172
10002c00:	10002d94 	ori	zero,r2,182
10002c04:	10002c90 	cmplti	zero,r2,178
10002c08:	10002d94 	ori	zero,r2,182
10002c0c:	10002b30 	cmpltui	zero,r2,172
10002c10:	10002b48 	cmpgei	zero,r2,173
10002c14:	10002b48 	cmpgei	zero,r2,173
10002c18:	10002c90 	cmplti	zero,r2,178
10002c1c:	10002b30 	cmpltui	zero,r2,172
10002c20:	10002da4 	muli	zero,r2,182
10002c24:	10002da4 	muli	zero,r2,182
10002c28:	10002da4 	muli	zero,r2,182
10002c2c:	10002dbc 	xorhi	zero,r2,182
10002c30:	8809883a 	mov	r4,r17
10002c34:	00059a40 	call	100059a4 <__clzsi2>
10002c38:	10fffec4 	addi	r3,r2,-5
10002c3c:	88e2983a 	sll	r17,r17,r3
10002c40:	00ffe284 	movi	r3,-118
10002c44:	1885c83a 	sub	r2,r3,r2
10002c48:	000b883a 	mov	r5,zero
10002c4c:	003f9906 	br	10002ab4 <__alt_data_end+0xf8002ab4>
10002c50:	014000c4 	movi	r5,3
10002c54:	003f9706 	br	10002ab4 <__alt_data_end+0xf8002ab4>
10002c58:	9009883a 	mov	r4,r18
10002c5c:	d9400015 	stw	r5,0(sp)
10002c60:	00059a40 	call	100059a4 <__clzsi2>
10002c64:	10fffec4 	addi	r3,r2,-5
10002c68:	053fe284 	movi	r20,-118
10002c6c:	90e4983a 	sll	r18,r18,r3
10002c70:	a0a9c83a 	sub	r20,r20,r2
10002c74:	0021883a 	mov	r16,zero
10002c78:	002f883a 	mov	r23,zero
10002c7c:	d9400017 	ldw	r5,0(sp)
10002c80:	003f7e06 	br	10002a7c <__alt_data_end+0xf8002a7c>
10002c84:	04000304 	movi	r16,12
10002c88:	05c000c4 	movi	r23,3
10002c8c:	003f7b06 	br	10002a7c <__alt_data_end+0xf8002a7c>
10002c90:	01c02034 	movhi	r7,128
10002c94:	000d883a 	mov	r6,zero
10002c98:	39ffffc4 	addi	r7,r7,-1
10002c9c:	013fffc4 	movi	r4,-1
10002ca0:	003fac06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002ca4:	01400044 	movi	r5,1
10002ca8:	2909c83a 	sub	r4,r5,r4
10002cac:	008006c4 	movi	r2,27
10002cb0:	11004b0e 	bge	r2,r4,10002de0 <__divsf3+0x3cc>
10002cb4:	414c703a 	and	r6,r8,r5
10002cb8:	0009883a 	mov	r4,zero
10002cbc:	000f883a 	mov	r7,zero
10002cc0:	003fa406 	br	10002b54 <__alt_data_end+0xf8002b54>
10002cc4:	9006917a 	slli	r3,r18,5
10002cc8:	880e917a 	slli	r7,r17,5
10002ccc:	19c0372e 	bgeu	r3,r7,10002dac <__divsf3+0x398>
10002cd0:	10bfffc4 	addi	r2,r2,-1
10002cd4:	010006c4 	movi	r4,27
10002cd8:	000b883a 	mov	r5,zero
10002cdc:	180d883a 	mov	r6,r3
10002ce0:	294b883a 	add	r5,r5,r5
10002ce4:	18c7883a 	add	r3,r3,r3
10002ce8:	30000116 	blt	r6,zero,10002cf0 <__divsf3+0x2dc>
10002cec:	19c00236 	bltu	r3,r7,10002cf8 <__divsf3+0x2e4>
10002cf0:	19c7c83a 	sub	r3,r3,r7
10002cf4:	29400054 	ori	r5,r5,1
10002cf8:	213fffc4 	addi	r4,r4,-1
10002cfc:	203ff71e 	bne	r4,zero,10002cdc <__alt_data_end+0xf8002cdc>
10002d00:	1806c03a 	cmpne	r3,r3,zero
10002d04:	1962b03a 	or	r17,r3,r5
10002d08:	11001fc4 	addi	r4,r2,127
10002d0c:	013fe50e 	bge	zero,r4,10002ca4 <__alt_data_end+0xf8002ca4>
10002d10:	88c001cc 	andi	r3,r17,7
10002d14:	18000426 	beq	r3,zero,10002d28 <__divsf3+0x314>
10002d18:	88c003cc 	andi	r3,r17,15
10002d1c:	01400104 	movi	r5,4
10002d20:	19400126 	beq	r3,r5,10002d28 <__divsf3+0x314>
10002d24:	8963883a 	add	r17,r17,r5
10002d28:	88c2002c 	andhi	r3,r17,2048
10002d2c:	18000426 	beq	r3,zero,10002d40 <__divsf3+0x32c>
10002d30:	11002004 	addi	r4,r2,128
10002d34:	00be0034 	movhi	r2,63488
10002d38:	10bfffc4 	addi	r2,r2,-1
10002d3c:	88a2703a 	and	r17,r17,r2
10002d40:	00803f84 	movi	r2,254
10002d44:	113f8016 	blt	r2,r4,10002b48 <__alt_data_end+0xf8002b48>
10002d48:	880e91ba 	slli	r7,r17,6
10002d4c:	4180004c 	andi	r6,r8,1
10002d50:	380ed27a 	srli	r7,r7,9
10002d54:	003f7f06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002d58:	9080102c 	andhi	r2,r18,64
10002d5c:	10000226 	beq	r2,zero,10002d68 <__divsf3+0x354>
10002d60:	8880102c 	andhi	r2,r17,64
10002d64:	10001826 	beq	r2,zero,10002dc8 <__divsf3+0x3b4>
10002d68:	00802034 	movhi	r2,128
10002d6c:	91c01034 	orhi	r7,r18,64
10002d70:	10bfffc4 	addi	r2,r2,-1
10002d74:	980d883a 	mov	r6,r19
10002d78:	388e703a 	and	r7,r7,r2
10002d7c:	003fc706 	br	10002c9c <__alt_data_end+0xf8002c9c>
10002d80:	00c000c4 	movi	r3,3
10002d84:	b8c02d26 	beq	r23,r3,10002e3c <__divsf3+0x428>
10002d88:	00c00044 	movi	r3,1
10002d8c:	b011883a 	mov	r8,r22
10002d90:	b8ffdd1e 	bne	r23,r3,10002d08 <__alt_data_end+0xf8002d08>
10002d94:	4180004c 	andi	r6,r8,1
10002d98:	0009883a 	mov	r4,zero
10002d9c:	000f883a 	mov	r7,zero
10002da0:	003f6c06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002da4:	9023883a 	mov	r17,r18
10002da8:	003f6406 	br	10002b3c <__alt_data_end+0xf8002b3c>
10002dac:	19c7c83a 	sub	r3,r3,r7
10002db0:	01000684 	movi	r4,26
10002db4:	01400044 	movi	r5,1
10002db8:	003fc806 	br	10002cdc <__alt_data_end+0xf8002cdc>
10002dbc:	9080102c 	andhi	r2,r18,64
10002dc0:	103fe926 	beq	r2,zero,10002d68 <__alt_data_end+0xf8002d68>
10002dc4:	0023883a 	mov	r17,zero
10002dc8:	00802034 	movhi	r2,128
10002dcc:	89c01034 	orhi	r7,r17,64
10002dd0:	10bfffc4 	addi	r2,r2,-1
10002dd4:	a80d883a 	mov	r6,r21
10002dd8:	388e703a 	and	r7,r7,r2
10002ddc:	003faf06 	br	10002c9c <__alt_data_end+0xf8002c9c>
10002de0:	00800804 	movi	r2,32
10002de4:	1105c83a 	sub	r2,r2,r4
10002de8:	8884983a 	sll	r2,r17,r2
10002dec:	890ad83a 	srl	r5,r17,r4
10002df0:	1004c03a 	cmpne	r2,r2,zero
10002df4:	288ab03a 	or	r5,r5,r2
10002df8:	288001cc 	andi	r2,r5,7
10002dfc:	10000426 	beq	r2,zero,10002e10 <__divsf3+0x3fc>
10002e00:	288003cc 	andi	r2,r5,15
10002e04:	00c00104 	movi	r3,4
10002e08:	10c00126 	beq	r2,r3,10002e10 <__divsf3+0x3fc>
10002e0c:	28cb883a 	add	r5,r5,r3
10002e10:	2881002c 	andhi	r2,r5,1024
10002e14:	10000426 	beq	r2,zero,10002e28 <__divsf3+0x414>
10002e18:	4180004c 	andi	r6,r8,1
10002e1c:	01000044 	movi	r4,1
10002e20:	000f883a 	mov	r7,zero
10002e24:	003f4b06 	br	10002b54 <__alt_data_end+0xf8002b54>
10002e28:	280a91ba 	slli	r5,r5,6
10002e2c:	4180004c 	andi	r6,r8,1
10002e30:	0009883a 	mov	r4,zero
10002e34:	280ed27a 	srli	r7,r5,9
10002e38:	003f4606 	br	10002b54 <__alt_data_end+0xf8002b54>
10002e3c:	00802034 	movhi	r2,128
10002e40:	89c01034 	orhi	r7,r17,64
10002e44:	10bfffc4 	addi	r2,r2,-1
10002e48:	b00d883a 	mov	r6,r22
10002e4c:	388e703a 	and	r7,r7,r2
10002e50:	003f9206 	br	10002c9c <__alt_data_end+0xf8002c9c>

10002e54 <__eqsf2>:
10002e54:	2006d5fa 	srli	r3,r4,23
10002e58:	280cd5fa 	srli	r6,r5,23
10002e5c:	01c02034 	movhi	r7,128
10002e60:	39ffffc4 	addi	r7,r7,-1
10002e64:	18c03fcc 	andi	r3,r3,255
10002e68:	02003fc4 	movi	r8,255
10002e6c:	3904703a 	and	r2,r7,r4
10002e70:	31803fcc 	andi	r6,r6,255
10002e74:	394e703a 	and	r7,r7,r5
10002e78:	2008d7fa 	srli	r4,r4,31
10002e7c:	280ad7fa 	srli	r5,r5,31
10002e80:	1a000d26 	beq	r3,r8,10002eb8 <__eqsf2+0x64>
10002e84:	02003fc4 	movi	r8,255
10002e88:	32000826 	beq	r6,r8,10002eac <__eqsf2+0x58>
10002e8c:	19800226 	beq	r3,r6,10002e98 <__eqsf2+0x44>
10002e90:	00800044 	movi	r2,1
10002e94:	f800283a 	ret
10002e98:	11fffd1e 	bne	r2,r7,10002e90 <__alt_data_end+0xf8002e90>
10002e9c:	21400926 	beq	r4,r5,10002ec4 <__eqsf2+0x70>
10002ea0:	183ffb1e 	bne	r3,zero,10002e90 <__alt_data_end+0xf8002e90>
10002ea4:	1004c03a 	cmpne	r2,r2,zero
10002ea8:	f800283a 	ret
10002eac:	383ff726 	beq	r7,zero,10002e8c <__alt_data_end+0xf8002e8c>
10002eb0:	00800044 	movi	r2,1
10002eb4:	f800283a 	ret
10002eb8:	103ff226 	beq	r2,zero,10002e84 <__alt_data_end+0xf8002e84>
10002ebc:	00800044 	movi	r2,1
10002ec0:	f800283a 	ret
10002ec4:	0005883a 	mov	r2,zero
10002ec8:	f800283a 	ret

10002ecc <__gesf2>:
10002ecc:	2004d5fa 	srli	r2,r4,23
10002ed0:	2806d5fa 	srli	r3,r5,23
10002ed4:	01802034 	movhi	r6,128
10002ed8:	31bfffc4 	addi	r6,r6,-1
10002edc:	10803fcc 	andi	r2,r2,255
10002ee0:	01c03fc4 	movi	r7,255
10002ee4:	3110703a 	and	r8,r6,r4
10002ee8:	18c03fcc 	andi	r3,r3,255
10002eec:	314c703a 	and	r6,r6,r5
10002ef0:	2008d7fa 	srli	r4,r4,31
10002ef4:	280ad7fa 	srli	r5,r5,31
10002ef8:	11c01926 	beq	r2,r7,10002f60 <__gesf2+0x94>
10002efc:	01c03fc4 	movi	r7,255
10002f00:	19c00f26 	beq	r3,r7,10002f40 <__gesf2+0x74>
10002f04:	1000061e 	bne	r2,zero,10002f20 <__gesf2+0x54>
10002f08:	400f003a 	cmpeq	r7,r8,zero
10002f0c:	1800071e 	bne	r3,zero,10002f2c <__gesf2+0x60>
10002f10:	3000061e 	bne	r6,zero,10002f2c <__gesf2+0x60>
10002f14:	0005883a 	mov	r2,zero
10002f18:	40000e1e 	bne	r8,zero,10002f54 <__gesf2+0x88>
10002f1c:	f800283a 	ret
10002f20:	18000a1e 	bne	r3,zero,10002f4c <__gesf2+0x80>
10002f24:	30000b26 	beq	r6,zero,10002f54 <__gesf2+0x88>
10002f28:	000f883a 	mov	r7,zero
10002f2c:	29403fcc 	andi	r5,r5,255
10002f30:	38000726 	beq	r7,zero,10002f50 <__gesf2+0x84>
10002f34:	28000826 	beq	r5,zero,10002f58 <__gesf2+0x8c>
10002f38:	00800044 	movi	r2,1
10002f3c:	f800283a 	ret
10002f40:	303ff026 	beq	r6,zero,10002f04 <__alt_data_end+0xf8002f04>
10002f44:	00bfff84 	movi	r2,-2
10002f48:	f800283a 	ret
10002f4c:	29403fcc 	andi	r5,r5,255
10002f50:	21400526 	beq	r4,r5,10002f68 <__gesf2+0x9c>
10002f54:	203ff826 	beq	r4,zero,10002f38 <__alt_data_end+0xf8002f38>
10002f58:	00bfffc4 	movi	r2,-1
10002f5c:	f800283a 	ret
10002f60:	403fe626 	beq	r8,zero,10002efc <__alt_data_end+0xf8002efc>
10002f64:	003ff706 	br	10002f44 <__alt_data_end+0xf8002f44>
10002f68:	18bffa16 	blt	r3,r2,10002f54 <__alt_data_end+0xf8002f54>
10002f6c:	10c00216 	blt	r2,r3,10002f78 <__gesf2+0xac>
10002f70:	323ff836 	bltu	r6,r8,10002f54 <__alt_data_end+0xf8002f54>
10002f74:	4180022e 	bgeu	r8,r6,10002f80 <__gesf2+0xb4>
10002f78:	203fef1e 	bne	r4,zero,10002f38 <__alt_data_end+0xf8002f38>
10002f7c:	003ff606 	br	10002f58 <__alt_data_end+0xf8002f58>
10002f80:	0005883a 	mov	r2,zero
10002f84:	f800283a 	ret

10002f88 <__lesf2>:
10002f88:	2004d5fa 	srli	r2,r4,23
10002f8c:	280cd5fa 	srli	r6,r5,23
10002f90:	00c02034 	movhi	r3,128
10002f94:	18ffffc4 	addi	r3,r3,-1
10002f98:	10803fcc 	andi	r2,r2,255
10002f9c:	01c03fc4 	movi	r7,255
10002fa0:	1910703a 	and	r8,r3,r4
10002fa4:	31803fcc 	andi	r6,r6,255
10002fa8:	1946703a 	and	r3,r3,r5
10002fac:	2008d7fa 	srli	r4,r4,31
10002fb0:	280ad7fa 	srli	r5,r5,31
10002fb4:	11c01b26 	beq	r2,r7,10003024 <__lesf2+0x9c>
10002fb8:	01c03fc4 	movi	r7,255
10002fbc:	31c01126 	beq	r6,r7,10003004 <__lesf2+0x7c>
10002fc0:	1000071e 	bne	r2,zero,10002fe0 <__lesf2+0x58>
10002fc4:	400f003a 	cmpeq	r7,r8,zero
10002fc8:	21003fcc 	andi	r4,r4,255
10002fcc:	3000081e 	bne	r6,zero,10002ff0 <__lesf2+0x68>
10002fd0:	1800071e 	bne	r3,zero,10002ff0 <__lesf2+0x68>
10002fd4:	0005883a 	mov	r2,zero
10002fd8:	40000f1e 	bne	r8,zero,10003018 <__lesf2+0x90>
10002fdc:	f800283a 	ret
10002fe0:	21003fcc 	andi	r4,r4,255
10002fe4:	30000a1e 	bne	r6,zero,10003010 <__lesf2+0x88>
10002fe8:	18000b26 	beq	r3,zero,10003018 <__lesf2+0x90>
10002fec:	000f883a 	mov	r7,zero
10002ff0:	29403fcc 	andi	r5,r5,255
10002ff4:	38000726 	beq	r7,zero,10003014 <__lesf2+0x8c>
10002ff8:	28000826 	beq	r5,zero,1000301c <__lesf2+0x94>
10002ffc:	00800044 	movi	r2,1
10003000:	f800283a 	ret
10003004:	183fee26 	beq	r3,zero,10002fc0 <__alt_data_end+0xf8002fc0>
10003008:	00800084 	movi	r2,2
1000300c:	f800283a 	ret
10003010:	29403fcc 	andi	r5,r5,255
10003014:	21400626 	beq	r4,r5,10003030 <__lesf2+0xa8>
10003018:	203ff826 	beq	r4,zero,10002ffc <__alt_data_end+0xf8002ffc>
1000301c:	00bfffc4 	movi	r2,-1
10003020:	f800283a 	ret
10003024:	403fe426 	beq	r8,zero,10002fb8 <__alt_data_end+0xf8002fb8>
10003028:	00800084 	movi	r2,2
1000302c:	f800283a 	ret
10003030:	30bff916 	blt	r6,r2,10003018 <__alt_data_end+0xf8003018>
10003034:	11800216 	blt	r2,r6,10003040 <__lesf2+0xb8>
10003038:	1a3ff736 	bltu	r3,r8,10003018 <__alt_data_end+0xf8003018>
1000303c:	40c0022e 	bgeu	r8,r3,10003048 <__lesf2+0xc0>
10003040:	203fee1e 	bne	r4,zero,10002ffc <__alt_data_end+0xf8002ffc>
10003044:	003ff506 	br	1000301c <__alt_data_end+0xf800301c>
10003048:	0005883a 	mov	r2,zero
1000304c:	f800283a 	ret

10003050 <__mulsf3>:
10003050:	defff504 	addi	sp,sp,-44
10003054:	dc000115 	stw	r16,4(sp)
10003058:	2020d5fa 	srli	r16,r4,23
1000305c:	dd400615 	stw	r21,24(sp)
10003060:	202ad7fa 	srli	r21,r4,31
10003064:	dc800315 	stw	r18,12(sp)
10003068:	04802034 	movhi	r18,128
1000306c:	df000915 	stw	fp,36(sp)
10003070:	dd000515 	stw	r20,20(sp)
10003074:	94bfffc4 	addi	r18,r18,-1
10003078:	dfc00a15 	stw	ra,40(sp)
1000307c:	ddc00815 	stw	r23,32(sp)
10003080:	dd800715 	stw	r22,28(sp)
10003084:	dcc00415 	stw	r19,16(sp)
10003088:	dc400215 	stw	r17,8(sp)
1000308c:	84003fcc 	andi	r16,r16,255
10003090:	9124703a 	and	r18,r18,r4
10003094:	a829883a 	mov	r20,r21
10003098:	af003fcc 	andi	fp,r21,255
1000309c:	80005426 	beq	r16,zero,100031f0 <__mulsf3+0x1a0>
100030a0:	00803fc4 	movi	r2,255
100030a4:	80802f26 	beq	r16,r2,10003164 <__mulsf3+0x114>
100030a8:	91002034 	orhi	r4,r18,128
100030ac:	202490fa 	slli	r18,r4,3
100030b0:	843fe044 	addi	r16,r16,-127
100030b4:	0023883a 	mov	r17,zero
100030b8:	002f883a 	mov	r23,zero
100030bc:	2804d5fa 	srli	r2,r5,23
100030c0:	282cd7fa 	srli	r22,r5,31
100030c4:	01002034 	movhi	r4,128
100030c8:	213fffc4 	addi	r4,r4,-1
100030cc:	10803fcc 	andi	r2,r2,255
100030d0:	2166703a 	and	r19,r4,r5
100030d4:	b1803fcc 	andi	r6,r22,255
100030d8:	10004c26 	beq	r2,zero,1000320c <__mulsf3+0x1bc>
100030dc:	00c03fc4 	movi	r3,255
100030e0:	10c04726 	beq	r2,r3,10003200 <__mulsf3+0x1b0>
100030e4:	99002034 	orhi	r4,r19,128
100030e8:	202690fa 	slli	r19,r4,3
100030ec:	10bfe044 	addi	r2,r2,-127
100030f0:	0007883a 	mov	r3,zero
100030f4:	80a1883a 	add	r16,r16,r2
100030f8:	010003c4 	movi	r4,15
100030fc:	1c44b03a 	or	r2,r3,r17
10003100:	b56af03a 	xor	r21,r22,r21
10003104:	81c00044 	addi	r7,r16,1
10003108:	20806b36 	bltu	r4,r2,100032b8 <__mulsf3+0x268>
1000310c:	100490ba 	slli	r2,r2,2
10003110:	01040034 	movhi	r4,4096
10003114:	210c4904 	addi	r4,r4,12580
10003118:	1105883a 	add	r2,r2,r4
1000311c:	10800017 	ldw	r2,0(r2)
10003120:	1000683a 	jmp	r2
10003124:	100032b8 	rdprs	zero,r2,202
10003128:	10003178 	rdprs	zero,r2,197
1000312c:	10003178 	rdprs	zero,r2,197
10003130:	10003174 	orhi	zero,r2,197
10003134:	1000329c 	xori	zero,r2,202
10003138:	1000329c 	xori	zero,r2,202
1000313c:	10003288 	cmpgei	zero,r2,202
10003140:	10003174 	orhi	zero,r2,197
10003144:	1000329c 	xori	zero,r2,202
10003148:	10003288 	cmpgei	zero,r2,202
1000314c:	1000329c 	xori	zero,r2,202
10003150:	10003174 	orhi	zero,r2,197
10003154:	100032a8 	cmpgeui	zero,r2,202
10003158:	100032a8 	cmpgeui	zero,r2,202
1000315c:	100032a8 	cmpgeui	zero,r2,202
10003160:	100033b8 	rdprs	zero,r2,206
10003164:	90003b1e 	bne	r18,zero,10003254 <__mulsf3+0x204>
10003168:	04400204 	movi	r17,8
1000316c:	05c00084 	movi	r23,2
10003170:	003fd206 	br	100030bc <__alt_data_end+0xf80030bc>
10003174:	302b883a 	mov	r21,r6
10003178:	00800084 	movi	r2,2
1000317c:	18802626 	beq	r3,r2,10003218 <__mulsf3+0x1c8>
10003180:	008000c4 	movi	r2,3
10003184:	1880b826 	beq	r3,r2,10003468 <__mulsf3+0x418>
10003188:	00800044 	movi	r2,1
1000318c:	1880af1e 	bne	r3,r2,1000344c <__mulsf3+0x3fc>
10003190:	a829883a 	mov	r20,r21
10003194:	0007883a 	mov	r3,zero
10003198:	0009883a 	mov	r4,zero
1000319c:	18803fcc 	andi	r2,r3,255
100031a0:	100695fa 	slli	r3,r2,23
100031a4:	a0803fcc 	andi	r2,r20,255
100031a8:	100a97fa 	slli	r5,r2,31
100031ac:	00802034 	movhi	r2,128
100031b0:	10bfffc4 	addi	r2,r2,-1
100031b4:	2084703a 	and	r2,r4,r2
100031b8:	10c4b03a 	or	r2,r2,r3
100031bc:	1144b03a 	or	r2,r2,r5
100031c0:	dfc00a17 	ldw	ra,40(sp)
100031c4:	df000917 	ldw	fp,36(sp)
100031c8:	ddc00817 	ldw	r23,32(sp)
100031cc:	dd800717 	ldw	r22,28(sp)
100031d0:	dd400617 	ldw	r21,24(sp)
100031d4:	dd000517 	ldw	r20,20(sp)
100031d8:	dcc00417 	ldw	r19,16(sp)
100031dc:	dc800317 	ldw	r18,12(sp)
100031e0:	dc400217 	ldw	r17,8(sp)
100031e4:	dc000117 	ldw	r16,4(sp)
100031e8:	dec00b04 	addi	sp,sp,44
100031ec:	f800283a 	ret
100031f0:	90000d1e 	bne	r18,zero,10003228 <__mulsf3+0x1d8>
100031f4:	04400104 	movi	r17,4
100031f8:	05c00044 	movi	r23,1
100031fc:	003faf06 	br	100030bc <__alt_data_end+0xf80030bc>
10003200:	9806c03a 	cmpne	r3,r19,zero
10003204:	18c00084 	addi	r3,r3,2
10003208:	003fba06 	br	100030f4 <__alt_data_end+0xf80030f4>
1000320c:	9800141e 	bne	r19,zero,10003260 <__mulsf3+0x210>
10003210:	00c00044 	movi	r3,1
10003214:	003fb706 	br	100030f4 <__alt_data_end+0xf80030f4>
10003218:	a829883a 	mov	r20,r21
1000321c:	00ffffc4 	movi	r3,-1
10003220:	0009883a 	mov	r4,zero
10003224:	003fdd06 	br	1000319c <__alt_data_end+0xf800319c>
10003228:	9009883a 	mov	r4,r18
1000322c:	d9400015 	stw	r5,0(sp)
10003230:	00059a40 	call	100059a4 <__clzsi2>
10003234:	10fffec4 	addi	r3,r2,-5
10003238:	043fe284 	movi	r16,-118
1000323c:	90e4983a 	sll	r18,r18,r3
10003240:	80a1c83a 	sub	r16,r16,r2
10003244:	0023883a 	mov	r17,zero
10003248:	002f883a 	mov	r23,zero
1000324c:	d9400017 	ldw	r5,0(sp)
10003250:	003f9a06 	br	100030bc <__alt_data_end+0xf80030bc>
10003254:	04400304 	movi	r17,12
10003258:	05c000c4 	movi	r23,3
1000325c:	003f9706 	br	100030bc <__alt_data_end+0xf80030bc>
10003260:	9809883a 	mov	r4,r19
10003264:	d9800015 	stw	r6,0(sp)
10003268:	00059a40 	call	100059a4 <__clzsi2>
1000326c:	10fffec4 	addi	r3,r2,-5
10003270:	98e6983a 	sll	r19,r19,r3
10003274:	00ffe284 	movi	r3,-118
10003278:	1885c83a 	sub	r2,r3,r2
1000327c:	d9800017 	ldw	r6,0(sp)
10003280:	0007883a 	mov	r3,zero
10003284:	003f9b06 	br	100030f4 <__alt_data_end+0xf80030f4>
10003288:	01002034 	movhi	r4,128
1000328c:	0029883a 	mov	r20,zero
10003290:	213fffc4 	addi	r4,r4,-1
10003294:	00ffffc4 	movi	r3,-1
10003298:	003fc006 	br	1000319c <__alt_data_end+0xf800319c>
1000329c:	9027883a 	mov	r19,r18
100032a0:	b807883a 	mov	r3,r23
100032a4:	003fb406 	br	10003178 <__alt_data_end+0xf8003178>
100032a8:	9027883a 	mov	r19,r18
100032ac:	e02b883a 	mov	r21,fp
100032b0:	b807883a 	mov	r3,r23
100032b4:	003fb006 	br	10003178 <__alt_data_end+0xf8003178>
100032b8:	9028d43a 	srli	r20,r18,16
100032bc:	982cd43a 	srli	r22,r19,16
100032c0:	94bfffcc 	andi	r18,r18,65535
100032c4:	9cffffcc 	andi	r19,r19,65535
100032c8:	980b883a 	mov	r5,r19
100032cc:	9009883a 	mov	r4,r18
100032d0:	d9c00015 	stw	r7,0(sp)
100032d4:	0005a080 	call	10005a08 <__mulsi3>
100032d8:	a00b883a 	mov	r5,r20
100032dc:	9809883a 	mov	r4,r19
100032e0:	1023883a 	mov	r17,r2
100032e4:	0005a080 	call	10005a08 <__mulsi3>
100032e8:	a009883a 	mov	r4,r20
100032ec:	b00b883a 	mov	r5,r22
100032f0:	1027883a 	mov	r19,r2
100032f4:	0005a080 	call	10005a08 <__mulsi3>
100032f8:	b00b883a 	mov	r5,r22
100032fc:	9009883a 	mov	r4,r18
10003300:	1029883a 	mov	r20,r2
10003304:	0005a080 	call	10005a08 <__mulsi3>
10003308:	8806d43a 	srli	r3,r17,16
1000330c:	14c5883a 	add	r2,r2,r19
10003310:	d9c00017 	ldw	r7,0(sp)
10003314:	1885883a 	add	r2,r3,r2
10003318:	14c0022e 	bgeu	r2,r19,10003324 <__mulsf3+0x2d4>
1000331c:	00c00074 	movhi	r3,1
10003320:	a0e9883a 	add	r20,r20,r3
10003324:	1026943a 	slli	r19,r2,16
10003328:	8c7fffcc 	andi	r17,r17,65535
1000332c:	1004d43a 	srli	r2,r2,16
10003330:	9c63883a 	add	r17,r19,r17
10003334:	882691ba 	slli	r19,r17,6
10003338:	1505883a 	add	r2,r2,r20
1000333c:	8822d6ba 	srli	r17,r17,26
10003340:	100891ba 	slli	r4,r2,6
10003344:	9826c03a 	cmpne	r19,r19,zero
10003348:	9c62b03a 	or	r17,r19,r17
1000334c:	8926b03a 	or	r19,r17,r4
10003350:	9882002c 	andhi	r2,r19,2048
10003354:	10000426 	beq	r2,zero,10003368 <__mulsf3+0x318>
10003358:	9804d07a 	srli	r2,r19,1
1000335c:	9900004c 	andi	r4,r19,1
10003360:	3821883a 	mov	r16,r7
10003364:	1126b03a 	or	r19,r2,r4
10003368:	80c01fc4 	addi	r3,r16,127
1000336c:	00c0210e 	bge	zero,r3,100033f4 <__mulsf3+0x3a4>
10003370:	988001cc 	andi	r2,r19,7
10003374:	10000426 	beq	r2,zero,10003388 <__mulsf3+0x338>
10003378:	988003cc 	andi	r2,r19,15
1000337c:	01000104 	movi	r4,4
10003380:	11000126 	beq	r2,r4,10003388 <__mulsf3+0x338>
10003384:	9927883a 	add	r19,r19,r4
10003388:	9882002c 	andhi	r2,r19,2048
1000338c:	10000426 	beq	r2,zero,100033a0 <__mulsf3+0x350>
10003390:	00be0034 	movhi	r2,63488
10003394:	10bfffc4 	addi	r2,r2,-1
10003398:	80c02004 	addi	r3,r16,128
1000339c:	98a6703a 	and	r19,r19,r2
100033a0:	00803f84 	movi	r2,254
100033a4:	10ff9c16 	blt	r2,r3,10003218 <__alt_data_end+0xf8003218>
100033a8:	980891ba 	slli	r4,r19,6
100033ac:	a829883a 	mov	r20,r21
100033b0:	2008d27a 	srli	r4,r4,9
100033b4:	003f7906 	br	1000319c <__alt_data_end+0xf800319c>
100033b8:	9080102c 	andhi	r2,r18,64
100033bc:	10000826 	beq	r2,zero,100033e0 <__mulsf3+0x390>
100033c0:	9880102c 	andhi	r2,r19,64
100033c4:	1000061e 	bne	r2,zero,100033e0 <__mulsf3+0x390>
100033c8:	00802034 	movhi	r2,128
100033cc:	99001034 	orhi	r4,r19,64
100033d0:	10bfffc4 	addi	r2,r2,-1
100033d4:	b029883a 	mov	r20,r22
100033d8:	2088703a 	and	r4,r4,r2
100033dc:	003fad06 	br	10003294 <__alt_data_end+0xf8003294>
100033e0:	00802034 	movhi	r2,128
100033e4:	91001034 	orhi	r4,r18,64
100033e8:	10bfffc4 	addi	r2,r2,-1
100033ec:	2088703a 	and	r4,r4,r2
100033f0:	003fa806 	br	10003294 <__alt_data_end+0xf8003294>
100033f4:	00800044 	movi	r2,1
100033f8:	10c7c83a 	sub	r3,r2,r3
100033fc:	008006c4 	movi	r2,27
10003400:	10ff6316 	blt	r2,r3,10003190 <__alt_data_end+0xf8003190>
10003404:	00800804 	movi	r2,32
10003408:	10c5c83a 	sub	r2,r2,r3
1000340c:	9884983a 	sll	r2,r19,r2
10003410:	98c6d83a 	srl	r3,r19,r3
10003414:	1004c03a 	cmpne	r2,r2,zero
10003418:	1884b03a 	or	r2,r3,r2
1000341c:	10c001cc 	andi	r3,r2,7
10003420:	18000426 	beq	r3,zero,10003434 <__mulsf3+0x3e4>
10003424:	10c003cc 	andi	r3,r2,15
10003428:	01000104 	movi	r4,4
1000342c:	19000126 	beq	r3,r4,10003434 <__mulsf3+0x3e4>
10003430:	1105883a 	add	r2,r2,r4
10003434:	10c1002c 	andhi	r3,r2,1024
10003438:	18000626 	beq	r3,zero,10003454 <__mulsf3+0x404>
1000343c:	a829883a 	mov	r20,r21
10003440:	00c00044 	movi	r3,1
10003444:	0009883a 	mov	r4,zero
10003448:	003f5406 	br	1000319c <__alt_data_end+0xf800319c>
1000344c:	3821883a 	mov	r16,r7
10003450:	003fc506 	br	10003368 <__alt_data_end+0xf8003368>
10003454:	100491ba 	slli	r2,r2,6
10003458:	a829883a 	mov	r20,r21
1000345c:	0007883a 	mov	r3,zero
10003460:	1008d27a 	srli	r4,r2,9
10003464:	003f4d06 	br	1000319c <__alt_data_end+0xf800319c>
10003468:	00802034 	movhi	r2,128
1000346c:	99001034 	orhi	r4,r19,64
10003470:	10bfffc4 	addi	r2,r2,-1
10003474:	a829883a 	mov	r20,r21
10003478:	2088703a 	and	r4,r4,r2
1000347c:	003f8506 	br	10003294 <__alt_data_end+0xf8003294>

10003480 <__subsf3>:
10003480:	defffc04 	addi	sp,sp,-16
10003484:	280cd5fa 	srli	r6,r5,23
10003488:	dc000015 	stw	r16,0(sp)
1000348c:	01c02034 	movhi	r7,128
10003490:	2020d5fa 	srli	r16,r4,23
10003494:	39ffffc4 	addi	r7,r7,-1
10003498:	3906703a 	and	r3,r7,r4
1000349c:	dc400115 	stw	r17,4(sp)
100034a0:	394e703a 	and	r7,r7,r5
100034a4:	2022d7fa 	srli	r17,r4,31
100034a8:	dfc00315 	stw	ra,12(sp)
100034ac:	dc800215 	stw	r18,8(sp)
100034b0:	31803fcc 	andi	r6,r6,255
100034b4:	01003fc4 	movi	r4,255
100034b8:	84003fcc 	andi	r16,r16,255
100034bc:	180690fa 	slli	r3,r3,3
100034c0:	2804d7fa 	srli	r2,r5,31
100034c4:	380e90fa 	slli	r7,r7,3
100034c8:	31006d26 	beq	r6,r4,10003680 <__subsf3+0x200>
100034cc:	1080005c 	xori	r2,r2,1
100034d0:	8189c83a 	sub	r4,r16,r6
100034d4:	14404f26 	beq	r2,r17,10003614 <__subsf3+0x194>
100034d8:	0100770e 	bge	zero,r4,100036b8 <__subsf3+0x238>
100034dc:	30001e1e 	bne	r6,zero,10003558 <__subsf3+0xd8>
100034e0:	38006a1e 	bne	r7,zero,1000368c <__subsf3+0x20c>
100034e4:	188001cc 	andi	r2,r3,7
100034e8:	10000426 	beq	r2,zero,100034fc <__subsf3+0x7c>
100034ec:	188003cc 	andi	r2,r3,15
100034f0:	01000104 	movi	r4,4
100034f4:	11000126 	beq	r2,r4,100034fc <__subsf3+0x7c>
100034f8:	1907883a 	add	r3,r3,r4
100034fc:	1881002c 	andhi	r2,r3,1024
10003500:	10003926 	beq	r2,zero,100035e8 <__subsf3+0x168>
10003504:	84000044 	addi	r16,r16,1
10003508:	00803fc4 	movi	r2,255
1000350c:	80807526 	beq	r16,r2,100036e4 <__subsf3+0x264>
10003510:	180691ba 	slli	r3,r3,6
10003514:	8880004c 	andi	r2,r17,1
10003518:	180ad27a 	srli	r5,r3,9
1000351c:	84003fcc 	andi	r16,r16,255
10003520:	800695fa 	slli	r3,r16,23
10003524:	10803fcc 	andi	r2,r2,255
10003528:	01002034 	movhi	r4,128
1000352c:	213fffc4 	addi	r4,r4,-1
10003530:	100497fa 	slli	r2,r2,31
10003534:	2920703a 	and	r16,r5,r4
10003538:	80e0b03a 	or	r16,r16,r3
1000353c:	8084b03a 	or	r2,r16,r2
10003540:	dfc00317 	ldw	ra,12(sp)
10003544:	dc800217 	ldw	r18,8(sp)
10003548:	dc400117 	ldw	r17,4(sp)
1000354c:	dc000017 	ldw	r16,0(sp)
10003550:	dec00404 	addi	sp,sp,16
10003554:	f800283a 	ret
10003558:	00803fc4 	movi	r2,255
1000355c:	80bfe126 	beq	r16,r2,100034e4 <__alt_data_end+0xf80034e4>
10003560:	39c10034 	orhi	r7,r7,1024
10003564:	008006c4 	movi	r2,27
10003568:	11007416 	blt	r2,r4,1000373c <__subsf3+0x2bc>
1000356c:	00800804 	movi	r2,32
10003570:	1105c83a 	sub	r2,r2,r4
10003574:	3884983a 	sll	r2,r7,r2
10003578:	390ed83a 	srl	r7,r7,r4
1000357c:	1008c03a 	cmpne	r4,r2,zero
10003580:	390eb03a 	or	r7,r7,r4
10003584:	19c7c83a 	sub	r3,r3,r7
10003588:	1881002c 	andhi	r2,r3,1024
1000358c:	10001426 	beq	r2,zero,100035e0 <__subsf3+0x160>
10003590:	04810034 	movhi	r18,1024
10003594:	94bfffc4 	addi	r18,r18,-1
10003598:	1ca4703a 	and	r18,r3,r18
1000359c:	9009883a 	mov	r4,r18
100035a0:	00059a40 	call	100059a4 <__clzsi2>
100035a4:	10bffec4 	addi	r2,r2,-5
100035a8:	90a4983a 	sll	r18,r18,r2
100035ac:	14005116 	blt	r2,r16,100036f4 <__subsf3+0x274>
100035b0:	1405c83a 	sub	r2,r2,r16
100035b4:	10c00044 	addi	r3,r2,1
100035b8:	00800804 	movi	r2,32
100035bc:	10c5c83a 	sub	r2,r2,r3
100035c0:	9084983a 	sll	r2,r18,r2
100035c4:	90e4d83a 	srl	r18,r18,r3
100035c8:	0021883a 	mov	r16,zero
100035cc:	1006c03a 	cmpne	r3,r2,zero
100035d0:	90c6b03a 	or	r3,r18,r3
100035d4:	003fc306 	br	100034e4 <__alt_data_end+0xf80034e4>
100035d8:	2000e026 	beq	r4,zero,1000395c <__subsf3+0x4dc>
100035dc:	2007883a 	mov	r3,r4
100035e0:	188001cc 	andi	r2,r3,7
100035e4:	103fc11e 	bne	r2,zero,100034ec <__alt_data_end+0xf80034ec>
100035e8:	180ad0fa 	srli	r5,r3,3
100035ec:	00c03fc4 	movi	r3,255
100035f0:	8880004c 	andi	r2,r17,1
100035f4:	80c0031e 	bne	r16,r3,10003604 <__subsf3+0x184>
100035f8:	28006d26 	beq	r5,zero,100037b0 <__subsf3+0x330>
100035fc:	29401034 	orhi	r5,r5,64
10003600:	043fffc4 	movi	r16,-1
10003604:	00c02034 	movhi	r3,128
10003608:	18ffffc4 	addi	r3,r3,-1
1000360c:	28ca703a 	and	r5,r5,r3
10003610:	003fc206 	br	1000351c <__alt_data_end+0xf800351c>
10003614:	01003c0e 	bge	zero,r4,10003708 <__subsf3+0x288>
10003618:	30002126 	beq	r6,zero,100036a0 <__subsf3+0x220>
1000361c:	01403fc4 	movi	r5,255
10003620:	817fb026 	beq	r16,r5,100034e4 <__alt_data_end+0xf80034e4>
10003624:	39c10034 	orhi	r7,r7,1024
10003628:	014006c4 	movi	r5,27
1000362c:	29007416 	blt	r5,r4,10003800 <__subsf3+0x380>
10003630:	01400804 	movi	r5,32
10003634:	290bc83a 	sub	r5,r5,r4
10003638:	394a983a 	sll	r5,r7,r5
1000363c:	390ed83a 	srl	r7,r7,r4
10003640:	2808c03a 	cmpne	r4,r5,zero
10003644:	390eb03a 	or	r7,r7,r4
10003648:	19c7883a 	add	r3,r3,r7
1000364c:	1901002c 	andhi	r4,r3,1024
10003650:	20003826 	beq	r4,zero,10003734 <__subsf3+0x2b4>
10003654:	84000044 	addi	r16,r16,1
10003658:	01003fc4 	movi	r4,255
1000365c:	81005426 	beq	r16,r4,100037b0 <__subsf3+0x330>
10003660:	1023883a 	mov	r17,r2
10003664:	00bf0034 	movhi	r2,64512
10003668:	10bfffc4 	addi	r2,r2,-1
1000366c:	1900004c 	andi	r4,r3,1
10003670:	1886703a 	and	r3,r3,r2
10003674:	1806d07a 	srli	r3,r3,1
10003678:	1906b03a 	or	r3,r3,r4
1000367c:	003f9906 	br	100034e4 <__alt_data_end+0xf80034e4>
10003680:	383f9226 	beq	r7,zero,100034cc <__alt_data_end+0xf80034cc>
10003684:	10803fcc 	andi	r2,r2,255
10003688:	003f9106 	br	100034d0 <__alt_data_end+0xf80034d0>
1000368c:	213fffc4 	addi	r4,r4,-1
10003690:	203fbc26 	beq	r4,zero,10003584 <__alt_data_end+0xf8003584>
10003694:	00803fc4 	movi	r2,255
10003698:	80bfb21e 	bne	r16,r2,10003564 <__alt_data_end+0xf8003564>
1000369c:	003f9106 	br	100034e4 <__alt_data_end+0xf80034e4>
100036a0:	383f9026 	beq	r7,zero,100034e4 <__alt_data_end+0xf80034e4>
100036a4:	213fffc4 	addi	r4,r4,-1
100036a8:	203fe726 	beq	r4,zero,10003648 <__alt_data_end+0xf8003648>
100036ac:	01403fc4 	movi	r5,255
100036b0:	817fdd1e 	bne	r16,r5,10003628 <__alt_data_end+0xf8003628>
100036b4:	003f8b06 	br	100034e4 <__alt_data_end+0xf80034e4>
100036b8:	2000221e 	bne	r4,zero,10003744 <__subsf3+0x2c4>
100036bc:	81000044 	addi	r4,r16,1
100036c0:	21003fcc 	andi	r4,r4,255
100036c4:	01400044 	movi	r5,1
100036c8:	2900470e 	bge	r5,r4,100037e8 <__subsf3+0x368>
100036cc:	19e5c83a 	sub	r18,r3,r7
100036d0:	9141002c 	andhi	r5,r18,1024
100036d4:	28002d26 	beq	r5,zero,1000378c <__subsf3+0x30c>
100036d8:	38e5c83a 	sub	r18,r7,r3
100036dc:	1023883a 	mov	r17,r2
100036e0:	003fae06 	br	1000359c <__alt_data_end+0xf800359c>
100036e4:	8880004c 	andi	r2,r17,1
100036e8:	043fffc4 	movi	r16,-1
100036ec:	000b883a 	mov	r5,zero
100036f0:	003f8a06 	br	1000351c <__alt_data_end+0xf800351c>
100036f4:	00ff0034 	movhi	r3,64512
100036f8:	18ffffc4 	addi	r3,r3,-1
100036fc:	80a1c83a 	sub	r16,r16,r2
10003700:	90c6703a 	and	r3,r18,r3
10003704:	003f7706 	br	100034e4 <__alt_data_end+0xf80034e4>
10003708:	2000431e 	bne	r4,zero,10003818 <__subsf3+0x398>
1000370c:	81000044 	addi	r4,r16,1
10003710:	21803fcc 	andi	r6,r4,255
10003714:	01400044 	movi	r5,1
10003718:	2980280e 	bge	r5,r6,100037bc <__subsf3+0x33c>
1000371c:	01403fc4 	movi	r5,255
10003720:	21402326 	beq	r4,r5,100037b0 <__subsf3+0x330>
10003724:	19c7883a 	add	r3,r3,r7
10003728:	1806d07a 	srli	r3,r3,1
1000372c:	2021883a 	mov	r16,r4
10003730:	003f6c06 	br	100034e4 <__alt_data_end+0xf80034e4>
10003734:	1023883a 	mov	r17,r2
10003738:	003fa906 	br	100035e0 <__alt_data_end+0xf80035e0>
1000373c:	01c00044 	movi	r7,1
10003740:	003f9006 	br	10003584 <__alt_data_end+0xf8003584>
10003744:	8000151e 	bne	r16,zero,1000379c <__subsf3+0x31c>
10003748:	18002f26 	beq	r3,zero,10003808 <__subsf3+0x388>
1000374c:	0108303a 	nor	r4,zero,r4
10003750:	20000a26 	beq	r4,zero,1000377c <__subsf3+0x2fc>
10003754:	01403fc4 	movi	r5,255
10003758:	31402b26 	beq	r6,r5,10003808 <__subsf3+0x388>
1000375c:	014006c4 	movi	r5,27
10003760:	29006e16 	blt	r5,r4,1000391c <__subsf3+0x49c>
10003764:	01400804 	movi	r5,32
10003768:	290bc83a 	sub	r5,r5,r4
1000376c:	194a983a 	sll	r5,r3,r5
10003770:	1908d83a 	srl	r4,r3,r4
10003774:	2806c03a 	cmpne	r3,r5,zero
10003778:	20c6b03a 	or	r3,r4,r3
1000377c:	38c7c83a 	sub	r3,r7,r3
10003780:	3021883a 	mov	r16,r6
10003784:	1023883a 	mov	r17,r2
10003788:	003f7f06 	br	10003588 <__alt_data_end+0xf8003588>
1000378c:	903f831e 	bne	r18,zero,1000359c <__alt_data_end+0xf800359c>
10003790:	0005883a 	mov	r2,zero
10003794:	0021883a 	mov	r16,zero
10003798:	003f9a06 	br	10003604 <__alt_data_end+0xf8003604>
1000379c:	01403fc4 	movi	r5,255
100037a0:	31401926 	beq	r6,r5,10003808 <__subsf3+0x388>
100037a4:	0109c83a 	sub	r4,zero,r4
100037a8:	18c10034 	orhi	r3,r3,1024
100037ac:	003feb06 	br	1000375c <__alt_data_end+0xf800375c>
100037b0:	043fffc4 	movi	r16,-1
100037b4:	000b883a 	mov	r5,zero
100037b8:	003f5806 	br	1000351c <__alt_data_end+0xf800351c>
100037bc:	8000481e 	bne	r16,zero,100038e0 <__subsf3+0x460>
100037c0:	18006226 	beq	r3,zero,1000394c <__subsf3+0x4cc>
100037c4:	383f4726 	beq	r7,zero,100034e4 <__alt_data_end+0xf80034e4>
100037c8:	19c7883a 	add	r3,r3,r7
100037cc:	1881002c 	andhi	r2,r3,1024
100037d0:	103f8326 	beq	r2,zero,100035e0 <__alt_data_end+0xf80035e0>
100037d4:	00bf0034 	movhi	r2,64512
100037d8:	10bfffc4 	addi	r2,r2,-1
100037dc:	2821883a 	mov	r16,r5
100037e0:	1886703a 	and	r3,r3,r2
100037e4:	003f3f06 	br	100034e4 <__alt_data_end+0xf80034e4>
100037e8:	80001c1e 	bne	r16,zero,1000385c <__subsf3+0x3dc>
100037ec:	1800261e 	bne	r3,zero,10003888 <__subsf3+0x408>
100037f0:	38004c26 	beq	r7,zero,10003924 <__subsf3+0x4a4>
100037f4:	3807883a 	mov	r3,r7
100037f8:	1023883a 	mov	r17,r2
100037fc:	003f3906 	br	100034e4 <__alt_data_end+0xf80034e4>
10003800:	01c00044 	movi	r7,1
10003804:	003f9006 	br	10003648 <__alt_data_end+0xf8003648>
10003808:	3807883a 	mov	r3,r7
1000380c:	3021883a 	mov	r16,r6
10003810:	1023883a 	mov	r17,r2
10003814:	003f3306 	br	100034e4 <__alt_data_end+0xf80034e4>
10003818:	8000161e 	bne	r16,zero,10003874 <__subsf3+0x3f4>
1000381c:	18002d26 	beq	r3,zero,100038d4 <__subsf3+0x454>
10003820:	0108303a 	nor	r4,zero,r4
10003824:	20000a26 	beq	r4,zero,10003850 <__subsf3+0x3d0>
10003828:	01403fc4 	movi	r5,255
1000382c:	31402926 	beq	r6,r5,100038d4 <__subsf3+0x454>
10003830:	014006c4 	movi	r5,27
10003834:	29004716 	blt	r5,r4,10003954 <__subsf3+0x4d4>
10003838:	01400804 	movi	r5,32
1000383c:	290bc83a 	sub	r5,r5,r4
10003840:	194a983a 	sll	r5,r3,r5
10003844:	1908d83a 	srl	r4,r3,r4
10003848:	2806c03a 	cmpne	r3,r5,zero
1000384c:	20c6b03a 	or	r3,r4,r3
10003850:	19c7883a 	add	r3,r3,r7
10003854:	3021883a 	mov	r16,r6
10003858:	003f7c06 	br	1000364c <__alt_data_end+0xf800364c>
1000385c:	1800111e 	bne	r3,zero,100038a4 <__subsf3+0x424>
10003860:	38003326 	beq	r7,zero,10003930 <__subsf3+0x4b0>
10003864:	3807883a 	mov	r3,r7
10003868:	1023883a 	mov	r17,r2
1000386c:	04003fc4 	movi	r16,255
10003870:	003f1c06 	br	100034e4 <__alt_data_end+0xf80034e4>
10003874:	01403fc4 	movi	r5,255
10003878:	31401626 	beq	r6,r5,100038d4 <__subsf3+0x454>
1000387c:	0109c83a 	sub	r4,zero,r4
10003880:	18c10034 	orhi	r3,r3,1024
10003884:	003fea06 	br	10003830 <__alt_data_end+0xf8003830>
10003888:	383f1626 	beq	r7,zero,100034e4 <__alt_data_end+0xf80034e4>
1000388c:	19c9c83a 	sub	r4,r3,r7
10003890:	2141002c 	andhi	r5,r4,1024
10003894:	283f5026 	beq	r5,zero,100035d8 <__alt_data_end+0xf80035d8>
10003898:	38c7c83a 	sub	r3,r7,r3
1000389c:	1023883a 	mov	r17,r2
100038a0:	003f1006 	br	100034e4 <__alt_data_end+0xf80034e4>
100038a4:	38001b26 	beq	r7,zero,10003914 <__subsf3+0x494>
100038a8:	1806d0fa 	srli	r3,r3,3
100038ac:	1900102c 	andhi	r4,r3,64
100038b0:	20000526 	beq	r4,zero,100038c8 <__subsf3+0x448>
100038b4:	380ed0fa 	srli	r7,r7,3
100038b8:	3900102c 	andhi	r4,r7,64
100038bc:	2000021e 	bne	r4,zero,100038c8 <__subsf3+0x448>
100038c0:	3807883a 	mov	r3,r7
100038c4:	1023883a 	mov	r17,r2
100038c8:	180690fa 	slli	r3,r3,3
100038cc:	04003fc4 	movi	r16,255
100038d0:	003f0406 	br	100034e4 <__alt_data_end+0xf80034e4>
100038d4:	3807883a 	mov	r3,r7
100038d8:	3021883a 	mov	r16,r6
100038dc:	003f0106 	br	100034e4 <__alt_data_end+0xf80034e4>
100038e0:	18001726 	beq	r3,zero,10003940 <__subsf3+0x4c0>
100038e4:	38000b26 	beq	r7,zero,10003914 <__subsf3+0x494>
100038e8:	1806d0fa 	srli	r3,r3,3
100038ec:	1900102c 	andhi	r4,r3,64
100038f0:	20000426 	beq	r4,zero,10003904 <__subsf3+0x484>
100038f4:	380ed0fa 	srli	r7,r7,3
100038f8:	3900102c 	andhi	r4,r7,64
100038fc:	2000011e 	bne	r4,zero,10003904 <__subsf3+0x484>
10003900:	3807883a 	mov	r3,r7
10003904:	180690fa 	slli	r3,r3,3
10003908:	1023883a 	mov	r17,r2
1000390c:	04003fc4 	movi	r16,255
10003910:	003ef406 	br	100034e4 <__alt_data_end+0xf80034e4>
10003914:	04003fc4 	movi	r16,255
10003918:	003ef206 	br	100034e4 <__alt_data_end+0xf80034e4>
1000391c:	00c00044 	movi	r3,1
10003920:	003f9606 	br	1000377c <__alt_data_end+0xf800377c>
10003924:	000b883a 	mov	r5,zero
10003928:	0005883a 	mov	r2,zero
1000392c:	003f3506 	br	10003604 <__alt_data_end+0xf8003604>
10003930:	01402034 	movhi	r5,128
10003934:	297fffc4 	addi	r5,r5,-1
10003938:	0005883a 	mov	r2,zero
1000393c:	003f2f06 	br	100035fc <__alt_data_end+0xf80035fc>
10003940:	3807883a 	mov	r3,r7
10003944:	04003fc4 	movi	r16,255
10003948:	003ee606 	br	100034e4 <__alt_data_end+0xf80034e4>
1000394c:	3807883a 	mov	r3,r7
10003950:	003ee406 	br	100034e4 <__alt_data_end+0xf80034e4>
10003954:	00c00044 	movi	r3,1
10003958:	003fbd06 	br	10003850 <__alt_data_end+0xf8003850>
1000395c:	0005883a 	mov	r2,zero
10003960:	003f2806 	br	10003604 <__alt_data_end+0xf8003604>

10003964 <__fixsfsi>:
10003964:	200ad5fa 	srli	r5,r4,23
10003968:	00c02034 	movhi	r3,128
1000396c:	18ffffc4 	addi	r3,r3,-1
10003970:	29403fcc 	andi	r5,r5,255
10003974:	00801f84 	movi	r2,126
10003978:	1906703a 	and	r3,r3,r4
1000397c:	2008d7fa 	srli	r4,r4,31
10003980:	11400e0e 	bge	r2,r5,100039bc <__fixsfsi+0x58>
10003984:	00802744 	movi	r2,157
10003988:	11400816 	blt	r2,r5,100039ac <__fixsfsi+0x48>
1000398c:	00802544 	movi	r2,149
10003990:	18c02034 	orhi	r3,r3,128
10003994:	11400b0e 	bge	r2,r5,100039c4 <__fixsfsi+0x60>
10003998:	28bfda84 	addi	r2,r5,-150
1000399c:	1884983a 	sll	r2,r3,r2
100039a0:	20000726 	beq	r4,zero,100039c0 <__fixsfsi+0x5c>
100039a4:	0085c83a 	sub	r2,zero,r2
100039a8:	f800283a 	ret
100039ac:	00a00034 	movhi	r2,32768
100039b0:	10bfffc4 	addi	r2,r2,-1
100039b4:	2085883a 	add	r2,r4,r2
100039b8:	f800283a 	ret
100039bc:	0005883a 	mov	r2,zero
100039c0:	f800283a 	ret
100039c4:	00802584 	movi	r2,150
100039c8:	1145c83a 	sub	r2,r2,r5
100039cc:	1884d83a 	srl	r2,r3,r2
100039d0:	003ff306 	br	100039a0 <__alt_data_end+0xf80039a0>

100039d4 <__floatsisf>:
100039d4:	defffd04 	addi	sp,sp,-12
100039d8:	dfc00215 	stw	ra,8(sp)
100039dc:	dc400115 	stw	r17,4(sp)
100039e0:	dc000015 	stw	r16,0(sp)
100039e4:	20003526 	beq	r4,zero,10003abc <__floatsisf+0xe8>
100039e8:	2021883a 	mov	r16,r4
100039ec:	2022d7fa 	srli	r17,r4,31
100039f0:	20003616 	blt	r4,zero,10003acc <__floatsisf+0xf8>
100039f4:	8009883a 	mov	r4,r16
100039f8:	00059a40 	call	100059a4 <__clzsi2>
100039fc:	00c02784 	movi	r3,158
10003a00:	1887c83a 	sub	r3,r3,r2
10003a04:	01002584 	movi	r4,150
10003a08:	20c01416 	blt	r4,r3,10003a5c <__floatsisf+0x88>
10003a0c:	20c9c83a 	sub	r4,r4,r3
10003a10:	8120983a 	sll	r16,r16,r4
10003a14:	00802034 	movhi	r2,128
10003a18:	10bfffc4 	addi	r2,r2,-1
10003a1c:	8809883a 	mov	r4,r17
10003a20:	80a0703a 	and	r16,r16,r2
10003a24:	18803fcc 	andi	r2,r3,255
10003a28:	100695fa 	slli	r3,r2,23
10003a2c:	20803fcc 	andi	r2,r4,255
10003a30:	100897fa 	slli	r4,r2,31
10003a34:	00802034 	movhi	r2,128
10003a38:	10bfffc4 	addi	r2,r2,-1
10003a3c:	8084703a 	and	r2,r16,r2
10003a40:	10c4b03a 	or	r2,r2,r3
10003a44:	1104b03a 	or	r2,r2,r4
10003a48:	dfc00217 	ldw	ra,8(sp)
10003a4c:	dc400117 	ldw	r17,4(sp)
10003a50:	dc000017 	ldw	r16,0(sp)
10003a54:	dec00304 	addi	sp,sp,12
10003a58:	f800283a 	ret
10003a5c:	01002644 	movi	r4,153
10003a60:	20c01c16 	blt	r4,r3,10003ad4 <__floatsisf+0x100>
10003a64:	20c9c83a 	sub	r4,r4,r3
10003a68:	8120983a 	sll	r16,r16,r4
10003a6c:	013f0034 	movhi	r4,64512
10003a70:	213fffc4 	addi	r4,r4,-1
10003a74:	814001cc 	andi	r5,r16,7
10003a78:	8108703a 	and	r4,r16,r4
10003a7c:	28000426 	beq	r5,zero,10003a90 <__floatsisf+0xbc>
10003a80:	840003cc 	andi	r16,r16,15
10003a84:	01400104 	movi	r5,4
10003a88:	81400126 	beq	r16,r5,10003a90 <__floatsisf+0xbc>
10003a8c:	2149883a 	add	r4,r4,r5
10003a90:	2141002c 	andhi	r5,r4,1024
10003a94:	28000526 	beq	r5,zero,10003aac <__floatsisf+0xd8>
10003a98:	00c027c4 	movi	r3,159
10003a9c:	1887c83a 	sub	r3,r3,r2
10003aa0:	00bf0034 	movhi	r2,64512
10003aa4:	10bfffc4 	addi	r2,r2,-1
10003aa8:	2088703a 	and	r4,r4,r2
10003aac:	202091ba 	slli	r16,r4,6
10003ab0:	8809883a 	mov	r4,r17
10003ab4:	8020d27a 	srli	r16,r16,9
10003ab8:	003fda06 	br	10003a24 <__alt_data_end+0xf8003a24>
10003abc:	0009883a 	mov	r4,zero
10003ac0:	0007883a 	mov	r3,zero
10003ac4:	0021883a 	mov	r16,zero
10003ac8:	003fd606 	br	10003a24 <__alt_data_end+0xf8003a24>
10003acc:	0121c83a 	sub	r16,zero,r4
10003ad0:	003fc806 	br	100039f4 <__alt_data_end+0xf80039f4>
10003ad4:	01002e44 	movi	r4,185
10003ad8:	20c9c83a 	sub	r4,r4,r3
10003adc:	01400144 	movi	r5,5
10003ae0:	8108983a 	sll	r4,r16,r4
10003ae4:	288bc83a 	sub	r5,r5,r2
10003ae8:	8160d83a 	srl	r16,r16,r5
10003aec:	2008c03a 	cmpne	r4,r4,zero
10003af0:	8120b03a 	or	r16,r16,r4
10003af4:	003fdd06 	br	10003a6c <__alt_data_end+0xf8003a6c>

10003af8 <__floatunsisf>:
10003af8:	defffe04 	addi	sp,sp,-8
10003afc:	dfc00115 	stw	ra,4(sp)
10003b00:	dc000015 	stw	r16,0(sp)
10003b04:	20002c26 	beq	r4,zero,10003bb8 <__floatunsisf+0xc0>
10003b08:	2021883a 	mov	r16,r4
10003b0c:	00059a40 	call	100059a4 <__clzsi2>
10003b10:	00c02784 	movi	r3,158
10003b14:	1887c83a 	sub	r3,r3,r2
10003b18:	01002584 	movi	r4,150
10003b1c:	20c00f16 	blt	r4,r3,10003b5c <__floatunsisf+0x64>
10003b20:	20c9c83a 	sub	r4,r4,r3
10003b24:	8108983a 	sll	r4,r16,r4
10003b28:	00802034 	movhi	r2,128
10003b2c:	10bfffc4 	addi	r2,r2,-1
10003b30:	2088703a 	and	r4,r4,r2
10003b34:	18803fcc 	andi	r2,r3,255
10003b38:	100695fa 	slli	r3,r2,23
10003b3c:	00802034 	movhi	r2,128
10003b40:	10bfffc4 	addi	r2,r2,-1
10003b44:	2084703a 	and	r2,r4,r2
10003b48:	10c4b03a 	or	r2,r2,r3
10003b4c:	dfc00117 	ldw	ra,4(sp)
10003b50:	dc000017 	ldw	r16,0(sp)
10003b54:	dec00204 	addi	sp,sp,8
10003b58:	f800283a 	ret
10003b5c:	01002644 	movi	r4,153
10003b60:	20c01816 	blt	r4,r3,10003bc4 <__floatunsisf+0xcc>
10003b64:	20c9c83a 	sub	r4,r4,r3
10003b68:	8108983a 	sll	r4,r16,r4
10003b6c:	017f0034 	movhi	r5,64512
10003b70:	297fffc4 	addi	r5,r5,-1
10003b74:	218001cc 	andi	r6,r4,7
10003b78:	214a703a 	and	r5,r4,r5
10003b7c:	30000426 	beq	r6,zero,10003b90 <__floatunsisf+0x98>
10003b80:	210003cc 	andi	r4,r4,15
10003b84:	01800104 	movi	r6,4
10003b88:	21800126 	beq	r4,r6,10003b90 <__floatunsisf+0x98>
10003b8c:	298b883a 	add	r5,r5,r6
10003b90:	2901002c 	andhi	r4,r5,1024
10003b94:	20000526 	beq	r4,zero,10003bac <__floatunsisf+0xb4>
10003b98:	00c027c4 	movi	r3,159
10003b9c:	1887c83a 	sub	r3,r3,r2
10003ba0:	00bf0034 	movhi	r2,64512
10003ba4:	10bfffc4 	addi	r2,r2,-1
10003ba8:	288a703a 	and	r5,r5,r2
10003bac:	280891ba 	slli	r4,r5,6
10003bb0:	2008d27a 	srli	r4,r4,9
10003bb4:	003fdf06 	br	10003b34 <__alt_data_end+0xf8003b34>
10003bb8:	0007883a 	mov	r3,zero
10003bbc:	0009883a 	mov	r4,zero
10003bc0:	003fdc06 	br	10003b34 <__alt_data_end+0xf8003b34>
10003bc4:	01402e44 	movi	r5,185
10003bc8:	28cbc83a 	sub	r5,r5,r3
10003bcc:	01000144 	movi	r4,5
10003bd0:	2089c83a 	sub	r4,r4,r2
10003bd4:	814a983a 	sll	r5,r16,r5
10003bd8:	8108d83a 	srl	r4,r16,r4
10003bdc:	2820c03a 	cmpne	r16,r5,zero
10003be0:	2408b03a 	or	r4,r4,r16
10003be4:	003fe106 	br	10003b6c <__alt_data_end+0xf8003b6c>

10003be8 <__adddf3>:
10003be8:	02c00434 	movhi	r11,16
10003bec:	5affffc4 	addi	r11,r11,-1
10003bf0:	2806d7fa 	srli	r3,r5,31
10003bf4:	2ad4703a 	and	r10,r5,r11
10003bf8:	3ad2703a 	and	r9,r7,r11
10003bfc:	3804d53a 	srli	r2,r7,20
10003c00:	3018d77a 	srli	r12,r6,29
10003c04:	280ad53a 	srli	r5,r5,20
10003c08:	501490fa 	slli	r10,r10,3
10003c0c:	2010d77a 	srli	r8,r4,29
10003c10:	481290fa 	slli	r9,r9,3
10003c14:	380ed7fa 	srli	r7,r7,31
10003c18:	defffb04 	addi	sp,sp,-20
10003c1c:	dc800215 	stw	r18,8(sp)
10003c20:	dc400115 	stw	r17,4(sp)
10003c24:	dc000015 	stw	r16,0(sp)
10003c28:	dfc00415 	stw	ra,16(sp)
10003c2c:	dcc00315 	stw	r19,12(sp)
10003c30:	1c803fcc 	andi	r18,r3,255
10003c34:	2c01ffcc 	andi	r16,r5,2047
10003c38:	5210b03a 	or	r8,r10,r8
10003c3c:	202290fa 	slli	r17,r4,3
10003c40:	1081ffcc 	andi	r2,r2,2047
10003c44:	4b12b03a 	or	r9,r9,r12
10003c48:	300c90fa 	slli	r6,r6,3
10003c4c:	91c07526 	beq	r18,r7,10003e24 <__adddf3+0x23c>
10003c50:	8087c83a 	sub	r3,r16,r2
10003c54:	00c0ab0e 	bge	zero,r3,10003f04 <__adddf3+0x31c>
10003c58:	10002a1e 	bne	r2,zero,10003d04 <__adddf3+0x11c>
10003c5c:	4984b03a 	or	r2,r9,r6
10003c60:	1000961e 	bne	r2,zero,10003ebc <__adddf3+0x2d4>
10003c64:	888001cc 	andi	r2,r17,7
10003c68:	10000726 	beq	r2,zero,10003c88 <__adddf3+0xa0>
10003c6c:	888003cc 	andi	r2,r17,15
10003c70:	00c00104 	movi	r3,4
10003c74:	10c00426 	beq	r2,r3,10003c88 <__adddf3+0xa0>
10003c78:	88c7883a 	add	r3,r17,r3
10003c7c:	1c63803a 	cmpltu	r17,r3,r17
10003c80:	4451883a 	add	r8,r8,r17
10003c84:	1823883a 	mov	r17,r3
10003c88:	4080202c 	andhi	r2,r8,128
10003c8c:	10005926 	beq	r2,zero,10003df4 <__adddf3+0x20c>
10003c90:	84000044 	addi	r16,r16,1
10003c94:	0081ffc4 	movi	r2,2047
10003c98:	8080ba26 	beq	r16,r2,10003f84 <__adddf3+0x39c>
10003c9c:	00bfe034 	movhi	r2,65408
10003ca0:	10bfffc4 	addi	r2,r2,-1
10003ca4:	4090703a 	and	r8,r8,r2
10003ca8:	4004977a 	slli	r2,r8,29
10003cac:	4010927a 	slli	r8,r8,9
10003cb0:	8822d0fa 	srli	r17,r17,3
10003cb4:	8401ffcc 	andi	r16,r16,2047
10003cb8:	4010d33a 	srli	r8,r8,12
10003cbc:	9007883a 	mov	r3,r18
10003cc0:	1444b03a 	or	r2,r2,r17
10003cc4:	8401ffcc 	andi	r16,r16,2047
10003cc8:	8020953a 	slli	r16,r16,20
10003ccc:	18c03fcc 	andi	r3,r3,255
10003cd0:	01000434 	movhi	r4,16
10003cd4:	213fffc4 	addi	r4,r4,-1
10003cd8:	180697fa 	slli	r3,r3,31
10003cdc:	4110703a 	and	r8,r8,r4
10003ce0:	4410b03a 	or	r8,r8,r16
10003ce4:	40c6b03a 	or	r3,r8,r3
10003ce8:	dfc00417 	ldw	ra,16(sp)
10003cec:	dcc00317 	ldw	r19,12(sp)
10003cf0:	dc800217 	ldw	r18,8(sp)
10003cf4:	dc400117 	ldw	r17,4(sp)
10003cf8:	dc000017 	ldw	r16,0(sp)
10003cfc:	dec00504 	addi	sp,sp,20
10003d00:	f800283a 	ret
10003d04:	0081ffc4 	movi	r2,2047
10003d08:	80bfd626 	beq	r16,r2,10003c64 <__alt_data_end+0xf8003c64>
10003d0c:	4a402034 	orhi	r9,r9,128
10003d10:	00800e04 	movi	r2,56
10003d14:	10c09f16 	blt	r2,r3,10003f94 <__adddf3+0x3ac>
10003d18:	008007c4 	movi	r2,31
10003d1c:	10c0c216 	blt	r2,r3,10004028 <__adddf3+0x440>
10003d20:	00800804 	movi	r2,32
10003d24:	10c5c83a 	sub	r2,r2,r3
10003d28:	488a983a 	sll	r5,r9,r2
10003d2c:	30c8d83a 	srl	r4,r6,r3
10003d30:	3084983a 	sll	r2,r6,r2
10003d34:	48c6d83a 	srl	r3,r9,r3
10003d38:	290cb03a 	or	r6,r5,r4
10003d3c:	1004c03a 	cmpne	r2,r2,zero
10003d40:	308cb03a 	or	r6,r6,r2
10003d44:	898dc83a 	sub	r6,r17,r6
10003d48:	89a3803a 	cmpltu	r17,r17,r6
10003d4c:	40d1c83a 	sub	r8,r8,r3
10003d50:	4451c83a 	sub	r8,r8,r17
10003d54:	3023883a 	mov	r17,r6
10003d58:	4080202c 	andhi	r2,r8,128
10003d5c:	10002326 	beq	r2,zero,10003dec <__adddf3+0x204>
10003d60:	04c02034 	movhi	r19,128
10003d64:	9cffffc4 	addi	r19,r19,-1
10003d68:	44e6703a 	and	r19,r8,r19
10003d6c:	98007626 	beq	r19,zero,10003f48 <__adddf3+0x360>
10003d70:	9809883a 	mov	r4,r19
10003d74:	00059a40 	call	100059a4 <__clzsi2>
10003d78:	10fffe04 	addi	r3,r2,-8
10003d7c:	010007c4 	movi	r4,31
10003d80:	20c07716 	blt	r4,r3,10003f60 <__adddf3+0x378>
10003d84:	00800804 	movi	r2,32
10003d88:	10c5c83a 	sub	r2,r2,r3
10003d8c:	8884d83a 	srl	r2,r17,r2
10003d90:	98d0983a 	sll	r8,r19,r3
10003d94:	88e2983a 	sll	r17,r17,r3
10003d98:	1204b03a 	or	r2,r2,r8
10003d9c:	1c007416 	blt	r3,r16,10003f70 <__adddf3+0x388>
10003da0:	1c21c83a 	sub	r16,r3,r16
10003da4:	82000044 	addi	r8,r16,1
10003da8:	00c007c4 	movi	r3,31
10003dac:	1a009116 	blt	r3,r8,10003ff4 <__adddf3+0x40c>
10003db0:	00c00804 	movi	r3,32
10003db4:	1a07c83a 	sub	r3,r3,r8
10003db8:	8a08d83a 	srl	r4,r17,r8
10003dbc:	88e2983a 	sll	r17,r17,r3
10003dc0:	10c6983a 	sll	r3,r2,r3
10003dc4:	1210d83a 	srl	r8,r2,r8
10003dc8:	8804c03a 	cmpne	r2,r17,zero
10003dcc:	1906b03a 	or	r3,r3,r4
10003dd0:	18a2b03a 	or	r17,r3,r2
10003dd4:	0021883a 	mov	r16,zero
10003dd8:	003fa206 	br	10003c64 <__alt_data_end+0xf8003c64>
10003ddc:	1890b03a 	or	r8,r3,r2
10003de0:	40017d26 	beq	r8,zero,100043d8 <__adddf3+0x7f0>
10003de4:	1011883a 	mov	r8,r2
10003de8:	1823883a 	mov	r17,r3
10003dec:	888001cc 	andi	r2,r17,7
10003df0:	103f9e1e 	bne	r2,zero,10003c6c <__alt_data_end+0xf8003c6c>
10003df4:	4004977a 	slli	r2,r8,29
10003df8:	8822d0fa 	srli	r17,r17,3
10003dfc:	4010d0fa 	srli	r8,r8,3
10003e00:	9007883a 	mov	r3,r18
10003e04:	1444b03a 	or	r2,r2,r17
10003e08:	0101ffc4 	movi	r4,2047
10003e0c:	81002426 	beq	r16,r4,10003ea0 <__adddf3+0x2b8>
10003e10:	8120703a 	and	r16,r16,r4
10003e14:	01000434 	movhi	r4,16
10003e18:	213fffc4 	addi	r4,r4,-1
10003e1c:	4110703a 	and	r8,r8,r4
10003e20:	003fa806 	br	10003cc4 <__alt_data_end+0xf8003cc4>
10003e24:	8089c83a 	sub	r4,r16,r2
10003e28:	01005e0e 	bge	zero,r4,10003fa4 <__adddf3+0x3bc>
10003e2c:	10002b26 	beq	r2,zero,10003edc <__adddf3+0x2f4>
10003e30:	0081ffc4 	movi	r2,2047
10003e34:	80bf8b26 	beq	r16,r2,10003c64 <__alt_data_end+0xf8003c64>
10003e38:	4a402034 	orhi	r9,r9,128
10003e3c:	00800e04 	movi	r2,56
10003e40:	1100a40e 	bge	r2,r4,100040d4 <__adddf3+0x4ec>
10003e44:	498cb03a 	or	r6,r9,r6
10003e48:	300ac03a 	cmpne	r5,r6,zero
10003e4c:	0013883a 	mov	r9,zero
10003e50:	2c4b883a 	add	r5,r5,r17
10003e54:	2c63803a 	cmpltu	r17,r5,r17
10003e58:	4a11883a 	add	r8,r9,r8
10003e5c:	8a11883a 	add	r8,r17,r8
10003e60:	2823883a 	mov	r17,r5
10003e64:	4080202c 	andhi	r2,r8,128
10003e68:	103fe026 	beq	r2,zero,10003dec <__alt_data_end+0xf8003dec>
10003e6c:	84000044 	addi	r16,r16,1
10003e70:	0081ffc4 	movi	r2,2047
10003e74:	8080d226 	beq	r16,r2,100041c0 <__adddf3+0x5d8>
10003e78:	00bfe034 	movhi	r2,65408
10003e7c:	10bfffc4 	addi	r2,r2,-1
10003e80:	4090703a 	and	r8,r8,r2
10003e84:	880ad07a 	srli	r5,r17,1
10003e88:	400897fa 	slli	r4,r8,31
10003e8c:	88c0004c 	andi	r3,r17,1
10003e90:	28e2b03a 	or	r17,r5,r3
10003e94:	4010d07a 	srli	r8,r8,1
10003e98:	2462b03a 	or	r17,r4,r17
10003e9c:	003f7106 	br	10003c64 <__alt_data_end+0xf8003c64>
10003ea0:	4088b03a 	or	r4,r8,r2
10003ea4:	20014526 	beq	r4,zero,100043bc <__adddf3+0x7d4>
10003ea8:	01000434 	movhi	r4,16
10003eac:	42000234 	orhi	r8,r8,8
10003eb0:	213fffc4 	addi	r4,r4,-1
10003eb4:	4110703a 	and	r8,r8,r4
10003eb8:	003f8206 	br	10003cc4 <__alt_data_end+0xf8003cc4>
10003ebc:	18ffffc4 	addi	r3,r3,-1
10003ec0:	1800491e 	bne	r3,zero,10003fe8 <__adddf3+0x400>
10003ec4:	898bc83a 	sub	r5,r17,r6
10003ec8:	8963803a 	cmpltu	r17,r17,r5
10003ecc:	4251c83a 	sub	r8,r8,r9
10003ed0:	4451c83a 	sub	r8,r8,r17
10003ed4:	2823883a 	mov	r17,r5
10003ed8:	003f9f06 	br	10003d58 <__alt_data_end+0xf8003d58>
10003edc:	4984b03a 	or	r2,r9,r6
10003ee0:	103f6026 	beq	r2,zero,10003c64 <__alt_data_end+0xf8003c64>
10003ee4:	213fffc4 	addi	r4,r4,-1
10003ee8:	2000931e 	bne	r4,zero,10004138 <__adddf3+0x550>
10003eec:	898d883a 	add	r6,r17,r6
10003ef0:	3463803a 	cmpltu	r17,r6,r17
10003ef4:	4251883a 	add	r8,r8,r9
10003ef8:	8a11883a 	add	r8,r17,r8
10003efc:	3023883a 	mov	r17,r6
10003f00:	003fd806 	br	10003e64 <__alt_data_end+0xf8003e64>
10003f04:	1800541e 	bne	r3,zero,10004058 <__adddf3+0x470>
10003f08:	80800044 	addi	r2,r16,1
10003f0c:	1081ffcc 	andi	r2,r2,2047
10003f10:	00c00044 	movi	r3,1
10003f14:	1880a00e 	bge	r3,r2,10004198 <__adddf3+0x5b0>
10003f18:	8989c83a 	sub	r4,r17,r6
10003f1c:	8905803a 	cmpltu	r2,r17,r4
10003f20:	4267c83a 	sub	r19,r8,r9
10003f24:	98a7c83a 	sub	r19,r19,r2
10003f28:	9880202c 	andhi	r2,r19,128
10003f2c:	10006326 	beq	r2,zero,100040bc <__adddf3+0x4d4>
10003f30:	3463c83a 	sub	r17,r6,r17
10003f34:	4a07c83a 	sub	r3,r9,r8
10003f38:	344d803a 	cmpltu	r6,r6,r17
10003f3c:	19a7c83a 	sub	r19,r3,r6
10003f40:	3825883a 	mov	r18,r7
10003f44:	983f8a1e 	bne	r19,zero,10003d70 <__alt_data_end+0xf8003d70>
10003f48:	8809883a 	mov	r4,r17
10003f4c:	00059a40 	call	100059a4 <__clzsi2>
10003f50:	10800804 	addi	r2,r2,32
10003f54:	10fffe04 	addi	r3,r2,-8
10003f58:	010007c4 	movi	r4,31
10003f5c:	20ff890e 	bge	r4,r3,10003d84 <__alt_data_end+0xf8003d84>
10003f60:	10bff604 	addi	r2,r2,-40
10003f64:	8884983a 	sll	r2,r17,r2
10003f68:	0023883a 	mov	r17,zero
10003f6c:	1c3f8c0e 	bge	r3,r16,10003da0 <__alt_data_end+0xf8003da0>
10003f70:	023fe034 	movhi	r8,65408
10003f74:	423fffc4 	addi	r8,r8,-1
10003f78:	80e1c83a 	sub	r16,r16,r3
10003f7c:	1210703a 	and	r8,r2,r8
10003f80:	003f3806 	br	10003c64 <__alt_data_end+0xf8003c64>
10003f84:	9007883a 	mov	r3,r18
10003f88:	0011883a 	mov	r8,zero
10003f8c:	0005883a 	mov	r2,zero
10003f90:	003f4c06 	br	10003cc4 <__alt_data_end+0xf8003cc4>
10003f94:	498cb03a 	or	r6,r9,r6
10003f98:	300cc03a 	cmpne	r6,r6,zero
10003f9c:	0007883a 	mov	r3,zero
10003fa0:	003f6806 	br	10003d44 <__alt_data_end+0xf8003d44>
10003fa4:	20009c1e 	bne	r4,zero,10004218 <__adddf3+0x630>
10003fa8:	80800044 	addi	r2,r16,1
10003fac:	1141ffcc 	andi	r5,r2,2047
10003fb0:	01000044 	movi	r4,1
10003fb4:	2140670e 	bge	r4,r5,10004154 <__adddf3+0x56c>
10003fb8:	0101ffc4 	movi	r4,2047
10003fbc:	11007f26 	beq	r2,r4,100041bc <__adddf3+0x5d4>
10003fc0:	898d883a 	add	r6,r17,r6
10003fc4:	4247883a 	add	r3,r8,r9
10003fc8:	3451803a 	cmpltu	r8,r6,r17
10003fcc:	40d1883a 	add	r8,r8,r3
10003fd0:	402297fa 	slli	r17,r8,31
10003fd4:	300cd07a 	srli	r6,r6,1
10003fd8:	4010d07a 	srli	r8,r8,1
10003fdc:	1021883a 	mov	r16,r2
10003fe0:	89a2b03a 	or	r17,r17,r6
10003fe4:	003f1f06 	br	10003c64 <__alt_data_end+0xf8003c64>
10003fe8:	0081ffc4 	movi	r2,2047
10003fec:	80bf481e 	bne	r16,r2,10003d10 <__alt_data_end+0xf8003d10>
10003ff0:	003f1c06 	br	10003c64 <__alt_data_end+0xf8003c64>
10003ff4:	843ff844 	addi	r16,r16,-31
10003ff8:	01000804 	movi	r4,32
10003ffc:	1406d83a 	srl	r3,r2,r16
10004000:	41005026 	beq	r8,r4,10004144 <__adddf3+0x55c>
10004004:	01001004 	movi	r4,64
10004008:	2211c83a 	sub	r8,r4,r8
1000400c:	1204983a 	sll	r2,r2,r8
10004010:	88a2b03a 	or	r17,r17,r2
10004014:	8822c03a 	cmpne	r17,r17,zero
10004018:	1c62b03a 	or	r17,r3,r17
1000401c:	0011883a 	mov	r8,zero
10004020:	0021883a 	mov	r16,zero
10004024:	003f7106 	br	10003dec <__alt_data_end+0xf8003dec>
10004028:	193ff804 	addi	r4,r3,-32
1000402c:	00800804 	movi	r2,32
10004030:	4908d83a 	srl	r4,r9,r4
10004034:	18804526 	beq	r3,r2,1000414c <__adddf3+0x564>
10004038:	00801004 	movi	r2,64
1000403c:	10c5c83a 	sub	r2,r2,r3
10004040:	4886983a 	sll	r3,r9,r2
10004044:	198cb03a 	or	r6,r3,r6
10004048:	300cc03a 	cmpne	r6,r6,zero
1000404c:	218cb03a 	or	r6,r4,r6
10004050:	0007883a 	mov	r3,zero
10004054:	003f3b06 	br	10003d44 <__alt_data_end+0xf8003d44>
10004058:	80002a26 	beq	r16,zero,10004104 <__adddf3+0x51c>
1000405c:	0101ffc4 	movi	r4,2047
10004060:	11006826 	beq	r2,r4,10004204 <__adddf3+0x61c>
10004064:	00c7c83a 	sub	r3,zero,r3
10004068:	42002034 	orhi	r8,r8,128
1000406c:	01000e04 	movi	r4,56
10004070:	20c07c16 	blt	r4,r3,10004264 <__adddf3+0x67c>
10004074:	010007c4 	movi	r4,31
10004078:	20c0da16 	blt	r4,r3,100043e4 <__adddf3+0x7fc>
1000407c:	01000804 	movi	r4,32
10004080:	20c9c83a 	sub	r4,r4,r3
10004084:	4114983a 	sll	r10,r8,r4
10004088:	88cad83a 	srl	r5,r17,r3
1000408c:	8908983a 	sll	r4,r17,r4
10004090:	40c6d83a 	srl	r3,r8,r3
10004094:	5162b03a 	or	r17,r10,r5
10004098:	2008c03a 	cmpne	r4,r4,zero
1000409c:	8922b03a 	or	r17,r17,r4
100040a0:	3463c83a 	sub	r17,r6,r17
100040a4:	48c7c83a 	sub	r3,r9,r3
100040a8:	344d803a 	cmpltu	r6,r6,r17
100040ac:	1991c83a 	sub	r8,r3,r6
100040b0:	1021883a 	mov	r16,r2
100040b4:	3825883a 	mov	r18,r7
100040b8:	003f2706 	br	10003d58 <__alt_data_end+0xf8003d58>
100040bc:	24d0b03a 	or	r8,r4,r19
100040c0:	40001b1e 	bne	r8,zero,10004130 <__adddf3+0x548>
100040c4:	0005883a 	mov	r2,zero
100040c8:	0007883a 	mov	r3,zero
100040cc:	0021883a 	mov	r16,zero
100040d0:	003f4d06 	br	10003e08 <__alt_data_end+0xf8003e08>
100040d4:	008007c4 	movi	r2,31
100040d8:	11003c16 	blt	r2,r4,100041cc <__adddf3+0x5e4>
100040dc:	00800804 	movi	r2,32
100040e0:	1105c83a 	sub	r2,r2,r4
100040e4:	488e983a 	sll	r7,r9,r2
100040e8:	310ad83a 	srl	r5,r6,r4
100040ec:	3084983a 	sll	r2,r6,r2
100040f0:	4912d83a 	srl	r9,r9,r4
100040f4:	394ab03a 	or	r5,r7,r5
100040f8:	1004c03a 	cmpne	r2,r2,zero
100040fc:	288ab03a 	or	r5,r5,r2
10004100:	003f5306 	br	10003e50 <__alt_data_end+0xf8003e50>
10004104:	4448b03a 	or	r4,r8,r17
10004108:	20003e26 	beq	r4,zero,10004204 <__adddf3+0x61c>
1000410c:	00c6303a 	nor	r3,zero,r3
10004110:	18003a1e 	bne	r3,zero,100041fc <__adddf3+0x614>
10004114:	3463c83a 	sub	r17,r6,r17
10004118:	4a07c83a 	sub	r3,r9,r8
1000411c:	344d803a 	cmpltu	r6,r6,r17
10004120:	1991c83a 	sub	r8,r3,r6
10004124:	1021883a 	mov	r16,r2
10004128:	3825883a 	mov	r18,r7
1000412c:	003f0a06 	br	10003d58 <__alt_data_end+0xf8003d58>
10004130:	2023883a 	mov	r17,r4
10004134:	003f0d06 	br	10003d6c <__alt_data_end+0xf8003d6c>
10004138:	0081ffc4 	movi	r2,2047
1000413c:	80bf3f1e 	bne	r16,r2,10003e3c <__alt_data_end+0xf8003e3c>
10004140:	003ec806 	br	10003c64 <__alt_data_end+0xf8003c64>
10004144:	0005883a 	mov	r2,zero
10004148:	003fb106 	br	10004010 <__alt_data_end+0xf8004010>
1000414c:	0007883a 	mov	r3,zero
10004150:	003fbc06 	br	10004044 <__alt_data_end+0xf8004044>
10004154:	4444b03a 	or	r2,r8,r17
10004158:	8000871e 	bne	r16,zero,10004378 <__adddf3+0x790>
1000415c:	1000ba26 	beq	r2,zero,10004448 <__adddf3+0x860>
10004160:	4984b03a 	or	r2,r9,r6
10004164:	103ebf26 	beq	r2,zero,10003c64 <__alt_data_end+0xf8003c64>
10004168:	8985883a 	add	r2,r17,r6
1000416c:	4247883a 	add	r3,r8,r9
10004170:	1451803a 	cmpltu	r8,r2,r17
10004174:	40d1883a 	add	r8,r8,r3
10004178:	40c0202c 	andhi	r3,r8,128
1000417c:	1023883a 	mov	r17,r2
10004180:	183f1a26 	beq	r3,zero,10003dec <__alt_data_end+0xf8003dec>
10004184:	00bfe034 	movhi	r2,65408
10004188:	10bfffc4 	addi	r2,r2,-1
1000418c:	2021883a 	mov	r16,r4
10004190:	4090703a 	and	r8,r8,r2
10004194:	003eb306 	br	10003c64 <__alt_data_end+0xf8003c64>
10004198:	4444b03a 	or	r2,r8,r17
1000419c:	8000291e 	bne	r16,zero,10004244 <__adddf3+0x65c>
100041a0:	10004b1e 	bne	r2,zero,100042d0 <__adddf3+0x6e8>
100041a4:	4990b03a 	or	r8,r9,r6
100041a8:	40008b26 	beq	r8,zero,100043d8 <__adddf3+0x7f0>
100041ac:	4811883a 	mov	r8,r9
100041b0:	3023883a 	mov	r17,r6
100041b4:	3825883a 	mov	r18,r7
100041b8:	003eaa06 	br	10003c64 <__alt_data_end+0xf8003c64>
100041bc:	1021883a 	mov	r16,r2
100041c0:	0011883a 	mov	r8,zero
100041c4:	0005883a 	mov	r2,zero
100041c8:	003f0f06 	br	10003e08 <__alt_data_end+0xf8003e08>
100041cc:	217ff804 	addi	r5,r4,-32
100041d0:	00800804 	movi	r2,32
100041d4:	494ad83a 	srl	r5,r9,r5
100041d8:	20807d26 	beq	r4,r2,100043d0 <__adddf3+0x7e8>
100041dc:	00801004 	movi	r2,64
100041e0:	1109c83a 	sub	r4,r2,r4
100041e4:	4912983a 	sll	r9,r9,r4
100041e8:	498cb03a 	or	r6,r9,r6
100041ec:	300cc03a 	cmpne	r6,r6,zero
100041f0:	298ab03a 	or	r5,r5,r6
100041f4:	0013883a 	mov	r9,zero
100041f8:	003f1506 	br	10003e50 <__alt_data_end+0xf8003e50>
100041fc:	0101ffc4 	movi	r4,2047
10004200:	113f9a1e 	bne	r2,r4,1000406c <__alt_data_end+0xf800406c>
10004204:	4811883a 	mov	r8,r9
10004208:	3023883a 	mov	r17,r6
1000420c:	1021883a 	mov	r16,r2
10004210:	3825883a 	mov	r18,r7
10004214:	003e9306 	br	10003c64 <__alt_data_end+0xf8003c64>
10004218:	8000161e 	bne	r16,zero,10004274 <__adddf3+0x68c>
1000421c:	444ab03a 	or	r5,r8,r17
10004220:	28005126 	beq	r5,zero,10004368 <__adddf3+0x780>
10004224:	0108303a 	nor	r4,zero,r4
10004228:	20004d1e 	bne	r4,zero,10004360 <__adddf3+0x778>
1000422c:	89a3883a 	add	r17,r17,r6
10004230:	4253883a 	add	r9,r8,r9
10004234:	898d803a 	cmpltu	r6,r17,r6
10004238:	3251883a 	add	r8,r6,r9
1000423c:	1021883a 	mov	r16,r2
10004240:	003f0806 	br	10003e64 <__alt_data_end+0xf8003e64>
10004244:	1000301e 	bne	r2,zero,10004308 <__adddf3+0x720>
10004248:	4984b03a 	or	r2,r9,r6
1000424c:	10007126 	beq	r2,zero,10004414 <__adddf3+0x82c>
10004250:	4811883a 	mov	r8,r9
10004254:	3023883a 	mov	r17,r6
10004258:	3825883a 	mov	r18,r7
1000425c:	0401ffc4 	movi	r16,2047
10004260:	003e8006 	br	10003c64 <__alt_data_end+0xf8003c64>
10004264:	4462b03a 	or	r17,r8,r17
10004268:	8822c03a 	cmpne	r17,r17,zero
1000426c:	0007883a 	mov	r3,zero
10004270:	003f8b06 	br	100040a0 <__alt_data_end+0xf80040a0>
10004274:	0141ffc4 	movi	r5,2047
10004278:	11403b26 	beq	r2,r5,10004368 <__adddf3+0x780>
1000427c:	0109c83a 	sub	r4,zero,r4
10004280:	42002034 	orhi	r8,r8,128
10004284:	01400e04 	movi	r5,56
10004288:	29006716 	blt	r5,r4,10004428 <__adddf3+0x840>
1000428c:	014007c4 	movi	r5,31
10004290:	29007016 	blt	r5,r4,10004454 <__adddf3+0x86c>
10004294:	01400804 	movi	r5,32
10004298:	290bc83a 	sub	r5,r5,r4
1000429c:	4154983a 	sll	r10,r8,r5
100042a0:	890ed83a 	srl	r7,r17,r4
100042a4:	894a983a 	sll	r5,r17,r5
100042a8:	4108d83a 	srl	r4,r8,r4
100042ac:	51e2b03a 	or	r17,r10,r7
100042b0:	280ac03a 	cmpne	r5,r5,zero
100042b4:	8962b03a 	or	r17,r17,r5
100042b8:	89a3883a 	add	r17,r17,r6
100042bc:	2253883a 	add	r9,r4,r9
100042c0:	898d803a 	cmpltu	r6,r17,r6
100042c4:	3251883a 	add	r8,r6,r9
100042c8:	1021883a 	mov	r16,r2
100042cc:	003ee506 	br	10003e64 <__alt_data_end+0xf8003e64>
100042d0:	4984b03a 	or	r2,r9,r6
100042d4:	103e6326 	beq	r2,zero,10003c64 <__alt_data_end+0xf8003c64>
100042d8:	8987c83a 	sub	r3,r17,r6
100042dc:	88c9803a 	cmpltu	r4,r17,r3
100042e0:	4245c83a 	sub	r2,r8,r9
100042e4:	1105c83a 	sub	r2,r2,r4
100042e8:	1100202c 	andhi	r4,r2,128
100042ec:	203ebb26 	beq	r4,zero,10003ddc <__alt_data_end+0xf8003ddc>
100042f0:	3463c83a 	sub	r17,r6,r17
100042f4:	4a07c83a 	sub	r3,r9,r8
100042f8:	344d803a 	cmpltu	r6,r6,r17
100042fc:	1991c83a 	sub	r8,r3,r6
10004300:	3825883a 	mov	r18,r7
10004304:	003e5706 	br	10003c64 <__alt_data_end+0xf8003c64>
10004308:	4984b03a 	or	r2,r9,r6
1000430c:	10002e26 	beq	r2,zero,100043c8 <__adddf3+0x7e0>
10004310:	4004d0fa 	srli	r2,r8,3
10004314:	8822d0fa 	srli	r17,r17,3
10004318:	4010977a 	slli	r8,r8,29
1000431c:	10c0022c 	andhi	r3,r2,8
10004320:	4462b03a 	or	r17,r8,r17
10004324:	18000826 	beq	r3,zero,10004348 <__adddf3+0x760>
10004328:	4808d0fa 	srli	r4,r9,3
1000432c:	20c0022c 	andhi	r3,r4,8
10004330:	1800051e 	bne	r3,zero,10004348 <__adddf3+0x760>
10004334:	300cd0fa 	srli	r6,r6,3
10004338:	4806977a 	slli	r3,r9,29
1000433c:	2005883a 	mov	r2,r4
10004340:	3825883a 	mov	r18,r7
10004344:	19a2b03a 	or	r17,r3,r6
10004348:	8810d77a 	srli	r8,r17,29
1000434c:	100490fa 	slli	r2,r2,3
10004350:	882290fa 	slli	r17,r17,3
10004354:	0401ffc4 	movi	r16,2047
10004358:	4090b03a 	or	r8,r8,r2
1000435c:	003e4106 	br	10003c64 <__alt_data_end+0xf8003c64>
10004360:	0141ffc4 	movi	r5,2047
10004364:	117fc71e 	bne	r2,r5,10004284 <__alt_data_end+0xf8004284>
10004368:	4811883a 	mov	r8,r9
1000436c:	3023883a 	mov	r17,r6
10004370:	1021883a 	mov	r16,r2
10004374:	003e3b06 	br	10003c64 <__alt_data_end+0xf8003c64>
10004378:	10002f26 	beq	r2,zero,10004438 <__adddf3+0x850>
1000437c:	4984b03a 	or	r2,r9,r6
10004380:	10001126 	beq	r2,zero,100043c8 <__adddf3+0x7e0>
10004384:	4004d0fa 	srli	r2,r8,3
10004388:	8822d0fa 	srli	r17,r17,3
1000438c:	4010977a 	slli	r8,r8,29
10004390:	10c0022c 	andhi	r3,r2,8
10004394:	4462b03a 	or	r17,r8,r17
10004398:	183feb26 	beq	r3,zero,10004348 <__alt_data_end+0xf8004348>
1000439c:	4808d0fa 	srli	r4,r9,3
100043a0:	20c0022c 	andhi	r3,r4,8
100043a4:	183fe81e 	bne	r3,zero,10004348 <__alt_data_end+0xf8004348>
100043a8:	300cd0fa 	srli	r6,r6,3
100043ac:	4806977a 	slli	r3,r9,29
100043b0:	2005883a 	mov	r2,r4
100043b4:	19a2b03a 	or	r17,r3,r6
100043b8:	003fe306 	br	10004348 <__alt_data_end+0xf8004348>
100043bc:	0011883a 	mov	r8,zero
100043c0:	0005883a 	mov	r2,zero
100043c4:	003e3f06 	br	10003cc4 <__alt_data_end+0xf8003cc4>
100043c8:	0401ffc4 	movi	r16,2047
100043cc:	003e2506 	br	10003c64 <__alt_data_end+0xf8003c64>
100043d0:	0013883a 	mov	r9,zero
100043d4:	003f8406 	br	100041e8 <__alt_data_end+0xf80041e8>
100043d8:	0005883a 	mov	r2,zero
100043dc:	0007883a 	mov	r3,zero
100043e0:	003e8906 	br	10003e08 <__alt_data_end+0xf8003e08>
100043e4:	197ff804 	addi	r5,r3,-32
100043e8:	01000804 	movi	r4,32
100043ec:	414ad83a 	srl	r5,r8,r5
100043f0:	19002426 	beq	r3,r4,10004484 <__adddf3+0x89c>
100043f4:	01001004 	movi	r4,64
100043f8:	20c7c83a 	sub	r3,r4,r3
100043fc:	40c6983a 	sll	r3,r8,r3
10004400:	1c46b03a 	or	r3,r3,r17
10004404:	1806c03a 	cmpne	r3,r3,zero
10004408:	28e2b03a 	or	r17,r5,r3
1000440c:	0007883a 	mov	r3,zero
10004410:	003f2306 	br	100040a0 <__alt_data_end+0xf80040a0>
10004414:	0007883a 	mov	r3,zero
10004418:	5811883a 	mov	r8,r11
1000441c:	00bfffc4 	movi	r2,-1
10004420:	0401ffc4 	movi	r16,2047
10004424:	003e7806 	br	10003e08 <__alt_data_end+0xf8003e08>
10004428:	4462b03a 	or	r17,r8,r17
1000442c:	8822c03a 	cmpne	r17,r17,zero
10004430:	0009883a 	mov	r4,zero
10004434:	003fa006 	br	100042b8 <__alt_data_end+0xf80042b8>
10004438:	4811883a 	mov	r8,r9
1000443c:	3023883a 	mov	r17,r6
10004440:	0401ffc4 	movi	r16,2047
10004444:	003e0706 	br	10003c64 <__alt_data_end+0xf8003c64>
10004448:	4811883a 	mov	r8,r9
1000444c:	3023883a 	mov	r17,r6
10004450:	003e0406 	br	10003c64 <__alt_data_end+0xf8003c64>
10004454:	21fff804 	addi	r7,r4,-32
10004458:	01400804 	movi	r5,32
1000445c:	41ced83a 	srl	r7,r8,r7
10004460:	21400a26 	beq	r4,r5,1000448c <__adddf3+0x8a4>
10004464:	01401004 	movi	r5,64
10004468:	2909c83a 	sub	r4,r5,r4
1000446c:	4108983a 	sll	r4,r8,r4
10004470:	2448b03a 	or	r4,r4,r17
10004474:	2008c03a 	cmpne	r4,r4,zero
10004478:	3922b03a 	or	r17,r7,r4
1000447c:	0009883a 	mov	r4,zero
10004480:	003f8d06 	br	100042b8 <__alt_data_end+0xf80042b8>
10004484:	0007883a 	mov	r3,zero
10004488:	003fdd06 	br	10004400 <__alt_data_end+0xf8004400>
1000448c:	0009883a 	mov	r4,zero
10004490:	003ff706 	br	10004470 <__alt_data_end+0xf8004470>

10004494 <__ledf2>:
10004494:	2804d53a 	srli	r2,r5,20
10004498:	3810d53a 	srli	r8,r7,20
1000449c:	00c00434 	movhi	r3,16
100044a0:	18ffffc4 	addi	r3,r3,-1
100044a4:	1081ffcc 	andi	r2,r2,2047
100044a8:	0241ffc4 	movi	r9,2047
100044ac:	28d4703a 	and	r10,r5,r3
100044b0:	4201ffcc 	andi	r8,r8,2047
100044b4:	38c6703a 	and	r3,r7,r3
100044b8:	280ad7fa 	srli	r5,r5,31
100044bc:	380ed7fa 	srli	r7,r7,31
100044c0:	12401f26 	beq	r2,r9,10004540 <__ledf2+0xac>
100044c4:	0241ffc4 	movi	r9,2047
100044c8:	42401426 	beq	r8,r9,1000451c <__ledf2+0x88>
100044cc:	1000091e 	bne	r2,zero,100044f4 <__ledf2+0x60>
100044d0:	2296b03a 	or	r11,r4,r10
100044d4:	5813003a 	cmpeq	r9,r11,zero
100044d8:	29403fcc 	andi	r5,r5,255
100044dc:	40000a1e 	bne	r8,zero,10004508 <__ledf2+0x74>
100044e0:	30d8b03a 	or	r12,r6,r3
100044e4:	6000081e 	bne	r12,zero,10004508 <__ledf2+0x74>
100044e8:	0005883a 	mov	r2,zero
100044ec:	5800111e 	bne	r11,zero,10004534 <__ledf2+0xa0>
100044f0:	f800283a 	ret
100044f4:	29403fcc 	andi	r5,r5,255
100044f8:	40000c1e 	bne	r8,zero,1000452c <__ledf2+0x98>
100044fc:	30d2b03a 	or	r9,r6,r3
10004500:	48000c26 	beq	r9,zero,10004534 <__ledf2+0xa0>
10004504:	0013883a 	mov	r9,zero
10004508:	39c03fcc 	andi	r7,r7,255
1000450c:	48000826 	beq	r9,zero,10004530 <__ledf2+0x9c>
10004510:	38001126 	beq	r7,zero,10004558 <__ledf2+0xc4>
10004514:	00800044 	movi	r2,1
10004518:	f800283a 	ret
1000451c:	30d2b03a 	or	r9,r6,r3
10004520:	483fea26 	beq	r9,zero,100044cc <__alt_data_end+0xf80044cc>
10004524:	00800084 	movi	r2,2
10004528:	f800283a 	ret
1000452c:	39c03fcc 	andi	r7,r7,255
10004530:	39400726 	beq	r7,r5,10004550 <__ledf2+0xbc>
10004534:	2800081e 	bne	r5,zero,10004558 <__ledf2+0xc4>
10004538:	00800044 	movi	r2,1
1000453c:	f800283a 	ret
10004540:	2292b03a 	or	r9,r4,r10
10004544:	483fdf26 	beq	r9,zero,100044c4 <__alt_data_end+0xf80044c4>
10004548:	00800084 	movi	r2,2
1000454c:	f800283a 	ret
10004550:	4080030e 	bge	r8,r2,10004560 <__ledf2+0xcc>
10004554:	383fef26 	beq	r7,zero,10004514 <__alt_data_end+0xf8004514>
10004558:	00bfffc4 	movi	r2,-1
1000455c:	f800283a 	ret
10004560:	123feb16 	blt	r2,r8,10004510 <__alt_data_end+0xf8004510>
10004564:	1abff336 	bltu	r3,r10,10004534 <__alt_data_end+0xf8004534>
10004568:	50c00326 	beq	r10,r3,10004578 <__ledf2+0xe4>
1000456c:	50c0042e 	bgeu	r10,r3,10004580 <__ledf2+0xec>
10004570:	283fe81e 	bne	r5,zero,10004514 <__alt_data_end+0xf8004514>
10004574:	003ff806 	br	10004558 <__alt_data_end+0xf8004558>
10004578:	313fee36 	bltu	r6,r4,10004534 <__alt_data_end+0xf8004534>
1000457c:	21bffc36 	bltu	r4,r6,10004570 <__alt_data_end+0xf8004570>
10004580:	0005883a 	mov	r2,zero
10004584:	f800283a 	ret

10004588 <__muldf3>:
10004588:	deffee04 	addi	sp,sp,-72
1000458c:	dd000c15 	stw	r20,48(sp)
10004590:	2828d53a 	srli	r20,r5,20
10004594:	ddc00f15 	stw	r23,60(sp)
10004598:	282ed7fa 	srli	r23,r5,31
1000459c:	dc000815 	stw	r16,32(sp)
100045a0:	04000434 	movhi	r16,16
100045a4:	dcc00b15 	stw	r19,44(sp)
100045a8:	843fffc4 	addi	r16,r16,-1
100045ac:	dfc01115 	stw	ra,68(sp)
100045b0:	df001015 	stw	fp,64(sp)
100045b4:	dd800e15 	stw	r22,56(sp)
100045b8:	dd400d15 	stw	r21,52(sp)
100045bc:	dc800a15 	stw	r18,40(sp)
100045c0:	dc400915 	stw	r17,36(sp)
100045c4:	a501ffcc 	andi	r20,r20,2047
100045c8:	2c20703a 	and	r16,r5,r16
100045cc:	b827883a 	mov	r19,r23
100045d0:	ba403fcc 	andi	r9,r23,255
100045d4:	a0006026 	beq	r20,zero,10004758 <__muldf3+0x1d0>
100045d8:	0081ffc4 	movi	r2,2047
100045dc:	202d883a 	mov	r22,r4
100045e0:	a0803626 	beq	r20,r2,100046bc <__muldf3+0x134>
100045e4:	84000434 	orhi	r16,r16,16
100045e8:	200ad77a 	srli	r5,r4,29
100045ec:	800690fa 	slli	r3,r16,3
100045f0:	202c90fa 	slli	r22,r4,3
100045f4:	a53f0044 	addi	r20,r20,-1023
100045f8:	28e0b03a 	or	r16,r5,r3
100045fc:	002b883a 	mov	r21,zero
10004600:	000b883a 	mov	r5,zero
10004604:	3806d53a 	srli	r3,r7,20
10004608:	3838d7fa 	srli	fp,r7,31
1000460c:	04400434 	movhi	r17,16
10004610:	8c7fffc4 	addi	r17,r17,-1
10004614:	18c1ffcc 	andi	r3,r3,2047
10004618:	3025883a 	mov	r18,r6
1000461c:	3c62703a 	and	r17,r7,r17
10004620:	e2803fcc 	andi	r10,fp,255
10004624:	18006d26 	beq	r3,zero,100047dc <__muldf3+0x254>
10004628:	0081ffc4 	movi	r2,2047
1000462c:	18806526 	beq	r3,r2,100047c4 <__muldf3+0x23c>
10004630:	8c400434 	orhi	r17,r17,16
10004634:	300ed77a 	srli	r7,r6,29
10004638:	880890fa 	slli	r4,r17,3
1000463c:	302490fa 	slli	r18,r6,3
10004640:	18ff0044 	addi	r3,r3,-1023
10004644:	3922b03a 	or	r17,r7,r4
10004648:	000f883a 	mov	r7,zero
1000464c:	a0c7883a 	add	r3,r20,r3
10004650:	3d48b03a 	or	r4,r7,r21
10004654:	008003c4 	movi	r2,15
10004658:	e5ccf03a 	xor	r6,fp,r23
1000465c:	1a000044 	addi	r8,r3,1
10004660:	11009b36 	bltu	r2,r4,100048d0 <__muldf3+0x348>
10004664:	200890ba 	slli	r4,r4,2
10004668:	00840034 	movhi	r2,4096
1000466c:	10919f04 	addi	r2,r2,18044
10004670:	2089883a 	add	r4,r4,r2
10004674:	20800017 	ldw	r2,0(r4)
10004678:	1000683a 	jmp	r2
1000467c:	100048d0 	cmplti	zero,r2,291
10004680:	100046dc 	xori	zero,r2,283
10004684:	100046dc 	xori	zero,r2,283
10004688:	100046d8 	cmpnei	zero,r2,283
1000468c:	100048ac 	andhi	zero,r2,290
10004690:	100048ac 	andhi	zero,r2,290
10004694:	10004894 	ori	zero,r2,290
10004698:	100046d8 	cmpnei	zero,r2,283
1000469c:	100048ac 	andhi	zero,r2,290
100046a0:	10004894 	ori	zero,r2,290
100046a4:	100048ac 	andhi	zero,r2,290
100046a8:	100046d8 	cmpnei	zero,r2,283
100046ac:	100048bc 	xorhi	zero,r2,290
100046b0:	100048bc 	xorhi	zero,r2,290
100046b4:	100048bc 	xorhi	zero,r2,290
100046b8:	10004c18 	cmpnei	zero,r2,304
100046bc:	2404b03a 	or	r2,r4,r16
100046c0:	1000711e 	bne	r2,zero,10004888 <__muldf3+0x300>
100046c4:	05400204 	movi	r21,8
100046c8:	0021883a 	mov	r16,zero
100046cc:	002d883a 	mov	r22,zero
100046d0:	01400084 	movi	r5,2
100046d4:	003fcb06 	br	10004604 <__alt_data_end+0xf8004604>
100046d8:	500d883a 	mov	r6,r10
100046dc:	00800084 	movi	r2,2
100046e0:	38805926 	beq	r7,r2,10004848 <__muldf3+0x2c0>
100046e4:	008000c4 	movi	r2,3
100046e8:	3881ba26 	beq	r7,r2,10004dd4 <__muldf3+0x84c>
100046ec:	00800044 	movi	r2,1
100046f0:	3881951e 	bne	r7,r2,10004d48 <__muldf3+0x7c0>
100046f4:	3027883a 	mov	r19,r6
100046f8:	0005883a 	mov	r2,zero
100046fc:	0021883a 	mov	r16,zero
10004700:	002d883a 	mov	r22,zero
10004704:	1004953a 	slli	r2,r2,20
10004708:	98c03fcc 	andi	r3,r19,255
1000470c:	04400434 	movhi	r17,16
10004710:	8c7fffc4 	addi	r17,r17,-1
10004714:	180697fa 	slli	r3,r3,31
10004718:	8460703a 	and	r16,r16,r17
1000471c:	80a0b03a 	or	r16,r16,r2
10004720:	80c6b03a 	or	r3,r16,r3
10004724:	b005883a 	mov	r2,r22
10004728:	dfc01117 	ldw	ra,68(sp)
1000472c:	df001017 	ldw	fp,64(sp)
10004730:	ddc00f17 	ldw	r23,60(sp)
10004734:	dd800e17 	ldw	r22,56(sp)
10004738:	dd400d17 	ldw	r21,52(sp)
1000473c:	dd000c17 	ldw	r20,48(sp)
10004740:	dcc00b17 	ldw	r19,44(sp)
10004744:	dc800a17 	ldw	r18,40(sp)
10004748:	dc400917 	ldw	r17,36(sp)
1000474c:	dc000817 	ldw	r16,32(sp)
10004750:	dec01204 	addi	sp,sp,72
10004754:	f800283a 	ret
10004758:	2404b03a 	or	r2,r4,r16
1000475c:	202b883a 	mov	r21,r4
10004760:	10004426 	beq	r2,zero,10004874 <__muldf3+0x2ec>
10004764:	80015026 	beq	r16,zero,10004ca8 <__muldf3+0x720>
10004768:	8009883a 	mov	r4,r16
1000476c:	d9800715 	stw	r6,28(sp)
10004770:	d9c00215 	stw	r7,8(sp)
10004774:	da400415 	stw	r9,16(sp)
10004778:	00059a40 	call	100059a4 <__clzsi2>
1000477c:	d9800717 	ldw	r6,28(sp)
10004780:	d9c00217 	ldw	r7,8(sp)
10004784:	da400417 	ldw	r9,16(sp)
10004788:	10fffd44 	addi	r3,r2,-11
1000478c:	01000704 	movi	r4,28
10004790:	20c14116 	blt	r4,r3,10004c98 <__muldf3+0x710>
10004794:	01000744 	movi	r4,29
10004798:	15bffe04 	addi	r22,r2,-8
1000479c:	20c9c83a 	sub	r4,r4,r3
100047a0:	85a0983a 	sll	r16,r16,r22
100047a4:	a908d83a 	srl	r4,r21,r4
100047a8:	adac983a 	sll	r22,r21,r22
100047ac:	2420b03a 	or	r16,r4,r16
100047b0:	053f0084 	movi	r20,-1022
100047b4:	a0e9c83a 	sub	r20,r20,r3
100047b8:	002b883a 	mov	r21,zero
100047bc:	000b883a 	mov	r5,zero
100047c0:	003f9006 	br	10004604 <__alt_data_end+0xf8004604>
100047c4:	3444b03a 	or	r2,r6,r17
100047c8:	1000281e 	bne	r2,zero,1000486c <__muldf3+0x2e4>
100047cc:	0023883a 	mov	r17,zero
100047d0:	0025883a 	mov	r18,zero
100047d4:	01c00084 	movi	r7,2
100047d8:	003f9c06 	br	1000464c <__alt_data_end+0xf800464c>
100047dc:	3444b03a 	or	r2,r6,r17
100047e0:	10001e26 	beq	r2,zero,1000485c <__muldf3+0x2d4>
100047e4:	88012026 	beq	r17,zero,10004c68 <__muldf3+0x6e0>
100047e8:	8809883a 	mov	r4,r17
100047ec:	d9400215 	stw	r5,8(sp)
100047f0:	d9800715 	stw	r6,28(sp)
100047f4:	da400415 	stw	r9,16(sp)
100047f8:	da800315 	stw	r10,12(sp)
100047fc:	00059a40 	call	100059a4 <__clzsi2>
10004800:	d9400217 	ldw	r5,8(sp)
10004804:	d9800717 	ldw	r6,28(sp)
10004808:	da400417 	ldw	r9,16(sp)
1000480c:	da800317 	ldw	r10,12(sp)
10004810:	113ffd44 	addi	r4,r2,-11
10004814:	00c00704 	movi	r3,28
10004818:	19010f16 	blt	r3,r4,10004c58 <__muldf3+0x6d0>
1000481c:	00c00744 	movi	r3,29
10004820:	14bffe04 	addi	r18,r2,-8
10004824:	1907c83a 	sub	r3,r3,r4
10004828:	8ca2983a 	sll	r17,r17,r18
1000482c:	30c6d83a 	srl	r3,r6,r3
10004830:	34a4983a 	sll	r18,r6,r18
10004834:	1c62b03a 	or	r17,r3,r17
10004838:	00ff0084 	movi	r3,-1022
1000483c:	1907c83a 	sub	r3,r3,r4
10004840:	000f883a 	mov	r7,zero
10004844:	003f8106 	br	1000464c <__alt_data_end+0xf800464c>
10004848:	3027883a 	mov	r19,r6
1000484c:	0081ffc4 	movi	r2,2047
10004850:	0021883a 	mov	r16,zero
10004854:	002d883a 	mov	r22,zero
10004858:	003faa06 	br	10004704 <__alt_data_end+0xf8004704>
1000485c:	0023883a 	mov	r17,zero
10004860:	0025883a 	mov	r18,zero
10004864:	01c00044 	movi	r7,1
10004868:	003f7806 	br	1000464c <__alt_data_end+0xf800464c>
1000486c:	01c000c4 	movi	r7,3
10004870:	003f7606 	br	1000464c <__alt_data_end+0xf800464c>
10004874:	05400104 	movi	r21,4
10004878:	0021883a 	mov	r16,zero
1000487c:	002d883a 	mov	r22,zero
10004880:	01400044 	movi	r5,1
10004884:	003f5f06 	br	10004604 <__alt_data_end+0xf8004604>
10004888:	05400304 	movi	r21,12
1000488c:	014000c4 	movi	r5,3
10004890:	003f5c06 	br	10004604 <__alt_data_end+0xf8004604>
10004894:	04000434 	movhi	r16,16
10004898:	0027883a 	mov	r19,zero
1000489c:	843fffc4 	addi	r16,r16,-1
100048a0:	05bfffc4 	movi	r22,-1
100048a4:	0081ffc4 	movi	r2,2047
100048a8:	003f9606 	br	10004704 <__alt_data_end+0xf8004704>
100048ac:	8023883a 	mov	r17,r16
100048b0:	b025883a 	mov	r18,r22
100048b4:	280f883a 	mov	r7,r5
100048b8:	003f8806 	br	100046dc <__alt_data_end+0xf80046dc>
100048bc:	8023883a 	mov	r17,r16
100048c0:	b025883a 	mov	r18,r22
100048c4:	480d883a 	mov	r6,r9
100048c8:	280f883a 	mov	r7,r5
100048cc:	003f8306 	br	100046dc <__alt_data_end+0xf80046dc>
100048d0:	b028d43a 	srli	r20,r22,16
100048d4:	902ed43a 	srli	r23,r18,16
100048d8:	b5bfffcc 	andi	r22,r22,65535
100048dc:	94bfffcc 	andi	r18,r18,65535
100048e0:	b00b883a 	mov	r5,r22
100048e4:	9009883a 	mov	r4,r18
100048e8:	d8c00515 	stw	r3,20(sp)
100048ec:	d9800715 	stw	r6,28(sp)
100048f0:	da000615 	stw	r8,24(sp)
100048f4:	0005a080 	call	10005a08 <__mulsi3>
100048f8:	a00b883a 	mov	r5,r20
100048fc:	9009883a 	mov	r4,r18
10004900:	1027883a 	mov	r19,r2
10004904:	0005a080 	call	10005a08 <__mulsi3>
10004908:	b80b883a 	mov	r5,r23
1000490c:	a009883a 	mov	r4,r20
10004910:	102b883a 	mov	r21,r2
10004914:	0005a080 	call	10005a08 <__mulsi3>
10004918:	b809883a 	mov	r4,r23
1000491c:	b00b883a 	mov	r5,r22
10004920:	1039883a 	mov	fp,r2
10004924:	0005a080 	call	10005a08 <__mulsi3>
10004928:	9808d43a 	srli	r4,r19,16
1000492c:	1545883a 	add	r2,r2,r21
10004930:	d8c00517 	ldw	r3,20(sp)
10004934:	2085883a 	add	r2,r4,r2
10004938:	d9800717 	ldw	r6,28(sp)
1000493c:	da000617 	ldw	r8,24(sp)
10004940:	1540022e 	bgeu	r2,r21,1000494c <__muldf3+0x3c4>
10004944:	01000074 	movhi	r4,1
10004948:	e139883a 	add	fp,fp,r4
1000494c:	100e943a 	slli	r7,r2,16
10004950:	1004d43a 	srli	r2,r2,16
10004954:	882ad43a 	srli	r21,r17,16
10004958:	9cffffcc 	andi	r19,r19,65535
1000495c:	8c7fffcc 	andi	r17,r17,65535
10004960:	3ce7883a 	add	r19,r7,r19
10004964:	b00b883a 	mov	r5,r22
10004968:	8809883a 	mov	r4,r17
1000496c:	d8c00515 	stw	r3,20(sp)
10004970:	d9800715 	stw	r6,28(sp)
10004974:	da000615 	stw	r8,24(sp)
10004978:	dcc00115 	stw	r19,4(sp)
1000497c:	d8800015 	stw	r2,0(sp)
10004980:	0005a080 	call	10005a08 <__mulsi3>
10004984:	a00b883a 	mov	r5,r20
10004988:	8809883a 	mov	r4,r17
1000498c:	d8800215 	stw	r2,8(sp)
10004990:	0005a080 	call	10005a08 <__mulsi3>
10004994:	a009883a 	mov	r4,r20
10004998:	a80b883a 	mov	r5,r21
1000499c:	1027883a 	mov	r19,r2
100049a0:	0005a080 	call	10005a08 <__mulsi3>
100049a4:	a809883a 	mov	r4,r21
100049a8:	b00b883a 	mov	r5,r22
100049ac:	1029883a 	mov	r20,r2
100049b0:	0005a080 	call	10005a08 <__mulsi3>
100049b4:	d9c00217 	ldw	r7,8(sp)
100049b8:	14c5883a 	add	r2,r2,r19
100049bc:	d8c00517 	ldw	r3,20(sp)
100049c0:	3808d43a 	srli	r4,r7,16
100049c4:	d9800717 	ldw	r6,28(sp)
100049c8:	da000617 	ldw	r8,24(sp)
100049cc:	2085883a 	add	r2,r4,r2
100049d0:	14c0022e 	bgeu	r2,r19,100049dc <__muldf3+0x454>
100049d4:	01000074 	movhi	r4,1
100049d8:	a129883a 	add	r20,r20,r4
100049dc:	1012d43a 	srli	r9,r2,16
100049e0:	1004943a 	slli	r2,r2,16
100049e4:	802cd43a 	srli	r22,r16,16
100049e8:	843fffcc 	andi	r16,r16,65535
100049ec:	3cffffcc 	andi	r19,r7,65535
100049f0:	9009883a 	mov	r4,r18
100049f4:	800b883a 	mov	r5,r16
100049f8:	4d29883a 	add	r20,r9,r20
100049fc:	d8c00515 	stw	r3,20(sp)
10004a00:	d9800715 	stw	r6,28(sp)
10004a04:	da000615 	stw	r8,24(sp)
10004a08:	14e7883a 	add	r19,r2,r19
10004a0c:	0005a080 	call	10005a08 <__mulsi3>
10004a10:	9009883a 	mov	r4,r18
10004a14:	b00b883a 	mov	r5,r22
10004a18:	d8800315 	stw	r2,12(sp)
10004a1c:	0005a080 	call	10005a08 <__mulsi3>
10004a20:	b809883a 	mov	r4,r23
10004a24:	b00b883a 	mov	r5,r22
10004a28:	d8800215 	stw	r2,8(sp)
10004a2c:	0005a080 	call	10005a08 <__mulsi3>
10004a30:	b80b883a 	mov	r5,r23
10004a34:	8009883a 	mov	r4,r16
10004a38:	d8800415 	stw	r2,16(sp)
10004a3c:	0005a080 	call	10005a08 <__mulsi3>
10004a40:	da800317 	ldw	r10,12(sp)
10004a44:	d9c00217 	ldw	r7,8(sp)
10004a48:	d9000017 	ldw	r4,0(sp)
10004a4c:	502ed43a 	srli	r23,r10,16
10004a50:	11c5883a 	add	r2,r2,r7
10004a54:	24e5883a 	add	r18,r4,r19
10004a58:	b885883a 	add	r2,r23,r2
10004a5c:	d8c00517 	ldw	r3,20(sp)
10004a60:	d9800717 	ldw	r6,28(sp)
10004a64:	da000617 	ldw	r8,24(sp)
10004a68:	da400417 	ldw	r9,16(sp)
10004a6c:	11c0022e 	bgeu	r2,r7,10004a78 <__muldf3+0x4f0>
10004a70:	01000074 	movhi	r4,1
10004a74:	4913883a 	add	r9,r9,r4
10004a78:	100ed43a 	srli	r7,r2,16
10004a7c:	1004943a 	slli	r2,r2,16
10004a80:	55ffffcc 	andi	r23,r10,65535
10004a84:	3a53883a 	add	r9,r7,r9
10004a88:	8809883a 	mov	r4,r17
10004a8c:	800b883a 	mov	r5,r16
10004a90:	d8c00515 	stw	r3,20(sp)
10004a94:	d9800715 	stw	r6,28(sp)
10004a98:	da000615 	stw	r8,24(sp)
10004a9c:	da400415 	stw	r9,16(sp)
10004aa0:	15ef883a 	add	r23,r2,r23
10004aa4:	0005a080 	call	10005a08 <__mulsi3>
10004aa8:	8809883a 	mov	r4,r17
10004aac:	b00b883a 	mov	r5,r22
10004ab0:	d8800215 	stw	r2,8(sp)
10004ab4:	0005a080 	call	10005a08 <__mulsi3>
10004ab8:	b00b883a 	mov	r5,r22
10004abc:	a809883a 	mov	r4,r21
10004ac0:	d8800315 	stw	r2,12(sp)
10004ac4:	0005a080 	call	10005a08 <__mulsi3>
10004ac8:	8009883a 	mov	r4,r16
10004acc:	a80b883a 	mov	r5,r21
10004ad0:	1023883a 	mov	r17,r2
10004ad4:	0005a080 	call	10005a08 <__mulsi3>
10004ad8:	d9c00217 	ldw	r7,8(sp)
10004adc:	da800317 	ldw	r10,12(sp)
10004ae0:	d8c00517 	ldw	r3,20(sp)
10004ae4:	3808d43a 	srli	r4,r7,16
10004ae8:	1285883a 	add	r2,r2,r10
10004aec:	d9800717 	ldw	r6,28(sp)
10004af0:	2085883a 	add	r2,r4,r2
10004af4:	da000617 	ldw	r8,24(sp)
10004af8:	da400417 	ldw	r9,16(sp)
10004afc:	1280022e 	bgeu	r2,r10,10004b08 <__muldf3+0x580>
10004b00:	01000074 	movhi	r4,1
10004b04:	8923883a 	add	r17,r17,r4
10004b08:	1008943a 	slli	r4,r2,16
10004b0c:	39ffffcc 	andi	r7,r7,65535
10004b10:	e4b9883a 	add	fp,fp,r18
10004b14:	21cf883a 	add	r7,r4,r7
10004b18:	e4e7803a 	cmpltu	r19,fp,r19
10004b1c:	3d0f883a 	add	r7,r7,r20
10004b20:	bf39883a 	add	fp,r23,fp
10004b24:	99c9883a 	add	r4,r19,r7
10004b28:	e5ef803a 	cmpltu	r23,fp,r23
10004b2c:	490b883a 	add	r5,r9,r4
10004b30:	1004d43a 	srli	r2,r2,16
10004b34:	b965883a 	add	r18,r23,r5
10004b38:	24c9803a 	cmpltu	r4,r4,r19
10004b3c:	3d29803a 	cmpltu	r20,r7,r20
10004b40:	a128b03a 	or	r20,r20,r4
10004b44:	95ef803a 	cmpltu	r23,r18,r23
10004b48:	2a53803a 	cmpltu	r9,r5,r9
10004b4c:	a0a9883a 	add	r20,r20,r2
10004b50:	4deeb03a 	or	r23,r9,r23
10004b54:	a5ef883a 	add	r23,r20,r23
10004b58:	bc63883a 	add	r17,r23,r17
10004b5c:	e004927a 	slli	r2,fp,9
10004b60:	d9000117 	ldw	r4,4(sp)
10004b64:	882e927a 	slli	r23,r17,9
10004b68:	9022d5fa 	srli	r17,r18,23
10004b6c:	e038d5fa 	srli	fp,fp,23
10004b70:	1104b03a 	or	r2,r2,r4
10004b74:	9024927a 	slli	r18,r18,9
10004b78:	1004c03a 	cmpne	r2,r2,zero
10004b7c:	bc62b03a 	or	r17,r23,r17
10004b80:	1738b03a 	or	fp,r2,fp
10004b84:	8880402c 	andhi	r2,r17,256
10004b88:	e4a4b03a 	or	r18,fp,r18
10004b8c:	10000726 	beq	r2,zero,10004bac <__muldf3+0x624>
10004b90:	9006d07a 	srli	r3,r18,1
10004b94:	880497fa 	slli	r2,r17,31
10004b98:	9480004c 	andi	r18,r18,1
10004b9c:	8822d07a 	srli	r17,r17,1
10004ba0:	1ca4b03a 	or	r18,r3,r18
10004ba4:	14a4b03a 	or	r18,r2,r18
10004ba8:	4007883a 	mov	r3,r8
10004bac:	1880ffc4 	addi	r2,r3,1023
10004bb0:	0080460e 	bge	zero,r2,10004ccc <__muldf3+0x744>
10004bb4:	910001cc 	andi	r4,r18,7
10004bb8:	20000726 	beq	r4,zero,10004bd8 <__muldf3+0x650>
10004bbc:	910003cc 	andi	r4,r18,15
10004bc0:	01400104 	movi	r5,4
10004bc4:	21400426 	beq	r4,r5,10004bd8 <__muldf3+0x650>
10004bc8:	9149883a 	add	r4,r18,r5
10004bcc:	24a5803a 	cmpltu	r18,r4,r18
10004bd0:	8ca3883a 	add	r17,r17,r18
10004bd4:	2025883a 	mov	r18,r4
10004bd8:	8900402c 	andhi	r4,r17,256
10004bdc:	20000426 	beq	r4,zero,10004bf0 <__muldf3+0x668>
10004be0:	18810004 	addi	r2,r3,1024
10004be4:	00ffc034 	movhi	r3,65280
10004be8:	18ffffc4 	addi	r3,r3,-1
10004bec:	88e2703a 	and	r17,r17,r3
10004bf0:	00c1ff84 	movi	r3,2046
10004bf4:	18bf1416 	blt	r3,r2,10004848 <__alt_data_end+0xf8004848>
10004bf8:	882c977a 	slli	r22,r17,29
10004bfc:	9024d0fa 	srli	r18,r18,3
10004c00:	8822927a 	slli	r17,r17,9
10004c04:	1081ffcc 	andi	r2,r2,2047
10004c08:	b4acb03a 	or	r22,r22,r18
10004c0c:	8820d33a 	srli	r16,r17,12
10004c10:	3027883a 	mov	r19,r6
10004c14:	003ebb06 	br	10004704 <__alt_data_end+0xf8004704>
10004c18:	8080022c 	andhi	r2,r16,8
10004c1c:	10000926 	beq	r2,zero,10004c44 <__muldf3+0x6bc>
10004c20:	8880022c 	andhi	r2,r17,8
10004c24:	1000071e 	bne	r2,zero,10004c44 <__muldf3+0x6bc>
10004c28:	00800434 	movhi	r2,16
10004c2c:	8c000234 	orhi	r16,r17,8
10004c30:	10bfffc4 	addi	r2,r2,-1
10004c34:	e027883a 	mov	r19,fp
10004c38:	80a0703a 	and	r16,r16,r2
10004c3c:	902d883a 	mov	r22,r18
10004c40:	003f1806 	br	100048a4 <__alt_data_end+0xf80048a4>
10004c44:	00800434 	movhi	r2,16
10004c48:	84000234 	orhi	r16,r16,8
10004c4c:	10bfffc4 	addi	r2,r2,-1
10004c50:	80a0703a 	and	r16,r16,r2
10004c54:	003f1306 	br	100048a4 <__alt_data_end+0xf80048a4>
10004c58:	147ff604 	addi	r17,r2,-40
10004c5c:	3462983a 	sll	r17,r6,r17
10004c60:	0025883a 	mov	r18,zero
10004c64:	003ef406 	br	10004838 <__alt_data_end+0xf8004838>
10004c68:	3009883a 	mov	r4,r6
10004c6c:	d9400215 	stw	r5,8(sp)
10004c70:	d9800715 	stw	r6,28(sp)
10004c74:	da400415 	stw	r9,16(sp)
10004c78:	da800315 	stw	r10,12(sp)
10004c7c:	00059a40 	call	100059a4 <__clzsi2>
10004c80:	10800804 	addi	r2,r2,32
10004c84:	da800317 	ldw	r10,12(sp)
10004c88:	da400417 	ldw	r9,16(sp)
10004c8c:	d9800717 	ldw	r6,28(sp)
10004c90:	d9400217 	ldw	r5,8(sp)
10004c94:	003ede06 	br	10004810 <__alt_data_end+0xf8004810>
10004c98:	143ff604 	addi	r16,r2,-40
10004c9c:	ac20983a 	sll	r16,r21,r16
10004ca0:	002d883a 	mov	r22,zero
10004ca4:	003ec206 	br	100047b0 <__alt_data_end+0xf80047b0>
10004ca8:	d9800715 	stw	r6,28(sp)
10004cac:	d9c00215 	stw	r7,8(sp)
10004cb0:	da400415 	stw	r9,16(sp)
10004cb4:	00059a40 	call	100059a4 <__clzsi2>
10004cb8:	10800804 	addi	r2,r2,32
10004cbc:	da400417 	ldw	r9,16(sp)
10004cc0:	d9c00217 	ldw	r7,8(sp)
10004cc4:	d9800717 	ldw	r6,28(sp)
10004cc8:	003eaf06 	br	10004788 <__alt_data_end+0xf8004788>
10004ccc:	00c00044 	movi	r3,1
10004cd0:	1887c83a 	sub	r3,r3,r2
10004cd4:	01000e04 	movi	r4,56
10004cd8:	20fe8616 	blt	r4,r3,100046f4 <__alt_data_end+0xf80046f4>
10004cdc:	010007c4 	movi	r4,31
10004ce0:	20c01b16 	blt	r4,r3,10004d50 <__muldf3+0x7c8>
10004ce4:	00800804 	movi	r2,32
10004ce8:	10c5c83a 	sub	r2,r2,r3
10004cec:	888a983a 	sll	r5,r17,r2
10004cf0:	90c8d83a 	srl	r4,r18,r3
10004cf4:	9084983a 	sll	r2,r18,r2
10004cf8:	88e2d83a 	srl	r17,r17,r3
10004cfc:	2906b03a 	or	r3,r5,r4
10004d00:	1004c03a 	cmpne	r2,r2,zero
10004d04:	1886b03a 	or	r3,r3,r2
10004d08:	188001cc 	andi	r2,r3,7
10004d0c:	10000726 	beq	r2,zero,10004d2c <__muldf3+0x7a4>
10004d10:	188003cc 	andi	r2,r3,15
10004d14:	01000104 	movi	r4,4
10004d18:	11000426 	beq	r2,r4,10004d2c <__muldf3+0x7a4>
10004d1c:	1805883a 	mov	r2,r3
10004d20:	10c00104 	addi	r3,r2,4
10004d24:	1885803a 	cmpltu	r2,r3,r2
10004d28:	88a3883a 	add	r17,r17,r2
10004d2c:	8880202c 	andhi	r2,r17,128
10004d30:	10001c26 	beq	r2,zero,10004da4 <__muldf3+0x81c>
10004d34:	3027883a 	mov	r19,r6
10004d38:	00800044 	movi	r2,1
10004d3c:	0021883a 	mov	r16,zero
10004d40:	002d883a 	mov	r22,zero
10004d44:	003e6f06 	br	10004704 <__alt_data_end+0xf8004704>
10004d48:	4007883a 	mov	r3,r8
10004d4c:	003f9706 	br	10004bac <__alt_data_end+0xf8004bac>
10004d50:	017ff844 	movi	r5,-31
10004d54:	2885c83a 	sub	r2,r5,r2
10004d58:	888ad83a 	srl	r5,r17,r2
10004d5c:	00800804 	movi	r2,32
10004d60:	18801a26 	beq	r3,r2,10004dcc <__muldf3+0x844>
10004d64:	01001004 	movi	r4,64
10004d68:	20c7c83a 	sub	r3,r4,r3
10004d6c:	88e2983a 	sll	r17,r17,r3
10004d70:	8ca4b03a 	or	r18,r17,r18
10004d74:	9004c03a 	cmpne	r2,r18,zero
10004d78:	2884b03a 	or	r2,r5,r2
10004d7c:	144001cc 	andi	r17,r2,7
10004d80:	88000d1e 	bne	r17,zero,10004db8 <__muldf3+0x830>
10004d84:	0021883a 	mov	r16,zero
10004d88:	102cd0fa 	srli	r22,r2,3
10004d8c:	3027883a 	mov	r19,r6
10004d90:	0005883a 	mov	r2,zero
10004d94:	b46cb03a 	or	r22,r22,r17
10004d98:	003e5a06 	br	10004704 <__alt_data_end+0xf8004704>
10004d9c:	1007883a 	mov	r3,r2
10004da0:	0023883a 	mov	r17,zero
10004da4:	8820927a 	slli	r16,r17,9
10004da8:	1805883a 	mov	r2,r3
10004dac:	8822977a 	slli	r17,r17,29
10004db0:	8020d33a 	srli	r16,r16,12
10004db4:	003ff406 	br	10004d88 <__alt_data_end+0xf8004d88>
10004db8:	10c003cc 	andi	r3,r2,15
10004dbc:	01000104 	movi	r4,4
10004dc0:	193ff626 	beq	r3,r4,10004d9c <__alt_data_end+0xf8004d9c>
10004dc4:	0023883a 	mov	r17,zero
10004dc8:	003fd506 	br	10004d20 <__alt_data_end+0xf8004d20>
10004dcc:	0023883a 	mov	r17,zero
10004dd0:	003fe706 	br	10004d70 <__alt_data_end+0xf8004d70>
10004dd4:	00800434 	movhi	r2,16
10004dd8:	8c000234 	orhi	r16,r17,8
10004ddc:	10bfffc4 	addi	r2,r2,-1
10004de0:	3027883a 	mov	r19,r6
10004de4:	80a0703a 	and	r16,r16,r2
10004de8:	902d883a 	mov	r22,r18
10004dec:	003ead06 	br	100048a4 <__alt_data_end+0xf80048a4>

10004df0 <__subdf3>:
10004df0:	02000434 	movhi	r8,16
10004df4:	423fffc4 	addi	r8,r8,-1
10004df8:	defffb04 	addi	sp,sp,-20
10004dfc:	2a14703a 	and	r10,r5,r8
10004e00:	3812d53a 	srli	r9,r7,20
10004e04:	3a10703a 	and	r8,r7,r8
10004e08:	2006d77a 	srli	r3,r4,29
10004e0c:	3004d77a 	srli	r2,r6,29
10004e10:	dc000015 	stw	r16,0(sp)
10004e14:	501490fa 	slli	r10,r10,3
10004e18:	2820d53a 	srli	r16,r5,20
10004e1c:	401090fa 	slli	r8,r8,3
10004e20:	dc800215 	stw	r18,8(sp)
10004e24:	dc400115 	stw	r17,4(sp)
10004e28:	dfc00415 	stw	ra,16(sp)
10004e2c:	202290fa 	slli	r17,r4,3
10004e30:	dcc00315 	stw	r19,12(sp)
10004e34:	4a41ffcc 	andi	r9,r9,2047
10004e38:	0101ffc4 	movi	r4,2047
10004e3c:	2824d7fa 	srli	r18,r5,31
10004e40:	8401ffcc 	andi	r16,r16,2047
10004e44:	50c6b03a 	or	r3,r10,r3
10004e48:	380ed7fa 	srli	r7,r7,31
10004e4c:	408ab03a 	or	r5,r8,r2
10004e50:	300c90fa 	slli	r6,r6,3
10004e54:	49009626 	beq	r9,r4,100050b0 <__subdf3+0x2c0>
10004e58:	39c0005c 	xori	r7,r7,1
10004e5c:	8245c83a 	sub	r2,r16,r9
10004e60:	3c807426 	beq	r7,r18,10005034 <__subdf3+0x244>
10004e64:	0080af0e 	bge	zero,r2,10005124 <__subdf3+0x334>
10004e68:	48002a1e 	bne	r9,zero,10004f14 <__subdf3+0x124>
10004e6c:	2988b03a 	or	r4,r5,r6
10004e70:	20009a1e 	bne	r4,zero,100050dc <__subdf3+0x2ec>
10004e74:	888001cc 	andi	r2,r17,7
10004e78:	10000726 	beq	r2,zero,10004e98 <__subdf3+0xa8>
10004e7c:	888003cc 	andi	r2,r17,15
10004e80:	01000104 	movi	r4,4
10004e84:	11000426 	beq	r2,r4,10004e98 <__subdf3+0xa8>
10004e88:	890b883a 	add	r5,r17,r4
10004e8c:	2c63803a 	cmpltu	r17,r5,r17
10004e90:	1c47883a 	add	r3,r3,r17
10004e94:	2823883a 	mov	r17,r5
10004e98:	1880202c 	andhi	r2,r3,128
10004e9c:	10005926 	beq	r2,zero,10005004 <__subdf3+0x214>
10004ea0:	84000044 	addi	r16,r16,1
10004ea4:	0081ffc4 	movi	r2,2047
10004ea8:	8080be26 	beq	r16,r2,100051a4 <__subdf3+0x3b4>
10004eac:	017fe034 	movhi	r5,65408
10004eb0:	297fffc4 	addi	r5,r5,-1
10004eb4:	1946703a 	and	r3,r3,r5
10004eb8:	1804977a 	slli	r2,r3,29
10004ebc:	1806927a 	slli	r3,r3,9
10004ec0:	8822d0fa 	srli	r17,r17,3
10004ec4:	8401ffcc 	andi	r16,r16,2047
10004ec8:	180ad33a 	srli	r5,r3,12
10004ecc:	9100004c 	andi	r4,r18,1
10004ed0:	1444b03a 	or	r2,r2,r17
10004ed4:	80c1ffcc 	andi	r3,r16,2047
10004ed8:	1820953a 	slli	r16,r3,20
10004edc:	20c03fcc 	andi	r3,r4,255
10004ee0:	180897fa 	slli	r4,r3,31
10004ee4:	00c00434 	movhi	r3,16
10004ee8:	18ffffc4 	addi	r3,r3,-1
10004eec:	28c6703a 	and	r3,r5,r3
10004ef0:	1c06b03a 	or	r3,r3,r16
10004ef4:	1906b03a 	or	r3,r3,r4
10004ef8:	dfc00417 	ldw	ra,16(sp)
10004efc:	dcc00317 	ldw	r19,12(sp)
10004f00:	dc800217 	ldw	r18,8(sp)
10004f04:	dc400117 	ldw	r17,4(sp)
10004f08:	dc000017 	ldw	r16,0(sp)
10004f0c:	dec00504 	addi	sp,sp,20
10004f10:	f800283a 	ret
10004f14:	0101ffc4 	movi	r4,2047
10004f18:	813fd626 	beq	r16,r4,10004e74 <__alt_data_end+0xf8004e74>
10004f1c:	29402034 	orhi	r5,r5,128
10004f20:	01000e04 	movi	r4,56
10004f24:	2080a316 	blt	r4,r2,100051b4 <__subdf3+0x3c4>
10004f28:	010007c4 	movi	r4,31
10004f2c:	2080c616 	blt	r4,r2,10005248 <__subdf3+0x458>
10004f30:	01000804 	movi	r4,32
10004f34:	2089c83a 	sub	r4,r4,r2
10004f38:	2910983a 	sll	r8,r5,r4
10004f3c:	308ed83a 	srl	r7,r6,r2
10004f40:	3108983a 	sll	r4,r6,r4
10004f44:	2884d83a 	srl	r2,r5,r2
10004f48:	41ccb03a 	or	r6,r8,r7
10004f4c:	2008c03a 	cmpne	r4,r4,zero
10004f50:	310cb03a 	or	r6,r6,r4
10004f54:	898dc83a 	sub	r6,r17,r6
10004f58:	89a3803a 	cmpltu	r17,r17,r6
10004f5c:	1887c83a 	sub	r3,r3,r2
10004f60:	1c47c83a 	sub	r3,r3,r17
10004f64:	3023883a 	mov	r17,r6
10004f68:	1880202c 	andhi	r2,r3,128
10004f6c:	10002326 	beq	r2,zero,10004ffc <__subdf3+0x20c>
10004f70:	04c02034 	movhi	r19,128
10004f74:	9cffffc4 	addi	r19,r19,-1
10004f78:	1ce6703a 	and	r19,r3,r19
10004f7c:	98007a26 	beq	r19,zero,10005168 <__subdf3+0x378>
10004f80:	9809883a 	mov	r4,r19
10004f84:	00059a40 	call	100059a4 <__clzsi2>
10004f88:	113ffe04 	addi	r4,r2,-8
10004f8c:	00c007c4 	movi	r3,31
10004f90:	19007b16 	blt	r3,r4,10005180 <__subdf3+0x390>
10004f94:	00800804 	movi	r2,32
10004f98:	1105c83a 	sub	r2,r2,r4
10004f9c:	8884d83a 	srl	r2,r17,r2
10004fa0:	9906983a 	sll	r3,r19,r4
10004fa4:	8922983a 	sll	r17,r17,r4
10004fa8:	10c4b03a 	or	r2,r2,r3
10004fac:	24007816 	blt	r4,r16,10005190 <__subdf3+0x3a0>
10004fb0:	2421c83a 	sub	r16,r4,r16
10004fb4:	80c00044 	addi	r3,r16,1
10004fb8:	010007c4 	movi	r4,31
10004fbc:	20c09516 	blt	r4,r3,10005214 <__subdf3+0x424>
10004fc0:	01400804 	movi	r5,32
10004fc4:	28cbc83a 	sub	r5,r5,r3
10004fc8:	88c8d83a 	srl	r4,r17,r3
10004fcc:	8962983a 	sll	r17,r17,r5
10004fd0:	114a983a 	sll	r5,r2,r5
10004fd4:	10c6d83a 	srl	r3,r2,r3
10004fd8:	8804c03a 	cmpne	r2,r17,zero
10004fdc:	290ab03a 	or	r5,r5,r4
10004fe0:	28a2b03a 	or	r17,r5,r2
10004fe4:	0021883a 	mov	r16,zero
10004fe8:	003fa206 	br	10004e74 <__alt_data_end+0xf8004e74>
10004fec:	2090b03a 	or	r8,r4,r2
10004ff0:	40018e26 	beq	r8,zero,1000562c <__subdf3+0x83c>
10004ff4:	1007883a 	mov	r3,r2
10004ff8:	2023883a 	mov	r17,r4
10004ffc:	888001cc 	andi	r2,r17,7
10005000:	103f9e1e 	bne	r2,zero,10004e7c <__alt_data_end+0xf8004e7c>
10005004:	1804977a 	slli	r2,r3,29
10005008:	8822d0fa 	srli	r17,r17,3
1000500c:	1810d0fa 	srli	r8,r3,3
10005010:	9100004c 	andi	r4,r18,1
10005014:	1444b03a 	or	r2,r2,r17
10005018:	00c1ffc4 	movi	r3,2047
1000501c:	80c02826 	beq	r16,r3,100050c0 <__subdf3+0x2d0>
10005020:	01400434 	movhi	r5,16
10005024:	297fffc4 	addi	r5,r5,-1
10005028:	80e0703a 	and	r16,r16,r3
1000502c:	414a703a 	and	r5,r8,r5
10005030:	003fa806 	br	10004ed4 <__alt_data_end+0xf8004ed4>
10005034:	0080630e 	bge	zero,r2,100051c4 <__subdf3+0x3d4>
10005038:	48003026 	beq	r9,zero,100050fc <__subdf3+0x30c>
1000503c:	0101ffc4 	movi	r4,2047
10005040:	813f8c26 	beq	r16,r4,10004e74 <__alt_data_end+0xf8004e74>
10005044:	29402034 	orhi	r5,r5,128
10005048:	01000e04 	movi	r4,56
1000504c:	2080a90e 	bge	r4,r2,100052f4 <__subdf3+0x504>
10005050:	298cb03a 	or	r6,r5,r6
10005054:	3012c03a 	cmpne	r9,r6,zero
10005058:	0005883a 	mov	r2,zero
1000505c:	4c53883a 	add	r9,r9,r17
10005060:	4c63803a 	cmpltu	r17,r9,r17
10005064:	10c7883a 	add	r3,r2,r3
10005068:	88c7883a 	add	r3,r17,r3
1000506c:	4823883a 	mov	r17,r9
10005070:	1880202c 	andhi	r2,r3,128
10005074:	1000d026 	beq	r2,zero,100053b8 <__subdf3+0x5c8>
10005078:	84000044 	addi	r16,r16,1
1000507c:	0081ffc4 	movi	r2,2047
10005080:	8080fe26 	beq	r16,r2,1000547c <__subdf3+0x68c>
10005084:	00bfe034 	movhi	r2,65408
10005088:	10bfffc4 	addi	r2,r2,-1
1000508c:	1886703a 	and	r3,r3,r2
10005090:	880ad07a 	srli	r5,r17,1
10005094:	180497fa 	slli	r2,r3,31
10005098:	8900004c 	andi	r4,r17,1
1000509c:	2922b03a 	or	r17,r5,r4
100050a0:	1806d07a 	srli	r3,r3,1
100050a4:	1462b03a 	or	r17,r2,r17
100050a8:	3825883a 	mov	r18,r7
100050ac:	003f7106 	br	10004e74 <__alt_data_end+0xf8004e74>
100050b0:	2984b03a 	or	r2,r5,r6
100050b4:	103f6826 	beq	r2,zero,10004e58 <__alt_data_end+0xf8004e58>
100050b8:	39c03fcc 	andi	r7,r7,255
100050bc:	003f6706 	br	10004e5c <__alt_data_end+0xf8004e5c>
100050c0:	4086b03a 	or	r3,r8,r2
100050c4:	18015226 	beq	r3,zero,10005610 <__subdf3+0x820>
100050c8:	00c00434 	movhi	r3,16
100050cc:	41400234 	orhi	r5,r8,8
100050d0:	18ffffc4 	addi	r3,r3,-1
100050d4:	28ca703a 	and	r5,r5,r3
100050d8:	003f7e06 	br	10004ed4 <__alt_data_end+0xf8004ed4>
100050dc:	10bfffc4 	addi	r2,r2,-1
100050e0:	1000491e 	bne	r2,zero,10005208 <__subdf3+0x418>
100050e4:	898fc83a 	sub	r7,r17,r6
100050e8:	89e3803a 	cmpltu	r17,r17,r7
100050ec:	1947c83a 	sub	r3,r3,r5
100050f0:	1c47c83a 	sub	r3,r3,r17
100050f4:	3823883a 	mov	r17,r7
100050f8:	003f9b06 	br	10004f68 <__alt_data_end+0xf8004f68>
100050fc:	2988b03a 	or	r4,r5,r6
10005100:	203f5c26 	beq	r4,zero,10004e74 <__alt_data_end+0xf8004e74>
10005104:	10bfffc4 	addi	r2,r2,-1
10005108:	1000931e 	bne	r2,zero,10005358 <__subdf3+0x568>
1000510c:	898d883a 	add	r6,r17,r6
10005110:	3463803a 	cmpltu	r17,r6,r17
10005114:	1947883a 	add	r3,r3,r5
10005118:	88c7883a 	add	r3,r17,r3
1000511c:	3023883a 	mov	r17,r6
10005120:	003fd306 	br	10005070 <__alt_data_end+0xf8005070>
10005124:	1000541e 	bne	r2,zero,10005278 <__subdf3+0x488>
10005128:	80800044 	addi	r2,r16,1
1000512c:	1081ffcc 	andi	r2,r2,2047
10005130:	01000044 	movi	r4,1
10005134:	2080a20e 	bge	r4,r2,100053c0 <__subdf3+0x5d0>
10005138:	8989c83a 	sub	r4,r17,r6
1000513c:	8905803a 	cmpltu	r2,r17,r4
10005140:	1967c83a 	sub	r19,r3,r5
10005144:	98a7c83a 	sub	r19,r19,r2
10005148:	9880202c 	andhi	r2,r19,128
1000514c:	10006326 	beq	r2,zero,100052dc <__subdf3+0x4ec>
10005150:	3463c83a 	sub	r17,r6,r17
10005154:	28c7c83a 	sub	r3,r5,r3
10005158:	344d803a 	cmpltu	r6,r6,r17
1000515c:	19a7c83a 	sub	r19,r3,r6
10005160:	3825883a 	mov	r18,r7
10005164:	983f861e 	bne	r19,zero,10004f80 <__alt_data_end+0xf8004f80>
10005168:	8809883a 	mov	r4,r17
1000516c:	00059a40 	call	100059a4 <__clzsi2>
10005170:	10800804 	addi	r2,r2,32
10005174:	113ffe04 	addi	r4,r2,-8
10005178:	00c007c4 	movi	r3,31
1000517c:	193f850e 	bge	r3,r4,10004f94 <__alt_data_end+0xf8004f94>
10005180:	10bff604 	addi	r2,r2,-40
10005184:	8884983a 	sll	r2,r17,r2
10005188:	0023883a 	mov	r17,zero
1000518c:	243f880e 	bge	r4,r16,10004fb0 <__alt_data_end+0xf8004fb0>
10005190:	00ffe034 	movhi	r3,65408
10005194:	18ffffc4 	addi	r3,r3,-1
10005198:	8121c83a 	sub	r16,r16,r4
1000519c:	10c6703a 	and	r3,r2,r3
100051a0:	003f3406 	br	10004e74 <__alt_data_end+0xf8004e74>
100051a4:	9100004c 	andi	r4,r18,1
100051a8:	000b883a 	mov	r5,zero
100051ac:	0005883a 	mov	r2,zero
100051b0:	003f4806 	br	10004ed4 <__alt_data_end+0xf8004ed4>
100051b4:	298cb03a 	or	r6,r5,r6
100051b8:	300cc03a 	cmpne	r6,r6,zero
100051bc:	0005883a 	mov	r2,zero
100051c0:	003f6406 	br	10004f54 <__alt_data_end+0xf8004f54>
100051c4:	10009a1e 	bne	r2,zero,10005430 <__subdf3+0x640>
100051c8:	82400044 	addi	r9,r16,1
100051cc:	4881ffcc 	andi	r2,r9,2047
100051d0:	02800044 	movi	r10,1
100051d4:	5080670e 	bge	r10,r2,10005374 <__subdf3+0x584>
100051d8:	0081ffc4 	movi	r2,2047
100051dc:	4880af26 	beq	r9,r2,1000549c <__subdf3+0x6ac>
100051e0:	898d883a 	add	r6,r17,r6
100051e4:	1945883a 	add	r2,r3,r5
100051e8:	3447803a 	cmpltu	r3,r6,r17
100051ec:	1887883a 	add	r3,r3,r2
100051f0:	182297fa 	slli	r17,r3,31
100051f4:	300cd07a 	srli	r6,r6,1
100051f8:	1806d07a 	srli	r3,r3,1
100051fc:	4821883a 	mov	r16,r9
10005200:	89a2b03a 	or	r17,r17,r6
10005204:	003f1b06 	br	10004e74 <__alt_data_end+0xf8004e74>
10005208:	0101ffc4 	movi	r4,2047
1000520c:	813f441e 	bne	r16,r4,10004f20 <__alt_data_end+0xf8004f20>
10005210:	003f1806 	br	10004e74 <__alt_data_end+0xf8004e74>
10005214:	843ff844 	addi	r16,r16,-31
10005218:	01400804 	movi	r5,32
1000521c:	1408d83a 	srl	r4,r2,r16
10005220:	19405026 	beq	r3,r5,10005364 <__subdf3+0x574>
10005224:	01401004 	movi	r5,64
10005228:	28c7c83a 	sub	r3,r5,r3
1000522c:	10c4983a 	sll	r2,r2,r3
10005230:	88a2b03a 	or	r17,r17,r2
10005234:	8822c03a 	cmpne	r17,r17,zero
10005238:	2462b03a 	or	r17,r4,r17
1000523c:	0007883a 	mov	r3,zero
10005240:	0021883a 	mov	r16,zero
10005244:	003f6d06 	br	10004ffc <__alt_data_end+0xf8004ffc>
10005248:	11fff804 	addi	r7,r2,-32
1000524c:	01000804 	movi	r4,32
10005250:	29ced83a 	srl	r7,r5,r7
10005254:	11004526 	beq	r2,r4,1000536c <__subdf3+0x57c>
10005258:	01001004 	movi	r4,64
1000525c:	2089c83a 	sub	r4,r4,r2
10005260:	2904983a 	sll	r2,r5,r4
10005264:	118cb03a 	or	r6,r2,r6
10005268:	300cc03a 	cmpne	r6,r6,zero
1000526c:	398cb03a 	or	r6,r7,r6
10005270:	0005883a 	mov	r2,zero
10005274:	003f3706 	br	10004f54 <__alt_data_end+0xf8004f54>
10005278:	80002a26 	beq	r16,zero,10005324 <__subdf3+0x534>
1000527c:	0101ffc4 	movi	r4,2047
10005280:	49006626 	beq	r9,r4,1000541c <__subdf3+0x62c>
10005284:	0085c83a 	sub	r2,zero,r2
10005288:	18c02034 	orhi	r3,r3,128
1000528c:	01000e04 	movi	r4,56
10005290:	20807e16 	blt	r4,r2,1000548c <__subdf3+0x69c>
10005294:	010007c4 	movi	r4,31
10005298:	2080e716 	blt	r4,r2,10005638 <__subdf3+0x848>
1000529c:	01000804 	movi	r4,32
100052a0:	2089c83a 	sub	r4,r4,r2
100052a4:	1914983a 	sll	r10,r3,r4
100052a8:	8890d83a 	srl	r8,r17,r2
100052ac:	8908983a 	sll	r4,r17,r4
100052b0:	1884d83a 	srl	r2,r3,r2
100052b4:	5222b03a 	or	r17,r10,r8
100052b8:	2006c03a 	cmpne	r3,r4,zero
100052bc:	88e2b03a 	or	r17,r17,r3
100052c0:	3463c83a 	sub	r17,r6,r17
100052c4:	2885c83a 	sub	r2,r5,r2
100052c8:	344d803a 	cmpltu	r6,r6,r17
100052cc:	1187c83a 	sub	r3,r2,r6
100052d0:	4821883a 	mov	r16,r9
100052d4:	3825883a 	mov	r18,r7
100052d8:	003f2306 	br	10004f68 <__alt_data_end+0xf8004f68>
100052dc:	24d0b03a 	or	r8,r4,r19
100052e0:	40001b1e 	bne	r8,zero,10005350 <__subdf3+0x560>
100052e4:	0005883a 	mov	r2,zero
100052e8:	0009883a 	mov	r4,zero
100052ec:	0021883a 	mov	r16,zero
100052f0:	003f4906 	br	10005018 <__alt_data_end+0xf8005018>
100052f4:	010007c4 	movi	r4,31
100052f8:	20803a16 	blt	r4,r2,100053e4 <__subdf3+0x5f4>
100052fc:	01000804 	movi	r4,32
10005300:	2089c83a 	sub	r4,r4,r2
10005304:	2912983a 	sll	r9,r5,r4
10005308:	3090d83a 	srl	r8,r6,r2
1000530c:	3108983a 	sll	r4,r6,r4
10005310:	2884d83a 	srl	r2,r5,r2
10005314:	4a12b03a 	or	r9,r9,r8
10005318:	2008c03a 	cmpne	r4,r4,zero
1000531c:	4912b03a 	or	r9,r9,r4
10005320:	003f4e06 	br	1000505c <__alt_data_end+0xf800505c>
10005324:	1c48b03a 	or	r4,r3,r17
10005328:	20003c26 	beq	r4,zero,1000541c <__subdf3+0x62c>
1000532c:	0084303a 	nor	r2,zero,r2
10005330:	1000381e 	bne	r2,zero,10005414 <__subdf3+0x624>
10005334:	3463c83a 	sub	r17,r6,r17
10005338:	28c5c83a 	sub	r2,r5,r3
1000533c:	344d803a 	cmpltu	r6,r6,r17
10005340:	1187c83a 	sub	r3,r2,r6
10005344:	4821883a 	mov	r16,r9
10005348:	3825883a 	mov	r18,r7
1000534c:	003f0606 	br	10004f68 <__alt_data_end+0xf8004f68>
10005350:	2023883a 	mov	r17,r4
10005354:	003f0906 	br	10004f7c <__alt_data_end+0xf8004f7c>
10005358:	0101ffc4 	movi	r4,2047
1000535c:	813f3a1e 	bne	r16,r4,10005048 <__alt_data_end+0xf8005048>
10005360:	003ec406 	br	10004e74 <__alt_data_end+0xf8004e74>
10005364:	0005883a 	mov	r2,zero
10005368:	003fb106 	br	10005230 <__alt_data_end+0xf8005230>
1000536c:	0005883a 	mov	r2,zero
10005370:	003fbc06 	br	10005264 <__alt_data_end+0xf8005264>
10005374:	1c44b03a 	or	r2,r3,r17
10005378:	80008e1e 	bne	r16,zero,100055b4 <__subdf3+0x7c4>
1000537c:	1000c826 	beq	r2,zero,100056a0 <__subdf3+0x8b0>
10005380:	2984b03a 	or	r2,r5,r6
10005384:	103ebb26 	beq	r2,zero,10004e74 <__alt_data_end+0xf8004e74>
10005388:	8989883a 	add	r4,r17,r6
1000538c:	1945883a 	add	r2,r3,r5
10005390:	2447803a 	cmpltu	r3,r4,r17
10005394:	1887883a 	add	r3,r3,r2
10005398:	1880202c 	andhi	r2,r3,128
1000539c:	2023883a 	mov	r17,r4
100053a0:	103f1626 	beq	r2,zero,10004ffc <__alt_data_end+0xf8004ffc>
100053a4:	00bfe034 	movhi	r2,65408
100053a8:	10bfffc4 	addi	r2,r2,-1
100053ac:	5021883a 	mov	r16,r10
100053b0:	1886703a 	and	r3,r3,r2
100053b4:	003eaf06 	br	10004e74 <__alt_data_end+0xf8004e74>
100053b8:	3825883a 	mov	r18,r7
100053bc:	003f0f06 	br	10004ffc <__alt_data_end+0xf8004ffc>
100053c0:	1c44b03a 	or	r2,r3,r17
100053c4:	8000251e 	bne	r16,zero,1000545c <__subdf3+0x66c>
100053c8:	1000661e 	bne	r2,zero,10005564 <__subdf3+0x774>
100053cc:	2990b03a 	or	r8,r5,r6
100053d0:	40009626 	beq	r8,zero,1000562c <__subdf3+0x83c>
100053d4:	2807883a 	mov	r3,r5
100053d8:	3023883a 	mov	r17,r6
100053dc:	3825883a 	mov	r18,r7
100053e0:	003ea406 	br	10004e74 <__alt_data_end+0xf8004e74>
100053e4:	127ff804 	addi	r9,r2,-32
100053e8:	01000804 	movi	r4,32
100053ec:	2a52d83a 	srl	r9,r5,r9
100053f0:	11008c26 	beq	r2,r4,10005624 <__subdf3+0x834>
100053f4:	01001004 	movi	r4,64
100053f8:	2085c83a 	sub	r2,r4,r2
100053fc:	2884983a 	sll	r2,r5,r2
10005400:	118cb03a 	or	r6,r2,r6
10005404:	300cc03a 	cmpne	r6,r6,zero
10005408:	4992b03a 	or	r9,r9,r6
1000540c:	0005883a 	mov	r2,zero
10005410:	003f1206 	br	1000505c <__alt_data_end+0xf800505c>
10005414:	0101ffc4 	movi	r4,2047
10005418:	493f9c1e 	bne	r9,r4,1000528c <__alt_data_end+0xf800528c>
1000541c:	2807883a 	mov	r3,r5
10005420:	3023883a 	mov	r17,r6
10005424:	4821883a 	mov	r16,r9
10005428:	3825883a 	mov	r18,r7
1000542c:	003e9106 	br	10004e74 <__alt_data_end+0xf8004e74>
10005430:	80001f1e 	bne	r16,zero,100054b0 <__subdf3+0x6c0>
10005434:	1c48b03a 	or	r4,r3,r17
10005438:	20005a26 	beq	r4,zero,100055a4 <__subdf3+0x7b4>
1000543c:	0084303a 	nor	r2,zero,r2
10005440:	1000561e 	bne	r2,zero,1000559c <__subdf3+0x7ac>
10005444:	89a3883a 	add	r17,r17,r6
10005448:	1945883a 	add	r2,r3,r5
1000544c:	898d803a 	cmpltu	r6,r17,r6
10005450:	3087883a 	add	r3,r6,r2
10005454:	4821883a 	mov	r16,r9
10005458:	003f0506 	br	10005070 <__alt_data_end+0xf8005070>
1000545c:	10002b1e 	bne	r2,zero,1000550c <__subdf3+0x71c>
10005460:	2984b03a 	or	r2,r5,r6
10005464:	10008026 	beq	r2,zero,10005668 <__subdf3+0x878>
10005468:	2807883a 	mov	r3,r5
1000546c:	3023883a 	mov	r17,r6
10005470:	3825883a 	mov	r18,r7
10005474:	0401ffc4 	movi	r16,2047
10005478:	003e7e06 	br	10004e74 <__alt_data_end+0xf8004e74>
1000547c:	3809883a 	mov	r4,r7
10005480:	0011883a 	mov	r8,zero
10005484:	0005883a 	mov	r2,zero
10005488:	003ee306 	br	10005018 <__alt_data_end+0xf8005018>
1000548c:	1c62b03a 	or	r17,r3,r17
10005490:	8822c03a 	cmpne	r17,r17,zero
10005494:	0005883a 	mov	r2,zero
10005498:	003f8906 	br	100052c0 <__alt_data_end+0xf80052c0>
1000549c:	3809883a 	mov	r4,r7
100054a0:	4821883a 	mov	r16,r9
100054a4:	0011883a 	mov	r8,zero
100054a8:	0005883a 	mov	r2,zero
100054ac:	003eda06 	br	10005018 <__alt_data_end+0xf8005018>
100054b0:	0101ffc4 	movi	r4,2047
100054b4:	49003b26 	beq	r9,r4,100055a4 <__subdf3+0x7b4>
100054b8:	0085c83a 	sub	r2,zero,r2
100054bc:	18c02034 	orhi	r3,r3,128
100054c0:	01000e04 	movi	r4,56
100054c4:	20806e16 	blt	r4,r2,10005680 <__subdf3+0x890>
100054c8:	010007c4 	movi	r4,31
100054cc:	20807716 	blt	r4,r2,100056ac <__subdf3+0x8bc>
100054d0:	01000804 	movi	r4,32
100054d4:	2089c83a 	sub	r4,r4,r2
100054d8:	1914983a 	sll	r10,r3,r4
100054dc:	8890d83a 	srl	r8,r17,r2
100054e0:	8908983a 	sll	r4,r17,r4
100054e4:	1884d83a 	srl	r2,r3,r2
100054e8:	5222b03a 	or	r17,r10,r8
100054ec:	2006c03a 	cmpne	r3,r4,zero
100054f0:	88e2b03a 	or	r17,r17,r3
100054f4:	89a3883a 	add	r17,r17,r6
100054f8:	1145883a 	add	r2,r2,r5
100054fc:	898d803a 	cmpltu	r6,r17,r6
10005500:	3087883a 	add	r3,r6,r2
10005504:	4821883a 	mov	r16,r9
10005508:	003ed906 	br	10005070 <__alt_data_end+0xf8005070>
1000550c:	2984b03a 	or	r2,r5,r6
10005510:	10004226 	beq	r2,zero,1000561c <__subdf3+0x82c>
10005514:	1808d0fa 	srli	r4,r3,3
10005518:	8822d0fa 	srli	r17,r17,3
1000551c:	1806977a 	slli	r3,r3,29
10005520:	2080022c 	andhi	r2,r4,8
10005524:	1c62b03a 	or	r17,r3,r17
10005528:	10000826 	beq	r2,zero,1000554c <__subdf3+0x75c>
1000552c:	2812d0fa 	srli	r9,r5,3
10005530:	4880022c 	andhi	r2,r9,8
10005534:	1000051e 	bne	r2,zero,1000554c <__subdf3+0x75c>
10005538:	300cd0fa 	srli	r6,r6,3
1000553c:	2804977a 	slli	r2,r5,29
10005540:	4809883a 	mov	r4,r9
10005544:	3825883a 	mov	r18,r7
10005548:	11a2b03a 	or	r17,r2,r6
1000554c:	8806d77a 	srli	r3,r17,29
10005550:	200890fa 	slli	r4,r4,3
10005554:	882290fa 	slli	r17,r17,3
10005558:	0401ffc4 	movi	r16,2047
1000555c:	1906b03a 	or	r3,r3,r4
10005560:	003e4406 	br	10004e74 <__alt_data_end+0xf8004e74>
10005564:	2984b03a 	or	r2,r5,r6
10005568:	103e4226 	beq	r2,zero,10004e74 <__alt_data_end+0xf8004e74>
1000556c:	8989c83a 	sub	r4,r17,r6
10005570:	8911803a 	cmpltu	r8,r17,r4
10005574:	1945c83a 	sub	r2,r3,r5
10005578:	1205c83a 	sub	r2,r2,r8
1000557c:	1200202c 	andhi	r8,r2,128
10005580:	403e9a26 	beq	r8,zero,10004fec <__alt_data_end+0xf8004fec>
10005584:	3463c83a 	sub	r17,r6,r17
10005588:	28c5c83a 	sub	r2,r5,r3
1000558c:	344d803a 	cmpltu	r6,r6,r17
10005590:	1187c83a 	sub	r3,r2,r6
10005594:	3825883a 	mov	r18,r7
10005598:	003e3606 	br	10004e74 <__alt_data_end+0xf8004e74>
1000559c:	0101ffc4 	movi	r4,2047
100055a0:	493fc71e 	bne	r9,r4,100054c0 <__alt_data_end+0xf80054c0>
100055a4:	2807883a 	mov	r3,r5
100055a8:	3023883a 	mov	r17,r6
100055ac:	4821883a 	mov	r16,r9
100055b0:	003e3006 	br	10004e74 <__alt_data_end+0xf8004e74>
100055b4:	10003626 	beq	r2,zero,10005690 <__subdf3+0x8a0>
100055b8:	2984b03a 	or	r2,r5,r6
100055bc:	10001726 	beq	r2,zero,1000561c <__subdf3+0x82c>
100055c0:	1808d0fa 	srli	r4,r3,3
100055c4:	8822d0fa 	srli	r17,r17,3
100055c8:	1806977a 	slli	r3,r3,29
100055cc:	2080022c 	andhi	r2,r4,8
100055d0:	1c62b03a 	or	r17,r3,r17
100055d4:	10000726 	beq	r2,zero,100055f4 <__subdf3+0x804>
100055d8:	2812d0fa 	srli	r9,r5,3
100055dc:	4880022c 	andhi	r2,r9,8
100055e0:	1000041e 	bne	r2,zero,100055f4 <__subdf3+0x804>
100055e4:	300cd0fa 	srli	r6,r6,3
100055e8:	2804977a 	slli	r2,r5,29
100055ec:	4809883a 	mov	r4,r9
100055f0:	11a2b03a 	or	r17,r2,r6
100055f4:	8806d77a 	srli	r3,r17,29
100055f8:	200890fa 	slli	r4,r4,3
100055fc:	882290fa 	slli	r17,r17,3
10005600:	3825883a 	mov	r18,r7
10005604:	1906b03a 	or	r3,r3,r4
10005608:	0401ffc4 	movi	r16,2047
1000560c:	003e1906 	br	10004e74 <__alt_data_end+0xf8004e74>
10005610:	000b883a 	mov	r5,zero
10005614:	0005883a 	mov	r2,zero
10005618:	003e2e06 	br	10004ed4 <__alt_data_end+0xf8004ed4>
1000561c:	0401ffc4 	movi	r16,2047
10005620:	003e1406 	br	10004e74 <__alt_data_end+0xf8004e74>
10005624:	0005883a 	mov	r2,zero
10005628:	003f7506 	br	10005400 <__alt_data_end+0xf8005400>
1000562c:	0005883a 	mov	r2,zero
10005630:	0009883a 	mov	r4,zero
10005634:	003e7806 	br	10005018 <__alt_data_end+0xf8005018>
10005638:	123ff804 	addi	r8,r2,-32
1000563c:	01000804 	movi	r4,32
10005640:	1a10d83a 	srl	r8,r3,r8
10005644:	11002526 	beq	r2,r4,100056dc <__subdf3+0x8ec>
10005648:	01001004 	movi	r4,64
1000564c:	2085c83a 	sub	r2,r4,r2
10005650:	1884983a 	sll	r2,r3,r2
10005654:	1444b03a 	or	r2,r2,r17
10005658:	1004c03a 	cmpne	r2,r2,zero
1000565c:	40a2b03a 	or	r17,r8,r2
10005660:	0005883a 	mov	r2,zero
10005664:	003f1606 	br	100052c0 <__alt_data_end+0xf80052c0>
10005668:	02000434 	movhi	r8,16
1000566c:	0009883a 	mov	r4,zero
10005670:	423fffc4 	addi	r8,r8,-1
10005674:	00bfffc4 	movi	r2,-1
10005678:	0401ffc4 	movi	r16,2047
1000567c:	003e6606 	br	10005018 <__alt_data_end+0xf8005018>
10005680:	1c62b03a 	or	r17,r3,r17
10005684:	8822c03a 	cmpne	r17,r17,zero
10005688:	0005883a 	mov	r2,zero
1000568c:	003f9906 	br	100054f4 <__alt_data_end+0xf80054f4>
10005690:	2807883a 	mov	r3,r5
10005694:	3023883a 	mov	r17,r6
10005698:	0401ffc4 	movi	r16,2047
1000569c:	003df506 	br	10004e74 <__alt_data_end+0xf8004e74>
100056a0:	2807883a 	mov	r3,r5
100056a4:	3023883a 	mov	r17,r6
100056a8:	003df206 	br	10004e74 <__alt_data_end+0xf8004e74>
100056ac:	123ff804 	addi	r8,r2,-32
100056b0:	01000804 	movi	r4,32
100056b4:	1a10d83a 	srl	r8,r3,r8
100056b8:	11000a26 	beq	r2,r4,100056e4 <__subdf3+0x8f4>
100056bc:	01001004 	movi	r4,64
100056c0:	2085c83a 	sub	r2,r4,r2
100056c4:	1884983a 	sll	r2,r3,r2
100056c8:	1444b03a 	or	r2,r2,r17
100056cc:	1004c03a 	cmpne	r2,r2,zero
100056d0:	40a2b03a 	or	r17,r8,r2
100056d4:	0005883a 	mov	r2,zero
100056d8:	003f8606 	br	100054f4 <__alt_data_end+0xf80054f4>
100056dc:	0005883a 	mov	r2,zero
100056e0:	003fdc06 	br	10005654 <__alt_data_end+0xf8005654>
100056e4:	0005883a 	mov	r2,zero
100056e8:	003ff706 	br	100056c8 <__alt_data_end+0xf80056c8>

100056ec <__extendsfdf2>:
100056ec:	200ad5fa 	srli	r5,r4,23
100056f0:	defffd04 	addi	sp,sp,-12
100056f4:	dc400115 	stw	r17,4(sp)
100056f8:	29403fcc 	andi	r5,r5,255
100056fc:	29800044 	addi	r6,r5,1
10005700:	04402034 	movhi	r17,128
10005704:	dc000015 	stw	r16,0(sp)
10005708:	8c7fffc4 	addi	r17,r17,-1
1000570c:	dfc00215 	stw	ra,8(sp)
10005710:	31803fcc 	andi	r6,r6,255
10005714:	00800044 	movi	r2,1
10005718:	8922703a 	and	r17,r17,r4
1000571c:	2020d7fa 	srli	r16,r4,31
10005720:	1180110e 	bge	r2,r6,10005768 <__extendsfdf2+0x7c>
10005724:	880cd0fa 	srli	r6,r17,3
10005728:	8822977a 	slli	r17,r17,29
1000572c:	2940e004 	addi	r5,r5,896
10005730:	2941ffcc 	andi	r5,r5,2047
10005734:	2804953a 	slli	r2,r5,20
10005738:	01400434 	movhi	r5,16
1000573c:	800697fa 	slli	r3,r16,31
10005740:	297fffc4 	addi	r5,r5,-1
10005744:	314a703a 	and	r5,r6,r5
10005748:	288ab03a 	or	r5,r5,r2
1000574c:	28c6b03a 	or	r3,r5,r3
10005750:	8805883a 	mov	r2,r17
10005754:	dfc00217 	ldw	ra,8(sp)
10005758:	dc400117 	ldw	r17,4(sp)
1000575c:	dc000017 	ldw	r16,0(sp)
10005760:	dec00304 	addi	sp,sp,12
10005764:	f800283a 	ret
10005768:	2800111e 	bne	r5,zero,100057b0 <__extendsfdf2+0xc4>
1000576c:	88001c26 	beq	r17,zero,100057e0 <__extendsfdf2+0xf4>
10005770:	8809883a 	mov	r4,r17
10005774:	00059a40 	call	100059a4 <__clzsi2>
10005778:	00c00284 	movi	r3,10
1000577c:	18801b16 	blt	r3,r2,100057ec <__extendsfdf2+0x100>
10005780:	018002c4 	movi	r6,11
10005784:	308dc83a 	sub	r6,r6,r2
10005788:	11000544 	addi	r4,r2,21
1000578c:	8986d83a 	srl	r3,r17,r6
10005790:	8922983a 	sll	r17,r17,r4
10005794:	0180e244 	movi	r6,905
10005798:	01400434 	movhi	r5,16
1000579c:	3085c83a 	sub	r2,r6,r2
100057a0:	297fffc4 	addi	r5,r5,-1
100057a4:	194c703a 	and	r6,r3,r5
100057a8:	1141ffcc 	andi	r5,r2,2047
100057ac:	003fe006 	br	10005730 <__alt_data_end+0xf8005730>
100057b0:	88000826 	beq	r17,zero,100057d4 <__extendsfdf2+0xe8>
100057b4:	880cd0fa 	srli	r6,r17,3
100057b8:	00800434 	movhi	r2,16
100057bc:	10bfffc4 	addi	r2,r2,-1
100057c0:	31800234 	orhi	r6,r6,8
100057c4:	8822977a 	slli	r17,r17,29
100057c8:	308c703a 	and	r6,r6,r2
100057cc:	0141ffc4 	movi	r5,2047
100057d0:	003fd706 	br	10005730 <__alt_data_end+0xf8005730>
100057d4:	0141ffc4 	movi	r5,2047
100057d8:	000d883a 	mov	r6,zero
100057dc:	003fd406 	br	10005730 <__alt_data_end+0xf8005730>
100057e0:	000b883a 	mov	r5,zero
100057e4:	000d883a 	mov	r6,zero
100057e8:	003fd106 	br	10005730 <__alt_data_end+0xf8005730>
100057ec:	11bffd44 	addi	r6,r2,-11
100057f0:	8986983a 	sll	r3,r17,r6
100057f4:	0023883a 	mov	r17,zero
100057f8:	003fe606 	br	10005794 <__alt_data_end+0xf8005794>

100057fc <__truncdfsf2>:
100057fc:	2810d53a 	srli	r8,r5,20
10005800:	01c00434 	movhi	r7,16
10005804:	39ffffc4 	addi	r7,r7,-1
10005808:	29ce703a 	and	r7,r5,r7
1000580c:	4201ffcc 	andi	r8,r8,2047
10005810:	380e90fa 	slli	r7,r7,3
10005814:	200cd77a 	srli	r6,r4,29
10005818:	42400044 	addi	r9,r8,1
1000581c:	4a41ffcc 	andi	r9,r9,2047
10005820:	00c00044 	movi	r3,1
10005824:	280ad7fa 	srli	r5,r5,31
10005828:	31ceb03a 	or	r7,r6,r7
1000582c:	200490fa 	slli	r2,r4,3
10005830:	1a40230e 	bge	r3,r9,100058c0 <__truncdfsf2+0xc4>
10005834:	40ff2004 	addi	r3,r8,-896
10005838:	01803f84 	movi	r6,254
1000583c:	30c01516 	blt	r6,r3,10005894 <__truncdfsf2+0x98>
10005840:	00c0380e 	bge	zero,r3,10005924 <__truncdfsf2+0x128>
10005844:	200c91ba 	slli	r6,r4,6
10005848:	380e90fa 	slli	r7,r7,3
1000584c:	1004d77a 	srli	r2,r2,29
10005850:	300cc03a 	cmpne	r6,r6,zero
10005854:	31ccb03a 	or	r6,r6,r7
10005858:	308cb03a 	or	r6,r6,r2
1000585c:	308001cc 	andi	r2,r6,7
10005860:	10000426 	beq	r2,zero,10005874 <__truncdfsf2+0x78>
10005864:	308003cc 	andi	r2,r6,15
10005868:	01000104 	movi	r4,4
1000586c:	11000126 	beq	r2,r4,10005874 <__truncdfsf2+0x78>
10005870:	31800104 	addi	r6,r6,4
10005874:	3081002c 	andhi	r2,r6,1024
10005878:	10001626 	beq	r2,zero,100058d4 <__truncdfsf2+0xd8>
1000587c:	18c00044 	addi	r3,r3,1
10005880:	00803fc4 	movi	r2,255
10005884:	18800326 	beq	r3,r2,10005894 <__truncdfsf2+0x98>
10005888:	300c91ba 	slli	r6,r6,6
1000588c:	300cd27a 	srli	r6,r6,9
10005890:	00000206 	br	1000589c <__truncdfsf2+0xa0>
10005894:	00ffffc4 	movi	r3,-1
10005898:	000d883a 	mov	r6,zero
1000589c:	18c03fcc 	andi	r3,r3,255
100058a0:	180895fa 	slli	r4,r3,23
100058a4:	00c02034 	movhi	r3,128
100058a8:	280a97fa 	slli	r5,r5,31
100058ac:	18ffffc4 	addi	r3,r3,-1
100058b0:	30c6703a 	and	r3,r6,r3
100058b4:	1906b03a 	or	r3,r3,r4
100058b8:	1944b03a 	or	r2,r3,r5
100058bc:	f800283a 	ret
100058c0:	40000b1e 	bne	r8,zero,100058f0 <__truncdfsf2+0xf4>
100058c4:	388cb03a 	or	r6,r7,r2
100058c8:	0007883a 	mov	r3,zero
100058cc:	30000426 	beq	r6,zero,100058e0 <__truncdfsf2+0xe4>
100058d0:	01800144 	movi	r6,5
100058d4:	00803fc4 	movi	r2,255
100058d8:	300cd0fa 	srli	r6,r6,3
100058dc:	18800a26 	beq	r3,r2,10005908 <__truncdfsf2+0x10c>
100058e0:	00802034 	movhi	r2,128
100058e4:	10bfffc4 	addi	r2,r2,-1
100058e8:	308c703a 	and	r6,r6,r2
100058ec:	003feb06 	br	1000589c <__alt_data_end+0xf800589c>
100058f0:	3888b03a 	or	r4,r7,r2
100058f4:	203fe726 	beq	r4,zero,10005894 <__alt_data_end+0xf8005894>
100058f8:	380c90fa 	slli	r6,r7,3
100058fc:	00c03fc4 	movi	r3,255
10005900:	31808034 	orhi	r6,r6,512
10005904:	003fd506 	br	1000585c <__alt_data_end+0xf800585c>
10005908:	303fe226 	beq	r6,zero,10005894 <__alt_data_end+0xf8005894>
1000590c:	00802034 	movhi	r2,128
10005910:	31801034 	orhi	r6,r6,64
10005914:	10bfffc4 	addi	r2,r2,-1
10005918:	00ffffc4 	movi	r3,-1
1000591c:	308c703a 	and	r6,r6,r2
10005920:	003fde06 	br	1000589c <__alt_data_end+0xf800589c>
10005924:	013ffa44 	movi	r4,-23
10005928:	19000e16 	blt	r3,r4,10005964 <__truncdfsf2+0x168>
1000592c:	01000784 	movi	r4,30
10005930:	20c9c83a 	sub	r4,r4,r3
10005934:	018007c4 	movi	r6,31
10005938:	39c02034 	orhi	r7,r7,128
1000593c:	31000b16 	blt	r6,r4,1000596c <__truncdfsf2+0x170>
10005940:	423f2084 	addi	r8,r8,-894
10005944:	120c983a 	sll	r6,r2,r8
10005948:	3a0e983a 	sll	r7,r7,r8
1000594c:	1104d83a 	srl	r2,r2,r4
10005950:	300cc03a 	cmpne	r6,r6,zero
10005954:	31ceb03a 	or	r7,r6,r7
10005958:	388cb03a 	or	r6,r7,r2
1000595c:	0007883a 	mov	r3,zero
10005960:	003fbe06 	br	1000585c <__alt_data_end+0xf800585c>
10005964:	0007883a 	mov	r3,zero
10005968:	003fd906 	br	100058d0 <__alt_data_end+0xf80058d0>
1000596c:	01bfff84 	movi	r6,-2
10005970:	30cdc83a 	sub	r6,r6,r3
10005974:	00c00804 	movi	r3,32
10005978:	398cd83a 	srl	r6,r7,r6
1000597c:	20c00726 	beq	r4,r3,1000599c <__truncdfsf2+0x1a0>
10005980:	423f2884 	addi	r8,r8,-862
10005984:	3a0e983a 	sll	r7,r7,r8
10005988:	3884b03a 	or	r2,r7,r2
1000598c:	1004c03a 	cmpne	r2,r2,zero
10005990:	118cb03a 	or	r6,r2,r6
10005994:	0007883a 	mov	r3,zero
10005998:	003fb006 	br	1000585c <__alt_data_end+0xf800585c>
1000599c:	000f883a 	mov	r7,zero
100059a0:	003ff906 	br	10005988 <__alt_data_end+0xf8005988>

100059a4 <__clzsi2>:
100059a4:	00bfffd4 	movui	r2,65535
100059a8:	11000536 	bltu	r2,r4,100059c0 <__clzsi2+0x1c>
100059ac:	00803fc4 	movi	r2,255
100059b0:	11000f36 	bltu	r2,r4,100059f0 <__clzsi2+0x4c>
100059b4:	00800804 	movi	r2,32
100059b8:	0007883a 	mov	r3,zero
100059bc:	00000506 	br	100059d4 <__clzsi2+0x30>
100059c0:	00804034 	movhi	r2,256
100059c4:	10bfffc4 	addi	r2,r2,-1
100059c8:	11000c2e 	bgeu	r2,r4,100059fc <__clzsi2+0x58>
100059cc:	00800204 	movi	r2,8
100059d0:	00c00604 	movi	r3,24
100059d4:	20c8d83a 	srl	r4,r4,r3
100059d8:	00c40374 	movhi	r3,4109
100059dc:	18fcd504 	addi	r3,r3,-3244
100059e0:	1909883a 	add	r4,r3,r4
100059e4:	20c00003 	ldbu	r3,0(r4)
100059e8:	10c5c83a 	sub	r2,r2,r3
100059ec:	f800283a 	ret
100059f0:	00800604 	movi	r2,24
100059f4:	00c00204 	movi	r3,8
100059f8:	003ff606 	br	100059d4 <__alt_data_end+0xf80059d4>
100059fc:	00800404 	movi	r2,16
10005a00:	1007883a 	mov	r3,r2
10005a04:	003ff306 	br	100059d4 <__alt_data_end+0xf80059d4>

10005a08 <__mulsi3>:
10005a08:	0005883a 	mov	r2,zero
10005a0c:	20000726 	beq	r4,zero,10005a2c <__mulsi3+0x24>
10005a10:	20c0004c 	andi	r3,r4,1
10005a14:	2008d07a 	srli	r4,r4,1
10005a18:	18000126 	beq	r3,zero,10005a20 <__mulsi3+0x18>
10005a1c:	1145883a 	add	r2,r2,r5
10005a20:	294b883a 	add	r5,r5,r5
10005a24:	203ffa1e 	bne	r4,zero,10005a10 <__alt_data_end+0xf8005a10>
10005a28:	f800283a 	ret
10005a2c:	f800283a 	ret

10005a30 <atoi>:

#ifndef _REENT_ONLY
int
_DEFUN (atoi, (s),
	_CONST char *s)
{
10005a30:	defffd04 	addi	sp,sp,-12
10005a34:	dfc00215 	stw	ra,8(sp)
10005a38:	df000115 	stw	fp,4(sp)
10005a3c:	df000104 	addi	fp,sp,4
10005a40:	e13fff15 	stw	r4,-4(fp)
  return (int) strtol (s, NULL, 10);
10005a44:	01800284 	movi	r6,10
10005a48:	000b883a 	mov	r5,zero
10005a4c:	e13fff17 	ldw	r4,-4(fp)
10005a50:	0008c680 	call	10008c68 <strtol>
}
10005a54:	e037883a 	mov	sp,fp
10005a58:	dfc00117 	ldw	ra,4(sp)
10005a5c:	df000017 	ldw	fp,0(sp)
10005a60:	dec00204 	addi	sp,sp,8
10005a64:	f800283a 	ret

10005a68 <_atoi_r>:

int
_DEFUN (_atoi_r, (s),
	struct _reent *ptr _AND
	_CONST char *s)
{
10005a68:	defffc04 	addi	sp,sp,-16
10005a6c:	dfc00315 	stw	ra,12(sp)
10005a70:	df000215 	stw	fp,8(sp)
10005a74:	df000204 	addi	fp,sp,8
10005a78:	e13ffe15 	stw	r4,-8(fp)
10005a7c:	e17fff15 	stw	r5,-4(fp)
  return (int) _strtol_r (ptr, s, NULL, 10);
10005a80:	01c00284 	movi	r7,10
10005a84:	000d883a 	mov	r6,zero
10005a88:	e17fff17 	ldw	r5,-4(fp)
10005a8c:	e13ffe17 	ldw	r4,-8(fp)
10005a90:	000897c0 	call	1000897c <_strtol_r>
}
10005a94:	e037883a 	mov	sp,fp
10005a98:	dfc00117 	ldw	ra,4(sp)
10005a9c:	df000017 	ldw	fp,0(sp)
10005aa0:	dec00204 	addi	sp,sp,8
10005aa4:	f800283a 	ret

10005aa8 <calloc>:

_PTR
_DEFUN (calloc, (n, size),
	size_t n _AND
	size_t size)
{
10005aa8:	defffc04 	addi	sp,sp,-16
10005aac:	dfc00315 	stw	ra,12(sp)
10005ab0:	df000215 	stw	fp,8(sp)
10005ab4:	df000204 	addi	fp,sp,8
10005ab8:	e13ffe15 	stw	r4,-8(fp)
10005abc:	e17fff15 	stw	r5,-4(fp)
  return _calloc_r (_REENT, n, size);
10005ac0:	008403b4 	movhi	r2,4110
10005ac4:	10a45004 	addi	r2,r2,-28352
10005ac8:	10800017 	ldw	r2,0(r2)
10005acc:	e1bfff17 	ldw	r6,-4(fp)
10005ad0:	e17ffe17 	ldw	r5,-8(fp)
10005ad4:	1009883a 	mov	r4,r2
10005ad8:	0005af00 	call	10005af0 <_calloc_r>
}
10005adc:	e037883a 	mov	sp,fp
10005ae0:	dfc00117 	ldw	ra,4(sp)
10005ae4:	df000017 	ldw	fp,0(sp)
10005ae8:	dec00204 	addi	sp,sp,8
10005aec:	f800283a 	ret

10005af0 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
10005af0:	defff504 	addi	sp,sp,-44
10005af4:	dfc00a15 	stw	ra,40(sp)
10005af8:	df000915 	stw	fp,36(sp)
10005afc:	df000904 	addi	fp,sp,36
10005b00:	e13ffd15 	stw	r4,-12(fp)
10005b04:	e17ffe15 	stw	r5,-8(fp)
10005b08:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
10005b0c:	e17fff17 	ldw	r5,-4(fp)
10005b10:	e13ffe17 	ldw	r4,-8(fp)
10005b14:	0005a080 	call	10005a08 <__mulsi3>
10005b18:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
10005b1c:	e17ff817 	ldw	r5,-32(fp)
10005b20:	e13ffd17 	ldw	r4,-12(fp)
10005b24:	00064080 	call	10006408 <_malloc_r>
10005b28:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
10005b2c:	e0bff917 	ldw	r2,-28(fp)
10005b30:	1000021e 	bne	r2,zero,10005b3c <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
10005b34:	0005883a 	mov	r2,zero
10005b38:	00004106 	br	10005c40 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
10005b3c:	e0bff917 	ldw	r2,-28(fp)
10005b40:	10bffe04 	addi	r2,r2,-8
10005b44:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
10005b48:	e0bffa17 	ldw	r2,-24(fp)
10005b4c:	10c00117 	ldw	r3,4(r2)
10005b50:	00bfff04 	movi	r2,-4
10005b54:	1884703a 	and	r2,r3,r2
10005b58:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
10005b5c:	e0bffb17 	ldw	r2,-20(fp)
10005b60:	10bfff04 	addi	r2,r2,-4
10005b64:	e0bffc15 	stw	r2,-16(fp)
10005b68:	e0bffc17 	ldw	r2,-16(fp)
10005b6c:	10800968 	cmpgeui	r2,r2,37
10005b70:	10002e1e 	bne	r2,zero,10005c2c <_calloc_r+0x13c>
10005b74:	e0bff917 	ldw	r2,-28(fp)
10005b78:	e0bff715 	stw	r2,-36(fp)
10005b7c:	e0bffc17 	ldw	r2,-16(fp)
10005b80:	10800530 	cmpltui	r2,r2,20
10005b84:	10001e1e 	bne	r2,zero,10005c00 <_calloc_r+0x110>
10005b88:	e0bff717 	ldw	r2,-36(fp)
10005b8c:	10c00104 	addi	r3,r2,4
10005b90:	e0fff715 	stw	r3,-36(fp)
10005b94:	10000015 	stw	zero,0(r2)
10005b98:	e0bff717 	ldw	r2,-36(fp)
10005b9c:	10c00104 	addi	r3,r2,4
10005ba0:	e0fff715 	stw	r3,-36(fp)
10005ba4:	10000015 	stw	zero,0(r2)
10005ba8:	e0bffc17 	ldw	r2,-16(fp)
10005bac:	10800730 	cmpltui	r2,r2,28
10005bb0:	1000131e 	bne	r2,zero,10005c00 <_calloc_r+0x110>
10005bb4:	e0bff717 	ldw	r2,-36(fp)
10005bb8:	10c00104 	addi	r3,r2,4
10005bbc:	e0fff715 	stw	r3,-36(fp)
10005bc0:	10000015 	stw	zero,0(r2)
10005bc4:	e0bff717 	ldw	r2,-36(fp)
10005bc8:	10c00104 	addi	r3,r2,4
10005bcc:	e0fff715 	stw	r3,-36(fp)
10005bd0:	10000015 	stw	zero,0(r2)
10005bd4:	e0bffc17 	ldw	r2,-16(fp)
10005bd8:	10800930 	cmpltui	r2,r2,36
10005bdc:	1000081e 	bne	r2,zero,10005c00 <_calloc_r+0x110>
10005be0:	e0bff717 	ldw	r2,-36(fp)
10005be4:	10c00104 	addi	r3,r2,4
10005be8:	e0fff715 	stw	r3,-36(fp)
10005bec:	10000015 	stw	zero,0(r2)
10005bf0:	e0bff717 	ldw	r2,-36(fp)
10005bf4:	10c00104 	addi	r3,r2,4
10005bf8:	e0fff715 	stw	r3,-36(fp)
10005bfc:	10000015 	stw	zero,0(r2)
10005c00:	e0bff717 	ldw	r2,-36(fp)
10005c04:	10c00104 	addi	r3,r2,4
10005c08:	e0fff715 	stw	r3,-36(fp)
10005c0c:	10000015 	stw	zero,0(r2)
10005c10:	e0bff717 	ldw	r2,-36(fp)
10005c14:	10c00104 	addi	r3,r2,4
10005c18:	e0fff715 	stw	r3,-36(fp)
10005c1c:	10000015 	stw	zero,0(r2)
10005c20:	e0bff717 	ldw	r2,-36(fp)
10005c24:	10000015 	stw	zero,0(r2)
10005c28:	00000406 	br	10005c3c <_calloc_r+0x14c>
10005c2c:	e1bffc17 	ldw	r6,-16(fp)
10005c30:	000b883a 	mov	r5,zero
10005c34:	e13ff917 	ldw	r4,-28(fp)
10005c38:	0006f840 	call	10006f84 <memset>
    return mem;
10005c3c:	e0bff917 	ldw	r2,-28(fp)
  }
}
10005c40:	e037883a 	mov	sp,fp
10005c44:	dfc00117 	ldw	ra,4(sp)
10005c48:	df000017 	ldw	fp,0(sp)
10005c4c:	dec00204 	addi	sp,sp,8
10005c50:	f800283a 	ret

10005c54 <_drand48_r>:
#include "rand48.h"

double
_DEFUN (_drand48_r, (r),
       struct _reent *r)
{
10005c54:	defffd04 	addi	sp,sp,-12
10005c58:	dfc00215 	stw	ra,8(sp)
10005c5c:	df000115 	stw	fp,4(sp)
10005c60:	df000104 	addi	fp,sp,4
10005c64:	e13fff15 	stw	r4,-4(fp)
  _REENT_CHECK_RAND48(r);
  return _erand48_r(r, __rand48_seed);
10005c68:	e0bfff17 	ldw	r2,-4(fp)
10005c6c:	10802b04 	addi	r2,r2,172
10005c70:	100b883a 	mov	r5,r2
10005c74:	e13fff17 	ldw	r4,-4(fp)
10005c78:	0005cf80 	call	10005cf8 <_erand48_r>
10005c7c:	100b883a 	mov	r5,r2
10005c80:	180d883a 	mov	r6,r3
10005c84:	2807883a 	mov	r3,r5
10005c88:	3009883a 	mov	r4,r6
}
10005c8c:	1805883a 	mov	r2,r3
10005c90:	2007883a 	mov	r3,r4
10005c94:	e037883a 	mov	sp,fp
10005c98:	dfc00117 	ldw	ra,4(sp)
10005c9c:	df000017 	ldw	fp,0(sp)
10005ca0:	dec00204 	addi	sp,sp,8
10005ca4:	f800283a 	ret

10005ca8 <drand48>:

#ifndef _REENT_ONLY
double
_DEFUN_VOID (drand48)
{
10005ca8:	defffe04 	addi	sp,sp,-8
10005cac:	dfc00115 	stw	ra,4(sp)
10005cb0:	df000015 	stw	fp,0(sp)
10005cb4:	d839883a 	mov	fp,sp
  return _drand48_r (_REENT);
10005cb8:	008403b4 	movhi	r2,4110
10005cbc:	10a45004 	addi	r2,r2,-28352
10005cc0:	10800017 	ldw	r2,0(r2)
10005cc4:	1009883a 	mov	r4,r2
10005cc8:	0005c540 	call	10005c54 <_drand48_r>
10005ccc:	100b883a 	mov	r5,r2
10005cd0:	180d883a 	mov	r6,r3
10005cd4:	2807883a 	mov	r3,r5
10005cd8:	3009883a 	mov	r4,r6
}
10005cdc:	1805883a 	mov	r2,r3
10005ce0:	2007883a 	mov	r3,r4
10005ce4:	e037883a 	mov	sp,fp
10005ce8:	dfc00117 	ldw	ra,4(sp)
10005cec:	df000017 	ldw	fp,0(sp)
10005cf0:	dec00204 	addi	sp,sp,8
10005cf4:	f800283a 	ret

10005cf8 <_erand48_r>:

double
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
10005cf8:	defffa04 	addi	sp,sp,-24
10005cfc:	dfc00515 	stw	ra,20(sp)
10005d00:	df000415 	stw	fp,16(sp)
10005d04:	dc400315 	stw	r17,12(sp)
10005d08:	dc000215 	stw	r16,8(sp)
10005d0c:	df000404 	addi	fp,sp,16
10005d10:	e13ffc15 	stw	r4,-16(fp)
10005d14:	e17ffd15 	stw	r5,-12(fp)
  __dorand48(r, xseed);
10005d18:	e17ffd17 	ldw	r5,-12(fp)
10005d1c:	e13ffc17 	ldw	r4,-16(fp)
10005d20:	00074100 	call	10007410 <__dorand48>
  return ldexp((double) xseed[0], -48) +
10005d24:	e0bffd17 	ldw	r2,-12(fp)
10005d28:	1080000b 	ldhu	r2,0(r2)
10005d2c:	10bfffcc 	andi	r2,r2,65535
10005d30:	1009883a 	mov	r4,r2
10005d34:	00154d80 	call	100154d8 <__floatunsidf>
10005d38:	100f883a 	mov	r7,r2
10005d3c:	1811883a 	mov	r8,r3
10005d40:	01bff404 	movi	r6,-48
10005d44:	3809883a 	mov	r4,r7
10005d48:	400b883a 	mov	r5,r8
10005d4c:	00082d00 	call	100082d0 <ldexp>
10005d50:	1021883a 	mov	r16,r2
10005d54:	1823883a 	mov	r17,r3
    ldexp((double) xseed[1], -32) +
10005d58:	e0bffd17 	ldw	r2,-12(fp)
10005d5c:	10800084 	addi	r2,r2,2
10005d60:	1080000b 	ldhu	r2,0(r2)
10005d64:	10bfffcc 	andi	r2,r2,65535
10005d68:	1009883a 	mov	r4,r2
10005d6c:	00154d80 	call	100154d8 <__floatunsidf>
10005d70:	100f883a 	mov	r7,r2
10005d74:	1811883a 	mov	r8,r3
10005d78:	01bff804 	movi	r6,-32
10005d7c:	3809883a 	mov	r4,r7
10005d80:	400b883a 	mov	r5,r8
10005d84:	00082d00 	call	100082d0 <ldexp>
10005d88:	1009883a 	mov	r4,r2
10005d8c:	180b883a 	mov	r5,r3
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
  __dorand48(r, xseed);
  return ldexp((double) xseed[0], -48) +
10005d90:	200d883a 	mov	r6,r4
10005d94:	280f883a 	mov	r7,r5
10005d98:	8009883a 	mov	r4,r16
10005d9c:	880b883a 	mov	r5,r17
10005da0:	0003be80 	call	10003be8 <__adddf3>
10005da4:	1009883a 	mov	r4,r2
10005da8:	180b883a 	mov	r5,r3
10005dac:	2021883a 	mov	r16,r4
10005db0:	2823883a 	mov	r17,r5
    ldexp((double) xseed[1], -32) +
    ldexp((double) xseed[2], -16);
10005db4:	e0bffd17 	ldw	r2,-12(fp)
10005db8:	10800104 	addi	r2,r2,4
10005dbc:	1080000b 	ldhu	r2,0(r2)
10005dc0:	10bfffcc 	andi	r2,r2,65535
10005dc4:	1009883a 	mov	r4,r2
10005dc8:	00154d80 	call	100154d8 <__floatunsidf>
10005dcc:	100f883a 	mov	r7,r2
10005dd0:	1811883a 	mov	r8,r3
10005dd4:	01bffc04 	movi	r6,-16
10005dd8:	3809883a 	mov	r4,r7
10005ddc:	400b883a 	mov	r5,r8
10005de0:	00082d00 	call	100082d0 <ldexp>
10005de4:	1009883a 	mov	r4,r2
10005de8:	180b883a 	mov	r5,r3
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
  __dorand48(r, xseed);
  return ldexp((double) xseed[0], -48) +
10005dec:	200d883a 	mov	r6,r4
10005df0:	280f883a 	mov	r7,r5
10005df4:	8009883a 	mov	r4,r16
10005df8:	880b883a 	mov	r5,r17
10005dfc:	0003be80 	call	10003be8 <__adddf3>
10005e00:	100f883a 	mov	r7,r2
10005e04:	1811883a 	mov	r8,r3
10005e08:	380b883a 	mov	r5,r7
10005e0c:	400d883a 	mov	r6,r8
10005e10:	2807883a 	mov	r3,r5
10005e14:	3009883a 	mov	r4,r6
    ldexp((double) xseed[1], -32) +
    ldexp((double) xseed[2], -16);
}
10005e18:	1805883a 	mov	r2,r3
10005e1c:	2007883a 	mov	r3,r4
10005e20:	e6fffe04 	addi	sp,fp,-8
10005e24:	dfc00317 	ldw	ra,12(sp)
10005e28:	df000217 	ldw	fp,8(sp)
10005e2c:	dc400117 	ldw	r17,4(sp)
10005e30:	dc000017 	ldw	r16,0(sp)
10005e34:	dec00404 	addi	sp,sp,16
10005e38:	f800283a 	ret

10005e3c <erand48>:

#ifndef _REENT_ONLY
double
_DEFUN (erand48, (xseed),
       unsigned short xseed[3])
{
10005e3c:	defffd04 	addi	sp,sp,-12
10005e40:	dfc00215 	stw	ra,8(sp)
10005e44:	df000115 	stw	fp,4(sp)
10005e48:	df000104 	addi	fp,sp,4
10005e4c:	e13fff15 	stw	r4,-4(fp)
  return _erand48_r (_REENT, xseed);
10005e50:	008403b4 	movhi	r2,4110
10005e54:	10a45004 	addi	r2,r2,-28352
10005e58:	10800017 	ldw	r2,0(r2)
10005e5c:	e17fff17 	ldw	r5,-4(fp)
10005e60:	1009883a 	mov	r4,r2
10005e64:	0005cf80 	call	10005cf8 <_erand48_r>
10005e68:	100b883a 	mov	r5,r2
10005e6c:	180d883a 	mov	r6,r3
10005e70:	2807883a 	mov	r3,r5
10005e74:	3009883a 	mov	r4,r6
}
10005e78:	1805883a 	mov	r2,r3
10005e7c:	2007883a 	mov	r3,r4
10005e80:	e037883a 	mov	sp,fp
10005e84:	dfc00117 	ldw	ra,4(sp)
10005e88:	df000017 	ldw	fp,0(sp)
10005e8c:	dec00204 	addi	sp,sp,8
10005e90:	f800283a 	ret

10005e94 <_getc_r>:

int
_DEFUN(_getc_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
10005e94:	defffa04 	addi	sp,sp,-24
10005e98:	dfc00515 	stw	ra,20(sp)
10005e9c:	df000415 	stw	fp,16(sp)
10005ea0:	dc000315 	stw	r16,12(sp)
10005ea4:	df000404 	addi	fp,sp,16
10005ea8:	e13ffe15 	stw	r4,-8(fp)
10005eac:	2821883a 	mov	r16,r5
  int result;
  CHECK_INIT (ptr, fp);
10005eb0:	e0bffe17 	ldw	r2,-8(fp)
10005eb4:	e0bffc15 	stw	r2,-16(fp)
10005eb8:	e0bffc17 	ldw	r2,-16(fp)
10005ebc:	10000526 	beq	r2,zero,10005ed4 <_getc_r+0x40>
10005ec0:	e0bffc17 	ldw	r2,-16(fp)
10005ec4:	10800e17 	ldw	r2,56(r2)
10005ec8:	1000021e 	bne	r2,zero,10005ed4 <_getc_r+0x40>
10005ecc:	e13ffc17 	ldw	r4,-16(fp)
10005ed0:	000db740 	call	1000db74 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sgetc_r (ptr, fp);
10005ed4:	80800117 	ldw	r2,4(r16)
10005ed8:	10bfffc4 	addi	r2,r2,-1
10005edc:	80800115 	stw	r2,4(r16)
10005ee0:	80800117 	ldw	r2,4(r16)
10005ee4:	1000040e 	bge	r2,zero,10005ef8 <_getc_r+0x64>
10005ee8:	800b883a 	mov	r5,r16
10005eec:	e13ffe17 	ldw	r4,-8(fp)
10005ef0:	00082000 	call	10008200 <__srget_r>
10005ef4:	00000506 	br	10005f0c <_getc_r+0x78>
10005ef8:	80800017 	ldw	r2,0(r16)
10005efc:	10c00044 	addi	r3,r2,1
10005f00:	80c00015 	stw	r3,0(r16)
10005f04:	10800003 	ldbu	r2,0(r2)
10005f08:	10803fcc 	andi	r2,r2,255
10005f0c:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
10005f10:	e0bffd17 	ldw	r2,-12(fp)
}
10005f14:	e6ffff04 	addi	sp,fp,-4
10005f18:	dfc00217 	ldw	ra,8(sp)
10005f1c:	df000117 	ldw	fp,4(sp)
10005f20:	dc000017 	ldw	r16,0(sp)
10005f24:	dec00304 	addi	sp,sp,12
10005f28:	f800283a 	ret

10005f2c <getc>:
#ifndef _REENT_ONLY

int
_DEFUN(getc, (fp),
       register FILE *fp)
{
10005f2c:	defffa04 	addi	sp,sp,-24
10005f30:	dfc00515 	stw	ra,20(sp)
10005f34:	df000415 	stw	fp,16(sp)
10005f38:	dc000315 	stw	r16,12(sp)
10005f3c:	df000404 	addi	fp,sp,16
10005f40:	2021883a 	mov	r16,r4
  int result;
  struct _reent *reent = _REENT;
10005f44:	008403b4 	movhi	r2,4110
10005f48:	10a45004 	addi	r2,r2,-28352
10005f4c:	10800017 	ldw	r2,0(r2)
10005f50:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT (reent, fp);
10005f54:	e0bffc17 	ldw	r2,-16(fp)
10005f58:	e0bffd15 	stw	r2,-12(fp)
10005f5c:	e0bffd17 	ldw	r2,-12(fp)
10005f60:	10000526 	beq	r2,zero,10005f78 <getc+0x4c>
10005f64:	e0bffd17 	ldw	r2,-12(fp)
10005f68:	10800e17 	ldw	r2,56(r2)
10005f6c:	1000021e 	bne	r2,zero,10005f78 <getc+0x4c>
10005f70:	e13ffd17 	ldw	r4,-12(fp)
10005f74:	000db740 	call	1000db74 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sgetc_r (reent, fp);
10005f78:	80800117 	ldw	r2,4(r16)
10005f7c:	10bfffc4 	addi	r2,r2,-1
10005f80:	80800115 	stw	r2,4(r16)
10005f84:	80800117 	ldw	r2,4(r16)
10005f88:	1000040e 	bge	r2,zero,10005f9c <getc+0x70>
10005f8c:	800b883a 	mov	r5,r16
10005f90:	e13ffc17 	ldw	r4,-16(fp)
10005f94:	00082000 	call	10008200 <__srget_r>
10005f98:	00000506 	br	10005fb0 <getc+0x84>
10005f9c:	80800017 	ldw	r2,0(r16)
10005fa0:	10c00044 	addi	r3,r2,1
10005fa4:	80c00015 	stw	r3,0(r16)
10005fa8:	10800003 	ldbu	r2,0(r2)
10005fac:	10803fcc 	andi	r2,r2,255
10005fb0:	e0bffe15 	stw	r2,-8(fp)
  _newlib_flockfile_end (fp);
  return result;
10005fb4:	e0bffe17 	ldw	r2,-8(fp)
}
10005fb8:	e6ffff04 	addi	sp,fp,-4
10005fbc:	dfc00217 	ldw	ra,8(sp)
10005fc0:	df000117 	ldw	fp,4(sp)
10005fc4:	dc000017 	ldw	r16,0(sp)
10005fc8:	dec00304 	addi	sp,sp,12
10005fcc:	f800283a 	ret

10005fd0 <malloc>:
#ifndef _REENT_ONLY

_PTR
_DEFUN (malloc, (nbytes),
	size_t nbytes)		/* get a block */
{
10005fd0:	defffd04 	addi	sp,sp,-12
10005fd4:	dfc00215 	stw	ra,8(sp)
10005fd8:	df000115 	stw	fp,4(sp)
10005fdc:	df000104 	addi	fp,sp,4
10005fe0:	e13fff15 	stw	r4,-4(fp)
  return _malloc_r (_REENT, nbytes);
10005fe4:	008403b4 	movhi	r2,4110
10005fe8:	10a45004 	addi	r2,r2,-28352
10005fec:	10800017 	ldw	r2,0(r2)
10005ff0:	e17fff17 	ldw	r5,-4(fp)
10005ff4:	1009883a 	mov	r4,r2
10005ff8:	00064080 	call	10006408 <_malloc_r>
}
10005ffc:	e037883a 	mov	sp,fp
10006000:	dfc00117 	ldw	ra,4(sp)
10006004:	df000017 	ldw	fp,0(sp)
10006008:	dec00204 	addi	sp,sp,8
1000600c:	f800283a 	ret

10006010 <free>:

void
_DEFUN (free, (aptr),
	_PTR aptr)
{
10006010:	defffd04 	addi	sp,sp,-12
10006014:	dfc00215 	stw	ra,8(sp)
10006018:	df000115 	stw	fp,4(sp)
1000601c:	df000104 	addi	fp,sp,4
10006020:	e13fff15 	stw	r4,-4(fp)
  _free_r (_REENT, aptr);
10006024:	008403b4 	movhi	r2,4110
10006028:	10a45004 	addi	r2,r2,-28352
1000602c:	10800017 	ldw	r2,0(r2)
10006030:	e17fff17 	ldw	r5,-4(fp)
10006034:	1009883a 	mov	r4,r2
10006038:	000dda40 	call	1000dda4 <_free_r>
}
1000603c:	0001883a 	nop
10006040:	e037883a 	mov	sp,fp
10006044:	dfc00117 	ldw	ra,4(sp)
10006048:	df000017 	ldw	fp,0(sp)
1000604c:	dec00204 	addi	sp,sp,8
10006050:	f800283a 	ret

10006054 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
10006054:	defff104 	addi	sp,sp,-60
10006058:	dfc00e15 	stw	ra,56(sp)
1000605c:	df000d15 	stw	fp,52(sp)
10006060:	df000d04 	addi	fp,sp,52
10006064:	e13ffe15 	stw	r4,-8(fp)
10006068:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
1000606c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
10006070:	00840374 	movhi	r2,4109
10006074:	109e9e04 	addi	r2,r2,31352
10006078:	10800217 	ldw	r2,8(r2)
1000607c:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
10006080:	e0bff817 	ldw	r2,-32(fp)
10006084:	10c00117 	ldw	r3,4(r2)
10006088:	00bfff04 	movi	r2,-4
1000608c:	1884703a 	and	r2,r3,r2
10006090:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
10006094:	e0fff817 	ldw	r3,-32(fp)
10006098:	e0bff917 	ldw	r2,-28(fp)
1000609c:	1885883a 	add	r2,r3,r2
100060a0:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
100060a4:	d0c65a17 	ldw	r3,6504(gp)
100060a8:	e0bfff17 	ldw	r2,-4(fp)
100060ac:	1885883a 	add	r2,r3,r2
100060b0:	10800404 	addi	r2,r2,16
100060b4:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
100060b8:	00840004 	movi	r2,4096
100060bc:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
100060c0:	d0a00917 	ldw	r2,-32732(gp)
100060c4:	10bfffe0 	cmpeqi	r2,r2,-1
100060c8:	1000081e 	bne	r2,zero,100060ec <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
100060cc:	e0fffb17 	ldw	r3,-20(fp)
100060d0:	e0bff617 	ldw	r2,-40(fp)
100060d4:	1885883a 	add	r2,r3,r2
100060d8:	10ffffc4 	addi	r3,r2,-1
100060dc:	e0bffb17 	ldw	r2,-20(fp)
100060e0:	0085c83a 	sub	r2,zero,r2
100060e4:	1884703a 	and	r2,r3,r2
100060e8:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
100060ec:	e0bff617 	ldw	r2,-40(fp)
100060f0:	100b883a 	mov	r5,r2
100060f4:	e13ffe17 	ldw	r4,-8(fp)
100060f8:	00087440 	call	10008744 <_sbrk_r>
100060fc:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
10006100:	e0bff317 	ldw	r2,-52(fp)
10006104:	10bfffe0 	cmpeqi	r2,r2,-1
10006108:	1000b91e 	bne	r2,zero,100063f0 <malloc_extend_top+0x39c>
1000610c:	e0fff317 	ldw	r3,-52(fp)
10006110:	e0bffa17 	ldw	r2,-24(fp)
10006114:	1880042e 	bgeu	r3,r2,10006128 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
10006118:	00840374 	movhi	r2,4109
1000611c:	109e9e04 	addi	r2,r2,31352
10006120:	e0fff817 	ldw	r3,-32(fp)
10006124:	1880b21e 	bne	r3,r2,100063f0 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
10006128:	008403b4 	movhi	r2,4110
1000612c:	108aba04 	addi	r2,r2,10984
10006130:	10800017 	ldw	r2,0(r2)
10006134:	1007883a 	mov	r3,r2
10006138:	e0bff617 	ldw	r2,-40(fp)
1000613c:	1885883a 	add	r2,r3,r2
10006140:	1007883a 	mov	r3,r2
10006144:	008403b4 	movhi	r2,4110
10006148:	108aba04 	addi	r2,r2,10984
1000614c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
10006150:	e0fff317 	ldw	r3,-52(fp)
10006154:	e0bffa17 	ldw	r2,-24(fp)
10006158:	1880101e 	bne	r3,r2,1000619c <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
1000615c:	e0bffb17 	ldw	r2,-20(fp)
10006160:	10ffffc4 	addi	r3,r2,-1
10006164:	e0bffa17 	ldw	r2,-24(fp)
10006168:	1884703a 	and	r2,r3,r2
1000616c:	10000b1e 	bne	r2,zero,1000619c <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
10006170:	e0fff617 	ldw	r3,-40(fp)
10006174:	e0bff917 	ldw	r2,-28(fp)
10006178:	1885883a 	add	r2,r3,r2
1000617c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
10006180:	00840374 	movhi	r2,4109
10006184:	109e9e04 	addi	r2,r2,31352
10006188:	10800217 	ldw	r2,8(r2)
1000618c:	e0fffc17 	ldw	r3,-16(fp)
10006190:	18c00054 	ori	r3,r3,1
10006194:	10c00115 	stw	r3,4(r2)
10006198:	00008006 	br	1000639c <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
1000619c:	d0a00917 	ldw	r2,-32732(gp)
100061a0:	10bfffd8 	cmpnei	r2,r2,-1
100061a4:	1000031e 	bne	r2,zero,100061b4 <malloc_extend_top+0x160>
      sbrk_base = brk;
100061a8:	e0bff317 	ldw	r2,-52(fp)
100061ac:	d0a00915 	stw	r2,-32732(gp)
100061b0:	00000a06 	br	100061dc <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
100061b4:	008403b4 	movhi	r2,4110
100061b8:	108aba04 	addi	r2,r2,10984
100061bc:	10c00017 	ldw	r3,0(r2)
100061c0:	e13ff317 	ldw	r4,-52(fp)
100061c4:	e0bffa17 	ldw	r2,-24(fp)
100061c8:	2085c83a 	sub	r2,r4,r2
100061cc:	1887883a 	add	r3,r3,r2
100061d0:	008403b4 	movhi	r2,4110
100061d4:	108aba04 	addi	r2,r2,10984
100061d8:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
100061dc:	e0bff317 	ldw	r2,-52(fp)
100061e0:	10800204 	addi	r2,r2,8
100061e4:	108001cc 	andi	r2,r2,7
100061e8:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
100061ec:	e0bffd17 	ldw	r2,-12(fp)
100061f0:	10000926 	beq	r2,zero,10006218 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
100061f4:	00c00204 	movi	r3,8
100061f8:	e0bffd17 	ldw	r2,-12(fp)
100061fc:	1885c83a 	sub	r2,r3,r2
10006200:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
10006204:	e0fff317 	ldw	r3,-52(fp)
10006208:	e0bff417 	ldw	r2,-48(fp)
1000620c:	1885883a 	add	r2,r3,r2
10006210:	e0bff315 	stw	r2,-52(fp)
10006214:	00000106 	br	1000621c <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
10006218:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
1000621c:	e0fff317 	ldw	r3,-52(fp)
10006220:	e0bff617 	ldw	r2,-40(fp)
10006224:	1885883a 	add	r2,r3,r2
10006228:	1007883a 	mov	r3,r2
1000622c:	e0bffb17 	ldw	r2,-20(fp)
10006230:	10bfffc4 	addi	r2,r2,-1
10006234:	1884703a 	and	r2,r3,r2
10006238:	e0fffb17 	ldw	r3,-20(fp)
1000623c:	1885c83a 	sub	r2,r3,r2
10006240:	e0fff417 	ldw	r3,-48(fp)
10006244:	1885883a 	add	r2,r3,r2
10006248:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
1000624c:	e0bff417 	ldw	r2,-48(fp)
10006250:	100b883a 	mov	r5,r2
10006254:	e13ffe17 	ldw	r4,-8(fp)
10006258:	00087440 	call	10008744 <_sbrk_r>
1000625c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
10006260:	e0bff517 	ldw	r2,-44(fp)
10006264:	10bfffd8 	cmpnei	r2,r2,-1
10006268:	1000051e 	bne	r2,zero,10006280 <malloc_extend_top+0x22c>
      {
	correction = 0;
1000626c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
10006270:	00800044 	movi	r2,1
10006274:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
10006278:	e0bff317 	ldw	r2,-52(fp)
1000627c:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
10006280:	008403b4 	movhi	r2,4110
10006284:	108aba04 	addi	r2,r2,10984
10006288:	10800017 	ldw	r2,0(r2)
1000628c:	1007883a 	mov	r3,r2
10006290:	e0bff417 	ldw	r2,-48(fp)
10006294:	1885883a 	add	r2,r3,r2
10006298:	1007883a 	mov	r3,r2
1000629c:	008403b4 	movhi	r2,4110
100062a0:	108aba04 	addi	r2,r2,10984
100062a4:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
100062a8:	00840374 	movhi	r2,4109
100062ac:	109e9e04 	addi	r2,r2,31352
100062b0:	e0fff317 	ldw	r3,-52(fp)
100062b4:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
100062b8:	e0fff517 	ldw	r3,-44(fp)
100062bc:	e0bff317 	ldw	r2,-52(fp)
100062c0:	1885c83a 	sub	r2,r3,r2
100062c4:	1007883a 	mov	r3,r2
100062c8:	e0bff417 	ldw	r2,-48(fp)
100062cc:	1885883a 	add	r2,r3,r2
100062d0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
100062d4:	00840374 	movhi	r2,4109
100062d8:	109e9e04 	addi	r2,r2,31352
100062dc:	10800217 	ldw	r2,8(r2)
100062e0:	e0fffc17 	ldw	r3,-16(fp)
100062e4:	18c00054 	ori	r3,r3,1
100062e8:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
100062ec:	00840374 	movhi	r2,4109
100062f0:	109e9e04 	addi	r2,r2,31352
100062f4:	e0fff817 	ldw	r3,-32(fp)
100062f8:	18802826 	beq	r3,r2,1000639c <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
100062fc:	e0bff917 	ldw	r2,-28(fp)
10006300:	10800428 	cmpgeui	r2,r2,16
10006304:	1000061e 	bne	r2,zero,10006320 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
10006308:	00840374 	movhi	r2,4109
1000630c:	109e9e04 	addi	r2,r2,31352
10006310:	10800217 	ldw	r2,8(r2)
10006314:	00c00044 	movi	r3,1
10006318:	10c00115 	stw	r3,4(r2)
        return;
1000631c:	00003506 	br	100063f4 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
10006320:	e0bff917 	ldw	r2,-28(fp)
10006324:	10fffd04 	addi	r3,r2,-12
10006328:	00bffe04 	movi	r2,-8
1000632c:	1884703a 	and	r2,r3,r2
10006330:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
10006334:	e0bff817 	ldw	r2,-32(fp)
10006338:	10800117 	ldw	r2,4(r2)
1000633c:	10c0004c 	andi	r3,r2,1
10006340:	e0bff917 	ldw	r2,-28(fp)
10006344:	1886b03a 	or	r3,r3,r2
10006348:	e0bff817 	ldw	r2,-32(fp)
1000634c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
10006350:	e0fff817 	ldw	r3,-32(fp)
10006354:	e0bff917 	ldw	r2,-28(fp)
10006358:	1885883a 	add	r2,r3,r2
1000635c:	00c00144 	movi	r3,5
10006360:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
10006364:	e0bff917 	ldw	r2,-28(fp)
10006368:	10800104 	addi	r2,r2,4
1000636c:	e0fff817 	ldw	r3,-32(fp)
10006370:	1885883a 	add	r2,r3,r2
10006374:	00c00144 	movi	r3,5
10006378:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
1000637c:	e0bff917 	ldw	r2,-28(fp)
10006380:	10800430 	cmpltui	r2,r2,16
10006384:	1000051e 	bne	r2,zero,1000639c <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
10006388:	e0bff817 	ldw	r2,-32(fp)
1000638c:	10800204 	addi	r2,r2,8
10006390:	100b883a 	mov	r5,r2
10006394:	e13ffe17 	ldw	r4,-8(fp)
10006398:	000dda40 	call	1000dda4 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
1000639c:	008403b4 	movhi	r2,4110
100063a0:	108aba04 	addi	r2,r2,10984
100063a4:	10800017 	ldw	r2,0(r2)
100063a8:	1007883a 	mov	r3,r2
100063ac:	d0865b17 	ldw	r2,6508(gp)
100063b0:	10c0042e 	bgeu	r2,r3,100063c4 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
100063b4:	008403b4 	movhi	r2,4110
100063b8:	108aba04 	addi	r2,r2,10984
100063bc:	10800017 	ldw	r2,0(r2)
100063c0:	d0865b15 	stw	r2,6508(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
100063c4:	008403b4 	movhi	r2,4110
100063c8:	108aba04 	addi	r2,r2,10984
100063cc:	10800017 	ldw	r2,0(r2)
100063d0:	1007883a 	mov	r3,r2
100063d4:	d0865c17 	ldw	r2,6512(gp)
100063d8:	10c0062e 	bgeu	r2,r3,100063f4 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
100063dc:	008403b4 	movhi	r2,4110
100063e0:	108aba04 	addi	r2,r2,10984
100063e4:	10800017 	ldw	r2,0(r2)
100063e8:	d0865c15 	stw	r2,6512(gp)
100063ec:	00000106 	br	100063f4 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
100063f0:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
100063f4:	e037883a 	mov	sp,fp
100063f8:	dfc00117 	ldw	ra,4(sp)
100063fc:	df000017 	ldw	fp,0(sp)
10006400:	dec00204 	addi	sp,sp,8
10006404:	f800283a 	ret

10006408 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
10006408:	deffef04 	addi	sp,sp,-68
1000640c:	dfc01015 	stw	ra,64(sp)
10006410:	df000f15 	stw	fp,60(sp)
10006414:	df000f04 	addi	fp,sp,60
10006418:	e13ffe15 	stw	r4,-8(fp)
1000641c:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
10006420:	e0bfff17 	ldw	r2,-4(fp)
10006424:	108002c4 	addi	r2,r2,11
10006428:	108005f0 	cmpltui	r2,r2,23
1000642c:	1000051e 	bne	r2,zero,10006444 <_malloc_r+0x3c>
10006430:	e0bfff17 	ldw	r2,-4(fp)
10006434:	10c002c4 	addi	r3,r2,11
10006438:	00bffe04 	movi	r2,-8
1000643c:	1884703a 	and	r2,r3,r2
10006440:	00000106 	br	10006448 <_malloc_r+0x40>
10006444:	00800404 	movi	r2,16
10006448:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
1000644c:	e0bffa17 	ldw	r2,-24(fp)
10006450:	10000316 	blt	r2,zero,10006460 <_malloc_r+0x58>
10006454:	e0fffa17 	ldw	r3,-24(fp)
10006458:	e0bfff17 	ldw	r2,-4(fp)
1000645c:	1880052e 	bgeu	r3,r2,10006474 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
10006460:	e0bffe17 	ldw	r2,-8(fp)
10006464:	00c00304 	movi	r3,12
10006468:	10c00015 	stw	r3,0(r2)
    return 0;
1000646c:	0005883a 	mov	r2,zero
10006470:	0002bf06 	br	10006f70 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
10006474:	e13ffe17 	ldw	r4,-8(fp)
10006478:	0015d700 	call	10015d70 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
1000647c:	e0bffa17 	ldw	r2,-24(fp)
10006480:	10807e28 	cmpgeui	r2,r2,504
10006484:	10003f1e 	bne	r2,zero,10006584 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
10006488:	e0bffa17 	ldw	r2,-24(fp)
1000648c:	1004d0fa 	srli	r2,r2,3
10006490:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
10006494:	e0bff217 	ldw	r2,-56(fp)
10006498:	10800044 	addi	r2,r2,1
1000649c:	1085883a 	add	r2,r2,r2
100064a0:	1085883a 	add	r2,r2,r2
100064a4:	1087883a 	add	r3,r2,r2
100064a8:	00840374 	movhi	r2,4109
100064ac:	109e9e04 	addi	r2,r2,31352
100064b0:	1885883a 	add	r2,r3,r2
100064b4:	10bffe04 	addi	r2,r2,-8
100064b8:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
100064bc:	e0bff917 	ldw	r2,-28(fp)
100064c0:	10800317 	ldw	r2,12(r2)
100064c4:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
100064c8:	e0fff117 	ldw	r3,-60(fp)
100064cc:	e0bff917 	ldw	r2,-28(fp)
100064d0:	1880061e 	bne	r3,r2,100064ec <_malloc_r+0xe4>
    {
      q = next_bin(q);
100064d4:	e0bff917 	ldw	r2,-28(fp)
100064d8:	10800204 	addi	r2,r2,8
100064dc:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
100064e0:	e0bff917 	ldw	r2,-28(fp)
100064e4:	10800317 	ldw	r2,12(r2)
100064e8:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
100064ec:	e0fff117 	ldw	r3,-60(fp)
100064f0:	e0bff917 	ldw	r2,-28(fp)
100064f4:	18801f26 	beq	r3,r2,10006574 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
100064f8:	e0bff117 	ldw	r2,-60(fp)
100064fc:	10c00117 	ldw	r3,4(r2)
10006500:	00bfff04 	movi	r2,-4
10006504:	1884703a 	and	r2,r3,r2
10006508:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
1000650c:	e0bff117 	ldw	r2,-60(fp)
10006510:	10800317 	ldw	r2,12(r2)
10006514:	e0bff815 	stw	r2,-32(fp)
10006518:	e0bff117 	ldw	r2,-60(fp)
1000651c:	10800217 	ldw	r2,8(r2)
10006520:	e0bff715 	stw	r2,-36(fp)
10006524:	e0bff717 	ldw	r2,-36(fp)
10006528:	e0fff817 	ldw	r3,-32(fp)
1000652c:	10c00315 	stw	r3,12(r2)
10006530:	e0bff817 	ldw	r2,-32(fp)
10006534:	e0fff717 	ldw	r3,-36(fp)
10006538:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
1000653c:	e0fff117 	ldw	r3,-60(fp)
10006540:	e0bffb17 	ldw	r2,-20(fp)
10006544:	1885883a 	add	r2,r3,r2
10006548:	e13ff117 	ldw	r4,-60(fp)
1000654c:	e0fffb17 	ldw	r3,-20(fp)
10006550:	20c7883a 	add	r3,r4,r3
10006554:	18c00117 	ldw	r3,4(r3)
10006558:	18c00054 	ori	r3,r3,1
1000655c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
10006560:	e13ffe17 	ldw	r4,-8(fp)
10006564:	0015d940 	call	10015d94 <__malloc_unlock>
      return chunk2mem(victim);
10006568:	e0bff117 	ldw	r2,-60(fp)
1000656c:	10800204 	addi	r2,r2,8
10006570:	00027f06 	br	10006f70 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
10006574:	e0bff217 	ldw	r2,-56(fp)
10006578:	10800084 	addi	r2,r2,2
1000657c:	e0bff215 	stw	r2,-56(fp)
10006580:	00007306 	br	10006750 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
10006584:	e0bffa17 	ldw	r2,-24(fp)
10006588:	1004d27a 	srli	r2,r2,9
1000658c:	1000031e 	bne	r2,zero,1000659c <_malloc_r+0x194>
10006590:	e0bffa17 	ldw	r2,-24(fp)
10006594:	1004d0fa 	srli	r2,r2,3
10006598:	00002906 	br	10006640 <_malloc_r+0x238>
1000659c:	e0bffa17 	ldw	r2,-24(fp)
100065a0:	1004d27a 	srli	r2,r2,9
100065a4:	10800168 	cmpgeui	r2,r2,5
100065a8:	1000041e 	bne	r2,zero,100065bc <_malloc_r+0x1b4>
100065ac:	e0bffa17 	ldw	r2,-24(fp)
100065b0:	1004d1ba 	srli	r2,r2,6
100065b4:	10800e04 	addi	r2,r2,56
100065b8:	00002106 	br	10006640 <_malloc_r+0x238>
100065bc:	e0bffa17 	ldw	r2,-24(fp)
100065c0:	1004d27a 	srli	r2,r2,9
100065c4:	10800568 	cmpgeui	r2,r2,21
100065c8:	1000041e 	bne	r2,zero,100065dc <_malloc_r+0x1d4>
100065cc:	e0bffa17 	ldw	r2,-24(fp)
100065d0:	1004d27a 	srli	r2,r2,9
100065d4:	108016c4 	addi	r2,r2,91
100065d8:	00001906 	br	10006640 <_malloc_r+0x238>
100065dc:	e0bffa17 	ldw	r2,-24(fp)
100065e0:	1004d27a 	srli	r2,r2,9
100065e4:	10801568 	cmpgeui	r2,r2,85
100065e8:	1000041e 	bne	r2,zero,100065fc <_malloc_r+0x1f4>
100065ec:	e0bffa17 	ldw	r2,-24(fp)
100065f0:	1004d33a 	srli	r2,r2,12
100065f4:	10801b84 	addi	r2,r2,110
100065f8:	00001106 	br	10006640 <_malloc_r+0x238>
100065fc:	e0bffa17 	ldw	r2,-24(fp)
10006600:	1004d27a 	srli	r2,r2,9
10006604:	10805568 	cmpgeui	r2,r2,341
10006608:	1000041e 	bne	r2,zero,1000661c <_malloc_r+0x214>
1000660c:	e0bffa17 	ldw	r2,-24(fp)
10006610:	1004d3fa 	srli	r2,r2,15
10006614:	10801dc4 	addi	r2,r2,119
10006618:	00000906 	br	10006640 <_malloc_r+0x238>
1000661c:	e0bffa17 	ldw	r2,-24(fp)
10006620:	1004d27a 	srli	r2,r2,9
10006624:	10815568 	cmpgeui	r2,r2,1365
10006628:	1000041e 	bne	r2,zero,1000663c <_malloc_r+0x234>
1000662c:	e0bffa17 	ldw	r2,-24(fp)
10006630:	1004d4ba 	srli	r2,r2,18
10006634:	10801f04 	addi	r2,r2,124
10006638:	00000106 	br	10006640 <_malloc_r+0x238>
1000663c:	00801f84 	movi	r2,126
10006640:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
10006644:	e0bff217 	ldw	r2,-56(fp)
10006648:	10800044 	addi	r2,r2,1
1000664c:	1085883a 	add	r2,r2,r2
10006650:	1085883a 	add	r2,r2,r2
10006654:	1087883a 	add	r3,r2,r2
10006658:	00840374 	movhi	r2,4109
1000665c:	109e9e04 	addi	r2,r2,31352
10006660:	1885883a 	add	r2,r3,r2
10006664:	10bffe04 	addi	r2,r2,-8
10006668:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
1000666c:	e0bff317 	ldw	r2,-52(fp)
10006670:	10800317 	ldw	r2,12(r2)
10006674:	e0bff115 	stw	r2,-60(fp)
10006678:	00002f06 	br	10006738 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
1000667c:	e0bff117 	ldw	r2,-60(fp)
10006680:	10c00117 	ldw	r3,4(r2)
10006684:	00bfff04 	movi	r2,-4
10006688:	1884703a 	and	r2,r3,r2
1000668c:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
10006690:	e0fffb17 	ldw	r3,-20(fp)
10006694:	e0bffa17 	ldw	r2,-24(fp)
10006698:	1885c83a 	sub	r2,r3,r2
1000669c:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
100066a0:	e0bff417 	ldw	r2,-48(fp)
100066a4:	10800410 	cmplti	r2,r2,16
100066a8:	1000041e 	bne	r2,zero,100066bc <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
100066ac:	e0bff217 	ldw	r2,-56(fp)
100066b0:	10bfffc4 	addi	r2,r2,-1
100066b4:	e0bff215 	stw	r2,-56(fp)
        break;   
100066b8:	00002206 	br	10006744 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
100066bc:	e0bff417 	ldw	r2,-48(fp)
100066c0:	10001a16 	blt	r2,zero,1000672c <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
100066c4:	e0bff117 	ldw	r2,-60(fp)
100066c8:	10800317 	ldw	r2,12(r2)
100066cc:	e0bff815 	stw	r2,-32(fp)
100066d0:	e0bff117 	ldw	r2,-60(fp)
100066d4:	10800217 	ldw	r2,8(r2)
100066d8:	e0bff715 	stw	r2,-36(fp)
100066dc:	e0bff717 	ldw	r2,-36(fp)
100066e0:	e0fff817 	ldw	r3,-32(fp)
100066e4:	10c00315 	stw	r3,12(r2)
100066e8:	e0bff817 	ldw	r2,-32(fp)
100066ec:	e0fff717 	ldw	r3,-36(fp)
100066f0:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
100066f4:	e0fff117 	ldw	r3,-60(fp)
100066f8:	e0bffb17 	ldw	r2,-20(fp)
100066fc:	1885883a 	add	r2,r3,r2
10006700:	e13ff117 	ldw	r4,-60(fp)
10006704:	e0fffb17 	ldw	r3,-20(fp)
10006708:	20c7883a 	add	r3,r4,r3
1000670c:	18c00117 	ldw	r3,4(r3)
10006710:	18c00054 	ori	r3,r3,1
10006714:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
10006718:	e13ffe17 	ldw	r4,-8(fp)
1000671c:	0015d940 	call	10015d94 <__malloc_unlock>
        return chunk2mem(victim);
10006720:	e0bff117 	ldw	r2,-60(fp)
10006724:	10800204 	addi	r2,r2,8
10006728:	00021106 	br	10006f70 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
1000672c:	e0bff117 	ldw	r2,-60(fp)
10006730:	10800317 	ldw	r2,12(r2)
10006734:	e0bff115 	stw	r2,-60(fp)
10006738:	e0fff117 	ldw	r3,-60(fp)
1000673c:	e0bff317 	ldw	r2,-52(fp)
10006740:	18bfce1e 	bne	r3,r2,1000667c <__alt_data_end+0xf800667c>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
10006744:	e0bff217 	ldw	r2,-56(fp)
10006748:	10800044 	addi	r2,r2,1
1000674c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
10006750:	00840374 	movhi	r2,4109
10006754:	109ea004 	addi	r2,r2,31360
10006758:	10800217 	ldw	r2,8(r2)
1000675c:	e0bff115 	stw	r2,-60(fp)
10006760:	00840374 	movhi	r2,4109
10006764:	109ea004 	addi	r2,r2,31360
10006768:	e0fff117 	ldw	r3,-60(fp)
1000676c:	1880e626 	beq	r3,r2,10006b08 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
10006770:	e0bff117 	ldw	r2,-60(fp)
10006774:	10c00117 	ldw	r3,4(r2)
10006778:	00bfff04 	movi	r2,-4
1000677c:	1884703a 	and	r2,r3,r2
10006780:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
10006784:	e0fffb17 	ldw	r3,-20(fp)
10006788:	e0bffa17 	ldw	r2,-24(fp)
1000678c:	1885c83a 	sub	r2,r3,r2
10006790:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
10006794:	e0bff417 	ldw	r2,-48(fp)
10006798:	10800410 	cmplti	r2,r2,16
1000679c:	1000271e 	bne	r2,zero,1000683c <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
100067a0:	e0fff117 	ldw	r3,-60(fp)
100067a4:	e0bffa17 	ldw	r2,-24(fp)
100067a8:	1885883a 	add	r2,r3,r2
100067ac:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
100067b0:	e0bffa17 	ldw	r2,-24(fp)
100067b4:	10c00054 	ori	r3,r2,1
100067b8:	e0bff117 	ldw	r2,-60(fp)
100067bc:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
100067c0:	00c40374 	movhi	r3,4109
100067c4:	18dea004 	addi	r3,r3,31360
100067c8:	00840374 	movhi	r2,4109
100067cc:	109ea004 	addi	r2,r2,31360
100067d0:	e13ffc17 	ldw	r4,-16(fp)
100067d4:	11000315 	stw	r4,12(r2)
100067d8:	10800317 	ldw	r2,12(r2)
100067dc:	18800215 	stw	r2,8(r3)
100067e0:	00840374 	movhi	r2,4109
100067e4:	109ea004 	addi	r2,r2,31360
100067e8:	e0fffc17 	ldw	r3,-16(fp)
100067ec:	18800315 	stw	r2,12(r3)
100067f0:	e0bffc17 	ldw	r2,-16(fp)
100067f4:	10c00317 	ldw	r3,12(r2)
100067f8:	e0bffc17 	ldw	r2,-16(fp)
100067fc:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
10006800:	e0bff417 	ldw	r2,-48(fp)
10006804:	10800054 	ori	r2,r2,1
10006808:	1007883a 	mov	r3,r2
1000680c:	e0bffc17 	ldw	r2,-16(fp)
10006810:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
10006814:	e0bff417 	ldw	r2,-48(fp)
10006818:	e0fffc17 	ldw	r3,-16(fp)
1000681c:	1885883a 	add	r2,r3,r2
10006820:	e0fff417 	ldw	r3,-48(fp)
10006824:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
10006828:	e13ffe17 	ldw	r4,-8(fp)
1000682c:	0015d940 	call	10015d94 <__malloc_unlock>
      return chunk2mem(victim);
10006830:	e0bff117 	ldw	r2,-60(fp)
10006834:	10800204 	addi	r2,r2,8
10006838:	0001cd06 	br	10006f70 <_malloc_r+0xb68>
    }

    clear_last_remainder;
1000683c:	00c40374 	movhi	r3,4109
10006840:	18dea004 	addi	r3,r3,31360
10006844:	00840374 	movhi	r2,4109
10006848:	109ea004 	addi	r2,r2,31360
1000684c:	01040374 	movhi	r4,4109
10006850:	211ea004 	addi	r4,r4,31360
10006854:	11000315 	stw	r4,12(r2)
10006858:	10800317 	ldw	r2,12(r2)
1000685c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
10006860:	e0bff417 	ldw	r2,-48(fp)
10006864:	10000e16 	blt	r2,zero,100068a0 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
10006868:	e0fff117 	ldw	r3,-60(fp)
1000686c:	e0bffb17 	ldw	r2,-20(fp)
10006870:	1885883a 	add	r2,r3,r2
10006874:	e13ff117 	ldw	r4,-60(fp)
10006878:	e0fffb17 	ldw	r3,-20(fp)
1000687c:	20c7883a 	add	r3,r4,r3
10006880:	18c00117 	ldw	r3,4(r3)
10006884:	18c00054 	ori	r3,r3,1
10006888:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
1000688c:	e13ffe17 	ldw	r4,-8(fp)
10006890:	0015d940 	call	10015d94 <__malloc_unlock>
      return chunk2mem(victim);
10006894:	e0bff117 	ldw	r2,-60(fp)
10006898:	10800204 	addi	r2,r2,8
1000689c:	0001b406 	br	10006f70 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
100068a0:	e0bffb17 	ldw	r2,-20(fp)
100068a4:	10808028 	cmpgeui	r2,r2,512
100068a8:	10002c1e 	bne	r2,zero,1000695c <_malloc_r+0x554>
100068ac:	e0bffb17 	ldw	r2,-20(fp)
100068b0:	1004d0fa 	srli	r2,r2,3
100068b4:	e0bffd15 	stw	r2,-12(fp)
100068b8:	00c40374 	movhi	r3,4109
100068bc:	18de9e04 	addi	r3,r3,31352
100068c0:	00840374 	movhi	r2,4109
100068c4:	109e9e04 	addi	r2,r2,31352
100068c8:	11000117 	ldw	r4,4(r2)
100068cc:	e0bffd17 	ldw	r2,-12(fp)
100068d0:	1000010e 	bge	r2,zero,100068d8 <_malloc_r+0x4d0>
100068d4:	108000c4 	addi	r2,r2,3
100068d8:	1005d0ba 	srai	r2,r2,2
100068dc:	100b883a 	mov	r5,r2
100068e0:	00800044 	movi	r2,1
100068e4:	1144983a 	sll	r2,r2,r5
100068e8:	2084b03a 	or	r2,r4,r2
100068ec:	18800115 	stw	r2,4(r3)
100068f0:	e0bffd17 	ldw	r2,-12(fp)
100068f4:	10800044 	addi	r2,r2,1
100068f8:	1085883a 	add	r2,r2,r2
100068fc:	1085883a 	add	r2,r2,r2
10006900:	1087883a 	add	r3,r2,r2
10006904:	00840374 	movhi	r2,4109
10006908:	109e9e04 	addi	r2,r2,31352
1000690c:	1885883a 	add	r2,r3,r2
10006910:	10bffe04 	addi	r2,r2,-8
10006914:	e0bff815 	stw	r2,-32(fp)
10006918:	e0bff817 	ldw	r2,-32(fp)
1000691c:	10800217 	ldw	r2,8(r2)
10006920:	e0bff715 	stw	r2,-36(fp)
10006924:	e0bff117 	ldw	r2,-60(fp)
10006928:	e0fff817 	ldw	r3,-32(fp)
1000692c:	10c00315 	stw	r3,12(r2)
10006930:	e0bff117 	ldw	r2,-60(fp)
10006934:	e0fff717 	ldw	r3,-36(fp)
10006938:	10c00215 	stw	r3,8(r2)
1000693c:	e0bff817 	ldw	r2,-32(fp)
10006940:	e0fff117 	ldw	r3,-60(fp)
10006944:	10c00215 	stw	r3,8(r2)
10006948:	e0bff817 	ldw	r2,-32(fp)
1000694c:	10c00217 	ldw	r3,8(r2)
10006950:	e0bff717 	ldw	r2,-36(fp)
10006954:	10c00315 	stw	r3,12(r2)
10006958:	00006b06 	br	10006b08 <_malloc_r+0x700>
1000695c:	e0bffb17 	ldw	r2,-20(fp)
10006960:	1004d27a 	srli	r2,r2,9
10006964:	1000031e 	bne	r2,zero,10006974 <_malloc_r+0x56c>
10006968:	e0bffb17 	ldw	r2,-20(fp)
1000696c:	1004d0fa 	srli	r2,r2,3
10006970:	00002906 	br	10006a18 <_malloc_r+0x610>
10006974:	e0bffb17 	ldw	r2,-20(fp)
10006978:	1004d27a 	srli	r2,r2,9
1000697c:	10800168 	cmpgeui	r2,r2,5
10006980:	1000041e 	bne	r2,zero,10006994 <_malloc_r+0x58c>
10006984:	e0bffb17 	ldw	r2,-20(fp)
10006988:	1004d1ba 	srli	r2,r2,6
1000698c:	10800e04 	addi	r2,r2,56
10006990:	00002106 	br	10006a18 <_malloc_r+0x610>
10006994:	e0bffb17 	ldw	r2,-20(fp)
10006998:	1004d27a 	srli	r2,r2,9
1000699c:	10800568 	cmpgeui	r2,r2,21
100069a0:	1000041e 	bne	r2,zero,100069b4 <_malloc_r+0x5ac>
100069a4:	e0bffb17 	ldw	r2,-20(fp)
100069a8:	1004d27a 	srli	r2,r2,9
100069ac:	108016c4 	addi	r2,r2,91
100069b0:	00001906 	br	10006a18 <_malloc_r+0x610>
100069b4:	e0bffb17 	ldw	r2,-20(fp)
100069b8:	1004d27a 	srli	r2,r2,9
100069bc:	10801568 	cmpgeui	r2,r2,85
100069c0:	1000041e 	bne	r2,zero,100069d4 <_malloc_r+0x5cc>
100069c4:	e0bffb17 	ldw	r2,-20(fp)
100069c8:	1004d33a 	srli	r2,r2,12
100069cc:	10801b84 	addi	r2,r2,110
100069d0:	00001106 	br	10006a18 <_malloc_r+0x610>
100069d4:	e0bffb17 	ldw	r2,-20(fp)
100069d8:	1004d27a 	srli	r2,r2,9
100069dc:	10805568 	cmpgeui	r2,r2,341
100069e0:	1000041e 	bne	r2,zero,100069f4 <_malloc_r+0x5ec>
100069e4:	e0bffb17 	ldw	r2,-20(fp)
100069e8:	1004d3fa 	srli	r2,r2,15
100069ec:	10801dc4 	addi	r2,r2,119
100069f0:	00000906 	br	10006a18 <_malloc_r+0x610>
100069f4:	e0bffb17 	ldw	r2,-20(fp)
100069f8:	1004d27a 	srli	r2,r2,9
100069fc:	10815568 	cmpgeui	r2,r2,1365
10006a00:	1000041e 	bne	r2,zero,10006a14 <_malloc_r+0x60c>
10006a04:	e0bffb17 	ldw	r2,-20(fp)
10006a08:	1004d4ba 	srli	r2,r2,18
10006a0c:	10801f04 	addi	r2,r2,124
10006a10:	00000106 	br	10006a18 <_malloc_r+0x610>
10006a14:	00801f84 	movi	r2,126
10006a18:	e0bffd15 	stw	r2,-12(fp)
10006a1c:	e0bffd17 	ldw	r2,-12(fp)
10006a20:	10800044 	addi	r2,r2,1
10006a24:	1085883a 	add	r2,r2,r2
10006a28:	1085883a 	add	r2,r2,r2
10006a2c:	1087883a 	add	r3,r2,r2
10006a30:	00840374 	movhi	r2,4109
10006a34:	109e9e04 	addi	r2,r2,31352
10006a38:	1885883a 	add	r2,r3,r2
10006a3c:	10bffe04 	addi	r2,r2,-8
10006a40:	e0bff815 	stw	r2,-32(fp)
10006a44:	e0bff817 	ldw	r2,-32(fp)
10006a48:	10800217 	ldw	r2,8(r2)
10006a4c:	e0bff715 	stw	r2,-36(fp)
10006a50:	e0fff717 	ldw	r3,-36(fp)
10006a54:	e0bff817 	ldw	r2,-32(fp)
10006a58:	1880121e 	bne	r3,r2,10006aa4 <_malloc_r+0x69c>
10006a5c:	00c40374 	movhi	r3,4109
10006a60:	18de9e04 	addi	r3,r3,31352
10006a64:	00840374 	movhi	r2,4109
10006a68:	109e9e04 	addi	r2,r2,31352
10006a6c:	11000117 	ldw	r4,4(r2)
10006a70:	e0bffd17 	ldw	r2,-12(fp)
10006a74:	1000010e 	bge	r2,zero,10006a7c <_malloc_r+0x674>
10006a78:	108000c4 	addi	r2,r2,3
10006a7c:	1005d0ba 	srai	r2,r2,2
10006a80:	100b883a 	mov	r5,r2
10006a84:	00800044 	movi	r2,1
10006a88:	1144983a 	sll	r2,r2,r5
10006a8c:	2084b03a 	or	r2,r4,r2
10006a90:	18800115 	stw	r2,4(r3)
10006a94:	00000f06 	br	10006ad4 <_malloc_r+0x6cc>
10006a98:	e0bff717 	ldw	r2,-36(fp)
10006a9c:	10800217 	ldw	r2,8(r2)
10006aa0:	e0bff715 	stw	r2,-36(fp)
10006aa4:	e0fff717 	ldw	r3,-36(fp)
10006aa8:	e0bff817 	ldw	r2,-32(fp)
10006aac:	18800626 	beq	r3,r2,10006ac8 <_malloc_r+0x6c0>
10006ab0:	e0bff717 	ldw	r2,-36(fp)
10006ab4:	10c00117 	ldw	r3,4(r2)
10006ab8:	00bfff04 	movi	r2,-4
10006abc:	1884703a 	and	r2,r3,r2
10006ac0:	e0fffb17 	ldw	r3,-20(fp)
10006ac4:	18bff436 	bltu	r3,r2,10006a98 <__alt_data_end+0xf8006a98>
10006ac8:	e0bff717 	ldw	r2,-36(fp)
10006acc:	10800317 	ldw	r2,12(r2)
10006ad0:	e0bff815 	stw	r2,-32(fp)
10006ad4:	e0bff117 	ldw	r2,-60(fp)
10006ad8:	e0fff817 	ldw	r3,-32(fp)
10006adc:	10c00315 	stw	r3,12(r2)
10006ae0:	e0bff117 	ldw	r2,-60(fp)
10006ae4:	e0fff717 	ldw	r3,-36(fp)
10006ae8:	10c00215 	stw	r3,8(r2)
10006aec:	e0bff817 	ldw	r2,-32(fp)
10006af0:	e0fff117 	ldw	r3,-60(fp)
10006af4:	10c00215 	stw	r3,8(r2)
10006af8:	e0bff817 	ldw	r2,-32(fp)
10006afc:	10c00217 	ldw	r3,8(r2)
10006b00:	e0bff717 	ldw	r2,-36(fp)
10006b04:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
10006b08:	e0bff217 	ldw	r2,-56(fp)
10006b0c:	1000010e 	bge	r2,zero,10006b14 <_malloc_r+0x70c>
10006b10:	108000c4 	addi	r2,r2,3
10006b14:	1005d0ba 	srai	r2,r2,2
10006b18:	1007883a 	mov	r3,r2
10006b1c:	00800044 	movi	r2,1
10006b20:	10c4983a 	sll	r2,r2,r3
10006b24:	e0bff515 	stw	r2,-44(fp)
10006b28:	00840374 	movhi	r2,4109
10006b2c:	109e9e04 	addi	r2,r2,31352
10006b30:	10c00117 	ldw	r3,4(r2)
10006b34:	e0bff517 	ldw	r2,-44(fp)
10006b38:	1880c636 	bltu	r3,r2,10006e54 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
10006b3c:	00840374 	movhi	r2,4109
10006b40:	109e9e04 	addi	r2,r2,31352
10006b44:	10c00117 	ldw	r3,4(r2)
10006b48:	e0bff517 	ldw	r2,-44(fp)
10006b4c:	1884703a 	and	r2,r3,r2
10006b50:	1000151e 	bne	r2,zero,10006ba8 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
10006b54:	e0fff217 	ldw	r3,-56(fp)
10006b58:	00bfff04 	movi	r2,-4
10006b5c:	1884703a 	and	r2,r3,r2
10006b60:	10800104 	addi	r2,r2,4
10006b64:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
10006b68:	e0bff517 	ldw	r2,-44(fp)
10006b6c:	1085883a 	add	r2,r2,r2
10006b70:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
10006b74:	00000606 	br	10006b90 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
10006b78:	e0bff217 	ldw	r2,-56(fp)
10006b7c:	10800104 	addi	r2,r2,4
10006b80:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
10006b84:	e0bff517 	ldw	r2,-44(fp)
10006b88:	1085883a 	add	r2,r2,r2
10006b8c:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
10006b90:	00840374 	movhi	r2,4109
10006b94:	109e9e04 	addi	r2,r2,31352
10006b98:	10c00117 	ldw	r3,4(r2)
10006b9c:	e0bff517 	ldw	r2,-44(fp)
10006ba0:	1884703a 	and	r2,r3,r2
10006ba4:	103ff426 	beq	r2,zero,10006b78 <__alt_data_end+0xf8006b78>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
10006ba8:	e0bff217 	ldw	r2,-56(fp)
10006bac:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
10006bb0:	e0bff217 	ldw	r2,-56(fp)
10006bb4:	10800044 	addi	r2,r2,1
10006bb8:	1085883a 	add	r2,r2,r2
10006bbc:	1085883a 	add	r2,r2,r2
10006bc0:	1087883a 	add	r3,r2,r2
10006bc4:	00840374 	movhi	r2,4109
10006bc8:	109e9e04 	addi	r2,r2,31352
10006bcc:	1885883a 	add	r2,r3,r2
10006bd0:	10bffe04 	addi	r2,r2,-8
10006bd4:	e0bff315 	stw	r2,-52(fp)
10006bd8:	e0bff317 	ldw	r2,-52(fp)
10006bdc:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
10006be0:	e0bff317 	ldw	r2,-52(fp)
10006be4:	10800317 	ldw	r2,12(r2)
10006be8:	e0bff115 	stw	r2,-60(fp)
10006bec:	00005e06 	br	10006d68 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
10006bf0:	e0bff117 	ldw	r2,-60(fp)
10006bf4:	10c00117 	ldw	r3,4(r2)
10006bf8:	00bfff04 	movi	r2,-4
10006bfc:	1884703a 	and	r2,r3,r2
10006c00:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
10006c04:	e0fffb17 	ldw	r3,-20(fp)
10006c08:	e0bffa17 	ldw	r2,-24(fp)
10006c0c:	1885c83a 	sub	r2,r3,r2
10006c10:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
10006c14:	e0bff417 	ldw	r2,-48(fp)
10006c18:	10800410 	cmplti	r2,r2,16
10006c1c:	1000331e 	bne	r2,zero,10006cec <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
10006c20:	e0fff117 	ldw	r3,-60(fp)
10006c24:	e0bffa17 	ldw	r2,-24(fp)
10006c28:	1885883a 	add	r2,r3,r2
10006c2c:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
10006c30:	e0bffa17 	ldw	r2,-24(fp)
10006c34:	10c00054 	ori	r3,r2,1
10006c38:	e0bff117 	ldw	r2,-60(fp)
10006c3c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
10006c40:	e0bff117 	ldw	r2,-60(fp)
10006c44:	10800317 	ldw	r2,12(r2)
10006c48:	e0bff815 	stw	r2,-32(fp)
10006c4c:	e0bff117 	ldw	r2,-60(fp)
10006c50:	10800217 	ldw	r2,8(r2)
10006c54:	e0bff715 	stw	r2,-36(fp)
10006c58:	e0bff717 	ldw	r2,-36(fp)
10006c5c:	e0fff817 	ldw	r3,-32(fp)
10006c60:	10c00315 	stw	r3,12(r2)
10006c64:	e0bff817 	ldw	r2,-32(fp)
10006c68:	e0fff717 	ldw	r3,-36(fp)
10006c6c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
10006c70:	00c40374 	movhi	r3,4109
10006c74:	18dea004 	addi	r3,r3,31360
10006c78:	00840374 	movhi	r2,4109
10006c7c:	109ea004 	addi	r2,r2,31360
10006c80:	e13ffc17 	ldw	r4,-16(fp)
10006c84:	11000315 	stw	r4,12(r2)
10006c88:	10800317 	ldw	r2,12(r2)
10006c8c:	18800215 	stw	r2,8(r3)
10006c90:	00840374 	movhi	r2,4109
10006c94:	109ea004 	addi	r2,r2,31360
10006c98:	e0fffc17 	ldw	r3,-16(fp)
10006c9c:	18800315 	stw	r2,12(r3)
10006ca0:	e0bffc17 	ldw	r2,-16(fp)
10006ca4:	10c00317 	ldw	r3,12(r2)
10006ca8:	e0bffc17 	ldw	r2,-16(fp)
10006cac:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
10006cb0:	e0bff417 	ldw	r2,-48(fp)
10006cb4:	10800054 	ori	r2,r2,1
10006cb8:	1007883a 	mov	r3,r2
10006cbc:	e0bffc17 	ldw	r2,-16(fp)
10006cc0:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
10006cc4:	e0bff417 	ldw	r2,-48(fp)
10006cc8:	e0fffc17 	ldw	r3,-16(fp)
10006ccc:	1885883a 	add	r2,r3,r2
10006cd0:	e0fff417 	ldw	r3,-48(fp)
10006cd4:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
10006cd8:	e13ffe17 	ldw	r4,-8(fp)
10006cdc:	0015d940 	call	10015d94 <__malloc_unlock>
            return chunk2mem(victim);
10006ce0:	e0bff117 	ldw	r2,-60(fp)
10006ce4:	10800204 	addi	r2,r2,8
10006ce8:	0000a106 	br	10006f70 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
10006cec:	e0bff417 	ldw	r2,-48(fp)
10006cf0:	10001a16 	blt	r2,zero,10006d5c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
10006cf4:	e0fff117 	ldw	r3,-60(fp)
10006cf8:	e0bffb17 	ldw	r2,-20(fp)
10006cfc:	1885883a 	add	r2,r3,r2
10006d00:	e13ff117 	ldw	r4,-60(fp)
10006d04:	e0fffb17 	ldw	r3,-20(fp)
10006d08:	20c7883a 	add	r3,r4,r3
10006d0c:	18c00117 	ldw	r3,4(r3)
10006d10:	18c00054 	ori	r3,r3,1
10006d14:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
10006d18:	e0bff117 	ldw	r2,-60(fp)
10006d1c:	10800317 	ldw	r2,12(r2)
10006d20:	e0bff815 	stw	r2,-32(fp)
10006d24:	e0bff117 	ldw	r2,-60(fp)
10006d28:	10800217 	ldw	r2,8(r2)
10006d2c:	e0bff715 	stw	r2,-36(fp)
10006d30:	e0bff717 	ldw	r2,-36(fp)
10006d34:	e0fff817 	ldw	r3,-32(fp)
10006d38:	10c00315 	stw	r3,12(r2)
10006d3c:	e0bff817 	ldw	r2,-32(fp)
10006d40:	e0fff717 	ldw	r3,-36(fp)
10006d44:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
10006d48:	e13ffe17 	ldw	r4,-8(fp)
10006d4c:	0015d940 	call	10015d94 <__malloc_unlock>
            return chunk2mem(victim);
10006d50:	e0bff117 	ldw	r2,-60(fp)
10006d54:	10800204 	addi	r2,r2,8
10006d58:	00008506 	br	10006f70 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
10006d5c:	e0bff117 	ldw	r2,-60(fp)
10006d60:	10800317 	ldw	r2,12(r2)
10006d64:	e0bff115 	stw	r2,-60(fp)
10006d68:	e0fff117 	ldw	r3,-60(fp)
10006d6c:	e0bff317 	ldw	r2,-52(fp)
10006d70:	18bf9f1e 	bne	r3,r2,10006bf0 <__alt_data_end+0xf8006bf0>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
10006d74:	e0bff317 	ldw	r2,-52(fp)
10006d78:	10800204 	addi	r2,r2,8
10006d7c:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
10006d80:	e0bff217 	ldw	r2,-56(fp)
10006d84:	10800044 	addi	r2,r2,1
10006d88:	e0bff215 	stw	r2,-56(fp)
10006d8c:	e0bff217 	ldw	r2,-56(fp)
10006d90:	108000cc 	andi	r2,r2,3
10006d94:	103f921e 	bne	r2,zero,10006be0 <__alt_data_end+0xf8006be0>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
10006d98:	e0bff617 	ldw	r2,-40(fp)
10006d9c:	108000cc 	andi	r2,r2,3
10006da0:	10000a1e 	bne	r2,zero,10006dcc <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
10006da4:	00840374 	movhi	r2,4109
10006da8:	109e9e04 	addi	r2,r2,31352
10006dac:	00c40374 	movhi	r3,4109
10006db0:	18de9e04 	addi	r3,r3,31352
10006db4:	19000117 	ldw	r4,4(r3)
10006db8:	e0fff517 	ldw	r3,-44(fp)
10006dbc:	00c6303a 	nor	r3,zero,r3
10006dc0:	20c6703a 	and	r3,r4,r3
10006dc4:	10c00115 	stw	r3,4(r2)
          break;
10006dc8:	00000a06 	br	10006df4 <_malloc_r+0x9ec>
        }
        --startidx;
10006dcc:	e0bff617 	ldw	r2,-40(fp)
10006dd0:	10bfffc4 	addi	r2,r2,-1
10006dd4:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
10006dd8:	e0bff917 	ldw	r2,-28(fp)
10006ddc:	10bffe04 	addi	r2,r2,-8
10006de0:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
10006de4:	e0bff917 	ldw	r2,-28(fp)
10006de8:	10c00217 	ldw	r3,8(r2)
10006dec:	e0bff917 	ldw	r2,-28(fp)
10006df0:	18bfe926 	beq	r3,r2,10006d98 <__alt_data_end+0xf8006d98>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
10006df4:	e0bff517 	ldw	r2,-44(fp)
10006df8:	1085883a 	add	r2,r2,r2
10006dfc:	e0bff515 	stw	r2,-44(fp)
10006e00:	00840374 	movhi	r2,4109
10006e04:	109e9e04 	addi	r2,r2,31352
10006e08:	10c00117 	ldw	r3,4(r2)
10006e0c:	e0bff517 	ldw	r2,-44(fp)
10006e10:	18801036 	bltu	r3,r2,10006e54 <_malloc_r+0xa4c>
10006e14:	e0bff517 	ldw	r2,-44(fp)
10006e18:	10000e26 	beq	r2,zero,10006e54 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
10006e1c:	00000606 	br	10006e38 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
10006e20:	e0bff217 	ldw	r2,-56(fp)
10006e24:	10800104 	addi	r2,r2,4
10006e28:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
10006e2c:	e0bff517 	ldw	r2,-44(fp)
10006e30:	1085883a 	add	r2,r2,r2
10006e34:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
10006e38:	00840374 	movhi	r2,4109
10006e3c:	109e9e04 	addi	r2,r2,31352
10006e40:	10c00117 	ldw	r3,4(r2)
10006e44:	e0bff517 	ldw	r2,-44(fp)
10006e48:	1884703a 	and	r2,r3,r2
10006e4c:	103ff426 	beq	r2,zero,10006e20 <__alt_data_end+0xf8006e20>
          block <<= 1;
        }
      }
      else
        break;
    }
10006e50:	003f5506 	br	10006ba8 <__alt_data_end+0xf8006ba8>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
10006e54:	00840374 	movhi	r2,4109
10006e58:	109e9e04 	addi	r2,r2,31352
10006e5c:	10800217 	ldw	r2,8(r2)
10006e60:	10c00117 	ldw	r3,4(r2)
10006e64:	00bfff04 	movi	r2,-4
10006e68:	1886703a 	and	r3,r3,r2
10006e6c:	e0bffa17 	ldw	r2,-24(fp)
10006e70:	1885c83a 	sub	r2,r3,r2
10006e74:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
10006e78:	00840374 	movhi	r2,4109
10006e7c:	109e9e04 	addi	r2,r2,31352
10006e80:	10800217 	ldw	r2,8(r2)
10006e84:	10c00117 	ldw	r3,4(r2)
10006e88:	00bfff04 	movi	r2,-4
10006e8c:	1886703a 	and	r3,r3,r2
10006e90:	e0bffa17 	ldw	r2,-24(fp)
10006e94:	18800336 	bltu	r3,r2,10006ea4 <_malloc_r+0xa9c>
10006e98:	e0bff417 	ldw	r2,-48(fp)
10006e9c:	10800408 	cmpgei	r2,r2,16
10006ea0:	10001b1e 	bne	r2,zero,10006f10 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
10006ea4:	e17ffa17 	ldw	r5,-24(fp)
10006ea8:	e13ffe17 	ldw	r4,-8(fp)
10006eac:	00060540 	call	10006054 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
10006eb0:	00840374 	movhi	r2,4109
10006eb4:	109e9e04 	addi	r2,r2,31352
10006eb8:	10800217 	ldw	r2,8(r2)
10006ebc:	10c00117 	ldw	r3,4(r2)
10006ec0:	00bfff04 	movi	r2,-4
10006ec4:	1886703a 	and	r3,r3,r2
10006ec8:	e0bffa17 	ldw	r2,-24(fp)
10006ecc:	1885c83a 	sub	r2,r3,r2
10006ed0:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
10006ed4:	00840374 	movhi	r2,4109
10006ed8:	109e9e04 	addi	r2,r2,31352
10006edc:	10800217 	ldw	r2,8(r2)
10006ee0:	10c00117 	ldw	r3,4(r2)
10006ee4:	00bfff04 	movi	r2,-4
10006ee8:	1886703a 	and	r3,r3,r2
10006eec:	e0bffa17 	ldw	r2,-24(fp)
10006ef0:	18800336 	bltu	r3,r2,10006f00 <_malloc_r+0xaf8>
10006ef4:	e0bff417 	ldw	r2,-48(fp)
10006ef8:	10800408 	cmpgei	r2,r2,16
10006efc:	1000041e 	bne	r2,zero,10006f10 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
10006f00:	e13ffe17 	ldw	r4,-8(fp)
10006f04:	0015d940 	call	10015d94 <__malloc_unlock>
      return 0; /* propagate failure */
10006f08:	0005883a 	mov	r2,zero
10006f0c:	00001806 	br	10006f70 <_malloc_r+0xb68>
    }
  }

  victim = top;
10006f10:	00840374 	movhi	r2,4109
10006f14:	109e9e04 	addi	r2,r2,31352
10006f18:	10800217 	ldw	r2,8(r2)
10006f1c:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
10006f20:	e0bffa17 	ldw	r2,-24(fp)
10006f24:	10c00054 	ori	r3,r2,1
10006f28:	e0bff117 	ldw	r2,-60(fp)
10006f2c:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
10006f30:	00840374 	movhi	r2,4109
10006f34:	109e9e04 	addi	r2,r2,31352
10006f38:	e13ff117 	ldw	r4,-60(fp)
10006f3c:	e0fffa17 	ldw	r3,-24(fp)
10006f40:	20c7883a 	add	r3,r4,r3
10006f44:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
10006f48:	00840374 	movhi	r2,4109
10006f4c:	109e9e04 	addi	r2,r2,31352
10006f50:	10800217 	ldw	r2,8(r2)
10006f54:	e0fff417 	ldw	r3,-48(fp)
10006f58:	18c00054 	ori	r3,r3,1
10006f5c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
10006f60:	e13ffe17 	ldw	r4,-8(fp)
10006f64:	0015d940 	call	10015d94 <__malloc_unlock>
  return chunk2mem(victim);
10006f68:	e0bff117 	ldw	r2,-60(fp)
10006f6c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
10006f70:	e037883a 	mov	sp,fp
10006f74:	dfc00117 	ldw	ra,4(sp)
10006f78:	df000017 	ldw	fp,0(sp)
10006f7c:	dec00204 	addi	sp,sp,8
10006f80:	f800283a 	ret

10006f84 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
10006f84:	defff704 	addi	sp,sp,-36
10006f88:	df000815 	stw	fp,32(sp)
10006f8c:	df000804 	addi	fp,sp,32
10006f90:	e13ffd15 	stw	r4,-12(fp)
10006f94:	e17ffe15 	stw	r5,-8(fp)
10006f98:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
10006f9c:	e0bffd17 	ldw	r2,-12(fp)
10006fa0:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
10006fa4:	e0bffe17 	ldw	r2,-8(fp)
10006fa8:	10803fcc 	andi	r2,r2,255
10006fac:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
10006fb0:	00000c06 	br	10006fe4 <memset+0x60>
    {
      if (n--)
10006fb4:	e0bfff17 	ldw	r2,-4(fp)
10006fb8:	10ffffc4 	addi	r3,r2,-1
10006fbc:	e0ffff15 	stw	r3,-4(fp)
10006fc0:	10000626 	beq	r2,zero,10006fdc <memset+0x58>
        *s++ = (char) c;
10006fc4:	e0bff817 	ldw	r2,-32(fp)
10006fc8:	10c00044 	addi	r3,r2,1
10006fcc:	e0fff815 	stw	r3,-32(fp)
10006fd0:	e0fffe17 	ldw	r3,-8(fp)
10006fd4:	10c00005 	stb	r3,0(r2)
10006fd8:	00000206 	br	10006fe4 <memset+0x60>
      else
        return m;
10006fdc:	e0bffd17 	ldw	r2,-12(fp)
10006fe0:	00005506 	br	10007138 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
10006fe4:	e0bff817 	ldw	r2,-32(fp)
10006fe8:	108000cc 	andi	r2,r2,3
10006fec:	103ff11e 	bne	r2,zero,10006fb4 <__alt_data_end+0xf8006fb4>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
10006ff0:	e0bfff17 	ldw	r2,-4(fp)
10006ff4:	10800130 	cmpltui	r2,r2,4
10006ff8:	10004a1e 	bne	r2,zero,10007124 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
10006ffc:	e0bff817 	ldw	r2,-32(fp)
10007000:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
10007004:	e0bffc17 	ldw	r2,-16(fp)
10007008:	1006923a 	slli	r3,r2,8
1000700c:	e0bffc17 	ldw	r2,-16(fp)
10007010:	1884b03a 	or	r2,r3,r2
10007014:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
10007018:	e0bffa17 	ldw	r2,-24(fp)
1000701c:	1004943a 	slli	r2,r2,16
10007020:	e0fffa17 	ldw	r3,-24(fp)
10007024:	1884b03a 	or	r2,r3,r2
10007028:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000702c:	00800804 	movi	r2,32
10007030:	e0bff915 	stw	r2,-28(fp)
10007034:	00000906 	br	1000705c <memset+0xd8>
        buffer = (buffer << i) | buffer;
10007038:	e0fffa17 	ldw	r3,-24(fp)
1000703c:	e0bff917 	ldw	r2,-28(fp)
10007040:	1884983a 	sll	r2,r3,r2
10007044:	e0fffa17 	ldw	r3,-24(fp)
10007048:	1884b03a 	or	r2,r3,r2
1000704c:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
10007050:	e0bff917 	ldw	r2,-28(fp)
10007054:	1085883a 	add	r2,r2,r2
10007058:	e0bff915 	stw	r2,-28(fp)
1000705c:	e0bff917 	ldw	r2,-28(fp)
10007060:	10800830 	cmpltui	r2,r2,32
10007064:	103ff41e 	bne	r2,zero,10007038 <__alt_data_end+0xf8007038>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
10007068:	00001706 	br	100070c8 <memset+0x144>
        {
          *aligned_addr++ = buffer;
1000706c:	e0bffb17 	ldw	r2,-20(fp)
10007070:	10c00104 	addi	r3,r2,4
10007074:	e0fffb15 	stw	r3,-20(fp)
10007078:	e0fffa17 	ldw	r3,-24(fp)
1000707c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007080:	e0bffb17 	ldw	r2,-20(fp)
10007084:	10c00104 	addi	r3,r2,4
10007088:	e0fffb15 	stw	r3,-20(fp)
1000708c:	e0fffa17 	ldw	r3,-24(fp)
10007090:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007094:	e0bffb17 	ldw	r2,-20(fp)
10007098:	10c00104 	addi	r3,r2,4
1000709c:	e0fffb15 	stw	r3,-20(fp)
100070a0:	e0fffa17 	ldw	r3,-24(fp)
100070a4:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
100070a8:	e0bffb17 	ldw	r2,-20(fp)
100070ac:	10c00104 	addi	r3,r2,4
100070b0:	e0fffb15 	stw	r3,-20(fp)
100070b4:	e0fffa17 	ldw	r3,-24(fp)
100070b8:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
100070bc:	e0bfff17 	ldw	r2,-4(fp)
100070c0:	10bffc04 	addi	r2,r2,-16
100070c4:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
100070c8:	e0bfff17 	ldw	r2,-4(fp)
100070cc:	10800428 	cmpgeui	r2,r2,16
100070d0:	103fe61e 	bne	r2,zero,1000706c <__alt_data_end+0xf800706c>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
100070d4:	00000806 	br	100070f8 <memset+0x174>
        {
          *aligned_addr++ = buffer;
100070d8:	e0bffb17 	ldw	r2,-20(fp)
100070dc:	10c00104 	addi	r3,r2,4
100070e0:	e0fffb15 	stw	r3,-20(fp)
100070e4:	e0fffa17 	ldw	r3,-24(fp)
100070e8:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
100070ec:	e0bfff17 	ldw	r2,-4(fp)
100070f0:	10bfff04 	addi	r2,r2,-4
100070f4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
100070f8:	e0bfff17 	ldw	r2,-4(fp)
100070fc:	10800128 	cmpgeui	r2,r2,4
10007100:	103ff51e 	bne	r2,zero,100070d8 <__alt_data_end+0xf80070d8>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
10007104:	e0bffb17 	ldw	r2,-20(fp)
10007108:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
1000710c:	00000506 	br	10007124 <memset+0x1a0>
    *s++ = (char) c;
10007110:	e0bff817 	ldw	r2,-32(fp)
10007114:	10c00044 	addi	r3,r2,1
10007118:	e0fff815 	stw	r3,-32(fp)
1000711c:	e0fffe17 	ldw	r3,-8(fp)
10007120:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
10007124:	e0bfff17 	ldw	r2,-4(fp)
10007128:	10ffffc4 	addi	r3,r2,-1
1000712c:	e0ffff15 	stw	r3,-4(fp)
10007130:	103ff71e 	bne	r2,zero,10007110 <__alt_data_end+0xf8007110>
    *s++ = (char) c;

  return m;
10007134:	e0bffd17 	ldw	r2,-12(fp)
}
10007138:	e037883a 	mov	sp,fp
1000713c:	df000017 	ldw	fp,0(sp)
10007140:	dec00104 	addi	sp,sp,4
10007144:	f800283a 	ret

10007148 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
10007148:	defff804 	addi	sp,sp,-32
1000714c:	dfc00515 	stw	ra,20(sp)
10007150:	df000415 	stw	fp,16(sp)
10007154:	df000404 	addi	fp,sp,16
10007158:	e13ffe15 	stw	r4,-8(fp)
1000715c:	e17fff15 	stw	r5,-4(fp)
10007160:	e1800215 	stw	r6,8(fp)
10007164:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
10007168:	e0800204 	addi	r2,fp,8
1000716c:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
10007170:	e0bffe17 	ldw	r2,-8(fp)
10007174:	10800217 	ldw	r2,8(r2)
10007178:	e0fffd17 	ldw	r3,-12(fp)
1000717c:	180f883a 	mov	r7,r3
10007180:	e1bfff17 	ldw	r6,-4(fp)
10007184:	100b883a 	mov	r5,r2
10007188:	e13ffe17 	ldw	r4,-8(fp)
1000718c:	0008e680 	call	10008e68 <___vfprintf_internal_r>
10007190:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
10007194:	e0bffc17 	ldw	r2,-16(fp)
}
10007198:	e037883a 	mov	sp,fp
1000719c:	dfc00117 	ldw	ra,4(sp)
100071a0:	df000017 	ldw	fp,0(sp)
100071a4:	dec00404 	addi	sp,sp,16
100071a8:	f800283a 	ret

100071ac <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
100071ac:	defff704 	addi	sp,sp,-36
100071b0:	dfc00515 	stw	ra,20(sp)
100071b4:	df000415 	stw	fp,16(sp)
100071b8:	df000404 	addi	fp,sp,16
100071bc:	e13fff15 	stw	r4,-4(fp)
100071c0:	e1400215 	stw	r5,8(fp)
100071c4:	e1800315 	stw	r6,12(fp)
100071c8:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
100071cc:	008403b4 	movhi	r2,4110
100071d0:	10a45004 	addi	r2,r2,-28352
100071d4:	10800017 	ldw	r2,0(r2)
100071d8:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
100071dc:	e0800204 	addi	r2,fp,8
100071e0:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
100071e4:	008403b4 	movhi	r2,4110
100071e8:	10a45004 	addi	r2,r2,-28352
100071ec:	10800017 	ldw	r2,0(r2)
100071f0:	10800217 	ldw	r2,8(r2)
100071f4:	e0fffe17 	ldw	r3,-8(fp)
100071f8:	180d883a 	mov	r6,r3
100071fc:	e17fff17 	ldw	r5,-4(fp)
10007200:	1009883a 	mov	r4,r2
10007204:	0008e100 	call	10008e10 <__vfprintf_internal>
10007208:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
1000720c:	e0bffd17 	ldw	r2,-12(fp)
}
10007210:	e037883a 	mov	sp,fp
10007214:	dfc00117 	ldw	ra,4(sp)
10007218:	df000017 	ldw	fp,0(sp)
1000721c:	dec00504 	addi	sp,sp,20
10007220:	f800283a 	ret

10007224 <_putchar_r>:

int
_DEFUN(_putchar_r, (ptr, c),
       struct _reent *ptr _AND
       int c)
{
10007224:	defffc04 	addi	sp,sp,-16
10007228:	dfc00315 	stw	ra,12(sp)
1000722c:	df000215 	stw	fp,8(sp)
10007230:	df000204 	addi	fp,sp,8
10007234:	e13ffe15 	stw	r4,-8(fp)
10007238:	e17fff15 	stw	r5,-4(fp)
  _REENT_SMALL_CHECK_INIT (ptr);
  return _putc_r (ptr, c, _stdout_r (ptr));
1000723c:	e0bffe17 	ldw	r2,-8(fp)
10007240:	10800217 	ldw	r2,8(r2)
10007244:	100d883a 	mov	r6,r2
10007248:	e17fff17 	ldw	r5,-4(fp)
1000724c:	e13ffe17 	ldw	r4,-8(fp)
10007250:	00110e40 	call	100110e4 <_putc_r>
}
10007254:	e037883a 	mov	sp,fp
10007258:	dfc00117 	ldw	ra,4(sp)
1000725c:	df000017 	ldw	fp,0(sp)
10007260:	dec00204 	addi	sp,sp,8
10007264:	f800283a 	ret

10007268 <putchar>:
#ifndef _REENT_ONLY

int
_DEFUN(putchar, (c),
       int c)
{
10007268:	defffc04 	addi	sp,sp,-16
1000726c:	dfc00315 	stw	ra,12(sp)
10007270:	df000215 	stw	fp,8(sp)
10007274:	df000204 	addi	fp,sp,8
10007278:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
1000727c:	008403b4 	movhi	r2,4110
10007280:	10a45004 	addi	r2,r2,-28352
10007284:	10800017 	ldw	r2,0(r2)
10007288:	e0bffe15 	stw	r2,-8(fp)

  _REENT_SMALL_CHECK_INIT (reent);
  return _putc_r (reent, c, _stdout_r (reent));
1000728c:	e0bffe17 	ldw	r2,-8(fp)
10007290:	10800217 	ldw	r2,8(r2)
10007294:	100d883a 	mov	r6,r2
10007298:	e17fff17 	ldw	r5,-4(fp)
1000729c:	e13ffe17 	ldw	r4,-8(fp)
100072a0:	00110e40 	call	100110e4 <_putc_r>
}
100072a4:	e037883a 	mov	sp,fp
100072a8:	dfc00117 	ldw	ra,4(sp)
100072ac:	df000017 	ldw	fp,0(sp)
100072b0:	dec00204 	addi	sp,sp,8
100072b4:	f800283a 	ret

100072b8 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
100072b8:	defff104 	addi	sp,sp,-60
100072bc:	dfc00e15 	stw	ra,56(sp)
100072c0:	df000d15 	stw	fp,52(sp)
100072c4:	df000d04 	addi	fp,sp,52
100072c8:	e13ffe15 	stw	r4,-8(fp)
100072cc:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
100072d0:	e13fff17 	ldw	r4,-4(fp)
100072d4:	00088880 	call	10008888 <strlen>
100072d8:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
100072dc:	e0bfff17 	ldw	r2,-4(fp)
100072e0:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
100072e4:	e0bff317 	ldw	r2,-52(fp)
100072e8:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
100072ec:	00840374 	movhi	r2,4109
100072f0:	10bd1604 	addi	r2,r2,-2984
100072f4:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
100072f8:	00800044 	movi	r2,1
100072fc:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
10007300:	e0bff317 	ldw	r2,-52(fp)
10007304:	10800044 	addi	r2,r2,1
10007308:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
1000730c:	e0bffa04 	addi	r2,fp,-24
10007310:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
10007314:	00800084 	movi	r2,2
10007318:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
1000731c:	e0bffe17 	ldw	r2,-8(fp)
10007320:	e0bff415 	stw	r2,-48(fp)
10007324:	e0bff417 	ldw	r2,-48(fp)
10007328:	10000526 	beq	r2,zero,10007340 <_puts_r+0x88>
1000732c:	e0bff417 	ldw	r2,-48(fp)
10007330:	10800e17 	ldw	r2,56(r2)
10007334:	1000021e 	bne	r2,zero,10007340 <_puts_r+0x88>
10007338:	e13ff417 	ldw	r4,-48(fp)
1000733c:	000db740 	call	1000db74 <__sinit>
  fp = _stdout_r (ptr);
10007340:	e0bffe17 	ldw	r2,-8(fp)
10007344:	10800217 	ldw	r2,8(r2)
10007348:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
1000734c:	e0bff517 	ldw	r2,-44(fp)
10007350:	1080030b 	ldhu	r2,12(r2)
10007354:	10bfffcc 	andi	r2,r2,65535
10007358:	1088000c 	andi	r2,r2,8192
1000735c:	10000c1e 	bne	r2,zero,10007390 <_puts_r+0xd8>
10007360:	e0bff517 	ldw	r2,-44(fp)
10007364:	1080030b 	ldhu	r2,12(r2)
10007368:	10880014 	ori	r2,r2,8192
1000736c:	1007883a 	mov	r3,r2
10007370:	e0bff517 	ldw	r2,-44(fp)
10007374:	10c0030d 	sth	r3,12(r2)
10007378:	e0bff517 	ldw	r2,-44(fp)
1000737c:	10c01917 	ldw	r3,100(r2)
10007380:	00b7ffc4 	movi	r2,-8193
10007384:	1886703a 	and	r3,r3,r2
10007388:	e0bff517 	ldw	r2,-44(fp)
1000738c:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
10007390:	e0bff704 	addi	r2,fp,-36
10007394:	100d883a 	mov	r6,r2
10007398:	e17ff517 	ldw	r5,-44(fp)
1000739c:	e13ffe17 	ldw	r4,-8(fp)
100073a0:	000e4ec0 	call	1000e4ec <__sfvwrite_r>
100073a4:	10000226 	beq	r2,zero,100073b0 <_puts_r+0xf8>
100073a8:	00bfffc4 	movi	r2,-1
100073ac:	00000106 	br	100073b4 <_puts_r+0xfc>
100073b0:	00800284 	movi	r2,10
100073b4:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
100073b8:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
100073bc:	e037883a 	mov	sp,fp
100073c0:	dfc00117 	ldw	ra,4(sp)
100073c4:	df000017 	ldw	fp,0(sp)
100073c8:	dec00204 	addi	sp,sp,8
100073cc:	f800283a 	ret

100073d0 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
100073d0:	defffd04 	addi	sp,sp,-12
100073d4:	dfc00215 	stw	ra,8(sp)
100073d8:	df000115 	stw	fp,4(sp)
100073dc:	df000104 	addi	fp,sp,4
100073e0:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
100073e4:	008403b4 	movhi	r2,4110
100073e8:	10a45004 	addi	r2,r2,-28352
100073ec:	10800017 	ldw	r2,0(r2)
100073f0:	e17fff17 	ldw	r5,-4(fp)
100073f4:	1009883a 	mov	r4,r2
100073f8:	00072b80 	call	100072b8 <_puts_r>
}
100073fc:	e037883a 	mov	sp,fp
10007400:	dfc00117 	ldw	ra,4(sp)
10007404:	df000017 	ldw	fp,0(sp)
10007408:	dec00204 	addi	sp,sp,8
1000740c:	f800283a 	ret

10007410 <__dorand48>:

void
_DEFUN (__dorand48, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
10007410:	defff904 	addi	sp,sp,-28
10007414:	dfc00615 	stw	ra,24(sp)
10007418:	df000515 	stw	fp,20(sp)
1000741c:	dc000415 	stw	r16,16(sp)
10007420:	df000504 	addi	fp,sp,20
10007424:	e13ffd15 	stw	r4,-12(fp)
10007428:	e17ffe15 	stw	r5,-8(fp)
  unsigned long accu;
  unsigned short temp[2];

  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
1000742c:	e0bffd17 	ldw	r2,-12(fp)
10007430:	10802c8b 	ldhu	r2,178(r2)
10007434:	10ffffcc 	andi	r3,r2,65535
10007438:	e0bffe17 	ldw	r2,-8(fp)
1000743c:	1080000b 	ldhu	r2,0(r2)
10007440:	10bfffcc 	andi	r2,r2,65535
10007444:	100b883a 	mov	r5,r2
10007448:	1809883a 	mov	r4,r3
1000744c:	0005a080 	call	10005a08 <__mulsi3>
10007450:	1007883a 	mov	r3,r2
    (unsigned long) __rand48_add;
10007454:	e0bffd17 	ldw	r2,-12(fp)
10007458:	10802e0b 	ldhu	r2,184(r2)
1000745c:	10bfffcc 	andi	r2,r2,65535
{
  unsigned long accu;
  unsigned short temp[2];

  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
10007460:	1885883a 	add	r2,r3,r2
10007464:	e0bffb15 	stw	r2,-20(fp)
    (unsigned long) __rand48_add;
  temp[0] = (unsigned short) accu;     /* lower 16 bits */
10007468:	e0bffb17 	ldw	r2,-20(fp)
1000746c:	e0bffc0d 	sth	r2,-16(fp)
  accu >>= sizeof(unsigned short) * 8;
10007470:	e0bffb17 	ldw	r2,-20(fp)
10007474:	1004d43a 	srli	r2,r2,16
10007478:	e0bffb15 	stw	r2,-20(fp)
  accu += (unsigned long) __rand48_mult[0] * (unsigned long) xseed[1] +
1000747c:	e0bffd17 	ldw	r2,-12(fp)
10007480:	10802c8b 	ldhu	r2,178(r2)
10007484:	10ffffcc 	andi	r3,r2,65535
10007488:	e0bffe17 	ldw	r2,-8(fp)
1000748c:	10800084 	addi	r2,r2,2
10007490:	1080000b 	ldhu	r2,0(r2)
10007494:	10bfffcc 	andi	r2,r2,65535
10007498:	100b883a 	mov	r5,r2
1000749c:	1809883a 	mov	r4,r3
100074a0:	0005a080 	call	10005a08 <__mulsi3>
100074a4:	1021883a 	mov	r16,r2
    (unsigned long) __rand48_mult[1] * (unsigned long) xseed[0];
100074a8:	e0bffd17 	ldw	r2,-12(fp)
100074ac:	10802d0b 	ldhu	r2,180(r2)
100074b0:	10ffffcc 	andi	r3,r2,65535
100074b4:	e0bffe17 	ldw	r2,-8(fp)
100074b8:	1080000b 	ldhu	r2,0(r2)
100074bc:	10bfffcc 	andi	r2,r2,65535
100074c0:	100b883a 	mov	r5,r2
100074c4:	1809883a 	mov	r4,r3
100074c8:	0005a080 	call	10005a08 <__mulsi3>
  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
    (unsigned long) __rand48_add;
  temp[0] = (unsigned short) accu;     /* lower 16 bits */
  accu >>= sizeof(unsigned short) * 8;
  accu += (unsigned long) __rand48_mult[0] * (unsigned long) xseed[1] +
100074cc:	8085883a 	add	r2,r16,r2
100074d0:	e0fffb17 	ldw	r3,-20(fp)
100074d4:	1885883a 	add	r2,r3,r2
100074d8:	e0bffb15 	stw	r2,-20(fp)
    (unsigned long) __rand48_mult[1] * (unsigned long) xseed[0];
  temp[1] = (unsigned short) accu;     /* middle 16 bits */
100074dc:	e0bffb17 	ldw	r2,-20(fp)
100074e0:	e0bffc8d 	sth	r2,-14(fp)
  accu >>= sizeof(unsigned short) * 8;
100074e4:	e0bffb17 	ldw	r2,-20(fp)
100074e8:	1004d43a 	srli	r2,r2,16
100074ec:	e0bffb15 	stw	r2,-20(fp)
  accu += __rand48_mult[0] * xseed[2] + __rand48_mult[1] * xseed[1] + __rand48_mult[2] * xseed[0];
100074f0:	e0bffd17 	ldw	r2,-12(fp)
100074f4:	10802c8b 	ldhu	r2,178(r2)
100074f8:	10ffffcc 	andi	r3,r2,65535
100074fc:	e0bffe17 	ldw	r2,-8(fp)
10007500:	10800104 	addi	r2,r2,4
10007504:	1080000b 	ldhu	r2,0(r2)
10007508:	10bfffcc 	andi	r2,r2,65535
1000750c:	100b883a 	mov	r5,r2
10007510:	1809883a 	mov	r4,r3
10007514:	0005a080 	call	10005a08 <__mulsi3>
10007518:	1021883a 	mov	r16,r2
1000751c:	e0bffd17 	ldw	r2,-12(fp)
10007520:	10802d0b 	ldhu	r2,180(r2)
10007524:	10ffffcc 	andi	r3,r2,65535
10007528:	e0bffe17 	ldw	r2,-8(fp)
1000752c:	10800084 	addi	r2,r2,2
10007530:	1080000b 	ldhu	r2,0(r2)
10007534:	10bfffcc 	andi	r2,r2,65535
10007538:	100b883a 	mov	r5,r2
1000753c:	1809883a 	mov	r4,r3
10007540:	0005a080 	call	10005a08 <__mulsi3>
10007544:	80a1883a 	add	r16,r16,r2
10007548:	e0bffd17 	ldw	r2,-12(fp)
1000754c:	10802d8b 	ldhu	r2,182(r2)
10007550:	10ffffcc 	andi	r3,r2,65535
10007554:	e0bffe17 	ldw	r2,-8(fp)
10007558:	1080000b 	ldhu	r2,0(r2)
1000755c:	10bfffcc 	andi	r2,r2,65535
10007560:	100b883a 	mov	r5,r2
10007564:	1809883a 	mov	r4,r3
10007568:	0005a080 	call	10005a08 <__mulsi3>
1000756c:	8085883a 	add	r2,r16,r2
10007570:	1007883a 	mov	r3,r2
10007574:	e0bffb17 	ldw	r2,-20(fp)
10007578:	10c5883a 	add	r2,r2,r3
1000757c:	e0bffb15 	stw	r2,-20(fp)
  xseed[0] = temp[0];
10007580:	e0fffc0b 	ldhu	r3,-16(fp)
10007584:	e0bffe17 	ldw	r2,-8(fp)
10007588:	10c0000d 	sth	r3,0(r2)
  xseed[1] = temp[1];
1000758c:	e0bffe17 	ldw	r2,-8(fp)
10007590:	10800084 	addi	r2,r2,2
10007594:	e0fffc8b 	ldhu	r3,-14(fp)
10007598:	10c0000d 	sth	r3,0(r2)
  xseed[2] = (unsigned short) accu;
1000759c:	e0bffe17 	ldw	r2,-8(fp)
100075a0:	10800104 	addi	r2,r2,4
100075a4:	e0fffb17 	ldw	r3,-20(fp)
100075a8:	10c0000d 	sth	r3,0(r2)
}
100075ac:	0001883a 	nop
100075b0:	e6ffff04 	addi	sp,fp,-4
100075b4:	dfc00217 	ldw	ra,8(sp)
100075b8:	df000117 	ldw	fp,4(sp)
100075bc:	dc000017 	ldw	r16,0(sp)
100075c0:	dec00304 	addi	sp,sp,12
100075c4:	f800283a 	ret

100075c8 <realloc>:

_PTR
_DEFUN (realloc, (ap, nbytes),
	_PTR ap _AND
	size_t nbytes)
{
100075c8:	defffc04 	addi	sp,sp,-16
100075cc:	dfc00315 	stw	ra,12(sp)
100075d0:	df000215 	stw	fp,8(sp)
100075d4:	df000204 	addi	fp,sp,8
100075d8:	e13ffe15 	stw	r4,-8(fp)
100075dc:	e17fff15 	stw	r5,-4(fp)
  return _realloc_r (_REENT, ap, nbytes);
100075e0:	008403b4 	movhi	r2,4110
100075e4:	10a45004 	addi	r2,r2,-28352
100075e8:	10800017 	ldw	r2,0(r2)
100075ec:	e1bfff17 	ldw	r6,-4(fp)
100075f0:	e17ffe17 	ldw	r5,-8(fp)
100075f4:	1009883a 	mov	r4,r2
100075f8:	00076100 	call	10007610 <_realloc_r>
}
100075fc:	e037883a 	mov	sp,fp
10007600:	dfc00117 	ldw	ra,4(sp)
10007604:	df000017 	ldw	fp,0(sp)
10007608:	dec00204 	addi	sp,sp,8
1000760c:	f800283a 	ret

10007610 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
10007610:	deffe104 	addi	sp,sp,-124
10007614:	dfc01e15 	stw	ra,120(sp)
10007618:	df001d15 	stw	fp,116(sp)
1000761c:	df001d04 	addi	fp,sp,116
10007620:	e13ffd15 	stw	r4,-12(fp)
10007624:	e17ffe15 	stw	r5,-8(fp)
10007628:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
1000762c:	e0bffe17 	ldw	r2,-8(fp)
10007630:	1000041e 	bne	r2,zero,10007644 <_realloc_r+0x34>
10007634:	e17fff17 	ldw	r5,-4(fp)
10007638:	e13ffd17 	ldw	r4,-12(fp)
1000763c:	00064080 	call	10006408 <_malloc_r>
10007640:	0002ea06 	br	100081ec <_realloc_r+0xbdc>

  MALLOC_LOCK;
10007644:	e13ffd17 	ldw	r4,-12(fp)
10007648:	0015d700 	call	10015d70 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
1000764c:	e0bffe17 	ldw	r2,-8(fp)
10007650:	10bffe04 	addi	r2,r2,-8
10007654:	e0bfef15 	stw	r2,-68(fp)
10007658:	e0bfef17 	ldw	r2,-68(fp)
1000765c:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
10007660:	e0bfef17 	ldw	r2,-68(fp)
10007664:	10c00117 	ldw	r3,4(r2)
10007668:	00bfff04 	movi	r2,-4
1000766c:	1884703a 	and	r2,r3,r2
10007670:	e0bff015 	stw	r2,-64(fp)
10007674:	e0bff017 	ldw	r2,-64(fp)
10007678:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
1000767c:	e0bfff17 	ldw	r2,-4(fp)
10007680:	108002c4 	addi	r2,r2,11
10007684:	108005f0 	cmpltui	r2,r2,23
10007688:	1000051e 	bne	r2,zero,100076a0 <_realloc_r+0x90>
1000768c:	e0bfff17 	ldw	r2,-4(fp)
10007690:	10c002c4 	addi	r3,r2,11
10007694:	00bffe04 	movi	r2,-8
10007698:	1884703a 	and	r2,r3,r2
1000769c:	00000106 	br	100076a4 <_realloc_r+0x94>
100076a0:	00800404 	movi	r2,16
100076a4:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
100076a8:	e0bff117 	ldw	r2,-60(fp)
100076ac:	10000316 	blt	r2,zero,100076bc <_realloc_r+0xac>
100076b0:	e0fff117 	ldw	r3,-60(fp)
100076b4:	e0bfff17 	ldw	r2,-4(fp)
100076b8:	1880052e 	bgeu	r3,r2,100076d0 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
100076bc:	e0bffd17 	ldw	r2,-12(fp)
100076c0:	00c00304 	movi	r3,12
100076c4:	10c00015 	stw	r3,0(r2)
    return 0;
100076c8:	0005883a 	mov	r2,zero
100076cc:	0002c706 	br	100081ec <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
100076d0:	e0fff017 	ldw	r3,-64(fp)
100076d4:	e0bff117 	ldw	r2,-60(fp)
100076d8:	18828b0e 	bge	r3,r2,10008108 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
100076dc:	e0ffef17 	ldw	r3,-68(fp)
100076e0:	e0bff017 	ldw	r2,-64(fp)
100076e4:	1885883a 	add	r2,r3,r2
100076e8:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
100076ec:	00840374 	movhi	r2,4109
100076f0:	109e9e04 	addi	r2,r2,31352
100076f4:	10c00217 	ldw	r3,8(r2)
100076f8:	e0bfe517 	ldw	r2,-108(fp)
100076fc:	18800926 	beq	r3,r2,10007724 <_realloc_r+0x114>
10007700:	e0bfe517 	ldw	r2,-108(fp)
10007704:	10c00117 	ldw	r3,4(r2)
10007708:	00bfff84 	movi	r2,-2
1000770c:	1884703a 	and	r2,r3,r2
10007710:	e0ffe517 	ldw	r3,-108(fp)
10007714:	1885883a 	add	r2,r3,r2
10007718:	10800117 	ldw	r2,4(r2)
1000771c:	1080004c 	andi	r2,r2,1
10007720:	1000461e 	bne	r2,zero,1000783c <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
10007724:	e0bfe517 	ldw	r2,-108(fp)
10007728:	10c00117 	ldw	r3,4(r2)
1000772c:	00bfff04 	movi	r2,-4
10007730:	1884703a 	and	r2,r3,r2
10007734:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
10007738:	00840374 	movhi	r2,4109
1000773c:	109e9e04 	addi	r2,r2,31352
10007740:	10c00217 	ldw	r3,8(r2)
10007744:	e0bfe517 	ldw	r2,-108(fp)
10007748:	1880251e 	bne	r3,r2,100077e0 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
1000774c:	e0ffe617 	ldw	r3,-104(fp)
10007750:	e0bfe417 	ldw	r2,-112(fp)
10007754:	1885883a 	add	r2,r3,r2
10007758:	1007883a 	mov	r3,r2
1000775c:	e0bff117 	ldw	r2,-60(fp)
10007760:	10800404 	addi	r2,r2,16
10007764:	18803816 	blt	r3,r2,10007848 <_realloc_r+0x238>
        {
          newsize += nextsize;
10007768:	e0ffe417 	ldw	r3,-112(fp)
1000776c:	e0bfe617 	ldw	r2,-104(fp)
10007770:	1885883a 	add	r2,r3,r2
10007774:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
10007778:	00840374 	movhi	r2,4109
1000777c:	109e9e04 	addi	r2,r2,31352
10007780:	e13fef17 	ldw	r4,-68(fp)
10007784:	e0fff117 	ldw	r3,-60(fp)
10007788:	20c7883a 	add	r3,r4,r3
1000778c:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
10007790:	00840374 	movhi	r2,4109
10007794:	109e9e04 	addi	r2,r2,31352
10007798:	10800217 	ldw	r2,8(r2)
1000779c:	e13fe417 	ldw	r4,-112(fp)
100077a0:	e0fff117 	ldw	r3,-60(fp)
100077a4:	20c7c83a 	sub	r3,r4,r3
100077a8:	18c00054 	ori	r3,r3,1
100077ac:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
100077b0:	e0bfef17 	ldw	r2,-68(fp)
100077b4:	10800117 	ldw	r2,4(r2)
100077b8:	10c0004c 	andi	r3,r2,1
100077bc:	e0bff117 	ldw	r2,-60(fp)
100077c0:	1886b03a 	or	r3,r3,r2
100077c4:	e0bfef17 	ldw	r2,-68(fp)
100077c8:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
100077cc:	e13ffd17 	ldw	r4,-12(fp)
100077d0:	0015d940 	call	10015d94 <__malloc_unlock>
          return chunk2mem(oldp);
100077d4:	e0bfef17 	ldw	r2,-68(fp)
100077d8:	10800204 	addi	r2,r2,8
100077dc:	00028306 	br	100081ec <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
100077e0:	e0ffe617 	ldw	r3,-104(fp)
100077e4:	e0bfe417 	ldw	r2,-112(fp)
100077e8:	1885883a 	add	r2,r3,r2
100077ec:	1007883a 	mov	r3,r2
100077f0:	e0bff117 	ldw	r2,-60(fp)
100077f4:	18801416 	blt	r3,r2,10007848 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
100077f8:	e0bfe517 	ldw	r2,-108(fp)
100077fc:	10800317 	ldw	r2,12(r2)
10007800:	e0bff215 	stw	r2,-56(fp)
10007804:	e0bfe517 	ldw	r2,-108(fp)
10007808:	10800217 	ldw	r2,8(r2)
1000780c:	e0bff315 	stw	r2,-52(fp)
10007810:	e0bff317 	ldw	r2,-52(fp)
10007814:	e0fff217 	ldw	r3,-56(fp)
10007818:	10c00315 	stw	r3,12(r2)
1000781c:	e0bff217 	ldw	r2,-56(fp)
10007820:	e0fff317 	ldw	r3,-52(fp)
10007824:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
10007828:	e0ffe417 	ldw	r3,-112(fp)
1000782c:	e0bfe617 	ldw	r2,-104(fp)
10007830:	1885883a 	add	r2,r3,r2
10007834:	e0bfe415 	stw	r2,-112(fp)
        goto split;
10007838:	00023306 	br	10008108 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
1000783c:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
10007840:	e03fe615 	stw	zero,-104(fp)
10007844:	00000106 	br	1000784c <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
10007848:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
1000784c:	e0bfef17 	ldw	r2,-68(fp)
10007850:	10800117 	ldw	r2,4(r2)
10007854:	1080004c 	andi	r2,r2,1
10007858:	1001a91e 	bne	r2,zero,10007f00 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
1000785c:	e0bfef17 	ldw	r2,-68(fp)
10007860:	10800017 	ldw	r2,0(r2)
10007864:	0085c83a 	sub	r2,zero,r2
10007868:	e0ffef17 	ldw	r3,-68(fp)
1000786c:	1885883a 	add	r2,r3,r2
10007870:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
10007874:	e0bff417 	ldw	r2,-48(fp)
10007878:	10c00117 	ldw	r3,4(r2)
1000787c:	00bfff04 	movi	r2,-4
10007880:	1884703a 	and	r2,r3,r2
10007884:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
10007888:	e0bfe517 	ldw	r2,-108(fp)
1000788c:	10012226 	beq	r2,zero,10007d18 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
10007890:	00840374 	movhi	r2,4109
10007894:	109e9e04 	addi	r2,r2,31352
10007898:	10c00217 	ldw	r3,8(r2)
1000789c:	e0bfe517 	ldw	r2,-108(fp)
100078a0:	1880951e 	bne	r3,r2,10007af8 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
100078a4:	e0ffe617 	ldw	r3,-104(fp)
100078a8:	e0bff517 	ldw	r2,-44(fp)
100078ac:	1887883a 	add	r3,r3,r2
100078b0:	e0bfe417 	ldw	r2,-112(fp)
100078b4:	1885883a 	add	r2,r3,r2
100078b8:	1007883a 	mov	r3,r2
100078bc:	e0bff117 	ldw	r2,-60(fp)
100078c0:	10800404 	addi	r2,r2,16
100078c4:	18811416 	blt	r3,r2,10007d18 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
100078c8:	e0bff417 	ldw	r2,-48(fp)
100078cc:	10800317 	ldw	r2,12(r2)
100078d0:	e0bff215 	stw	r2,-56(fp)
100078d4:	e0bff417 	ldw	r2,-48(fp)
100078d8:	10800217 	ldw	r2,8(r2)
100078dc:	e0bff315 	stw	r2,-52(fp)
100078e0:	e0bff317 	ldw	r2,-52(fp)
100078e4:	e0fff217 	ldw	r3,-56(fp)
100078e8:	10c00315 	stw	r3,12(r2)
100078ec:	e0bff217 	ldw	r2,-56(fp)
100078f0:	e0fff317 	ldw	r3,-52(fp)
100078f4:	10c00215 	stw	r3,8(r2)
            newp = prev;
100078f8:	e0bff417 	ldw	r2,-48(fp)
100078fc:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
10007900:	e0fff517 	ldw	r3,-44(fp)
10007904:	e0bfe617 	ldw	r2,-104(fp)
10007908:	1885883a 	add	r2,r3,r2
1000790c:	e0ffe417 	ldw	r3,-112(fp)
10007910:	1885883a 	add	r2,r3,r2
10007914:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
10007918:	e0bfe317 	ldw	r2,-116(fp)
1000791c:	10800204 	addi	r2,r2,8
10007920:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007924:	e0bff017 	ldw	r2,-64(fp)
10007928:	10bfff04 	addi	r2,r2,-4
1000792c:	e0bff715 	stw	r2,-36(fp)
10007930:	e0bff717 	ldw	r2,-36(fp)
10007934:	10800968 	cmpgeui	r2,r2,37
10007938:	1000521e 	bne	r2,zero,10007a84 <_realloc_r+0x474>
1000793c:	e0bffe17 	ldw	r2,-8(fp)
10007940:	e0bfe715 	stw	r2,-100(fp)
10007944:	e0bff617 	ldw	r2,-40(fp)
10007948:	e0bfe815 	stw	r2,-96(fp)
1000794c:	e0bff717 	ldw	r2,-36(fp)
10007950:	10800530 	cmpltui	r2,r2,20
10007954:	1000361e 	bne	r2,zero,10007a30 <_realloc_r+0x420>
10007958:	e0bfe817 	ldw	r2,-96(fp)
1000795c:	10c00104 	addi	r3,r2,4
10007960:	e0ffe815 	stw	r3,-96(fp)
10007964:	e0ffe717 	ldw	r3,-100(fp)
10007968:	19000104 	addi	r4,r3,4
1000796c:	e13fe715 	stw	r4,-100(fp)
10007970:	18c00017 	ldw	r3,0(r3)
10007974:	10c00015 	stw	r3,0(r2)
10007978:	e0bfe817 	ldw	r2,-96(fp)
1000797c:	10c00104 	addi	r3,r2,4
10007980:	e0ffe815 	stw	r3,-96(fp)
10007984:	e0ffe717 	ldw	r3,-100(fp)
10007988:	19000104 	addi	r4,r3,4
1000798c:	e13fe715 	stw	r4,-100(fp)
10007990:	18c00017 	ldw	r3,0(r3)
10007994:	10c00015 	stw	r3,0(r2)
10007998:	e0bff717 	ldw	r2,-36(fp)
1000799c:	10800730 	cmpltui	r2,r2,28
100079a0:	1000231e 	bne	r2,zero,10007a30 <_realloc_r+0x420>
100079a4:	e0bfe817 	ldw	r2,-96(fp)
100079a8:	10c00104 	addi	r3,r2,4
100079ac:	e0ffe815 	stw	r3,-96(fp)
100079b0:	e0ffe717 	ldw	r3,-100(fp)
100079b4:	19000104 	addi	r4,r3,4
100079b8:	e13fe715 	stw	r4,-100(fp)
100079bc:	18c00017 	ldw	r3,0(r3)
100079c0:	10c00015 	stw	r3,0(r2)
100079c4:	e0bfe817 	ldw	r2,-96(fp)
100079c8:	10c00104 	addi	r3,r2,4
100079cc:	e0ffe815 	stw	r3,-96(fp)
100079d0:	e0ffe717 	ldw	r3,-100(fp)
100079d4:	19000104 	addi	r4,r3,4
100079d8:	e13fe715 	stw	r4,-100(fp)
100079dc:	18c00017 	ldw	r3,0(r3)
100079e0:	10c00015 	stw	r3,0(r2)
100079e4:	e0bff717 	ldw	r2,-36(fp)
100079e8:	10800930 	cmpltui	r2,r2,36
100079ec:	1000101e 	bne	r2,zero,10007a30 <_realloc_r+0x420>
100079f0:	e0bfe817 	ldw	r2,-96(fp)
100079f4:	10c00104 	addi	r3,r2,4
100079f8:	e0ffe815 	stw	r3,-96(fp)
100079fc:	e0ffe717 	ldw	r3,-100(fp)
10007a00:	19000104 	addi	r4,r3,4
10007a04:	e13fe715 	stw	r4,-100(fp)
10007a08:	18c00017 	ldw	r3,0(r3)
10007a0c:	10c00015 	stw	r3,0(r2)
10007a10:	e0bfe817 	ldw	r2,-96(fp)
10007a14:	10c00104 	addi	r3,r2,4
10007a18:	e0ffe815 	stw	r3,-96(fp)
10007a1c:	e0ffe717 	ldw	r3,-100(fp)
10007a20:	19000104 	addi	r4,r3,4
10007a24:	e13fe715 	stw	r4,-100(fp)
10007a28:	18c00017 	ldw	r3,0(r3)
10007a2c:	10c00015 	stw	r3,0(r2)
10007a30:	e0bfe817 	ldw	r2,-96(fp)
10007a34:	10c00104 	addi	r3,r2,4
10007a38:	e0ffe815 	stw	r3,-96(fp)
10007a3c:	e0ffe717 	ldw	r3,-100(fp)
10007a40:	19000104 	addi	r4,r3,4
10007a44:	e13fe715 	stw	r4,-100(fp)
10007a48:	18c00017 	ldw	r3,0(r3)
10007a4c:	10c00015 	stw	r3,0(r2)
10007a50:	e0bfe817 	ldw	r2,-96(fp)
10007a54:	10c00104 	addi	r3,r2,4
10007a58:	e0ffe815 	stw	r3,-96(fp)
10007a5c:	e0ffe717 	ldw	r3,-100(fp)
10007a60:	19000104 	addi	r4,r3,4
10007a64:	e13fe715 	stw	r4,-100(fp)
10007a68:	18c00017 	ldw	r3,0(r3)
10007a6c:	10c00015 	stw	r3,0(r2)
10007a70:	e0bfe717 	ldw	r2,-100(fp)
10007a74:	10c00017 	ldw	r3,0(r2)
10007a78:	e0bfe817 	ldw	r2,-96(fp)
10007a7c:	10c00015 	stw	r3,0(r2)
10007a80:	00000406 	br	10007a94 <_realloc_r+0x484>
10007a84:	e1bff717 	ldw	r6,-36(fp)
10007a88:	e17ffe17 	ldw	r5,-8(fp)
10007a8c:	e13ff617 	ldw	r4,-40(fp)
10007a90:	000f42c0 	call	1000f42c <memmove>
            top = chunk_at_offset(newp, nb);
10007a94:	00840374 	movhi	r2,4109
10007a98:	109e9e04 	addi	r2,r2,31352
10007a9c:	e13fe317 	ldw	r4,-116(fp)
10007aa0:	e0fff117 	ldw	r3,-60(fp)
10007aa4:	20c7883a 	add	r3,r4,r3
10007aa8:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
10007aac:	00840374 	movhi	r2,4109
10007ab0:	109e9e04 	addi	r2,r2,31352
10007ab4:	10800217 	ldw	r2,8(r2)
10007ab8:	e13fe417 	ldw	r4,-112(fp)
10007abc:	e0fff117 	ldw	r3,-60(fp)
10007ac0:	20c7c83a 	sub	r3,r4,r3
10007ac4:	18c00054 	ori	r3,r3,1
10007ac8:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
10007acc:	e0bfe317 	ldw	r2,-116(fp)
10007ad0:	10800117 	ldw	r2,4(r2)
10007ad4:	10c0004c 	andi	r3,r2,1
10007ad8:	e0bff117 	ldw	r2,-60(fp)
10007adc:	1886b03a 	or	r3,r3,r2
10007ae0:	e0bfe317 	ldw	r2,-116(fp)
10007ae4:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
10007ae8:	e13ffd17 	ldw	r4,-12(fp)
10007aec:	0015d940 	call	10015d94 <__malloc_unlock>
            return newmem;
10007af0:	e0bff617 	ldw	r2,-40(fp)
10007af4:	0001bd06 	br	100081ec <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
10007af8:	e0ffe617 	ldw	r3,-104(fp)
10007afc:	e0bff517 	ldw	r2,-44(fp)
10007b00:	1887883a 	add	r3,r3,r2
10007b04:	e0bfe417 	ldw	r2,-112(fp)
10007b08:	1885883a 	add	r2,r3,r2
10007b0c:	1007883a 	mov	r3,r2
10007b10:	e0bff117 	ldw	r2,-60(fp)
10007b14:	18808016 	blt	r3,r2,10007d18 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
10007b18:	e0bfe517 	ldw	r2,-108(fp)
10007b1c:	10800317 	ldw	r2,12(r2)
10007b20:	e0bff215 	stw	r2,-56(fp)
10007b24:	e0bfe517 	ldw	r2,-108(fp)
10007b28:	10800217 	ldw	r2,8(r2)
10007b2c:	e0bff315 	stw	r2,-52(fp)
10007b30:	e0bff317 	ldw	r2,-52(fp)
10007b34:	e0fff217 	ldw	r3,-56(fp)
10007b38:	10c00315 	stw	r3,12(r2)
10007b3c:	e0bff217 	ldw	r2,-56(fp)
10007b40:	e0fff317 	ldw	r3,-52(fp)
10007b44:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
10007b48:	e0bff417 	ldw	r2,-48(fp)
10007b4c:	10800317 	ldw	r2,12(r2)
10007b50:	e0bff215 	stw	r2,-56(fp)
10007b54:	e0bff417 	ldw	r2,-48(fp)
10007b58:	10800217 	ldw	r2,8(r2)
10007b5c:	e0bff315 	stw	r2,-52(fp)
10007b60:	e0bff317 	ldw	r2,-52(fp)
10007b64:	e0fff217 	ldw	r3,-56(fp)
10007b68:	10c00315 	stw	r3,12(r2)
10007b6c:	e0bff217 	ldw	r2,-56(fp)
10007b70:	e0fff317 	ldw	r3,-52(fp)
10007b74:	10c00215 	stw	r3,8(r2)
          newp = prev;
10007b78:	e0bff417 	ldw	r2,-48(fp)
10007b7c:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
10007b80:	e0ffe617 	ldw	r3,-104(fp)
10007b84:	e0bff517 	ldw	r2,-44(fp)
10007b88:	1885883a 	add	r2,r3,r2
10007b8c:	e0ffe417 	ldw	r3,-112(fp)
10007b90:	1885883a 	add	r2,r3,r2
10007b94:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
10007b98:	e0bfe317 	ldw	r2,-116(fp)
10007b9c:	10800204 	addi	r2,r2,8
10007ba0:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007ba4:	e0bff017 	ldw	r2,-64(fp)
10007ba8:	10bfff04 	addi	r2,r2,-4
10007bac:	e0bff815 	stw	r2,-32(fp)
10007bb0:	e0bff817 	ldw	r2,-32(fp)
10007bb4:	10800968 	cmpgeui	r2,r2,37
10007bb8:	1000521e 	bne	r2,zero,10007d04 <_realloc_r+0x6f4>
10007bbc:	e0bffe17 	ldw	r2,-8(fp)
10007bc0:	e0bfe915 	stw	r2,-92(fp)
10007bc4:	e0bff617 	ldw	r2,-40(fp)
10007bc8:	e0bfea15 	stw	r2,-88(fp)
10007bcc:	e0bff817 	ldw	r2,-32(fp)
10007bd0:	10800530 	cmpltui	r2,r2,20
10007bd4:	1000361e 	bne	r2,zero,10007cb0 <_realloc_r+0x6a0>
10007bd8:	e0bfea17 	ldw	r2,-88(fp)
10007bdc:	10c00104 	addi	r3,r2,4
10007be0:	e0ffea15 	stw	r3,-88(fp)
10007be4:	e0ffe917 	ldw	r3,-92(fp)
10007be8:	19000104 	addi	r4,r3,4
10007bec:	e13fe915 	stw	r4,-92(fp)
10007bf0:	18c00017 	ldw	r3,0(r3)
10007bf4:	10c00015 	stw	r3,0(r2)
10007bf8:	e0bfea17 	ldw	r2,-88(fp)
10007bfc:	10c00104 	addi	r3,r2,4
10007c00:	e0ffea15 	stw	r3,-88(fp)
10007c04:	e0ffe917 	ldw	r3,-92(fp)
10007c08:	19000104 	addi	r4,r3,4
10007c0c:	e13fe915 	stw	r4,-92(fp)
10007c10:	18c00017 	ldw	r3,0(r3)
10007c14:	10c00015 	stw	r3,0(r2)
10007c18:	e0bff817 	ldw	r2,-32(fp)
10007c1c:	10800730 	cmpltui	r2,r2,28
10007c20:	1000231e 	bne	r2,zero,10007cb0 <_realloc_r+0x6a0>
10007c24:	e0bfea17 	ldw	r2,-88(fp)
10007c28:	10c00104 	addi	r3,r2,4
10007c2c:	e0ffea15 	stw	r3,-88(fp)
10007c30:	e0ffe917 	ldw	r3,-92(fp)
10007c34:	19000104 	addi	r4,r3,4
10007c38:	e13fe915 	stw	r4,-92(fp)
10007c3c:	18c00017 	ldw	r3,0(r3)
10007c40:	10c00015 	stw	r3,0(r2)
10007c44:	e0bfea17 	ldw	r2,-88(fp)
10007c48:	10c00104 	addi	r3,r2,4
10007c4c:	e0ffea15 	stw	r3,-88(fp)
10007c50:	e0ffe917 	ldw	r3,-92(fp)
10007c54:	19000104 	addi	r4,r3,4
10007c58:	e13fe915 	stw	r4,-92(fp)
10007c5c:	18c00017 	ldw	r3,0(r3)
10007c60:	10c00015 	stw	r3,0(r2)
10007c64:	e0bff817 	ldw	r2,-32(fp)
10007c68:	10800930 	cmpltui	r2,r2,36
10007c6c:	1000101e 	bne	r2,zero,10007cb0 <_realloc_r+0x6a0>
10007c70:	e0bfea17 	ldw	r2,-88(fp)
10007c74:	10c00104 	addi	r3,r2,4
10007c78:	e0ffea15 	stw	r3,-88(fp)
10007c7c:	e0ffe917 	ldw	r3,-92(fp)
10007c80:	19000104 	addi	r4,r3,4
10007c84:	e13fe915 	stw	r4,-92(fp)
10007c88:	18c00017 	ldw	r3,0(r3)
10007c8c:	10c00015 	stw	r3,0(r2)
10007c90:	e0bfea17 	ldw	r2,-88(fp)
10007c94:	10c00104 	addi	r3,r2,4
10007c98:	e0ffea15 	stw	r3,-88(fp)
10007c9c:	e0ffe917 	ldw	r3,-92(fp)
10007ca0:	19000104 	addi	r4,r3,4
10007ca4:	e13fe915 	stw	r4,-92(fp)
10007ca8:	18c00017 	ldw	r3,0(r3)
10007cac:	10c00015 	stw	r3,0(r2)
10007cb0:	e0bfea17 	ldw	r2,-88(fp)
10007cb4:	10c00104 	addi	r3,r2,4
10007cb8:	e0ffea15 	stw	r3,-88(fp)
10007cbc:	e0ffe917 	ldw	r3,-92(fp)
10007cc0:	19000104 	addi	r4,r3,4
10007cc4:	e13fe915 	stw	r4,-92(fp)
10007cc8:	18c00017 	ldw	r3,0(r3)
10007ccc:	10c00015 	stw	r3,0(r2)
10007cd0:	e0bfea17 	ldw	r2,-88(fp)
10007cd4:	10c00104 	addi	r3,r2,4
10007cd8:	e0ffea15 	stw	r3,-88(fp)
10007cdc:	e0ffe917 	ldw	r3,-92(fp)
10007ce0:	19000104 	addi	r4,r3,4
10007ce4:	e13fe915 	stw	r4,-92(fp)
10007ce8:	18c00017 	ldw	r3,0(r3)
10007cec:	10c00015 	stw	r3,0(r2)
10007cf0:	e0bfe917 	ldw	r2,-92(fp)
10007cf4:	10c00017 	ldw	r3,0(r2)
10007cf8:	e0bfea17 	ldw	r2,-88(fp)
10007cfc:	10c00015 	stw	r3,0(r2)
          goto split;
10007d00:	00010106 	br	10008108 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007d04:	e1bff817 	ldw	r6,-32(fp)
10007d08:	e17ffe17 	ldw	r5,-8(fp)
10007d0c:	e13ff617 	ldw	r4,-40(fp)
10007d10:	000f42c0 	call	1000f42c <memmove>
          goto split;
10007d14:	0000fc06 	br	10008108 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
10007d18:	e0bff417 	ldw	r2,-48(fp)
10007d1c:	10007826 	beq	r2,zero,10007f00 <_realloc_r+0x8f0>
10007d20:	e0fff517 	ldw	r3,-44(fp)
10007d24:	e0bfe417 	ldw	r2,-112(fp)
10007d28:	1885883a 	add	r2,r3,r2
10007d2c:	1007883a 	mov	r3,r2
10007d30:	e0bff117 	ldw	r2,-60(fp)
10007d34:	18807216 	blt	r3,r2,10007f00 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
10007d38:	e0bff417 	ldw	r2,-48(fp)
10007d3c:	10800317 	ldw	r2,12(r2)
10007d40:	e0bff215 	stw	r2,-56(fp)
10007d44:	e0bff417 	ldw	r2,-48(fp)
10007d48:	10800217 	ldw	r2,8(r2)
10007d4c:	e0bff315 	stw	r2,-52(fp)
10007d50:	e0bff317 	ldw	r2,-52(fp)
10007d54:	e0fff217 	ldw	r3,-56(fp)
10007d58:	10c00315 	stw	r3,12(r2)
10007d5c:	e0bff217 	ldw	r2,-56(fp)
10007d60:	e0fff317 	ldw	r3,-52(fp)
10007d64:	10c00215 	stw	r3,8(r2)
        newp = prev;
10007d68:	e0bff417 	ldw	r2,-48(fp)
10007d6c:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
10007d70:	e0ffe417 	ldw	r3,-112(fp)
10007d74:	e0bff517 	ldw	r2,-44(fp)
10007d78:	1885883a 	add	r2,r3,r2
10007d7c:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
10007d80:	e0bfe317 	ldw	r2,-116(fp)
10007d84:	10800204 	addi	r2,r2,8
10007d88:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007d8c:	e0bff017 	ldw	r2,-64(fp)
10007d90:	10bfff04 	addi	r2,r2,-4
10007d94:	e0bff915 	stw	r2,-28(fp)
10007d98:	e0bff917 	ldw	r2,-28(fp)
10007d9c:	10800968 	cmpgeui	r2,r2,37
10007da0:	1000521e 	bne	r2,zero,10007eec <_realloc_r+0x8dc>
10007da4:	e0bffe17 	ldw	r2,-8(fp)
10007da8:	e0bfeb15 	stw	r2,-84(fp)
10007dac:	e0bff617 	ldw	r2,-40(fp)
10007db0:	e0bfec15 	stw	r2,-80(fp)
10007db4:	e0bff917 	ldw	r2,-28(fp)
10007db8:	10800530 	cmpltui	r2,r2,20
10007dbc:	1000361e 	bne	r2,zero,10007e98 <_realloc_r+0x888>
10007dc0:	e0bfec17 	ldw	r2,-80(fp)
10007dc4:	10c00104 	addi	r3,r2,4
10007dc8:	e0ffec15 	stw	r3,-80(fp)
10007dcc:	e0ffeb17 	ldw	r3,-84(fp)
10007dd0:	19000104 	addi	r4,r3,4
10007dd4:	e13feb15 	stw	r4,-84(fp)
10007dd8:	18c00017 	ldw	r3,0(r3)
10007ddc:	10c00015 	stw	r3,0(r2)
10007de0:	e0bfec17 	ldw	r2,-80(fp)
10007de4:	10c00104 	addi	r3,r2,4
10007de8:	e0ffec15 	stw	r3,-80(fp)
10007dec:	e0ffeb17 	ldw	r3,-84(fp)
10007df0:	19000104 	addi	r4,r3,4
10007df4:	e13feb15 	stw	r4,-84(fp)
10007df8:	18c00017 	ldw	r3,0(r3)
10007dfc:	10c00015 	stw	r3,0(r2)
10007e00:	e0bff917 	ldw	r2,-28(fp)
10007e04:	10800730 	cmpltui	r2,r2,28
10007e08:	1000231e 	bne	r2,zero,10007e98 <_realloc_r+0x888>
10007e0c:	e0bfec17 	ldw	r2,-80(fp)
10007e10:	10c00104 	addi	r3,r2,4
10007e14:	e0ffec15 	stw	r3,-80(fp)
10007e18:	e0ffeb17 	ldw	r3,-84(fp)
10007e1c:	19000104 	addi	r4,r3,4
10007e20:	e13feb15 	stw	r4,-84(fp)
10007e24:	18c00017 	ldw	r3,0(r3)
10007e28:	10c00015 	stw	r3,0(r2)
10007e2c:	e0bfec17 	ldw	r2,-80(fp)
10007e30:	10c00104 	addi	r3,r2,4
10007e34:	e0ffec15 	stw	r3,-80(fp)
10007e38:	e0ffeb17 	ldw	r3,-84(fp)
10007e3c:	19000104 	addi	r4,r3,4
10007e40:	e13feb15 	stw	r4,-84(fp)
10007e44:	18c00017 	ldw	r3,0(r3)
10007e48:	10c00015 	stw	r3,0(r2)
10007e4c:	e0bff917 	ldw	r2,-28(fp)
10007e50:	10800930 	cmpltui	r2,r2,36
10007e54:	1000101e 	bne	r2,zero,10007e98 <_realloc_r+0x888>
10007e58:	e0bfec17 	ldw	r2,-80(fp)
10007e5c:	10c00104 	addi	r3,r2,4
10007e60:	e0ffec15 	stw	r3,-80(fp)
10007e64:	e0ffeb17 	ldw	r3,-84(fp)
10007e68:	19000104 	addi	r4,r3,4
10007e6c:	e13feb15 	stw	r4,-84(fp)
10007e70:	18c00017 	ldw	r3,0(r3)
10007e74:	10c00015 	stw	r3,0(r2)
10007e78:	e0bfec17 	ldw	r2,-80(fp)
10007e7c:	10c00104 	addi	r3,r2,4
10007e80:	e0ffec15 	stw	r3,-80(fp)
10007e84:	e0ffeb17 	ldw	r3,-84(fp)
10007e88:	19000104 	addi	r4,r3,4
10007e8c:	e13feb15 	stw	r4,-84(fp)
10007e90:	18c00017 	ldw	r3,0(r3)
10007e94:	10c00015 	stw	r3,0(r2)
10007e98:	e0bfec17 	ldw	r2,-80(fp)
10007e9c:	10c00104 	addi	r3,r2,4
10007ea0:	e0ffec15 	stw	r3,-80(fp)
10007ea4:	e0ffeb17 	ldw	r3,-84(fp)
10007ea8:	19000104 	addi	r4,r3,4
10007eac:	e13feb15 	stw	r4,-84(fp)
10007eb0:	18c00017 	ldw	r3,0(r3)
10007eb4:	10c00015 	stw	r3,0(r2)
10007eb8:	e0bfec17 	ldw	r2,-80(fp)
10007ebc:	10c00104 	addi	r3,r2,4
10007ec0:	e0ffec15 	stw	r3,-80(fp)
10007ec4:	e0ffeb17 	ldw	r3,-84(fp)
10007ec8:	19000104 	addi	r4,r3,4
10007ecc:	e13feb15 	stw	r4,-84(fp)
10007ed0:	18c00017 	ldw	r3,0(r3)
10007ed4:	10c00015 	stw	r3,0(r2)
10007ed8:	e0bfeb17 	ldw	r2,-84(fp)
10007edc:	10c00017 	ldw	r3,0(r2)
10007ee0:	e0bfec17 	ldw	r2,-80(fp)
10007ee4:	10c00015 	stw	r3,0(r2)
        goto split;
10007ee8:	00008706 	br	10008108 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007eec:	e1bff917 	ldw	r6,-28(fp)
10007ef0:	e17ffe17 	ldw	r5,-8(fp)
10007ef4:	e13ff617 	ldw	r4,-40(fp)
10007ef8:	000f42c0 	call	1000f42c <memmove>
        goto split;
10007efc:	00008206 	br	10008108 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
10007f00:	e17fff17 	ldw	r5,-4(fp)
10007f04:	e13ffd17 	ldw	r4,-12(fp)
10007f08:	00064080 	call	10006408 <_malloc_r>
10007f0c:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
10007f10:	e0bff617 	ldw	r2,-40(fp)
10007f14:	1000041e 	bne	r2,zero,10007f28 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
10007f18:	e13ffd17 	ldw	r4,-12(fp)
10007f1c:	0015d940 	call	10015d94 <__malloc_unlock>
      return 0;
10007f20:	0005883a 	mov	r2,zero
10007f24:	0000b106 	br	100081ec <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
10007f28:	e0bff617 	ldw	r2,-40(fp)
10007f2c:	10bffe04 	addi	r2,r2,-8
10007f30:	e0bfe315 	stw	r2,-116(fp)
10007f34:	e0bfef17 	ldw	r2,-68(fp)
10007f38:	10c00117 	ldw	r3,4(r2)
10007f3c:	00bfff84 	movi	r2,-2
10007f40:	1884703a 	and	r2,r3,r2
10007f44:	e0ffef17 	ldw	r3,-68(fp)
10007f48:	1885883a 	add	r2,r3,r2
10007f4c:	e0ffe317 	ldw	r3,-116(fp)
10007f50:	18800a1e 	bne	r3,r2,10007f7c <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
10007f54:	e0bfe317 	ldw	r2,-116(fp)
10007f58:	10c00117 	ldw	r3,4(r2)
10007f5c:	00bfff04 	movi	r2,-4
10007f60:	1884703a 	and	r2,r3,r2
10007f64:	e0ffe417 	ldw	r3,-112(fp)
10007f68:	1885883a 	add	r2,r3,r2
10007f6c:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
10007f70:	e0bfef17 	ldw	r2,-68(fp)
10007f74:	e0bfe315 	stw	r2,-116(fp)
      goto split;
10007f78:	00006306 	br	10008108 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10007f7c:	e0bff017 	ldw	r2,-64(fp)
10007f80:	10bfff04 	addi	r2,r2,-4
10007f84:	e0bffa15 	stw	r2,-24(fp)
10007f88:	e0bffa17 	ldw	r2,-24(fp)
10007f8c:	10800968 	cmpgeui	r2,r2,37
10007f90:	1000521e 	bne	r2,zero,100080dc <_realloc_r+0xacc>
10007f94:	e0bffe17 	ldw	r2,-8(fp)
10007f98:	e0bfed15 	stw	r2,-76(fp)
10007f9c:	e0bff617 	ldw	r2,-40(fp)
10007fa0:	e0bfee15 	stw	r2,-72(fp)
10007fa4:	e0bffa17 	ldw	r2,-24(fp)
10007fa8:	10800530 	cmpltui	r2,r2,20
10007fac:	1000361e 	bne	r2,zero,10008088 <_realloc_r+0xa78>
10007fb0:	e0bfee17 	ldw	r2,-72(fp)
10007fb4:	10c00104 	addi	r3,r2,4
10007fb8:	e0ffee15 	stw	r3,-72(fp)
10007fbc:	e0ffed17 	ldw	r3,-76(fp)
10007fc0:	19000104 	addi	r4,r3,4
10007fc4:	e13fed15 	stw	r4,-76(fp)
10007fc8:	18c00017 	ldw	r3,0(r3)
10007fcc:	10c00015 	stw	r3,0(r2)
10007fd0:	e0bfee17 	ldw	r2,-72(fp)
10007fd4:	10c00104 	addi	r3,r2,4
10007fd8:	e0ffee15 	stw	r3,-72(fp)
10007fdc:	e0ffed17 	ldw	r3,-76(fp)
10007fe0:	19000104 	addi	r4,r3,4
10007fe4:	e13fed15 	stw	r4,-76(fp)
10007fe8:	18c00017 	ldw	r3,0(r3)
10007fec:	10c00015 	stw	r3,0(r2)
10007ff0:	e0bffa17 	ldw	r2,-24(fp)
10007ff4:	10800730 	cmpltui	r2,r2,28
10007ff8:	1000231e 	bne	r2,zero,10008088 <_realloc_r+0xa78>
10007ffc:	e0bfee17 	ldw	r2,-72(fp)
10008000:	10c00104 	addi	r3,r2,4
10008004:	e0ffee15 	stw	r3,-72(fp)
10008008:	e0ffed17 	ldw	r3,-76(fp)
1000800c:	19000104 	addi	r4,r3,4
10008010:	e13fed15 	stw	r4,-76(fp)
10008014:	18c00017 	ldw	r3,0(r3)
10008018:	10c00015 	stw	r3,0(r2)
1000801c:	e0bfee17 	ldw	r2,-72(fp)
10008020:	10c00104 	addi	r3,r2,4
10008024:	e0ffee15 	stw	r3,-72(fp)
10008028:	e0ffed17 	ldw	r3,-76(fp)
1000802c:	19000104 	addi	r4,r3,4
10008030:	e13fed15 	stw	r4,-76(fp)
10008034:	18c00017 	ldw	r3,0(r3)
10008038:	10c00015 	stw	r3,0(r2)
1000803c:	e0bffa17 	ldw	r2,-24(fp)
10008040:	10800930 	cmpltui	r2,r2,36
10008044:	1000101e 	bne	r2,zero,10008088 <_realloc_r+0xa78>
10008048:	e0bfee17 	ldw	r2,-72(fp)
1000804c:	10c00104 	addi	r3,r2,4
10008050:	e0ffee15 	stw	r3,-72(fp)
10008054:	e0ffed17 	ldw	r3,-76(fp)
10008058:	19000104 	addi	r4,r3,4
1000805c:	e13fed15 	stw	r4,-76(fp)
10008060:	18c00017 	ldw	r3,0(r3)
10008064:	10c00015 	stw	r3,0(r2)
10008068:	e0bfee17 	ldw	r2,-72(fp)
1000806c:	10c00104 	addi	r3,r2,4
10008070:	e0ffee15 	stw	r3,-72(fp)
10008074:	e0ffed17 	ldw	r3,-76(fp)
10008078:	19000104 	addi	r4,r3,4
1000807c:	e13fed15 	stw	r4,-76(fp)
10008080:	18c00017 	ldw	r3,0(r3)
10008084:	10c00015 	stw	r3,0(r2)
10008088:	e0bfee17 	ldw	r2,-72(fp)
1000808c:	10c00104 	addi	r3,r2,4
10008090:	e0ffee15 	stw	r3,-72(fp)
10008094:	e0ffed17 	ldw	r3,-76(fp)
10008098:	19000104 	addi	r4,r3,4
1000809c:	e13fed15 	stw	r4,-76(fp)
100080a0:	18c00017 	ldw	r3,0(r3)
100080a4:	10c00015 	stw	r3,0(r2)
100080a8:	e0bfee17 	ldw	r2,-72(fp)
100080ac:	10c00104 	addi	r3,r2,4
100080b0:	e0ffee15 	stw	r3,-72(fp)
100080b4:	e0ffed17 	ldw	r3,-76(fp)
100080b8:	19000104 	addi	r4,r3,4
100080bc:	e13fed15 	stw	r4,-76(fp)
100080c0:	18c00017 	ldw	r3,0(r3)
100080c4:	10c00015 	stw	r3,0(r2)
100080c8:	e0bfed17 	ldw	r2,-76(fp)
100080cc:	10c00017 	ldw	r3,0(r2)
100080d0:	e0bfee17 	ldw	r2,-72(fp)
100080d4:	10c00015 	stw	r3,0(r2)
100080d8:	00000406 	br	100080ec <_realloc_r+0xadc>
100080dc:	e1bffa17 	ldw	r6,-24(fp)
100080e0:	e17ffe17 	ldw	r5,-8(fp)
100080e4:	e13ff617 	ldw	r4,-40(fp)
100080e8:	000f42c0 	call	1000f42c <memmove>
    fREe(RCALL oldmem);
100080ec:	e17ffe17 	ldw	r5,-8(fp)
100080f0:	e13ffd17 	ldw	r4,-12(fp)
100080f4:	000dda40 	call	1000dda4 <_free_r>
    MALLOC_UNLOCK;
100080f8:	e13ffd17 	ldw	r4,-12(fp)
100080fc:	0015d940 	call	10015d94 <__malloc_unlock>
    return newmem;
10008100:	e0bff617 	ldw	r2,-40(fp)
10008104:	00003906 	br	100081ec <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
10008108:	e0ffe417 	ldw	r3,-112(fp)
1000810c:	e0bff117 	ldw	r2,-60(fp)
10008110:	1885c83a 	sub	r2,r3,r2
10008114:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
10008118:	e0bffb17 	ldw	r2,-20(fp)
1000811c:	10800430 	cmpltui	r2,r2,16
10008120:	10001e1e 	bne	r2,zero,1000819c <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
10008124:	e0ffe317 	ldw	r3,-116(fp)
10008128:	e0bff117 	ldw	r2,-60(fp)
1000812c:	1885883a 	add	r2,r3,r2
10008130:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
10008134:	e0bfe317 	ldw	r2,-116(fp)
10008138:	10800117 	ldw	r2,4(r2)
1000813c:	10c0004c 	andi	r3,r2,1
10008140:	e0bff117 	ldw	r2,-60(fp)
10008144:	1886b03a 	or	r3,r3,r2
10008148:	e0bfe317 	ldw	r2,-116(fp)
1000814c:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
10008150:	e0bffb17 	ldw	r2,-20(fp)
10008154:	10c00054 	ori	r3,r2,1
10008158:	e0bffc17 	ldw	r2,-16(fp)
1000815c:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
10008160:	e0fffc17 	ldw	r3,-16(fp)
10008164:	e0bffb17 	ldw	r2,-20(fp)
10008168:	1885883a 	add	r2,r3,r2
1000816c:	e13ffc17 	ldw	r4,-16(fp)
10008170:	e0fffb17 	ldw	r3,-20(fp)
10008174:	20c7883a 	add	r3,r4,r3
10008178:	18c00117 	ldw	r3,4(r3)
1000817c:	18c00054 	ori	r3,r3,1
10008180:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
10008184:	e0bffc17 	ldw	r2,-16(fp)
10008188:	10800204 	addi	r2,r2,8
1000818c:	100b883a 	mov	r5,r2
10008190:	e13ffd17 	ldw	r4,-12(fp)
10008194:	000dda40 	call	1000dda4 <_free_r>
10008198:	00001006 	br	100081dc <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
1000819c:	e0bfe317 	ldw	r2,-116(fp)
100081a0:	10800117 	ldw	r2,4(r2)
100081a4:	10c0004c 	andi	r3,r2,1
100081a8:	e0bfe417 	ldw	r2,-112(fp)
100081ac:	1886b03a 	or	r3,r3,r2
100081b0:	e0bfe317 	ldw	r2,-116(fp)
100081b4:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
100081b8:	e0ffe317 	ldw	r3,-116(fp)
100081bc:	e0bfe417 	ldw	r2,-112(fp)
100081c0:	1885883a 	add	r2,r3,r2
100081c4:	e13fe317 	ldw	r4,-116(fp)
100081c8:	e0ffe417 	ldw	r3,-112(fp)
100081cc:	20c7883a 	add	r3,r4,r3
100081d0:	18c00117 	ldw	r3,4(r3)
100081d4:	18c00054 	ori	r3,r3,1
100081d8:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
100081dc:	e13ffd17 	ldw	r4,-12(fp)
100081e0:	0015d940 	call	10015d94 <__malloc_unlock>
  return chunk2mem(newp);
100081e4:	e0bfe317 	ldw	r2,-116(fp)
100081e8:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
100081ec:	e037883a 	mov	sp,fp
100081f0:	dfc00117 	ldw	ra,4(sp)
100081f4:	df000017 	ldw	fp,0(sp)
100081f8:	dec00204 	addi	sp,sp,8
100081fc:	f800283a 	ret

10008200 <__srget_r>:

int
_DEFUN(__srget_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
10008200:	defffb04 	addi	sp,sp,-20
10008204:	dfc00415 	stw	ra,16(sp)
10008208:	df000315 	stw	fp,12(sp)
1000820c:	dc000215 	stw	r16,8(sp)
10008210:	df000304 	addi	fp,sp,12
10008214:	e13ffe15 	stw	r4,-8(fp)
10008218:	2821883a 	mov	r16,r5
  /* Ensure that any fake std stream is resolved before
     we call __srefill_r so we may access the true read buffer. */
  CHECK_INIT(ptr, fp);
1000821c:	e0bffe17 	ldw	r2,-8(fp)
10008220:	e0bffd15 	stw	r2,-12(fp)
10008224:	e0bffd17 	ldw	r2,-12(fp)
10008228:	10000526 	beq	r2,zero,10008240 <__srget_r+0x40>
1000822c:	e0bffd17 	ldw	r2,-12(fp)
10008230:	10800e17 	ldw	r2,56(r2)
10008234:	1000021e 	bne	r2,zero,10008240 <__srget_r+0x40>
10008238:	e13ffd17 	ldw	r4,-12(fp)
1000823c:	000db740 	call	1000db74 <__sinit>

  if (__srefill_r (ptr, fp) == 0)
10008240:	800b883a 	mov	r5,r16
10008244:	e13ffe17 	ldw	r4,-8(fp)
10008248:	00113480 	call	10011348 <__srefill_r>
1000824c:	1000091e 	bne	r2,zero,10008274 <__srget_r+0x74>
    {
      fp->_r--;
10008250:	80800117 	ldw	r2,4(r16)
10008254:	10bfffc4 	addi	r2,r2,-1
10008258:	80800115 	stw	r2,4(r16)
      return *fp->_p++;
1000825c:	80800017 	ldw	r2,0(r16)
10008260:	10c00044 	addi	r3,r2,1
10008264:	80c00015 	stw	r3,0(r16)
10008268:	10800003 	ldbu	r2,0(r2)
1000826c:	10803fcc 	andi	r2,r2,255
10008270:	00000106 	br	10008278 <__srget_r+0x78>
    }
  return EOF;
10008274:	00bfffc4 	movi	r2,-1
}
10008278:	e6ffff04 	addi	sp,fp,-4
1000827c:	dfc00217 	ldw	ra,8(sp)
10008280:	df000117 	ldw	fp,4(sp)
10008284:	dc000017 	ldw	r16,0(sp)
10008288:	dec00304 	addi	sp,sp,12
1000828c:	f800283a 	ret

10008290 <__srget>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
_DEFUN(__srget, (fp),
       register FILE *fp)
{
10008290:	defffe04 	addi	sp,sp,-8
10008294:	dfc00115 	stw	ra,4(sp)
10008298:	df000015 	stw	fp,0(sp)
1000829c:	d839883a 	mov	fp,sp
100082a0:	2007883a 	mov	r3,r4
  return __srget_r (_REENT, fp);
100082a4:	008403b4 	movhi	r2,4110
100082a8:	10a45004 	addi	r2,r2,-28352
100082ac:	10800017 	ldw	r2,0(r2)
100082b0:	180b883a 	mov	r5,r3
100082b4:	1009883a 	mov	r4,r2
100082b8:	00082000 	call	10008200 <__srget_r>
}
100082bc:	e037883a 	mov	sp,fp
100082c0:	dfc00117 	ldw	ra,4(sp)
100082c4:	df000017 	ldw	fp,0(sp)
100082c8:	dec00204 	addi	sp,sp,8
100082cc:	f800283a 	ret

100082d0 <ldexp>:
	double ldexp(double value, int exp)
#else
	double ldexp(value, exp)
	double value; int exp;
#endif
{
100082d0:	defffb04 	addi	sp,sp,-20
100082d4:	dfc00415 	stw	ra,16(sp)
100082d8:	df000315 	stw	fp,12(sp)
100082dc:	df000304 	addi	fp,sp,12
100082e0:	e13ffd15 	stw	r4,-12(fp)
100082e4:	e17ffe15 	stw	r5,-8(fp)
100082e8:	e1bfff15 	stw	r6,-4(fp)
	if(!finite(value)||value==0.0) return value;
100082ec:	e13ffd17 	ldw	r4,-12(fp)
100082f0:	e17ffe17 	ldw	r5,-8(fp)
100082f4:	00116580 	call	10011658 <finite>
100082f8:	10000626 	beq	r2,zero,10008314 <ldexp+0x44>
100082fc:	000d883a 	mov	r6,zero
10008300:	000f883a 	mov	r7,zero
10008304:	e13ffd17 	ldw	r4,-12(fp)
10008308:	e17ffe17 	ldw	r5,-8(fp)
1000830c:	00152180 	call	10015218 <__eqdf2>
10008310:	1000031e 	bne	r2,zero,10008320 <ldexp+0x50>
10008314:	e0bffd17 	ldw	r2,-12(fp)
10008318:	e0fffe17 	ldw	r3,-8(fp)
1000831c:	00001606 	br	10008378 <ldexp+0xa8>
	value = scalbn(value,exp);
10008320:	e1bfff17 	ldw	r6,-4(fp)
10008324:	e13ffd17 	ldw	r4,-12(fp)
10008328:	e17ffe17 	ldw	r5,-8(fp)
1000832c:	000839c0 	call	1000839c <scalbn>
10008330:	e0bffd15 	stw	r2,-12(fp)
10008334:	e0fffe15 	stw	r3,-8(fp)
	if(!finite(value)||value==0.0) errno = ERANGE;
10008338:	e13ffd17 	ldw	r4,-12(fp)
1000833c:	e17ffe17 	ldw	r5,-8(fp)
10008340:	00116580 	call	10011658 <finite>
10008344:	10000626 	beq	r2,zero,10008360 <ldexp+0x90>
10008348:	000d883a 	mov	r6,zero
1000834c:	000f883a 	mov	r7,zero
10008350:	e13ffd17 	ldw	r4,-12(fp)
10008354:	e17ffe17 	ldw	r5,-8(fp)
10008358:	00152180 	call	10015218 <__eqdf2>
1000835c:	1000041e 	bne	r2,zero,10008370 <ldexp+0xa0>
10008360:	000d3800 	call	1000d380 <__errno>
10008364:	1007883a 	mov	r3,r2
10008368:	00800884 	movi	r2,34
1000836c:	18800015 	stw	r2,0(r3)
	return value;
10008370:	e0bffd17 	ldw	r2,-12(fp)
10008374:	e0fffe17 	ldw	r3,-8(fp)
10008378:	1009883a 	mov	r4,r2
1000837c:	180b883a 	mov	r5,r3
}
10008380:	2005883a 	mov	r2,r4
10008384:	2807883a 	mov	r3,r5
10008388:	e037883a 	mov	sp,fp
1000838c:	dfc00117 	ldw	ra,4(sp)
10008390:	df000017 	ldw	fp,0(sp)
10008394:	dec00204 	addi	sp,sp,8
10008398:	f800283a 	ret

1000839c <scalbn>:
	double scalbn (double x, int n)
#else
	double scalbn (x,n)
	double x; int n;
#endif
{
1000839c:	defff004 	addi	sp,sp,-64
100083a0:	dfc00f15 	stw	ra,60(sp)
100083a4:	df000e15 	stw	fp,56(sp)
100083a8:	df000e04 	addi	fp,sp,56
100083ac:	e13ffd15 	stw	r4,-12(fp)
100083b0:	e17ffe15 	stw	r5,-8(fp)
100083b4:	e1bfff15 	stw	r6,-4(fp)
	__int32_t  k,hx,lx;
	EXTRACT_WORDS(hx,lx,x);
100083b8:	e0bffd17 	ldw	r2,-12(fp)
100083bc:	e0bff515 	stw	r2,-44(fp)
100083c0:	e0bffe17 	ldw	r2,-8(fp)
100083c4:	e0bff615 	stw	r2,-40(fp)
100083c8:	e0bff617 	ldw	r2,-40(fp)
100083cc:	e0bff315 	stw	r2,-52(fp)
100083d0:	e0bff517 	ldw	r2,-44(fp)
100083d4:	e0bff415 	stw	r2,-48(fp)
        k = (hx&0x7ff00000)>>20;		/* extract exponent */
100083d8:	e0bff317 	ldw	r2,-52(fp)
100083dc:	109ffc2c 	andhi	r2,r2,32752
100083e0:	1005d53a 	srai	r2,r2,20
100083e4:	e0bff215 	stw	r2,-56(fp)
        if (k==0) {				/* 0 or subnormal x */
100083e8:	e0bff217 	ldw	r2,-56(fp)
100083ec:	1000321e 	bne	r2,zero,100084b8 <scalbn+0x11c>
            if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
100083f0:	e0fff317 	ldw	r3,-52(fp)
100083f4:	00a00034 	movhi	r2,32768
100083f8:	10bfffc4 	addi	r2,r2,-1
100083fc:	1886703a 	and	r3,r3,r2
10008400:	e0bff417 	ldw	r2,-48(fp)
10008404:	1884b03a 	or	r2,r3,r2
10008408:	1000031e 	bne	r2,zero,10008418 <scalbn+0x7c>
1000840c:	e0bffd17 	ldw	r2,-12(fp)
10008410:	e0fffe17 	ldw	r3,-8(fp)
10008414:	0000c206 	br	10008720 <scalbn+0x384>
	    x *= two54; 
10008418:	0005883a 	mov	r2,zero
1000841c:	00d0d434 	movhi	r3,17232
10008420:	100d883a 	mov	r6,r2
10008424:	180f883a 	mov	r7,r3
10008428:	e13ffd17 	ldw	r4,-12(fp)
1000842c:	e17ffe17 	ldw	r5,-8(fp)
10008430:	00045880 	call	10004588 <__muldf3>
10008434:	1009883a 	mov	r4,r2
10008438:	180b883a 	mov	r5,r3
1000843c:	e13ffd15 	stw	r4,-12(fp)
10008440:	e17ffe15 	stw	r5,-8(fp)
	    GET_HIGH_WORD(hx,x);
10008444:	e0bffd17 	ldw	r2,-12(fp)
10008448:	e0bff715 	stw	r2,-36(fp)
1000844c:	e0bffe17 	ldw	r2,-8(fp)
10008450:	e0bff815 	stw	r2,-32(fp)
10008454:	e0bff817 	ldw	r2,-32(fp)
10008458:	e0bff315 	stw	r2,-52(fp)
	    k = ((hx&0x7ff00000)>>20) - 54; 
1000845c:	e0bff317 	ldw	r2,-52(fp)
10008460:	109ffc2c 	andhi	r2,r2,32752
10008464:	1005d53a 	srai	r2,r2,20
10008468:	10bff284 	addi	r2,r2,-54
1000846c:	e0bff215 	stw	r2,-56(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
10008470:	e0ffff17 	ldw	r3,-4(fp)
10008474:	00bffff4 	movhi	r2,65535
10008478:	108f2c04 	addi	r2,r2,15536
1000847c:	18800e0e 	bge	r3,r2,100084b8 <scalbn+0x11c>
10008480:	00b0be74 	movhi	r2,49913
10008484:	10bcd644 	addi	r2,r2,-3239
10008488:	00c06974 	movhi	r3,421
1000848c:	18db87c4 	addi	r3,r3,28191
10008490:	e1bffd17 	ldw	r6,-12(fp)
10008494:	e1fffe17 	ldw	r7,-8(fp)
10008498:	1009883a 	mov	r4,r2
1000849c:	180b883a 	mov	r5,r3
100084a0:	00045880 	call	10004588 <__muldf3>
100084a4:	1009883a 	mov	r4,r2
100084a8:	180b883a 	mov	r5,r3
100084ac:	2005883a 	mov	r2,r4
100084b0:	2807883a 	mov	r3,r5
100084b4:	00009a06 	br	10008720 <scalbn+0x384>
	    }
        if (k==0x7ff) return x+x;		/* NaN or Inf */
100084b8:	e0bff217 	ldw	r2,-56(fp)
100084bc:	1081ffd8 	cmpnei	r2,r2,2047
100084c0:	10000c1e 	bne	r2,zero,100084f4 <scalbn+0x158>
100084c4:	e0bffd17 	ldw	r2,-12(fp)
100084c8:	e0fffe17 	ldw	r3,-8(fp)
100084cc:	100d883a 	mov	r6,r2
100084d0:	180f883a 	mov	r7,r3
100084d4:	1009883a 	mov	r4,r2
100084d8:	180b883a 	mov	r5,r3
100084dc:	0003be80 	call	10003be8 <__adddf3>
100084e0:	1009883a 	mov	r4,r2
100084e4:	180b883a 	mov	r5,r3
100084e8:	2005883a 	mov	r2,r4
100084ec:	2807883a 	mov	r3,r5
100084f0:	00008b06 	br	10008720 <scalbn+0x384>
        k = k+n; 
100084f4:	e0fff217 	ldw	r3,-56(fp)
100084f8:	e0bfff17 	ldw	r2,-4(fp)
100084fc:	1885883a 	add	r2,r3,r2
10008500:	e0bff215 	stw	r2,-56(fp)
        if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
10008504:	e0bff217 	ldw	r2,-56(fp)
10008508:	1081ffd0 	cmplti	r2,r2,2047
1000850c:	1000191e 	bne	r2,zero,10008574 <scalbn+0x1d8>
10008510:	00a20034 	movhi	r2,34816
10008514:	109d6704 	addi	r2,r2,30108
10008518:	00df8e34 	movhi	r3,32312
1000851c:	18f90f04 	addi	r3,r3,-7108
10008520:	e1bffd17 	ldw	r6,-12(fp)
10008524:	e1fffe17 	ldw	r7,-8(fp)
10008528:	1009883a 	mov	r4,r2
1000852c:	180b883a 	mov	r5,r3
10008530:	00115a40 	call	100115a4 <copysign>
10008534:	1011883a 	mov	r8,r2
10008538:	1813883a 	mov	r9,r3
1000853c:	00a20034 	movhi	r2,34816
10008540:	109d6704 	addi	r2,r2,30108
10008544:	00df8e34 	movhi	r3,32312
10008548:	18f90f04 	addi	r3,r3,-7108
1000854c:	100d883a 	mov	r6,r2
10008550:	180f883a 	mov	r7,r3
10008554:	4009883a 	mov	r4,r8
10008558:	480b883a 	mov	r5,r9
1000855c:	00045880 	call	10004588 <__muldf3>
10008560:	1009883a 	mov	r4,r2
10008564:	180b883a 	mov	r5,r3
10008568:	2005883a 	mov	r2,r4
1000856c:	2807883a 	mov	r3,r5
10008570:	00006b06 	br	10008720 <scalbn+0x384>
        if (k > 0) 				/* normal result */
10008574:	e0bff217 	ldw	r2,-56(fp)
10008578:	0080130e 	bge	zero,r2,100085c8 <scalbn+0x22c>
	    {SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20)); return x;}
1000857c:	e0bffd17 	ldw	r2,-12(fp)
10008580:	e0bff915 	stw	r2,-28(fp)
10008584:	e0bffe17 	ldw	r2,-8(fp)
10008588:	e0bffa15 	stw	r2,-24(fp)
1000858c:	e0fff317 	ldw	r3,-52(fp)
10008590:	00a00434 	movhi	r2,32784
10008594:	10bfffc4 	addi	r2,r2,-1
10008598:	1884703a 	and	r2,r3,r2
1000859c:	e0fff217 	ldw	r3,-56(fp)
100085a0:	1806953a 	slli	r3,r3,20
100085a4:	10c4b03a 	or	r2,r2,r3
100085a8:	e0bffa15 	stw	r2,-24(fp)
100085ac:	e0bff917 	ldw	r2,-28(fp)
100085b0:	e0bffd15 	stw	r2,-12(fp)
100085b4:	e0bffa17 	ldw	r2,-24(fp)
100085b8:	e0bffe15 	stw	r2,-8(fp)
100085bc:	e0bffd17 	ldw	r2,-12(fp)
100085c0:	e0fffe17 	ldw	r3,-8(fp)
100085c4:	00005606 	br	10008720 <scalbn+0x384>
        if (k <= -54) {
100085c8:	e0bff217 	ldw	r2,-56(fp)
100085cc:	10bff2c8 	cmpgei	r2,r2,-53
100085d0:	1000351e 	bne	r2,zero,100086a8 <scalbn+0x30c>
            if (n > 50000) 	/* in case integer overflow in n+k */
100085d4:	e0bfff17 	ldw	r2,-4(fp)
100085d8:	00f0d414 	movui	r3,50000
100085dc:	1880190e 	bge	r3,r2,10008644 <scalbn+0x2a8>
		return huge*copysign(huge,x);	/*overflow*/
100085e0:	00a20034 	movhi	r2,34816
100085e4:	109d6704 	addi	r2,r2,30108
100085e8:	00df8e34 	movhi	r3,32312
100085ec:	18f90f04 	addi	r3,r3,-7108
100085f0:	e1bffd17 	ldw	r6,-12(fp)
100085f4:	e1fffe17 	ldw	r7,-8(fp)
100085f8:	1009883a 	mov	r4,r2
100085fc:	180b883a 	mov	r5,r3
10008600:	00115a40 	call	100115a4 <copysign>
10008604:	1011883a 	mov	r8,r2
10008608:	1813883a 	mov	r9,r3
1000860c:	00a20034 	movhi	r2,34816
10008610:	109d6704 	addi	r2,r2,30108
10008614:	00df8e34 	movhi	r3,32312
10008618:	18f90f04 	addi	r3,r3,-7108
1000861c:	100d883a 	mov	r6,r2
10008620:	180f883a 	mov	r7,r3
10008624:	4009883a 	mov	r4,r8
10008628:	480b883a 	mov	r5,r9
1000862c:	00045880 	call	10004588 <__muldf3>
10008630:	1009883a 	mov	r4,r2
10008634:	180b883a 	mov	r5,r3
10008638:	2005883a 	mov	r2,r4
1000863c:	2807883a 	mov	r3,r5
10008640:	00003706 	br	10008720 <scalbn+0x384>
	    else return tiny*copysign(tiny,x); 	/*underflow*/
10008644:	00b0be74 	movhi	r2,49913
10008648:	10bcd644 	addi	r2,r2,-3239
1000864c:	00c06974 	movhi	r3,421
10008650:	18db87c4 	addi	r3,r3,28191
10008654:	e1bffd17 	ldw	r6,-12(fp)
10008658:	e1fffe17 	ldw	r7,-8(fp)
1000865c:	1009883a 	mov	r4,r2
10008660:	180b883a 	mov	r5,r3
10008664:	00115a40 	call	100115a4 <copysign>
10008668:	1011883a 	mov	r8,r2
1000866c:	1813883a 	mov	r9,r3
10008670:	00b0be74 	movhi	r2,49913
10008674:	10bcd644 	addi	r2,r2,-3239
10008678:	00c06974 	movhi	r3,421
1000867c:	18db87c4 	addi	r3,r3,28191
10008680:	100d883a 	mov	r6,r2
10008684:	180f883a 	mov	r7,r3
10008688:	4009883a 	mov	r4,r8
1000868c:	480b883a 	mov	r5,r9
10008690:	00045880 	call	10004588 <__muldf3>
10008694:	1009883a 	mov	r4,r2
10008698:	180b883a 	mov	r5,r3
1000869c:	2005883a 	mov	r2,r4
100086a0:	2807883a 	mov	r3,r5
100086a4:	00001e06 	br	10008720 <scalbn+0x384>
      }
        k += 54;				/* subnormal result */
100086a8:	e0bff217 	ldw	r2,-56(fp)
100086ac:	10800d84 	addi	r2,r2,54
100086b0:	e0bff215 	stw	r2,-56(fp)
	SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
100086b4:	e0bffd17 	ldw	r2,-12(fp)
100086b8:	e0bffb15 	stw	r2,-20(fp)
100086bc:	e0bffe17 	ldw	r2,-8(fp)
100086c0:	e0bffc15 	stw	r2,-16(fp)
100086c4:	e0fff317 	ldw	r3,-52(fp)
100086c8:	00a00434 	movhi	r2,32784
100086cc:	10bfffc4 	addi	r2,r2,-1
100086d0:	1884703a 	and	r2,r3,r2
100086d4:	e0fff217 	ldw	r3,-56(fp)
100086d8:	1806953a 	slli	r3,r3,20
100086dc:	10c4b03a 	or	r2,r2,r3
100086e0:	e0bffc15 	stw	r2,-16(fp)
100086e4:	e0bffb17 	ldw	r2,-20(fp)
100086e8:	e0bffd15 	stw	r2,-12(fp)
100086ec:	e0bffc17 	ldw	r2,-16(fp)
100086f0:	e0bffe15 	stw	r2,-8(fp)
        return x*twom54;
100086f4:	0005883a 	mov	r2,zero
100086f8:	00cf2434 	movhi	r3,15504
100086fc:	e1bffd17 	ldw	r6,-12(fp)
10008700:	e1fffe17 	ldw	r7,-8(fp)
10008704:	1009883a 	mov	r4,r2
10008708:	180b883a 	mov	r5,r3
1000870c:	00045880 	call	10004588 <__muldf3>
10008710:	1009883a 	mov	r4,r2
10008714:	180b883a 	mov	r5,r3
10008718:	2005883a 	mov	r2,r4
1000871c:	2807883a 	mov	r3,r5
10008720:	1009883a 	mov	r4,r2
10008724:	180b883a 	mov	r5,r3
}
10008728:	2005883a 	mov	r2,r4
1000872c:	2807883a 	mov	r3,r5
10008730:	e037883a 	mov	sp,fp
10008734:	dfc00117 	ldw	ra,4(sp)
10008738:	df000017 	ldw	fp,0(sp)
1000873c:	dec00204 	addi	sp,sp,8
10008740:	f800283a 	ret

10008744 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
10008744:	defffb04 	addi	sp,sp,-20
10008748:	dfc00415 	stw	ra,16(sp)
1000874c:	df000315 	stw	fp,12(sp)
10008750:	df000304 	addi	fp,sp,12
10008754:	e13ffe15 	stw	r4,-8(fp)
10008758:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
1000875c:	008403b4 	movhi	r2,4110
10008760:	108aa904 	addi	r2,r2,10916
10008764:	10000015 	stw	zero,0(r2)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
10008768:	e13fff17 	ldw	r4,-4(fp)
1000876c:	0015f900 	call	10015f90 <sbrk>
10008770:	e0bffd15 	stw	r2,-12(fp)
10008774:	e0bffd17 	ldw	r2,-12(fp)
10008778:	10bfffd8 	cmpnei	r2,r2,-1
1000877c:	1000091e 	bne	r2,zero,100087a4 <_sbrk_r+0x60>
10008780:	008403b4 	movhi	r2,4110
10008784:	108aa904 	addi	r2,r2,10916
10008788:	10800017 	ldw	r2,0(r2)
1000878c:	10000526 	beq	r2,zero,100087a4 <_sbrk_r+0x60>
    ptr->_errno = errno;
10008790:	008403b4 	movhi	r2,4110
10008794:	108aa904 	addi	r2,r2,10916
10008798:	10c00017 	ldw	r3,0(r2)
1000879c:	e0bffe17 	ldw	r2,-8(fp)
100087a0:	10c00015 	stw	r3,0(r2)
  return ret;
100087a4:	e0bffd17 	ldw	r2,-12(fp)
}
100087a8:	e037883a 	mov	sp,fp
100087ac:	dfc00117 	ldw	ra,4(sp)
100087b0:	df000017 	ldw	fp,0(sp)
100087b4:	dec00204 	addi	sp,sp,8
100087b8:	f800283a 	ret

100087bc <_srand48_r>:

_VOID
_DEFUN (_srand48_r, (r, seed),
       struct _reent *r _AND
       long seed)
{
100087bc:	defffd04 	addi	sp,sp,-12
100087c0:	df000215 	stw	fp,8(sp)
100087c4:	df000204 	addi	fp,sp,8
100087c8:	e13ffe15 	stw	r4,-8(fp)
100087cc:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_RAND48(r);
  __rand48_seed[0] = _RAND48_SEED_0;
100087d0:	e0bffe17 	ldw	r2,-8(fp)
100087d4:	00ccc384 	movi	r3,13070
100087d8:	10c02b0d 	sth	r3,172(r2)
  __rand48_seed[1] = (unsigned short) seed;
100087dc:	e0bfff17 	ldw	r2,-4(fp)
100087e0:	1007883a 	mov	r3,r2
100087e4:	e0bffe17 	ldw	r2,-8(fp)
100087e8:	10c02b8d 	sth	r3,174(r2)
  __rand48_seed[2] = (unsigned short) ((unsigned long)seed >> 16);
100087ec:	e0bfff17 	ldw	r2,-4(fp)
100087f0:	1004d43a 	srli	r2,r2,16
100087f4:	1007883a 	mov	r3,r2
100087f8:	e0bffe17 	ldw	r2,-8(fp)
100087fc:	10c02c0d 	sth	r3,176(r2)
  __rand48_mult[0] = _RAND48_MULT_0;
10008800:	e0bffe17 	ldw	r2,-8(fp)
10008804:	00f99b44 	movi	r3,-6547
10008808:	10c02c8d 	sth	r3,178(r2)
  __rand48_mult[1] = _RAND48_MULT_1;
1000880c:	e0bffe17 	ldw	r2,-8(fp)
10008810:	00f7bb04 	movi	r3,-8468
10008814:	10c02d0d 	sth	r3,180(r2)
  __rand48_mult[2] = _RAND48_MULT_2;
10008818:	e0bffe17 	ldw	r2,-8(fp)
1000881c:	00c00144 	movi	r3,5
10008820:	10c02d8d 	sth	r3,182(r2)
  __rand48_add = _RAND48_ADD;
10008824:	e0bffe17 	ldw	r2,-8(fp)
10008828:	00c002c4 	movi	r3,11
1000882c:	10c02e0d 	sth	r3,184(r2)
}
10008830:	0001883a 	nop
10008834:	e037883a 	mov	sp,fp
10008838:	df000017 	ldw	fp,0(sp)
1000883c:	dec00104 	addi	sp,sp,4
10008840:	f800283a 	ret

10008844 <srand48>:

#ifndef _REENT_ONLY
_VOID
_DEFUN (srand48, (seed),
       long seed)
{
10008844:	defffd04 	addi	sp,sp,-12
10008848:	dfc00215 	stw	ra,8(sp)
1000884c:	df000115 	stw	fp,4(sp)
10008850:	df000104 	addi	fp,sp,4
10008854:	e13fff15 	stw	r4,-4(fp)
  _srand48_r (_REENT, seed);
10008858:	008403b4 	movhi	r2,4110
1000885c:	10a45004 	addi	r2,r2,-28352
10008860:	10800017 	ldw	r2,0(r2)
10008864:	e17fff17 	ldw	r5,-4(fp)
10008868:	1009883a 	mov	r4,r2
1000886c:	00087bc0 	call	100087bc <_srand48_r>
}
10008870:	0001883a 	nop
10008874:	e037883a 	mov	sp,fp
10008878:	dfc00117 	ldw	ra,4(sp)
1000887c:	df000017 	ldw	fp,0(sp)
10008880:	dec00204 	addi	sp,sp,8
10008884:	f800283a 	ret

10008888 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
10008888:	defffc04 	addi	sp,sp,-16
1000888c:	df000315 	stw	fp,12(sp)
10008890:	df000304 	addi	fp,sp,12
10008894:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
10008898:	e0bfff17 	ldw	r2,-4(fp)
1000889c:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
100088a0:	00000d06 	br	100088d8 <strlen+0x50>
    {
      if (!*str)
100088a4:	e0bfff17 	ldw	r2,-4(fp)
100088a8:	10800003 	ldbu	r2,0(r2)
100088ac:	10803fcc 	andi	r2,r2,255
100088b0:	1080201c 	xori	r2,r2,128
100088b4:	10bfe004 	addi	r2,r2,-128
100088b8:	1000041e 	bne	r2,zero,100088cc <strlen+0x44>
	return str - start;
100088bc:	e0ffff17 	ldw	r3,-4(fp)
100088c0:	e0bffe17 	ldw	r2,-8(fp)
100088c4:	1885c83a 	sub	r2,r3,r2
100088c8:	00002806 	br	1000896c <strlen+0xe4>
      str++;
100088cc:	e0bfff17 	ldw	r2,-4(fp)
100088d0:	10800044 	addi	r2,r2,1
100088d4:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
100088d8:	e0bfff17 	ldw	r2,-4(fp)
100088dc:	108000cc 	andi	r2,r2,3
100088e0:	103ff01e 	bne	r2,zero,100088a4 <__alt_data_end+0xf80088a4>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
100088e4:	e0bfff17 	ldw	r2,-4(fp)
100088e8:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
100088ec:	00000306 	br	100088fc <strlen+0x74>
    aligned_addr++;
100088f0:	e0bffd17 	ldw	r2,-12(fp)
100088f4:	10800104 	addi	r2,r2,4
100088f8:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
100088fc:	e0bffd17 	ldw	r2,-12(fp)
10008900:	10c00017 	ldw	r3,0(r2)
10008904:	00bfbff4 	movhi	r2,65279
10008908:	10bfbfc4 	addi	r2,r2,-257
1000890c:	1887883a 	add	r3,r3,r2
10008910:	e0bffd17 	ldw	r2,-12(fp)
10008914:	10800017 	ldw	r2,0(r2)
10008918:	0084303a 	nor	r2,zero,r2
1000891c:	1886703a 	and	r3,r3,r2
10008920:	00a02074 	movhi	r2,32897
10008924:	10a02004 	addi	r2,r2,-32640
10008928:	1884703a 	and	r2,r3,r2
1000892c:	103ff026 	beq	r2,zero,100088f0 <__alt_data_end+0xf80088f0>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
10008930:	e0bffd17 	ldw	r2,-12(fp)
10008934:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
10008938:	00000306 	br	10008948 <strlen+0xc0>
    str++;
1000893c:	e0bfff17 	ldw	r2,-4(fp)
10008940:	10800044 	addi	r2,r2,1
10008944:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
10008948:	e0bfff17 	ldw	r2,-4(fp)
1000894c:	10800003 	ldbu	r2,0(r2)
10008950:	10803fcc 	andi	r2,r2,255
10008954:	1080201c 	xori	r2,r2,128
10008958:	10bfe004 	addi	r2,r2,-128
1000895c:	103ff71e 	bne	r2,zero,1000893c <__alt_data_end+0xf800893c>
    str++;
  return str - start;
10008960:	e0ffff17 	ldw	r3,-4(fp)
10008964:	e0bffe17 	ldw	r2,-8(fp)
10008968:	1885c83a 	sub	r2,r3,r2
}
1000896c:	e037883a 	mov	sp,fp
10008970:	df000017 	ldw	fp,0(sp)
10008974:	dec00104 	addi	sp,sp,4
10008978:	f800283a 	ret

1000897c <_strtol_r>:
_DEFUN (_strtol_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
1000897c:	defff304 	addi	sp,sp,-52
10008980:	dfc00c15 	stw	ra,48(sp)
10008984:	df000b15 	stw	fp,44(sp)
10008988:	dd800a15 	stw	r22,40(sp)
1000898c:	dd400915 	stw	r21,36(sp)
10008990:	dd000815 	stw	r20,32(sp)
10008994:	dcc00715 	stw	r19,28(sp)
10008998:	dc800615 	stw	r18,24(sp)
1000899c:	dc400515 	stw	r17,20(sp)
100089a0:	dc000415 	stw	r16,16(sp)
100089a4:	df000b04 	addi	fp,sp,44
100089a8:	e13ff515 	stw	r4,-44(fp)
100089ac:	e17ff615 	stw	r5,-40(fp)
100089b0:	e1bff715 	stw	r6,-36(fp)
100089b4:	e1fff815 	stw	r7,-32(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
100089b8:	e47ff617 	ldw	r17,-40(fp)
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
100089bc:	0029883a 	mov	r20,zero
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
100089c0:	8805883a 	mov	r2,r17
100089c4:	14400044 	addi	r17,r2,1
100089c8:	10800003 	ldbu	r2,0(r2)
100089cc:	14003fcc 	andi	r16,r2,255
	} while (isspace(c));
100089d0:	008403b4 	movhi	r2,4110
100089d4:	10a45c04 	addi	r2,r2,-28304
100089d8:	10c00017 	ldw	r3,0(r2)
100089dc:	8005883a 	mov	r2,r16
100089e0:	10800044 	addi	r2,r2,1
100089e4:	1885883a 	add	r2,r3,r2
100089e8:	10800003 	ldbu	r2,0(r2)
100089ec:	10803fcc 	andi	r2,r2,255
100089f0:	1080020c 	andi	r2,r2,8
100089f4:	103ff21e 	bne	r2,zero,100089c0 <__alt_data_end+0xf80089c0>
	if (c == '-') {
100089f8:	80800b58 	cmpnei	r2,r16,45
100089fc:	1000061e 	bne	r2,zero,10008a18 <_strtol_r+0x9c>
		neg = 1;
10008a00:	05000044 	movi	r20,1
		c = *s++;
10008a04:	8805883a 	mov	r2,r17
10008a08:	14400044 	addi	r17,r2,1
10008a0c:	10800003 	ldbu	r2,0(r2)
10008a10:	14003fcc 	andi	r16,r2,255
10008a14:	00000606 	br	10008a30 <_strtol_r+0xb4>
	} else if (c == '+')
10008a18:	80800ad8 	cmpnei	r2,r16,43
10008a1c:	1000041e 	bne	r2,zero,10008a30 <_strtol_r+0xb4>
		c = *s++;
10008a20:	8805883a 	mov	r2,r17
10008a24:	14400044 	addi	r17,r2,1
10008a28:	10800003 	ldbu	r2,0(r2)
10008a2c:	14003fcc 	andi	r16,r2,255
	if ((base == 0 || base == 16) &&
10008a30:	e0bff817 	ldw	r2,-32(fp)
10008a34:	10000326 	beq	r2,zero,10008a44 <_strtol_r+0xc8>
10008a38:	e0bff817 	ldw	r2,-32(fp)
10008a3c:	10800418 	cmpnei	r2,r2,16
10008a40:	1000101e 	bne	r2,zero,10008a84 <_strtol_r+0x108>
10008a44:	80800c18 	cmpnei	r2,r16,48
10008a48:	10000e1e 	bne	r2,zero,10008a84 <_strtol_r+0x108>
	    c == '0' && (*s == 'x' || *s == 'X')) {
10008a4c:	88800003 	ldbu	r2,0(r17)
10008a50:	10803fcc 	andi	r2,r2,255
10008a54:	10801e20 	cmpeqi	r2,r2,120
10008a58:	1000041e 	bne	r2,zero,10008a6c <_strtol_r+0xf0>
10008a5c:	88800003 	ldbu	r2,0(r17)
10008a60:	10803fcc 	andi	r2,r2,255
10008a64:	10801618 	cmpnei	r2,r2,88
10008a68:	1000061e 	bne	r2,zero,10008a84 <_strtol_r+0x108>
		c = s[1];
10008a6c:	88800044 	addi	r2,r17,1
10008a70:	10800003 	ldbu	r2,0(r2)
10008a74:	14003fcc 	andi	r16,r2,255
		s += 2;
10008a78:	8c400084 	addi	r17,r17,2
		base = 16;
10008a7c:	00800404 	movi	r2,16
10008a80:	e0bff815 	stw	r2,-32(fp)
	}
	if (base == 0)
10008a84:	e0bff817 	ldw	r2,-32(fp)
10008a88:	1000061e 	bne	r2,zero,10008aa4 <_strtol_r+0x128>
		base = c == '0' ? 8 : 10;
10008a8c:	80800c18 	cmpnei	r2,r16,48
10008a90:	1000021e 	bne	r2,zero,10008a9c <_strtol_r+0x120>
10008a94:	00800204 	movi	r2,8
10008a98:	00000106 	br	10008aa0 <_strtol_r+0x124>
10008a9c:	00800284 	movi	r2,10
10008aa0:	e0bff815 	stw	r2,-32(fp)
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
10008aa4:	a0000226 	beq	r20,zero,10008ab0 <_strtol_r+0x134>
10008aa8:	00a00034 	movhi	r2,32768
10008aac:	00000206 	br	10008ab8 <_strtol_r+0x13c>
10008ab0:	00a00034 	movhi	r2,32768
10008ab4:	10bfffc4 	addi	r2,r2,-1
10008ab8:	102b883a 	mov	r21,r2
	cutlim = cutoff % (unsigned long)base;
10008abc:	e0bff817 	ldw	r2,-32(fp)
10008ac0:	100b883a 	mov	r5,r2
10008ac4:	a809883a 	mov	r4,r21
10008ac8:	00024f40 	call	100024f4 <__umodsi3>
10008acc:	102d883a 	mov	r22,r2
	cutoff /= (unsigned long)base;
10008ad0:	e0bff817 	ldw	r2,-32(fp)
10008ad4:	100b883a 	mov	r5,r2
10008ad8:	a809883a 	mov	r4,r21
10008adc:	00024900 	call	10002490 <__udivsi3>
10008ae0:	102b883a 	mov	r21,r2
	for (acc = 0, any = 0;; c = *s++) {
10008ae4:	0025883a 	mov	r18,zero
10008ae8:	0027883a 	mov	r19,zero
		if (isdigit(c))
10008aec:	008403b4 	movhi	r2,4110
10008af0:	10a45c04 	addi	r2,r2,-28304
10008af4:	10c00017 	ldw	r3,0(r2)
10008af8:	8005883a 	mov	r2,r16
10008afc:	10800044 	addi	r2,r2,1
10008b00:	1885883a 	add	r2,r3,r2
10008b04:	10800003 	ldbu	r2,0(r2)
10008b08:	10803fcc 	andi	r2,r2,255
10008b0c:	1080010c 	andi	r2,r2,4
10008b10:	10000226 	beq	r2,zero,10008b1c <_strtol_r+0x1a0>
			c -= '0';
10008b14:	843ff404 	addi	r16,r16,-48
10008b18:	00001906 	br	10008b80 <_strtol_r+0x204>
		else if (isalpha(c))
10008b1c:	008403b4 	movhi	r2,4110
10008b20:	10a45c04 	addi	r2,r2,-28304
10008b24:	10c00017 	ldw	r3,0(r2)
10008b28:	8005883a 	mov	r2,r16
10008b2c:	10800044 	addi	r2,r2,1
10008b30:	1885883a 	add	r2,r3,r2
10008b34:	10800003 	ldbu	r2,0(r2)
10008b38:	10803fcc 	andi	r2,r2,255
10008b3c:	108000cc 	andi	r2,r2,3
10008b40:	10002426 	beq	r2,zero,10008bd4 <_strtol_r+0x258>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
10008b44:	008403b4 	movhi	r2,4110
10008b48:	10a45c04 	addi	r2,r2,-28304
10008b4c:	10c00017 	ldw	r3,0(r2)
10008b50:	8005883a 	mov	r2,r16
10008b54:	10800044 	addi	r2,r2,1
10008b58:	1885883a 	add	r2,r3,r2
10008b5c:	10800003 	ldbu	r2,0(r2)
10008b60:	10803fcc 	andi	r2,r2,255
10008b64:	108000cc 	andi	r2,r2,3
10008b68:	10800058 	cmpnei	r2,r2,1
10008b6c:	1000021e 	bne	r2,zero,10008b78 <_strtol_r+0x1fc>
10008b70:	00800dc4 	movi	r2,55
10008b74:	00000106 	br	10008b7c <_strtol_r+0x200>
10008b78:	008015c4 	movi	r2,87
10008b7c:	80a1c83a 	sub	r16,r16,r2
		else
			break;
		if (c >= base)
10008b80:	e0bff817 	ldw	r2,-32(fp)
10008b84:	8080150e 	bge	r16,r2,10008bdc <_strtol_r+0x260>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
10008b88:	98000316 	blt	r19,zero,10008b98 <_strtol_r+0x21c>
10008b8c:	ac800236 	bltu	r21,r18,10008b98 <_strtol_r+0x21c>
10008b90:	9540031e 	bne	r18,r21,10008ba0 <_strtol_r+0x224>
10008b94:	b400020e 	bge	r22,r16,10008ba0 <_strtol_r+0x224>
			any = -1;
10008b98:	04ffffc4 	movi	r19,-1
10008b9c:	00000806 	br	10008bc0 <_strtol_r+0x244>
		else {
			any = 1;
10008ba0:	04c00044 	movi	r19,1
			acc *= base;
10008ba4:	e0bff817 	ldw	r2,-32(fp)
10008ba8:	100b883a 	mov	r5,r2
10008bac:	9009883a 	mov	r4,r18
10008bb0:	0005a080 	call	10005a08 <__mulsi3>
10008bb4:	1025883a 	mov	r18,r2
			acc += c;
10008bb8:	8005883a 	mov	r2,r16
10008bbc:	90a5883a 	add	r18,r18,r2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
10008bc0:	8805883a 	mov	r2,r17
10008bc4:	14400044 	addi	r17,r2,1
10008bc8:	10800003 	ldbu	r2,0(r2)
10008bcc:	14003fcc 	andi	r16,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
10008bd0:	003fc606 	br	10008aec <__alt_data_end+0xf8008aec>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
10008bd4:	0001883a 	nop
10008bd8:	00000106 	br	10008be0 <_strtol_r+0x264>
		if (c >= base)
			break;
10008bdc:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
10008be0:	98000a0e 	bge	r19,zero,10008c0c <_strtol_r+0x290>
		acc = neg ? LONG_MIN : LONG_MAX;
10008be4:	a0000226 	beq	r20,zero,10008bf0 <_strtol_r+0x274>
10008be8:	00a00034 	movhi	r2,32768
10008bec:	00000206 	br	10008bf8 <_strtol_r+0x27c>
10008bf0:	00a00034 	movhi	r2,32768
10008bf4:	10bfffc4 	addi	r2,r2,-1
10008bf8:	1025883a 	mov	r18,r2
		rptr->_errno = ERANGE;
10008bfc:	e0bff517 	ldw	r2,-44(fp)
10008c00:	00c00884 	movi	r3,34
10008c04:	10c00015 	stw	r3,0(r2)
10008c08:	00000206 	br	10008c14 <_strtol_r+0x298>
	} else if (neg)
10008c0c:	a0000126 	beq	r20,zero,10008c14 <_strtol_r+0x298>
		acc = -acc;
10008c10:	04a5c83a 	sub	r18,zero,r18
	if (endptr != 0)
10008c14:	e0bff717 	ldw	r2,-36(fp)
10008c18:	10000626 	beq	r2,zero,10008c34 <_strtol_r+0x2b8>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
10008c1c:	98000226 	beq	r19,zero,10008c28 <_strtol_r+0x2ac>
10008c20:	88bfffc4 	addi	r2,r17,-1
10008c24:	00000106 	br	10008c2c <_strtol_r+0x2b0>
10008c28:	e0bff617 	ldw	r2,-40(fp)
10008c2c:	e0fff717 	ldw	r3,-36(fp)
10008c30:	18800015 	stw	r2,0(r3)
	return (acc);
10008c34:	9005883a 	mov	r2,r18
}
10008c38:	e6fff904 	addi	sp,fp,-28
10008c3c:	dfc00817 	ldw	ra,32(sp)
10008c40:	df000717 	ldw	fp,28(sp)
10008c44:	dd800617 	ldw	r22,24(sp)
10008c48:	dd400517 	ldw	r21,20(sp)
10008c4c:	dd000417 	ldw	r20,16(sp)
10008c50:	dcc00317 	ldw	r19,12(sp)
10008c54:	dc800217 	ldw	r18,8(sp)
10008c58:	dc400117 	ldw	r17,4(sp)
10008c5c:	dc000017 	ldw	r16,0(sp)
10008c60:	dec00904 	addi	sp,sp,36
10008c64:	f800283a 	ret

10008c68 <strtol>:
long
_DEFUN (strtol, (s, ptr, base),
	_CONST char *__restrict s _AND
	char **__restrict ptr _AND
	int base)
{
10008c68:	defffb04 	addi	sp,sp,-20
10008c6c:	dfc00415 	stw	ra,16(sp)
10008c70:	df000315 	stw	fp,12(sp)
10008c74:	df000304 	addi	fp,sp,12
10008c78:	e13ffd15 	stw	r4,-12(fp)
10008c7c:	e17ffe15 	stw	r5,-8(fp)
10008c80:	e1bfff15 	stw	r6,-4(fp)
	return _strtol_r (_REENT, s, ptr, base);
10008c84:	008403b4 	movhi	r2,4110
10008c88:	10a45004 	addi	r2,r2,-28352
10008c8c:	10800017 	ldw	r2,0(r2)
10008c90:	e1ffff17 	ldw	r7,-4(fp)
10008c94:	e1bffe17 	ldw	r6,-8(fp)
10008c98:	e17ffd17 	ldw	r5,-12(fp)
10008c9c:	1009883a 	mov	r4,r2
10008ca0:	000897c0 	call	1000897c <_strtol_r>
}
10008ca4:	e037883a 	mov	sp,fp
10008ca8:	dfc00117 	ldw	ra,4(sp)
10008cac:	df000017 	ldw	fp,0(sp)
10008cb0:	dec00204 	addi	sp,sp,8
10008cb4:	f800283a 	ret

10008cb8 <time>:
#include <sys/time.h>

time_t
_DEFUN (time, (t),
	time_t * t)
{
10008cb8:	defffb04 	addi	sp,sp,-20
10008cbc:	dfc00415 	stw	ra,16(sp)
10008cc0:	df000315 	stw	fp,12(sp)
10008cc4:	df000304 	addi	fp,sp,12
10008cc8:	e13fff15 	stw	r4,-4(fp)
  struct timeval now;

  if (_gettimeofday_r (_REENT, &now, NULL) >= 0)
10008ccc:	008403b4 	movhi	r2,4110
10008cd0:	10a45004 	addi	r2,r2,-28352
10008cd4:	10800017 	ldw	r2,0(r2)
10008cd8:	000d883a 	mov	r6,zero
10008cdc:	e17ffd04 	addi	r5,fp,-12
10008ce0:	1009883a 	mov	r4,r2
10008ce4:	000ec880 	call	1000ec88 <_gettimeofday_r>
10008ce8:	10000716 	blt	r2,zero,10008d08 <time+0x50>
    {
      if (t)
10008cec:	e0bfff17 	ldw	r2,-4(fp)
10008cf0:	10000326 	beq	r2,zero,10008d00 <time+0x48>
	*t = now.tv_sec;
10008cf4:	e0fffd17 	ldw	r3,-12(fp)
10008cf8:	e0bfff17 	ldw	r2,-4(fp)
10008cfc:	10c00015 	stw	r3,0(r2)
      return now.tv_sec;
10008d00:	e0bffd17 	ldw	r2,-12(fp)
10008d04:	00000106 	br	10008d0c <time+0x54>
    }
  return -1;
10008d08:	00bfffc4 	movi	r2,-1
}
10008d0c:	e037883a 	mov	sp,fp
10008d10:	dfc00117 	ldw	ra,4(sp)
10008d14:	df000017 	ldw	fp,0(sp)
10008d18:	dec00204 	addi	sp,sp,8
10008d1c:	f800283a 	ret

10008d20 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
10008d20:	defedf04 	addi	sp,sp,-1156
10008d24:	dfc12015 	stw	ra,1152(sp)
10008d28:	df011f15 	stw	fp,1148(sp)
10008d2c:	dc011e15 	stw	r16,1144(sp)
10008d30:	df011f04 	addi	fp,sp,1148
10008d34:	e13ffc15 	stw	r4,-16(fp)
10008d38:	2821883a 	mov	r16,r5
10008d3c:	e1bffd15 	stw	r6,-12(fp)
10008d40:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
10008d44:	80c0030b 	ldhu	r3,12(r16)
10008d48:	00bfff44 	movi	r2,-3
10008d4c:	1884703a 	and	r2,r3,r2
10008d50:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
10008d54:	80801917 	ldw	r2,100(r16)
10008d58:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
10008d5c:	8080038b 	ldhu	r2,14(r16)
10008d60:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
10008d64:	80800717 	ldw	r2,28(r16)
10008d68:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
10008d6c:	80800917 	ldw	r2,36(r16)
10008d70:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
10008d74:	e0befc04 	addi	r2,fp,-1040
10008d78:	e0bee215 	stw	r2,-1144(fp)
10008d7c:	e0bee217 	ldw	r2,-1144(fp)
10008d80:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
10008d84:	00810004 	movi	r2,1024
10008d88:	e0bee415 	stw	r2,-1136(fp)
10008d8c:	e0bee417 	ldw	r2,-1136(fp)
10008d90:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
10008d94:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
10008d98:	e0bee204 	addi	r2,fp,-1144
10008d9c:	e1fffe17 	ldw	r7,-8(fp)
10008da0:	e1bffd17 	ldw	r6,-12(fp)
10008da4:	100b883a 	mov	r5,r2
10008da8:	e13ffc17 	ldw	r4,-16(fp)
10008dac:	0008e680 	call	10008e68 <___vfprintf_internal_r>
10008db0:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
10008db4:	e0bee117 	ldw	r2,-1148(fp)
10008db8:	10000716 	blt	r2,zero,10008dd8 <__sbprintf+0xb8>
10008dbc:	e0bee204 	addi	r2,fp,-1144
10008dc0:	100b883a 	mov	r5,r2
10008dc4:	e13ffc17 	ldw	r4,-16(fp)
10008dc8:	000d6ac0 	call	1000d6ac <_fflush_r>
10008dcc:	10000226 	beq	r2,zero,10008dd8 <__sbprintf+0xb8>
		ret = EOF;
10008dd0:	00bfffc4 	movi	r2,-1
10008dd4:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
10008dd8:	e0bee50b 	ldhu	r2,-1132(fp)
10008ddc:	10bfffcc 	andi	r2,r2,65535
10008de0:	1080100c 	andi	r2,r2,64
10008de4:	10000326 	beq	r2,zero,10008df4 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
10008de8:	8080030b 	ldhu	r2,12(r16)
10008dec:	10801014 	ori	r2,r2,64
10008df0:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
10008df4:	e0bee117 	ldw	r2,-1148(fp)
}
10008df8:	e6ffff04 	addi	sp,fp,-4
10008dfc:	dfc00217 	ldw	ra,8(sp)
10008e00:	df000117 	ldw	fp,4(sp)
10008e04:	dc000017 	ldw	r16,0(sp)
10008e08:	dec00304 	addi	sp,sp,12
10008e0c:	f800283a 	ret

10008e10 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
10008e10:	defffa04 	addi	sp,sp,-24
10008e14:	dfc00515 	stw	ra,20(sp)
10008e18:	df000415 	stw	fp,16(sp)
10008e1c:	df000404 	addi	fp,sp,16
10008e20:	e13ffd15 	stw	r4,-12(fp)
10008e24:	e17ffe15 	stw	r5,-8(fp)
10008e28:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
10008e2c:	008403b4 	movhi	r2,4110
10008e30:	10a45004 	addi	r2,r2,-28352
10008e34:	10800017 	ldw	r2,0(r2)
10008e38:	e1ffff17 	ldw	r7,-4(fp)
10008e3c:	e1bffe17 	ldw	r6,-8(fp)
10008e40:	e17ffd17 	ldw	r5,-12(fp)
10008e44:	1009883a 	mov	r4,r2
10008e48:	0008e680 	call	10008e68 <___vfprintf_internal_r>
10008e4c:	e0bffc15 	stw	r2,-16(fp)
  return result;
10008e50:	e0bffc17 	ldw	r2,-16(fp)
}
10008e54:	e037883a 	mov	sp,fp
10008e58:	dfc00117 	ldw	ra,4(sp)
10008e5c:	df000017 	ldw	fp,0(sp)
10008e60:	dec00204 	addi	sp,sp,8
10008e64:	f800283a 	ret

10008e68 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
10008e68:	deffa404 	addi	sp,sp,-368
10008e6c:	dfc05b15 	stw	ra,364(sp)
10008e70:	df005a15 	stw	fp,360(sp)
10008e74:	ddc05915 	stw	r23,356(sp)
10008e78:	dd805815 	stw	r22,352(sp)
10008e7c:	dd405715 	stw	r21,348(sp)
10008e80:	dd005615 	stw	r20,344(sp)
10008e84:	dcc05515 	stw	r19,340(sp)
10008e88:	dc805415 	stw	r18,336(sp)
10008e8c:	dc405315 	stw	r17,332(sp)
10008e90:	dc005215 	stw	r16,328(sp)
10008e94:	df005a04 	addi	fp,sp,360
10008e98:	e13fe615 	stw	r4,-104(fp)
10008e9c:	e17fe715 	stw	r5,-100(fp)
10008ea0:	e1bfe815 	stw	r6,-96(fp)
10008ea4:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
10008ea8:	e13fe617 	ldw	r4,-104(fp)
10008eac:	000ee140 	call	1000ee14 <_localeconv_r>
10008eb0:	10800017 	ldw	r2,0(r2)
10008eb4:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
10008eb8:	e13fbb17 	ldw	r4,-276(fp)
10008ebc:	00088880 	call	10008888 <strlen>
10008ec0:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
10008ec4:	e03fc215 	stw	zero,-248(fp)
10008ec8:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
10008ecc:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
10008ed0:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
10008ed4:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
10008ed8:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
10008edc:	e0bfe617 	ldw	r2,-104(fp)
10008ee0:	e0bfbd15 	stw	r2,-268(fp)
10008ee4:	e0bfbd17 	ldw	r2,-268(fp)
10008ee8:	10000526 	beq	r2,zero,10008f00 <___vfprintf_internal_r+0x98>
10008eec:	e0bfbd17 	ldw	r2,-268(fp)
10008ef0:	10800e17 	ldw	r2,56(r2)
10008ef4:	1000021e 	bne	r2,zero,10008f00 <___vfprintf_internal_r+0x98>
10008ef8:	e13fbd17 	ldw	r4,-268(fp)
10008efc:	000db740 	call	1000db74 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
10008f00:	e0bfe717 	ldw	r2,-100(fp)
10008f04:	1080030b 	ldhu	r2,12(r2)
10008f08:	10bfffcc 	andi	r2,r2,65535
10008f0c:	1088000c 	andi	r2,r2,8192
10008f10:	10000c1e 	bne	r2,zero,10008f44 <___vfprintf_internal_r+0xdc>
10008f14:	e0bfe717 	ldw	r2,-100(fp)
10008f18:	1080030b 	ldhu	r2,12(r2)
10008f1c:	10880014 	ori	r2,r2,8192
10008f20:	1007883a 	mov	r3,r2
10008f24:	e0bfe717 	ldw	r2,-100(fp)
10008f28:	10c0030d 	sth	r3,12(r2)
10008f2c:	e0bfe717 	ldw	r2,-100(fp)
10008f30:	10c01917 	ldw	r3,100(r2)
10008f34:	00b7ffc4 	movi	r2,-8193
10008f38:	1886703a 	and	r3,r3,r2
10008f3c:	e0bfe717 	ldw	r2,-100(fp)
10008f40:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
10008f44:	e0bfe717 	ldw	r2,-100(fp)
10008f48:	1080030b 	ldhu	r2,12(r2)
10008f4c:	10bfffcc 	andi	r2,r2,65535
10008f50:	1080020c 	andi	r2,r2,8
10008f54:	10000326 	beq	r2,zero,10008f64 <___vfprintf_internal_r+0xfc>
10008f58:	e0bfe717 	ldw	r2,-100(fp)
10008f5c:	10800417 	ldw	r2,16(r2)
10008f60:	1000061e 	bne	r2,zero,10008f7c <___vfprintf_internal_r+0x114>
10008f64:	e17fe717 	ldw	r5,-100(fp)
10008f68:	e13fe617 	ldw	r4,-104(fp)
10008f6c:	000b29c0 	call	1000b29c <__swsetup_r>
10008f70:	10000226 	beq	r2,zero,10008f7c <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
10008f74:	00bfffc4 	movi	r2,-1
10008f78:	0007e806 	br	1000af1c <___vfprintf_internal_r+0x20b4>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10008f7c:	e0bfe717 	ldw	r2,-100(fp)
10008f80:	1080030b 	ldhu	r2,12(r2)
10008f84:	10bfffcc 	andi	r2,r2,65535
10008f88:	1080068c 	andi	r2,r2,26
10008f8c:	10800298 	cmpnei	r2,r2,10
10008f90:	10000c1e 	bne	r2,zero,10008fc4 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
10008f94:	e0bfe717 	ldw	r2,-100(fp)
10008f98:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10008f9c:	10bfffcc 	andi	r2,r2,65535
10008fa0:	10a0001c 	xori	r2,r2,32768
10008fa4:	10a00004 	addi	r2,r2,-32768
10008fa8:	10000616 	blt	r2,zero,10008fc4 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
10008fac:	e1ffe917 	ldw	r7,-92(fp)
10008fb0:	e1bfe817 	ldw	r6,-96(fp)
10008fb4:	e17fe717 	ldw	r5,-100(fp)
10008fb8:	e13fe617 	ldw	r4,-104(fp)
10008fbc:	0008d200 	call	10008d20 <__sbprintf>
10008fc0:	0007d606 	br	1000af1c <___vfprintf_internal_r+0x20b4>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
10008fc4:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
10008fc8:	e47fcb04 	addi	r17,fp,-212
10008fcc:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
10008fd0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
10008fd4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
10008fd8:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
10008fdc:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10008fe0:	00000106 	br	10008fe8 <___vfprintf_internal_r+0x180>
                    fmt += 1;
10008fe4:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10008fe8:	a8800003 	ldbu	r2,0(r21)
10008fec:	10803fcc 	andi	r2,r2,255
10008ff0:	1080201c 	xori	r2,r2,128
10008ff4:	10bfe004 	addi	r2,r2,-128
10008ff8:	10000626 	beq	r2,zero,10009014 <___vfprintf_internal_r+0x1ac>
10008ffc:	a8800003 	ldbu	r2,0(r21)
10009000:	10803fcc 	andi	r2,r2,255
10009004:	1080201c 	xori	r2,r2,128
10009008:	10bfe004 	addi	r2,r2,-128
1000900c:	10800958 	cmpnei	r2,r2,37
10009010:	103ff41e 	bne	r2,zero,10008fe4 <__alt_data_end+0xf8008fe4>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
10009014:	a807883a 	mov	r3,r21
10009018:	9005883a 	mov	r2,r18
1000901c:	18a1c83a 	sub	r16,r3,r2
10009020:	80001826 	beq	r16,zero,10009084 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
10009024:	8c800015 	stw	r18,0(r17)
10009028:	8005883a 	mov	r2,r16
1000902c:	88800115 	stw	r2,4(r17)
10009030:	e0bfca17 	ldw	r2,-216(fp)
10009034:	8007883a 	mov	r3,r16
10009038:	10c5883a 	add	r2,r2,r3
1000903c:	e0bfca15 	stw	r2,-216(fp)
10009040:	8c400204 	addi	r17,r17,8
10009044:	e0bfc917 	ldw	r2,-220(fp)
10009048:	10800044 	addi	r2,r2,1
1000904c:	e0bfc915 	stw	r2,-220(fp)
10009050:	e0bfc917 	ldw	r2,-220(fp)
10009054:	10800210 	cmplti	r2,r2,8
10009058:	1000071e 	bne	r2,zero,10009078 <___vfprintf_internal_r+0x210>
1000905c:	e0bfc804 	addi	r2,fp,-224
10009060:	100d883a 	mov	r6,r2
10009064:	e17fe717 	ldw	r5,-100(fp)
10009068:	e13fe617 	ldw	r4,-104(fp)
1000906c:	0011b680 	call	10011b68 <__sprint_r>
10009070:	1007531e 	bne	r2,zero,1000adc0 <___vfprintf_internal_r+0x1f58>
10009074:	e47fcb04 	addi	r17,fp,-212
			ret += m;
10009078:	e0bfac17 	ldw	r2,-336(fp)
1000907c:	1405883a 	add	r2,r2,r16
10009080:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
10009084:	a8800003 	ldbu	r2,0(r21)
10009088:	10803fcc 	andi	r2,r2,255
1000908c:	1080201c 	xori	r2,r2,128
10009090:	10bfe004 	addi	r2,r2,-128
10009094:	10073c26 	beq	r2,zero,1000ad88 <___vfprintf_internal_r+0x1f20>
                    goto done;
#endif
		fmt_anchor = fmt;
10009098:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
1000909c:	ad400044 	addi	r21,r21,1

		flags = 0;
100090a0:	0027883a 	mov	r19,zero
		dprec = 0;
100090a4:	e03fb415 	stw	zero,-304(fp)
		width = 0;
100090a8:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
100090ac:	00bfffc4 	movi	r2,-1
100090b0:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
100090b4:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
100090b8:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
100090bc:	a805883a 	mov	r2,r21
100090c0:	15400044 	addi	r21,r2,1
100090c4:	10800003 	ldbu	r2,0(r2)
100090c8:	15003fcc 	andi	r20,r2,255
100090cc:	a500201c 	xori	r20,r20,128
100090d0:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
100090d4:	a0bff804 	addi	r2,r20,-32
100090d8:	10c01668 	cmpgeui	r3,r2,89
100090dc:	18034f1e 	bne	r3,zero,10009e1c <___vfprintf_internal_r+0xfb4>
100090e0:	100690ba 	slli	r3,r2,2
100090e4:	00840074 	movhi	r2,4097
100090e8:	10a43e04 	addi	r2,r2,-28424
100090ec:	1885883a 	add	r2,r3,r2
100090f0:	10800017 	ldw	r2,0(r2)
100090f4:	1000683a 	jmp	r2
100090f8:	1000925c 	xori	zero,r2,585
100090fc:	10009e1c 	xori	zero,r2,632
10009100:	10009e1c 	xori	zero,r2,632
10009104:	1000927c 	xorhi	zero,r2,585
10009108:	10009e1c 	xori	zero,r2,632
1000910c:	10009e1c 	xori	zero,r2,632
10009110:	10009e1c 	xori	zero,r2,632
10009114:	10009e1c 	xori	zero,r2,632
10009118:	10009e1c 	xori	zero,r2,632
1000911c:	10009e1c 	xori	zero,r2,632
10009120:	10009284 	addi	zero,r2,586
10009124:	100092b8 	rdprs	zero,r2,586
10009128:	10009e1c 	xori	zero,r2,632
1000912c:	100092b0 	cmpltui	zero,r2,586
10009130:	100092c4 	addi	zero,r2,587
10009134:	10009e1c 	xori	zero,r2,632
10009138:	10009364 	muli	zero,r2,589
1000913c:	1000936c 	andhi	zero,r2,589
10009140:	1000936c 	andhi	zero,r2,589
10009144:	1000936c 	andhi	zero,r2,589
10009148:	1000936c 	andhi	zero,r2,589
1000914c:	1000936c 	andhi	zero,r2,589
10009150:	1000936c 	andhi	zero,r2,589
10009154:	1000936c 	andhi	zero,r2,589
10009158:	1000936c 	andhi	zero,r2,589
1000915c:	1000936c 	andhi	zero,r2,589
10009160:	10009e1c 	xori	zero,r2,632
10009164:	10009e1c 	xori	zero,r2,632
10009168:	10009e1c 	xori	zero,r2,632
1000916c:	10009e1c 	xori	zero,r2,632
10009170:	10009e1c 	xori	zero,r2,632
10009174:	10009e1c 	xori	zero,r2,632
10009178:	10009e1c 	xori	zero,r2,632
1000917c:	10009e1c 	xori	zero,r2,632
10009180:	10009e1c 	xori	zero,r2,632
10009184:	10009e1c 	xori	zero,r2,632
10009188:	10009420 	cmpeqi	zero,r2,592
1000918c:	10009520 	cmpeqi	zero,r2,596
10009190:	10009e1c 	xori	zero,r2,632
10009194:	10009520 	cmpeqi	zero,r2,596
10009198:	10009e1c 	xori	zero,r2,632
1000919c:	10009e1c 	xori	zero,r2,632
100091a0:	10009e1c 	xori	zero,r2,632
100091a4:	10009e1c 	xori	zero,r2,632
100091a8:	100093b4 	orhi	zero,r2,590
100091ac:	10009e1c 	xori	zero,r2,632
100091b0:	10009e1c 	xori	zero,r2,632
100091b4:	100098bc 	xorhi	zero,r2,610
100091b8:	10009e1c 	xori	zero,r2,632
100091bc:	10009e1c 	xori	zero,r2,632
100091c0:	10009e1c 	xori	zero,r2,632
100091c4:	10009e1c 	xori	zero,r2,632
100091c8:	10009e1c 	xori	zero,r2,632
100091cc:	10009a38 	rdprs	zero,r2,616
100091d0:	10009e1c 	xori	zero,r2,632
100091d4:	10009e1c 	xori	zero,r2,632
100091d8:	10009af8 	rdprs	zero,r2,619
100091dc:	10009e1c 	xori	zero,r2,632
100091e0:	10009e1c 	xori	zero,r2,632
100091e4:	10009e1c 	xori	zero,r2,632
100091e8:	10009e1c 	xori	zero,r2,632
100091ec:	10009e1c 	xori	zero,r2,632
100091f0:	10009e1c 	xori	zero,r2,632
100091f4:	10009e1c 	xori	zero,r2,632
100091f8:	10009e1c 	xori	zero,r2,632
100091fc:	10009e1c 	xori	zero,r2,632
10009200:	10009e1c 	xori	zero,r2,632
10009204:	100093f8 	rdprs	zero,r2,591
10009208:	10009424 	muli	zero,r2,592
1000920c:	10009520 	cmpeqi	zero,r2,596
10009210:	10009520 	cmpeqi	zero,r2,596
10009214:	10009520 	cmpeqi	zero,r2,596
10009218:	100093bc 	xorhi	zero,r2,590
1000921c:	10009424 	muli	zero,r2,592
10009220:	10009e1c 	xori	zero,r2,632
10009224:	10009e1c 	xori	zero,r2,632
10009228:	100093c4 	addi	zero,r2,591
1000922c:	10009e1c 	xori	zero,r2,632
10009230:	1000981c 	xori	zero,r2,608
10009234:	100098c0 	call	1100098c <__alt_heap_start+0xf1dd18>
10009238:	10009960 	cmpeqi	zero,r2,613
1000923c:	100093f0 	cmpltui	zero,r2,591
10009240:	10009e1c 	xori	zero,r2,632
10009244:	100099a8 	cmpgeui	zero,r2,614
10009248:	10009e1c 	xori	zero,r2,632
1000924c:	10009a3c 	xorhi	zero,r2,616
10009250:	10009e1c 	xori	zero,r2,632
10009254:	10009e1c 	xori	zero,r2,632
10009258:	10009b08 	cmpgei	zero,r2,620
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
1000925c:	e0bfc103 	ldbu	r2,-252(fp)
10009260:	10803fcc 	andi	r2,r2,255
10009264:	1080201c 	xori	r2,r2,128
10009268:	10bfe004 	addi	r2,r2,-128
1000926c:	103f931e 	bne	r2,zero,100090bc <__alt_data_end+0xf80090bc>
				sign = ' ';
10009270:	00800804 	movi	r2,32
10009274:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
10009278:	003f9006 	br	100090bc <__alt_data_end+0xf80090bc>
		case '#':
			flags |= ALT;
1000927c:	9cc00054 	ori	r19,r19,1
			goto rflag;
10009280:	003f8e06 	br	100090bc <__alt_data_end+0xf80090bc>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
10009284:	e0bfe917 	ldw	r2,-92(fp)
10009288:	10c00104 	addi	r3,r2,4
1000928c:	e0ffe915 	stw	r3,-92(fp)
10009290:	10800017 	ldw	r2,0(r2)
10009294:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
10009298:	e0bfad17 	ldw	r2,-332(fp)
1000929c:	10000116 	blt	r2,zero,100092a4 <___vfprintf_internal_r+0x43c>
				goto rflag;
100092a0:	003f8606 	br	100090bc <__alt_data_end+0xf80090bc>
			width = -width;
100092a4:	e0bfad17 	ldw	r2,-332(fp)
100092a8:	0085c83a 	sub	r2,zero,r2
100092ac:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
100092b0:	9cc00114 	ori	r19,r19,4
			goto rflag;
100092b4:	003f8106 	br	100090bc <__alt_data_end+0xf80090bc>
		case '+':
			sign = '+';
100092b8:	00800ac4 	movi	r2,43
100092bc:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
100092c0:	003f7e06 	br	100090bc <__alt_data_end+0xf80090bc>
		case '.':
			if ((ch = *fmt++) == '*') {
100092c4:	a805883a 	mov	r2,r21
100092c8:	15400044 	addi	r21,r2,1
100092cc:	10800003 	ldbu	r2,0(r2)
100092d0:	15003fcc 	andi	r20,r2,255
100092d4:	a500201c 	xori	r20,r20,128
100092d8:	a53fe004 	addi	r20,r20,-128
100092dc:	a0800a98 	cmpnei	r2,r20,42
100092e0:	10000a1e 	bne	r2,zero,1000930c <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
100092e4:	e0bfe917 	ldw	r2,-92(fp)
100092e8:	10c00104 	addi	r3,r2,4
100092ec:	e0ffe915 	stw	r3,-92(fp)
100092f0:	10800017 	ldw	r2,0(r2)
100092f4:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
100092f8:	e0bfae17 	ldw	r2,-328(fp)
100092fc:	103f6f0e 	bge	r2,zero,100090bc <__alt_data_end+0xf80090bc>
					prec = -1;
10009300:	00bfffc4 	movi	r2,-1
10009304:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
10009308:	003f6c06 	br	100090bc <__alt_data_end+0xf80090bc>
			}
			n = 0;
1000930c:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
10009310:	00000c06 	br	10009344 <___vfprintf_internal_r+0x4dc>
				n = 10 * n + to_digit (ch);
10009314:	01400284 	movi	r5,10
10009318:	8009883a 	mov	r4,r16
1000931c:	0005a080 	call	10005a08 <__mulsi3>
10009320:	1007883a 	mov	r3,r2
10009324:	a0bff404 	addi	r2,r20,-48
10009328:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
1000932c:	a805883a 	mov	r2,r21
10009330:	15400044 	addi	r21,r2,1
10009334:	10800003 	ldbu	r2,0(r2)
10009338:	15003fcc 	andi	r20,r2,255
1000933c:	a500201c 	xori	r20,r20,128
10009340:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
10009344:	a0bff404 	addi	r2,r20,-48
10009348:	108002b0 	cmpltui	r2,r2,10
1000934c:	103ff11e 	bne	r2,zero,10009314 <__alt_data_end+0xf8009314>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
10009350:	8005883a 	mov	r2,r16
10009354:	1000010e 	bge	r2,zero,1000935c <___vfprintf_internal_r+0x4f4>
10009358:	00bfffc4 	movi	r2,-1
1000935c:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
10009360:	003f5c06 	br	100090d4 <__alt_data_end+0xf80090d4>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
10009364:	9cc02014 	ori	r19,r19,128
			goto rflag;
10009368:	003f5406 	br	100090bc <__alt_data_end+0xf80090bc>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
1000936c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
10009370:	01400284 	movi	r5,10
10009374:	8009883a 	mov	r4,r16
10009378:	0005a080 	call	10005a08 <__mulsi3>
1000937c:	1007883a 	mov	r3,r2
10009380:	a0bff404 	addi	r2,r20,-48
10009384:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10009388:	a805883a 	mov	r2,r21
1000938c:	15400044 	addi	r21,r2,1
10009390:	10800003 	ldbu	r2,0(r2)
10009394:	15003fcc 	andi	r20,r2,255
10009398:	a500201c 	xori	r20,r20,128
1000939c:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
100093a0:	a0bff404 	addi	r2,r20,-48
100093a4:	108002b0 	cmpltui	r2,r2,10
100093a8:	103ff11e 	bne	r2,zero,10009370 <__alt_data_end+0xf8009370>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
100093ac:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
100093b0:	003f4806 	br	100090d4 <__alt_data_end+0xf80090d4>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
100093b4:	9cc00214 	ori	r19,r19,8
			goto rflag;
100093b8:	003f4006 	br	100090bc <__alt_data_end+0xf80090bc>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
100093bc:	9cc01014 	ori	r19,r19,64
			goto rflag;
100093c0:	003f3e06 	br	100090bc <__alt_data_end+0xf80090bc>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
100093c4:	a8800003 	ldbu	r2,0(r21)
100093c8:	10803fcc 	andi	r2,r2,255
100093cc:	1080201c 	xori	r2,r2,128
100093d0:	10bfe004 	addi	r2,r2,-128
100093d4:	10801b18 	cmpnei	r2,r2,108
100093d8:	1000031e 	bne	r2,zero,100093e8 <___vfprintf_internal_r+0x580>
				fmt++;
100093dc:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
100093e0:	9cc00814 	ori	r19,r19,32
100093e4:	003f3506 	br	100090bc <__alt_data_end+0xf80090bc>
			} else
#endif
				flags |= LONGINT;
100093e8:	9cc00414 	ori	r19,r19,16
			goto rflag;
100093ec:	003f3306 	br	100090bc <__alt_data_end+0xf80090bc>
		case 'q': /* extension */
			flags |= QUADINT;
100093f0:	9cc00814 	ori	r19,r19,32
			goto rflag;
100093f4:	003f3106 	br	100090bc <__alt_data_end+0xf80090bc>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
100093f8:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
100093fc:	e0bfe917 	ldw	r2,-92(fp)
10009400:	10c00104 	addi	r3,r2,4
10009404:	e0ffe915 	stw	r3,-92(fp)
10009408:	10800017 	ldw	r2,0(r2)
1000940c:	90800005 	stb	r2,0(r18)
				size = 1;
10009410:	00800044 	movi	r2,1
10009414:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
10009418:	e03fc105 	stb	zero,-252(fp)
			break;
1000941c:	00028806 	br	10009e40 <___vfprintf_internal_r+0xfd8>
		case 'D':  /* extension */
			flags |= LONGINT;
10009420:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
10009424:	9880080c 	andi	r2,r19,32
10009428:	10000826 	beq	r2,zero,1000944c <___vfprintf_internal_r+0x5e4>
1000942c:	e13fe917 	ldw	r4,-92(fp)
10009430:	20800204 	addi	r2,r4,8
10009434:	e0bfe915 	stw	r2,-92(fp)
10009438:	20800017 	ldw	r2,0(r4)
1000943c:	20c00117 	ldw	r3,4(r4)
10009440:	e0bfea15 	stw	r2,-88(fp)
10009444:	e0ffeb15 	stw	r3,-84(fp)
10009448:	00001e06 	br	100094c4 <___vfprintf_internal_r+0x65c>
1000944c:	9880040c 	andi	r2,r19,16
10009450:	10000826 	beq	r2,zero,10009474 <___vfprintf_internal_r+0x60c>
10009454:	e0bfe917 	ldw	r2,-92(fp)
10009458:	10c00104 	addi	r3,r2,4
1000945c:	e0ffe915 	stw	r3,-92(fp)
10009460:	10800017 	ldw	r2,0(r2)
10009464:	e0bfea15 	stw	r2,-88(fp)
10009468:	1005d7fa 	srai	r2,r2,31
1000946c:	e0bfeb15 	stw	r2,-84(fp)
10009470:	00001406 	br	100094c4 <___vfprintf_internal_r+0x65c>
10009474:	9880100c 	andi	r2,r19,64
10009478:	10000b26 	beq	r2,zero,100094a8 <___vfprintf_internal_r+0x640>
1000947c:	e0bfe917 	ldw	r2,-92(fp)
10009480:	10c00104 	addi	r3,r2,4
10009484:	e0ffe915 	stw	r3,-92(fp)
10009488:	10800017 	ldw	r2,0(r2)
1000948c:	10bfffcc 	andi	r2,r2,65535
10009490:	10a0001c 	xori	r2,r2,32768
10009494:	10a00004 	addi	r2,r2,-32768
10009498:	e0bfea15 	stw	r2,-88(fp)
1000949c:	1005d7fa 	srai	r2,r2,31
100094a0:	e0bfeb15 	stw	r2,-84(fp)
100094a4:	00000706 	br	100094c4 <___vfprintf_internal_r+0x65c>
100094a8:	e0bfe917 	ldw	r2,-92(fp)
100094ac:	10c00104 	addi	r3,r2,4
100094b0:	e0ffe915 	stw	r3,-92(fp)
100094b4:	10800017 	ldw	r2,0(r2)
100094b8:	e0bfea15 	stw	r2,-88(fp)
100094bc:	1005d7fa 	srai	r2,r2,31
100094c0:	e0bfeb15 	stw	r2,-84(fp)
100094c4:	e0bfea17 	ldw	r2,-88(fp)
100094c8:	e0bfb115 	stw	r2,-316(fp)
100094cc:	e0ffeb17 	ldw	r3,-84(fp)
100094d0:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
100094d4:	e0bfb117 	ldw	r2,-316(fp)
100094d8:	e0ffb217 	ldw	r3,-312(fp)
100094dc:	18000d0e 	bge	r3,zero,10009514 <___vfprintf_internal_r+0x6ac>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
100094e0:	000f883a 	mov	r7,zero
100094e4:	0011883a 	mov	r8,zero
100094e8:	e13fb117 	ldw	r4,-316(fp)
100094ec:	e17fb217 	ldw	r5,-312(fp)
100094f0:	3905c83a 	sub	r2,r7,r4
100094f4:	388d803a 	cmpltu	r6,r7,r2
100094f8:	4147c83a 	sub	r3,r8,r5
100094fc:	1989c83a 	sub	r4,r3,r6
10009500:	2007883a 	mov	r3,r4
10009504:	e0bfb115 	stw	r2,-316(fp)
10009508:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
1000950c:	00800b44 	movi	r2,45
10009510:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
10009514:	00800044 	movi	r2,1
10009518:	e0bfb305 	stb	r2,-308(fp)
			goto number;
1000951c:	0001b706 	br	10009bfc <___vfprintf_internal_r+0xd94>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
10009520:	9880020c 	andi	r2,r19,8
10009524:	10000826 	beq	r2,zero,10009548 <___vfprintf_internal_r+0x6e0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
10009528:	e13fe917 	ldw	r4,-92(fp)
1000952c:	20800204 	addi	r2,r4,8
10009530:	e0bfe915 	stw	r2,-92(fp)
10009534:	20800017 	ldw	r2,0(r4)
10009538:	20c00117 	ldw	r3,4(r4)
1000953c:	e0bfc215 	stw	r2,-248(fp)
10009540:	e0ffc315 	stw	r3,-244(fp)
10009544:	00000706 	br	10009564 <___vfprintf_internal_r+0x6fc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
10009548:	e13fe917 	ldw	r4,-92(fp)
1000954c:	20800204 	addi	r2,r4,8
10009550:	e0bfe915 	stw	r2,-92(fp)
10009554:	20800017 	ldw	r2,0(r4)
10009558:	20c00117 	ldw	r3,4(r4)
1000955c:	e0bfc215 	stw	r2,-248(fp)
10009560:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
10009564:	e0bfc217 	ldw	r2,-248(fp)
10009568:	e0ffc317 	ldw	r3,-244(fp)
1000956c:	1009883a 	mov	r4,r2
10009570:	180b883a 	mov	r5,r3
10009574:	00116b00 	call	100116b0 <__fpclassifyd>
10009578:	10800058 	cmpnei	r2,r2,1
1000957c:	1000161e 	bne	r2,zero,100095d8 <___vfprintf_internal_r+0x770>
				if (_fpvalue < 0)
10009580:	e0bfc217 	ldw	r2,-248(fp)
10009584:	e0ffc317 	ldw	r3,-244(fp)
10009588:	000d883a 	mov	r6,zero
1000958c:	000f883a 	mov	r7,zero
10009590:	1009883a 	mov	r4,r2
10009594:	180b883a 	mov	r5,r3
10009598:	00044940 	call	10004494 <__ledf2>
1000959c:	1000020e 	bge	r2,zero,100095a8 <___vfprintf_internal_r+0x740>
					sign = '-';
100095a0:	00800b44 	movi	r2,45
100095a4:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
100095a8:	a0801208 	cmpgei	r2,r20,72
100095ac:	1000031e 	bne	r2,zero,100095bc <___vfprintf_internal_r+0x754>
					cp = "INF";
100095b0:	04840374 	movhi	r18,4109
100095b4:	94bd1704 	addi	r18,r18,-2980
100095b8:	00000206 	br	100095c4 <___vfprintf_internal_r+0x75c>
				else
					cp = "inf";
100095bc:	04840374 	movhi	r18,4109
100095c0:	94bd1804 	addi	r18,r18,-2976
				size = 3;
100095c4:	008000c4 	movi	r2,3
100095c8:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
100095cc:	00bfdfc4 	movi	r2,-129
100095d0:	98a6703a 	and	r19,r19,r2
				break;
100095d4:	00021a06 	br	10009e40 <___vfprintf_internal_r+0xfd8>
			}
			if (isnan (_fpvalue)) {
100095d8:	e0bfc217 	ldw	r2,-248(fp)
100095dc:	e0ffc317 	ldw	r3,-244(fp)
100095e0:	1009883a 	mov	r4,r2
100095e4:	180b883a 	mov	r5,r3
100095e8:	00116b00 	call	100116b0 <__fpclassifyd>
100095ec:	10000c1e 	bne	r2,zero,10009620 <___vfprintf_internal_r+0x7b8>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
100095f0:	a0801208 	cmpgei	r2,r20,72
100095f4:	1000031e 	bne	r2,zero,10009604 <___vfprintf_internal_r+0x79c>
					cp = "NAN";
100095f8:	04840374 	movhi	r18,4109
100095fc:	94bd1904 	addi	r18,r18,-2972
10009600:	00000206 	br	1000960c <___vfprintf_internal_r+0x7a4>
				else
					cp = "nan";
10009604:	04840374 	movhi	r18,4109
10009608:	94bd1a04 	addi	r18,r18,-2968
				size = 3;
1000960c:	008000c4 	movi	r2,3
10009610:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
10009614:	00bfdfc4 	movi	r2,-129
10009618:	98a6703a 	and	r19,r19,r2
				break;
1000961c:	00020806 	br	10009e40 <___vfprintf_internal_r+0xfd8>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
10009620:	e0bfae17 	ldw	r2,-328(fp)
10009624:	10bfffd8 	cmpnei	r2,r2,-1
10009628:	1000031e 	bne	r2,zero,10009638 <___vfprintf_internal_r+0x7d0>
				prec = DEFPREC;
1000962c:	00800184 	movi	r2,6
10009630:	e0bfae15 	stw	r2,-328(fp)
10009634:	00000806 	br	10009658 <___vfprintf_internal_r+0x7f0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
10009638:	a08019e0 	cmpeqi	r2,r20,103
1000963c:	1000021e 	bne	r2,zero,10009648 <___vfprintf_internal_r+0x7e0>
10009640:	a08011d8 	cmpnei	r2,r20,71
10009644:	1000041e 	bne	r2,zero,10009658 <___vfprintf_internal_r+0x7f0>
10009648:	e0bfae17 	ldw	r2,-328(fp)
1000964c:	1000021e 	bne	r2,zero,10009658 <___vfprintf_internal_r+0x7f0>
				prec = 1;
10009650:	00800044 	movi	r2,1
10009654:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
10009658:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
1000965c:	e0bfc217 	ldw	r2,-248(fp)
10009660:	e0ffc317 	ldw	r3,-244(fp)
10009664:	dc800515 	stw	r18,20(sp)
10009668:	e13fc704 	addi	r4,fp,-228
1000966c:	d9000415 	stw	r4,16(sp)
10009670:	dd000315 	stw	r20,12(sp)
10009674:	e13fc404 	addi	r4,fp,-240
10009678:	d9000215 	stw	r4,8(sp)
1000967c:	e13fc144 	addi	r4,fp,-251
10009680:	d9000115 	stw	r4,4(sp)
10009684:	dcc00015 	stw	r19,0(sp)
10009688:	e1ffae17 	ldw	r7,-328(fp)
1000968c:	100b883a 	mov	r5,r2
10009690:	180d883a 	mov	r6,r3
10009694:	e13fe617 	ldw	r4,-104(fp)
10009698:	000af500 	call	1000af50 <cvt>
1000969c:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
100096a0:	a08019e0 	cmpeqi	r2,r20,103
100096a4:	1000021e 	bne	r2,zero,100096b0 <___vfprintf_internal_r+0x848>
100096a8:	a08011d8 	cmpnei	r2,r20,71
100096ac:	1000091e 	bne	r2,zero,100096d4 <___vfprintf_internal_r+0x86c>
				if (expt <= -4 || expt > prec)
100096b0:	e0bfc417 	ldw	r2,-240(fp)
100096b4:	10bfff50 	cmplti	r2,r2,-3
100096b8:	1000031e 	bne	r2,zero,100096c8 <___vfprintf_internal_r+0x860>
100096bc:	e0bfc417 	ldw	r2,-240(fp)
100096c0:	e0ffae17 	ldw	r3,-328(fp)
100096c4:	1880020e 	bge	r3,r2,100096d0 <___vfprintf_internal_r+0x868>
					ch -= 2; /* 'e' or 'E' */
100096c8:	a53fff84 	addi	r20,r20,-2
100096cc:	00000106 	br	100096d4 <___vfprintf_internal_r+0x86c>
				else
					ch = 'g';
100096d0:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
100096d4:	a0801988 	cmpgei	r2,r20,102
100096d8:	1000171e 	bne	r2,zero,10009738 <___vfprintf_internal_r+0x8d0>
				--expt;
100096dc:	e0bfc417 	ldw	r2,-240(fp)
100096e0:	10bfffc4 	addi	r2,r2,-1
100096e4:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
100096e8:	e0bfc417 	ldw	r2,-240(fp)
100096ec:	e0ffc504 	addi	r3,fp,-236
100096f0:	a00d883a 	mov	r6,r20
100096f4:	100b883a 	mov	r5,r2
100096f8:	1809883a 	mov	r4,r3
100096fc:	000b15c0 	call	1000b15c <exponent>
10009700:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
10009704:	e0bfc717 	ldw	r2,-228(fp)
10009708:	e0ffaf17 	ldw	r3,-324(fp)
1000970c:	1885883a 	add	r2,r3,r2
10009710:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
10009714:	e0bfc717 	ldw	r2,-228(fp)
10009718:	10800088 	cmpgei	r2,r2,2
1000971c:	1000021e 	bne	r2,zero,10009728 <___vfprintf_internal_r+0x8c0>
10009720:	9880004c 	andi	r2,r19,1
10009724:	10003526 	beq	r2,zero,100097fc <___vfprintf_internal_r+0x994>
					++size;
10009728:	e0bfb617 	ldw	r2,-296(fp)
1000972c:	10800044 	addi	r2,r2,1
10009730:	e0bfb615 	stw	r2,-296(fp)
10009734:	00003106 	br	100097fc <___vfprintf_internal_r+0x994>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
10009738:	a0801998 	cmpnei	r2,r20,102
1000973c:	1000181e 	bne	r2,zero,100097a0 <___vfprintf_internal_r+0x938>
					if (expt > 0) {
10009740:	e0bfc417 	ldw	r2,-240(fp)
10009744:	00800c0e 	bge	zero,r2,10009778 <___vfprintf_internal_r+0x910>
						size = expt;
10009748:	e0bfc417 	ldw	r2,-240(fp)
1000974c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
10009750:	e0bfae17 	ldw	r2,-328(fp)
10009754:	1000021e 	bne	r2,zero,10009760 <___vfprintf_internal_r+0x8f8>
10009758:	9880004c 	andi	r2,r19,1
1000975c:	10002526 	beq	r2,zero,100097f4 <___vfprintf_internal_r+0x98c>
							size += prec + 1;
10009760:	e0bfae17 	ldw	r2,-328(fp)
10009764:	10800044 	addi	r2,r2,1
10009768:	e0ffb617 	ldw	r3,-296(fp)
1000976c:	1885883a 	add	r2,r3,r2
10009770:	e0bfb615 	stw	r2,-296(fp)
10009774:	00001f06 	br	100097f4 <___vfprintf_internal_r+0x98c>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
10009778:	e0bfae17 	ldw	r2,-328(fp)
1000977c:	1000021e 	bne	r2,zero,10009788 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
10009780:	9880004c 	andi	r2,r19,1
10009784:	10000326 	beq	r2,zero,10009794 <___vfprintf_internal_r+0x92c>
							  ? prec + 2
							  : 1;
10009788:	e0bfae17 	ldw	r2,-328(fp)
1000978c:	10800084 	addi	r2,r2,2
10009790:	00000106 	br	10009798 <___vfprintf_internal_r+0x930>
10009794:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
10009798:	e0bfb615 	stw	r2,-296(fp)
1000979c:	00001506 	br	100097f4 <___vfprintf_internal_r+0x98c>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
100097a0:	e0ffc417 	ldw	r3,-240(fp)
100097a4:	e0bfc717 	ldw	r2,-228(fp)
100097a8:	18800816 	blt	r3,r2,100097cc <___vfprintf_internal_r+0x964>
					size = expt;
100097ac:	e0bfc417 	ldw	r2,-240(fp)
100097b0:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
100097b4:	9880004c 	andi	r2,r19,1
100097b8:	10000e26 	beq	r2,zero,100097f4 <___vfprintf_internal_r+0x98c>
						++size;
100097bc:	e0bfb617 	ldw	r2,-296(fp)
100097c0:	10800044 	addi	r2,r2,1
100097c4:	e0bfb615 	stw	r2,-296(fp)
100097c8:	00000a06 	br	100097f4 <___vfprintf_internal_r+0x98c>
				} else
					size = ndig + (expt > 0 ?
100097cc:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
100097d0:	00800416 	blt	zero,r2,100097e4 <___vfprintf_internal_r+0x97c>
100097d4:	e0bfc417 	ldw	r2,-240(fp)
100097d8:	00c00084 	movi	r3,2
100097dc:	1885c83a 	sub	r2,r3,r2
100097e0:	00000106 	br	100097e8 <___vfprintf_internal_r+0x980>
100097e4:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
100097e8:	e0ffc717 	ldw	r3,-228(fp)
100097ec:	10c5883a 	add	r2,r2,r3
100097f0:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
100097f4:	e0bfc417 	ldw	r2,-240(fp)
100097f8:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
100097fc:	e0bfc143 	ldbu	r2,-251(fp)
10009800:	10803fcc 	andi	r2,r2,255
10009804:	1080201c 	xori	r2,r2,128
10009808:	10bfe004 	addi	r2,r2,-128
1000980c:	10018b26 	beq	r2,zero,10009e3c <___vfprintf_internal_r+0xfd4>
				sign = '-';
10009810:	00800b44 	movi	r2,45
10009814:	e0bfc105 	stb	r2,-252(fp)
			break;
10009818:	00018806 	br	10009e3c <___vfprintf_internal_r+0xfd4>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
1000981c:	9880080c 	andi	r2,r19,32
10009820:	10000d26 	beq	r2,zero,10009858 <___vfprintf_internal_r+0x9f0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
10009824:	e0bfe917 	ldw	r2,-92(fp)
10009828:	10c00104 	addi	r3,r2,4
1000982c:	e0ffe915 	stw	r3,-92(fp)
10009830:	10800017 	ldw	r2,0(r2)
10009834:	e0ffac17 	ldw	r3,-336(fp)
10009838:	e0fff015 	stw	r3,-64(fp)
1000983c:	1807d7fa 	srai	r3,r3,31
10009840:	e0fff115 	stw	r3,-60(fp)
10009844:	e0fff017 	ldw	r3,-64(fp)
10009848:	10c00015 	stw	r3,0(r2)
1000984c:	e0fff117 	ldw	r3,-60(fp)
10009850:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10009854:	00054b06 	br	1000ad84 <___vfprintf_internal_r+0x1f1c>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
10009858:	9880040c 	andi	r2,r19,16
1000985c:	10000726 	beq	r2,zero,1000987c <___vfprintf_internal_r+0xa14>
				*GET_ARG (N, ap, long_ptr_t) = ret;
10009860:	e0bfe917 	ldw	r2,-92(fp)
10009864:	10c00104 	addi	r3,r2,4
10009868:	e0ffe915 	stw	r3,-92(fp)
1000986c:	10800017 	ldw	r2,0(r2)
10009870:	e0ffac17 	ldw	r3,-336(fp)
10009874:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10009878:	00054206 	br	1000ad84 <___vfprintf_internal_r+0x1f1c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
1000987c:	9880100c 	andi	r2,r19,64
10009880:	10000726 	beq	r2,zero,100098a0 <___vfprintf_internal_r+0xa38>
				*GET_ARG (N, ap, short_ptr_t) = ret;
10009884:	e0bfe917 	ldw	r2,-92(fp)
10009888:	10c00104 	addi	r3,r2,4
1000988c:	e0ffe915 	stw	r3,-92(fp)
10009890:	10800017 	ldw	r2,0(r2)
10009894:	e0ffac17 	ldw	r3,-336(fp)
10009898:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
1000989c:	00053906 	br	1000ad84 <___vfprintf_internal_r+0x1f1c>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
100098a0:	e0bfe917 	ldw	r2,-92(fp)
100098a4:	10c00104 	addi	r3,r2,4
100098a8:	e0ffe915 	stw	r3,-92(fp)
100098ac:	10800017 	ldw	r2,0(r2)
100098b0:	e0ffac17 	ldw	r3,-336(fp)
100098b4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
100098b8:	00053206 	br	1000ad84 <___vfprintf_internal_r+0x1f1c>
		case 'O': /* extension */
			flags |= LONGINT;
100098bc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
100098c0:	9880080c 	andi	r2,r19,32
100098c4:	10000626 	beq	r2,zero,100098e0 <___vfprintf_internal_r+0xa78>
100098c8:	e0bfe917 	ldw	r2,-92(fp)
100098cc:	10c00204 	addi	r3,r2,8
100098d0:	e0ffe915 	stw	r3,-92(fp)
100098d4:	15800017 	ldw	r22,0(r2)
100098d8:	15c00117 	ldw	r23,4(r2)
100098dc:	00001c06 	br	10009950 <___vfprintf_internal_r+0xae8>
100098e0:	9880040c 	andi	r2,r19,16
100098e4:	10000726 	beq	r2,zero,10009904 <___vfprintf_internal_r+0xa9c>
100098e8:	e0bfe917 	ldw	r2,-92(fp)
100098ec:	10c00104 	addi	r3,r2,4
100098f0:	e0ffe915 	stw	r3,-92(fp)
100098f4:	10800017 	ldw	r2,0(r2)
100098f8:	102d883a 	mov	r22,r2
100098fc:	002f883a 	mov	r23,zero
10009900:	00001306 	br	10009950 <___vfprintf_internal_r+0xae8>
10009904:	9880100c 	andi	r2,r19,64
10009908:	10000b26 	beq	r2,zero,10009938 <___vfprintf_internal_r+0xad0>
1000990c:	e0bfe917 	ldw	r2,-92(fp)
10009910:	10c00104 	addi	r3,r2,4
10009914:	e0ffe915 	stw	r3,-92(fp)
10009918:	10800017 	ldw	r2,0(r2)
1000991c:	e0bff215 	stw	r2,-56(fp)
10009920:	e03ff315 	stw	zero,-52(fp)
10009924:	e0bff217 	ldw	r2,-56(fp)
10009928:	15bfffcc 	andi	r22,r2,65535
1000992c:	e0fff317 	ldw	r3,-52(fp)
10009930:	182e703a 	and	r23,r3,zero
10009934:	00000606 	br	10009950 <___vfprintf_internal_r+0xae8>
10009938:	e0bfe917 	ldw	r2,-92(fp)
1000993c:	10c00104 	addi	r3,r2,4
10009940:	e0ffe915 	stw	r3,-92(fp)
10009944:	10800017 	ldw	r2,0(r2)
10009948:	102d883a 	mov	r22,r2
1000994c:	002f883a 	mov	r23,zero
10009950:	e5bfb115 	stw	r22,-316(fp)
10009954:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
10009958:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
1000995c:	0000a606 	br	10009bf8 <___vfprintf_internal_r+0xd90>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
10009960:	e0bfe917 	ldw	r2,-92(fp)
10009964:	10c00104 	addi	r3,r2,4
10009968:	e0ffe915 	stw	r3,-92(fp)
1000996c:	10800017 	ldw	r2,0(r2)
10009970:	e0bfb115 	stw	r2,-316(fp)
10009974:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
10009978:	00800084 	movi	r2,2
1000997c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
10009980:	00840374 	movhi	r2,4109
10009984:	10bd1b04 	addi	r2,r2,-2964
10009988:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
1000998c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
10009990:	00800c04 	movi	r2,48
10009994:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
10009998:	05001e04 	movi	r20,120
1000999c:	00801e04 	movi	r2,120
100099a0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
100099a4:	00009406 	br	10009bf8 <___vfprintf_internal_r+0xd90>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
100099a8:	e0bfe917 	ldw	r2,-92(fp)
100099ac:	10c00104 	addi	r3,r2,4
100099b0:	e0ffe915 	stw	r3,-92(fp)
100099b4:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
100099b8:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
100099bc:	9000081e 	bne	r18,zero,100099e0 <___vfprintf_internal_r+0xb78>
				cp = "(null)";
100099c0:	04840374 	movhi	r18,4109
100099c4:	94bd2004 	addi	r18,r18,-2944
				size = ((unsigned) prec > 6U) ? 6 : prec;
100099c8:	e0bfae17 	ldw	r2,-328(fp)
100099cc:	10c001f0 	cmpltui	r3,r2,7
100099d0:	1800011e 	bne	r3,zero,100099d8 <___vfprintf_internal_r+0xb70>
100099d4:	00800184 	movi	r2,6
100099d8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
100099dc:	00011806 	br	10009e40 <___vfprintf_internal_r+0xfd8>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
100099e0:	e0bfae17 	ldw	r2,-328(fp)
100099e4:	10001016 	blt	r2,zero,10009a28 <___vfprintf_internal_r+0xbc0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
100099e8:	e0bfae17 	ldw	r2,-328(fp)
100099ec:	100d883a 	mov	r6,r2
100099f0:	000b883a 	mov	r5,zero
100099f4:	9009883a 	mov	r4,r18
100099f8:	000f0e80 	call	1000f0e8 <memchr>
100099fc:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
10009a00:	e0bfbf17 	ldw	r2,-260(fp)
10009a04:	10000526 	beq	r2,zero,10009a1c <___vfprintf_internal_r+0xbb4>
					size = p - cp;
10009a08:	e0bfbf17 	ldw	r2,-260(fp)
10009a0c:	9007883a 	mov	r3,r18
10009a10:	10c5c83a 	sub	r2,r2,r3
10009a14:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
10009a18:	00010906 	br	10009e40 <___vfprintf_internal_r+0xfd8>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
10009a1c:	e0bfae17 	ldw	r2,-328(fp)
10009a20:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
10009a24:	00010606 	br	10009e40 <___vfprintf_internal_r+0xfd8>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
10009a28:	9009883a 	mov	r4,r18
10009a2c:	00088880 	call	10008888 <strlen>
10009a30:	e0bfb615 	stw	r2,-296(fp)

			break;
10009a34:	00010206 	br	10009e40 <___vfprintf_internal_r+0xfd8>
		case 'U': /* extension */
			flags |= LONGINT;
10009a38:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
10009a3c:	9880080c 	andi	r2,r19,32
10009a40:	10000826 	beq	r2,zero,10009a64 <___vfprintf_internal_r+0xbfc>
10009a44:	e0bfe917 	ldw	r2,-92(fp)
10009a48:	10c00204 	addi	r3,r2,8
10009a4c:	e0ffe915 	stw	r3,-92(fp)
10009a50:	10c00017 	ldw	r3,0(r2)
10009a54:	e0ffec15 	stw	r3,-80(fp)
10009a58:	10c00117 	ldw	r3,4(r2)
10009a5c:	e0ffed15 	stw	r3,-76(fp)
10009a60:	00001e06 	br	10009adc <___vfprintf_internal_r+0xc74>
10009a64:	9880040c 	andi	r2,r19,16
10009a68:	10000726 	beq	r2,zero,10009a88 <___vfprintf_internal_r+0xc20>
10009a6c:	e0bfe917 	ldw	r2,-92(fp)
10009a70:	10c00104 	addi	r3,r2,4
10009a74:	e0ffe915 	stw	r3,-92(fp)
10009a78:	10800017 	ldw	r2,0(r2)
10009a7c:	e0bfec15 	stw	r2,-80(fp)
10009a80:	e03fed15 	stw	zero,-76(fp)
10009a84:	00001506 	br	10009adc <___vfprintf_internal_r+0xc74>
10009a88:	9880100c 	andi	r2,r19,64
10009a8c:	10000d26 	beq	r2,zero,10009ac4 <___vfprintf_internal_r+0xc5c>
10009a90:	e0bfe917 	ldw	r2,-92(fp)
10009a94:	10c00104 	addi	r3,r2,4
10009a98:	e0ffe915 	stw	r3,-92(fp)
10009a9c:	10800017 	ldw	r2,0(r2)
10009aa0:	e0bff415 	stw	r2,-48(fp)
10009aa4:	e03ff515 	stw	zero,-44(fp)
10009aa8:	e0bff417 	ldw	r2,-48(fp)
10009aac:	10bfffcc 	andi	r2,r2,65535
10009ab0:	e0bfec15 	stw	r2,-80(fp)
10009ab4:	e0fff517 	ldw	r3,-44(fp)
10009ab8:	1806703a 	and	r3,r3,zero
10009abc:	e0ffed15 	stw	r3,-76(fp)
10009ac0:	00000606 	br	10009adc <___vfprintf_internal_r+0xc74>
10009ac4:	e0bfe917 	ldw	r2,-92(fp)
10009ac8:	10c00104 	addi	r3,r2,4
10009acc:	e0ffe915 	stw	r3,-92(fp)
10009ad0:	10800017 	ldw	r2,0(r2)
10009ad4:	e0bfec15 	stw	r2,-80(fp)
10009ad8:	e03fed15 	stw	zero,-76(fp)
10009adc:	e0bfec17 	ldw	r2,-80(fp)
10009ae0:	e0bfb115 	stw	r2,-316(fp)
10009ae4:	e0ffed17 	ldw	r3,-76(fp)
10009ae8:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
10009aec:	00800044 	movi	r2,1
10009af0:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
10009af4:	00004006 	br	10009bf8 <___vfprintf_internal_r+0xd90>
		case 'X':
			xdigs = "0123456789ABCDEF";
10009af8:	00840374 	movhi	r2,4109
10009afc:	10bd2204 	addi	r2,r2,-2936
10009b00:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
10009b04:	00000306 	br	10009b14 <___vfprintf_internal_r+0xcac>
		case 'x':
			xdigs = "0123456789abcdef";
10009b08:	00840374 	movhi	r2,4109
10009b0c:	10bd1b04 	addi	r2,r2,-2964
10009b10:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
10009b14:	9880080c 	andi	r2,r19,32
10009b18:	10000826 	beq	r2,zero,10009b3c <___vfprintf_internal_r+0xcd4>
10009b1c:	e0bfe917 	ldw	r2,-92(fp)
10009b20:	10c00204 	addi	r3,r2,8
10009b24:	e0ffe915 	stw	r3,-92(fp)
10009b28:	10c00017 	ldw	r3,0(r2)
10009b2c:	e0ffee15 	stw	r3,-72(fp)
10009b30:	10c00117 	ldw	r3,4(r2)
10009b34:	e0ffef15 	stw	r3,-68(fp)
10009b38:	00001e06 	br	10009bb4 <___vfprintf_internal_r+0xd4c>
10009b3c:	9880040c 	andi	r2,r19,16
10009b40:	10000726 	beq	r2,zero,10009b60 <___vfprintf_internal_r+0xcf8>
10009b44:	e0bfe917 	ldw	r2,-92(fp)
10009b48:	10c00104 	addi	r3,r2,4
10009b4c:	e0ffe915 	stw	r3,-92(fp)
10009b50:	10800017 	ldw	r2,0(r2)
10009b54:	e0bfee15 	stw	r2,-72(fp)
10009b58:	e03fef15 	stw	zero,-68(fp)
10009b5c:	00001506 	br	10009bb4 <___vfprintf_internal_r+0xd4c>
10009b60:	9880100c 	andi	r2,r19,64
10009b64:	10000d26 	beq	r2,zero,10009b9c <___vfprintf_internal_r+0xd34>
10009b68:	e0bfe917 	ldw	r2,-92(fp)
10009b6c:	10c00104 	addi	r3,r2,4
10009b70:	e0ffe915 	stw	r3,-92(fp)
10009b74:	10800017 	ldw	r2,0(r2)
10009b78:	e0bff615 	stw	r2,-40(fp)
10009b7c:	e03ff715 	stw	zero,-36(fp)
10009b80:	e0bff617 	ldw	r2,-40(fp)
10009b84:	10bfffcc 	andi	r2,r2,65535
10009b88:	e0bfee15 	stw	r2,-72(fp)
10009b8c:	e0fff717 	ldw	r3,-36(fp)
10009b90:	1806703a 	and	r3,r3,zero
10009b94:	e0ffef15 	stw	r3,-68(fp)
10009b98:	00000606 	br	10009bb4 <___vfprintf_internal_r+0xd4c>
10009b9c:	e0bfe917 	ldw	r2,-92(fp)
10009ba0:	10c00104 	addi	r3,r2,4
10009ba4:	e0ffe915 	stw	r3,-92(fp)
10009ba8:	10800017 	ldw	r2,0(r2)
10009bac:	e0bfee15 	stw	r2,-72(fp)
10009bb0:	e03fef15 	stw	zero,-68(fp)
10009bb4:	e0bfee17 	ldw	r2,-72(fp)
10009bb8:	e0bfb115 	stw	r2,-316(fp)
10009bbc:	e0ffef17 	ldw	r3,-68(fp)
10009bc0:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
10009bc4:	00800084 	movi	r2,2
10009bc8:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
10009bcc:	9880004c 	andi	r2,r19,1
10009bd0:	10000926 	beq	r2,zero,10009bf8 <___vfprintf_internal_r+0xd90>
10009bd4:	e0bfb117 	ldw	r2,-316(fp)
10009bd8:	e0ffb217 	ldw	r3,-312(fp)
10009bdc:	10c4b03a 	or	r2,r2,r3
10009be0:	10000526 	beq	r2,zero,10009bf8 <___vfprintf_internal_r+0xd90>
				ox[0] = '0';
10009be4:	00800c04 	movi	r2,48
10009be8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
10009bec:	a005883a 	mov	r2,r20
10009bf0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
10009bf4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
10009bf8:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
10009bfc:	e0bfae17 	ldw	r2,-328(fp)
10009c00:	e0bfb415 	stw	r2,-304(fp)
10009c04:	e0bfb417 	ldw	r2,-304(fp)
10009c08:	10000216 	blt	r2,zero,10009c14 <___vfprintf_internal_r+0xdac>
				flags &= ~ZEROPAD;
10009c0c:	00bfdfc4 	movi	r2,-129
10009c10:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
10009c14:	e4bfdb04 	addi	r18,fp,-148
10009c18:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
10009c1c:	e0bfb117 	ldw	r2,-316(fp)
10009c20:	e0ffb217 	ldw	r3,-312(fp)
10009c24:	10c4b03a 	or	r2,r2,r3
10009c28:	1000021e 	bne	r2,zero,10009c34 <___vfprintf_internal_r+0xdcc>
10009c2c:	e0bfae17 	ldw	r2,-328(fp)
10009c30:	10006c26 	beq	r2,zero,10009de4 <___vfprintf_internal_r+0xf7c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
10009c34:	e0bfb303 	ldbu	r2,-308(fp)
10009c38:	10c00060 	cmpeqi	r3,r2,1
10009c3c:	1800211e 	bne	r3,zero,10009cc4 <___vfprintf_internal_r+0xe5c>
10009c40:	10c000a0 	cmpeqi	r3,r2,2
10009c44:	1800491e 	bne	r3,zero,10009d6c <___vfprintf_internal_r+0xf04>
10009c48:	10005d1e 	bne	r2,zero,10009dc0 <___vfprintf_internal_r+0xf58>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
10009c4c:	94bfffc4 	addi	r18,r18,-1
10009c50:	e0bfb117 	ldw	r2,-316(fp)
10009c54:	108001cc 	andi	r2,r2,7
10009c58:	10800c04 	addi	r2,r2,48
10009c5c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
10009c60:	e0bfb217 	ldw	r2,-312(fp)
10009c64:	1004977a 	slli	r2,r2,29
10009c68:	e0ffb117 	ldw	r3,-316(fp)
10009c6c:	1806d0fa 	srli	r3,r3,3
10009c70:	1884b03a 	or	r2,r3,r2
10009c74:	e0bfb115 	stw	r2,-316(fp)
10009c78:	e0bfb217 	ldw	r2,-312(fp)
10009c7c:	1004d0fa 	srli	r2,r2,3
10009c80:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
10009c84:	e0bfb117 	ldw	r2,-316(fp)
10009c88:	e0ffb217 	ldw	r3,-312(fp)
10009c8c:	10c4b03a 	or	r2,r2,r3
10009c90:	103fee1e 	bne	r2,zero,10009c4c <__alt_data_end+0xf8009c4c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
10009c94:	9880004c 	andi	r2,r19,1
10009c98:	10005026 	beq	r2,zero,10009ddc <___vfprintf_internal_r+0xf74>
10009c9c:	90800003 	ldbu	r2,0(r18)
10009ca0:	10803fcc 	andi	r2,r2,255
10009ca4:	1080201c 	xori	r2,r2,128
10009ca8:	10bfe004 	addi	r2,r2,-128
10009cac:	10800c20 	cmpeqi	r2,r2,48
10009cb0:	10004a1e 	bne	r2,zero,10009ddc <___vfprintf_internal_r+0xf74>
						*--cp = '0';
10009cb4:	94bfffc4 	addi	r18,r18,-1
10009cb8:	00800c04 	movi	r2,48
10009cbc:	90800005 	stb	r2,0(r18)
					break;
10009cc0:	00004606 	br	10009ddc <___vfprintf_internal_r+0xf74>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
10009cc4:	e0bfb217 	ldw	r2,-312(fp)
10009cc8:	10000a1e 	bne	r2,zero,10009cf4 <___vfprintf_internal_r+0xe8c>
10009ccc:	e0bfb217 	ldw	r2,-312(fp)
10009cd0:	1000031e 	bne	r2,zero,10009ce0 <___vfprintf_internal_r+0xe78>
10009cd4:	e0bfb117 	ldw	r2,-316(fp)
10009cd8:	108002a8 	cmpgeui	r2,r2,10
10009cdc:	1000051e 	bne	r2,zero,10009cf4 <___vfprintf_internal_r+0xe8c>
						*--cp = to_char(_uquad);
10009ce0:	94bfffc4 	addi	r18,r18,-1
10009ce4:	e0bfb117 	ldw	r2,-316(fp)
10009ce8:	10800c04 	addi	r2,r2,48
10009cec:	90800005 	stb	r2,0(r18)
						break;
10009cf0:	00003b06 	br	10009de0 <___vfprintf_internal_r+0xf78>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
10009cf4:	94bfffc4 	addi	r18,r18,-1
10009cf8:	e0bfb117 	ldw	r2,-316(fp)
10009cfc:	e0ffb217 	ldw	r3,-312(fp)
10009d00:	01800284 	movi	r6,10
10009d04:	000f883a 	mov	r7,zero
10009d08:	1009883a 	mov	r4,r2
10009d0c:	180b883a 	mov	r5,r3
10009d10:	00142840 	call	10014284 <__umoddi3>
10009d14:	1009883a 	mov	r4,r2
10009d18:	180b883a 	mov	r5,r3
10009d1c:	2005883a 	mov	r2,r4
10009d20:	2807883a 	mov	r3,r5
10009d24:	10800c04 	addi	r2,r2,48
10009d28:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
10009d2c:	e0bfb117 	ldw	r2,-316(fp)
10009d30:	e0ffb217 	ldw	r3,-312(fp)
10009d34:	01800284 	movi	r6,10
10009d38:	000f883a 	mov	r7,zero
10009d3c:	1009883a 	mov	r4,r2
10009d40:	180b883a 	mov	r5,r3
10009d44:	0013c880 	call	10013c88 <__udivdi3>
10009d48:	1009883a 	mov	r4,r2
10009d4c:	180b883a 	mov	r5,r3
10009d50:	e13fb115 	stw	r4,-316(fp)
10009d54:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
10009d58:	e0bfb117 	ldw	r2,-316(fp)
10009d5c:	e0ffb217 	ldw	r3,-312(fp)
10009d60:	10c4b03a 	or	r2,r2,r3
10009d64:	103fe31e 	bne	r2,zero,10009cf4 <__alt_data_end+0xf8009cf4>
					break;
10009d68:	00001d06 	br	10009de0 <___vfprintf_internal_r+0xf78>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
10009d6c:	94bfffc4 	addi	r18,r18,-1
10009d70:	e0bfb117 	ldw	r2,-316(fp)
10009d74:	108003cc 	andi	r2,r2,15
10009d78:	e0ffb717 	ldw	r3,-292(fp)
10009d7c:	1885883a 	add	r2,r3,r2
10009d80:	10800003 	ldbu	r2,0(r2)
10009d84:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
10009d88:	e0bfb217 	ldw	r2,-312(fp)
10009d8c:	1004973a 	slli	r2,r2,28
10009d90:	e0ffb117 	ldw	r3,-316(fp)
10009d94:	1806d13a 	srli	r3,r3,4
10009d98:	1884b03a 	or	r2,r3,r2
10009d9c:	e0bfb115 	stw	r2,-316(fp)
10009da0:	e0bfb217 	ldw	r2,-312(fp)
10009da4:	1004d13a 	srli	r2,r2,4
10009da8:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
10009dac:	e0bfb117 	ldw	r2,-316(fp)
10009db0:	e0ffb217 	ldw	r3,-312(fp)
10009db4:	10c4b03a 	or	r2,r2,r3
10009db8:	103fec1e 	bne	r2,zero,10009d6c <__alt_data_end+0xf8009d6c>
					break;
10009dbc:	00000806 	br	10009de0 <___vfprintf_internal_r+0xf78>

				default:
					cp = "bug in vfprintf: bad base";
10009dc0:	04840374 	movhi	r18,4109
10009dc4:	94bd2704 	addi	r18,r18,-2916
					size = strlen (cp);
10009dc8:	9009883a 	mov	r4,r18
10009dcc:	00088880 	call	10008888 <strlen>
10009dd0:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
10009dd4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
10009dd8:	00001906 	br	10009e40 <___vfprintf_internal_r+0xfd8>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
10009ddc:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
10009de0:	00000706 	br	10009e00 <___vfprintf_internal_r+0xf98>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
10009de4:	e0bfb303 	ldbu	r2,-308(fp)
10009de8:	1000051e 	bne	r2,zero,10009e00 <___vfprintf_internal_r+0xf98>
10009dec:	9880004c 	andi	r2,r19,1
10009df0:	10000326 	beq	r2,zero,10009e00 <___vfprintf_internal_r+0xf98>
                         *--cp = '0';
10009df4:	94bfffc4 	addi	r18,r18,-1
10009df8:	00800c04 	movi	r2,48
10009dfc:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
10009e00:	e0bfdb04 	addi	r2,fp,-148
10009e04:	10800a04 	addi	r2,r2,40
10009e08:	1007883a 	mov	r3,r2
10009e0c:	9005883a 	mov	r2,r18
10009e10:	1885c83a 	sub	r2,r3,r2
10009e14:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
10009e18:	00000906 	br	10009e40 <___vfprintf_internal_r+0xfd8>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
10009e1c:	a003dc26 	beq	r20,zero,1000ad90 <___vfprintf_internal_r+0x1f28>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
10009e20:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
10009e24:	a005883a 	mov	r2,r20
10009e28:	90800005 	stb	r2,0(r18)
			size = 1;
10009e2c:	00800044 	movi	r2,1
10009e30:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
10009e34:	e03fc105 	stb	zero,-252(fp)
			break;
10009e38:	00000106 	br	10009e40 <___vfprintf_internal_r+0xfd8>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
10009e3c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
10009e40:	e0ffb417 	ldw	r3,-304(fp)
10009e44:	e0bfb617 	ldw	r2,-296(fp)
10009e48:	10c0010e 	bge	r2,r3,10009e50 <___vfprintf_internal_r+0xfe8>
10009e4c:	1805883a 	mov	r2,r3
10009e50:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
10009e54:	e0bfc103 	ldbu	r2,-252(fp)
10009e58:	10803fcc 	andi	r2,r2,255
10009e5c:	1080201c 	xori	r2,r2,128
10009e60:	10bfe004 	addi	r2,r2,-128
10009e64:	10000326 	beq	r2,zero,10009e74 <___vfprintf_internal_r+0x100c>
			realsz++;
10009e68:	e0bfb517 	ldw	r2,-300(fp)
10009e6c:	10800044 	addi	r2,r2,1
10009e70:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
10009e74:	9880008c 	andi	r2,r19,2
10009e78:	10000326 	beq	r2,zero,10009e88 <___vfprintf_internal_r+0x1020>
			realsz+= 2;
10009e7c:	e0bfb517 	ldw	r2,-300(fp)
10009e80:	10800084 	addi	r2,r2,2
10009e84:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
10009e88:	9880210c 	andi	r2,r19,132
10009e8c:	1000351e 	bne	r2,zero,10009f64 <___vfprintf_internal_r+0x10fc>
			PAD (width - realsz, blanks);
10009e90:	e0ffad17 	ldw	r3,-332(fp)
10009e94:	e0bfb517 	ldw	r2,-300(fp)
10009e98:	18a1c83a 	sub	r16,r3,r2
10009e9c:	0400310e 	bge	zero,r16,10009f64 <___vfprintf_internal_r+0x10fc>
10009ea0:	00001706 	br	10009f00 <___vfprintf_internal_r+0x1098>
10009ea4:	00840374 	movhi	r2,4109
10009ea8:	10bd2e84 	addi	r2,r2,-2886
10009eac:	88800015 	stw	r2,0(r17)
10009eb0:	00800404 	movi	r2,16
10009eb4:	88800115 	stw	r2,4(r17)
10009eb8:	e0bfca17 	ldw	r2,-216(fp)
10009ebc:	10800404 	addi	r2,r2,16
10009ec0:	e0bfca15 	stw	r2,-216(fp)
10009ec4:	8c400204 	addi	r17,r17,8
10009ec8:	e0bfc917 	ldw	r2,-220(fp)
10009ecc:	10800044 	addi	r2,r2,1
10009ed0:	e0bfc915 	stw	r2,-220(fp)
10009ed4:	e0bfc917 	ldw	r2,-220(fp)
10009ed8:	10800210 	cmplti	r2,r2,8
10009edc:	1000071e 	bne	r2,zero,10009efc <___vfprintf_internal_r+0x1094>
10009ee0:	e0bfc804 	addi	r2,fp,-224
10009ee4:	100d883a 	mov	r6,r2
10009ee8:	e17fe717 	ldw	r5,-100(fp)
10009eec:	e13fe617 	ldw	r4,-104(fp)
10009ef0:	0011b680 	call	10011b68 <__sprint_r>
10009ef4:	1003b41e 	bne	r2,zero,1000adc8 <___vfprintf_internal_r+0x1f60>
10009ef8:	e47fcb04 	addi	r17,fp,-212
10009efc:	843ffc04 	addi	r16,r16,-16
10009f00:	80800448 	cmpgei	r2,r16,17
10009f04:	103fe71e 	bne	r2,zero,10009ea4 <__alt_data_end+0xf8009ea4>
10009f08:	00840374 	movhi	r2,4109
10009f0c:	10bd2e84 	addi	r2,r2,-2886
10009f10:	88800015 	stw	r2,0(r17)
10009f14:	8005883a 	mov	r2,r16
10009f18:	88800115 	stw	r2,4(r17)
10009f1c:	e0bfca17 	ldw	r2,-216(fp)
10009f20:	8007883a 	mov	r3,r16
10009f24:	10c5883a 	add	r2,r2,r3
10009f28:	e0bfca15 	stw	r2,-216(fp)
10009f2c:	8c400204 	addi	r17,r17,8
10009f30:	e0bfc917 	ldw	r2,-220(fp)
10009f34:	10800044 	addi	r2,r2,1
10009f38:	e0bfc915 	stw	r2,-220(fp)
10009f3c:	e0bfc917 	ldw	r2,-220(fp)
10009f40:	10800210 	cmplti	r2,r2,8
10009f44:	1000071e 	bne	r2,zero,10009f64 <___vfprintf_internal_r+0x10fc>
10009f48:	e0bfc804 	addi	r2,fp,-224
10009f4c:	100d883a 	mov	r6,r2
10009f50:	e17fe717 	ldw	r5,-100(fp)
10009f54:	e13fe617 	ldw	r4,-104(fp)
10009f58:	0011b680 	call	10011b68 <__sprint_r>
10009f5c:	10039c1e 	bne	r2,zero,1000add0 <___vfprintf_internal_r+0x1f68>
10009f60:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
10009f64:	e0bfc103 	ldbu	r2,-252(fp)
10009f68:	10803fcc 	andi	r2,r2,255
10009f6c:	1080201c 	xori	r2,r2,128
10009f70:	10bfe004 	addi	r2,r2,-128
10009f74:	10001526 	beq	r2,zero,10009fcc <___vfprintf_internal_r+0x1164>
			PRINT (&sign, 1);
10009f78:	e0bfc104 	addi	r2,fp,-252
10009f7c:	88800015 	stw	r2,0(r17)
10009f80:	00800044 	movi	r2,1
10009f84:	88800115 	stw	r2,4(r17)
10009f88:	e0bfca17 	ldw	r2,-216(fp)
10009f8c:	10800044 	addi	r2,r2,1
10009f90:	e0bfca15 	stw	r2,-216(fp)
10009f94:	8c400204 	addi	r17,r17,8
10009f98:	e0bfc917 	ldw	r2,-220(fp)
10009f9c:	10800044 	addi	r2,r2,1
10009fa0:	e0bfc915 	stw	r2,-220(fp)
10009fa4:	e0bfc917 	ldw	r2,-220(fp)
10009fa8:	10800210 	cmplti	r2,r2,8
10009fac:	1000071e 	bne	r2,zero,10009fcc <___vfprintf_internal_r+0x1164>
10009fb0:	e0bfc804 	addi	r2,fp,-224
10009fb4:	100d883a 	mov	r6,r2
10009fb8:	e17fe717 	ldw	r5,-100(fp)
10009fbc:	e13fe617 	ldw	r4,-104(fp)
10009fc0:	0011b680 	call	10011b68 <__sprint_r>
10009fc4:	1003841e 	bne	r2,zero,1000add8 <___vfprintf_internal_r+0x1f70>
10009fc8:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
10009fcc:	9880008c 	andi	r2,r19,2
10009fd0:	10001526 	beq	r2,zero,1000a028 <___vfprintf_internal_r+0x11c0>
			PRINT (ox, 2);
10009fd4:	e0bfe504 	addi	r2,fp,-108
10009fd8:	88800015 	stw	r2,0(r17)
10009fdc:	00800084 	movi	r2,2
10009fe0:	88800115 	stw	r2,4(r17)
10009fe4:	e0bfca17 	ldw	r2,-216(fp)
10009fe8:	10800084 	addi	r2,r2,2
10009fec:	e0bfca15 	stw	r2,-216(fp)
10009ff0:	8c400204 	addi	r17,r17,8
10009ff4:	e0bfc917 	ldw	r2,-220(fp)
10009ff8:	10800044 	addi	r2,r2,1
10009ffc:	e0bfc915 	stw	r2,-220(fp)
1000a000:	e0bfc917 	ldw	r2,-220(fp)
1000a004:	10800210 	cmplti	r2,r2,8
1000a008:	1000071e 	bne	r2,zero,1000a028 <___vfprintf_internal_r+0x11c0>
1000a00c:	e0bfc804 	addi	r2,fp,-224
1000a010:	100d883a 	mov	r6,r2
1000a014:	e17fe717 	ldw	r5,-100(fp)
1000a018:	e13fe617 	ldw	r4,-104(fp)
1000a01c:	0011b680 	call	10011b68 <__sprint_r>
1000a020:	10036f1e 	bne	r2,zero,1000ade0 <___vfprintf_internal_r+0x1f78>
1000a024:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
1000a028:	9880210c 	andi	r2,r19,132
1000a02c:	10802018 	cmpnei	r2,r2,128
1000a030:	1000351e 	bne	r2,zero,1000a108 <___vfprintf_internal_r+0x12a0>
			PAD (width - realsz, zeroes);
1000a034:	e0ffad17 	ldw	r3,-332(fp)
1000a038:	e0bfb517 	ldw	r2,-300(fp)
1000a03c:	18a1c83a 	sub	r16,r3,r2
1000a040:	0400310e 	bge	zero,r16,1000a108 <___vfprintf_internal_r+0x12a0>
1000a044:	00001706 	br	1000a0a4 <___vfprintf_internal_r+0x123c>
1000a048:	00840374 	movhi	r2,4109
1000a04c:	10bd3284 	addi	r2,r2,-2870
1000a050:	88800015 	stw	r2,0(r17)
1000a054:	00800404 	movi	r2,16
1000a058:	88800115 	stw	r2,4(r17)
1000a05c:	e0bfca17 	ldw	r2,-216(fp)
1000a060:	10800404 	addi	r2,r2,16
1000a064:	e0bfca15 	stw	r2,-216(fp)
1000a068:	8c400204 	addi	r17,r17,8
1000a06c:	e0bfc917 	ldw	r2,-220(fp)
1000a070:	10800044 	addi	r2,r2,1
1000a074:	e0bfc915 	stw	r2,-220(fp)
1000a078:	e0bfc917 	ldw	r2,-220(fp)
1000a07c:	10800210 	cmplti	r2,r2,8
1000a080:	1000071e 	bne	r2,zero,1000a0a0 <___vfprintf_internal_r+0x1238>
1000a084:	e0bfc804 	addi	r2,fp,-224
1000a088:	100d883a 	mov	r6,r2
1000a08c:	e17fe717 	ldw	r5,-100(fp)
1000a090:	e13fe617 	ldw	r4,-104(fp)
1000a094:	0011b680 	call	10011b68 <__sprint_r>
1000a098:	1003531e 	bne	r2,zero,1000ade8 <___vfprintf_internal_r+0x1f80>
1000a09c:	e47fcb04 	addi	r17,fp,-212
1000a0a0:	843ffc04 	addi	r16,r16,-16
1000a0a4:	80800448 	cmpgei	r2,r16,17
1000a0a8:	103fe71e 	bne	r2,zero,1000a048 <__alt_data_end+0xf800a048>
1000a0ac:	00840374 	movhi	r2,4109
1000a0b0:	10bd3284 	addi	r2,r2,-2870
1000a0b4:	88800015 	stw	r2,0(r17)
1000a0b8:	8005883a 	mov	r2,r16
1000a0bc:	88800115 	stw	r2,4(r17)
1000a0c0:	e0bfca17 	ldw	r2,-216(fp)
1000a0c4:	8007883a 	mov	r3,r16
1000a0c8:	10c5883a 	add	r2,r2,r3
1000a0cc:	e0bfca15 	stw	r2,-216(fp)
1000a0d0:	8c400204 	addi	r17,r17,8
1000a0d4:	e0bfc917 	ldw	r2,-220(fp)
1000a0d8:	10800044 	addi	r2,r2,1
1000a0dc:	e0bfc915 	stw	r2,-220(fp)
1000a0e0:	e0bfc917 	ldw	r2,-220(fp)
1000a0e4:	10800210 	cmplti	r2,r2,8
1000a0e8:	1000071e 	bne	r2,zero,1000a108 <___vfprintf_internal_r+0x12a0>
1000a0ec:	e0bfc804 	addi	r2,fp,-224
1000a0f0:	100d883a 	mov	r6,r2
1000a0f4:	e17fe717 	ldw	r5,-100(fp)
1000a0f8:	e13fe617 	ldw	r4,-104(fp)
1000a0fc:	0011b680 	call	10011b68 <__sprint_r>
1000a100:	10033b1e 	bne	r2,zero,1000adf0 <___vfprintf_internal_r+0x1f88>
1000a104:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
1000a108:	e0ffb417 	ldw	r3,-304(fp)
1000a10c:	e0bfb617 	ldw	r2,-296(fp)
1000a110:	18a1c83a 	sub	r16,r3,r2
1000a114:	0400310e 	bge	zero,r16,1000a1dc <___vfprintf_internal_r+0x1374>
1000a118:	00001706 	br	1000a178 <___vfprintf_internal_r+0x1310>
1000a11c:	00840374 	movhi	r2,4109
1000a120:	10bd3284 	addi	r2,r2,-2870
1000a124:	88800015 	stw	r2,0(r17)
1000a128:	00800404 	movi	r2,16
1000a12c:	88800115 	stw	r2,4(r17)
1000a130:	e0bfca17 	ldw	r2,-216(fp)
1000a134:	10800404 	addi	r2,r2,16
1000a138:	e0bfca15 	stw	r2,-216(fp)
1000a13c:	8c400204 	addi	r17,r17,8
1000a140:	e0bfc917 	ldw	r2,-220(fp)
1000a144:	10800044 	addi	r2,r2,1
1000a148:	e0bfc915 	stw	r2,-220(fp)
1000a14c:	e0bfc917 	ldw	r2,-220(fp)
1000a150:	10800210 	cmplti	r2,r2,8
1000a154:	1000071e 	bne	r2,zero,1000a174 <___vfprintf_internal_r+0x130c>
1000a158:	e0bfc804 	addi	r2,fp,-224
1000a15c:	100d883a 	mov	r6,r2
1000a160:	e17fe717 	ldw	r5,-100(fp)
1000a164:	e13fe617 	ldw	r4,-104(fp)
1000a168:	0011b680 	call	10011b68 <__sprint_r>
1000a16c:	1003221e 	bne	r2,zero,1000adf8 <___vfprintf_internal_r+0x1f90>
1000a170:	e47fcb04 	addi	r17,fp,-212
1000a174:	843ffc04 	addi	r16,r16,-16
1000a178:	80800448 	cmpgei	r2,r16,17
1000a17c:	103fe71e 	bne	r2,zero,1000a11c <__alt_data_end+0xf800a11c>
1000a180:	00840374 	movhi	r2,4109
1000a184:	10bd3284 	addi	r2,r2,-2870
1000a188:	88800015 	stw	r2,0(r17)
1000a18c:	8005883a 	mov	r2,r16
1000a190:	88800115 	stw	r2,4(r17)
1000a194:	e0bfca17 	ldw	r2,-216(fp)
1000a198:	8007883a 	mov	r3,r16
1000a19c:	10c5883a 	add	r2,r2,r3
1000a1a0:	e0bfca15 	stw	r2,-216(fp)
1000a1a4:	8c400204 	addi	r17,r17,8
1000a1a8:	e0bfc917 	ldw	r2,-220(fp)
1000a1ac:	10800044 	addi	r2,r2,1
1000a1b0:	e0bfc915 	stw	r2,-220(fp)
1000a1b4:	e0bfc917 	ldw	r2,-220(fp)
1000a1b8:	10800210 	cmplti	r2,r2,8
1000a1bc:	1000071e 	bne	r2,zero,1000a1dc <___vfprintf_internal_r+0x1374>
1000a1c0:	e0bfc804 	addi	r2,fp,-224
1000a1c4:	100d883a 	mov	r6,r2
1000a1c8:	e17fe717 	ldw	r5,-100(fp)
1000a1cc:	e13fe617 	ldw	r4,-104(fp)
1000a1d0:	0011b680 	call	10011b68 <__sprint_r>
1000a1d4:	10030a1e 	bne	r2,zero,1000ae00 <___vfprintf_internal_r+0x1f98>
1000a1d8:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
1000a1dc:	9880400c 	andi	r2,r19,256
1000a1e0:	1000161e 	bne	r2,zero,1000a23c <___vfprintf_internal_r+0x13d4>
			PRINT (cp, size);
1000a1e4:	8c800015 	stw	r18,0(r17)
1000a1e8:	e0bfb617 	ldw	r2,-296(fp)
1000a1ec:	88800115 	stw	r2,4(r17)
1000a1f0:	e0ffca17 	ldw	r3,-216(fp)
1000a1f4:	e0bfb617 	ldw	r2,-296(fp)
1000a1f8:	1885883a 	add	r2,r3,r2
1000a1fc:	e0bfca15 	stw	r2,-216(fp)
1000a200:	8c400204 	addi	r17,r17,8
1000a204:	e0bfc917 	ldw	r2,-220(fp)
1000a208:	10800044 	addi	r2,r2,1
1000a20c:	e0bfc915 	stw	r2,-220(fp)
1000a210:	e0bfc917 	ldw	r2,-220(fp)
1000a214:	10800210 	cmplti	r2,r2,8
1000a218:	10028c1e 	bne	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
1000a21c:	e0bfc804 	addi	r2,fp,-224
1000a220:	100d883a 	mov	r6,r2
1000a224:	e17fe717 	ldw	r5,-100(fp)
1000a228:	e13fe617 	ldw	r4,-104(fp)
1000a22c:	0011b680 	call	10011b68 <__sprint_r>
1000a230:	1002f51e 	bne	r2,zero,1000ae08 <___vfprintf_internal_r+0x1fa0>
1000a234:	e47fcb04 	addi	r17,fp,-212
1000a238:	00028406 	br	1000ac4c <___vfprintf_internal_r+0x1de4>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
1000a23c:	a0801990 	cmplti	r2,r20,102
1000a240:	1001d11e 	bne	r2,zero,1000a988 <___vfprintf_internal_r+0x1b20>
				if (_fpvalue == 0) {
1000a244:	e0bfc217 	ldw	r2,-248(fp)
1000a248:	e0ffc317 	ldw	r3,-244(fp)
1000a24c:	000d883a 	mov	r6,zero
1000a250:	000f883a 	mov	r7,zero
1000a254:	1009883a 	mov	r4,r2
1000a258:	180b883a 	mov	r5,r3
1000a25c:	00152180 	call	10015218 <__eqdf2>
1000a260:	1000661e 	bne	r2,zero,1000a3fc <___vfprintf_internal_r+0x1594>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
1000a264:	00840374 	movhi	r2,4109
1000a268:	10bd2e04 	addi	r2,r2,-2888
1000a26c:	88800015 	stw	r2,0(r17)
1000a270:	00800044 	movi	r2,1
1000a274:	88800115 	stw	r2,4(r17)
1000a278:	e0bfca17 	ldw	r2,-216(fp)
1000a27c:	10800044 	addi	r2,r2,1
1000a280:	e0bfca15 	stw	r2,-216(fp)
1000a284:	8c400204 	addi	r17,r17,8
1000a288:	e0bfc917 	ldw	r2,-220(fp)
1000a28c:	10800044 	addi	r2,r2,1
1000a290:	e0bfc915 	stw	r2,-220(fp)
1000a294:	e0bfc917 	ldw	r2,-220(fp)
1000a298:	10800210 	cmplti	r2,r2,8
1000a29c:	1000071e 	bne	r2,zero,1000a2bc <___vfprintf_internal_r+0x1454>
1000a2a0:	e0bfc804 	addi	r2,fp,-224
1000a2a4:	100d883a 	mov	r6,r2
1000a2a8:	e17fe717 	ldw	r5,-100(fp)
1000a2ac:	e13fe617 	ldw	r4,-104(fp)
1000a2b0:	0011b680 	call	10011b68 <__sprint_r>
1000a2b4:	1002d61e 	bne	r2,zero,1000ae10 <___vfprintf_internal_r+0x1fa8>
1000a2b8:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
1000a2bc:	e0ffc417 	ldw	r3,-240(fp)
1000a2c0:	e0bfc717 	ldw	r2,-228(fp)
1000a2c4:	18800216 	blt	r3,r2,1000a2d0 <___vfprintf_internal_r+0x1468>
1000a2c8:	9880004c 	andi	r2,r19,1
1000a2cc:	10025f26 	beq	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
1000a2d0:	e0bfbb17 	ldw	r2,-276(fp)
1000a2d4:	88800015 	stw	r2,0(r17)
1000a2d8:	e0bfbc17 	ldw	r2,-272(fp)
1000a2dc:	88800115 	stw	r2,4(r17)
1000a2e0:	e0ffca17 	ldw	r3,-216(fp)
1000a2e4:	e0bfbc17 	ldw	r2,-272(fp)
1000a2e8:	1885883a 	add	r2,r3,r2
1000a2ec:	e0bfca15 	stw	r2,-216(fp)
1000a2f0:	8c400204 	addi	r17,r17,8
1000a2f4:	e0bfc917 	ldw	r2,-220(fp)
1000a2f8:	10800044 	addi	r2,r2,1
1000a2fc:	e0bfc915 	stw	r2,-220(fp)
1000a300:	e0bfc917 	ldw	r2,-220(fp)
1000a304:	10800210 	cmplti	r2,r2,8
1000a308:	1000071e 	bne	r2,zero,1000a328 <___vfprintf_internal_r+0x14c0>
1000a30c:	e0bfc804 	addi	r2,fp,-224
1000a310:	100d883a 	mov	r6,r2
1000a314:	e17fe717 	ldw	r5,-100(fp)
1000a318:	e13fe617 	ldw	r4,-104(fp)
1000a31c:	0011b680 	call	10011b68 <__sprint_r>
1000a320:	1002bd1e 	bne	r2,zero,1000ae18 <___vfprintf_internal_r+0x1fb0>
1000a324:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
1000a328:	e0bfc717 	ldw	r2,-228(fp)
1000a32c:	143fffc4 	addi	r16,r2,-1
1000a330:	0402460e 	bge	zero,r16,1000ac4c <___vfprintf_internal_r+0x1de4>
1000a334:	00001706 	br	1000a394 <___vfprintf_internal_r+0x152c>
1000a338:	00840374 	movhi	r2,4109
1000a33c:	10bd3284 	addi	r2,r2,-2870
1000a340:	88800015 	stw	r2,0(r17)
1000a344:	00800404 	movi	r2,16
1000a348:	88800115 	stw	r2,4(r17)
1000a34c:	e0bfca17 	ldw	r2,-216(fp)
1000a350:	10800404 	addi	r2,r2,16
1000a354:	e0bfca15 	stw	r2,-216(fp)
1000a358:	8c400204 	addi	r17,r17,8
1000a35c:	e0bfc917 	ldw	r2,-220(fp)
1000a360:	10800044 	addi	r2,r2,1
1000a364:	e0bfc915 	stw	r2,-220(fp)
1000a368:	e0bfc917 	ldw	r2,-220(fp)
1000a36c:	10800210 	cmplti	r2,r2,8
1000a370:	1000071e 	bne	r2,zero,1000a390 <___vfprintf_internal_r+0x1528>
1000a374:	e0bfc804 	addi	r2,fp,-224
1000a378:	100d883a 	mov	r6,r2
1000a37c:	e17fe717 	ldw	r5,-100(fp)
1000a380:	e13fe617 	ldw	r4,-104(fp)
1000a384:	0011b680 	call	10011b68 <__sprint_r>
1000a388:	1002a51e 	bne	r2,zero,1000ae20 <___vfprintf_internal_r+0x1fb8>
1000a38c:	e47fcb04 	addi	r17,fp,-212
1000a390:	843ffc04 	addi	r16,r16,-16
1000a394:	80800448 	cmpgei	r2,r16,17
1000a398:	103fe71e 	bne	r2,zero,1000a338 <__alt_data_end+0xf800a338>
1000a39c:	00840374 	movhi	r2,4109
1000a3a0:	10bd3284 	addi	r2,r2,-2870
1000a3a4:	88800015 	stw	r2,0(r17)
1000a3a8:	8005883a 	mov	r2,r16
1000a3ac:	88800115 	stw	r2,4(r17)
1000a3b0:	e0bfca17 	ldw	r2,-216(fp)
1000a3b4:	8007883a 	mov	r3,r16
1000a3b8:	10c5883a 	add	r2,r2,r3
1000a3bc:	e0bfca15 	stw	r2,-216(fp)
1000a3c0:	8c400204 	addi	r17,r17,8
1000a3c4:	e0bfc917 	ldw	r2,-220(fp)
1000a3c8:	10800044 	addi	r2,r2,1
1000a3cc:	e0bfc915 	stw	r2,-220(fp)
1000a3d0:	e0bfc917 	ldw	r2,-220(fp)
1000a3d4:	10800210 	cmplti	r2,r2,8
1000a3d8:	10021c1e 	bne	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
1000a3dc:	e0bfc804 	addi	r2,fp,-224
1000a3e0:	100d883a 	mov	r6,r2
1000a3e4:	e17fe717 	ldw	r5,-100(fp)
1000a3e8:	e13fe617 	ldw	r4,-104(fp)
1000a3ec:	0011b680 	call	10011b68 <__sprint_r>
1000a3f0:	10028d1e 	bne	r2,zero,1000ae28 <___vfprintf_internal_r+0x1fc0>
1000a3f4:	e47fcb04 	addi	r17,fp,-212
1000a3f8:	00021406 	br	1000ac4c <___vfprintf_internal_r+0x1de4>
					}
				} else if (expt <= 0) {
1000a3fc:	e0bfc417 	ldw	r2,-240(fp)
1000a400:	00807c16 	blt	zero,r2,1000a5f4 <___vfprintf_internal_r+0x178c>
					PRINT ("0", 1);
1000a404:	00840374 	movhi	r2,4109
1000a408:	10bd2e04 	addi	r2,r2,-2888
1000a40c:	88800015 	stw	r2,0(r17)
1000a410:	00800044 	movi	r2,1
1000a414:	88800115 	stw	r2,4(r17)
1000a418:	e0bfca17 	ldw	r2,-216(fp)
1000a41c:	10800044 	addi	r2,r2,1
1000a420:	e0bfca15 	stw	r2,-216(fp)
1000a424:	8c400204 	addi	r17,r17,8
1000a428:	e0bfc917 	ldw	r2,-220(fp)
1000a42c:	10800044 	addi	r2,r2,1
1000a430:	e0bfc915 	stw	r2,-220(fp)
1000a434:	e0bfc917 	ldw	r2,-220(fp)
1000a438:	10800210 	cmplti	r2,r2,8
1000a43c:	1000071e 	bne	r2,zero,1000a45c <___vfprintf_internal_r+0x15f4>
1000a440:	e0bfc804 	addi	r2,fp,-224
1000a444:	100d883a 	mov	r6,r2
1000a448:	e17fe717 	ldw	r5,-100(fp)
1000a44c:	e13fe617 	ldw	r4,-104(fp)
1000a450:	0011b680 	call	10011b68 <__sprint_r>
1000a454:	1002761e 	bne	r2,zero,1000ae30 <___vfprintf_internal_r+0x1fc8>
1000a458:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
1000a45c:	e0bfc417 	ldw	r2,-240(fp)
1000a460:	1000041e 	bne	r2,zero,1000a474 <___vfprintf_internal_r+0x160c>
1000a464:	e0bfc717 	ldw	r2,-228(fp)
1000a468:	1000021e 	bne	r2,zero,1000a474 <___vfprintf_internal_r+0x160c>
1000a46c:	9880004c 	andi	r2,r19,1
1000a470:	1001f626 	beq	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
1000a474:	e0bfbb17 	ldw	r2,-276(fp)
1000a478:	88800015 	stw	r2,0(r17)
1000a47c:	e0bfbc17 	ldw	r2,-272(fp)
1000a480:	88800115 	stw	r2,4(r17)
1000a484:	e0ffca17 	ldw	r3,-216(fp)
1000a488:	e0bfbc17 	ldw	r2,-272(fp)
1000a48c:	1885883a 	add	r2,r3,r2
1000a490:	e0bfca15 	stw	r2,-216(fp)
1000a494:	8c400204 	addi	r17,r17,8
1000a498:	e0bfc917 	ldw	r2,-220(fp)
1000a49c:	10800044 	addi	r2,r2,1
1000a4a0:	e0bfc915 	stw	r2,-220(fp)
1000a4a4:	e0bfc917 	ldw	r2,-220(fp)
1000a4a8:	10800210 	cmplti	r2,r2,8
1000a4ac:	1000071e 	bne	r2,zero,1000a4cc <___vfprintf_internal_r+0x1664>
1000a4b0:	e0bfc804 	addi	r2,fp,-224
1000a4b4:	100d883a 	mov	r6,r2
1000a4b8:	e17fe717 	ldw	r5,-100(fp)
1000a4bc:	e13fe617 	ldw	r4,-104(fp)
1000a4c0:	0011b680 	call	10011b68 <__sprint_r>
1000a4c4:	10025c1e 	bne	r2,zero,1000ae38 <___vfprintf_internal_r+0x1fd0>
1000a4c8:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
1000a4cc:	e0bfc417 	ldw	r2,-240(fp)
1000a4d0:	00a1c83a 	sub	r16,zero,r2
1000a4d4:	0400310e 	bge	zero,r16,1000a59c <___vfprintf_internal_r+0x1734>
1000a4d8:	00001706 	br	1000a538 <___vfprintf_internal_r+0x16d0>
1000a4dc:	00840374 	movhi	r2,4109
1000a4e0:	10bd3284 	addi	r2,r2,-2870
1000a4e4:	88800015 	stw	r2,0(r17)
1000a4e8:	00800404 	movi	r2,16
1000a4ec:	88800115 	stw	r2,4(r17)
1000a4f0:	e0bfca17 	ldw	r2,-216(fp)
1000a4f4:	10800404 	addi	r2,r2,16
1000a4f8:	e0bfca15 	stw	r2,-216(fp)
1000a4fc:	8c400204 	addi	r17,r17,8
1000a500:	e0bfc917 	ldw	r2,-220(fp)
1000a504:	10800044 	addi	r2,r2,1
1000a508:	e0bfc915 	stw	r2,-220(fp)
1000a50c:	e0bfc917 	ldw	r2,-220(fp)
1000a510:	10800210 	cmplti	r2,r2,8
1000a514:	1000071e 	bne	r2,zero,1000a534 <___vfprintf_internal_r+0x16cc>
1000a518:	e0bfc804 	addi	r2,fp,-224
1000a51c:	100d883a 	mov	r6,r2
1000a520:	e17fe717 	ldw	r5,-100(fp)
1000a524:	e13fe617 	ldw	r4,-104(fp)
1000a528:	0011b680 	call	10011b68 <__sprint_r>
1000a52c:	1002441e 	bne	r2,zero,1000ae40 <___vfprintf_internal_r+0x1fd8>
1000a530:	e47fcb04 	addi	r17,fp,-212
1000a534:	843ffc04 	addi	r16,r16,-16
1000a538:	80800448 	cmpgei	r2,r16,17
1000a53c:	103fe71e 	bne	r2,zero,1000a4dc <__alt_data_end+0xf800a4dc>
1000a540:	00840374 	movhi	r2,4109
1000a544:	10bd3284 	addi	r2,r2,-2870
1000a548:	88800015 	stw	r2,0(r17)
1000a54c:	8005883a 	mov	r2,r16
1000a550:	88800115 	stw	r2,4(r17)
1000a554:	e0bfca17 	ldw	r2,-216(fp)
1000a558:	8007883a 	mov	r3,r16
1000a55c:	10c5883a 	add	r2,r2,r3
1000a560:	e0bfca15 	stw	r2,-216(fp)
1000a564:	8c400204 	addi	r17,r17,8
1000a568:	e0bfc917 	ldw	r2,-220(fp)
1000a56c:	10800044 	addi	r2,r2,1
1000a570:	e0bfc915 	stw	r2,-220(fp)
1000a574:	e0bfc917 	ldw	r2,-220(fp)
1000a578:	10800210 	cmplti	r2,r2,8
1000a57c:	1000071e 	bne	r2,zero,1000a59c <___vfprintf_internal_r+0x1734>
1000a580:	e0bfc804 	addi	r2,fp,-224
1000a584:	100d883a 	mov	r6,r2
1000a588:	e17fe717 	ldw	r5,-100(fp)
1000a58c:	e13fe617 	ldw	r4,-104(fp)
1000a590:	0011b680 	call	10011b68 <__sprint_r>
1000a594:	10022c1e 	bne	r2,zero,1000ae48 <___vfprintf_internal_r+0x1fe0>
1000a598:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
1000a59c:	8c800015 	stw	r18,0(r17)
1000a5a0:	e0bfc717 	ldw	r2,-228(fp)
1000a5a4:	88800115 	stw	r2,4(r17)
1000a5a8:	e0bfca17 	ldw	r2,-216(fp)
1000a5ac:	e0ffc717 	ldw	r3,-228(fp)
1000a5b0:	10c5883a 	add	r2,r2,r3
1000a5b4:	e0bfca15 	stw	r2,-216(fp)
1000a5b8:	8c400204 	addi	r17,r17,8
1000a5bc:	e0bfc917 	ldw	r2,-220(fp)
1000a5c0:	10800044 	addi	r2,r2,1
1000a5c4:	e0bfc915 	stw	r2,-220(fp)
1000a5c8:	e0bfc917 	ldw	r2,-220(fp)
1000a5cc:	10800210 	cmplti	r2,r2,8
1000a5d0:	10019e1e 	bne	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
1000a5d4:	e0bfc804 	addi	r2,fp,-224
1000a5d8:	100d883a 	mov	r6,r2
1000a5dc:	e17fe717 	ldw	r5,-100(fp)
1000a5e0:	e13fe617 	ldw	r4,-104(fp)
1000a5e4:	0011b680 	call	10011b68 <__sprint_r>
1000a5e8:	1002191e 	bne	r2,zero,1000ae50 <___vfprintf_internal_r+0x1fe8>
1000a5ec:	e47fcb04 	addi	r17,fp,-212
1000a5f0:	00019606 	br	1000ac4c <___vfprintf_internal_r+0x1de4>
					}
				} else {
					char *convbuf = cp;
1000a5f4:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
1000a5f8:	e0bfc717 	ldw	r2,-228(fp)
1000a5fc:	1007883a 	mov	r3,r2
1000a600:	e0bfc017 	ldw	r2,-256(fp)
1000a604:	10c5883a 	add	r2,r2,r3
1000a608:	1007883a 	mov	r3,r2
1000a60c:	9005883a 	mov	r2,r18
1000a610:	1885c83a 	sub	r2,r3,r2
1000a614:	e0bfb915 	stw	r2,-284(fp)
1000a618:	e0bfb917 	ldw	r2,-284(fp)
1000a61c:	e0ffb017 	ldw	r3,-320(fp)
1000a620:	1880020e 	bge	r3,r2,1000a62c <___vfprintf_internal_r+0x17c4>
1000a624:	e0bfb017 	ldw	r2,-320(fp)
1000a628:	e0bfb915 	stw	r2,-284(fp)
1000a62c:	e0bfb917 	ldw	r2,-284(fp)
1000a630:	0080150e 	bge	zero,r2,1000a688 <___vfprintf_internal_r+0x1820>
1000a634:	8c800015 	stw	r18,0(r17)
1000a638:	e0bfb917 	ldw	r2,-284(fp)
1000a63c:	88800115 	stw	r2,4(r17)
1000a640:	e0ffca17 	ldw	r3,-216(fp)
1000a644:	e0bfb917 	ldw	r2,-284(fp)
1000a648:	1885883a 	add	r2,r3,r2
1000a64c:	e0bfca15 	stw	r2,-216(fp)
1000a650:	8c400204 	addi	r17,r17,8
1000a654:	e0bfc917 	ldw	r2,-220(fp)
1000a658:	10800044 	addi	r2,r2,1
1000a65c:	e0bfc915 	stw	r2,-220(fp)
1000a660:	e0bfc917 	ldw	r2,-220(fp)
1000a664:	10800210 	cmplti	r2,r2,8
1000a668:	1000071e 	bne	r2,zero,1000a688 <___vfprintf_internal_r+0x1820>
1000a66c:	e0bfc804 	addi	r2,fp,-224
1000a670:	100d883a 	mov	r6,r2
1000a674:	e17fe717 	ldw	r5,-100(fp)
1000a678:	e13fe617 	ldw	r4,-104(fp)
1000a67c:	0011b680 	call	10011b68 <__sprint_r>
1000a680:	1001f51e 	bne	r2,zero,1000ae58 <___vfprintf_internal_r+0x1ff0>
1000a684:	e47fcb04 	addi	r17,fp,-212
1000a688:	e0bfb917 	ldw	r2,-284(fp)
1000a68c:	1000010e 	bge	r2,zero,1000a694 <___vfprintf_internal_r+0x182c>
1000a690:	0005883a 	mov	r2,zero
1000a694:	e0ffb017 	ldw	r3,-320(fp)
1000a698:	1885c83a 	sub	r2,r3,r2
1000a69c:	e0bfb915 	stw	r2,-284(fp)
1000a6a0:	e0bfb917 	ldw	r2,-284(fp)
1000a6a4:	0080340e 	bge	zero,r2,1000a778 <___vfprintf_internal_r+0x1910>
1000a6a8:	00001906 	br	1000a710 <___vfprintf_internal_r+0x18a8>
1000a6ac:	00840374 	movhi	r2,4109
1000a6b0:	10bd3284 	addi	r2,r2,-2870
1000a6b4:	88800015 	stw	r2,0(r17)
1000a6b8:	00800404 	movi	r2,16
1000a6bc:	88800115 	stw	r2,4(r17)
1000a6c0:	e0bfca17 	ldw	r2,-216(fp)
1000a6c4:	10800404 	addi	r2,r2,16
1000a6c8:	e0bfca15 	stw	r2,-216(fp)
1000a6cc:	8c400204 	addi	r17,r17,8
1000a6d0:	e0bfc917 	ldw	r2,-220(fp)
1000a6d4:	10800044 	addi	r2,r2,1
1000a6d8:	e0bfc915 	stw	r2,-220(fp)
1000a6dc:	e0bfc917 	ldw	r2,-220(fp)
1000a6e0:	10800210 	cmplti	r2,r2,8
1000a6e4:	1000071e 	bne	r2,zero,1000a704 <___vfprintf_internal_r+0x189c>
1000a6e8:	e0bfc804 	addi	r2,fp,-224
1000a6ec:	100d883a 	mov	r6,r2
1000a6f0:	e17fe717 	ldw	r5,-100(fp)
1000a6f4:	e13fe617 	ldw	r4,-104(fp)
1000a6f8:	0011b680 	call	10011b68 <__sprint_r>
1000a6fc:	1001d81e 	bne	r2,zero,1000ae60 <___vfprintf_internal_r+0x1ff8>
1000a700:	e47fcb04 	addi	r17,fp,-212
1000a704:	e0bfb917 	ldw	r2,-284(fp)
1000a708:	10bffc04 	addi	r2,r2,-16
1000a70c:	e0bfb915 	stw	r2,-284(fp)
1000a710:	e0bfb917 	ldw	r2,-284(fp)
1000a714:	10800448 	cmpgei	r2,r2,17
1000a718:	103fe41e 	bne	r2,zero,1000a6ac <__alt_data_end+0xf800a6ac>
1000a71c:	00840374 	movhi	r2,4109
1000a720:	10bd3284 	addi	r2,r2,-2870
1000a724:	88800015 	stw	r2,0(r17)
1000a728:	e0bfb917 	ldw	r2,-284(fp)
1000a72c:	88800115 	stw	r2,4(r17)
1000a730:	e0ffca17 	ldw	r3,-216(fp)
1000a734:	e0bfb917 	ldw	r2,-284(fp)
1000a738:	1885883a 	add	r2,r3,r2
1000a73c:	e0bfca15 	stw	r2,-216(fp)
1000a740:	8c400204 	addi	r17,r17,8
1000a744:	e0bfc917 	ldw	r2,-220(fp)
1000a748:	10800044 	addi	r2,r2,1
1000a74c:	e0bfc915 	stw	r2,-220(fp)
1000a750:	e0bfc917 	ldw	r2,-220(fp)
1000a754:	10800210 	cmplti	r2,r2,8
1000a758:	1000071e 	bne	r2,zero,1000a778 <___vfprintf_internal_r+0x1910>
1000a75c:	e0bfc804 	addi	r2,fp,-224
1000a760:	100d883a 	mov	r6,r2
1000a764:	e17fe717 	ldw	r5,-100(fp)
1000a768:	e13fe617 	ldw	r4,-104(fp)
1000a76c:	0011b680 	call	10011b68 <__sprint_r>
1000a770:	1001bd1e 	bne	r2,zero,1000ae68 <___vfprintf_internal_r+0x2000>
1000a774:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
1000a778:	e0bfb017 	ldw	r2,-320(fp)
1000a77c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
1000a780:	e0ffc417 	ldw	r3,-240(fp)
1000a784:	e0bfc717 	ldw	r2,-228(fp)
1000a788:	18800216 	blt	r3,r2,1000a794 <___vfprintf_internal_r+0x192c>
1000a78c:	9880004c 	andi	r2,r19,1
1000a790:	10001626 	beq	r2,zero,1000a7ec <___vfprintf_internal_r+0x1984>
					    PRINT (decimal_point, decp_len);
1000a794:	e0bfbb17 	ldw	r2,-276(fp)
1000a798:	88800015 	stw	r2,0(r17)
1000a79c:	e0bfbc17 	ldw	r2,-272(fp)
1000a7a0:	88800115 	stw	r2,4(r17)
1000a7a4:	e0ffca17 	ldw	r3,-216(fp)
1000a7a8:	e0bfbc17 	ldw	r2,-272(fp)
1000a7ac:	1885883a 	add	r2,r3,r2
1000a7b0:	e0bfca15 	stw	r2,-216(fp)
1000a7b4:	8c400204 	addi	r17,r17,8
1000a7b8:	e0bfc917 	ldw	r2,-220(fp)
1000a7bc:	10800044 	addi	r2,r2,1
1000a7c0:	e0bfc915 	stw	r2,-220(fp)
1000a7c4:	e0bfc917 	ldw	r2,-220(fp)
1000a7c8:	10800210 	cmplti	r2,r2,8
1000a7cc:	1000071e 	bne	r2,zero,1000a7ec <___vfprintf_internal_r+0x1984>
1000a7d0:	e0bfc804 	addi	r2,fp,-224
1000a7d4:	100d883a 	mov	r6,r2
1000a7d8:	e17fe717 	ldw	r5,-100(fp)
1000a7dc:	e13fe617 	ldw	r4,-104(fp)
1000a7e0:	0011b680 	call	10011b68 <__sprint_r>
1000a7e4:	1001a21e 	bne	r2,zero,1000ae70 <___vfprintf_internal_r+0x2008>
1000a7e8:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
1000a7ec:	e0bfc717 	ldw	r2,-228(fp)
1000a7f0:	1007883a 	mov	r3,r2
1000a7f4:	e0bfc017 	ldw	r2,-256(fp)
1000a7f8:	10c5883a 	add	r2,r2,r3
1000a7fc:	1007883a 	mov	r3,r2
1000a800:	9005883a 	mov	r2,r18
1000a804:	1885c83a 	sub	r2,r3,r2
1000a808:	e0bfba15 	stw	r2,-280(fp)
1000a80c:	e0ffc717 	ldw	r3,-228(fp)
1000a810:	e0bfc417 	ldw	r2,-240(fp)
1000a814:	1887c83a 	sub	r3,r3,r2
1000a818:	e0bfba17 	ldw	r2,-280(fp)
1000a81c:	1880040e 	bge	r3,r2,1000a830 <___vfprintf_internal_r+0x19c8>
1000a820:	e0ffc717 	ldw	r3,-228(fp)
1000a824:	e0bfc417 	ldw	r2,-240(fp)
1000a828:	1885c83a 	sub	r2,r3,r2
1000a82c:	e0bfba15 	stw	r2,-280(fp)
1000a830:	e0bfba17 	ldw	r2,-280(fp)
1000a834:	0080150e 	bge	zero,r2,1000a88c <___vfprintf_internal_r+0x1a24>
1000a838:	8c800015 	stw	r18,0(r17)
1000a83c:	e0bfba17 	ldw	r2,-280(fp)
1000a840:	88800115 	stw	r2,4(r17)
1000a844:	e0ffca17 	ldw	r3,-216(fp)
1000a848:	e0bfba17 	ldw	r2,-280(fp)
1000a84c:	1885883a 	add	r2,r3,r2
1000a850:	e0bfca15 	stw	r2,-216(fp)
1000a854:	8c400204 	addi	r17,r17,8
1000a858:	e0bfc917 	ldw	r2,-220(fp)
1000a85c:	10800044 	addi	r2,r2,1
1000a860:	e0bfc915 	stw	r2,-220(fp)
1000a864:	e0bfc917 	ldw	r2,-220(fp)
1000a868:	10800210 	cmplti	r2,r2,8
1000a86c:	1000071e 	bne	r2,zero,1000a88c <___vfprintf_internal_r+0x1a24>
1000a870:	e0bfc804 	addi	r2,fp,-224
1000a874:	100d883a 	mov	r6,r2
1000a878:	e17fe717 	ldw	r5,-100(fp)
1000a87c:	e13fe617 	ldw	r4,-104(fp)
1000a880:	0011b680 	call	10011b68 <__sprint_r>
1000a884:	10017c1e 	bne	r2,zero,1000ae78 <___vfprintf_internal_r+0x2010>
1000a888:	e47fcb04 	addi	r17,fp,-212
1000a88c:	e0ffc717 	ldw	r3,-228(fp)
1000a890:	e0bfc417 	ldw	r2,-240(fp)
1000a894:	1887c83a 	sub	r3,r3,r2
1000a898:	e0bfba17 	ldw	r2,-280(fp)
1000a89c:	1000010e 	bge	r2,zero,1000a8a4 <___vfprintf_internal_r+0x1a3c>
1000a8a0:	0005883a 	mov	r2,zero
1000a8a4:	1885c83a 	sub	r2,r3,r2
1000a8a8:	e0bfba15 	stw	r2,-280(fp)
1000a8ac:	e0bfba17 	ldw	r2,-280(fp)
1000a8b0:	0080e60e 	bge	zero,r2,1000ac4c <___vfprintf_internal_r+0x1de4>
1000a8b4:	00001906 	br	1000a91c <___vfprintf_internal_r+0x1ab4>
1000a8b8:	00840374 	movhi	r2,4109
1000a8bc:	10bd3284 	addi	r2,r2,-2870
1000a8c0:	88800015 	stw	r2,0(r17)
1000a8c4:	00800404 	movi	r2,16
1000a8c8:	88800115 	stw	r2,4(r17)
1000a8cc:	e0bfca17 	ldw	r2,-216(fp)
1000a8d0:	10800404 	addi	r2,r2,16
1000a8d4:	e0bfca15 	stw	r2,-216(fp)
1000a8d8:	8c400204 	addi	r17,r17,8
1000a8dc:	e0bfc917 	ldw	r2,-220(fp)
1000a8e0:	10800044 	addi	r2,r2,1
1000a8e4:	e0bfc915 	stw	r2,-220(fp)
1000a8e8:	e0bfc917 	ldw	r2,-220(fp)
1000a8ec:	10800210 	cmplti	r2,r2,8
1000a8f0:	1000071e 	bne	r2,zero,1000a910 <___vfprintf_internal_r+0x1aa8>
1000a8f4:	e0bfc804 	addi	r2,fp,-224
1000a8f8:	100d883a 	mov	r6,r2
1000a8fc:	e17fe717 	ldw	r5,-100(fp)
1000a900:	e13fe617 	ldw	r4,-104(fp)
1000a904:	0011b680 	call	10011b68 <__sprint_r>
1000a908:	10015d1e 	bne	r2,zero,1000ae80 <___vfprintf_internal_r+0x2018>
1000a90c:	e47fcb04 	addi	r17,fp,-212
1000a910:	e0bfba17 	ldw	r2,-280(fp)
1000a914:	10bffc04 	addi	r2,r2,-16
1000a918:	e0bfba15 	stw	r2,-280(fp)
1000a91c:	e0bfba17 	ldw	r2,-280(fp)
1000a920:	10800448 	cmpgei	r2,r2,17
1000a924:	103fe41e 	bne	r2,zero,1000a8b8 <__alt_data_end+0xf800a8b8>
1000a928:	00840374 	movhi	r2,4109
1000a92c:	10bd3284 	addi	r2,r2,-2870
1000a930:	88800015 	stw	r2,0(r17)
1000a934:	e0bfba17 	ldw	r2,-280(fp)
1000a938:	88800115 	stw	r2,4(r17)
1000a93c:	e0ffca17 	ldw	r3,-216(fp)
1000a940:	e0bfba17 	ldw	r2,-280(fp)
1000a944:	1885883a 	add	r2,r3,r2
1000a948:	e0bfca15 	stw	r2,-216(fp)
1000a94c:	8c400204 	addi	r17,r17,8
1000a950:	e0bfc917 	ldw	r2,-220(fp)
1000a954:	10800044 	addi	r2,r2,1
1000a958:	e0bfc915 	stw	r2,-220(fp)
1000a95c:	e0bfc917 	ldw	r2,-220(fp)
1000a960:	10800210 	cmplti	r2,r2,8
1000a964:	1000b91e 	bne	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
1000a968:	e0bfc804 	addi	r2,fp,-224
1000a96c:	100d883a 	mov	r6,r2
1000a970:	e17fe717 	ldw	r5,-100(fp)
1000a974:	e13fe617 	ldw	r4,-104(fp)
1000a978:	0011b680 	call	10011b68 <__sprint_r>
1000a97c:	1001421e 	bne	r2,zero,1000ae88 <___vfprintf_internal_r+0x2020>
1000a980:	e47fcb04 	addi	r17,fp,-212
1000a984:	0000b106 	br	1000ac4c <___vfprintf_internal_r+0x1de4>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
1000a988:	e0bfc717 	ldw	r2,-228(fp)
1000a98c:	10800088 	cmpgei	r2,r2,2
1000a990:	1000021e 	bne	r2,zero,1000a99c <___vfprintf_internal_r+0x1b34>
1000a994:	9880004c 	andi	r2,r19,1
1000a998:	10008026 	beq	r2,zero,1000ab9c <___vfprintf_internal_r+0x1d34>
					PRINT (cp, 1);
1000a99c:	8c800015 	stw	r18,0(r17)
1000a9a0:	00800044 	movi	r2,1
1000a9a4:	88800115 	stw	r2,4(r17)
1000a9a8:	e0bfca17 	ldw	r2,-216(fp)
1000a9ac:	10800044 	addi	r2,r2,1
1000a9b0:	e0bfca15 	stw	r2,-216(fp)
1000a9b4:	8c400204 	addi	r17,r17,8
1000a9b8:	e0bfc917 	ldw	r2,-220(fp)
1000a9bc:	10800044 	addi	r2,r2,1
1000a9c0:	e0bfc915 	stw	r2,-220(fp)
1000a9c4:	e0bfc917 	ldw	r2,-220(fp)
1000a9c8:	10800210 	cmplti	r2,r2,8
1000a9cc:	1000071e 	bne	r2,zero,1000a9ec <___vfprintf_internal_r+0x1b84>
1000a9d0:	e0bfc804 	addi	r2,fp,-224
1000a9d4:	100d883a 	mov	r6,r2
1000a9d8:	e17fe717 	ldw	r5,-100(fp)
1000a9dc:	e13fe617 	ldw	r4,-104(fp)
1000a9e0:	0011b680 	call	10011b68 <__sprint_r>
1000a9e4:	10012a1e 	bne	r2,zero,1000ae90 <___vfprintf_internal_r+0x2028>
1000a9e8:	e47fcb04 	addi	r17,fp,-212
					cp++;
1000a9ec:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
1000a9f0:	e0bfbb17 	ldw	r2,-276(fp)
1000a9f4:	88800015 	stw	r2,0(r17)
1000a9f8:	e0bfbc17 	ldw	r2,-272(fp)
1000a9fc:	88800115 	stw	r2,4(r17)
1000aa00:	e0ffca17 	ldw	r3,-216(fp)
1000aa04:	e0bfbc17 	ldw	r2,-272(fp)
1000aa08:	1885883a 	add	r2,r3,r2
1000aa0c:	e0bfca15 	stw	r2,-216(fp)
1000aa10:	8c400204 	addi	r17,r17,8
1000aa14:	e0bfc917 	ldw	r2,-220(fp)
1000aa18:	10800044 	addi	r2,r2,1
1000aa1c:	e0bfc915 	stw	r2,-220(fp)
1000aa20:	e0bfc917 	ldw	r2,-220(fp)
1000aa24:	10800210 	cmplti	r2,r2,8
1000aa28:	1000071e 	bne	r2,zero,1000aa48 <___vfprintf_internal_r+0x1be0>
1000aa2c:	e0bfc804 	addi	r2,fp,-224
1000aa30:	100d883a 	mov	r6,r2
1000aa34:	e17fe717 	ldw	r5,-100(fp)
1000aa38:	e13fe617 	ldw	r4,-104(fp)
1000aa3c:	0011b680 	call	10011b68 <__sprint_r>
1000aa40:	1001151e 	bne	r2,zero,1000ae98 <___vfprintf_internal_r+0x2030>
1000aa44:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
1000aa48:	e0bfc217 	ldw	r2,-248(fp)
1000aa4c:	e0ffc317 	ldw	r3,-244(fp)
1000aa50:	000d883a 	mov	r6,zero
1000aa54:	000f883a 	mov	r7,zero
1000aa58:	1009883a 	mov	r4,r2
1000aa5c:	180b883a 	mov	r5,r3
1000aa60:	00152180 	call	10015218 <__eqdf2>
1000aa64:	10001826 	beq	r2,zero,1000aac8 <___vfprintf_internal_r+0x1c60>
						PRINT (cp, ndig - 1);
1000aa68:	8c800015 	stw	r18,0(r17)
1000aa6c:	e0bfc717 	ldw	r2,-228(fp)
1000aa70:	10bfffc4 	addi	r2,r2,-1
1000aa74:	88800115 	stw	r2,4(r17)
1000aa78:	e0bfca17 	ldw	r2,-216(fp)
1000aa7c:	e0ffc717 	ldw	r3,-228(fp)
1000aa80:	10c5883a 	add	r2,r2,r3
1000aa84:	10bfffc4 	addi	r2,r2,-1
1000aa88:	e0bfca15 	stw	r2,-216(fp)
1000aa8c:	8c400204 	addi	r17,r17,8
1000aa90:	e0bfc917 	ldw	r2,-220(fp)
1000aa94:	10800044 	addi	r2,r2,1
1000aa98:	e0bfc915 	stw	r2,-220(fp)
1000aa9c:	e0bfc917 	ldw	r2,-220(fp)
1000aaa0:	10800210 	cmplti	r2,r2,8
1000aaa4:	1000521e 	bne	r2,zero,1000abf0 <___vfprintf_internal_r+0x1d88>
1000aaa8:	e0bfc804 	addi	r2,fp,-224
1000aaac:	100d883a 	mov	r6,r2
1000aab0:	e17fe717 	ldw	r5,-100(fp)
1000aab4:	e13fe617 	ldw	r4,-104(fp)
1000aab8:	0011b680 	call	10011b68 <__sprint_r>
1000aabc:	1000f81e 	bne	r2,zero,1000aea0 <___vfprintf_internal_r+0x2038>
1000aac0:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000aac4:	00004a06 	br	1000abf0 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
1000aac8:	e0bfc717 	ldw	r2,-228(fp)
1000aacc:	143fffc4 	addi	r16,r2,-1
1000aad0:	0400470e 	bge	zero,r16,1000abf0 <___vfprintf_internal_r+0x1d88>
1000aad4:	00001706 	br	1000ab34 <___vfprintf_internal_r+0x1ccc>
1000aad8:	00840374 	movhi	r2,4109
1000aadc:	10bd3284 	addi	r2,r2,-2870
1000aae0:	88800015 	stw	r2,0(r17)
1000aae4:	00800404 	movi	r2,16
1000aae8:	88800115 	stw	r2,4(r17)
1000aaec:	e0bfca17 	ldw	r2,-216(fp)
1000aaf0:	10800404 	addi	r2,r2,16
1000aaf4:	e0bfca15 	stw	r2,-216(fp)
1000aaf8:	8c400204 	addi	r17,r17,8
1000aafc:	e0bfc917 	ldw	r2,-220(fp)
1000ab00:	10800044 	addi	r2,r2,1
1000ab04:	e0bfc915 	stw	r2,-220(fp)
1000ab08:	e0bfc917 	ldw	r2,-220(fp)
1000ab0c:	10800210 	cmplti	r2,r2,8
1000ab10:	1000071e 	bne	r2,zero,1000ab30 <___vfprintf_internal_r+0x1cc8>
1000ab14:	e0bfc804 	addi	r2,fp,-224
1000ab18:	100d883a 	mov	r6,r2
1000ab1c:	e17fe717 	ldw	r5,-100(fp)
1000ab20:	e13fe617 	ldw	r4,-104(fp)
1000ab24:	0011b680 	call	10011b68 <__sprint_r>
1000ab28:	1000df1e 	bne	r2,zero,1000aea8 <___vfprintf_internal_r+0x2040>
1000ab2c:	e47fcb04 	addi	r17,fp,-212
1000ab30:	843ffc04 	addi	r16,r16,-16
1000ab34:	80800448 	cmpgei	r2,r16,17
1000ab38:	103fe71e 	bne	r2,zero,1000aad8 <__alt_data_end+0xf800aad8>
1000ab3c:	00840374 	movhi	r2,4109
1000ab40:	10bd3284 	addi	r2,r2,-2870
1000ab44:	88800015 	stw	r2,0(r17)
1000ab48:	8005883a 	mov	r2,r16
1000ab4c:	88800115 	stw	r2,4(r17)
1000ab50:	e0bfca17 	ldw	r2,-216(fp)
1000ab54:	8007883a 	mov	r3,r16
1000ab58:	10c5883a 	add	r2,r2,r3
1000ab5c:	e0bfca15 	stw	r2,-216(fp)
1000ab60:	8c400204 	addi	r17,r17,8
1000ab64:	e0bfc917 	ldw	r2,-220(fp)
1000ab68:	10800044 	addi	r2,r2,1
1000ab6c:	e0bfc915 	stw	r2,-220(fp)
1000ab70:	e0bfc917 	ldw	r2,-220(fp)
1000ab74:	10800210 	cmplti	r2,r2,8
1000ab78:	10001d1e 	bne	r2,zero,1000abf0 <___vfprintf_internal_r+0x1d88>
1000ab7c:	e0bfc804 	addi	r2,fp,-224
1000ab80:	100d883a 	mov	r6,r2
1000ab84:	e17fe717 	ldw	r5,-100(fp)
1000ab88:	e13fe617 	ldw	r4,-104(fp)
1000ab8c:	0011b680 	call	10011b68 <__sprint_r>
1000ab90:	1000c71e 	bne	r2,zero,1000aeb0 <___vfprintf_internal_r+0x2048>
1000ab94:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000ab98:	00001506 	br	1000abf0 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
1000ab9c:	8c800015 	stw	r18,0(r17)
1000aba0:	00800044 	movi	r2,1
1000aba4:	88800115 	stw	r2,4(r17)
1000aba8:	e0bfca17 	ldw	r2,-216(fp)
1000abac:	10800044 	addi	r2,r2,1
1000abb0:	e0bfca15 	stw	r2,-216(fp)
1000abb4:	8c400204 	addi	r17,r17,8
1000abb8:	e0bfc917 	ldw	r2,-220(fp)
1000abbc:	10800044 	addi	r2,r2,1
1000abc0:	e0bfc915 	stw	r2,-220(fp)
1000abc4:	e0bfc917 	ldw	r2,-220(fp)
1000abc8:	10800210 	cmplti	r2,r2,8
1000abcc:	1000091e 	bne	r2,zero,1000abf4 <___vfprintf_internal_r+0x1d8c>
1000abd0:	e0bfc804 	addi	r2,fp,-224
1000abd4:	100d883a 	mov	r6,r2
1000abd8:	e17fe717 	ldw	r5,-100(fp)
1000abdc:	e13fe617 	ldw	r4,-104(fp)
1000abe0:	0011b680 	call	10011b68 <__sprint_r>
1000abe4:	1000b41e 	bne	r2,zero,1000aeb8 <___vfprintf_internal_r+0x2050>
1000abe8:	e47fcb04 	addi	r17,fp,-212
1000abec:	00000106 	br	1000abf4 <___vfprintf_internal_r+0x1d8c>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000abf0:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
1000abf4:	e0bfc504 	addi	r2,fp,-236
1000abf8:	88800015 	stw	r2,0(r17)
1000abfc:	e0bfaf17 	ldw	r2,-324(fp)
1000ac00:	88800115 	stw	r2,4(r17)
1000ac04:	e0ffca17 	ldw	r3,-216(fp)
1000ac08:	e0bfaf17 	ldw	r2,-324(fp)
1000ac0c:	1885883a 	add	r2,r3,r2
1000ac10:	e0bfca15 	stw	r2,-216(fp)
1000ac14:	8c400204 	addi	r17,r17,8
1000ac18:	e0bfc917 	ldw	r2,-220(fp)
1000ac1c:	10800044 	addi	r2,r2,1
1000ac20:	e0bfc915 	stw	r2,-220(fp)
1000ac24:	e0bfc917 	ldw	r2,-220(fp)
1000ac28:	10800210 	cmplti	r2,r2,8
1000ac2c:	1000071e 	bne	r2,zero,1000ac4c <___vfprintf_internal_r+0x1de4>
1000ac30:	e0bfc804 	addi	r2,fp,-224
1000ac34:	100d883a 	mov	r6,r2
1000ac38:	e17fe717 	ldw	r5,-100(fp)
1000ac3c:	e13fe617 	ldw	r4,-104(fp)
1000ac40:	0011b680 	call	10011b68 <__sprint_r>
1000ac44:	10009e1e 	bne	r2,zero,1000aec0 <___vfprintf_internal_r+0x2058>
1000ac48:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
1000ac4c:	9880010c 	andi	r2,r19,4
1000ac50:	10003526 	beq	r2,zero,1000ad28 <___vfprintf_internal_r+0x1ec0>
			PAD (width - realsz, blanks);
1000ac54:	e0ffad17 	ldw	r3,-332(fp)
1000ac58:	e0bfb517 	ldw	r2,-300(fp)
1000ac5c:	18a1c83a 	sub	r16,r3,r2
1000ac60:	0400310e 	bge	zero,r16,1000ad28 <___vfprintf_internal_r+0x1ec0>
1000ac64:	00001706 	br	1000acc4 <___vfprintf_internal_r+0x1e5c>
1000ac68:	00840374 	movhi	r2,4109
1000ac6c:	10bd2e84 	addi	r2,r2,-2886
1000ac70:	88800015 	stw	r2,0(r17)
1000ac74:	00800404 	movi	r2,16
1000ac78:	88800115 	stw	r2,4(r17)
1000ac7c:	e0bfca17 	ldw	r2,-216(fp)
1000ac80:	10800404 	addi	r2,r2,16
1000ac84:	e0bfca15 	stw	r2,-216(fp)
1000ac88:	8c400204 	addi	r17,r17,8
1000ac8c:	e0bfc917 	ldw	r2,-220(fp)
1000ac90:	10800044 	addi	r2,r2,1
1000ac94:	e0bfc915 	stw	r2,-220(fp)
1000ac98:	e0bfc917 	ldw	r2,-220(fp)
1000ac9c:	10800210 	cmplti	r2,r2,8
1000aca0:	1000071e 	bne	r2,zero,1000acc0 <___vfprintf_internal_r+0x1e58>
1000aca4:	e0bfc804 	addi	r2,fp,-224
1000aca8:	100d883a 	mov	r6,r2
1000acac:	e17fe717 	ldw	r5,-100(fp)
1000acb0:	e13fe617 	ldw	r4,-104(fp)
1000acb4:	0011b680 	call	10011b68 <__sprint_r>
1000acb8:	1000831e 	bne	r2,zero,1000aec8 <___vfprintf_internal_r+0x2060>
1000acbc:	e47fcb04 	addi	r17,fp,-212
1000acc0:	843ffc04 	addi	r16,r16,-16
1000acc4:	80800448 	cmpgei	r2,r16,17
1000acc8:	103fe71e 	bne	r2,zero,1000ac68 <__alt_data_end+0xf800ac68>
1000accc:	00840374 	movhi	r2,4109
1000acd0:	10bd2e84 	addi	r2,r2,-2886
1000acd4:	88800015 	stw	r2,0(r17)
1000acd8:	8005883a 	mov	r2,r16
1000acdc:	88800115 	stw	r2,4(r17)
1000ace0:	e0bfca17 	ldw	r2,-216(fp)
1000ace4:	8007883a 	mov	r3,r16
1000ace8:	10c5883a 	add	r2,r2,r3
1000acec:	e0bfca15 	stw	r2,-216(fp)
1000acf0:	8c400204 	addi	r17,r17,8
1000acf4:	e0bfc917 	ldw	r2,-220(fp)
1000acf8:	10800044 	addi	r2,r2,1
1000acfc:	e0bfc915 	stw	r2,-220(fp)
1000ad00:	e0bfc917 	ldw	r2,-220(fp)
1000ad04:	10800210 	cmplti	r2,r2,8
1000ad08:	1000071e 	bne	r2,zero,1000ad28 <___vfprintf_internal_r+0x1ec0>
1000ad0c:	e0bfc804 	addi	r2,fp,-224
1000ad10:	100d883a 	mov	r6,r2
1000ad14:	e17fe717 	ldw	r5,-100(fp)
1000ad18:	e13fe617 	ldw	r4,-104(fp)
1000ad1c:	0011b680 	call	10011b68 <__sprint_r>
1000ad20:	10006b1e 	bne	r2,zero,1000aed0 <___vfprintf_internal_r+0x2068>
1000ad24:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
1000ad28:	e0ffad17 	ldw	r3,-332(fp)
1000ad2c:	e0bfb517 	ldw	r2,-300(fp)
1000ad30:	10c0010e 	bge	r2,r3,1000ad38 <___vfprintf_internal_r+0x1ed0>
1000ad34:	1805883a 	mov	r2,r3
1000ad38:	e0ffac17 	ldw	r3,-336(fp)
1000ad3c:	1885883a 	add	r2,r3,r2
1000ad40:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
1000ad44:	e0bfca17 	ldw	r2,-216(fp)
1000ad48:	10000626 	beq	r2,zero,1000ad64 <___vfprintf_internal_r+0x1efc>
1000ad4c:	e0bfc804 	addi	r2,fp,-224
1000ad50:	100d883a 	mov	r6,r2
1000ad54:	e17fe717 	ldw	r5,-100(fp)
1000ad58:	e13fe617 	ldw	r4,-104(fp)
1000ad5c:	0011b680 	call	10011b68 <__sprint_r>
1000ad60:	10005d1e 	bne	r2,zero,1000aed8 <___vfprintf_internal_r+0x2070>
1000ad64:	e03fc915 	stw	zero,-220(fp)
1000ad68:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
1000ad6c:	e0bfb817 	ldw	r2,-288(fp)
1000ad70:	10389a26 	beq	r2,zero,10008fdc <__alt_data_end+0xf8008fdc>
			_free_r (data, malloc_buf);
1000ad74:	e17fb817 	ldw	r5,-288(fp)
1000ad78:	e13fe617 	ldw	r4,-104(fp)
1000ad7c:	000dda40 	call	1000dda4 <_free_r>
			malloc_buf = NULL;
1000ad80:	e03fb815 	stw	zero,-288(fp)
		}
	}
1000ad84:	00389506 	br	10008fdc <__alt_data_end+0xf8008fdc>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
1000ad88:	0001883a 	nop
1000ad8c:	00000106 	br	1000ad94 <___vfprintf_internal_r+0x1f2c>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
1000ad90:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
1000ad94:	e0bfca17 	ldw	r2,-216(fp)
1000ad98:	10000626 	beq	r2,zero,1000adb4 <___vfprintf_internal_r+0x1f4c>
1000ad9c:	e0bfc804 	addi	r2,fp,-224
1000ada0:	100d883a 	mov	r6,r2
1000ada4:	e17fe717 	ldw	r5,-100(fp)
1000ada8:	e13fe617 	ldw	r4,-104(fp)
1000adac:	0011b680 	call	10011b68 <__sprint_r>
1000adb0:	10004b1e 	bne	r2,zero,1000aee0 <___vfprintf_internal_r+0x2078>
1000adb4:	e03fc915 	stw	zero,-220(fp)
1000adb8:	e47fcb04 	addi	r17,fp,-212
1000adbc:	00004906 	br	1000aee4 <___vfprintf_internal_r+0x207c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
1000adc0:	0001883a 	nop
1000adc4:	00004706 	br	1000aee4 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
1000adc8:	0001883a 	nop
1000adcc:	00004506 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000add0:	0001883a 	nop
1000add4:	00004306 	br	1000aee4 <___vfprintf_internal_r+0x207c>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
1000add8:	0001883a 	nop
1000addc:	00004106 	br	1000aee4 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
1000ade0:	0001883a 	nop
1000ade4:	00003f06 	br	1000aee4 <___vfprintf_internal_r+0x207c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
1000ade8:	0001883a 	nop
1000adec:	00003d06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000adf0:	0001883a 	nop
1000adf4:	00003b06 	br	1000aee4 <___vfprintf_internal_r+0x207c>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
1000adf8:	0001883a 	nop
1000adfc:	00003906 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae00:	0001883a 	nop
1000ae04:	00003706 	br	1000aee4 <___vfprintf_internal_r+0x207c>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
1000ae08:	0001883a 	nop
1000ae0c:	00003506 	br	1000aee4 <___vfprintf_internal_r+0x207c>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
1000ae10:	0001883a 	nop
1000ae14:	00003306 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
1000ae18:	0001883a 	nop
1000ae1c:	00003106 	br	1000aee4 <___vfprintf_internal_r+0x207c>
						PAD (ndig - 1, zeroes);
1000ae20:	0001883a 	nop
1000ae24:	00002f06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae28:	0001883a 	nop
1000ae2c:	00002d06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
1000ae30:	0001883a 	nop
1000ae34:	00002b06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
1000ae38:	0001883a 	nop
1000ae3c:	00002906 	br	1000aee4 <___vfprintf_internal_r+0x207c>
						PAD (-expt, zeroes);
1000ae40:	0001883a 	nop
1000ae44:	00002706 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae48:	0001883a 	nop
1000ae4c:	00002506 	br	1000aee4 <___vfprintf_internal_r+0x207c>
						PRINT (cp, ndig);
1000ae50:	0001883a 	nop
1000ae54:	00002306 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
1000ae58:	0001883a 	nop
1000ae5c:	00002106 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae60:	0001883a 	nop
1000ae64:	00001f06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae68:	0001883a 	nop
1000ae6c:	00001d06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
1000ae70:	0001883a 	nop
1000ae74:	00001b06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					PRINTANDPAD (cp, convbuf + ndig,
1000ae78:	0001883a 	nop
1000ae7c:	00001906 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae80:	0001883a 	nop
1000ae84:	00001706 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000ae88:	0001883a 	nop
1000ae8c:	00001506 	br	1000aee4 <___vfprintf_internal_r+0x207c>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
1000ae90:	0001883a 	nop
1000ae94:	00001306 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					cp++;
					PRINT (decimal_point, decp_len);
1000ae98:	0001883a 	nop
1000ae9c:	00001106 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
1000aea0:	0001883a 	nop
1000aea4:	00000f06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
1000aea8:	0001883a 	nop
1000aeac:	00000d06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000aeb0:	0001883a 	nop
1000aeb4:	00000b06 	br	1000aee4 <___vfprintf_internal_r+0x207c>
				} else	/* XeYYY */
					PRINT (cp, 1);
1000aeb8:	0001883a 	nop
1000aebc:	00000906 	br	1000aee4 <___vfprintf_internal_r+0x207c>
				PRINT (expstr, expsize);
1000aec0:	0001883a 	nop
1000aec4:	00000706 	br	1000aee4 <___vfprintf_internal_r+0x207c>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
1000aec8:	0001883a 	nop
1000aecc:	00000506 	br	1000aee4 <___vfprintf_internal_r+0x207c>
1000aed0:	0001883a 	nop
1000aed4:	00000306 	br	1000aee4 <___vfprintf_internal_r+0x207c>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
1000aed8:	0001883a 	nop
1000aedc:	00000106 	br	1000aee4 <___vfprintf_internal_r+0x207c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
1000aee0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
1000aee4:	e0bfb817 	ldw	r2,-288(fp)
1000aee8:	10000326 	beq	r2,zero,1000aef8 <___vfprintf_internal_r+0x2090>
		_free_r (data, malloc_buf);
1000aeec:	e17fb817 	ldw	r5,-288(fp)
1000aef0:	e13fe617 	ldw	r4,-104(fp)
1000aef4:	000dda40 	call	1000dda4 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
1000aef8:	e0bfe717 	ldw	r2,-100(fp)
1000aefc:	1080030b 	ldhu	r2,12(r2)
1000af00:	10bfffcc 	andi	r2,r2,65535
1000af04:	1080100c 	andi	r2,r2,64
1000af08:	1000021e 	bne	r2,zero,1000af14 <___vfprintf_internal_r+0x20ac>
1000af0c:	e0bfac17 	ldw	r2,-336(fp)
1000af10:	00000206 	br	1000af1c <___vfprintf_internal_r+0x20b4>
1000af14:	00bfffc4 	movi	r2,-1
1000af18:	0001883a 	nop
	/* NOTREACHED */
}
1000af1c:	e6fff804 	addi	sp,fp,-32
1000af20:	dfc00917 	ldw	ra,36(sp)
1000af24:	df000817 	ldw	fp,32(sp)
1000af28:	ddc00717 	ldw	r23,28(sp)
1000af2c:	dd800617 	ldw	r22,24(sp)
1000af30:	dd400517 	ldw	r21,20(sp)
1000af34:	dd000417 	ldw	r20,16(sp)
1000af38:	dcc00317 	ldw	r19,12(sp)
1000af3c:	dc800217 	ldw	r18,8(sp)
1000af40:	dc400117 	ldw	r17,4(sp)
1000af44:	dc000017 	ldw	r16,0(sp)
1000af48:	dec00a04 	addi	sp,sp,40
1000af4c:	f800283a 	ret

1000af50 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
1000af50:	deffef04 	addi	sp,sp,-68
1000af54:	dfc01015 	stw	ra,64(sp)
1000af58:	df000f15 	stw	fp,60(sp)
1000af5c:	df000f04 	addi	fp,sp,60
1000af60:	e13ffc15 	stw	r4,-16(fp)
1000af64:	e17ffd15 	stw	r5,-12(fp)
1000af68:	e1bffe15 	stw	r6,-8(fp)
1000af6c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
1000af70:	e0bffd17 	ldw	r2,-12(fp)
1000af74:	e0bffa15 	stw	r2,-24(fp)
1000af78:	e0bffe17 	ldw	r2,-8(fp)
1000af7c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
1000af80:	e0bffb17 	ldw	r2,-20(fp)
1000af84:	1000090e 	bge	r2,zero,1000afac <cvt+0x5c>
		value = -value;
1000af88:	e0bffd17 	ldw	r2,-12(fp)
1000af8c:	e0bffd15 	stw	r2,-12(fp)
1000af90:	e0bffe17 	ldw	r2,-8(fp)
1000af94:	10a0003c 	xorhi	r2,r2,32768
1000af98:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
1000af9c:	e0800317 	ldw	r2,12(fp)
1000afa0:	00c00b44 	movi	r3,45
1000afa4:	10c00005 	stb	r3,0(r2)
1000afa8:	00000206 	br	1000afb4 <cvt+0x64>
	} else
		*sign = '\000';
1000afac:	e0800317 	ldw	r2,12(fp)
1000afb0:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
1000afb4:	e0800517 	ldw	r2,20(fp)
1000afb8:	108019a0 	cmpeqi	r2,r2,102
1000afbc:	1000031e 	bne	r2,zero,1000afcc <cvt+0x7c>
1000afc0:	e0800517 	ldw	r2,20(fp)
1000afc4:	10801198 	cmpnei	r2,r2,70
1000afc8:	1000031e 	bne	r2,zero,1000afd8 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
1000afcc:	008000c4 	movi	r2,3
1000afd0:	e0bff515 	stw	r2,-44(fp)
1000afd4:	00000b06 	br	1000b004 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
1000afd8:	e0800517 	ldw	r2,20(fp)
1000afdc:	10801960 	cmpeqi	r2,r2,101
1000afe0:	1000031e 	bne	r2,zero,1000aff0 <cvt+0xa0>
1000afe4:	e0800517 	ldw	r2,20(fp)
1000afe8:	10801158 	cmpnei	r2,r2,69
1000afec:	1000031e 	bne	r2,zero,1000affc <cvt+0xac>
			ndigits++;
1000aff0:	e0bfff17 	ldw	r2,-4(fp)
1000aff4:	10800044 	addi	r2,r2,1
1000aff8:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
1000affc:	00800084 	movi	r2,2
1000b000:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
1000b004:	e0bff904 	addi	r2,fp,-28
1000b008:	d8800315 	stw	r2,12(sp)
1000b00c:	e0bff804 	addi	r2,fp,-32
1000b010:	d8800215 	stw	r2,8(sp)
1000b014:	e0800417 	ldw	r2,16(fp)
1000b018:	d8800115 	stw	r2,4(sp)
1000b01c:	e0bfff17 	ldw	r2,-4(fp)
1000b020:	d8800015 	stw	r2,0(sp)
1000b024:	e1fff517 	ldw	r7,-44(fp)
1000b028:	e17ffd17 	ldw	r5,-12(fp)
1000b02c:	e1bffe17 	ldw	r6,-8(fp)
1000b030:	e13ffc17 	ldw	r4,-16(fp)
1000b034:	000b8080 	call	1000b808 <_dtoa_r>
1000b038:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
1000b03c:	e0800517 	ldw	r2,20(fp)
1000b040:	108019e0 	cmpeqi	r2,r2,103
1000b044:	1000031e 	bne	r2,zero,1000b054 <cvt+0x104>
1000b048:	e0800517 	ldw	r2,20(fp)
1000b04c:	108011d8 	cmpnei	r2,r2,71
1000b050:	1000031e 	bne	r2,zero,1000b060 <cvt+0x110>
1000b054:	e0800217 	ldw	r2,8(fp)
1000b058:	1080004c 	andi	r2,r2,1
1000b05c:	10003326 	beq	r2,zero,1000b12c <cvt+0x1dc>
		bp = digits + ndigits;
1000b060:	e0bfff17 	ldw	r2,-4(fp)
1000b064:	e0fff717 	ldw	r3,-36(fp)
1000b068:	1885883a 	add	r2,r3,r2
1000b06c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
1000b070:	e0800517 	ldw	r2,20(fp)
1000b074:	108019a0 	cmpeqi	r2,r2,102
1000b078:	1000031e 	bne	r2,zero,1000b088 <cvt+0x138>
1000b07c:	e0800517 	ldw	r2,20(fp)
1000b080:	10801198 	cmpnei	r2,r2,70
1000b084:	1000181e 	bne	r2,zero,1000b0e8 <cvt+0x198>
			if (*digits == '0' && value)
1000b088:	e0bff717 	ldw	r2,-36(fp)
1000b08c:	10800003 	ldbu	r2,0(r2)
1000b090:	10803fcc 	andi	r2,r2,255
1000b094:	1080201c 	xori	r2,r2,128
1000b098:	10bfe004 	addi	r2,r2,-128
1000b09c:	10800c18 	cmpnei	r2,r2,48
1000b0a0:	10000b1e 	bne	r2,zero,1000b0d0 <cvt+0x180>
1000b0a4:	000d883a 	mov	r6,zero
1000b0a8:	000f883a 	mov	r7,zero
1000b0ac:	e13ffd17 	ldw	r4,-12(fp)
1000b0b0:	e17ffe17 	ldw	r5,-8(fp)
1000b0b4:	00152180 	call	10015218 <__eqdf2>
1000b0b8:	10000526 	beq	r2,zero,1000b0d0 <cvt+0x180>
				*decpt = -ndigits + 1;
1000b0bc:	00c00044 	movi	r3,1
1000b0c0:	e0bfff17 	ldw	r2,-4(fp)
1000b0c4:	1887c83a 	sub	r3,r3,r2
1000b0c8:	e0800417 	ldw	r2,16(fp)
1000b0cc:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
1000b0d0:	e0800417 	ldw	r2,16(fp)
1000b0d4:	10800017 	ldw	r2,0(r2)
1000b0d8:	1007883a 	mov	r3,r2
1000b0dc:	e0bff617 	ldw	r2,-40(fp)
1000b0e0:	10c5883a 	add	r2,r2,r3
1000b0e4:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
1000b0e8:	000d883a 	mov	r6,zero
1000b0ec:	000f883a 	mov	r7,zero
1000b0f0:	e13ffd17 	ldw	r4,-12(fp)
1000b0f4:	e17ffe17 	ldw	r5,-8(fp)
1000b0f8:	00152180 	call	10015218 <__eqdf2>
1000b0fc:	1000081e 	bne	r2,zero,1000b120 <cvt+0x1d0>
			rve = bp;
1000b100:	e0bff617 	ldw	r2,-40(fp)
1000b104:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
1000b108:	00000506 	br	1000b120 <cvt+0x1d0>
			*rve++ = '0';
1000b10c:	e0bff917 	ldw	r2,-28(fp)
1000b110:	10c00044 	addi	r3,r2,1
1000b114:	e0fff915 	stw	r3,-28(fp)
1000b118:	00c00c04 	movi	r3,48
1000b11c:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
1000b120:	e0fff917 	ldw	r3,-28(fp)
1000b124:	e0bff617 	ldw	r2,-40(fp)
1000b128:	18bff836 	bltu	r3,r2,1000b10c <__alt_data_end+0xf800b10c>
			*rve++ = '0';
	}
	*length = rve - digits;
1000b12c:	e0bff917 	ldw	r2,-28(fp)
1000b130:	1007883a 	mov	r3,r2
1000b134:	e0bff717 	ldw	r2,-36(fp)
1000b138:	1887c83a 	sub	r3,r3,r2
1000b13c:	e0800617 	ldw	r2,24(fp)
1000b140:	10c00015 	stw	r3,0(r2)
	return (digits);
1000b144:	e0bff717 	ldw	r2,-36(fp)
}
1000b148:	e037883a 	mov	sp,fp
1000b14c:	dfc00117 	ldw	ra,4(sp)
1000b150:	df000017 	ldw	fp,0(sp)
1000b154:	dec00204 	addi	sp,sp,8
1000b158:	f800283a 	ret

1000b15c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
1000b15c:	defff704 	addi	sp,sp,-36
1000b160:	dfc00815 	stw	ra,32(sp)
1000b164:	df000715 	stw	fp,28(sp)
1000b168:	dc400615 	stw	r17,24(sp)
1000b16c:	dc000515 	stw	r16,20(sp)
1000b170:	df000704 	addi	fp,sp,28
1000b174:	e13ffb15 	stw	r4,-20(fp)
1000b178:	e17ffc15 	stw	r5,-16(fp)
1000b17c:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
1000b180:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
1000b184:	8805883a 	mov	r2,r17
1000b188:	14400044 	addi	r17,r2,1
1000b18c:	e0fffd17 	ldw	r3,-12(fp)
1000b190:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
1000b194:	e0bffc17 	ldw	r2,-16(fp)
1000b198:	1000080e 	bge	r2,zero,1000b1bc <exponent+0x60>
		exp = -exp;
1000b19c:	e0bffc17 	ldw	r2,-16(fp)
1000b1a0:	0085c83a 	sub	r2,zero,r2
1000b1a4:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
1000b1a8:	8805883a 	mov	r2,r17
1000b1ac:	14400044 	addi	r17,r2,1
1000b1b0:	00c00b44 	movi	r3,45
1000b1b4:	10c00005 	stb	r3,0(r2)
1000b1b8:	00000406 	br	1000b1cc <exponent+0x70>
	}
	else
		*p++ = '+';
1000b1bc:	8805883a 	mov	r2,r17
1000b1c0:	14400044 	addi	r17,r2,1
1000b1c4:	00c00ac4 	movi	r3,43
1000b1c8:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
1000b1cc:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
1000b1d0:	e0bffc17 	ldw	r2,-16(fp)
1000b1d4:	10800290 	cmplti	r2,r2,10
1000b1d8:	10001d1e 	bne	r2,zero,1000b250 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
1000b1dc:	843fffc4 	addi	r16,r16,-1
1000b1e0:	e0bffc17 	ldw	r2,-16(fp)
1000b1e4:	01400284 	movi	r5,10
1000b1e8:	1009883a 	mov	r4,r2
1000b1ec:	000241c0 	call	1000241c <__modsi3>
1000b1f0:	10800c04 	addi	r2,r2,48
1000b1f4:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
1000b1f8:	e0bffc17 	ldw	r2,-16(fp)
1000b1fc:	01400284 	movi	r5,10
1000b200:	1009883a 	mov	r4,r2
1000b204:	00023980 	call	10002398 <__divsi3>
1000b208:	e0bffc15 	stw	r2,-16(fp)
1000b20c:	e0bffc17 	ldw	r2,-16(fp)
1000b210:	10800288 	cmpgei	r2,r2,10
1000b214:	103ff11e 	bne	r2,zero,1000b1dc <__alt_data_end+0xf800b1dc>
		*--t = to_char (exp);
1000b218:	843fffc4 	addi	r16,r16,-1
1000b21c:	e0bffc17 	ldw	r2,-16(fp)
1000b220:	10800c04 	addi	r2,r2,48
1000b224:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
1000b228:	00000606 	br	1000b244 <exponent+0xe8>
1000b22c:	8805883a 	mov	r2,r17
1000b230:	14400044 	addi	r17,r2,1
1000b234:	8007883a 	mov	r3,r16
1000b238:	1c000044 	addi	r16,r3,1
1000b23c:	18c00003 	ldbu	r3,0(r3)
1000b240:	10c00005 	stb	r3,0(r2)
1000b244:	e0bffac4 	addi	r2,fp,-21
1000b248:	80bff836 	bltu	r16,r2,1000b22c <__alt_data_end+0xf800b22c>
1000b24c:	00000906 	br	1000b274 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
1000b250:	8805883a 	mov	r2,r17
1000b254:	14400044 	addi	r17,r2,1
1000b258:	00c00c04 	movi	r3,48
1000b25c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
1000b260:	8805883a 	mov	r2,r17
1000b264:	14400044 	addi	r17,r2,1
1000b268:	e0fffc17 	ldw	r3,-16(fp)
1000b26c:	18c00c04 	addi	r3,r3,48
1000b270:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
1000b274:	8807883a 	mov	r3,r17
1000b278:	e0bffb17 	ldw	r2,-20(fp)
1000b27c:	1885c83a 	sub	r2,r3,r2
}
1000b280:	e6fffe04 	addi	sp,fp,-8
1000b284:	dfc00317 	ldw	ra,12(sp)
1000b288:	df000217 	ldw	fp,8(sp)
1000b28c:	dc400117 	ldw	r17,4(sp)
1000b290:	dc000017 	ldw	r16,0(sp)
1000b294:	dec00404 	addi	sp,sp,16
1000b298:	f800283a 	ret

1000b29c <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000b29c:	defffb04 	addi	sp,sp,-20
1000b2a0:	dfc00415 	stw	ra,16(sp)
1000b2a4:	df000315 	stw	fp,12(sp)
1000b2a8:	dc000215 	stw	r16,8(sp)
1000b2ac:	df000304 	addi	fp,sp,12
1000b2b0:	e13ffe15 	stw	r4,-8(fp)
1000b2b4:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
1000b2b8:	008403b4 	movhi	r2,4110
1000b2bc:	10a45004 	addi	r2,r2,-28352
1000b2c0:	10800017 	ldw	r2,0(r2)
1000b2c4:	e0bffd15 	stw	r2,-12(fp)
1000b2c8:	e0bffd17 	ldw	r2,-12(fp)
1000b2cc:	10000526 	beq	r2,zero,1000b2e4 <__swsetup_r+0x48>
1000b2d0:	e0bffd17 	ldw	r2,-12(fp)
1000b2d4:	10800e17 	ldw	r2,56(r2)
1000b2d8:	1000021e 	bne	r2,zero,1000b2e4 <__swsetup_r+0x48>
1000b2dc:	e13ffd17 	ldw	r4,-12(fp)
1000b2e0:	000db740 	call	1000db74 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
1000b2e4:	8080030b 	ldhu	r2,12(r16)
1000b2e8:	10bfffcc 	andi	r2,r2,65535
1000b2ec:	1080020c 	andi	r2,r2,8
1000b2f0:	1000241e 	bne	r2,zero,1000b384 <__swsetup_r+0xe8>
    {
      if ((fp->_flags & __SRW) == 0)
1000b2f4:	8080030b 	ldhu	r2,12(r16)
1000b2f8:	10bfffcc 	andi	r2,r2,65535
1000b2fc:	1080040c 	andi	r2,r2,16
1000b300:	1000081e 	bne	r2,zero,1000b324 <__swsetup_r+0x88>
        {
	  ptr->_errno = EBADF;
1000b304:	e0bffe17 	ldw	r2,-8(fp)
1000b308:	00c00244 	movi	r3,9
1000b30c:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
1000b310:	8080030b 	ldhu	r2,12(r16)
1000b314:	10801014 	ori	r2,r2,64
1000b318:	8080030d 	sth	r2,12(r16)
	  return EOF;
1000b31c:	00bfffc4 	movi	r2,-1
1000b320:	00004206 	br	1000b42c <__swsetup_r+0x190>
        }
      if (fp->_flags & __SRD)
1000b324:	8080030b 	ldhu	r2,12(r16)
1000b328:	10bfffcc 	andi	r2,r2,65535
1000b32c:	1080010c 	andi	r2,r2,4
1000b330:	10001126 	beq	r2,zero,1000b378 <__swsetup_r+0xdc>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
1000b334:	80800c17 	ldw	r2,48(r16)
1000b338:	10000826 	beq	r2,zero,1000b35c <__swsetup_r+0xc0>
	    FREEUB (ptr, fp);
1000b33c:	80c00c17 	ldw	r3,48(r16)
1000b340:	80801004 	addi	r2,r16,64
1000b344:	18800426 	beq	r3,r2,1000b358 <__swsetup_r+0xbc>
1000b348:	80800c17 	ldw	r2,48(r16)
1000b34c:	100b883a 	mov	r5,r2
1000b350:	e13ffe17 	ldw	r4,-8(fp)
1000b354:	000dda40 	call	1000dda4 <_free_r>
1000b358:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
1000b35c:	80c0030b 	ldhu	r3,12(r16)
1000b360:	00bff6c4 	movi	r2,-37
1000b364:	1884703a 	and	r2,r3,r2
1000b368:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
1000b36c:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
1000b370:	80800417 	ldw	r2,16(r16)
1000b374:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
1000b378:	8080030b 	ldhu	r2,12(r16)
1000b37c:	10800214 	ori	r2,r2,8
1000b380:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
1000b384:	80800417 	ldw	r2,16(r16)
1000b388:	10000b1e 	bne	r2,zero,1000b3b8 <__swsetup_r+0x11c>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
1000b38c:	8080030b 	ldhu	r2,12(r16)
1000b390:	10bfffcc 	andi	r2,r2,65535
1000b394:	1080800c 	andi	r2,r2,512
1000b398:	10000426 	beq	r2,zero,1000b3ac <__swsetup_r+0x110>
1000b39c:	8080030b 	ldhu	r2,12(r16)
1000b3a0:	10bfffcc 	andi	r2,r2,65535
1000b3a4:	1080200c 	andi	r2,r2,128
1000b3a8:	10000326 	beq	r2,zero,1000b3b8 <__swsetup_r+0x11c>
    __smakebuf_r (ptr, fp);
1000b3ac:	800b883a 	mov	r5,r16
1000b3b0:	e13ffe17 	ldw	r4,-8(fp)
1000b3b4:	000eebc0 	call	1000eebc <__smakebuf_r>

  if (fp->_flags & __SLBF)
1000b3b8:	8080030b 	ldhu	r2,12(r16)
1000b3bc:	10bfffcc 	andi	r2,r2,65535
1000b3c0:	1080004c 	andi	r2,r2,1
1000b3c4:	10000526 	beq	r2,zero,1000b3dc <__swsetup_r+0x140>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
1000b3c8:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
1000b3cc:	80800517 	ldw	r2,20(r16)
1000b3d0:	0085c83a 	sub	r2,zero,r2
1000b3d4:	80800615 	stw	r2,24(r16)
1000b3d8:	00000806 	br	1000b3fc <__swsetup_r+0x160>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
1000b3dc:	8080030b 	ldhu	r2,12(r16)
1000b3e0:	10bfffcc 	andi	r2,r2,65535
1000b3e4:	1080008c 	andi	r2,r2,2
1000b3e8:	1000021e 	bne	r2,zero,1000b3f4 <__swsetup_r+0x158>
1000b3ec:	80800517 	ldw	r2,20(r16)
1000b3f0:	00000106 	br	1000b3f8 <__swsetup_r+0x15c>
1000b3f4:	0005883a 	mov	r2,zero
1000b3f8:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
1000b3fc:	80800417 	ldw	r2,16(r16)
1000b400:	1000091e 	bne	r2,zero,1000b428 <__swsetup_r+0x18c>
1000b404:	8080030b 	ldhu	r2,12(r16)
1000b408:	10bfffcc 	andi	r2,r2,65535
1000b40c:	1080200c 	andi	r2,r2,128
1000b410:	10000526 	beq	r2,zero,1000b428 <__swsetup_r+0x18c>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
1000b414:	8080030b 	ldhu	r2,12(r16)
1000b418:	10801014 	ori	r2,r2,64
1000b41c:	8080030d 	sth	r2,12(r16)
      return EOF;
1000b420:	00bfffc4 	movi	r2,-1
1000b424:	00000106 	br	1000b42c <__swsetup_r+0x190>
    }
  return 0;
1000b428:	0005883a 	mov	r2,zero
}
1000b42c:	e6ffff04 	addi	sp,fp,-4
1000b430:	dfc00217 	ldw	ra,8(sp)
1000b434:	df000117 	ldw	fp,4(sp)
1000b438:	dc000017 	ldw	r16,0(sp)
1000b43c:	dec00304 	addi	sp,sp,12
1000b440:	f800283a 	ret

1000b444 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
1000b444:	deffef04 	addi	sp,sp,-68
1000b448:	dfc01015 	stw	ra,64(sp)
1000b44c:	df000f15 	stw	fp,60(sp)
1000b450:	df000f04 	addi	fp,sp,60
1000b454:	e13ffe15 	stw	r4,-8(fp)
1000b458:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
1000b45c:	e0bfff17 	ldw	r2,-4(fp)
1000b460:	10800417 	ldw	r2,16(r2)
1000b464:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
1000b468:	e0bffe17 	ldw	r2,-8(fp)
1000b46c:	10c00417 	ldw	r3,16(r2)
1000b470:	e0bff117 	ldw	r2,-60(fp)
1000b474:	1880020e 	bge	r3,r2,1000b480 <quorem+0x3c>
    return 0;
1000b478:	0005883a 	mov	r2,zero
1000b47c:	0000dd06 	br	1000b7f4 <quorem+0x3b0>
  sx = S->_x;
1000b480:	e0bfff17 	ldw	r2,-4(fp)
1000b484:	10800504 	addi	r2,r2,20
1000b488:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
1000b48c:	e0bff117 	ldw	r2,-60(fp)
1000b490:	10bfffc4 	addi	r2,r2,-1
1000b494:	e0bff115 	stw	r2,-60(fp)
1000b498:	e0bff117 	ldw	r2,-60(fp)
1000b49c:	1085883a 	add	r2,r2,r2
1000b4a0:	1085883a 	add	r2,r2,r2
1000b4a4:	1007883a 	mov	r3,r2
1000b4a8:	e0bff717 	ldw	r2,-36(fp)
1000b4ac:	10c5883a 	add	r2,r2,r3
1000b4b0:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
1000b4b4:	e0bffe17 	ldw	r2,-8(fp)
1000b4b8:	10800504 	addi	r2,r2,20
1000b4bc:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
1000b4c0:	e0bff117 	ldw	r2,-60(fp)
1000b4c4:	1085883a 	add	r2,r2,r2
1000b4c8:	1085883a 	add	r2,r2,r2
1000b4cc:	1007883a 	mov	r3,r2
1000b4d0:	e0bff517 	ldw	r2,-44(fp)
1000b4d4:	10c5883a 	add	r2,r2,r3
1000b4d8:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
1000b4dc:	e0bff617 	ldw	r2,-40(fp)
1000b4e0:	10c00017 	ldw	r3,0(r2)
1000b4e4:	e0bff817 	ldw	r2,-32(fp)
1000b4e8:	10800017 	ldw	r2,0(r2)
1000b4ec:	10800044 	addi	r2,r2,1
1000b4f0:	100b883a 	mov	r5,r2
1000b4f4:	1809883a 	mov	r4,r3
1000b4f8:	00024900 	call	10002490 <__udivsi3>
1000b4fc:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
1000b500:	e0bff417 	ldw	r2,-48(fp)
1000b504:	10005726 	beq	r2,zero,1000b664 <quorem+0x220>
    {
      borrow = 0;
1000b508:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
1000b50c:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
1000b510:	e0bff717 	ldw	r2,-36(fp)
1000b514:	10c00104 	addi	r3,r2,4
1000b518:	e0fff715 	stw	r3,-36(fp)
1000b51c:	10800017 	ldw	r2,0(r2)
1000b520:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
1000b524:	e0bff917 	ldw	r2,-28(fp)
1000b528:	10bfffcc 	andi	r2,r2,65535
1000b52c:	e17ff417 	ldw	r5,-48(fp)
1000b530:	1009883a 	mov	r4,r2
1000b534:	0005a080 	call	10005a08 <__mulsi3>
1000b538:	1007883a 	mov	r3,r2
1000b53c:	e0bff317 	ldw	r2,-52(fp)
1000b540:	1885883a 	add	r2,r3,r2
1000b544:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
1000b548:	e0bff917 	ldw	r2,-28(fp)
1000b54c:	1004d43a 	srli	r2,r2,16
1000b550:	e17ff417 	ldw	r5,-48(fp)
1000b554:	1009883a 	mov	r4,r2
1000b558:	0005a080 	call	10005a08 <__mulsi3>
1000b55c:	1007883a 	mov	r3,r2
1000b560:	e0bffa17 	ldw	r2,-24(fp)
1000b564:	1004d43a 	srli	r2,r2,16
1000b568:	1885883a 	add	r2,r3,r2
1000b56c:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
1000b570:	e0bffb17 	ldw	r2,-20(fp)
1000b574:	1004d43a 	srli	r2,r2,16
1000b578:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
1000b57c:	e0bff517 	ldw	r2,-44(fp)
1000b580:	10800017 	ldw	r2,0(r2)
1000b584:	10ffffcc 	andi	r3,r2,65535
1000b588:	e0bffa17 	ldw	r2,-24(fp)
1000b58c:	10bfffcc 	andi	r2,r2,65535
1000b590:	1887c83a 	sub	r3,r3,r2
1000b594:	e0bff217 	ldw	r2,-56(fp)
1000b598:	1885883a 	add	r2,r3,r2
1000b59c:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
1000b5a0:	e0bffc17 	ldw	r2,-16(fp)
1000b5a4:	1005d43a 	srai	r2,r2,16
1000b5a8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
1000b5ac:	e0bff517 	ldw	r2,-44(fp)
1000b5b0:	10800017 	ldw	r2,0(r2)
1000b5b4:	1006d43a 	srli	r3,r2,16
1000b5b8:	e0bffb17 	ldw	r2,-20(fp)
1000b5bc:	10bfffcc 	andi	r2,r2,65535
1000b5c0:	1887c83a 	sub	r3,r3,r2
1000b5c4:	e0bff217 	ldw	r2,-56(fp)
1000b5c8:	1885883a 	add	r2,r3,r2
1000b5cc:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
1000b5d0:	e0bffd17 	ldw	r2,-12(fp)
1000b5d4:	1005d43a 	srai	r2,r2,16
1000b5d8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
1000b5dc:	e0bff517 	ldw	r2,-44(fp)
1000b5e0:	10c00104 	addi	r3,r2,4
1000b5e4:	e0fff515 	stw	r3,-44(fp)
1000b5e8:	e0fffd17 	ldw	r3,-12(fp)
1000b5ec:	1808943a 	slli	r4,r3,16
1000b5f0:	e0fffc17 	ldw	r3,-16(fp)
1000b5f4:	18ffffcc 	andi	r3,r3,65535
1000b5f8:	20c6b03a 	or	r3,r4,r3
1000b5fc:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
1000b600:	e0bff717 	ldw	r2,-36(fp)
1000b604:	e0fff817 	ldw	r3,-32(fp)
1000b608:	18bfc12e 	bgeu	r3,r2,1000b510 <__alt_data_end+0xf800b510>
      if (!*bxe)
1000b60c:	e0bff617 	ldw	r2,-40(fp)
1000b610:	10800017 	ldw	r2,0(r2)
1000b614:	1000131e 	bne	r2,zero,1000b664 <quorem+0x220>
	{
	  bx = b->_x;
1000b618:	e0bffe17 	ldw	r2,-8(fp)
1000b61c:	10800504 	addi	r2,r2,20
1000b620:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
1000b624:	00000306 	br	1000b634 <quorem+0x1f0>
	    --n;
1000b628:	e0bff117 	ldw	r2,-60(fp)
1000b62c:	10bfffc4 	addi	r2,r2,-1
1000b630:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
1000b634:	e0bff617 	ldw	r2,-40(fp)
1000b638:	10bfff04 	addi	r2,r2,-4
1000b63c:	e0bff615 	stw	r2,-40(fp)
1000b640:	e0bff617 	ldw	r2,-40(fp)
1000b644:	e0fff517 	ldw	r3,-44(fp)
1000b648:	1880032e 	bgeu	r3,r2,1000b658 <quorem+0x214>
1000b64c:	e0bff617 	ldw	r2,-40(fp)
1000b650:	10800017 	ldw	r2,0(r2)
1000b654:	103ff426 	beq	r2,zero,1000b628 <__alt_data_end+0xf800b628>
	    --n;
	  b->_wds = n;
1000b658:	e0bffe17 	ldw	r2,-8(fp)
1000b65c:	e0fff117 	ldw	r3,-60(fp)
1000b660:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
1000b664:	e17fff17 	ldw	r5,-4(fp)
1000b668:	e13ffe17 	ldw	r4,-8(fp)
1000b66c:	001044c0 	call	1001044c <__mcmp>
1000b670:	10005f16 	blt	r2,zero,1000b7f0 <quorem+0x3ac>
    {
      q++;
1000b674:	e0bff417 	ldw	r2,-48(fp)
1000b678:	10800044 	addi	r2,r2,1
1000b67c:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
1000b680:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
1000b684:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
1000b688:	e0bffe17 	ldw	r2,-8(fp)
1000b68c:	10800504 	addi	r2,r2,20
1000b690:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
1000b694:	e0bfff17 	ldw	r2,-4(fp)
1000b698:	10800504 	addi	r2,r2,20
1000b69c:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
1000b6a0:	e0bff717 	ldw	r2,-36(fp)
1000b6a4:	10c00104 	addi	r3,r2,4
1000b6a8:	e0fff715 	stw	r3,-36(fp)
1000b6ac:	10800017 	ldw	r2,0(r2)
1000b6b0:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
1000b6b4:	e0bff917 	ldw	r2,-28(fp)
1000b6b8:	10ffffcc 	andi	r3,r2,65535
1000b6bc:	e0bff317 	ldw	r2,-52(fp)
1000b6c0:	1885883a 	add	r2,r3,r2
1000b6c4:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
1000b6c8:	e0bff917 	ldw	r2,-28(fp)
1000b6cc:	1006d43a 	srli	r3,r2,16
1000b6d0:	e0bffa17 	ldw	r2,-24(fp)
1000b6d4:	1004d43a 	srli	r2,r2,16
1000b6d8:	1885883a 	add	r2,r3,r2
1000b6dc:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
1000b6e0:	e0bffb17 	ldw	r2,-20(fp)
1000b6e4:	1004d43a 	srli	r2,r2,16
1000b6e8:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
1000b6ec:	e0bff517 	ldw	r2,-44(fp)
1000b6f0:	10800017 	ldw	r2,0(r2)
1000b6f4:	10ffffcc 	andi	r3,r2,65535
1000b6f8:	e0bffa17 	ldw	r2,-24(fp)
1000b6fc:	10bfffcc 	andi	r2,r2,65535
1000b700:	1887c83a 	sub	r3,r3,r2
1000b704:	e0bff217 	ldw	r2,-56(fp)
1000b708:	1885883a 	add	r2,r3,r2
1000b70c:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
1000b710:	e0bffc17 	ldw	r2,-16(fp)
1000b714:	1005d43a 	srai	r2,r2,16
1000b718:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
1000b71c:	e0bff517 	ldw	r2,-44(fp)
1000b720:	10800017 	ldw	r2,0(r2)
1000b724:	1006d43a 	srli	r3,r2,16
1000b728:	e0bffb17 	ldw	r2,-20(fp)
1000b72c:	10bfffcc 	andi	r2,r2,65535
1000b730:	1887c83a 	sub	r3,r3,r2
1000b734:	e0bff217 	ldw	r2,-56(fp)
1000b738:	1885883a 	add	r2,r3,r2
1000b73c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
1000b740:	e0bffd17 	ldw	r2,-12(fp)
1000b744:	1005d43a 	srai	r2,r2,16
1000b748:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
1000b74c:	e0bff517 	ldw	r2,-44(fp)
1000b750:	10c00104 	addi	r3,r2,4
1000b754:	e0fff515 	stw	r3,-44(fp)
1000b758:	e0fffd17 	ldw	r3,-12(fp)
1000b75c:	1808943a 	slli	r4,r3,16
1000b760:	e0fffc17 	ldw	r3,-16(fp)
1000b764:	18ffffcc 	andi	r3,r3,65535
1000b768:	20c6b03a 	or	r3,r4,r3
1000b76c:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
1000b770:	e0bff717 	ldw	r2,-36(fp)
1000b774:	e0fff817 	ldw	r3,-32(fp)
1000b778:	18bfc92e 	bgeu	r3,r2,1000b6a0 <__alt_data_end+0xf800b6a0>
      bx = b->_x;
1000b77c:	e0bffe17 	ldw	r2,-8(fp)
1000b780:	10800504 	addi	r2,r2,20
1000b784:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
1000b788:	e0bff117 	ldw	r2,-60(fp)
1000b78c:	1085883a 	add	r2,r2,r2
1000b790:	1085883a 	add	r2,r2,r2
1000b794:	1007883a 	mov	r3,r2
1000b798:	e0bff517 	ldw	r2,-44(fp)
1000b79c:	10c5883a 	add	r2,r2,r3
1000b7a0:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
1000b7a4:	e0bff617 	ldw	r2,-40(fp)
1000b7a8:	10800017 	ldw	r2,0(r2)
1000b7ac:	1000101e 	bne	r2,zero,1000b7f0 <quorem+0x3ac>
	{
	  while (--bxe > bx && !*bxe)
1000b7b0:	00000306 	br	1000b7c0 <quorem+0x37c>
	    --n;
1000b7b4:	e0bff117 	ldw	r2,-60(fp)
1000b7b8:	10bfffc4 	addi	r2,r2,-1
1000b7bc:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
1000b7c0:	e0bff617 	ldw	r2,-40(fp)
1000b7c4:	10bfff04 	addi	r2,r2,-4
1000b7c8:	e0bff615 	stw	r2,-40(fp)
1000b7cc:	e0bff617 	ldw	r2,-40(fp)
1000b7d0:	e0fff517 	ldw	r3,-44(fp)
1000b7d4:	1880032e 	bgeu	r3,r2,1000b7e4 <quorem+0x3a0>
1000b7d8:	e0bff617 	ldw	r2,-40(fp)
1000b7dc:	10800017 	ldw	r2,0(r2)
1000b7e0:	103ff426 	beq	r2,zero,1000b7b4 <__alt_data_end+0xf800b7b4>
	    --n;
	  b->_wds = n;
1000b7e4:	e0bffe17 	ldw	r2,-8(fp)
1000b7e8:	e0fff117 	ldw	r3,-60(fp)
1000b7ec:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
1000b7f0:	e0bff417 	ldw	r2,-48(fp)
}
1000b7f4:	e037883a 	mov	sp,fp
1000b7f8:	dfc00117 	ldw	ra,4(sp)
1000b7fc:	df000017 	ldw	fp,0(sp)
1000b800:	dec00204 	addi	sp,sp,8
1000b804:	f800283a 	ret

1000b808 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
1000b808:	deffcc04 	addi	sp,sp,-208
1000b80c:	dfc03315 	stw	ra,204(sp)
1000b810:	df003215 	stw	fp,200(sp)
1000b814:	dcc03115 	stw	r19,196(sp)
1000b818:	dc803015 	stw	r18,192(sp)
1000b81c:	dc402f15 	stw	r17,188(sp)
1000b820:	dc002e15 	stw	r16,184(sp)
1000b824:	df003204 	addi	fp,sp,200
1000b828:	e13ff815 	stw	r4,-32(fp)
1000b82c:	e17ff915 	stw	r5,-28(fp)
1000b830:	e1bffa15 	stw	r6,-24(fp)
1000b834:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
1000b838:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
1000b83c:	e0bff917 	ldw	r2,-28(fp)
1000b840:	e0bff215 	stw	r2,-56(fp)
1000b844:	e0bffa17 	ldw	r2,-24(fp)
1000b848:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
1000b84c:	e0bff817 	ldw	r2,-32(fp)
1000b850:	10801017 	ldw	r2,64(r2)
1000b854:	10001326 	beq	r2,zero,1000b8a4 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
1000b858:	e0bff817 	ldw	r2,-32(fp)
1000b85c:	10801017 	ldw	r2,64(r2)
1000b860:	e0fff817 	ldw	r3,-32(fp)
1000b864:	18c01117 	ldw	r3,68(r3)
1000b868:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
1000b86c:	e0bff817 	ldw	r2,-32(fp)
1000b870:	10801017 	ldw	r2,64(r2)
1000b874:	e0fff817 	ldw	r3,-32(fp)
1000b878:	18c01117 	ldw	r3,68(r3)
1000b87c:	01000044 	movi	r4,1
1000b880:	20c6983a 	sll	r3,r4,r3
1000b884:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
1000b888:	e0bff817 	ldw	r2,-32(fp)
1000b88c:	10801017 	ldw	r2,64(r2)
1000b890:	100b883a 	mov	r5,r2
1000b894:	e13ff817 	ldw	r4,-32(fp)
1000b898:	000f7640 	call	1000f764 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
1000b89c:	e0bff817 	ldw	r2,-32(fp)
1000b8a0:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
1000b8a4:	e0bff317 	ldw	r2,-52(fp)
1000b8a8:	1000090e 	bge	r2,zero,1000b8d0 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
1000b8ac:	e0800417 	ldw	r2,16(fp)
1000b8b0:	00c00044 	movi	r3,1
1000b8b4:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
1000b8b8:	e0fff317 	ldw	r3,-52(fp)
1000b8bc:	00a00034 	movhi	r2,32768
1000b8c0:	10bfffc4 	addi	r2,r2,-1
1000b8c4:	1884703a 	and	r2,r3,r2
1000b8c8:	e0bff315 	stw	r2,-52(fp)
1000b8cc:	00000206 	br	1000b8d8 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
1000b8d0:	e0800417 	ldw	r2,16(fp)
1000b8d4:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
1000b8d8:	e0bff317 	ldw	r2,-52(fp)
1000b8dc:	10dffc2c 	andhi	r3,r2,32752
1000b8e0:	009ffc34 	movhi	r2,32752
1000b8e4:	1880221e 	bne	r3,r2,1000b970 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
1000b8e8:	e0800317 	ldw	r2,12(fp)
1000b8ec:	00c9c3c4 	movi	r3,9999
1000b8f0:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
1000b8f4:	e0bff217 	ldw	r2,-56(fp)
1000b8f8:	1000081e 	bne	r2,zero,1000b91c <_dtoa_r+0x114>
1000b8fc:	e0fff317 	ldw	r3,-52(fp)
1000b900:	00800434 	movhi	r2,16
1000b904:	10bfffc4 	addi	r2,r2,-1
1000b908:	1884703a 	and	r2,r3,r2
1000b90c:	1000031e 	bne	r2,zero,1000b91c <_dtoa_r+0x114>
1000b910:	00840374 	movhi	r2,4109
1000b914:	10bdd704 	addi	r2,r2,-2212
1000b918:	00000206 	br	1000b924 <_dtoa_r+0x11c>
1000b91c:	00840374 	movhi	r2,4109
1000b920:	10bdda04 	addi	r2,r2,-2200
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
1000b924:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
1000b928:	e0800517 	ldw	r2,20(fp)
1000b92c:	10000e26 	beq	r2,zero,1000b968 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
1000b930:	e0bfe717 	ldw	r2,-100(fp)
1000b934:	108000c4 	addi	r2,r2,3
1000b938:	10800003 	ldbu	r2,0(r2)
1000b93c:	10803fcc 	andi	r2,r2,255
1000b940:	1080201c 	xori	r2,r2,128
1000b944:	10bfe004 	addi	r2,r2,-128
1000b948:	10000326 	beq	r2,zero,1000b958 <_dtoa_r+0x150>
1000b94c:	e0bfe717 	ldw	r2,-100(fp)
1000b950:	10800204 	addi	r2,r2,8
1000b954:	00000206 	br	1000b960 <_dtoa_r+0x158>
1000b958:	e0bfe717 	ldw	r2,-100(fp)
1000b95c:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
1000b960:	e0c00517 	ldw	r3,20(fp)
1000b964:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
1000b968:	e0bfe717 	ldw	r2,-100(fp)
1000b96c:	00067b06 	br	1000d35c <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
1000b970:	e0bff217 	ldw	r2,-56(fp)
1000b974:	e0fff317 	ldw	r3,-52(fp)
1000b978:	000d883a 	mov	r6,zero
1000b97c:	000f883a 	mov	r7,zero
1000b980:	1009883a 	mov	r4,r2
1000b984:	180b883a 	mov	r5,r3
1000b988:	00152180 	call	10015218 <__eqdf2>
1000b98c:	10000e1e 	bne	r2,zero,1000b9c8 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
1000b990:	e0800317 	ldw	r2,12(fp)
1000b994:	00c00044 	movi	r3,1
1000b998:	10c00015 	stw	r3,0(r2)
      s = "0";
1000b99c:	00840374 	movhi	r2,4109
1000b9a0:	10bddb04 	addi	r2,r2,-2196
1000b9a4:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
1000b9a8:	e0800517 	ldw	r2,20(fp)
1000b9ac:	10000426 	beq	r2,zero,1000b9c0 <_dtoa_r+0x1b8>
	*rve = s + 1;
1000b9b0:	e0bfe717 	ldw	r2,-100(fp)
1000b9b4:	10c00044 	addi	r3,r2,1
1000b9b8:	e0800517 	ldw	r2,20(fp)
1000b9bc:	10c00015 	stw	r3,0(r2)
      return s;
1000b9c0:	e0bfe717 	ldw	r2,-100(fp)
1000b9c4:	00066506 	br	1000d35c <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
1000b9c8:	e0bff217 	ldw	r2,-56(fp)
1000b9cc:	e0fff317 	ldw	r3,-52(fp)
1000b9d0:	e17ff104 	addi	r5,fp,-60
1000b9d4:	e13ff004 	addi	r4,fp,-64
1000b9d8:	d9000015 	stw	r4,0(sp)
1000b9dc:	280f883a 	mov	r7,r5
1000b9e0:	100b883a 	mov	r5,r2
1000b9e4:	180d883a 	mov	r6,r3
1000b9e8:	e13ff817 	ldw	r4,-32(fp)
1000b9ec:	0010ad40 	call	10010ad4 <__d2b>
1000b9f0:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
1000b9f4:	e0bff317 	ldw	r2,-52(fp)
1000b9f8:	1004d53a 	srli	r2,r2,20
1000b9fc:	1081ffcc 	andi	r2,r2,2047
1000ba00:	e0bfd215 	stw	r2,-184(fp)
1000ba04:	e0bfd217 	ldw	r2,-184(fp)
1000ba08:	10001126 	beq	r2,zero,1000ba50 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
1000ba0c:	e0bff217 	ldw	r2,-56(fp)
1000ba10:	e0fff317 	ldw	r3,-52(fp)
1000ba14:	e0bff415 	stw	r2,-48(fp)
1000ba18:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
1000ba1c:	e0fff517 	ldw	r3,-44(fp)
1000ba20:	00800434 	movhi	r2,16
1000ba24:	10bfffc4 	addi	r2,r2,-1
1000ba28:	1884703a 	and	r2,r3,r2
1000ba2c:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
1000ba30:	e0bff517 	ldw	r2,-44(fp)
1000ba34:	108ffc34 	orhi	r2,r2,16368
1000ba38:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
1000ba3c:	e0bfd217 	ldw	r2,-184(fp)
1000ba40:	10bf0044 	addi	r2,r2,-1023
1000ba44:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
1000ba48:	e03fe015 	stw	zero,-128(fp)
1000ba4c:	00002806 	br	1000baf0 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
1000ba50:	e0fff017 	ldw	r3,-64(fp)
1000ba54:	e0bff117 	ldw	r2,-60(fp)
1000ba58:	1885883a 	add	r2,r3,r2
1000ba5c:	10810c84 	addi	r2,r2,1074
1000ba60:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
1000ba64:	e0bfd217 	ldw	r2,-184(fp)
1000ba68:	10800850 	cmplti	r2,r2,33
1000ba6c:	10000b1e 	bne	r2,zero,1000ba9c <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
1000ba70:	e0fff317 	ldw	r3,-52(fp)
1000ba74:	01001004 	movi	r4,64
1000ba78:	e0bfd217 	ldw	r2,-184(fp)
1000ba7c:	2085c83a 	sub	r2,r4,r2
1000ba80:	1886983a 	sll	r3,r3,r2
1000ba84:	e13ff217 	ldw	r4,-56(fp)
1000ba88:	e0bfd217 	ldw	r2,-184(fp)
1000ba8c:	10bff804 	addi	r2,r2,-32
1000ba90:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
1000ba94:	1884b03a 	or	r2,r3,r2
1000ba98:	00000506 	br	1000bab0 <_dtoa_r+0x2a8>
1000ba9c:	e0fff217 	ldw	r3,-56(fp)
1000baa0:	01000804 	movi	r4,32
1000baa4:	e0bfd217 	ldw	r2,-184(fp)
1000baa8:	2085c83a 	sub	r2,r4,r2
1000baac:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
1000bab0:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
1000bab4:	e13fe817 	ldw	r4,-96(fp)
1000bab8:	00154d80 	call	100154d8 <__floatunsidf>
1000babc:	1009883a 	mov	r4,r2
1000bac0:	180b883a 	mov	r5,r3
1000bac4:	e13ff415 	stw	r4,-48(fp)
1000bac8:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
1000bacc:	e0fff517 	ldw	r3,-44(fp)
1000bad0:	00bf8434 	movhi	r2,65040
1000bad4:	1885883a 	add	r2,r3,r2
1000bad8:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
1000badc:	e0bfd217 	ldw	r2,-184(fp)
1000bae0:	10bef344 	addi	r2,r2,-1075
1000bae4:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
1000bae8:	00800044 	movi	r2,1
1000baec:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
1000baf0:	e0bff417 	ldw	r2,-48(fp)
1000baf4:	e0fff517 	ldw	r3,-44(fp)
1000baf8:	000d883a 	mov	r6,zero
1000bafc:	01cffe34 	movhi	r7,16376
1000bb00:	1009883a 	mov	r4,r2
1000bb04:	180b883a 	mov	r5,r3
1000bb08:	0004df00 	call	10004df0 <__subdf3>
1000bb0c:	1009883a 	mov	r4,r2
1000bb10:	180b883a 	mov	r5,r3
1000bb14:	2005883a 	mov	r2,r4
1000bb18:	2807883a 	mov	r3,r5
1000bb1c:	0198dbf4 	movhi	r6,25455
1000bb20:	3190d844 	addi	r6,r6,17249
1000bb24:	01cff4f4 	movhi	r7,16339
1000bb28:	39e1e9c4 	addi	r7,r7,-30809
1000bb2c:	1009883a 	mov	r4,r2
1000bb30:	180b883a 	mov	r5,r3
1000bb34:	00045880 	call	10004588 <__muldf3>
1000bb38:	1009883a 	mov	r4,r2
1000bb3c:	180b883a 	mov	r5,r3
1000bb40:	2005883a 	mov	r2,r4
1000bb44:	2807883a 	mov	r3,r5
1000bb48:	01a2d874 	movhi	r6,35681
1000bb4c:	31b22cc4 	addi	r6,r6,-14157
1000bb50:	01cff1f4 	movhi	r7,16327
1000bb54:	39e28a04 	addi	r7,r7,-30168
1000bb58:	1009883a 	mov	r4,r2
1000bb5c:	180b883a 	mov	r5,r3
1000bb60:	0003be80 	call	10003be8 <__adddf3>
1000bb64:	1009883a 	mov	r4,r2
1000bb68:	180b883a 	mov	r5,r3
1000bb6c:	2025883a 	mov	r18,r4
1000bb70:	2827883a 	mov	r19,r5
1000bb74:	e13fd217 	ldw	r4,-184(fp)
1000bb78:	00153fc0 	call	100153fc <__floatsidf>
1000bb7c:	1011883a 	mov	r8,r2
1000bb80:	1813883a 	mov	r9,r3
1000bb84:	019427f4 	movhi	r6,20639
1000bb88:	319e7ec4 	addi	r6,r6,31227
1000bb8c:	01cff4f4 	movhi	r7,16339
1000bb90:	39d104c4 	addi	r7,r7,17427
1000bb94:	4009883a 	mov	r4,r8
1000bb98:	480b883a 	mov	r5,r9
1000bb9c:	00045880 	call	10004588 <__muldf3>
1000bba0:	1009883a 	mov	r4,r2
1000bba4:	180b883a 	mov	r5,r3
1000bba8:	2005883a 	mov	r2,r4
1000bbac:	2807883a 	mov	r3,r5
1000bbb0:	100d883a 	mov	r6,r2
1000bbb4:	180f883a 	mov	r7,r3
1000bbb8:	9009883a 	mov	r4,r18
1000bbbc:	980b883a 	mov	r5,r19
1000bbc0:	0003be80 	call	10003be8 <__adddf3>
1000bbc4:	1009883a 	mov	r4,r2
1000bbc8:	180b883a 	mov	r5,r3
1000bbcc:	e13fe515 	stw	r4,-108(fp)
1000bbd0:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
1000bbd4:	e13fe517 	ldw	r4,-108(fp)
1000bbd8:	e17fe617 	ldw	r5,-104(fp)
1000bbdc:	001537c0 	call	1001537c <__fixdfsi>
1000bbe0:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
1000bbe4:	000d883a 	mov	r6,zero
1000bbe8:	000f883a 	mov	r7,zero
1000bbec:	e13fe517 	ldw	r4,-108(fp)
1000bbf0:	e17fe617 	ldw	r5,-104(fp)
1000bbf4:	00044940 	call	10004494 <__ledf2>
1000bbf8:	10000d0e 	bge	r2,zero,1000bc30 <_dtoa_r+0x428>
1000bbfc:	e13fd717 	ldw	r4,-164(fp)
1000bc00:	00153fc0 	call	100153fc <__floatsidf>
1000bc04:	1011883a 	mov	r8,r2
1000bc08:	1813883a 	mov	r9,r3
1000bc0c:	e1bfe517 	ldw	r6,-108(fp)
1000bc10:	e1ffe617 	ldw	r7,-104(fp)
1000bc14:	4009883a 	mov	r4,r8
1000bc18:	480b883a 	mov	r5,r9
1000bc1c:	00152180 	call	10015218 <__eqdf2>
1000bc20:	10000326 	beq	r2,zero,1000bc30 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
1000bc24:	e0bfd717 	ldw	r2,-164(fp)
1000bc28:	10bfffc4 	addi	r2,r2,-1
1000bc2c:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
1000bc30:	00800044 	movi	r2,1
1000bc34:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
1000bc38:	e0bfd717 	ldw	r2,-164(fp)
1000bc3c:	10001616 	blt	r2,zero,1000bc98 <_dtoa_r+0x490>
1000bc40:	e0bfd717 	ldw	r2,-164(fp)
1000bc44:	108005c8 	cmpgei	r2,r2,23
1000bc48:	1000131e 	bne	r2,zero,1000bc98 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
1000bc4c:	e0bff217 	ldw	r2,-56(fp)
1000bc50:	e0fff317 	ldw	r3,-52(fp)
1000bc54:	01040374 	movhi	r4,4109
1000bc58:	213de104 	addi	r4,r4,-2172
1000bc5c:	e17fd717 	ldw	r5,-164(fp)
1000bc60:	280a90fa 	slli	r5,r5,3
1000bc64:	214d883a 	add	r6,r4,r5
1000bc68:	31000017 	ldw	r4,0(r6)
1000bc6c:	31400117 	ldw	r5,4(r6)
1000bc70:	200d883a 	mov	r6,r4
1000bc74:	280f883a 	mov	r7,r5
1000bc78:	1009883a 	mov	r4,r2
1000bc7c:	180b883a 	mov	r5,r3
1000bc80:	00044940 	call	10004494 <__ledf2>
1000bc84:	1000030e 	bge	r2,zero,1000bc94 <_dtoa_r+0x48c>
	k--;
1000bc88:	e0bfd717 	ldw	r2,-164(fp)
1000bc8c:	10bfffc4 	addi	r2,r2,-1
1000bc90:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
1000bc94:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
1000bc98:	e0fff017 	ldw	r3,-64(fp)
1000bc9c:	e0bfd217 	ldw	r2,-184(fp)
1000bca0:	1885c83a 	sub	r2,r3,r2
1000bca4:	10bfffc4 	addi	r2,r2,-1
1000bca8:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
1000bcac:	e0bfd617 	ldw	r2,-168(fp)
1000bcb0:	10000416 	blt	r2,zero,1000bcc4 <_dtoa_r+0x4bc>
    {
      b2 = 0;
1000bcb4:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
1000bcb8:	e0bfd617 	ldw	r2,-168(fp)
1000bcbc:	e0bfdc15 	stw	r2,-144(fp)
1000bcc0:	00000406 	br	1000bcd4 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
1000bcc4:	e0bfd617 	ldw	r2,-168(fp)
1000bcc8:	0085c83a 	sub	r2,zero,r2
1000bccc:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
1000bcd0:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
1000bcd4:	e0bfd717 	ldw	r2,-164(fp)
1000bcd8:	10000816 	blt	r2,zero,1000bcfc <_dtoa_r+0x4f4>
    {
      b5 = 0;
1000bcdc:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
1000bce0:	e0bfd717 	ldw	r2,-164(fp)
1000bce4:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
1000bce8:	e0ffdc17 	ldw	r3,-144(fp)
1000bcec:	e0bfd717 	ldw	r2,-164(fp)
1000bcf0:	1885883a 	add	r2,r3,r2
1000bcf4:	e0bfdc15 	stw	r2,-144(fp)
1000bcf8:	00000806 	br	1000bd1c <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
1000bcfc:	e0ffcf17 	ldw	r3,-196(fp)
1000bd00:	e0bfd717 	ldw	r2,-164(fp)
1000bd04:	1885c83a 	sub	r2,r3,r2
1000bd08:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
1000bd0c:	e0bfd717 	ldw	r2,-164(fp)
1000bd10:	0085c83a 	sub	r2,zero,r2
1000bd14:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
1000bd18:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
1000bd1c:	e0bffb17 	ldw	r2,-20(fp)
1000bd20:	10000316 	blt	r2,zero,1000bd30 <_dtoa_r+0x528>
1000bd24:	e0bffb17 	ldw	r2,-20(fp)
1000bd28:	10800290 	cmplti	r2,r2,10
1000bd2c:	1000011e 	bne	r2,zero,1000bd34 <_dtoa_r+0x52c>
    mode = 0;
1000bd30:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
1000bd34:	00800044 	movi	r2,1
1000bd38:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
1000bd3c:	e0bffb17 	ldw	r2,-20(fp)
1000bd40:	10800190 	cmplti	r2,r2,6
1000bd44:	1000041e 	bne	r2,zero,1000bd58 <_dtoa_r+0x550>
    {
      mode -= 4;
1000bd48:	e0bffb17 	ldw	r2,-20(fp)
1000bd4c:	10bfff04 	addi	r2,r2,-4
1000bd50:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
1000bd54:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
1000bd58:	00800044 	movi	r2,1
1000bd5c:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
1000bd60:	00bfffc4 	movi	r2,-1
1000bd64:	e0bfd515 	stw	r2,-172(fp)
1000bd68:	e0bfd517 	ldw	r2,-172(fp)
1000bd6c:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
1000bd70:	e0bffb17 	ldw	r2,-20(fp)
1000bd74:	108001a8 	cmpgeui	r2,r2,6
1000bd78:	10002c1e 	bne	r2,zero,1000be2c <_dtoa_r+0x624>
1000bd7c:	e0bffb17 	ldw	r2,-20(fp)
1000bd80:	100690ba 	slli	r3,r2,2
1000bd84:	00840074 	movhi	r2,4097
1000bd88:	10af6604 	addi	r2,r2,-17000
1000bd8c:	1885883a 	add	r2,r3,r2
1000bd90:	10800017 	ldw	r2,0(r2)
1000bd94:	1000683a 	jmp	r2
1000bd98:	1000bdb0 	cmpltui	zero,r2,758
1000bd9c:	1000bdb0 	cmpltui	zero,r2,758
1000bda0:	1000bdc0 	call	11000bdc <__alt_heap_start+0xf1df68>
1000bda4:	1000bdf0 	cmpltui	zero,r2,759
1000bda8:	1000bdc4 	addi	zero,r2,759
1000bdac:	1000bdf4 	orhi	zero,r2,759
    {
    case 0:
    case 1:
      i = 18;
1000bdb0:	00800484 	movi	r2,18
1000bdb4:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
1000bdb8:	e0000215 	stw	zero,8(fp)
      break;
1000bdbc:	00001b06 	br	1000be2c <_dtoa_r+0x624>
    case 2:
      leftright = 0;
1000bdc0:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
1000bdc4:	e0800217 	ldw	r2,8(fp)
1000bdc8:	00800216 	blt	zero,r2,1000bdd4 <_dtoa_r+0x5cc>
	ndigits = 1;
1000bdcc:	00800044 	movi	r2,1
1000bdd0:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
1000bdd4:	e0800217 	ldw	r2,8(fp)
1000bdd8:	e0bfd215 	stw	r2,-184(fp)
1000bddc:	e0bfd217 	ldw	r2,-184(fp)
1000bde0:	e0bfd515 	stw	r2,-172(fp)
1000bde4:	e0bfd517 	ldw	r2,-172(fp)
1000bde8:	e0bfd415 	stw	r2,-176(fp)
      break;
1000bdec:	00000f06 	br	1000be2c <_dtoa_r+0x624>
    case 3:
      leftright = 0;
1000bdf0:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
1000bdf4:	e0c00217 	ldw	r3,8(fp)
1000bdf8:	e0bfd717 	ldw	r2,-164(fp)
1000bdfc:	1885883a 	add	r2,r3,r2
1000be00:	10800044 	addi	r2,r2,1
1000be04:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
1000be08:	e0bfd217 	ldw	r2,-184(fp)
1000be0c:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
1000be10:	e0bfd217 	ldw	r2,-184(fp)
1000be14:	10bfffc4 	addi	r2,r2,-1
1000be18:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
1000be1c:	e0bfd217 	ldw	r2,-184(fp)
1000be20:	00800216 	blt	zero,r2,1000be2c <_dtoa_r+0x624>
	i = 1;
1000be24:	00800044 	movi	r2,1
1000be28:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
1000be2c:	00800104 	movi	r2,4
1000be30:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
1000be34:	e0bff817 	ldw	r2,-32(fp)
1000be38:	10001115 	stw	zero,68(r2)
1000be3c:	00000806 	br	1000be60 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
1000be40:	e0bff817 	ldw	r2,-32(fp)
1000be44:	10801117 	ldw	r2,68(r2)
1000be48:	10c00044 	addi	r3,r2,1
1000be4c:	e0bff817 	ldw	r2,-32(fp)
1000be50:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
1000be54:	e0bfd617 	ldw	r2,-168(fp)
1000be58:	1085883a 	add	r2,r2,r2
1000be5c:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
1000be60:	e0bfd617 	ldw	r2,-168(fp)
1000be64:	10800504 	addi	r2,r2,20
1000be68:	e0ffd217 	ldw	r3,-184(fp)
1000be6c:	18bff42e 	bgeu	r3,r2,1000be40 <__alt_data_end+0xf800be40>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
1000be70:	e0bff817 	ldw	r2,-32(fp)
1000be74:	10801117 	ldw	r2,68(r2)
1000be78:	100b883a 	mov	r5,r2
1000be7c:	e13ff817 	ldw	r4,-32(fp)
1000be80:	000f6340 	call	1000f634 <_Balloc>
1000be84:	1007883a 	mov	r3,r2
1000be88:	e0bff817 	ldw	r2,-32(fp)
1000be8c:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
1000be90:	e0bff817 	ldw	r2,-32(fp)
1000be94:	10801017 	ldw	r2,64(r2)
1000be98:	e0bfe915 	stw	r2,-92(fp)
1000be9c:	e0bfe917 	ldw	r2,-92(fp)
1000bea0:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
1000bea4:	e0bfd417 	ldw	r2,-176(fp)
1000bea8:	10021616 	blt	r2,zero,1000c704 <_dtoa_r+0xefc>
1000beac:	e0bfd417 	ldw	r2,-176(fp)
1000beb0:	108003c8 	cmpgei	r2,r2,15
1000beb4:	1002131e 	bne	r2,zero,1000c704 <_dtoa_r+0xefc>
1000beb8:	e0bfdf17 	ldw	r2,-132(fp)
1000bebc:	10021126 	beq	r2,zero,1000c704 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
1000bec0:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
1000bec4:	e0bff217 	ldw	r2,-56(fp)
1000bec8:	e0fff317 	ldw	r3,-52(fp)
1000becc:	e0bff415 	stw	r2,-48(fp)
1000bed0:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
1000bed4:	e0bfd717 	ldw	r2,-164(fp)
1000bed8:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
1000bedc:	e0bfd417 	ldw	r2,-176(fp)
1000bee0:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
1000bee4:	00800084 	movi	r2,2
1000bee8:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
1000beec:	e0bfd717 	ldw	r2,-164(fp)
1000bef0:	0080540e 	bge	zero,r2,1000c044 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
1000bef4:	e0bfd717 	ldw	r2,-164(fp)
1000bef8:	10c003cc 	andi	r3,r2,15
1000befc:	00840374 	movhi	r2,4109
1000bf00:	10bde104 	addi	r2,r2,-2172
1000bf04:	180690fa 	slli	r3,r3,3
1000bf08:	10c5883a 	add	r2,r2,r3
1000bf0c:	10c00017 	ldw	r3,0(r2)
1000bf10:	e0ffe515 	stw	r3,-108(fp)
1000bf14:	10800117 	ldw	r2,4(r2)
1000bf18:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
1000bf1c:	e0bfd717 	ldw	r2,-164(fp)
1000bf20:	1005d13a 	srai	r2,r2,4
1000bf24:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
1000bf28:	e0bfd617 	ldw	r2,-168(fp)
1000bf2c:	1080040c 	andi	r2,r2,16
1000bf30:	10003426 	beq	r2,zero,1000c004 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
1000bf34:	e0bfd617 	ldw	r2,-168(fp)
1000bf38:	108003cc 	andi	r2,r2,15
1000bf3c:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
1000bf40:	e0bff217 	ldw	r2,-56(fp)
1000bf44:	e0fff317 	ldw	r3,-52(fp)
1000bf48:	01840374 	movhi	r6,4109
1000bf4c:	31be1304 	addi	r6,r6,-1972
1000bf50:	31000817 	ldw	r4,32(r6)
1000bf54:	31400917 	ldw	r5,36(r6)
1000bf58:	200d883a 	mov	r6,r4
1000bf5c:	280f883a 	mov	r7,r5
1000bf60:	1009883a 	mov	r4,r2
1000bf64:	180b883a 	mov	r5,r3
1000bf68:	00148480 	call	10014848 <__divdf3>
1000bf6c:	1009883a 	mov	r4,r2
1000bf70:	180b883a 	mov	r5,r3
1000bf74:	2005883a 	mov	r2,r4
1000bf78:	2807883a 	mov	r3,r5
1000bf7c:	e0bff215 	stw	r2,-56(fp)
1000bf80:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
1000bf84:	e0bfd317 	ldw	r2,-180(fp)
1000bf88:	10800044 	addi	r2,r2,1
1000bf8c:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
1000bf90:	00001c06 	br	1000c004 <_dtoa_r+0x7fc>
	    if (j & 1)
1000bf94:	e0bfd617 	ldw	r2,-168(fp)
1000bf98:	1080004c 	andi	r2,r2,1
1000bf9c:	10001326 	beq	r2,zero,1000bfec <_dtoa_r+0x7e4>
	      {
		ieps++;
1000bfa0:	e0bfd317 	ldw	r2,-180(fp)
1000bfa4:	10800044 	addi	r2,r2,1
1000bfa8:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
1000bfac:	00840374 	movhi	r2,4109
1000bfb0:	10be1304 	addi	r2,r2,-1972
1000bfb4:	e0ffd217 	ldw	r3,-184(fp)
1000bfb8:	180690fa 	slli	r3,r3,3
1000bfbc:	10c9883a 	add	r4,r2,r3
1000bfc0:	20800017 	ldw	r2,0(r4)
1000bfc4:	20c00117 	ldw	r3,4(r4)
1000bfc8:	100d883a 	mov	r6,r2
1000bfcc:	180f883a 	mov	r7,r3
1000bfd0:	e13fe517 	ldw	r4,-108(fp)
1000bfd4:	e17fe617 	ldw	r5,-104(fp)
1000bfd8:	00045880 	call	10004588 <__muldf3>
1000bfdc:	1009883a 	mov	r4,r2
1000bfe0:	180b883a 	mov	r5,r3
1000bfe4:	e13fe515 	stw	r4,-108(fp)
1000bfe8:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
1000bfec:	e0bfd617 	ldw	r2,-168(fp)
1000bff0:	1005d07a 	srai	r2,r2,1
1000bff4:	e0bfd615 	stw	r2,-168(fp)
1000bff8:	e0bfd217 	ldw	r2,-184(fp)
1000bffc:	10800044 	addi	r2,r2,1
1000c000:	e0bfd215 	stw	r2,-184(fp)
1000c004:	e0bfd617 	ldw	r2,-168(fp)
1000c008:	103fe21e 	bne	r2,zero,1000bf94 <__alt_data_end+0xf800bf94>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
1000c00c:	e0bff217 	ldw	r2,-56(fp)
1000c010:	e0fff317 	ldw	r3,-52(fp)
1000c014:	e1bfe517 	ldw	r6,-108(fp)
1000c018:	e1ffe617 	ldw	r7,-104(fp)
1000c01c:	1009883a 	mov	r4,r2
1000c020:	180b883a 	mov	r5,r3
1000c024:	00148480 	call	10014848 <__divdf3>
1000c028:	1009883a 	mov	r4,r2
1000c02c:	180b883a 	mov	r5,r3
1000c030:	2005883a 	mov	r2,r4
1000c034:	2807883a 	mov	r3,r5
1000c038:	e0bff215 	stw	r2,-56(fp)
1000c03c:	e0fff315 	stw	r3,-52(fp)
1000c040:	00004006 	br	1000c144 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
1000c044:	e0bfd717 	ldw	r2,-164(fp)
1000c048:	0085c83a 	sub	r2,zero,r2
1000c04c:	e0bfec15 	stw	r2,-80(fp)
1000c050:	e0bfec17 	ldw	r2,-80(fp)
1000c054:	10003b26 	beq	r2,zero,1000c144 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
1000c058:	e0bff217 	ldw	r2,-56(fp)
1000c05c:	e0fff317 	ldw	r3,-52(fp)
1000c060:	e13fec17 	ldw	r4,-80(fp)
1000c064:	214003cc 	andi	r5,r4,15
1000c068:	01040374 	movhi	r4,4109
1000c06c:	213de104 	addi	r4,r4,-2172
1000c070:	280a90fa 	slli	r5,r5,3
1000c074:	214d883a 	add	r6,r4,r5
1000c078:	31000017 	ldw	r4,0(r6)
1000c07c:	31400117 	ldw	r5,4(r6)
1000c080:	200d883a 	mov	r6,r4
1000c084:	280f883a 	mov	r7,r5
1000c088:	1009883a 	mov	r4,r2
1000c08c:	180b883a 	mov	r5,r3
1000c090:	00045880 	call	10004588 <__muldf3>
1000c094:	1009883a 	mov	r4,r2
1000c098:	180b883a 	mov	r5,r3
1000c09c:	2005883a 	mov	r2,r4
1000c0a0:	2807883a 	mov	r3,r5
1000c0a4:	e0bff215 	stw	r2,-56(fp)
1000c0a8:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
1000c0ac:	e0bfec17 	ldw	r2,-80(fp)
1000c0b0:	1005d13a 	srai	r2,r2,4
1000c0b4:	e0bfd615 	stw	r2,-168(fp)
1000c0b8:	00002006 	br	1000c13c <_dtoa_r+0x934>
	    if (j & 1)
1000c0bc:	e0bfd617 	ldw	r2,-168(fp)
1000c0c0:	1080004c 	andi	r2,r2,1
1000c0c4:	10001726 	beq	r2,zero,1000c124 <_dtoa_r+0x91c>
	      {
		ieps++;
1000c0c8:	e0bfd317 	ldw	r2,-180(fp)
1000c0cc:	10800044 	addi	r2,r2,1
1000c0d0:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
1000c0d4:	e0bff217 	ldw	r2,-56(fp)
1000c0d8:	e0fff317 	ldw	r3,-52(fp)
1000c0dc:	01040374 	movhi	r4,4109
1000c0e0:	213e1304 	addi	r4,r4,-1972
1000c0e4:	e17fd217 	ldw	r5,-184(fp)
1000c0e8:	280a90fa 	slli	r5,r5,3
1000c0ec:	214d883a 	add	r6,r4,r5
1000c0f0:	31000017 	ldw	r4,0(r6)
1000c0f4:	31400117 	ldw	r5,4(r6)
1000c0f8:	200d883a 	mov	r6,r4
1000c0fc:	280f883a 	mov	r7,r5
1000c100:	1009883a 	mov	r4,r2
1000c104:	180b883a 	mov	r5,r3
1000c108:	00045880 	call	10004588 <__muldf3>
1000c10c:	1009883a 	mov	r4,r2
1000c110:	180b883a 	mov	r5,r3
1000c114:	2005883a 	mov	r2,r4
1000c118:	2807883a 	mov	r3,r5
1000c11c:	e0bff215 	stw	r2,-56(fp)
1000c120:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
1000c124:	e0bfd617 	ldw	r2,-168(fp)
1000c128:	1005d07a 	srai	r2,r2,1
1000c12c:	e0bfd615 	stw	r2,-168(fp)
1000c130:	e0bfd217 	ldw	r2,-184(fp)
1000c134:	10800044 	addi	r2,r2,1
1000c138:	e0bfd215 	stw	r2,-184(fp)
1000c13c:	e0bfd617 	ldw	r2,-168(fp)
1000c140:	103fde1e 	bne	r2,zero,1000c0bc <__alt_data_end+0xf800c0bc>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
1000c144:	e0bfd817 	ldw	r2,-160(fp)
1000c148:	10002126 	beq	r2,zero,1000c1d0 <_dtoa_r+0x9c8>
1000c14c:	e0bff217 	ldw	r2,-56(fp)
1000c150:	e0fff317 	ldw	r3,-52(fp)
1000c154:	000d883a 	mov	r6,zero
1000c158:	01cffc34 	movhi	r7,16368
1000c15c:	1009883a 	mov	r4,r2
1000c160:	180b883a 	mov	r5,r3
1000c164:	00044940 	call	10004494 <__ledf2>
1000c168:	1000190e 	bge	r2,zero,1000c1d0 <_dtoa_r+0x9c8>
1000c16c:	e0bfd417 	ldw	r2,-176(fp)
1000c170:	0080170e 	bge	zero,r2,1000c1d0 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
1000c174:	e0bfd517 	ldw	r2,-172(fp)
1000c178:	0081550e 	bge	zero,r2,1000c6d0 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
1000c17c:	e0bfd517 	ldw	r2,-172(fp)
1000c180:	e0bfd415 	stw	r2,-176(fp)
	  k--;
1000c184:	e0bfd717 	ldw	r2,-164(fp)
1000c188:	10bfffc4 	addi	r2,r2,-1
1000c18c:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
1000c190:	e0bff217 	ldw	r2,-56(fp)
1000c194:	e0fff317 	ldw	r3,-52(fp)
1000c198:	000d883a 	mov	r6,zero
1000c19c:	01d00934 	movhi	r7,16420
1000c1a0:	1009883a 	mov	r4,r2
1000c1a4:	180b883a 	mov	r5,r3
1000c1a8:	00045880 	call	10004588 <__muldf3>
1000c1ac:	1009883a 	mov	r4,r2
1000c1b0:	180b883a 	mov	r5,r3
1000c1b4:	2005883a 	mov	r2,r4
1000c1b8:	2807883a 	mov	r3,r5
1000c1bc:	e0bff215 	stw	r2,-56(fp)
1000c1c0:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
1000c1c4:	e0bfd317 	ldw	r2,-180(fp)
1000c1c8:	10800044 	addi	r2,r2,1
1000c1cc:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
1000c1d0:	e13fd317 	ldw	r4,-180(fp)
1000c1d4:	00153fc0 	call	100153fc <__floatsidf>
1000c1d8:	1011883a 	mov	r8,r2
1000c1dc:	1813883a 	mov	r9,r3
1000c1e0:	e0bff217 	ldw	r2,-56(fp)
1000c1e4:	e0fff317 	ldw	r3,-52(fp)
1000c1e8:	100d883a 	mov	r6,r2
1000c1ec:	180f883a 	mov	r7,r3
1000c1f0:	4009883a 	mov	r4,r8
1000c1f4:	480b883a 	mov	r5,r9
1000c1f8:	00045880 	call	10004588 <__muldf3>
1000c1fc:	1009883a 	mov	r4,r2
1000c200:	180b883a 	mov	r5,r3
1000c204:	2005883a 	mov	r2,r4
1000c208:	2807883a 	mov	r3,r5
1000c20c:	000d883a 	mov	r6,zero
1000c210:	01d00734 	movhi	r7,16412
1000c214:	1009883a 	mov	r4,r2
1000c218:	180b883a 	mov	r5,r3
1000c21c:	0003be80 	call	10003be8 <__adddf3>
1000c220:	1009883a 	mov	r4,r2
1000c224:	180b883a 	mov	r5,r3
1000c228:	2005883a 	mov	r2,r4
1000c22c:	2807883a 	mov	r3,r5
1000c230:	e0bff615 	stw	r2,-40(fp)
1000c234:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
1000c238:	e0fff717 	ldw	r3,-36(fp)
1000c23c:	00bf3034 	movhi	r2,64704
1000c240:	1885883a 	add	r2,r3,r2
1000c244:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
1000c248:	e0bfd417 	ldw	r2,-176(fp)
1000c24c:	1000271e 	bne	r2,zero,1000c2ec <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
1000c250:	e03fe315 	stw	zero,-116(fp)
1000c254:	e0bfe317 	ldw	r2,-116(fp)
1000c258:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
1000c25c:	e0bff217 	ldw	r2,-56(fp)
1000c260:	e0fff317 	ldw	r3,-52(fp)
1000c264:	000d883a 	mov	r6,zero
1000c268:	01d00534 	movhi	r7,16404
1000c26c:	1009883a 	mov	r4,r2
1000c270:	180b883a 	mov	r5,r3
1000c274:	0004df00 	call	10004df0 <__subdf3>
1000c278:	1009883a 	mov	r4,r2
1000c27c:	180b883a 	mov	r5,r3
1000c280:	2005883a 	mov	r2,r4
1000c284:	2807883a 	mov	r3,r5
1000c288:	e0bff215 	stw	r2,-56(fp)
1000c28c:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
1000c290:	e0bff217 	ldw	r2,-56(fp)
1000c294:	e0fff317 	ldw	r3,-52(fp)
1000c298:	e13ff617 	ldw	r4,-40(fp)
1000c29c:	e17ff717 	ldw	r5,-36(fp)
1000c2a0:	200d883a 	mov	r6,r4
1000c2a4:	280f883a 	mov	r7,r5
1000c2a8:	1009883a 	mov	r4,r2
1000c2ac:	180b883a 	mov	r5,r3
1000c2b0:	00152a00 	call	100152a0 <__gedf2>
1000c2b4:	0082eb16 	blt	zero,r2,1000ce64 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
1000c2b8:	e23ff217 	ldw	r8,-56(fp)
1000c2bc:	e27ff317 	ldw	r9,-52(fp)
1000c2c0:	e0bff617 	ldw	r2,-40(fp)
1000c2c4:	e0fff717 	ldw	r3,-36(fp)
1000c2c8:	1021883a 	mov	r16,r2
1000c2cc:	1c60003c 	xorhi	r17,r3,32768
1000c2d0:	800d883a 	mov	r6,r16
1000c2d4:	880f883a 	mov	r7,r17
1000c2d8:	4009883a 	mov	r4,r8
1000c2dc:	480b883a 	mov	r5,r9
1000c2e0:	00044940 	call	10004494 <__ledf2>
1000c2e4:	1002da16 	blt	r2,zero,1000ce50 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
1000c2e8:	0000fc06 	br	1000c6dc <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
1000c2ec:	e0bfd917 	ldw	r2,-156(fp)
1000c2f0:	10007a26 	beq	r2,zero,1000c4dc <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
1000c2f4:	e0bfd417 	ldw	r2,-176(fp)
1000c2f8:	10ffffc4 	addi	r3,r2,-1
1000c2fc:	00840374 	movhi	r2,4109
1000c300:	10bde104 	addi	r2,r2,-2172
1000c304:	180690fa 	slli	r3,r3,3
1000c308:	10c9883a 	add	r4,r2,r3
1000c30c:	20800017 	ldw	r2,0(r4)
1000c310:	20c00117 	ldw	r3,4(r4)
1000c314:	100d883a 	mov	r6,r2
1000c318:	180f883a 	mov	r7,r3
1000c31c:	0009883a 	mov	r4,zero
1000c320:	014ff834 	movhi	r5,16352
1000c324:	00148480 	call	10014848 <__divdf3>
1000c328:	1009883a 	mov	r4,r2
1000c32c:	180b883a 	mov	r5,r3
1000c330:	2011883a 	mov	r8,r4
1000c334:	2813883a 	mov	r9,r5
1000c338:	e0bff617 	ldw	r2,-40(fp)
1000c33c:	e0fff717 	ldw	r3,-36(fp)
1000c340:	100d883a 	mov	r6,r2
1000c344:	180f883a 	mov	r7,r3
1000c348:	4009883a 	mov	r4,r8
1000c34c:	480b883a 	mov	r5,r9
1000c350:	0004df00 	call	10004df0 <__subdf3>
1000c354:	1009883a 	mov	r4,r2
1000c358:	180b883a 	mov	r5,r3
1000c35c:	2005883a 	mov	r2,r4
1000c360:	2807883a 	mov	r3,r5
1000c364:	e0bff615 	stw	r2,-40(fp)
1000c368:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
1000c36c:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
1000c370:	e0bff217 	ldw	r2,-56(fp)
1000c374:	e0fff317 	ldw	r3,-52(fp)
1000c378:	1009883a 	mov	r4,r2
1000c37c:	180b883a 	mov	r5,r3
1000c380:	001537c0 	call	1001537c <__fixdfsi>
1000c384:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
1000c388:	e43ff217 	ldw	r16,-56(fp)
1000c38c:	e47ff317 	ldw	r17,-52(fp)
1000c390:	e13fed17 	ldw	r4,-76(fp)
1000c394:	00153fc0 	call	100153fc <__floatsidf>
1000c398:	1009883a 	mov	r4,r2
1000c39c:	180b883a 	mov	r5,r3
1000c3a0:	200d883a 	mov	r6,r4
1000c3a4:	280f883a 	mov	r7,r5
1000c3a8:	8009883a 	mov	r4,r16
1000c3ac:	880b883a 	mov	r5,r17
1000c3b0:	0004df00 	call	10004df0 <__subdf3>
1000c3b4:	1009883a 	mov	r4,r2
1000c3b8:	180b883a 	mov	r5,r3
1000c3bc:	2005883a 	mov	r2,r4
1000c3c0:	2807883a 	mov	r3,r5
1000c3c4:	e0bff215 	stw	r2,-56(fp)
1000c3c8:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
1000c3cc:	e0bfe717 	ldw	r2,-100(fp)
1000c3d0:	10c00044 	addi	r3,r2,1
1000c3d4:	e0ffe715 	stw	r3,-100(fp)
1000c3d8:	e0ffed17 	ldw	r3,-76(fp)
1000c3dc:	18c00c04 	addi	r3,r3,48
1000c3e0:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
1000c3e4:	e0bff217 	ldw	r2,-56(fp)
1000c3e8:	e0fff317 	ldw	r3,-52(fp)
1000c3ec:	e13ff617 	ldw	r4,-40(fp)
1000c3f0:	e17ff717 	ldw	r5,-36(fp)
1000c3f4:	200d883a 	mov	r6,r4
1000c3f8:	280f883a 	mov	r7,r5
1000c3fc:	1009883a 	mov	r4,r2
1000c400:	180b883a 	mov	r5,r3
1000c404:	00044940 	call	10004494 <__ledf2>
1000c408:	1003c416 	blt	r2,zero,1000d31c <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
1000c40c:	e0bff217 	ldw	r2,-56(fp)
1000c410:	e0fff317 	ldw	r3,-52(fp)
1000c414:	100d883a 	mov	r6,r2
1000c418:	180f883a 	mov	r7,r3
1000c41c:	0009883a 	mov	r4,zero
1000c420:	014ffc34 	movhi	r5,16368
1000c424:	0004df00 	call	10004df0 <__subdf3>
1000c428:	1009883a 	mov	r4,r2
1000c42c:	180b883a 	mov	r5,r3
1000c430:	2011883a 	mov	r8,r4
1000c434:	2813883a 	mov	r9,r5
1000c438:	e0bff617 	ldw	r2,-40(fp)
1000c43c:	e0fff717 	ldw	r3,-36(fp)
1000c440:	100d883a 	mov	r6,r2
1000c444:	180f883a 	mov	r7,r3
1000c448:	4009883a 	mov	r4,r8
1000c44c:	480b883a 	mov	r5,r9
1000c450:	00044940 	call	10004494 <__ledf2>
1000c454:	10012916 	blt	r2,zero,1000c8fc <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
1000c458:	e0bfd217 	ldw	r2,-184(fp)
1000c45c:	10800044 	addi	r2,r2,1
1000c460:	e0bfd215 	stw	r2,-184(fp)
1000c464:	e0ffd217 	ldw	r3,-184(fp)
1000c468:	e0bfd417 	ldw	r2,-176(fp)
1000c46c:	18809a0e 	bge	r3,r2,1000c6d8 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
1000c470:	e0bff617 	ldw	r2,-40(fp)
1000c474:	e0fff717 	ldw	r3,-36(fp)
1000c478:	000d883a 	mov	r6,zero
1000c47c:	01d00934 	movhi	r7,16420
1000c480:	1009883a 	mov	r4,r2
1000c484:	180b883a 	mov	r5,r3
1000c488:	00045880 	call	10004588 <__muldf3>
1000c48c:	1009883a 	mov	r4,r2
1000c490:	180b883a 	mov	r5,r3
1000c494:	2005883a 	mov	r2,r4
1000c498:	2807883a 	mov	r3,r5
1000c49c:	e0bff615 	stw	r2,-40(fp)
1000c4a0:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
1000c4a4:	e0bff217 	ldw	r2,-56(fp)
1000c4a8:	e0fff317 	ldw	r3,-52(fp)
1000c4ac:	000d883a 	mov	r6,zero
1000c4b0:	01d00934 	movhi	r7,16420
1000c4b4:	1009883a 	mov	r4,r2
1000c4b8:	180b883a 	mov	r5,r3
1000c4bc:	00045880 	call	10004588 <__muldf3>
1000c4c0:	1009883a 	mov	r4,r2
1000c4c4:	180b883a 	mov	r5,r3
1000c4c8:	2005883a 	mov	r2,r4
1000c4cc:	2807883a 	mov	r3,r5
1000c4d0:	e0bff215 	stw	r2,-56(fp)
1000c4d4:	e0fff315 	stw	r3,-52(fp)
	    }
1000c4d8:	003fa506 	br	1000c370 <__alt_data_end+0xf800c370>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
1000c4dc:	e0bff617 	ldw	r2,-40(fp)
1000c4e0:	e0fff717 	ldw	r3,-36(fp)
1000c4e4:	e13fd417 	ldw	r4,-176(fp)
1000c4e8:	217fffc4 	addi	r5,r4,-1
1000c4ec:	01040374 	movhi	r4,4109
1000c4f0:	213de104 	addi	r4,r4,-2172
1000c4f4:	280a90fa 	slli	r5,r5,3
1000c4f8:	214d883a 	add	r6,r4,r5
1000c4fc:	31000017 	ldw	r4,0(r6)
1000c500:	31400117 	ldw	r5,4(r6)
1000c504:	200d883a 	mov	r6,r4
1000c508:	280f883a 	mov	r7,r5
1000c50c:	1009883a 	mov	r4,r2
1000c510:	180b883a 	mov	r5,r3
1000c514:	00045880 	call	10004588 <__muldf3>
1000c518:	1009883a 	mov	r4,r2
1000c51c:	180b883a 	mov	r5,r3
1000c520:	2005883a 	mov	r2,r4
1000c524:	2807883a 	mov	r3,r5
1000c528:	e0bff615 	stw	r2,-40(fp)
1000c52c:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
1000c530:	00800044 	movi	r2,1
1000c534:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
1000c538:	e0bff217 	ldw	r2,-56(fp)
1000c53c:	e0fff317 	ldw	r3,-52(fp)
1000c540:	1009883a 	mov	r4,r2
1000c544:	180b883a 	mov	r5,r3
1000c548:	001537c0 	call	1001537c <__fixdfsi>
1000c54c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
1000c550:	e43ff217 	ldw	r16,-56(fp)
1000c554:	e47ff317 	ldw	r17,-52(fp)
1000c558:	e13fed17 	ldw	r4,-76(fp)
1000c55c:	00153fc0 	call	100153fc <__floatsidf>
1000c560:	1009883a 	mov	r4,r2
1000c564:	180b883a 	mov	r5,r3
1000c568:	200d883a 	mov	r6,r4
1000c56c:	280f883a 	mov	r7,r5
1000c570:	8009883a 	mov	r4,r16
1000c574:	880b883a 	mov	r5,r17
1000c578:	0004df00 	call	10004df0 <__subdf3>
1000c57c:	1009883a 	mov	r4,r2
1000c580:	180b883a 	mov	r5,r3
1000c584:	2005883a 	mov	r2,r4
1000c588:	2807883a 	mov	r3,r5
1000c58c:	e0bff215 	stw	r2,-56(fp)
1000c590:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
1000c594:	e0bfe717 	ldw	r2,-100(fp)
1000c598:	10c00044 	addi	r3,r2,1
1000c59c:	e0ffe715 	stw	r3,-100(fp)
1000c5a0:	e0ffed17 	ldw	r3,-76(fp)
1000c5a4:	18c00c04 	addi	r3,r3,48
1000c5a8:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
1000c5ac:	e0ffd217 	ldw	r3,-184(fp)
1000c5b0:	e0bfd417 	ldw	r2,-176(fp)
1000c5b4:	1880351e 	bne	r3,r2,1000c68c <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
1000c5b8:	e43ff217 	ldw	r16,-56(fp)
1000c5bc:	e47ff317 	ldw	r17,-52(fp)
1000c5c0:	e0bff617 	ldw	r2,-40(fp)
1000c5c4:	e0fff717 	ldw	r3,-36(fp)
1000c5c8:	000d883a 	mov	r6,zero
1000c5cc:	01cff834 	movhi	r7,16352
1000c5d0:	1009883a 	mov	r4,r2
1000c5d4:	180b883a 	mov	r5,r3
1000c5d8:	0003be80 	call	10003be8 <__adddf3>
1000c5dc:	1009883a 	mov	r4,r2
1000c5e0:	180b883a 	mov	r5,r3
1000c5e4:	2005883a 	mov	r2,r4
1000c5e8:	2807883a 	mov	r3,r5
1000c5ec:	100d883a 	mov	r6,r2
1000c5f0:	180f883a 	mov	r7,r3
1000c5f4:	8009883a 	mov	r4,r16
1000c5f8:	880b883a 	mov	r5,r17
1000c5fc:	00152a00 	call	100152a0 <__gedf2>
1000c600:	0080c016 	blt	zero,r2,1000c904 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
1000c604:	e43ff217 	ldw	r16,-56(fp)
1000c608:	e47ff317 	ldw	r17,-52(fp)
1000c60c:	e0bff617 	ldw	r2,-40(fp)
1000c610:	e0fff717 	ldw	r3,-36(fp)
1000c614:	100d883a 	mov	r6,r2
1000c618:	180f883a 	mov	r7,r3
1000c61c:	0009883a 	mov	r4,zero
1000c620:	014ff834 	movhi	r5,16352
1000c624:	0004df00 	call	10004df0 <__subdf3>
1000c628:	1009883a 	mov	r4,r2
1000c62c:	180b883a 	mov	r5,r3
1000c630:	2005883a 	mov	r2,r4
1000c634:	2807883a 	mov	r3,r5
1000c638:	100d883a 	mov	r6,r2
1000c63c:	180f883a 	mov	r7,r3
1000c640:	8009883a 	mov	r4,r16
1000c644:	880b883a 	mov	r5,r17
1000c648:	00044940 	call	10004494 <__ledf2>
1000c64c:	10000116 	blt	r2,zero,1000c654 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
1000c650:	00002206 	br	1000c6dc <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
1000c654:	e0bfe717 	ldw	r2,-100(fp)
1000c658:	10bfffc4 	addi	r2,r2,-1
1000c65c:	e0bfe715 	stw	r2,-100(fp)
1000c660:	e0bfe717 	ldw	r2,-100(fp)
1000c664:	10800003 	ldbu	r2,0(r2)
1000c668:	10803fcc 	andi	r2,r2,255
1000c66c:	1080201c 	xori	r2,r2,128
1000c670:	10bfe004 	addi	r2,r2,-128
1000c674:	10800c20 	cmpeqi	r2,r2,48
1000c678:	103ff61e 	bne	r2,zero,1000c654 <__alt_data_end+0xf800c654>
		      s++;
1000c67c:	e0bfe717 	ldw	r2,-100(fp)
1000c680:	10800044 	addi	r2,r2,1
1000c684:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
1000c688:	00032506 	br	1000d320 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
1000c68c:	e0bfd217 	ldw	r2,-184(fp)
1000c690:	10800044 	addi	r2,r2,1
1000c694:	e0bfd215 	stw	r2,-184(fp)
1000c698:	e0bff217 	ldw	r2,-56(fp)
1000c69c:	e0fff317 	ldw	r3,-52(fp)
1000c6a0:	000d883a 	mov	r6,zero
1000c6a4:	01d00934 	movhi	r7,16420
1000c6a8:	1009883a 	mov	r4,r2
1000c6ac:	180b883a 	mov	r5,r3
1000c6b0:	00045880 	call	10004588 <__muldf3>
1000c6b4:	1009883a 	mov	r4,r2
1000c6b8:	180b883a 	mov	r5,r3
1000c6bc:	2005883a 	mov	r2,r4
1000c6c0:	2807883a 	mov	r3,r5
1000c6c4:	e0bff215 	stw	r2,-56(fp)
1000c6c8:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
1000c6cc:	003f9a06 	br	1000c538 <__alt_data_end+0xf800c538>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
1000c6d0:	0001883a 	nop
1000c6d4:	00000106 	br	1000c6dc <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
1000c6d8:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
1000c6dc:	e0bfe917 	ldw	r2,-92(fp)
1000c6e0:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
1000c6e4:	e0bff417 	ldw	r2,-48(fp)
1000c6e8:	e0fff517 	ldw	r3,-44(fp)
1000c6ec:	e0bff215 	stw	r2,-56(fp)
1000c6f0:	e0fff315 	stw	r3,-52(fp)
      k = k0;
1000c6f4:	e0bfea17 	ldw	r2,-88(fp)
1000c6f8:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
1000c6fc:	e0bfeb17 	ldw	r2,-84(fp)
1000c700:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
1000c704:	e0bff117 	ldw	r2,-60(fp)
1000c708:	1000b816 	blt	r2,zero,1000c9ec <_dtoa_r+0x11e4>
1000c70c:	e0bfd717 	ldw	r2,-164(fp)
1000c710:	108003c8 	cmpgei	r2,r2,15
1000c714:	1000b51e 	bne	r2,zero,1000c9ec <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
1000c718:	00840374 	movhi	r2,4109
1000c71c:	10bde104 	addi	r2,r2,-2172
1000c720:	e0ffd717 	ldw	r3,-164(fp)
1000c724:	180690fa 	slli	r3,r3,3
1000c728:	10c5883a 	add	r2,r2,r3
1000c72c:	10c00017 	ldw	r3,0(r2)
1000c730:	e0ffe515 	stw	r3,-108(fp)
1000c734:	10800117 	ldw	r2,4(r2)
1000c738:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
1000c73c:	e0800217 	ldw	r2,8(fp)
1000c740:	1000190e 	bge	r2,zero,1000c7a8 <_dtoa_r+0xfa0>
1000c744:	e0bfd417 	ldw	r2,-176(fp)
1000c748:	00801716 	blt	zero,r2,1000c7a8 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
1000c74c:	e03fe315 	stw	zero,-116(fp)
1000c750:	e0bfe317 	ldw	r2,-116(fp)
1000c754:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
1000c758:	e0bfd417 	ldw	r2,-176(fp)
1000c75c:	1001bd16 	blt	r2,zero,1000ce54 <_dtoa_r+0x164c>
1000c760:	e43ff217 	ldw	r16,-56(fp)
1000c764:	e47ff317 	ldw	r17,-52(fp)
1000c768:	000d883a 	mov	r6,zero
1000c76c:	01d00534 	movhi	r7,16404
1000c770:	e13fe517 	ldw	r4,-108(fp)
1000c774:	e17fe617 	ldw	r5,-104(fp)
1000c778:	00045880 	call	10004588 <__muldf3>
1000c77c:	1009883a 	mov	r4,r2
1000c780:	180b883a 	mov	r5,r3
1000c784:	2005883a 	mov	r2,r4
1000c788:	2807883a 	mov	r3,r5
1000c78c:	100d883a 	mov	r6,r2
1000c790:	180f883a 	mov	r7,r3
1000c794:	8009883a 	mov	r4,r16
1000c798:	880b883a 	mov	r5,r17
1000c79c:	00044940 	call	10004494 <__ledf2>
1000c7a0:	0081ac0e 	bge	zero,r2,1000ce54 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
1000c7a4:	0001b006 	br	1000ce68 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
1000c7a8:	00800044 	movi	r2,1
1000c7ac:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
1000c7b0:	e0bff217 	ldw	r2,-56(fp)
1000c7b4:	e0fff317 	ldw	r3,-52(fp)
1000c7b8:	e1bfe517 	ldw	r6,-108(fp)
1000c7bc:	e1ffe617 	ldw	r7,-104(fp)
1000c7c0:	1009883a 	mov	r4,r2
1000c7c4:	180b883a 	mov	r5,r3
1000c7c8:	00148480 	call	10014848 <__divdf3>
1000c7cc:	1009883a 	mov	r4,r2
1000c7d0:	180b883a 	mov	r5,r3
1000c7d4:	2005883a 	mov	r2,r4
1000c7d8:	2807883a 	mov	r3,r5
1000c7dc:	1009883a 	mov	r4,r2
1000c7e0:	180b883a 	mov	r5,r3
1000c7e4:	001537c0 	call	1001537c <__fixdfsi>
1000c7e8:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
1000c7ec:	e43ff217 	ldw	r16,-56(fp)
1000c7f0:	e47ff317 	ldw	r17,-52(fp)
1000c7f4:	e13fed17 	ldw	r4,-76(fp)
1000c7f8:	00153fc0 	call	100153fc <__floatsidf>
1000c7fc:	1011883a 	mov	r8,r2
1000c800:	1813883a 	mov	r9,r3
1000c804:	e1bfe517 	ldw	r6,-108(fp)
1000c808:	e1ffe617 	ldw	r7,-104(fp)
1000c80c:	4009883a 	mov	r4,r8
1000c810:	480b883a 	mov	r5,r9
1000c814:	00045880 	call	10004588 <__muldf3>
1000c818:	1009883a 	mov	r4,r2
1000c81c:	180b883a 	mov	r5,r3
1000c820:	2005883a 	mov	r2,r4
1000c824:	2807883a 	mov	r3,r5
1000c828:	100d883a 	mov	r6,r2
1000c82c:	180f883a 	mov	r7,r3
1000c830:	8009883a 	mov	r4,r16
1000c834:	880b883a 	mov	r5,r17
1000c838:	0004df00 	call	10004df0 <__subdf3>
1000c83c:	1009883a 	mov	r4,r2
1000c840:	180b883a 	mov	r5,r3
1000c844:	2005883a 	mov	r2,r4
1000c848:	2807883a 	mov	r3,r5
1000c84c:	e0bff215 	stw	r2,-56(fp)
1000c850:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
1000c854:	e0bfe717 	ldw	r2,-100(fp)
1000c858:	10c00044 	addi	r3,r2,1
1000c85c:	e0ffe715 	stw	r3,-100(fp)
1000c860:	e0ffed17 	ldw	r3,-76(fp)
1000c864:	18c00c04 	addi	r3,r3,48
1000c868:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
1000c86c:	e0ffd217 	ldw	r3,-184(fp)
1000c870:	e0bfd417 	ldw	r2,-176(fp)
1000c874:	1880401e 	bne	r3,r2,1000c978 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
1000c878:	e0bff217 	ldw	r2,-56(fp)
1000c87c:	e0fff317 	ldw	r3,-52(fp)
1000c880:	100d883a 	mov	r6,r2
1000c884:	180f883a 	mov	r7,r3
1000c888:	1009883a 	mov	r4,r2
1000c88c:	180b883a 	mov	r5,r3
1000c890:	0003be80 	call	10003be8 <__adddf3>
1000c894:	1009883a 	mov	r4,r2
1000c898:	180b883a 	mov	r5,r3
1000c89c:	2005883a 	mov	r2,r4
1000c8a0:	2807883a 	mov	r3,r5
1000c8a4:	e0bff215 	stw	r2,-56(fp)
1000c8a8:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
1000c8ac:	e0bff217 	ldw	r2,-56(fp)
1000c8b0:	e0fff317 	ldw	r3,-52(fp)
1000c8b4:	e1bfe517 	ldw	r6,-108(fp)
1000c8b8:	e1ffe617 	ldw	r7,-104(fp)
1000c8bc:	1009883a 	mov	r4,r2
1000c8c0:	180b883a 	mov	r5,r3
1000c8c4:	00152a00 	call	100152a0 <__gedf2>
1000c8c8:	00801a16 	blt	zero,r2,1000c934 <_dtoa_r+0x112c>
1000c8cc:	e0bff217 	ldw	r2,-56(fp)
1000c8d0:	e0fff317 	ldw	r3,-52(fp)
1000c8d4:	e1bfe517 	ldw	r6,-108(fp)
1000c8d8:	e1ffe617 	ldw	r7,-104(fp)
1000c8dc:	1009883a 	mov	r4,r2
1000c8e0:	180b883a 	mov	r5,r3
1000c8e4:	00152180 	call	10015218 <__eqdf2>
1000c8e8:	10003c1e 	bne	r2,zero,1000c9dc <_dtoa_r+0x11d4>
1000c8ec:	e0bfed17 	ldw	r2,-76(fp)
1000c8f0:	1080004c 	andi	r2,r2,1
1000c8f4:	10003926 	beq	r2,zero,1000c9dc <_dtoa_r+0x11d4>
1000c8f8:	00000e06 	br	1000c934 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
1000c8fc:	0001883a 	nop
1000c900:	00000c06 	br	1000c934 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
1000c904:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
1000c908:	00000a06 	br	1000c934 <_dtoa_r+0x112c>
		    if (s == s0)
1000c90c:	e0ffe717 	ldw	r3,-100(fp)
1000c910:	e0bfe917 	ldw	r2,-92(fp)
1000c914:	1880071e 	bne	r3,r2,1000c934 <_dtoa_r+0x112c>
		      {
			k++;
1000c918:	e0bfd717 	ldw	r2,-164(fp)
1000c91c:	10800044 	addi	r2,r2,1
1000c920:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
1000c924:	e0bfe717 	ldw	r2,-100(fp)
1000c928:	00c00c04 	movi	r3,48
1000c92c:	10c00005 	stb	r3,0(r2)
			break;
1000c930:	00000a06 	br	1000c95c <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
1000c934:	e0bfe717 	ldw	r2,-100(fp)
1000c938:	10bfffc4 	addi	r2,r2,-1
1000c93c:	e0bfe715 	stw	r2,-100(fp)
1000c940:	e0bfe717 	ldw	r2,-100(fp)
1000c944:	10800003 	ldbu	r2,0(r2)
1000c948:	10803fcc 	andi	r2,r2,255
1000c94c:	1080201c 	xori	r2,r2,128
1000c950:	10bfe004 	addi	r2,r2,-128
1000c954:	10800e60 	cmpeqi	r2,r2,57
1000c958:	103fec1e 	bne	r2,zero,1000c90c <__alt_data_end+0xf800c90c>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
1000c95c:	e0bfe717 	ldw	r2,-100(fp)
1000c960:	10c00044 	addi	r3,r2,1
1000c964:	e0ffe715 	stw	r3,-100(fp)
1000c968:	10c00003 	ldbu	r3,0(r2)
1000c96c:	18c00044 	addi	r3,r3,1
1000c970:	10c00005 	stb	r3,0(r2)
		}
	      break;
1000c974:	00001906 	br	1000c9dc <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
1000c978:	e0bff217 	ldw	r2,-56(fp)
1000c97c:	e0fff317 	ldw	r3,-52(fp)
1000c980:	000d883a 	mov	r6,zero
1000c984:	01d00934 	movhi	r7,16420
1000c988:	1009883a 	mov	r4,r2
1000c98c:	180b883a 	mov	r5,r3
1000c990:	00045880 	call	10004588 <__muldf3>
1000c994:	1009883a 	mov	r4,r2
1000c998:	180b883a 	mov	r5,r3
1000c99c:	2005883a 	mov	r2,r4
1000c9a0:	2807883a 	mov	r3,r5
1000c9a4:	e0bff215 	stw	r2,-56(fp)
1000c9a8:	e0fff315 	stw	r3,-52(fp)
1000c9ac:	e0bff217 	ldw	r2,-56(fp)
1000c9b0:	e0fff317 	ldw	r3,-52(fp)
1000c9b4:	000d883a 	mov	r6,zero
1000c9b8:	000f883a 	mov	r7,zero
1000c9bc:	1009883a 	mov	r4,r2
1000c9c0:	180b883a 	mov	r5,r3
1000c9c4:	00152180 	call	10015218 <__eqdf2>
1000c9c8:	10000626 	beq	r2,zero,1000c9e4 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
1000c9cc:	e0bfd217 	ldw	r2,-184(fp)
1000c9d0:	10800044 	addi	r2,r2,1
1000c9d4:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
1000c9d8:	003f7506 	br	1000c7b0 <__alt_data_end+0xf800c7b0>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
1000c9dc:	0001883a 	nop
1000c9e0:	00024f06 	br	1000d320 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
1000c9e4:	0001883a 	nop
	}
      goto ret1;
1000c9e8:	00024d06 	br	1000d320 <_dtoa_r+0x1b18>
    }

  m2 = b2;
1000c9ec:	e0bfcf17 	ldw	r2,-196(fp)
1000c9f0:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
1000c9f4:	e0bfd017 	ldw	r2,-192(fp)
1000c9f8:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
1000c9fc:	e03fe215 	stw	zero,-120(fp)
1000ca00:	e0bfe217 	ldw	r2,-120(fp)
1000ca04:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
1000ca08:	e0bfd917 	ldw	r2,-156(fp)
1000ca0c:	10003a26 	beq	r2,zero,1000caf8 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
1000ca10:	e0bffb17 	ldw	r2,-20(fp)
1000ca14:	10800088 	cmpgei	r2,r2,2
1000ca18:	10000a1e 	bne	r2,zero,1000ca44 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
1000ca1c:	e0bfe017 	ldw	r2,-128(fp)
1000ca20:	10000326 	beq	r2,zero,1000ca30 <_dtoa_r+0x1228>
1000ca24:	e0bff117 	ldw	r2,-60(fp)
1000ca28:	10810cc4 	addi	r2,r2,1075
1000ca2c:	00000306 	br	1000ca3c <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
1000ca30:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
1000ca34:	00c00d84 	movi	r3,54
1000ca38:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
1000ca3c:	e0bfd215 	stw	r2,-184(fp)
1000ca40:	00002106 	br	1000cac8 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
1000ca44:	e0bfd417 	ldw	r2,-176(fp)
1000ca48:	10bfffc4 	addi	r2,r2,-1
1000ca4c:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
1000ca50:	e0ffdb17 	ldw	r3,-148(fp)
1000ca54:	e0bfd617 	ldw	r2,-168(fp)
1000ca58:	18800516 	blt	r3,r2,1000ca70 <_dtoa_r+0x1268>
	    m5 -= j;
1000ca5c:	e0ffdb17 	ldw	r3,-148(fp)
1000ca60:	e0bfd617 	ldw	r2,-168(fp)
1000ca64:	1885c83a 	sub	r2,r3,r2
1000ca68:	e0bfdb15 	stw	r2,-148(fp)
1000ca6c:	00000d06 	br	1000caa4 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
1000ca70:	e0ffd617 	ldw	r3,-168(fp)
1000ca74:	e0bfdb17 	ldw	r2,-148(fp)
1000ca78:	1885c83a 	sub	r2,r3,r2
1000ca7c:	e0bfd615 	stw	r2,-168(fp)
1000ca80:	e0bfd617 	ldw	r2,-168(fp)
1000ca84:	e0ffdd17 	ldw	r3,-140(fp)
1000ca88:	1885883a 	add	r2,r3,r2
1000ca8c:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
1000ca90:	e0ffd017 	ldw	r3,-192(fp)
1000ca94:	e0bfd617 	ldw	r2,-168(fp)
1000ca98:	1885883a 	add	r2,r3,r2
1000ca9c:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
1000caa0:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
1000caa4:	e0bfd417 	ldw	r2,-176(fp)
1000caa8:	e0bfd215 	stw	r2,-184(fp)
1000caac:	e0bfd217 	ldw	r2,-184(fp)
1000cab0:	1000050e 	bge	r2,zero,1000cac8 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
1000cab4:	e0ffda17 	ldw	r3,-152(fp)
1000cab8:	e0bfd217 	ldw	r2,-184(fp)
1000cabc:	1885c83a 	sub	r2,r3,r2
1000cac0:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
1000cac4:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
1000cac8:	e0ffcf17 	ldw	r3,-196(fp)
1000cacc:	e0bfd217 	ldw	r2,-184(fp)
1000cad0:	1885883a 	add	r2,r3,r2
1000cad4:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
1000cad8:	e0ffdc17 	ldw	r3,-144(fp)
1000cadc:	e0bfd217 	ldw	r2,-184(fp)
1000cae0:	1885883a 	add	r2,r3,r2
1000cae4:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
1000cae8:	01400044 	movi	r5,1
1000caec:	e13ff817 	ldw	r4,-32(fp)
1000caf0:	000fc940 	call	1000fc94 <__i2b>
1000caf4:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
1000caf8:	e0bfda17 	ldw	r2,-152(fp)
1000cafc:	0080130e 	bge	zero,r2,1000cb4c <_dtoa_r+0x1344>
1000cb00:	e0bfdc17 	ldw	r2,-144(fp)
1000cb04:	0080110e 	bge	zero,r2,1000cb4c <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
1000cb08:	e0ffda17 	ldw	r3,-152(fp)
1000cb0c:	e0bfdc17 	ldw	r2,-144(fp)
1000cb10:	1880010e 	bge	r3,r2,1000cb18 <_dtoa_r+0x1310>
1000cb14:	1805883a 	mov	r2,r3
1000cb18:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
1000cb1c:	e0ffcf17 	ldw	r3,-196(fp)
1000cb20:	e0bfd217 	ldw	r2,-184(fp)
1000cb24:	1885c83a 	sub	r2,r3,r2
1000cb28:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
1000cb2c:	e0ffda17 	ldw	r3,-152(fp)
1000cb30:	e0bfd217 	ldw	r2,-184(fp)
1000cb34:	1885c83a 	sub	r2,r3,r2
1000cb38:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
1000cb3c:	e0ffdc17 	ldw	r3,-144(fp)
1000cb40:	e0bfd217 	ldw	r2,-184(fp)
1000cb44:	1885c83a 	sub	r2,r3,r2
1000cb48:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
1000cb4c:	e0bfd017 	ldw	r2,-192(fp)
1000cb50:	0080240e 	bge	zero,r2,1000cbe4 <_dtoa_r+0x13dc>
    {
      if (leftright)
1000cb54:	e0bfd917 	ldw	r2,-156(fp)
1000cb58:	10001d26 	beq	r2,zero,1000cbd0 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
1000cb5c:	e0bfdb17 	ldw	r2,-148(fp)
1000cb60:	00800f0e 	bge	zero,r2,1000cba0 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
1000cb64:	e1bfdb17 	ldw	r6,-148(fp)
1000cb68:	e17fe317 	ldw	r5,-116(fp)
1000cb6c:	e13ff817 	ldw	r4,-32(fp)
1000cb70:	00100dc0 	call	100100dc <__pow5mult>
1000cb74:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
1000cb78:	e1bfe117 	ldw	r6,-124(fp)
1000cb7c:	e17fe317 	ldw	r5,-116(fp)
1000cb80:	e13ff817 	ldw	r4,-32(fp)
1000cb84:	000fcec0 	call	1000fcec <__multiply>
1000cb88:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
1000cb8c:	e17fe117 	ldw	r5,-124(fp)
1000cb90:	e13ff817 	ldw	r4,-32(fp)
1000cb94:	000f7640 	call	1000f764 <_Bfree>
	      b = b1;
1000cb98:	e0bfee17 	ldw	r2,-72(fp)
1000cb9c:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
1000cba0:	e0ffd017 	ldw	r3,-192(fp)
1000cba4:	e0bfdb17 	ldw	r2,-148(fp)
1000cba8:	1885c83a 	sub	r2,r3,r2
1000cbac:	e0bfd615 	stw	r2,-168(fp)
1000cbb0:	e0bfd617 	ldw	r2,-168(fp)
1000cbb4:	10000b26 	beq	r2,zero,1000cbe4 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
1000cbb8:	e1bfd617 	ldw	r6,-168(fp)
1000cbbc:	e17fe117 	ldw	r5,-124(fp)
1000cbc0:	e13ff817 	ldw	r4,-32(fp)
1000cbc4:	00100dc0 	call	100100dc <__pow5mult>
1000cbc8:	e0bfe115 	stw	r2,-124(fp)
1000cbcc:	00000506 	br	1000cbe4 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
1000cbd0:	e1bfd017 	ldw	r6,-192(fp)
1000cbd4:	e17fe117 	ldw	r5,-124(fp)
1000cbd8:	e13ff817 	ldw	r4,-32(fp)
1000cbdc:	00100dc0 	call	100100dc <__pow5mult>
1000cbe0:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
1000cbe4:	01400044 	movi	r5,1
1000cbe8:	e13ff817 	ldw	r4,-32(fp)
1000cbec:	000fc940 	call	1000fc94 <__i2b>
1000cbf0:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
1000cbf4:	e0bfdd17 	ldw	r2,-140(fp)
1000cbf8:	0080050e 	bge	zero,r2,1000cc10 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
1000cbfc:	e1bfdd17 	ldw	r6,-140(fp)
1000cc00:	e17fe417 	ldw	r5,-112(fp)
1000cc04:	e13ff817 	ldw	r4,-32(fp)
1000cc08:	00100dc0 	call	100100dc <__pow5mult>
1000cc0c:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
1000cc10:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
1000cc14:	e0bffb17 	ldw	r2,-20(fp)
1000cc18:	10800088 	cmpgei	r2,r2,2
1000cc1c:	1000121e 	bne	r2,zero,1000cc68 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
1000cc20:	e0bff217 	ldw	r2,-56(fp)
1000cc24:	1000101e 	bne	r2,zero,1000cc68 <_dtoa_r+0x1460>
1000cc28:	e0fff317 	ldw	r3,-52(fp)
1000cc2c:	00800434 	movhi	r2,16
1000cc30:	10bfffc4 	addi	r2,r2,-1
1000cc34:	1884703a 	and	r2,r3,r2
1000cc38:	10000b1e 	bne	r2,zero,1000cc68 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
1000cc3c:	e0bff317 	ldw	r2,-52(fp)
1000cc40:	109ffc2c 	andhi	r2,r2,32752
1000cc44:	10000826 	beq	r2,zero,1000cc68 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
1000cc48:	e0bfcf17 	ldw	r2,-196(fp)
1000cc4c:	10800044 	addi	r2,r2,1
1000cc50:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
1000cc54:	e0bfdc17 	ldw	r2,-144(fp)
1000cc58:	10800044 	addi	r2,r2,1
1000cc5c:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
1000cc60:	00800044 	movi	r2,1
1000cc64:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
1000cc68:	e0bfdd17 	ldw	r2,-140(fp)
1000cc6c:	10000f26 	beq	r2,zero,1000ccac <_dtoa_r+0x14a4>
1000cc70:	e0bfe417 	ldw	r2,-112(fp)
1000cc74:	10800417 	ldw	r2,16(r2)
1000cc78:	10bfffc4 	addi	r2,r2,-1
1000cc7c:	e0ffe417 	ldw	r3,-112(fp)
1000cc80:	10800144 	addi	r2,r2,5
1000cc84:	1085883a 	add	r2,r2,r2
1000cc88:	1085883a 	add	r2,r2,r2
1000cc8c:	1885883a 	add	r2,r3,r2
1000cc90:	10800017 	ldw	r2,0(r2)
1000cc94:	1009883a 	mov	r4,r2
1000cc98:	000fb180 	call	1000fb18 <__hi0bits>
1000cc9c:	1007883a 	mov	r3,r2
1000cca0:	00800804 	movi	r2,32
1000cca4:	10c5c83a 	sub	r2,r2,r3
1000cca8:	00000106 	br	1000ccb0 <_dtoa_r+0x14a8>
1000ccac:	00800044 	movi	r2,1
1000ccb0:	e0ffdc17 	ldw	r3,-144(fp)
1000ccb4:	10c5883a 	add	r2,r2,r3
1000ccb8:	108007cc 	andi	r2,r2,31
1000ccbc:	e0bfd215 	stw	r2,-184(fp)
1000ccc0:	e0bfd217 	ldw	r2,-184(fp)
1000ccc4:	10000426 	beq	r2,zero,1000ccd8 <_dtoa_r+0x14d0>
    i = 32 - i;
1000ccc8:	00c00804 	movi	r3,32
1000cccc:	e0bfd217 	ldw	r2,-184(fp)
1000ccd0:	1885c83a 	sub	r2,r3,r2
1000ccd4:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
1000ccd8:	e0bfd217 	ldw	r2,-184(fp)
1000ccdc:	10800150 	cmplti	r2,r2,5
1000cce0:	1000101e 	bne	r2,zero,1000cd24 <_dtoa_r+0x151c>
    {
      i -= 4;
1000cce4:	e0bfd217 	ldw	r2,-184(fp)
1000cce8:	10bfff04 	addi	r2,r2,-4
1000ccec:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
1000ccf0:	e0ffcf17 	ldw	r3,-196(fp)
1000ccf4:	e0bfd217 	ldw	r2,-184(fp)
1000ccf8:	1885883a 	add	r2,r3,r2
1000ccfc:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
1000cd00:	e0ffda17 	ldw	r3,-152(fp)
1000cd04:	e0bfd217 	ldw	r2,-184(fp)
1000cd08:	1885883a 	add	r2,r3,r2
1000cd0c:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
1000cd10:	e0ffdc17 	ldw	r3,-144(fp)
1000cd14:	e0bfd217 	ldw	r2,-184(fp)
1000cd18:	1885883a 	add	r2,r3,r2
1000cd1c:	e0bfdc15 	stw	r2,-144(fp)
1000cd20:	00001206 	br	1000cd6c <_dtoa_r+0x1564>
    }
  else if (i < 4)
1000cd24:	e0bfd217 	ldw	r2,-184(fp)
1000cd28:	10800108 	cmpgei	r2,r2,4
1000cd2c:	10000f1e 	bne	r2,zero,1000cd6c <_dtoa_r+0x1564>
    {
      i += 28;
1000cd30:	e0bfd217 	ldw	r2,-184(fp)
1000cd34:	10800704 	addi	r2,r2,28
1000cd38:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
1000cd3c:	e0ffcf17 	ldw	r3,-196(fp)
1000cd40:	e0bfd217 	ldw	r2,-184(fp)
1000cd44:	1885883a 	add	r2,r3,r2
1000cd48:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
1000cd4c:	e0ffda17 	ldw	r3,-152(fp)
1000cd50:	e0bfd217 	ldw	r2,-184(fp)
1000cd54:	1885883a 	add	r2,r3,r2
1000cd58:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
1000cd5c:	e0ffdc17 	ldw	r3,-144(fp)
1000cd60:	e0bfd217 	ldw	r2,-184(fp)
1000cd64:	1885883a 	add	r2,r3,r2
1000cd68:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
1000cd6c:	e0bfcf17 	ldw	r2,-196(fp)
1000cd70:	0080050e 	bge	zero,r2,1000cd88 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
1000cd74:	e1bfcf17 	ldw	r6,-196(fp)
1000cd78:	e17fe117 	ldw	r5,-124(fp)
1000cd7c:	e13ff817 	ldw	r4,-32(fp)
1000cd80:	00102540 	call	10010254 <__lshift>
1000cd84:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
1000cd88:	e0bfdc17 	ldw	r2,-144(fp)
1000cd8c:	0080050e 	bge	zero,r2,1000cda4 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
1000cd90:	e1bfdc17 	ldw	r6,-144(fp)
1000cd94:	e17fe417 	ldw	r5,-112(fp)
1000cd98:	e13ff817 	ldw	r4,-32(fp)
1000cd9c:	00102540 	call	10010254 <__lshift>
1000cda0:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
1000cda4:	e0bfd817 	ldw	r2,-160(fp)
1000cda8:	10001726 	beq	r2,zero,1000ce08 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
1000cdac:	e17fe417 	ldw	r5,-112(fp)
1000cdb0:	e13fe117 	ldw	r4,-124(fp)
1000cdb4:	001044c0 	call	1001044c <__mcmp>
1000cdb8:	1000130e 	bge	r2,zero,1000ce08 <_dtoa_r+0x1600>
	{
	  k--;
1000cdbc:	e0bfd717 	ldw	r2,-164(fp)
1000cdc0:	10bfffc4 	addi	r2,r2,-1
1000cdc4:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
1000cdc8:	000f883a 	mov	r7,zero
1000cdcc:	01800284 	movi	r6,10
1000cdd0:	e17fe117 	ldw	r5,-124(fp)
1000cdd4:	e13ff817 	ldw	r4,-32(fp)
1000cdd8:	000f7e00 	call	1000f7e0 <__multadd>
1000cddc:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
1000cde0:	e0bfd917 	ldw	r2,-156(fp)
1000cde4:	10000626 	beq	r2,zero,1000ce00 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
1000cde8:	000f883a 	mov	r7,zero
1000cdec:	01800284 	movi	r6,10
1000cdf0:	e17fe317 	ldw	r5,-116(fp)
1000cdf4:	e13ff817 	ldw	r4,-32(fp)
1000cdf8:	000f7e00 	call	1000f7e0 <__multadd>
1000cdfc:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
1000ce00:	e0bfd517 	ldw	r2,-172(fp)
1000ce04:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
1000ce08:	e0bfd417 	ldw	r2,-176(fp)
1000ce0c:	00801f16 	blt	zero,r2,1000ce8c <_dtoa_r+0x1684>
1000ce10:	e0bffb17 	ldw	r2,-20(fp)
1000ce14:	108000d0 	cmplti	r2,r2,3
1000ce18:	10001c1e 	bne	r2,zero,1000ce8c <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
1000ce1c:	e0bfd417 	ldw	r2,-176(fp)
1000ce20:	10000c16 	blt	r2,zero,1000ce54 <_dtoa_r+0x164c>
1000ce24:	000f883a 	mov	r7,zero
1000ce28:	01800144 	movi	r6,5
1000ce2c:	e17fe417 	ldw	r5,-112(fp)
1000ce30:	e13ff817 	ldw	r4,-32(fp)
1000ce34:	000f7e00 	call	1000f7e0 <__multadd>
1000ce38:	e0bfe415 	stw	r2,-112(fp)
1000ce3c:	e17fe417 	ldw	r5,-112(fp)
1000ce40:	e13fe117 	ldw	r4,-124(fp)
1000ce44:	001044c0 	call	1001044c <__mcmp>
1000ce48:	00800716 	blt	zero,r2,1000ce68 <_dtoa_r+0x1660>
1000ce4c:	00000106 	br	1000ce54 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
1000ce50:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
1000ce54:	e0800217 	ldw	r2,8(fp)
1000ce58:	0084303a 	nor	r2,zero,r2
1000ce5c:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
1000ce60:	00011d06 	br	1000d2d8 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
1000ce64:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
1000ce68:	e0bfe717 	ldw	r2,-100(fp)
1000ce6c:	10c00044 	addi	r3,r2,1
1000ce70:	e0ffe715 	stw	r3,-100(fp)
1000ce74:	00c00c44 	movi	r3,49
1000ce78:	10c00005 	stb	r3,0(r2)
      k++;
1000ce7c:	e0bfd717 	ldw	r2,-164(fp)
1000ce80:	10800044 	addi	r2,r2,1
1000ce84:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
1000ce88:	00011306 	br	1000d2d8 <_dtoa_r+0x1ad0>
    }
  if (leftright)
1000ce8c:	e0bfd917 	ldw	r2,-156(fp)
1000ce90:	1000ba26 	beq	r2,zero,1000d17c <_dtoa_r+0x1974>
    {
      if (m2 > 0)
1000ce94:	e0bfda17 	ldw	r2,-152(fp)
1000ce98:	0080050e 	bge	zero,r2,1000ceb0 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
1000ce9c:	e1bfda17 	ldw	r6,-152(fp)
1000cea0:	e17fe317 	ldw	r5,-116(fp)
1000cea4:	e13ff817 	ldw	r4,-32(fp)
1000cea8:	00102540 	call	10010254 <__lshift>
1000ceac:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
1000ceb0:	e0bfe317 	ldw	r2,-116(fp)
1000ceb4:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
1000ceb8:	e0bfde17 	ldw	r2,-136(fp)
1000cebc:	10001826 	beq	r2,zero,1000cf20 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
1000cec0:	e0bfe317 	ldw	r2,-116(fp)
1000cec4:	10800117 	ldw	r2,4(r2)
1000cec8:	100b883a 	mov	r5,r2
1000cecc:	e13ff817 	ldw	r4,-32(fp)
1000ced0:	000f6340 	call	1000f634 <_Balloc>
1000ced4:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
1000ced8:	e0bfe317 	ldw	r2,-116(fp)
1000cedc:	10c00304 	addi	r3,r2,12
1000cee0:	e0bfe217 	ldw	r2,-120(fp)
1000cee4:	11000304 	addi	r4,r2,12
1000cee8:	e0bfe217 	ldw	r2,-120(fp)
1000ceec:	10800417 	ldw	r2,16(r2)
1000cef0:	10800084 	addi	r2,r2,2
1000cef4:	1085883a 	add	r2,r2,r2
1000cef8:	1085883a 	add	r2,r2,r2
1000cefc:	100d883a 	mov	r6,r2
1000cf00:	200b883a 	mov	r5,r4
1000cf04:	1809883a 	mov	r4,r3
1000cf08:	000f2a40 	call	1000f2a4 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
1000cf0c:	01800044 	movi	r6,1
1000cf10:	e17fe317 	ldw	r5,-116(fp)
1000cf14:	e13ff817 	ldw	r4,-32(fp)
1000cf18:	00102540 	call	10010254 <__lshift>
1000cf1c:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
1000cf20:	00800044 	movi	r2,1
1000cf24:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
1000cf28:	e17fe417 	ldw	r5,-112(fp)
1000cf2c:	e13fe117 	ldw	r4,-124(fp)
1000cf30:	000b4440 	call	1000b444 <quorem>
1000cf34:	10800c04 	addi	r2,r2,48
1000cf38:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
1000cf3c:	e17fe217 	ldw	r5,-120(fp)
1000cf40:	e13fe117 	ldw	r4,-124(fp)
1000cf44:	001044c0 	call	1001044c <__mcmp>
1000cf48:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
1000cf4c:	e1bfe317 	ldw	r6,-116(fp)
1000cf50:	e17fe417 	ldw	r5,-112(fp)
1000cf54:	e13ff817 	ldw	r4,-32(fp)
1000cf58:	00105600 	call	10010560 <__mdiff>
1000cf5c:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
1000cf60:	e0bfef17 	ldw	r2,-68(fp)
1000cf64:	10800317 	ldw	r2,12(r2)
1000cf68:	1000041e 	bne	r2,zero,1000cf7c <_dtoa_r+0x1774>
1000cf6c:	e17fef17 	ldw	r5,-68(fp)
1000cf70:	e13fe117 	ldw	r4,-124(fp)
1000cf74:	001044c0 	call	1001044c <__mcmp>
1000cf78:	00000106 	br	1000cf80 <_dtoa_r+0x1778>
1000cf7c:	00800044 	movi	r2,1
1000cf80:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
1000cf84:	e17fef17 	ldw	r5,-68(fp)
1000cf88:	e13ff817 	ldw	r4,-32(fp)
1000cf8c:	000f7640 	call	1000f764 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
1000cf90:	e0bfec17 	ldw	r2,-80(fp)
1000cf94:	1000131e 	bne	r2,zero,1000cfe4 <_dtoa_r+0x17dc>
1000cf98:	e0bffb17 	ldw	r2,-20(fp)
1000cf9c:	1000111e 	bne	r2,zero,1000cfe4 <_dtoa_r+0x17dc>
1000cfa0:	e0bff217 	ldw	r2,-56(fp)
1000cfa4:	1080004c 	andi	r2,r2,1
1000cfa8:	10000e1e 	bne	r2,zero,1000cfe4 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
1000cfac:	e0bfd117 	ldw	r2,-188(fp)
1000cfb0:	10800e58 	cmpnei	r2,r2,57
1000cfb4:	10003726 	beq	r2,zero,1000d094 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
1000cfb8:	e0bfd617 	ldw	r2,-168(fp)
1000cfbc:	0080030e 	bge	zero,r2,1000cfcc <_dtoa_r+0x17c4>
		dig++;
1000cfc0:	e0bfd117 	ldw	r2,-188(fp)
1000cfc4:	10800044 	addi	r2,r2,1
1000cfc8:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
1000cfcc:	e0bfe717 	ldw	r2,-100(fp)
1000cfd0:	10c00044 	addi	r3,r2,1
1000cfd4:	e0ffe715 	stw	r3,-100(fp)
1000cfd8:	e0ffd117 	ldw	r3,-188(fp)
1000cfdc:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000cfe0:	0000bd06 	br	1000d2d8 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
1000cfe4:	e0bfd617 	ldw	r2,-168(fp)
1000cfe8:	10000716 	blt	r2,zero,1000d008 <_dtoa_r+0x1800>
1000cfec:	e0bfd617 	ldw	r2,-168(fp)
1000cff0:	1000221e 	bne	r2,zero,1000d07c <_dtoa_r+0x1874>
1000cff4:	e0bffb17 	ldw	r2,-20(fp)
1000cff8:	1000201e 	bne	r2,zero,1000d07c <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
1000cffc:	e0bff217 	ldw	r2,-56(fp)
1000d000:	1080004c 	andi	r2,r2,1
1000d004:	10001d1e 	bne	r2,zero,1000d07c <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
1000d008:	e0bfec17 	ldw	r2,-80(fp)
1000d00c:	0080150e 	bge	zero,r2,1000d064 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
1000d010:	01800044 	movi	r6,1
1000d014:	e17fe117 	ldw	r5,-124(fp)
1000d018:	e13ff817 	ldw	r4,-32(fp)
1000d01c:	00102540 	call	10010254 <__lshift>
1000d020:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
1000d024:	e17fe417 	ldw	r5,-112(fp)
1000d028:	e13fe117 	ldw	r4,-124(fp)
1000d02c:	001044c0 	call	1001044c <__mcmp>
1000d030:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
1000d034:	e0bfec17 	ldw	r2,-80(fp)
1000d038:	00800516 	blt	zero,r2,1000d050 <_dtoa_r+0x1848>
1000d03c:	e0bfec17 	ldw	r2,-80(fp)
1000d040:	1000081e 	bne	r2,zero,1000d064 <_dtoa_r+0x185c>
1000d044:	e0bfd117 	ldw	r2,-188(fp)
1000d048:	1080004c 	andi	r2,r2,1
1000d04c:	10000526 	beq	r2,zero,1000d064 <_dtoa_r+0x185c>
		      && dig++ == '9')
1000d050:	e0bfd117 	ldw	r2,-188(fp)
1000d054:	10c00044 	addi	r3,r2,1
1000d058:	e0ffd115 	stw	r3,-188(fp)
1000d05c:	10800e58 	cmpnei	r2,r2,57
1000d060:	10000e26 	beq	r2,zero,1000d09c <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
1000d064:	e0bfe717 	ldw	r2,-100(fp)
1000d068:	10c00044 	addi	r3,r2,1
1000d06c:	e0ffe715 	stw	r3,-100(fp)
1000d070:	e0ffd117 	ldw	r3,-188(fp)
1000d074:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000d078:	00009706 	br	1000d2d8 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
1000d07c:	e0bfec17 	ldw	r2,-80(fp)
1000d080:	0080140e 	bge	zero,r2,1000d0d4 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
1000d084:	e0bfd117 	ldw	r2,-188(fp)
1000d088:	10800e58 	cmpnei	r2,r2,57
1000d08c:	10000a1e 	bne	r2,zero,1000d0b8 <_dtoa_r+0x18b0>
1000d090:	00000306 	br	1000d0a0 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
1000d094:	0001883a 	nop
1000d098:	00000106 	br	1000d0a0 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
1000d09c:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
1000d0a0:	e0bfe717 	ldw	r2,-100(fp)
1000d0a4:	10c00044 	addi	r3,r2,1
1000d0a8:	e0ffe715 	stw	r3,-100(fp)
1000d0ac:	00c00e44 	movi	r3,57
1000d0b0:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
1000d0b4:	00005d06 	br	1000d22c <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
1000d0b8:	e0bfe717 	ldw	r2,-100(fp)
1000d0bc:	10c00044 	addi	r3,r2,1
1000d0c0:	e0ffe715 	stw	r3,-100(fp)
1000d0c4:	e0ffd117 	ldw	r3,-188(fp)
1000d0c8:	18c00044 	addi	r3,r3,1
1000d0cc:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000d0d0:	00008106 	br	1000d2d8 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
1000d0d4:	e0bfe717 	ldw	r2,-100(fp)
1000d0d8:	10c00044 	addi	r3,r2,1
1000d0dc:	e0ffe715 	stw	r3,-100(fp)
1000d0e0:	e0ffd117 	ldw	r3,-188(fp)
1000d0e4:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
1000d0e8:	e0ffd217 	ldw	r3,-184(fp)
1000d0ec:	e0bfd417 	ldw	r2,-176(fp)
1000d0f0:	18803b26 	beq	r3,r2,1000d1e0 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
1000d0f4:	000f883a 	mov	r7,zero
1000d0f8:	01800284 	movi	r6,10
1000d0fc:	e17fe117 	ldw	r5,-124(fp)
1000d100:	e13ff817 	ldw	r4,-32(fp)
1000d104:	000f7e00 	call	1000f7e0 <__multadd>
1000d108:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
1000d10c:	e0ffe217 	ldw	r3,-120(fp)
1000d110:	e0bfe317 	ldw	r2,-116(fp)
1000d114:	1880091e 	bne	r3,r2,1000d13c <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
1000d118:	000f883a 	mov	r7,zero
1000d11c:	01800284 	movi	r6,10
1000d120:	e17fe317 	ldw	r5,-116(fp)
1000d124:	e13ff817 	ldw	r4,-32(fp)
1000d128:	000f7e00 	call	1000f7e0 <__multadd>
1000d12c:	e0bfe315 	stw	r2,-116(fp)
1000d130:	e0bfe317 	ldw	r2,-116(fp)
1000d134:	e0bfe215 	stw	r2,-120(fp)
1000d138:	00000c06 	br	1000d16c <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
1000d13c:	000f883a 	mov	r7,zero
1000d140:	01800284 	movi	r6,10
1000d144:	e17fe217 	ldw	r5,-120(fp)
1000d148:	e13ff817 	ldw	r4,-32(fp)
1000d14c:	000f7e00 	call	1000f7e0 <__multadd>
1000d150:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
1000d154:	000f883a 	mov	r7,zero
1000d158:	01800284 	movi	r6,10
1000d15c:	e17fe317 	ldw	r5,-116(fp)
1000d160:	e13ff817 	ldw	r4,-32(fp)
1000d164:	000f7e00 	call	1000f7e0 <__multadd>
1000d168:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
1000d16c:	e0bfd217 	ldw	r2,-184(fp)
1000d170:	10800044 	addi	r2,r2,1
1000d174:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
1000d178:	003f6b06 	br	1000cf28 <__alt_data_end+0xf800cf28>
    }
  else
    for (i = 1;; i++)
1000d17c:	00800044 	movi	r2,1
1000d180:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
1000d184:	e43fe717 	ldw	r16,-100(fp)
1000d188:	80800044 	addi	r2,r16,1
1000d18c:	e0bfe715 	stw	r2,-100(fp)
1000d190:	e17fe417 	ldw	r5,-112(fp)
1000d194:	e13fe117 	ldw	r4,-124(fp)
1000d198:	000b4440 	call	1000b444 <quorem>
1000d19c:	10800c04 	addi	r2,r2,48
1000d1a0:	e0bfd115 	stw	r2,-188(fp)
1000d1a4:	e0bfd117 	ldw	r2,-188(fp)
1000d1a8:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
1000d1ac:	e0ffd217 	ldw	r3,-184(fp)
1000d1b0:	e0bfd417 	ldw	r2,-176(fp)
1000d1b4:	18800c0e 	bge	r3,r2,1000d1e8 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
1000d1b8:	000f883a 	mov	r7,zero
1000d1bc:	01800284 	movi	r6,10
1000d1c0:	e17fe117 	ldw	r5,-124(fp)
1000d1c4:	e13ff817 	ldw	r4,-32(fp)
1000d1c8:	000f7e00 	call	1000f7e0 <__multadd>
1000d1cc:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
1000d1d0:	e0bfd217 	ldw	r2,-184(fp)
1000d1d4:	10800044 	addi	r2,r2,1
1000d1d8:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
1000d1dc:	003fe906 	br	1000d184 <__alt_data_end+0xf800d184>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
1000d1e0:	0001883a 	nop
1000d1e4:	00000106 	br	1000d1ec <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
1000d1e8:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
1000d1ec:	01800044 	movi	r6,1
1000d1f0:	e17fe117 	ldw	r5,-124(fp)
1000d1f4:	e13ff817 	ldw	r4,-32(fp)
1000d1f8:	00102540 	call	10010254 <__lshift>
1000d1fc:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
1000d200:	e17fe417 	ldw	r5,-112(fp)
1000d204:	e13fe117 	ldw	r4,-124(fp)
1000d208:	001044c0 	call	1001044c <__mcmp>
1000d20c:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
1000d210:	e0bfd617 	ldw	r2,-168(fp)
1000d214:	00801216 	blt	zero,r2,1000d260 <_dtoa_r+0x1a58>
1000d218:	e0bfd617 	ldw	r2,-168(fp)
1000d21c:	1000211e 	bne	r2,zero,1000d2a4 <_dtoa_r+0x1a9c>
1000d220:	e0bfd117 	ldw	r2,-188(fp)
1000d224:	1080004c 	andi	r2,r2,1
1000d228:	10001e26 	beq	r2,zero,1000d2a4 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
1000d22c:	00000c06 	br	1000d260 <_dtoa_r+0x1a58>
	if (s == s0)
1000d230:	e0ffe717 	ldw	r3,-100(fp)
1000d234:	e0bfe917 	ldw	r2,-92(fp)
1000d238:	1880091e 	bne	r3,r2,1000d260 <_dtoa_r+0x1a58>
	  {
	    k++;
1000d23c:	e0bfd717 	ldw	r2,-164(fp)
1000d240:	10800044 	addi	r2,r2,1
1000d244:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
1000d248:	e0bfe717 	ldw	r2,-100(fp)
1000d24c:	10c00044 	addi	r3,r2,1
1000d250:	e0ffe715 	stw	r3,-100(fp)
1000d254:	00c00c44 	movi	r3,49
1000d258:	10c00005 	stb	r3,0(r2)
	    goto ret;
1000d25c:	00001e06 	br	1000d2d8 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
1000d260:	e0bfe717 	ldw	r2,-100(fp)
1000d264:	10bfffc4 	addi	r2,r2,-1
1000d268:	e0bfe715 	stw	r2,-100(fp)
1000d26c:	e0bfe717 	ldw	r2,-100(fp)
1000d270:	10800003 	ldbu	r2,0(r2)
1000d274:	10803fcc 	andi	r2,r2,255
1000d278:	1080201c 	xori	r2,r2,128
1000d27c:	10bfe004 	addi	r2,r2,-128
1000d280:	10800e60 	cmpeqi	r2,r2,57
1000d284:	103fea1e 	bne	r2,zero,1000d230 <__alt_data_end+0xf800d230>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
1000d288:	e0bfe717 	ldw	r2,-100(fp)
1000d28c:	10c00044 	addi	r3,r2,1
1000d290:	e0ffe715 	stw	r3,-100(fp)
1000d294:	10c00003 	ldbu	r3,0(r2)
1000d298:	18c00044 	addi	r3,r3,1
1000d29c:	10c00005 	stb	r3,0(r2)
1000d2a0:	00000d06 	br	1000d2d8 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
1000d2a4:	e0bfe717 	ldw	r2,-100(fp)
1000d2a8:	10bfffc4 	addi	r2,r2,-1
1000d2ac:	e0bfe715 	stw	r2,-100(fp)
1000d2b0:	e0bfe717 	ldw	r2,-100(fp)
1000d2b4:	10800003 	ldbu	r2,0(r2)
1000d2b8:	10803fcc 	andi	r2,r2,255
1000d2bc:	1080201c 	xori	r2,r2,128
1000d2c0:	10bfe004 	addi	r2,r2,-128
1000d2c4:	10800c20 	cmpeqi	r2,r2,48
1000d2c8:	103ff61e 	bne	r2,zero,1000d2a4 <__alt_data_end+0xf800d2a4>
      s++;
1000d2cc:	e0bfe717 	ldw	r2,-100(fp)
1000d2d0:	10800044 	addi	r2,r2,1
1000d2d4:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
1000d2d8:	e17fe417 	ldw	r5,-112(fp)
1000d2dc:	e13ff817 	ldw	r4,-32(fp)
1000d2e0:	000f7640 	call	1000f764 <_Bfree>
  if (mhi)
1000d2e4:	e0bfe317 	ldw	r2,-116(fp)
1000d2e8:	10000d26 	beq	r2,zero,1000d320 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
1000d2ec:	e0bfe217 	ldw	r2,-120(fp)
1000d2f0:	10000626 	beq	r2,zero,1000d30c <_dtoa_r+0x1b04>
1000d2f4:	e0ffe217 	ldw	r3,-120(fp)
1000d2f8:	e0bfe317 	ldw	r2,-116(fp)
1000d2fc:	18800326 	beq	r3,r2,1000d30c <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
1000d300:	e17fe217 	ldw	r5,-120(fp)
1000d304:	e13ff817 	ldw	r4,-32(fp)
1000d308:	000f7640 	call	1000f764 <_Bfree>
      Bfree (ptr, mhi);
1000d30c:	e17fe317 	ldw	r5,-116(fp)
1000d310:	e13ff817 	ldw	r4,-32(fp)
1000d314:	000f7640 	call	1000f764 <_Bfree>
1000d318:	00000106 	br	1000d320 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
1000d31c:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
1000d320:	e17fe117 	ldw	r5,-124(fp)
1000d324:	e13ff817 	ldw	r4,-32(fp)
1000d328:	000f7640 	call	1000f764 <_Bfree>
  *s = 0;
1000d32c:	e0bfe717 	ldw	r2,-100(fp)
1000d330:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
1000d334:	e0bfd717 	ldw	r2,-164(fp)
1000d338:	10c00044 	addi	r3,r2,1
1000d33c:	e0800317 	ldw	r2,12(fp)
1000d340:	10c00015 	stw	r3,0(r2)
  if (rve)
1000d344:	e0800517 	ldw	r2,20(fp)
1000d348:	10000326 	beq	r2,zero,1000d358 <_dtoa_r+0x1b50>
    *rve = s;
1000d34c:	e0800517 	ldw	r2,20(fp)
1000d350:	e0ffe717 	ldw	r3,-100(fp)
1000d354:	10c00015 	stw	r3,0(r2)
  return s0;
1000d358:	e0bfe917 	ldw	r2,-92(fp)
}
1000d35c:	e6fffc04 	addi	sp,fp,-16
1000d360:	dfc00517 	ldw	ra,20(sp)
1000d364:	df000417 	ldw	fp,16(sp)
1000d368:	dcc00317 	ldw	r19,12(sp)
1000d36c:	dc800217 	ldw	r18,8(sp)
1000d370:	dc400117 	ldw	r17,4(sp)
1000d374:	dc000017 	ldw	r16,0(sp)
1000d378:	dec00604 	addi	sp,sp,24
1000d37c:	f800283a 	ret

1000d380 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
1000d380:	deffff04 	addi	sp,sp,-4
1000d384:	df000015 	stw	fp,0(sp)
1000d388:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
1000d38c:	008403b4 	movhi	r2,4110
1000d390:	10a45004 	addi	r2,r2,-28352
1000d394:	10800017 	ldw	r2,0(r2)
}
1000d398:	e037883a 	mov	sp,fp
1000d39c:	df000017 	ldw	fp,0(sp)
1000d3a0:	dec00104 	addi	sp,sp,4
1000d3a4:	f800283a 	ret

1000d3a8 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000d3a8:	defff504 	addi	sp,sp,-44
1000d3ac:	dfc00a15 	stw	ra,40(sp)
1000d3b0:	df000915 	stw	fp,36(sp)
1000d3b4:	dcc00815 	stw	r19,32(sp)
1000d3b8:	dc800715 	stw	r18,28(sp)
1000d3bc:	dc400615 	stw	r17,24(sp)
1000d3c0:	dc000515 	stw	r16,20(sp)
1000d3c4:	df000904 	addi	fp,sp,36
1000d3c8:	e13ffb15 	stw	r4,-20(fp)
1000d3cc:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
1000d3d0:	8080030b 	ldhu	r2,12(r16)
1000d3d4:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
1000d3d8:	e0bff90b 	ldhu	r2,-28(fp)
1000d3dc:	10bfffcc 	andi	r2,r2,65535
1000d3e0:	1080020c 	andi	r2,r2,8
1000d3e4:	1000831e 	bne	r2,zero,1000d5f4 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
1000d3e8:	8080030b 	ldhu	r2,12(r16)
1000d3ec:	10820014 	ori	r2,r2,2048
1000d3f0:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
1000d3f4:	80800117 	ldw	r2,4(r16)
1000d3f8:	00800216 	blt	zero,r2,1000d404 <__sflush_r+0x5c>
1000d3fc:	80800f17 	ldw	r2,60(r16)
1000d400:	00807a0e 	bge	zero,r2,1000d5ec <__sflush_r+0x244>
1000d404:	80800a17 	ldw	r2,40(r16)
1000d408:	10007826 	beq	r2,zero,1000d5ec <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
1000d40c:	e0bffb17 	ldw	r2,-20(fp)
1000d410:	10800017 	ldw	r2,0(r2)
1000d414:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
1000d418:	e0bffb17 	ldw	r2,-20(fp)
1000d41c:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
1000d420:	8080030b 	ldhu	r2,12(r16)
1000d424:	10bfffcc 	andi	r2,r2,65535
1000d428:	1084000c 	andi	r2,r2,4096
1000d42c:	10000326 	beq	r2,zero,1000d43c <__sflush_r+0x94>
	    curoff = fp->_offset;
1000d430:	80801417 	ldw	r2,80(r16)
1000d434:	e0bff715 	stw	r2,-36(fp)
1000d438:	00002206 	br	1000d4c4 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
1000d43c:	80800a17 	ldw	r2,40(r16)
1000d440:	80c00717 	ldw	r3,28(r16)
1000d444:	01c00044 	movi	r7,1
1000d448:	000d883a 	mov	r6,zero
1000d44c:	180b883a 	mov	r5,r3
1000d450:	e13ffb17 	ldw	r4,-20(fp)
1000d454:	103ee83a 	callr	r2
1000d458:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
1000d45c:	e0bff717 	ldw	r2,-36(fp)
1000d460:	10bfffd8 	cmpnei	r2,r2,-1
1000d464:	1000171e 	bne	r2,zero,1000d4c4 <__sflush_r+0x11c>
1000d468:	e0bffb17 	ldw	r2,-20(fp)
1000d46c:	10800017 	ldw	r2,0(r2)
1000d470:	10001426 	beq	r2,zero,1000d4c4 <__sflush_r+0x11c>
		{
		  int result = EOF;
1000d474:	00bfffc4 	movi	r2,-1
1000d478:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
1000d47c:	e0bffb17 	ldw	r2,-20(fp)
1000d480:	10800017 	ldw	r2,0(r2)
1000d484:	10800760 	cmpeqi	r2,r2,29
1000d488:	1000041e 	bne	r2,zero,1000d49c <__sflush_r+0xf4>
1000d48c:	e0bffb17 	ldw	r2,-20(fp)
1000d490:	10800017 	ldw	r2,0(r2)
1000d494:	10800598 	cmpnei	r2,r2,22
1000d498:	1000051e 	bne	r2,zero,1000d4b0 <__sflush_r+0x108>
		    {
		      result = 0;
1000d49c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
1000d4a0:	e0bffb17 	ldw	r2,-20(fp)
1000d4a4:	e0fffa17 	ldw	r3,-24(fp)
1000d4a8:	10c00015 	stw	r3,0(r2)
1000d4ac:	00000306 	br	1000d4bc <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
1000d4b0:	8080030b 	ldhu	r2,12(r16)
1000d4b4:	10801014 	ori	r2,r2,64
1000d4b8:	8080030d 	sth	r2,12(r16)
		  return result;
1000d4bc:	e0bff817 	ldw	r2,-32(fp)
1000d4c0:	00007106 	br	1000d688 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
1000d4c4:	8080030b 	ldhu	r2,12(r16)
1000d4c8:	10bfffcc 	andi	r2,r2,65535
1000d4cc:	1080010c 	andi	r2,r2,4
1000d4d0:	10000a26 	beq	r2,zero,1000d4fc <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
1000d4d4:	80800117 	ldw	r2,4(r16)
1000d4d8:	e0fff717 	ldw	r3,-36(fp)
1000d4dc:	1885c83a 	sub	r2,r3,r2
1000d4e0:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
1000d4e4:	80800c17 	ldw	r2,48(r16)
1000d4e8:	10000426 	beq	r2,zero,1000d4fc <__sflush_r+0x154>
                curoff -= fp->_ur;
1000d4ec:	80800f17 	ldw	r2,60(r16)
1000d4f0:	e0fff717 	ldw	r3,-36(fp)
1000d4f4:	1885c83a 	sub	r2,r3,r2
1000d4f8:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
1000d4fc:	80800a17 	ldw	r2,40(r16)
1000d500:	80c00717 	ldw	r3,28(r16)
1000d504:	000f883a 	mov	r7,zero
1000d508:	e1bff717 	ldw	r6,-36(fp)
1000d50c:	180b883a 	mov	r5,r3
1000d510:	e13ffb17 	ldw	r4,-20(fp)
1000d514:	103ee83a 	callr	r2
1000d518:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
1000d51c:	e0bff717 	ldw	r2,-36(fp)
1000d520:	10bfffd8 	cmpnei	r2,r2,-1
1000d524:	10000b1e 	bne	r2,zero,1000d554 <__sflush_r+0x1ac>
1000d528:	e0bffb17 	ldw	r2,-20(fp)
1000d52c:	10800017 	ldw	r2,0(r2)
1000d530:	10000826 	beq	r2,zero,1000d554 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
1000d534:	e0bffb17 	ldw	r2,-20(fp)
1000d538:	10800017 	ldw	r2,0(r2)
1000d53c:	10800760 	cmpeqi	r2,r2,29
1000d540:	1000041e 	bne	r2,zero,1000d554 <__sflush_r+0x1ac>
1000d544:	e0bffb17 	ldw	r2,-20(fp)
1000d548:	10800017 	ldw	r2,0(r2)
1000d54c:	10800598 	cmpnei	r2,r2,22
1000d550:	1000211e 	bne	r2,zero,1000d5d8 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
1000d554:	80c0030b 	ldhu	r3,12(r16)
1000d558:	00bdffc4 	movi	r2,-2049
1000d55c:	1884703a 	and	r2,r3,r2
1000d560:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
1000d564:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
1000d568:	80800417 	ldw	r2,16(r16)
1000d56c:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
1000d570:	8080030b 	ldhu	r2,12(r16)
1000d574:	10bfffcc 	andi	r2,r2,65535
1000d578:	1084000c 	andi	r2,r2,4096
1000d57c:	10000826 	beq	r2,zero,1000d5a0 <__sflush_r+0x1f8>
1000d580:	e0bff717 	ldw	r2,-36(fp)
1000d584:	10bfffd8 	cmpnei	r2,r2,-1
1000d588:	1000031e 	bne	r2,zero,1000d598 <__sflush_r+0x1f0>
1000d58c:	e0bffb17 	ldw	r2,-20(fp)
1000d590:	10800017 	ldw	r2,0(r2)
1000d594:	1000021e 	bne	r2,zero,1000d5a0 <__sflush_r+0x1f8>
		fp->_offset = curoff;
1000d598:	e0bff717 	ldw	r2,-36(fp)
1000d59c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
1000d5a0:	e0bffb17 	ldw	r2,-20(fp)
1000d5a4:	e0fffa17 	ldw	r3,-24(fp)
1000d5a8:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
1000d5ac:	80800c17 	ldw	r2,48(r16)
1000d5b0:	10000e26 	beq	r2,zero,1000d5ec <__sflush_r+0x244>
		FREEUB (ptr, fp);
1000d5b4:	80c00c17 	ldw	r3,48(r16)
1000d5b8:	80801004 	addi	r2,r16,64
1000d5bc:	18800426 	beq	r3,r2,1000d5d0 <__sflush_r+0x228>
1000d5c0:	80800c17 	ldw	r2,48(r16)
1000d5c4:	100b883a 	mov	r5,r2
1000d5c8:	e13ffb17 	ldw	r4,-20(fp)
1000d5cc:	000dda40 	call	1000dda4 <_free_r>
1000d5d0:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
1000d5d4:	00000506 	br	1000d5ec <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
1000d5d8:	8080030b 	ldhu	r2,12(r16)
1000d5dc:	10801014 	ori	r2,r2,64
1000d5e0:	8080030d 	sth	r2,12(r16)
	      return EOF;
1000d5e4:	00bfffc4 	movi	r2,-1
1000d5e8:	00002706 	br	1000d688 <__sflush_r+0x2e0>
	    }
	}
      return 0;
1000d5ec:	0005883a 	mov	r2,zero
1000d5f0:	00002506 	br	1000d688 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
1000d5f4:	84400417 	ldw	r17,16(r16)
1000d5f8:	8800021e 	bne	r17,zero,1000d604 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
1000d5fc:	0005883a 	mov	r2,zero
1000d600:	00002106 	br	1000d688 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
1000d604:	80800017 	ldw	r2,0(r16)
1000d608:	1007883a 	mov	r3,r2
1000d60c:	8805883a 	mov	r2,r17
1000d610:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
1000d614:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
1000d618:	e0bff90b 	ldhu	r2,-28(fp)
1000d61c:	10bfffcc 	andi	r2,r2,65535
1000d620:	108000cc 	andi	r2,r2,3
1000d624:	1000021e 	bne	r2,zero,1000d630 <__sflush_r+0x288>
1000d628:	80800517 	ldw	r2,20(r16)
1000d62c:	00000106 	br	1000d634 <__sflush_r+0x28c>
1000d630:	0005883a 	mov	r2,zero
1000d634:	80800215 	stw	r2,8(r16)

  while (n > 0)
1000d638:	00001106 	br	1000d680 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
1000d63c:	80800917 	ldw	r2,36(r16)
1000d640:	80c00717 	ldw	r3,28(r16)
1000d644:	900f883a 	mov	r7,r18
1000d648:	880d883a 	mov	r6,r17
1000d64c:	180b883a 	mov	r5,r3
1000d650:	e13ffb17 	ldw	r4,-20(fp)
1000d654:	103ee83a 	callr	r2
1000d658:	1027883a 	mov	r19,r2
      if (t <= 0)
1000d65c:	04c00516 	blt	zero,r19,1000d674 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
1000d660:	8080030b 	ldhu	r2,12(r16)
1000d664:	10801014 	ori	r2,r2,64
1000d668:	8080030d 	sth	r2,12(r16)
          return EOF;
1000d66c:	00bfffc4 	movi	r2,-1
1000d670:	00000506 	br	1000d688 <__sflush_r+0x2e0>
	}
      p += t;
1000d674:	9805883a 	mov	r2,r19
1000d678:	88a3883a 	add	r17,r17,r2
      n -= t;
1000d67c:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
1000d680:	04bfee16 	blt	zero,r18,1000d63c <__alt_data_end+0xf800d63c>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
1000d684:	0005883a 	mov	r2,zero
}
1000d688:	e6fffc04 	addi	sp,fp,-16
1000d68c:	dfc00517 	ldw	ra,20(sp)
1000d690:	df000417 	ldw	fp,16(sp)
1000d694:	dcc00317 	ldw	r19,12(sp)
1000d698:	dc800217 	ldw	r18,8(sp)
1000d69c:	dc400117 	ldw	r17,4(sp)
1000d6a0:	dc000017 	ldw	r16,0(sp)
1000d6a4:	dec00604 	addi	sp,sp,24
1000d6a8:	f800283a 	ret

1000d6ac <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000d6ac:	defffa04 	addi	sp,sp,-24
1000d6b0:	dfc00515 	stw	ra,20(sp)
1000d6b4:	df000415 	stw	fp,16(sp)
1000d6b8:	dc000315 	stw	r16,12(sp)
1000d6bc:	df000404 	addi	fp,sp,16
1000d6c0:	e13ffe15 	stw	r4,-8(fp)
1000d6c4:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
1000d6c8:	e0bffe17 	ldw	r2,-8(fp)
1000d6cc:	e0bffc15 	stw	r2,-16(fp)
1000d6d0:	e0bffc17 	ldw	r2,-16(fp)
1000d6d4:	10000526 	beq	r2,zero,1000d6ec <_fflush_r+0x40>
1000d6d8:	e0bffc17 	ldw	r2,-16(fp)
1000d6dc:	10800e17 	ldw	r2,56(r2)
1000d6e0:	1000021e 	bne	r2,zero,1000d6ec <_fflush_r+0x40>
1000d6e4:	e13ffc17 	ldw	r4,-16(fp)
1000d6e8:	000db740 	call	1000db74 <__sinit>

  if (!fp->_flags)
1000d6ec:	8080030b 	ldhu	r2,12(r16)
1000d6f0:	10bfffcc 	andi	r2,r2,65535
1000d6f4:	10a0001c 	xori	r2,r2,32768
1000d6f8:	10a00004 	addi	r2,r2,-32768
1000d6fc:	1000021e 	bne	r2,zero,1000d708 <_fflush_r+0x5c>
    return 0;
1000d700:	0005883a 	mov	r2,zero
1000d704:	00000506 	br	1000d71c <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
1000d708:	800b883a 	mov	r5,r16
1000d70c:	e13ffe17 	ldw	r4,-8(fp)
1000d710:	000d3a80 	call	1000d3a8 <__sflush_r>
1000d714:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
1000d718:	e0bffd17 	ldw	r2,-12(fp)
}
1000d71c:	e6ffff04 	addi	sp,fp,-4
1000d720:	dfc00217 	ldw	ra,8(sp)
1000d724:	df000117 	ldw	fp,4(sp)
1000d728:	dc000017 	ldw	r16,0(sp)
1000d72c:	dec00304 	addi	sp,sp,12
1000d730:	f800283a 	ret

1000d734 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
1000d734:	defffe04 	addi	sp,sp,-8
1000d738:	dfc00115 	stw	ra,4(sp)
1000d73c:	df000015 	stw	fp,0(sp)
1000d740:	d839883a 	mov	fp,sp
1000d744:	2007883a 	mov	r3,r4
  if (fp == NULL)
1000d748:	1800081e 	bne	r3,zero,1000d76c <fflush+0x38>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
1000d74c:	008403b4 	movhi	r2,4110
1000d750:	10a45104 	addi	r2,r2,-28348
1000d754:	10800017 	ldw	r2,0(r2)
1000d758:	01440074 	movhi	r5,4097
1000d75c:	2975ab04 	addi	r5,r5,-10580
1000d760:	1009883a 	mov	r4,r2
1000d764:	000ebac0 	call	1000ebac <_fwalk_reent>
1000d768:	00000606 	br	1000d784 <fflush+0x50>

  return _fflush_r (_REENT, fp);
1000d76c:	008403b4 	movhi	r2,4110
1000d770:	10a45004 	addi	r2,r2,-28352
1000d774:	10800017 	ldw	r2,0(r2)
1000d778:	180b883a 	mov	r5,r3
1000d77c:	1009883a 	mov	r4,r2
1000d780:	000d6ac0 	call	1000d6ac <_fflush_r>
}
1000d784:	e037883a 	mov	sp,fp
1000d788:	dfc00117 	ldw	ra,4(sp)
1000d78c:	df000017 	ldw	fp,0(sp)
1000d790:	dec00204 	addi	sp,sp,8
1000d794:	f800283a 	ret

1000d798 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
1000d798:	defffa04 	addi	sp,sp,-24
1000d79c:	dfc00515 	stw	ra,20(sp)
1000d7a0:	df000415 	stw	fp,16(sp)
1000d7a4:	df000404 	addi	fp,sp,16
1000d7a8:	e13ffc15 	stw	r4,-16(fp)
1000d7ac:	e17ffd15 	stw	r5,-12(fp)
1000d7b0:	e1bffe15 	stw	r6,-8(fp)
1000d7b4:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
1000d7b8:	e0bffc17 	ldw	r2,-16(fp)
1000d7bc:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
1000d7c0:	e0bffc17 	ldw	r2,-16(fp)
1000d7c4:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
1000d7c8:	e0bffc17 	ldw	r2,-16(fp)
1000d7cc:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
1000d7d0:	e0bffd17 	ldw	r2,-12(fp)
1000d7d4:	1007883a 	mov	r3,r2
1000d7d8:	e0bffc17 	ldw	r2,-16(fp)
1000d7dc:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
1000d7e0:	e0bffc17 	ldw	r2,-16(fp)
1000d7e4:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
1000d7e8:	e0bffe17 	ldw	r2,-8(fp)
1000d7ec:	1007883a 	mov	r3,r2
1000d7f0:	e0bffc17 	ldw	r2,-16(fp)
1000d7f4:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
1000d7f8:	e0bffc17 	ldw	r2,-16(fp)
1000d7fc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
1000d800:	e0bffc17 	ldw	r2,-16(fp)
1000d804:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
1000d808:	e0bffc17 	ldw	r2,-16(fp)
1000d80c:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
1000d810:	e0bffc17 	ldw	r2,-16(fp)
1000d814:	10801704 	addi	r2,r2,92
1000d818:	01800204 	movi	r6,8
1000d81c:	000b883a 	mov	r5,zero
1000d820:	1009883a 	mov	r4,r2
1000d824:	0006f840 	call	10006f84 <memset>
  ptr->_cookie = ptr;
1000d828:	e0bffc17 	ldw	r2,-16(fp)
1000d82c:	e0fffc17 	ldw	r3,-16(fp)
1000d830:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
1000d834:	e0fffc17 	ldw	r3,-16(fp)
1000d838:	00840074 	movhi	r2,4097
1000d83c:	1085ed04 	addi	r2,r2,6068
1000d840:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
1000d844:	e0fffc17 	ldw	r3,-16(fp)
1000d848:	00840074 	movhi	r2,4097
1000d84c:	10862004 	addi	r2,r2,6272
1000d850:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
1000d854:	e0fffc17 	ldw	r3,-16(fp)
1000d858:	00840074 	movhi	r2,4097
1000d85c:	10864d04 	addi	r2,r2,6452
1000d860:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
1000d864:	e0fffc17 	ldw	r3,-16(fp)
1000d868:	00840074 	movhi	r2,4097
1000d86c:	10867504 	addi	r2,r2,6612
1000d870:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
1000d874:	0001883a 	nop
1000d878:	e037883a 	mov	sp,fp
1000d87c:	dfc00117 	ldw	ra,4(sp)
1000d880:	df000017 	ldw	fp,0(sp)
1000d884:	dec00204 	addi	sp,sp,8
1000d888:	f800283a 	ret

1000d88c <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
1000d88c:	defffa04 	addi	sp,sp,-24
1000d890:	dfc00515 	stw	ra,20(sp)
1000d894:	df000415 	stw	fp,16(sp)
1000d898:	dc400315 	stw	r17,12(sp)
1000d89c:	dc000215 	stw	r16,8(sp)
1000d8a0:	df000404 	addi	fp,sp,16
1000d8a4:	e13ffd15 	stw	r4,-12(fp)
1000d8a8:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
1000d8ac:	80bfffc4 	addi	r2,r16,-1
1000d8b0:	01401a04 	movi	r5,104
1000d8b4:	1009883a 	mov	r4,r2
1000d8b8:	0005a080 	call	10005a08 <__mulsi3>
1000d8bc:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
1000d8c0:	100b883a 	mov	r5,r2
1000d8c4:	e13ffd17 	ldw	r4,-12(fp)
1000d8c8:	00064080 	call	10006408 <_malloc_r>
1000d8cc:	e0bffc15 	stw	r2,-16(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
1000d8d0:	e0bffc17 	ldw	r2,-16(fp)
1000d8d4:	1000021e 	bne	r2,zero,1000d8e0 <__sfmoreglue+0x54>
    return NULL;
1000d8d8:	0005883a 	mov	r2,zero
1000d8dc:	00001306 	br	1000d92c <__sfmoreglue+0xa0>
  g->glue._next = NULL;
1000d8e0:	e0bffc17 	ldw	r2,-16(fp)
1000d8e4:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
1000d8e8:	e0bffc17 	ldw	r2,-16(fp)
1000d8ec:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
1000d8f0:	e0bffc17 	ldw	r2,-16(fp)
1000d8f4:	10c00304 	addi	r3,r2,12
1000d8f8:	e0bffc17 	ldw	r2,-16(fp)
1000d8fc:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
1000d900:	e0bffc17 	ldw	r2,-16(fp)
1000d904:	14400304 	addi	r17,r2,12
1000d908:	8005883a 	mov	r2,r16
1000d90c:	01401a04 	movi	r5,104
1000d910:	1009883a 	mov	r4,r2
1000d914:	0005a080 	call	10005a08 <__mulsi3>
1000d918:	100d883a 	mov	r6,r2
1000d91c:	000b883a 	mov	r5,zero
1000d920:	8809883a 	mov	r4,r17
1000d924:	0006f840 	call	10006f84 <memset>
  return &g->glue;
1000d928:	e0bffc17 	ldw	r2,-16(fp)
}
1000d92c:	e6fffe04 	addi	sp,fp,-8
1000d930:	dfc00317 	ldw	ra,12(sp)
1000d934:	df000217 	ldw	fp,8(sp)
1000d938:	dc400117 	ldw	r17,4(sp)
1000d93c:	dc000017 	ldw	r16,0(sp)
1000d940:	dec00404 	addi	sp,sp,16
1000d944:	f800283a 	ret

1000d948 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
1000d948:	defffa04 	addi	sp,sp,-24
1000d94c:	dfc00515 	stw	ra,20(sp)
1000d950:	df000415 	stw	fp,16(sp)
1000d954:	df000404 	addi	fp,sp,16
1000d958:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
1000d95c:	000dc4c0 	call	1000dc4c <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
1000d960:	008403b4 	movhi	r2,4110
1000d964:	10a45104 	addi	r2,r2,-28348
1000d968:	10800017 	ldw	r2,0(r2)
1000d96c:	10800e17 	ldw	r2,56(r2)
1000d970:	1000051e 	bne	r2,zero,1000d988 <__sfp+0x40>
    __sinit (_GLOBAL_REENT);
1000d974:	008403b4 	movhi	r2,4110
1000d978:	10a45104 	addi	r2,r2,-28348
1000d97c:	10800017 	ldw	r2,0(r2)
1000d980:	1009883a 	mov	r4,r2
1000d984:	000db740 	call	1000db74 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
1000d988:	008403b4 	movhi	r2,4110
1000d98c:	10a45104 	addi	r2,r2,-28348
1000d990:	10800017 	ldw	r2,0(r2)
1000d994:	1080b804 	addi	r2,r2,736
1000d998:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000d99c:	e0bffe17 	ldw	r2,-8(fp)
1000d9a0:	10800217 	ldw	r2,8(r2)
1000d9a4:	e0bffc15 	stw	r2,-16(fp)
1000d9a8:	e0bffe17 	ldw	r2,-8(fp)
1000d9ac:	10800117 	ldw	r2,4(r2)
1000d9b0:	e0bffd15 	stw	r2,-12(fp)
1000d9b4:	00000906 	br	1000d9dc <__sfp+0x94>
	if (fp->_flags == 0)
1000d9b8:	e0bffc17 	ldw	r2,-16(fp)
1000d9bc:	1080030b 	ldhu	r2,12(r2)
1000d9c0:	10bfffcc 	andi	r2,r2,65535
1000d9c4:	10a0001c 	xori	r2,r2,32768
1000d9c8:	10a00004 	addi	r2,r2,-32768
1000d9cc:	10001f26 	beq	r2,zero,1000da4c <__sfp+0x104>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000d9d0:	e0bffc17 	ldw	r2,-16(fp)
1000d9d4:	10801a04 	addi	r2,r2,104
1000d9d8:	e0bffc15 	stw	r2,-16(fp)
1000d9dc:	e0bffd17 	ldw	r2,-12(fp)
1000d9e0:	10bfffc4 	addi	r2,r2,-1
1000d9e4:	e0bffd15 	stw	r2,-12(fp)
1000d9e8:	e0bffd17 	ldw	r2,-12(fp)
1000d9ec:	103ff20e 	bge	r2,zero,1000d9b8 <__alt_data_end+0xf800d9b8>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
1000d9f0:	e0bffe17 	ldw	r2,-8(fp)
1000d9f4:	10800017 	ldw	r2,0(r2)
1000d9f8:	1000091e 	bne	r2,zero,1000da20 <__sfp+0xd8>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
1000d9fc:	01400104 	movi	r5,4
1000da00:	e13fff17 	ldw	r4,-4(fp)
1000da04:	000d88c0 	call	1000d88c <__sfmoreglue>
1000da08:	1007883a 	mov	r3,r2
1000da0c:	e0bffe17 	ldw	r2,-8(fp)
1000da10:	10c00015 	stw	r3,0(r2)
1000da14:	e0bffe17 	ldw	r2,-8(fp)
1000da18:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
1000da1c:	10000426 	beq	r2,zero,1000da30 <__sfp+0xe8>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
1000da20:	e0bffe17 	ldw	r2,-8(fp)
1000da24:	10800017 	ldw	r2,0(r2)
1000da28:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
1000da2c:	003fdb06 	br	1000d99c <__alt_data_end+0xf800d99c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
1000da30:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
1000da34:	000dc6c0 	call	1000dc6c <__sfp_lock_release>
  d->_errno = ENOMEM;
1000da38:	e0bfff17 	ldw	r2,-4(fp)
1000da3c:	00c00304 	movi	r3,12
1000da40:	10c00015 	stw	r3,0(r2)
  return NULL;
1000da44:	0005883a 	mov	r2,zero
1000da48:	00002506 	br	1000dae0 <__sfp+0x198>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
1000da4c:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
1000da50:	e0bffc17 	ldw	r2,-16(fp)
1000da54:	00ffffc4 	movi	r3,-1
1000da58:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
1000da5c:	e0bffc17 	ldw	r2,-16(fp)
1000da60:	00c00044 	movi	r3,1
1000da64:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
1000da68:	e0bffc17 	ldw	r2,-16(fp)
1000da6c:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
1000da70:	000dc6c0 	call	1000dc6c <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
1000da74:	e0bffc17 	ldw	r2,-16(fp)
1000da78:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
1000da7c:	e0bffc17 	ldw	r2,-16(fp)
1000da80:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
1000da84:	e0bffc17 	ldw	r2,-16(fp)
1000da88:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
1000da8c:	e0bffc17 	ldw	r2,-16(fp)
1000da90:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
1000da94:	e0bffc17 	ldw	r2,-16(fp)
1000da98:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
1000da9c:	e0bffc17 	ldw	r2,-16(fp)
1000daa0:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
1000daa4:	e0bffc17 	ldw	r2,-16(fp)
1000daa8:	10801704 	addi	r2,r2,92
1000daac:	01800204 	movi	r6,8
1000dab0:	000b883a 	mov	r5,zero
1000dab4:	1009883a 	mov	r4,r2
1000dab8:	0006f840 	call	10006f84 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
1000dabc:	e0bffc17 	ldw	r2,-16(fp)
1000dac0:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
1000dac4:	e0bffc17 	ldw	r2,-16(fp)
1000dac8:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
1000dacc:	e0bffc17 	ldw	r2,-16(fp)
1000dad0:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
1000dad4:	e0bffc17 	ldw	r2,-16(fp)
1000dad8:	10001215 	stw	zero,72(r2)

  return fp;
1000dadc:	e0bffc17 	ldw	r2,-16(fp)
}
1000dae0:	e037883a 	mov	sp,fp
1000dae4:	dfc00117 	ldw	ra,4(sp)
1000dae8:	df000017 	ldw	fp,0(sp)
1000daec:	dec00204 	addi	sp,sp,8
1000daf0:	f800283a 	ret

1000daf4 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
1000daf4:	defffc04 	addi	sp,sp,-16
1000daf8:	dfc00315 	stw	ra,12(sp)
1000dafc:	df000215 	stw	fp,8(sp)
1000db00:	df000204 	addi	fp,sp,8
1000db04:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
1000db08:	00840074 	movhi	r2,4097
1000db0c:	108cde04 	addi	r2,r2,13176
1000db10:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
1000db14:	e17ffe17 	ldw	r5,-8(fp)
1000db18:	e13fff17 	ldw	r4,-4(fp)
1000db1c:	000ebac0 	call	1000ebac <_fwalk_reent>
}
1000db20:	0001883a 	nop
1000db24:	e037883a 	mov	sp,fp
1000db28:	dfc00117 	ldw	ra,4(sp)
1000db2c:	df000017 	ldw	fp,0(sp)
1000db30:	dec00204 	addi	sp,sp,8
1000db34:	f800283a 	ret

1000db38 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
1000db38:	defffe04 	addi	sp,sp,-8
1000db3c:	dfc00115 	stw	ra,4(sp)
1000db40:	df000015 	stw	fp,0(sp)
1000db44:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
1000db48:	008403b4 	movhi	r2,4110
1000db4c:	10a45104 	addi	r2,r2,-28348
1000db50:	10800017 	ldw	r2,0(r2)
1000db54:	1009883a 	mov	r4,r2
1000db58:	000daf40 	call	1000daf4 <_cleanup_r>
}
1000db5c:	0001883a 	nop
1000db60:	e037883a 	mov	sp,fp
1000db64:	dfc00117 	ldw	ra,4(sp)
1000db68:	df000017 	ldw	fp,0(sp)
1000db6c:	dec00204 	addi	sp,sp,8
1000db70:	f800283a 	ret

1000db74 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
1000db74:	defffd04 	addi	sp,sp,-12
1000db78:	dfc00215 	stw	ra,8(sp)
1000db7c:	df000115 	stw	fp,4(sp)
1000db80:	df000104 	addi	fp,sp,4
1000db84:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
1000db88:	000dc8c0 	call	1000dc8c <__sinit_lock_acquire>

  if (s->__sdidinit)
1000db8c:	e0bfff17 	ldw	r2,-4(fp)
1000db90:	10800e17 	ldw	r2,56(r2)
1000db94:	10000226 	beq	r2,zero,1000dba0 <__sinit+0x2c>
    {
      __sinit_lock_release ();
1000db98:	000dcac0 	call	1000dcac <__sinit_lock_release>
      return;
1000db9c:	00002606 	br	1000dc38 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
1000dba0:	e0ffff17 	ldw	r3,-4(fp)
1000dba4:	00840074 	movhi	r2,4097
1000dba8:	10b6bd04 	addi	r2,r2,-9484
1000dbac:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
1000dbb0:	e0bfff17 	ldw	r2,-4(fp)
1000dbb4:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
1000dbb8:	e0bfff17 	ldw	r2,-4(fp)
1000dbbc:	00c000c4 	movi	r3,3
1000dbc0:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
1000dbc4:	e0bfff17 	ldw	r2,-4(fp)
1000dbc8:	10c0bb04 	addi	r3,r2,748
1000dbcc:	e0bfff17 	ldw	r2,-4(fp)
1000dbd0:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
1000dbd4:	e0bfff17 	ldw	r2,-4(fp)
1000dbd8:	10800117 	ldw	r2,4(r2)
1000dbdc:	e1ffff17 	ldw	r7,-4(fp)
1000dbe0:	000d883a 	mov	r6,zero
1000dbe4:	01400104 	movi	r5,4
1000dbe8:	1009883a 	mov	r4,r2
1000dbec:	000d7980 	call	1000d798 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
1000dbf0:	e0bfff17 	ldw	r2,-4(fp)
1000dbf4:	10800217 	ldw	r2,8(r2)
1000dbf8:	e1ffff17 	ldw	r7,-4(fp)
1000dbfc:	01800044 	movi	r6,1
1000dc00:	01400284 	movi	r5,10
1000dc04:	1009883a 	mov	r4,r2
1000dc08:	000d7980 	call	1000d798 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
1000dc0c:	e0bfff17 	ldw	r2,-4(fp)
1000dc10:	10800317 	ldw	r2,12(r2)
1000dc14:	e1ffff17 	ldw	r7,-4(fp)
1000dc18:	01800084 	movi	r6,2
1000dc1c:	01400484 	movi	r5,18
1000dc20:	1009883a 	mov	r4,r2
1000dc24:	000d7980 	call	1000d798 <std>

  s->__sdidinit = 1;
1000dc28:	e0bfff17 	ldw	r2,-4(fp)
1000dc2c:	00c00044 	movi	r3,1
1000dc30:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
1000dc34:	000dcac0 	call	1000dcac <__sinit_lock_release>
}
1000dc38:	e037883a 	mov	sp,fp
1000dc3c:	dfc00117 	ldw	ra,4(sp)
1000dc40:	df000017 	ldw	fp,0(sp)
1000dc44:	dec00204 	addi	sp,sp,8
1000dc48:	f800283a 	ret

1000dc4c <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
1000dc4c:	deffff04 	addi	sp,sp,-4
1000dc50:	df000015 	stw	fp,0(sp)
1000dc54:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
1000dc58:	0001883a 	nop
1000dc5c:	e037883a 	mov	sp,fp
1000dc60:	df000017 	ldw	fp,0(sp)
1000dc64:	dec00104 	addi	sp,sp,4
1000dc68:	f800283a 	ret

1000dc6c <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
1000dc6c:	deffff04 	addi	sp,sp,-4
1000dc70:	df000015 	stw	fp,0(sp)
1000dc74:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
1000dc78:	0001883a 	nop
1000dc7c:	e037883a 	mov	sp,fp
1000dc80:	df000017 	ldw	fp,0(sp)
1000dc84:	dec00104 	addi	sp,sp,4
1000dc88:	f800283a 	ret

1000dc8c <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
1000dc8c:	deffff04 	addi	sp,sp,-4
1000dc90:	df000015 	stw	fp,0(sp)
1000dc94:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
1000dc98:	0001883a 	nop
1000dc9c:	e037883a 	mov	sp,fp
1000dca0:	df000017 	ldw	fp,0(sp)
1000dca4:	dec00104 	addi	sp,sp,4
1000dca8:	f800283a 	ret

1000dcac <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
1000dcac:	deffff04 	addi	sp,sp,-4
1000dcb0:	df000015 	stw	fp,0(sp)
1000dcb4:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
1000dcb8:	0001883a 	nop
1000dcbc:	e037883a 	mov	sp,fp
1000dcc0:	df000017 	ldw	fp,0(sp)
1000dcc4:	dec00104 	addi	sp,sp,4
1000dcc8:	f800283a 	ret

1000dccc <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
1000dccc:	defffe04 	addi	sp,sp,-8
1000dcd0:	df000115 	stw	fp,4(sp)
1000dcd4:	df000104 	addi	fp,sp,4
1000dcd8:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
1000dcdc:	0005883a 	mov	r2,zero
}
1000dce0:	e037883a 	mov	sp,fp
1000dce4:	df000017 	ldw	fp,0(sp)
1000dce8:	dec00104 	addi	sp,sp,4
1000dcec:	f800283a 	ret

1000dcf0 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
1000dcf0:	defffe04 	addi	sp,sp,-8
1000dcf4:	df000115 	stw	fp,4(sp)
1000dcf8:	df000104 	addi	fp,sp,4
1000dcfc:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
1000dd00:	0005883a 	mov	r2,zero
}
1000dd04:	e037883a 	mov	sp,fp
1000dd08:	df000017 	ldw	fp,0(sp)
1000dd0c:	dec00104 	addi	sp,sp,4
1000dd10:	f800283a 	ret

1000dd14 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
1000dd14:	defffe04 	addi	sp,sp,-8
1000dd18:	dfc00115 	stw	ra,4(sp)
1000dd1c:	df000015 	stw	fp,0(sp)
1000dd20:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
1000dd24:	000dc4c0 	call	1000dc4c <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
1000dd28:	008403b4 	movhi	r2,4110
1000dd2c:	10a45004 	addi	r2,r2,-28352
1000dd30:	10800017 	ldw	r2,0(r2)
1000dd34:	01440074 	movhi	r5,4097
1000dd38:	29773304 	addi	r5,r5,-9012
1000dd3c:	1009883a 	mov	r4,r2
1000dd40:	000ead40 	call	1000ead4 <_fwalk>
}
1000dd44:	0001883a 	nop
1000dd48:	e037883a 	mov	sp,fp
1000dd4c:	dfc00117 	ldw	ra,4(sp)
1000dd50:	df000017 	ldw	fp,0(sp)
1000dd54:	dec00204 	addi	sp,sp,8
1000dd58:	f800283a 	ret

1000dd5c <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
1000dd5c:	defffe04 	addi	sp,sp,-8
1000dd60:	dfc00115 	stw	ra,4(sp)
1000dd64:	df000015 	stw	fp,0(sp)
1000dd68:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
1000dd6c:	008403b4 	movhi	r2,4110
1000dd70:	10a45004 	addi	r2,r2,-28352
1000dd74:	10800017 	ldw	r2,0(r2)
1000dd78:	01440074 	movhi	r5,4097
1000dd7c:	29773c04 	addi	r5,r5,-8976
1000dd80:	1009883a 	mov	r4,r2
1000dd84:	000ead40 	call	1000ead4 <_fwalk>

  __sfp_lock_release ();
1000dd88:	000dc6c0 	call	1000dc6c <__sfp_lock_release>
}
1000dd8c:	0001883a 	nop
1000dd90:	e037883a 	mov	sp,fp
1000dd94:	dfc00117 	ldw	ra,4(sp)
1000dd98:	df000017 	ldw	fp,0(sp)
1000dd9c:	dec00204 	addi	sp,sp,8
1000dda0:	f800283a 	ret

1000dda4 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
1000dda4:	defff204 	addi	sp,sp,-56
1000dda8:	dfc00d15 	stw	ra,52(sp)
1000ddac:	df000c15 	stw	fp,48(sp)
1000ddb0:	df000c04 	addi	fp,sp,48
1000ddb4:	e13ffe15 	stw	r4,-8(fp)
1000ddb8:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
1000ddbc:	e0bfff17 	ldw	r2,-4(fp)
1000ddc0:	10014e26 	beq	r2,zero,1000e2fc <_free_r+0x558>
    return;

  MALLOC_LOCK;
1000ddc4:	e13ffe17 	ldw	r4,-8(fp)
1000ddc8:	0015d700 	call	10015d70 <__malloc_lock>

  p = mem2chunk(mem);
1000ddcc:	e0bfff17 	ldw	r2,-4(fp)
1000ddd0:	10bffe04 	addi	r2,r2,-8
1000ddd4:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
1000ddd8:	e0bff417 	ldw	r2,-48(fp)
1000dddc:	10800117 	ldw	r2,4(r2)
1000dde0:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
1000dde4:	e0fff917 	ldw	r3,-28(fp)
1000dde8:	00bfff84 	movi	r2,-2
1000ddec:	1884703a 	and	r2,r3,r2
1000ddf0:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
1000ddf4:	e0fff417 	ldw	r3,-48(fp)
1000ddf8:	e0bff517 	ldw	r2,-44(fp)
1000ddfc:	1885883a 	add	r2,r3,r2
1000de00:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
1000de04:	e0bffa17 	ldw	r2,-24(fp)
1000de08:	10c00117 	ldw	r3,4(r2)
1000de0c:	00bfff04 	movi	r2,-4
1000de10:	1884703a 	and	r2,r3,r2
1000de14:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
1000de18:	00840374 	movhi	r2,4109
1000de1c:	109e9e04 	addi	r2,r2,31352
1000de20:	10c00217 	ldw	r3,8(r2)
1000de24:	e0bffa17 	ldw	r2,-24(fp)
1000de28:	1880351e 	bne	r3,r2,1000df00 <_free_r+0x15c>
  {
    sz += nextsz;
1000de2c:	e0fff517 	ldw	r3,-44(fp)
1000de30:	e0bffb17 	ldw	r2,-20(fp)
1000de34:	1885883a 	add	r2,r3,r2
1000de38:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
1000de3c:	e0bff917 	ldw	r2,-28(fp)
1000de40:	1080004c 	andi	r2,r2,1
1000de44:	1000181e 	bne	r2,zero,1000dea8 <_free_r+0x104>
    {
      prevsz = p->prev_size;
1000de48:	e0bff417 	ldw	r2,-48(fp)
1000de4c:	10800017 	ldw	r2,0(r2)
1000de50:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
1000de54:	e0bffc17 	ldw	r2,-16(fp)
1000de58:	0085c83a 	sub	r2,zero,r2
1000de5c:	e0fff417 	ldw	r3,-48(fp)
1000de60:	1885883a 	add	r2,r3,r2
1000de64:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
1000de68:	e0fff517 	ldw	r3,-44(fp)
1000de6c:	e0bffc17 	ldw	r2,-16(fp)
1000de70:	1885883a 	add	r2,r3,r2
1000de74:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
1000de78:	e0bff417 	ldw	r2,-48(fp)
1000de7c:	10800317 	ldw	r2,12(r2)
1000de80:	e0bff615 	stw	r2,-40(fp)
1000de84:	e0bff417 	ldw	r2,-48(fp)
1000de88:	10800217 	ldw	r2,8(r2)
1000de8c:	e0bff715 	stw	r2,-36(fp)
1000de90:	e0bff717 	ldw	r2,-36(fp)
1000de94:	e0fff617 	ldw	r3,-40(fp)
1000de98:	10c00315 	stw	r3,12(r2)
1000de9c:	e0bff617 	ldw	r2,-40(fp)
1000dea0:	e0fff717 	ldw	r3,-36(fp)
1000dea4:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
1000dea8:	e0bff517 	ldw	r2,-44(fp)
1000deac:	10c00054 	ori	r3,r2,1
1000deb0:	e0bff417 	ldw	r2,-48(fp)
1000deb4:	10c00115 	stw	r3,4(r2)
    top = p;
1000deb8:	00840374 	movhi	r2,4109
1000debc:	109e9e04 	addi	r2,r2,31352
1000dec0:	e0fff417 	ldw	r3,-48(fp)
1000dec4:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
1000dec8:	008403b4 	movhi	r2,4110
1000decc:	10a45204 	addi	r2,r2,-28344
1000ded0:	10800017 	ldw	r2,0(r2)
1000ded4:	e0fff517 	ldw	r3,-44(fp)
1000ded8:	18800636 	bltu	r3,r2,1000def4 <_free_r+0x150>
      malloc_trim(RCALL top_pad); 
1000dedc:	008403b4 	movhi	r2,4110
1000dee0:	108aa404 	addi	r2,r2,10896
1000dee4:	10800017 	ldw	r2,0(r2)
1000dee8:	100b883a 	mov	r5,r2
1000deec:	e13ffe17 	ldw	r4,-8(fp)
1000def0:	000e3140 	call	1000e314 <_malloc_trim_r>
    MALLOC_UNLOCK;
1000def4:	e13ffe17 	ldw	r4,-8(fp)
1000def8:	0015d940 	call	10015d94 <__malloc_unlock>
    return;
1000defc:	00010006 	br	1000e300 <_free_r+0x55c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
1000df00:	e0bffa17 	ldw	r2,-24(fp)
1000df04:	e0fffb17 	ldw	r3,-20(fp)
1000df08:	10c00115 	stw	r3,4(r2)

  islr = 0;
1000df0c:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
1000df10:	e0bff917 	ldw	r2,-28(fp)
1000df14:	1080004c 	andi	r2,r2,1
1000df18:	1000201e 	bne	r2,zero,1000df9c <_free_r+0x1f8>
  {
    prevsz = p->prev_size;
1000df1c:	e0bff417 	ldw	r2,-48(fp)
1000df20:	10800017 	ldw	r2,0(r2)
1000df24:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
1000df28:	e0bffc17 	ldw	r2,-16(fp)
1000df2c:	0085c83a 	sub	r2,zero,r2
1000df30:	e0fff417 	ldw	r3,-48(fp)
1000df34:	1885883a 	add	r2,r3,r2
1000df38:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
1000df3c:	e0fff517 	ldw	r3,-44(fp)
1000df40:	e0bffc17 	ldw	r2,-16(fp)
1000df44:	1885883a 	add	r2,r3,r2
1000df48:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
1000df4c:	e0bff417 	ldw	r2,-48(fp)
1000df50:	10c00217 	ldw	r3,8(r2)
1000df54:	00840374 	movhi	r2,4109
1000df58:	109ea004 	addi	r2,r2,31360
1000df5c:	1880031e 	bne	r3,r2,1000df6c <_free_r+0x1c8>
      islr = 1;
1000df60:	00800044 	movi	r2,1
1000df64:	e0bff815 	stw	r2,-32(fp)
1000df68:	00000c06 	br	1000df9c <_free_r+0x1f8>
    else
      unlink(p, bck, fwd);
1000df6c:	e0bff417 	ldw	r2,-48(fp)
1000df70:	10800317 	ldw	r2,12(r2)
1000df74:	e0bff615 	stw	r2,-40(fp)
1000df78:	e0bff417 	ldw	r2,-48(fp)
1000df7c:	10800217 	ldw	r2,8(r2)
1000df80:	e0bff715 	stw	r2,-36(fp)
1000df84:	e0bff717 	ldw	r2,-36(fp)
1000df88:	e0fff617 	ldw	r3,-40(fp)
1000df8c:	10c00315 	stw	r3,12(r2)
1000df90:	e0bff617 	ldw	r2,-40(fp)
1000df94:	e0fff717 	ldw	r3,-36(fp)
1000df98:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
1000df9c:	e0fffa17 	ldw	r3,-24(fp)
1000dfa0:	e0bffb17 	ldw	r2,-20(fp)
1000dfa4:	1885883a 	add	r2,r3,r2
1000dfa8:	10800117 	ldw	r2,4(r2)
1000dfac:	1080004c 	andi	r2,r2,1
1000dfb0:	10002a1e 	bne	r2,zero,1000e05c <_free_r+0x2b8>
  {
    sz += nextsz;
1000dfb4:	e0fff517 	ldw	r3,-44(fp)
1000dfb8:	e0bffb17 	ldw	r2,-20(fp)
1000dfbc:	1885883a 	add	r2,r3,r2
1000dfc0:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
1000dfc4:	e0bff817 	ldw	r2,-32(fp)
1000dfc8:	1000181e 	bne	r2,zero,1000e02c <_free_r+0x288>
1000dfcc:	e0bffa17 	ldw	r2,-24(fp)
1000dfd0:	10c00217 	ldw	r3,8(r2)
1000dfd4:	00840374 	movhi	r2,4109
1000dfd8:	109ea004 	addi	r2,r2,31360
1000dfdc:	1880131e 	bne	r3,r2,1000e02c <_free_r+0x288>
    {
      islr = 1;
1000dfe0:	00800044 	movi	r2,1
1000dfe4:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
1000dfe8:	00c40374 	movhi	r3,4109
1000dfec:	18dea004 	addi	r3,r3,31360
1000dff0:	00840374 	movhi	r2,4109
1000dff4:	109ea004 	addi	r2,r2,31360
1000dff8:	e13ff417 	ldw	r4,-48(fp)
1000dffc:	11000315 	stw	r4,12(r2)
1000e000:	10800317 	ldw	r2,12(r2)
1000e004:	18800215 	stw	r2,8(r3)
1000e008:	00840374 	movhi	r2,4109
1000e00c:	109ea004 	addi	r2,r2,31360
1000e010:	e0fff417 	ldw	r3,-48(fp)
1000e014:	18800315 	stw	r2,12(r3)
1000e018:	e0bff417 	ldw	r2,-48(fp)
1000e01c:	10c00317 	ldw	r3,12(r2)
1000e020:	e0bff417 	ldw	r2,-48(fp)
1000e024:	10c00215 	stw	r3,8(r2)
1000e028:	00000c06 	br	1000e05c <_free_r+0x2b8>
    }
    else
      unlink(next, bck, fwd);
1000e02c:	e0bffa17 	ldw	r2,-24(fp)
1000e030:	10800317 	ldw	r2,12(r2)
1000e034:	e0bff615 	stw	r2,-40(fp)
1000e038:	e0bffa17 	ldw	r2,-24(fp)
1000e03c:	10800217 	ldw	r2,8(r2)
1000e040:	e0bff715 	stw	r2,-36(fp)
1000e044:	e0bff717 	ldw	r2,-36(fp)
1000e048:	e0fff617 	ldw	r3,-40(fp)
1000e04c:	10c00315 	stw	r3,12(r2)
1000e050:	e0bff617 	ldw	r2,-40(fp)
1000e054:	e0fff717 	ldw	r3,-36(fp)
1000e058:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
1000e05c:	e0bff517 	ldw	r2,-44(fp)
1000e060:	10c00054 	ori	r3,r2,1
1000e064:	e0bff417 	ldw	r2,-48(fp)
1000e068:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
1000e06c:	e0fff417 	ldw	r3,-48(fp)
1000e070:	e0bff517 	ldw	r2,-44(fp)
1000e074:	1885883a 	add	r2,r3,r2
1000e078:	e0fff517 	ldw	r3,-44(fp)
1000e07c:	10c00015 	stw	r3,0(r2)
  if (!islr)
1000e080:	e0bff817 	ldw	r2,-32(fp)
1000e084:	10009a1e 	bne	r2,zero,1000e2f0 <_free_r+0x54c>
    frontlink(p, sz, idx, bck, fwd);  
1000e088:	e0bff517 	ldw	r2,-44(fp)
1000e08c:	10808028 	cmpgeui	r2,r2,512
1000e090:	10002c1e 	bne	r2,zero,1000e144 <_free_r+0x3a0>
1000e094:	e0bff517 	ldw	r2,-44(fp)
1000e098:	1004d0fa 	srli	r2,r2,3
1000e09c:	e0bffd15 	stw	r2,-12(fp)
1000e0a0:	00c40374 	movhi	r3,4109
1000e0a4:	18de9e04 	addi	r3,r3,31352
1000e0a8:	00840374 	movhi	r2,4109
1000e0ac:	109e9e04 	addi	r2,r2,31352
1000e0b0:	11000117 	ldw	r4,4(r2)
1000e0b4:	e0bffd17 	ldw	r2,-12(fp)
1000e0b8:	1000010e 	bge	r2,zero,1000e0c0 <_free_r+0x31c>
1000e0bc:	108000c4 	addi	r2,r2,3
1000e0c0:	1005d0ba 	srai	r2,r2,2
1000e0c4:	100b883a 	mov	r5,r2
1000e0c8:	00800044 	movi	r2,1
1000e0cc:	1144983a 	sll	r2,r2,r5
1000e0d0:	2084b03a 	or	r2,r4,r2
1000e0d4:	18800115 	stw	r2,4(r3)
1000e0d8:	e0bffd17 	ldw	r2,-12(fp)
1000e0dc:	10800044 	addi	r2,r2,1
1000e0e0:	1085883a 	add	r2,r2,r2
1000e0e4:	1085883a 	add	r2,r2,r2
1000e0e8:	1087883a 	add	r3,r2,r2
1000e0ec:	00840374 	movhi	r2,4109
1000e0f0:	109e9e04 	addi	r2,r2,31352
1000e0f4:	1885883a 	add	r2,r3,r2
1000e0f8:	10bffe04 	addi	r2,r2,-8
1000e0fc:	e0bff615 	stw	r2,-40(fp)
1000e100:	e0bff617 	ldw	r2,-40(fp)
1000e104:	10800217 	ldw	r2,8(r2)
1000e108:	e0bff715 	stw	r2,-36(fp)
1000e10c:	e0bff417 	ldw	r2,-48(fp)
1000e110:	e0fff617 	ldw	r3,-40(fp)
1000e114:	10c00315 	stw	r3,12(r2)
1000e118:	e0bff417 	ldw	r2,-48(fp)
1000e11c:	e0fff717 	ldw	r3,-36(fp)
1000e120:	10c00215 	stw	r3,8(r2)
1000e124:	e0bff617 	ldw	r2,-40(fp)
1000e128:	e0fff417 	ldw	r3,-48(fp)
1000e12c:	10c00215 	stw	r3,8(r2)
1000e130:	e0bff617 	ldw	r2,-40(fp)
1000e134:	10c00217 	ldw	r3,8(r2)
1000e138:	e0bff717 	ldw	r2,-36(fp)
1000e13c:	10c00315 	stw	r3,12(r2)
1000e140:	00006b06 	br	1000e2f0 <_free_r+0x54c>
1000e144:	e0bff517 	ldw	r2,-44(fp)
1000e148:	1004d27a 	srli	r2,r2,9
1000e14c:	1000031e 	bne	r2,zero,1000e15c <_free_r+0x3b8>
1000e150:	e0bff517 	ldw	r2,-44(fp)
1000e154:	1004d0fa 	srli	r2,r2,3
1000e158:	00002906 	br	1000e200 <_free_r+0x45c>
1000e15c:	e0bff517 	ldw	r2,-44(fp)
1000e160:	1004d27a 	srli	r2,r2,9
1000e164:	10800168 	cmpgeui	r2,r2,5
1000e168:	1000041e 	bne	r2,zero,1000e17c <_free_r+0x3d8>
1000e16c:	e0bff517 	ldw	r2,-44(fp)
1000e170:	1004d1ba 	srli	r2,r2,6
1000e174:	10800e04 	addi	r2,r2,56
1000e178:	00002106 	br	1000e200 <_free_r+0x45c>
1000e17c:	e0bff517 	ldw	r2,-44(fp)
1000e180:	1004d27a 	srli	r2,r2,9
1000e184:	10800568 	cmpgeui	r2,r2,21
1000e188:	1000041e 	bne	r2,zero,1000e19c <_free_r+0x3f8>
1000e18c:	e0bff517 	ldw	r2,-44(fp)
1000e190:	1004d27a 	srli	r2,r2,9
1000e194:	108016c4 	addi	r2,r2,91
1000e198:	00001906 	br	1000e200 <_free_r+0x45c>
1000e19c:	e0bff517 	ldw	r2,-44(fp)
1000e1a0:	1004d27a 	srli	r2,r2,9
1000e1a4:	10801568 	cmpgeui	r2,r2,85
1000e1a8:	1000041e 	bne	r2,zero,1000e1bc <_free_r+0x418>
1000e1ac:	e0bff517 	ldw	r2,-44(fp)
1000e1b0:	1004d33a 	srli	r2,r2,12
1000e1b4:	10801b84 	addi	r2,r2,110
1000e1b8:	00001106 	br	1000e200 <_free_r+0x45c>
1000e1bc:	e0bff517 	ldw	r2,-44(fp)
1000e1c0:	1004d27a 	srli	r2,r2,9
1000e1c4:	10805568 	cmpgeui	r2,r2,341
1000e1c8:	1000041e 	bne	r2,zero,1000e1dc <_free_r+0x438>
1000e1cc:	e0bff517 	ldw	r2,-44(fp)
1000e1d0:	1004d3fa 	srli	r2,r2,15
1000e1d4:	10801dc4 	addi	r2,r2,119
1000e1d8:	00000906 	br	1000e200 <_free_r+0x45c>
1000e1dc:	e0bff517 	ldw	r2,-44(fp)
1000e1e0:	1004d27a 	srli	r2,r2,9
1000e1e4:	10815568 	cmpgeui	r2,r2,1365
1000e1e8:	1000041e 	bne	r2,zero,1000e1fc <_free_r+0x458>
1000e1ec:	e0bff517 	ldw	r2,-44(fp)
1000e1f0:	1004d4ba 	srli	r2,r2,18
1000e1f4:	10801f04 	addi	r2,r2,124
1000e1f8:	00000106 	br	1000e200 <_free_r+0x45c>
1000e1fc:	00801f84 	movi	r2,126
1000e200:	e0bffd15 	stw	r2,-12(fp)
1000e204:	e0bffd17 	ldw	r2,-12(fp)
1000e208:	10800044 	addi	r2,r2,1
1000e20c:	1085883a 	add	r2,r2,r2
1000e210:	1085883a 	add	r2,r2,r2
1000e214:	1087883a 	add	r3,r2,r2
1000e218:	00840374 	movhi	r2,4109
1000e21c:	109e9e04 	addi	r2,r2,31352
1000e220:	1885883a 	add	r2,r3,r2
1000e224:	10bffe04 	addi	r2,r2,-8
1000e228:	e0bff615 	stw	r2,-40(fp)
1000e22c:	e0bff617 	ldw	r2,-40(fp)
1000e230:	10800217 	ldw	r2,8(r2)
1000e234:	e0bff715 	stw	r2,-36(fp)
1000e238:	e0fff717 	ldw	r3,-36(fp)
1000e23c:	e0bff617 	ldw	r2,-40(fp)
1000e240:	1880121e 	bne	r3,r2,1000e28c <_free_r+0x4e8>
1000e244:	00c40374 	movhi	r3,4109
1000e248:	18de9e04 	addi	r3,r3,31352
1000e24c:	00840374 	movhi	r2,4109
1000e250:	109e9e04 	addi	r2,r2,31352
1000e254:	11000117 	ldw	r4,4(r2)
1000e258:	e0bffd17 	ldw	r2,-12(fp)
1000e25c:	1000010e 	bge	r2,zero,1000e264 <_free_r+0x4c0>
1000e260:	108000c4 	addi	r2,r2,3
1000e264:	1005d0ba 	srai	r2,r2,2
1000e268:	100b883a 	mov	r5,r2
1000e26c:	00800044 	movi	r2,1
1000e270:	1144983a 	sll	r2,r2,r5
1000e274:	2084b03a 	or	r2,r4,r2
1000e278:	18800115 	stw	r2,4(r3)
1000e27c:	00000f06 	br	1000e2bc <_free_r+0x518>
1000e280:	e0bff717 	ldw	r2,-36(fp)
1000e284:	10800217 	ldw	r2,8(r2)
1000e288:	e0bff715 	stw	r2,-36(fp)
1000e28c:	e0fff717 	ldw	r3,-36(fp)
1000e290:	e0bff617 	ldw	r2,-40(fp)
1000e294:	18800626 	beq	r3,r2,1000e2b0 <_free_r+0x50c>
1000e298:	e0bff717 	ldw	r2,-36(fp)
1000e29c:	10c00117 	ldw	r3,4(r2)
1000e2a0:	00bfff04 	movi	r2,-4
1000e2a4:	1884703a 	and	r2,r3,r2
1000e2a8:	e0fff517 	ldw	r3,-44(fp)
1000e2ac:	18bff436 	bltu	r3,r2,1000e280 <__alt_data_end+0xf800e280>
1000e2b0:	e0bff717 	ldw	r2,-36(fp)
1000e2b4:	10800317 	ldw	r2,12(r2)
1000e2b8:	e0bff615 	stw	r2,-40(fp)
1000e2bc:	e0bff417 	ldw	r2,-48(fp)
1000e2c0:	e0fff617 	ldw	r3,-40(fp)
1000e2c4:	10c00315 	stw	r3,12(r2)
1000e2c8:	e0bff417 	ldw	r2,-48(fp)
1000e2cc:	e0fff717 	ldw	r3,-36(fp)
1000e2d0:	10c00215 	stw	r3,8(r2)
1000e2d4:	e0bff617 	ldw	r2,-40(fp)
1000e2d8:	e0fff417 	ldw	r3,-48(fp)
1000e2dc:	10c00215 	stw	r3,8(r2)
1000e2e0:	e0bff617 	ldw	r2,-40(fp)
1000e2e4:	10c00217 	ldw	r3,8(r2)
1000e2e8:	e0bff717 	ldw	r2,-36(fp)
1000e2ec:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
1000e2f0:	e13ffe17 	ldw	r4,-8(fp)
1000e2f4:	0015d940 	call	10015d94 <__malloc_unlock>
1000e2f8:	00000106 	br	1000e300 <_free_r+0x55c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
1000e2fc:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
1000e300:	e037883a 	mov	sp,fp
1000e304:	dfc00117 	ldw	ra,4(sp)
1000e308:	df000017 	ldw	fp,0(sp)
1000e30c:	dec00204 	addi	sp,sp,8
1000e310:	f800283a 	ret

1000e314 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
1000e314:	defff704 	addi	sp,sp,-36
1000e318:	dfc00815 	stw	ra,32(sp)
1000e31c:	df000715 	stw	fp,28(sp)
1000e320:	df000704 	addi	fp,sp,28
1000e324:	e13ffe15 	stw	r4,-8(fp)
1000e328:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
1000e32c:	00840004 	movi	r2,4096
1000e330:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
1000e334:	e13ffe17 	ldw	r4,-8(fp)
1000e338:	0015d700 	call	10015d70 <__malloc_lock>

  top_size = chunksize(top);
1000e33c:	00840374 	movhi	r2,4109
1000e340:	109e9e04 	addi	r2,r2,31352
1000e344:	10800217 	ldw	r2,8(r2)
1000e348:	10800117 	ldw	r2,4(r2)
1000e34c:	1007883a 	mov	r3,r2
1000e350:	00bfff04 	movi	r2,-4
1000e354:	1884703a 	and	r2,r3,r2
1000e358:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
1000e35c:	e0fffa17 	ldw	r3,-24(fp)
1000e360:	e0bfff17 	ldw	r2,-4(fp)
1000e364:	1887c83a 	sub	r3,r3,r2
1000e368:	e0bff917 	ldw	r2,-28(fp)
1000e36c:	1885883a 	add	r2,r3,r2
1000e370:	10bffbc4 	addi	r2,r2,-17
1000e374:	e17ff917 	ldw	r5,-28(fp)
1000e378:	1009883a 	mov	r4,r2
1000e37c:	00024900 	call	10002490 <__udivsi3>
1000e380:	10bfffc4 	addi	r2,r2,-1
1000e384:	e17ff917 	ldw	r5,-28(fp)
1000e388:	1009883a 	mov	r4,r2
1000e38c:	0005a080 	call	10005a08 <__mulsi3>
1000e390:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
1000e394:	e0bff917 	ldw	r2,-28(fp)
1000e398:	e0fffb17 	ldw	r3,-20(fp)
1000e39c:	1880040e 	bge	r3,r2,1000e3b0 <_malloc_trim_r+0x9c>
  {
    MALLOC_UNLOCK;
1000e3a0:	e13ffe17 	ldw	r4,-8(fp)
1000e3a4:	0015d940 	call	10015d94 <__malloc_unlock>
    return 0;
1000e3a8:	0005883a 	mov	r2,zero
1000e3ac:	00004a06 	br	1000e4d8 <_malloc_trim_r+0x1c4>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
1000e3b0:	000b883a 	mov	r5,zero
1000e3b4:	e13ffe17 	ldw	r4,-8(fp)
1000e3b8:	00087440 	call	10008744 <_sbrk_r>
1000e3bc:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
1000e3c0:	00840374 	movhi	r2,4109
1000e3c4:	109e9e04 	addi	r2,r2,31352
1000e3c8:	10c00217 	ldw	r3,8(r2)
1000e3cc:	e0bffa17 	ldw	r2,-24(fp)
1000e3d0:	1887883a 	add	r3,r3,r2
1000e3d4:	e0bffc17 	ldw	r2,-16(fp)
1000e3d8:	18800426 	beq	r3,r2,1000e3ec <_malloc_trim_r+0xd8>
    {
      MALLOC_UNLOCK;
1000e3dc:	e13ffe17 	ldw	r4,-8(fp)
1000e3e0:	0015d940 	call	10015d94 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
1000e3e4:	0005883a 	mov	r2,zero
1000e3e8:	00003b06 	br	1000e4d8 <_malloc_trim_r+0x1c4>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
1000e3ec:	e0bffb17 	ldw	r2,-20(fp)
1000e3f0:	0085c83a 	sub	r2,zero,r2
1000e3f4:	100b883a 	mov	r5,r2
1000e3f8:	e13ffe17 	ldw	r4,-8(fp)
1000e3fc:	00087440 	call	10008744 <_sbrk_r>
1000e400:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
1000e404:	e0bffd17 	ldw	r2,-12(fp)
1000e408:	10bfffd8 	cmpnei	r2,r2,-1
1000e40c:	10001f1e 	bne	r2,zero,1000e48c <_malloc_trim_r+0x178>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
1000e410:	000b883a 	mov	r5,zero
1000e414:	e13ffe17 	ldw	r4,-8(fp)
1000e418:	00087440 	call	10008744 <_sbrk_r>
1000e41c:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
1000e420:	e0fffc17 	ldw	r3,-16(fp)
1000e424:	00840374 	movhi	r2,4109
1000e428:	109e9e04 	addi	r2,r2,31352
1000e42c:	10800217 	ldw	r2,8(r2)
1000e430:	1885c83a 	sub	r2,r3,r2
1000e434:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
1000e438:	e0bffa17 	ldw	r2,-24(fp)
1000e43c:	10800410 	cmplti	r2,r2,16
1000e440:	10000e1e 	bne	r2,zero,1000e47c <_malloc_trim_r+0x168>
        {
          sbrked_mem = current_brk - sbrk_base;
1000e444:	e0fffc17 	ldw	r3,-16(fp)
1000e448:	008403b4 	movhi	r2,4110
1000e44c:	10a45304 	addi	r2,r2,-28340
1000e450:	10800017 	ldw	r2,0(r2)
1000e454:	1887c83a 	sub	r3,r3,r2
1000e458:	008403b4 	movhi	r2,4110
1000e45c:	108aba04 	addi	r2,r2,10984
1000e460:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
1000e464:	00840374 	movhi	r2,4109
1000e468:	109e9e04 	addi	r2,r2,31352
1000e46c:	10800217 	ldw	r2,8(r2)
1000e470:	e0fffa17 	ldw	r3,-24(fp)
1000e474:	18c00054 	ori	r3,r3,1
1000e478:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
1000e47c:	e13ffe17 	ldw	r4,-8(fp)
1000e480:	0015d940 	call	10015d94 <__malloc_unlock>
        return 0; 
1000e484:	0005883a 	mov	r2,zero
1000e488:	00001306 	br	1000e4d8 <_malloc_trim_r+0x1c4>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
1000e48c:	00840374 	movhi	r2,4109
1000e490:	109e9e04 	addi	r2,r2,31352
1000e494:	10800217 	ldw	r2,8(r2)
1000e498:	e13ffa17 	ldw	r4,-24(fp)
1000e49c:	e0fffb17 	ldw	r3,-20(fp)
1000e4a0:	20c7c83a 	sub	r3,r4,r3
1000e4a4:	18c00054 	ori	r3,r3,1
1000e4a8:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
1000e4ac:	008403b4 	movhi	r2,4110
1000e4b0:	108aba04 	addi	r2,r2,10984
1000e4b4:	10c00017 	ldw	r3,0(r2)
1000e4b8:	e0bffb17 	ldw	r2,-20(fp)
1000e4bc:	1887c83a 	sub	r3,r3,r2
1000e4c0:	008403b4 	movhi	r2,4110
1000e4c4:	108aba04 	addi	r2,r2,10984
1000e4c8:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
1000e4cc:	e13ffe17 	ldw	r4,-8(fp)
1000e4d0:	0015d940 	call	10015d94 <__malloc_unlock>
        return 1;
1000e4d4:	00800044 	movi	r2,1
      }
    }
  }
}
1000e4d8:	e037883a 	mov	sp,fp
1000e4dc:	dfc00117 	ldw	ra,4(sp)
1000e4e0:	df000017 	ldw	fp,0(sp)
1000e4e4:	dec00204 	addi	sp,sp,8
1000e4e8:	f800283a 	ret

1000e4ec <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
1000e4ec:	defff004 	addi	sp,sp,-64
1000e4f0:	dfc00f15 	stw	ra,60(sp)
1000e4f4:	df000e15 	stw	fp,56(sp)
1000e4f8:	dd800d15 	stw	r22,52(sp)
1000e4fc:	dd400c15 	stw	r21,48(sp)
1000e500:	dd000b15 	stw	r20,44(sp)
1000e504:	dcc00a15 	stw	r19,40(sp)
1000e508:	dc800915 	stw	r18,36(sp)
1000e50c:	dc400815 	stw	r17,32(sp)
1000e510:	dc000715 	stw	r16,28(sp)
1000e514:	df000e04 	addi	fp,sp,56
1000e518:	e13ff815 	stw	r4,-32(fp)
1000e51c:	2821883a 	mov	r16,r5
1000e520:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
1000e524:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
1000e528:	ac400217 	ldw	r17,8(r21)
1000e52c:	8800021e 	bne	r17,zero,1000e538 <__sfvwrite_r+0x4c>
    return 0;
1000e530:	0005883a 	mov	r2,zero
1000e534:	00015b06 	br	1000eaa4 <__sfvwrite_r+0x5b8>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
1000e538:	8080030b 	ldhu	r2,12(r16)
1000e53c:	10bfffcc 	andi	r2,r2,65535
1000e540:	1080020c 	andi	r2,r2,8
1000e544:	10000226 	beq	r2,zero,1000e550 <__sfvwrite_r+0x64>
1000e548:	80800417 	ldw	r2,16(r16)
1000e54c:	1000061e 	bne	r2,zero,1000e568 <__sfvwrite_r+0x7c>
1000e550:	800b883a 	mov	r5,r16
1000e554:	e13ff817 	ldw	r4,-32(fp)
1000e558:	000b29c0 	call	1000b29c <__swsetup_r>
1000e55c:	10000226 	beq	r2,zero,1000e568 <__sfvwrite_r+0x7c>
    return EOF;
1000e560:	00bfffc4 	movi	r2,-1
1000e564:	00014f06 	br	1000eaa4 <__sfvwrite_r+0x5b8>

  iov = uio->uio_iov;
1000e568:	ad000017 	ldw	r20,0(r21)
  len = 0;
1000e56c:	0023883a 	mov	r17,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
1000e570:	8080030b 	ldhu	r2,12(r16)
1000e574:	10bfffcc 	andi	r2,r2,65535
1000e578:	1080008c 	andi	r2,r2,2
1000e57c:	10001f26 	beq	r2,zero,1000e5fc <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
1000e580:	00000306 	br	1000e590 <__sfvwrite_r+0xa4>
1000e584:	a4c00017 	ldw	r19,0(r20)
1000e588:	a4400117 	ldw	r17,4(r20)
1000e58c:	a5000204 	addi	r20,r20,8
1000e590:	883ffc26 	beq	r17,zero,1000e584 <__alt_data_end+0xf800e584>
	  w = fp->_write (ptr, fp->_cookie, p,
1000e594:	82000917 	ldw	r8,36(r16)
1000e598:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
1000e59c:	8805883a 	mov	r2,r17
1000e5a0:	00e00034 	movhi	r3,32768
1000e5a4:	18ff0004 	addi	r3,r3,-1024
1000e5a8:	1880022e 	bgeu	r3,r2,1000e5b4 <__sfvwrite_r+0xc8>
1000e5ac:	00a00034 	movhi	r2,32768
1000e5b0:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
1000e5b4:	100f883a 	mov	r7,r2
1000e5b8:	980d883a 	mov	r6,r19
1000e5bc:	200b883a 	mov	r5,r4
1000e5c0:	e13ff817 	ldw	r4,-32(fp)
1000e5c4:	403ee83a 	callr	r8
1000e5c8:	1025883a 	mov	r18,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
1000e5cc:	04812c0e 	bge	zero,r18,1000ea80 <__sfvwrite_r+0x594>
	    goto err;
	  p += w;
1000e5d0:	9005883a 	mov	r2,r18
1000e5d4:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000e5d8:	9005883a 	mov	r2,r18
1000e5dc:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000e5e0:	a8800217 	ldw	r2,8(r21)
1000e5e4:	9007883a 	mov	r3,r18
1000e5e8:	10c5c83a 	sub	r2,r2,r3
1000e5ec:	a8800215 	stw	r2,8(r21)
1000e5f0:	a8800217 	ldw	r2,8(r21)
1000e5f4:	103fe61e 	bne	r2,zero,1000e590 <__alt_data_end+0xf800e590>
1000e5f8:	00011f06 	br	1000ea78 <__sfvwrite_r+0x58c>
    }
  else if ((fp->_flags & __SLBF) == 0)
1000e5fc:	8080030b 	ldhu	r2,12(r16)
1000e600:	10bfffcc 	andi	r2,r2,65535
1000e604:	1080004c 	andi	r2,r2,1
1000e608:	1000b81e 	bne	r2,zero,1000e8ec <__sfvwrite_r+0x400>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
1000e60c:	00000306 	br	1000e61c <__sfvwrite_r+0x130>
1000e610:	a4c00017 	ldw	r19,0(r20)
1000e614:	a4400117 	ldw	r17,4(r20)
1000e618:	a5000204 	addi	r20,r20,8
1000e61c:	883ffc26 	beq	r17,zero,1000e610 <__alt_data_end+0xf800e610>
	  w = fp->_w;
1000e620:	84800217 	ldw	r18,8(r16)
	  if (fp->_flags & __SSTR)
1000e624:	8080030b 	ldhu	r2,12(r16)
1000e628:	10bfffcc 	andi	r2,r2,65535
1000e62c:	1080800c 	andi	r2,r2,512
1000e630:	10006b26 	beq	r2,zero,1000e7e0 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
1000e634:	9005883a 	mov	r2,r18
1000e638:	88805736 	bltu	r17,r2,1000e798 <__sfvwrite_r+0x2ac>
1000e63c:	8080030b 	ldhu	r2,12(r16)
1000e640:	10bfffcc 	andi	r2,r2,65535
1000e644:	1081200c 	andi	r2,r2,1152
1000e648:	10005326 	beq	r2,zero,1000e798 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
1000e64c:	80800017 	ldw	r2,0(r16)
1000e650:	1007883a 	mov	r3,r2
1000e654:	80800417 	ldw	r2,16(r16)
1000e658:	1885c83a 	sub	r2,r3,r2
1000e65c:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
1000e660:	80c00517 	ldw	r3,20(r16)
1000e664:	1805883a 	mov	r2,r3
1000e668:	1085883a 	add	r2,r2,r2
1000e66c:	10c5883a 	add	r2,r2,r3
1000e670:	1006d7fa 	srli	r3,r2,31
1000e674:	1885883a 	add	r2,r3,r2
1000e678:	1005d07a 	srai	r2,r2,1
1000e67c:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
1000e680:	e0bff617 	ldw	r2,-40(fp)
1000e684:	1445883a 	add	r2,r2,r17
1000e688:	10800044 	addi	r2,r2,1
1000e68c:	e0fff517 	ldw	r3,-44(fp)
1000e690:	1880042e 	bgeu	r3,r2,1000e6a4 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
1000e694:	e0bff617 	ldw	r2,-40(fp)
1000e698:	1445883a 	add	r2,r2,r17
1000e69c:	10800044 	addi	r2,r2,1
1000e6a0:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
1000e6a4:	8080030b 	ldhu	r2,12(r16)
1000e6a8:	10bfffcc 	andi	r2,r2,65535
1000e6ac:	1081000c 	andi	r2,r2,1024
1000e6b0:	10001726 	beq	r2,zero,1000e710 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
1000e6b4:	e0bff517 	ldw	r2,-44(fp)
1000e6b8:	100b883a 	mov	r5,r2
1000e6bc:	e13ff817 	ldw	r4,-32(fp)
1000e6c0:	00064080 	call	10006408 <_malloc_r>
1000e6c4:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
1000e6c8:	e0bff417 	ldw	r2,-48(fp)
1000e6cc:	1000041e 	bne	r2,zero,1000e6e0 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
1000e6d0:	e0bff817 	ldw	r2,-32(fp)
1000e6d4:	00c00304 	movi	r3,12
1000e6d8:	10c00015 	stw	r3,0(r2)
			  goto err;
1000e6dc:	0000ed06 	br	1000ea94 <__sfvwrite_r+0x5a8>
			}
		      memcpy (str, fp->_bf._base, curpos);
1000e6e0:	80800417 	ldw	r2,16(r16)
1000e6e4:	e0fff617 	ldw	r3,-40(fp)
1000e6e8:	180d883a 	mov	r6,r3
1000e6ec:	100b883a 	mov	r5,r2
1000e6f0:	e13ff417 	ldw	r4,-48(fp)
1000e6f4:	000f2a40 	call	1000f2a4 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
1000e6f8:	80c0030b 	ldhu	r3,12(r16)
1000e6fc:	00bedfc4 	movi	r2,-1153
1000e700:	1884703a 	and	r2,r3,r2
1000e704:	10802014 	ori	r2,r2,128
1000e708:	8080030d 	sth	r2,12(r16)
1000e70c:	00001506 	br	1000e764 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
1000e710:	80800417 	ldw	r2,16(r16)
1000e714:	e0fff517 	ldw	r3,-44(fp)
1000e718:	180d883a 	mov	r6,r3
1000e71c:	100b883a 	mov	r5,r2
1000e720:	e13ff817 	ldw	r4,-32(fp)
1000e724:	00076100 	call	10007610 <_realloc_r>
1000e728:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
1000e72c:	e0bff417 	ldw	r2,-48(fp)
1000e730:	10000c1e 	bne	r2,zero,1000e764 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
1000e734:	80800417 	ldw	r2,16(r16)
1000e738:	100b883a 	mov	r5,r2
1000e73c:	e13ff817 	ldw	r4,-32(fp)
1000e740:	000dda40 	call	1000dda4 <_free_r>
			  fp->_flags &=  ~__SMBF;
1000e744:	80c0030b 	ldhu	r3,12(r16)
1000e748:	00bfdfc4 	movi	r2,-129
1000e74c:	1884703a 	and	r2,r3,r2
1000e750:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
1000e754:	e0bff817 	ldw	r2,-32(fp)
1000e758:	00c00304 	movi	r3,12
1000e75c:	10c00015 	stw	r3,0(r2)
			  goto err;
1000e760:	0000cc06 	br	1000ea94 <__sfvwrite_r+0x5a8>
			}
		    }
		  fp->_bf._base = str;
1000e764:	e0bff417 	ldw	r2,-48(fp)
1000e768:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
1000e76c:	e0bff617 	ldw	r2,-40(fp)
1000e770:	e0fff417 	ldw	r3,-48(fp)
1000e774:	1885883a 	add	r2,r3,r2
1000e778:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
1000e77c:	e0bff517 	ldw	r2,-44(fp)
1000e780:	80800515 	stw	r2,20(r16)
		  w = len;
1000e784:	8825883a 	mov	r18,r17
		  fp->_w = newsize - curpos;
1000e788:	e0fff517 	ldw	r3,-44(fp)
1000e78c:	e0bff617 	ldw	r2,-40(fp)
1000e790:	1885c83a 	sub	r2,r3,r2
1000e794:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
1000e798:	9005883a 	mov	r2,r18
1000e79c:	8880012e 	bgeu	r17,r2,1000e7a4 <__sfvwrite_r+0x2b8>
		w = len;
1000e7a0:	8825883a 	mov	r18,r17
	      COPY (w);		/* copy MIN(fp->_w,len), */
1000e7a4:	80800017 	ldw	r2,0(r16)
1000e7a8:	9007883a 	mov	r3,r18
1000e7ac:	180d883a 	mov	r6,r3
1000e7b0:	980b883a 	mov	r5,r19
1000e7b4:	1009883a 	mov	r4,r2
1000e7b8:	000f42c0 	call	1000f42c <memmove>
	      fp->_w -= w;
1000e7bc:	80800217 	ldw	r2,8(r16)
1000e7c0:	1485c83a 	sub	r2,r2,r18
1000e7c4:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000e7c8:	80800017 	ldw	r2,0(r16)
1000e7cc:	9007883a 	mov	r3,r18
1000e7d0:	10c5883a 	add	r2,r2,r3
1000e7d4:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
1000e7d8:	8825883a 	mov	r18,r17
1000e7dc:	00003806 	br	1000e8c0 <__sfvwrite_r+0x3d4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
1000e7e0:	80800017 	ldw	r2,0(r16)
1000e7e4:	80c00417 	ldw	r3,16(r16)
1000e7e8:	18800236 	bltu	r3,r2,1000e7f4 <__sfvwrite_r+0x308>
1000e7ec:	80800517 	ldw	r2,20(r16)
1000e7f0:	8880182e 	bgeu	r17,r2,1000e854 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
1000e7f4:	9005883a 	mov	r2,r18
1000e7f8:	8880012e 	bgeu	r17,r2,1000e800 <__sfvwrite_r+0x314>
1000e7fc:	8805883a 	mov	r2,r17
1000e800:	1025883a 	mov	r18,r2
	      COPY (w);
1000e804:	80800017 	ldw	r2,0(r16)
1000e808:	9007883a 	mov	r3,r18
1000e80c:	180d883a 	mov	r6,r3
1000e810:	980b883a 	mov	r5,r19
1000e814:	1009883a 	mov	r4,r2
1000e818:	000f42c0 	call	1000f42c <memmove>
	      fp->_w -= w;
1000e81c:	80800217 	ldw	r2,8(r16)
1000e820:	1485c83a 	sub	r2,r2,r18
1000e824:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000e828:	80800017 	ldw	r2,0(r16)
1000e82c:	9007883a 	mov	r3,r18
1000e830:	10c5883a 	add	r2,r2,r3
1000e834:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
1000e838:	80800217 	ldw	r2,8(r16)
1000e83c:	10001f1e 	bne	r2,zero,1000e8bc <__sfvwrite_r+0x3d0>
1000e840:	800b883a 	mov	r5,r16
1000e844:	e13ff817 	ldw	r4,-32(fp)
1000e848:	000d6ac0 	call	1000d6ac <_fflush_r>
1000e84c:	10001b26 	beq	r2,zero,1000e8bc <__sfvwrite_r+0x3d0>
		goto err;
1000e850:	00009006 	br	1000ea94 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
1000e854:	8805883a 	mov	r2,r17
1000e858:	00e00034 	movhi	r3,32768
1000e85c:	10c00236 	bltu	r2,r3,1000e868 <__sfvwrite_r+0x37c>
1000e860:	00a00034 	movhi	r2,32768
1000e864:	10bfffc4 	addi	r2,r2,-1
1000e868:	1007883a 	mov	r3,r2
1000e86c:	80800517 	ldw	r2,20(r16)
1000e870:	100b883a 	mov	r5,r2
1000e874:	1809883a 	mov	r4,r3
1000e878:	00023980 	call	10002398 <__divsi3>
1000e87c:	1007883a 	mov	r3,r2
1000e880:	80800517 	ldw	r2,20(r16)
1000e884:	100b883a 	mov	r5,r2
1000e888:	1809883a 	mov	r4,r3
1000e88c:	0005a080 	call	10005a08 <__mulsi3>
1000e890:	1025883a 	mov	r18,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
1000e894:	80800917 	ldw	r2,36(r16)
1000e898:	80c00717 	ldw	r3,28(r16)
1000e89c:	900f883a 	mov	r7,r18
1000e8a0:	980d883a 	mov	r6,r19
1000e8a4:	180b883a 	mov	r5,r3
1000e8a8:	e13ff817 	ldw	r4,-32(fp)
1000e8ac:	103ee83a 	callr	r2
1000e8b0:	1025883a 	mov	r18,r2
	      if (w <= 0)
1000e8b4:	0480740e 	bge	zero,r18,1000ea88 <__sfvwrite_r+0x59c>
1000e8b8:	00000106 	br	1000e8c0 <__sfvwrite_r+0x3d4>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
1000e8bc:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
1000e8c0:	9005883a 	mov	r2,r18
1000e8c4:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000e8c8:	9005883a 	mov	r2,r18
1000e8cc:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000e8d0:	a8800217 	ldw	r2,8(r21)
1000e8d4:	9007883a 	mov	r3,r18
1000e8d8:	10c5c83a 	sub	r2,r2,r3
1000e8dc:	a8800215 	stw	r2,8(r21)
1000e8e0:	a8800217 	ldw	r2,8(r21)
1000e8e4:	103f4d1e 	bne	r2,zero,1000e61c <__alt_data_end+0xf800e61c>
1000e8e8:	00006306 	br	1000ea78 <__sfvwrite_r+0x58c>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
1000e8ec:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
1000e8f0:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
1000e8f4:	00000406 	br	1000e908 <__sfvwrite_r+0x41c>
1000e8f8:	e03ff215 	stw	zero,-56(fp)
1000e8fc:	a4c00017 	ldw	r19,0(r20)
1000e900:	a4400117 	ldw	r17,4(r20)
1000e904:	a5000204 	addi	r20,r20,8
1000e908:	883ffb26 	beq	r17,zero,1000e8f8 <__alt_data_end+0xf800e8f8>
	  if (!nlknown)
1000e90c:	e0bff217 	ldw	r2,-56(fp)
1000e910:	1000111e 	bne	r2,zero,1000e958 <__sfvwrite_r+0x46c>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
1000e914:	880d883a 	mov	r6,r17
1000e918:	01400284 	movi	r5,10
1000e91c:	9809883a 	mov	r4,r19
1000e920:	000f0e80 	call	1000f0e8 <memchr>
1000e924:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
1000e928:	e0bff717 	ldw	r2,-36(fp)
1000e92c:	10000626 	beq	r2,zero,1000e948 <__sfvwrite_r+0x45c>
1000e930:	e0bff717 	ldw	r2,-36(fp)
1000e934:	10800044 	addi	r2,r2,1
1000e938:	1007883a 	mov	r3,r2
1000e93c:	9805883a 	mov	r2,r19
1000e940:	1885c83a 	sub	r2,r3,r2
1000e944:	00000106 	br	1000e94c <__sfvwrite_r+0x460>
1000e948:	88800044 	addi	r2,r17,1
1000e94c:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
1000e950:	00800044 	movi	r2,1
1000e954:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
1000e958:	e0bff317 	ldw	r2,-52(fp)
1000e95c:	8880012e 	bgeu	r17,r2,1000e964 <__sfvwrite_r+0x478>
1000e960:	8805883a 	mov	r2,r17
1000e964:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
1000e968:	80c00217 	ldw	r3,8(r16)
1000e96c:	80800517 	ldw	r2,20(r16)
1000e970:	18a5883a 	add	r18,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
1000e974:	80800017 	ldw	r2,0(r16)
1000e978:	80c00417 	ldw	r3,16(r16)
1000e97c:	1880102e 	bgeu	r3,r2,1000e9c0 <__sfvwrite_r+0x4d4>
1000e980:	95800f0e 	bge	r18,r22,1000e9c0 <__sfvwrite_r+0x4d4>
	    {
	      COPY (w);
1000e984:	80800017 	ldw	r2,0(r16)
1000e988:	9007883a 	mov	r3,r18
1000e98c:	180d883a 	mov	r6,r3
1000e990:	980b883a 	mov	r5,r19
1000e994:	1009883a 	mov	r4,r2
1000e998:	000f42c0 	call	1000f42c <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
1000e99c:	80800017 	ldw	r2,0(r16)
1000e9a0:	9007883a 	mov	r3,r18
1000e9a4:	10c5883a 	add	r2,r2,r3
1000e9a8:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
1000e9ac:	800b883a 	mov	r5,r16
1000e9b0:	e13ff817 	ldw	r4,-32(fp)
1000e9b4:	000d6ac0 	call	1000d6ac <_fflush_r>
1000e9b8:	10001b26 	beq	r2,zero,1000ea28 <__sfvwrite_r+0x53c>
		goto err;
1000e9bc:	00003506 	br	1000ea94 <__sfvwrite_r+0x5a8>
	    }
	  else if (s >= (w = fp->_bf._size))
1000e9c0:	84800517 	ldw	r18,20(r16)
1000e9c4:	b4800a16 	blt	r22,r18,1000e9f0 <__sfvwrite_r+0x504>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
1000e9c8:	80800917 	ldw	r2,36(r16)
1000e9cc:	80c00717 	ldw	r3,28(r16)
1000e9d0:	900f883a 	mov	r7,r18
1000e9d4:	980d883a 	mov	r6,r19
1000e9d8:	180b883a 	mov	r5,r3
1000e9dc:	e13ff817 	ldw	r4,-32(fp)
1000e9e0:	103ee83a 	callr	r2
1000e9e4:	1025883a 	mov	r18,r2
	      if (w <= 0)
1000e9e8:	04800f16 	blt	zero,r18,1000ea28 <__sfvwrite_r+0x53c>
		goto err;
1000e9ec:	00002906 	br	1000ea94 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      w = s;
1000e9f0:	b025883a 	mov	r18,r22
	      COPY (w);
1000e9f4:	80800017 	ldw	r2,0(r16)
1000e9f8:	9007883a 	mov	r3,r18
1000e9fc:	180d883a 	mov	r6,r3
1000ea00:	980b883a 	mov	r5,r19
1000ea04:	1009883a 	mov	r4,r2
1000ea08:	000f42c0 	call	1000f42c <memmove>
	      fp->_w -= w;
1000ea0c:	80800217 	ldw	r2,8(r16)
1000ea10:	1485c83a 	sub	r2,r2,r18
1000ea14:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000ea18:	80800017 	ldw	r2,0(r16)
1000ea1c:	9007883a 	mov	r3,r18
1000ea20:	10c5883a 	add	r2,r2,r3
1000ea24:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
1000ea28:	e0bff317 	ldw	r2,-52(fp)
1000ea2c:	1485c83a 	sub	r2,r2,r18
1000ea30:	e0bff315 	stw	r2,-52(fp)
1000ea34:	e0bff317 	ldw	r2,-52(fp)
1000ea38:	1000051e 	bne	r2,zero,1000ea50 <__sfvwrite_r+0x564>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
1000ea3c:	800b883a 	mov	r5,r16
1000ea40:	e13ff817 	ldw	r4,-32(fp)
1000ea44:	000d6ac0 	call	1000d6ac <_fflush_r>
1000ea48:	1000111e 	bne	r2,zero,1000ea90 <__sfvwrite_r+0x5a4>
		goto err;
	      nlknown = 0;
1000ea4c:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
1000ea50:	9005883a 	mov	r2,r18
1000ea54:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000ea58:	9005883a 	mov	r2,r18
1000ea5c:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000ea60:	a8800217 	ldw	r2,8(r21)
1000ea64:	9007883a 	mov	r3,r18
1000ea68:	10c5c83a 	sub	r2,r2,r3
1000ea6c:	a8800215 	stw	r2,8(r21)
1000ea70:	a8800217 	ldw	r2,8(r21)
1000ea74:	103fa41e 	bne	r2,zero,1000e908 <__alt_data_end+0xf800e908>
    }
  return 0;
1000ea78:	0005883a 	mov	r2,zero
1000ea7c:	00000906 	br	1000eaa4 <__sfvwrite_r+0x5b8>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
1000ea80:	0001883a 	nop
1000ea84:	00000306 	br	1000ea94 <__sfvwrite_r+0x5a8>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
1000ea88:	0001883a 	nop
1000ea8c:	00000106 	br	1000ea94 <__sfvwrite_r+0x5a8>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
1000ea90:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
1000ea94:	8080030b 	ldhu	r2,12(r16)
1000ea98:	10801014 	ori	r2,r2,64
1000ea9c:	8080030d 	sth	r2,12(r16)
  return EOF;
1000eaa0:	00bfffc4 	movi	r2,-1
}
1000eaa4:	e6fff904 	addi	sp,fp,-28
1000eaa8:	dfc00817 	ldw	ra,32(sp)
1000eaac:	df000717 	ldw	fp,28(sp)
1000eab0:	dd800617 	ldw	r22,24(sp)
1000eab4:	dd400517 	ldw	r21,20(sp)
1000eab8:	dd000417 	ldw	r20,16(sp)
1000eabc:	dcc00317 	ldw	r19,12(sp)
1000eac0:	dc800217 	ldw	r18,8(sp)
1000eac4:	dc400117 	ldw	r17,4(sp)
1000eac8:	dc000017 	ldw	r16,0(sp)
1000eacc:	dec00904 	addi	sp,sp,36
1000ead0:	f800283a 	ret

1000ead4 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
1000ead4:	defff804 	addi	sp,sp,-32
1000ead8:	dfc00715 	stw	ra,28(sp)
1000eadc:	df000615 	stw	fp,24(sp)
1000eae0:	dd000515 	stw	r20,20(sp)
1000eae4:	dcc00415 	stw	r19,16(sp)
1000eae8:	dc800315 	stw	r18,12(sp)
1000eaec:	dc400215 	stw	r17,8(sp)
1000eaf0:	dc000115 	stw	r16,4(sp)
1000eaf4:	df000604 	addi	fp,sp,24
1000eaf8:	e13ffa15 	stw	r4,-24(fp)
1000eafc:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
1000eb00:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000eb04:	e0bffa17 	ldw	r2,-24(fp)
1000eb08:	1440b804 	addi	r17,r2,736
1000eb0c:	00001b06 	br	1000eb7c <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000eb10:	8c000217 	ldw	r16,8(r17)
1000eb14:	8c800117 	ldw	r18,4(r17)
1000eb18:	00001506 	br	1000eb70 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
1000eb1c:	8080030b 	ldhu	r2,12(r16)
1000eb20:	10bfffcc 	andi	r2,r2,65535
1000eb24:	10a0001c 	xori	r2,r2,32768
1000eb28:	10a00004 	addi	r2,r2,-32768
1000eb2c:	10000f26 	beq	r2,zero,1000eb6c <_fwalk+0x98>
1000eb30:	8080030b 	ldhu	r2,12(r16)
1000eb34:	10bfffcc 	andi	r2,r2,65535
1000eb38:	10a0001c 	xori	r2,r2,32768
1000eb3c:	10a00004 	addi	r2,r2,-32768
1000eb40:	10800060 	cmpeqi	r2,r2,1
1000eb44:	1000091e 	bne	r2,zero,1000eb6c <_fwalk+0x98>
1000eb48:	8080038b 	ldhu	r2,14(r16)
1000eb4c:	10bfffcc 	andi	r2,r2,65535
1000eb50:	10a0001c 	xori	r2,r2,32768
1000eb54:	10a00004 	addi	r2,r2,-32768
1000eb58:	10bfffe0 	cmpeqi	r2,r2,-1
1000eb5c:	1000031e 	bne	r2,zero,1000eb6c <_fwalk+0x98>
	ret |= (*function) (fp);
1000eb60:	8009883a 	mov	r4,r16
1000eb64:	a03ee83a 	callr	r20
1000eb68:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000eb6c:	84001a04 	addi	r16,r16,104
1000eb70:	94bfffc4 	addi	r18,r18,-1
1000eb74:	903fe90e 	bge	r18,zero,1000eb1c <__alt_data_end+0xf800eb1c>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000eb78:	8c400017 	ldw	r17,0(r17)
1000eb7c:	883fe41e 	bne	r17,zero,1000eb10 <__alt_data_end+0xf800eb10>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
1000eb80:	9805883a 	mov	r2,r19
}
1000eb84:	e6fffb04 	addi	sp,fp,-20
1000eb88:	dfc00617 	ldw	ra,24(sp)
1000eb8c:	df000517 	ldw	fp,20(sp)
1000eb90:	dd000417 	ldw	r20,16(sp)
1000eb94:	dcc00317 	ldw	r19,12(sp)
1000eb98:	dc800217 	ldw	r18,8(sp)
1000eb9c:	dc400117 	ldw	r17,4(sp)
1000eba0:	dc000017 	ldw	r16,0(sp)
1000eba4:	dec00704 	addi	sp,sp,28
1000eba8:	f800283a 	ret

1000ebac <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
1000ebac:	defff804 	addi	sp,sp,-32
1000ebb0:	dfc00715 	stw	ra,28(sp)
1000ebb4:	df000615 	stw	fp,24(sp)
1000ebb8:	dd000515 	stw	r20,20(sp)
1000ebbc:	dcc00415 	stw	r19,16(sp)
1000ebc0:	dc800315 	stw	r18,12(sp)
1000ebc4:	dc400215 	stw	r17,8(sp)
1000ebc8:	dc000115 	stw	r16,4(sp)
1000ebcc:	df000604 	addi	fp,sp,24
1000ebd0:	e13ffa15 	stw	r4,-24(fp)
1000ebd4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
1000ebd8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000ebdc:	e0bffa17 	ldw	r2,-24(fp)
1000ebe0:	1440b804 	addi	r17,r2,736
1000ebe4:	00001c06 	br	1000ec58 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000ebe8:	8c000217 	ldw	r16,8(r17)
1000ebec:	8c800117 	ldw	r18,4(r17)
1000ebf0:	00001606 	br	1000ec4c <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
1000ebf4:	8080030b 	ldhu	r2,12(r16)
1000ebf8:	10bfffcc 	andi	r2,r2,65535
1000ebfc:	10a0001c 	xori	r2,r2,32768
1000ec00:	10a00004 	addi	r2,r2,-32768
1000ec04:	10001026 	beq	r2,zero,1000ec48 <_fwalk_reent+0x9c>
1000ec08:	8080030b 	ldhu	r2,12(r16)
1000ec0c:	10bfffcc 	andi	r2,r2,65535
1000ec10:	10a0001c 	xori	r2,r2,32768
1000ec14:	10a00004 	addi	r2,r2,-32768
1000ec18:	10800060 	cmpeqi	r2,r2,1
1000ec1c:	10000a1e 	bne	r2,zero,1000ec48 <_fwalk_reent+0x9c>
1000ec20:	8080038b 	ldhu	r2,14(r16)
1000ec24:	10bfffcc 	andi	r2,r2,65535
1000ec28:	10a0001c 	xori	r2,r2,32768
1000ec2c:	10a00004 	addi	r2,r2,-32768
1000ec30:	10bfffe0 	cmpeqi	r2,r2,-1
1000ec34:	1000041e 	bne	r2,zero,1000ec48 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
1000ec38:	800b883a 	mov	r5,r16
1000ec3c:	e13ffa17 	ldw	r4,-24(fp)
1000ec40:	a03ee83a 	callr	r20
1000ec44:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000ec48:	84001a04 	addi	r16,r16,104
1000ec4c:	94bfffc4 	addi	r18,r18,-1
1000ec50:	903fe80e 	bge	r18,zero,1000ebf4 <__alt_data_end+0xf800ebf4>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000ec54:	8c400017 	ldw	r17,0(r17)
1000ec58:	883fe31e 	bne	r17,zero,1000ebe8 <__alt_data_end+0xf800ebe8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
1000ec5c:	9805883a 	mov	r2,r19
}
1000ec60:	e6fffb04 	addi	sp,fp,-20
1000ec64:	dfc00617 	ldw	ra,24(sp)
1000ec68:	df000517 	ldw	fp,20(sp)
1000ec6c:	dd000417 	ldw	r20,16(sp)
1000ec70:	dcc00317 	ldw	r19,12(sp)
1000ec74:	dc800217 	ldw	r18,8(sp)
1000ec78:	dc400117 	ldw	r17,4(sp)
1000ec7c:	dc000017 	ldw	r16,0(sp)
1000ec80:	dec00704 	addi	sp,sp,28
1000ec84:	f800283a 	ret

1000ec88 <_gettimeofday_r>:
int
_DEFUN (_gettimeofday_r, (ptr, ptimeval, ptimezone),
     struct _reent *ptr _AND
     struct timeval *ptimeval _AND
     void *ptimezone)
{
1000ec88:	defffa04 	addi	sp,sp,-24
1000ec8c:	dfc00515 	stw	ra,20(sp)
1000ec90:	df000415 	stw	fp,16(sp)
1000ec94:	df000404 	addi	fp,sp,16
1000ec98:	e13ffd15 	stw	r4,-12(fp)
1000ec9c:	e17ffe15 	stw	r5,-8(fp)
1000eca0:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
1000eca4:	008403b4 	movhi	r2,4110
1000eca8:	108aa904 	addi	r2,r2,10916
1000ecac:	10000015 	stw	zero,0(r2)
  if ((ret = _gettimeofday (ptimeval, ptimezone)) == -1 && errno != 0)
1000ecb0:	e17fff17 	ldw	r5,-4(fp)
1000ecb4:	e13ffe17 	ldw	r4,-8(fp)
1000ecb8:	00157dc0 	call	100157dc <gettimeofday>
1000ecbc:	e0bffc15 	stw	r2,-16(fp)
1000ecc0:	e0bffc17 	ldw	r2,-16(fp)
1000ecc4:	10bfffd8 	cmpnei	r2,r2,-1
1000ecc8:	1000091e 	bne	r2,zero,1000ecf0 <_gettimeofday_r+0x68>
1000eccc:	008403b4 	movhi	r2,4110
1000ecd0:	108aa904 	addi	r2,r2,10916
1000ecd4:	10800017 	ldw	r2,0(r2)
1000ecd8:	10000526 	beq	r2,zero,1000ecf0 <_gettimeofday_r+0x68>
    ptr->_errno = errno;
1000ecdc:	008403b4 	movhi	r2,4110
1000ece0:	108aa904 	addi	r2,r2,10916
1000ece4:	10c00017 	ldw	r3,0(r2)
1000ece8:	e0bffd17 	ldw	r2,-12(fp)
1000ecec:	10c00015 	stw	r3,0(r2)
  return ret;
1000ecf0:	e0bffc17 	ldw	r2,-16(fp)
}
1000ecf4:	e037883a 	mov	sp,fp
1000ecf8:	dfc00117 	ldw	ra,4(sp)
1000ecfc:	df000017 	ldw	fp,0(sp)
1000ed00:	dec00204 	addi	sp,sp,8
1000ed04:	f800283a 	ret

1000ed08 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
1000ed08:	defffb04 	addi	sp,sp,-20
1000ed0c:	dfc00415 	stw	ra,16(sp)
1000ed10:	df000315 	stw	fp,12(sp)
1000ed14:	df000304 	addi	fp,sp,12
1000ed18:	e13ffd15 	stw	r4,-12(fp)
1000ed1c:	e17ffe15 	stw	r5,-8(fp)
1000ed20:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
1000ed24:	e0bfff17 	ldw	r2,-4(fp)
1000ed28:	10001126 	beq	r2,zero,1000ed70 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
1000ed2c:	01440374 	movhi	r5,4109
1000ed30:	297dde04 	addi	r5,r5,-2184
1000ed34:	e13fff17 	ldw	r4,-4(fp)
1000ed38:	0011a280 	call	10011a28 <strcmp>
1000ed3c:	10000c26 	beq	r2,zero,1000ed70 <_setlocale_r+0x68>
1000ed40:	01440374 	movhi	r5,4109
1000ed44:	297de004 	addi	r5,r5,-2176
1000ed48:	e13fff17 	ldw	r4,-4(fp)
1000ed4c:	0011a280 	call	10011a28 <strcmp>
1000ed50:	10000726 	beq	r2,zero,1000ed70 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
1000ed54:	01440374 	movhi	r5,4109
1000ed58:	297ddd04 	addi	r5,r5,-2188
1000ed5c:	e13fff17 	ldw	r4,-4(fp)
1000ed60:	0011a280 	call	10011a28 <strcmp>
1000ed64:	10000226 	beq	r2,zero,1000ed70 <_setlocale_r+0x68>
        return NULL;
1000ed68:	0005883a 	mov	r2,zero
1000ed6c:	00000206 	br	1000ed78 <_setlocale_r+0x70>
    }
  return "C";
1000ed70:	00840374 	movhi	r2,4109
1000ed74:	10bde004 	addi	r2,r2,-2176
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
1000ed78:	e037883a 	mov	sp,fp
1000ed7c:	dfc00117 	ldw	ra,4(sp)
1000ed80:	df000017 	ldw	fp,0(sp)
1000ed84:	dec00204 	addi	sp,sp,8
1000ed88:	f800283a 	ret

1000ed8c <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
1000ed8c:	deffff04 	addi	sp,sp,-4
1000ed90:	df000015 	stw	fp,0(sp)
1000ed94:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
1000ed98:	00840374 	movhi	r2,4109
1000ed9c:	109fae04 	addi	r2,r2,32440
#endif
}
1000eda0:	e037883a 	mov	sp,fp
1000eda4:	df000017 	ldw	fp,0(sp)
1000eda8:	dec00104 	addi	sp,sp,4
1000edac:	f800283a 	ret

1000edb0 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
1000edb0:	deffff04 	addi	sp,sp,-4
1000edb4:	df000015 	stw	fp,0(sp)
1000edb8:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
1000edbc:	d0a01317 	ldw	r2,-32692(gp)
#endif
}
1000edc0:	e037883a 	mov	sp,fp
1000edc4:	df000017 	ldw	fp,0(sp)
1000edc8:	dec00104 	addi	sp,sp,4
1000edcc:	f800283a 	ret

1000edd0 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
1000edd0:	deffff04 	addi	sp,sp,-4
1000edd4:	df000015 	stw	fp,0(sp)
1000edd8:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
1000eddc:	00840374 	movhi	r2,4109
1000ede0:	109fb604 	addi	r2,r2,32472
#endif
}
1000ede4:	e037883a 	mov	sp,fp
1000ede8:	df000017 	ldw	fp,0(sp)
1000edec:	dec00104 	addi	sp,sp,4
1000edf0:	f800283a 	ret

1000edf4 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
1000edf4:	deffff04 	addi	sp,sp,-4
1000edf8:	df000015 	stw	fp,0(sp)
1000edfc:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
1000ee00:	d0866317 	ldw	r2,6540(gp)
}
1000ee04:	e037883a 	mov	sp,fp
1000ee08:	df000017 	ldw	fp,0(sp)
1000ee0c:	dec00104 	addi	sp,sp,4
1000ee10:	f800283a 	ret

1000ee14 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
1000ee14:	defffe04 	addi	sp,sp,-8
1000ee18:	df000115 	stw	fp,4(sp)
1000ee1c:	df000104 	addi	fp,sp,4
1000ee20:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
1000ee24:	00840374 	movhi	r2,4109
1000ee28:	109fa004 	addi	r2,r2,32384
}
1000ee2c:	e037883a 	mov	sp,fp
1000ee30:	df000017 	ldw	fp,0(sp)
1000ee34:	dec00104 	addi	sp,sp,4
1000ee38:	f800283a 	ret

1000ee3c <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
1000ee3c:	defffc04 	addi	sp,sp,-16
1000ee40:	dfc00315 	stw	ra,12(sp)
1000ee44:	df000215 	stw	fp,8(sp)
1000ee48:	df000204 	addi	fp,sp,8
1000ee4c:	e13ffe15 	stw	r4,-8(fp)
1000ee50:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
1000ee54:	008403b4 	movhi	r2,4110
1000ee58:	10a45004 	addi	r2,r2,-28352
1000ee5c:	10800017 	ldw	r2,0(r2)
1000ee60:	e1bfff17 	ldw	r6,-4(fp)
1000ee64:	e17ffe17 	ldw	r5,-8(fp)
1000ee68:	1009883a 	mov	r4,r2
1000ee6c:	000ed080 	call	1000ed08 <_setlocale_r>
}
1000ee70:	e037883a 	mov	sp,fp
1000ee74:	dfc00117 	ldw	ra,4(sp)
1000ee78:	df000017 	ldw	fp,0(sp)
1000ee7c:	dec00204 	addi	sp,sp,8
1000ee80:	f800283a 	ret

1000ee84 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
1000ee84:	defffe04 	addi	sp,sp,-8
1000ee88:	dfc00115 	stw	ra,4(sp)
1000ee8c:	df000015 	stw	fp,0(sp)
1000ee90:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
1000ee94:	008403b4 	movhi	r2,4110
1000ee98:	10a45004 	addi	r2,r2,-28352
1000ee9c:	10800017 	ldw	r2,0(r2)
1000eea0:	1009883a 	mov	r4,r2
1000eea4:	000ee140 	call	1000ee14 <_localeconv_r>
}
1000eea8:	e037883a 	mov	sp,fp
1000eeac:	dfc00117 	ldw	ra,4(sp)
1000eeb0:	df000017 	ldw	fp,0(sp)
1000eeb4:	dec00204 	addi	sp,sp,8
1000eeb8:	f800283a 	ret

1000eebc <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
1000eebc:	deffea04 	addi	sp,sp,-88
1000eec0:	dfc01515 	stw	ra,84(sp)
1000eec4:	df001415 	stw	fp,80(sp)
1000eec8:	dcc01315 	stw	r19,76(sp)
1000eecc:	dc801215 	stw	r18,72(sp)
1000eed0:	dc401115 	stw	r17,68(sp)
1000eed4:	dc001015 	stw	r16,64(sp)
1000eed8:	df001404 	addi	fp,sp,80
1000eedc:	e13ffb15 	stw	r4,-20(fp)
1000eee0:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
1000eee4:	8080030b 	ldhu	r2,12(r16)
1000eee8:	10bfffcc 	andi	r2,r2,65535
1000eeec:	1080008c 	andi	r2,r2,2
1000eef0:	10000726 	beq	r2,zero,1000ef10 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
1000eef4:	808010c4 	addi	r2,r16,67
1000eef8:	80800015 	stw	r2,0(r16)
1000eefc:	80800017 	ldw	r2,0(r16)
1000ef00:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
1000ef04:	00800044 	movi	r2,1
1000ef08:	80800515 	stw	r2,20(r16)
1000ef0c:	00006d06 	br	1000f0c4 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
1000ef10:	8080038b 	ldhu	r2,14(r16)
1000ef14:	10bfffcc 	andi	r2,r2,65535
1000ef18:	10a0001c 	xori	r2,r2,32768
1000ef1c:	10a00004 	addi	r2,r2,-32768
1000ef20:	10000916 	blt	r2,zero,1000ef48 <__smakebuf_r+0x8c>
1000ef24:	8080038b 	ldhu	r2,14(r16)
1000ef28:	10bfffcc 	andi	r2,r2,65535
1000ef2c:	10a0001c 	xori	r2,r2,32768
1000ef30:	10a00004 	addi	r2,r2,-32768
1000ef34:	e1bfec04 	addi	r6,fp,-80
1000ef38:	100b883a 	mov	r5,r2
1000ef3c:	e13ffb17 	ldw	r4,-20(fp)
1000ef40:	00137d00 	call	100137d0 <_fstat_r>
1000ef44:	10000c0e 	bge	r2,zero,1000ef78 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
1000ef48:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
1000ef4c:	8080030b 	ldhu	r2,12(r16)
1000ef50:	10bfffcc 	andi	r2,r2,65535
1000ef54:	1080200c 	andi	r2,r2,128
1000ef58:	10000226 	beq	r2,zero,1000ef64 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
1000ef5c:	04401004 	movi	r17,64
1000ef60:	00000106 	br	1000ef68 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
1000ef64:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
1000ef68:	8080030b 	ldhu	r2,12(r16)
1000ef6c:	10820014 	ori	r2,r2,2048
1000ef70:	8080030d 	sth	r2,12(r16)
1000ef74:	00001606 	br	1000efd0 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
1000ef78:	e0bfed17 	ldw	r2,-76(fp)
1000ef7c:	10bc000c 	andi	r2,r2,61440
1000ef80:	10880020 	cmpeqi	r2,r2,8192
1000ef84:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
1000ef88:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
1000ef8c:	e0bfed17 	ldw	r2,-76(fp)
1000ef90:	10fc000c 	andi	r3,r2,61440
1000ef94:	00a00014 	movui	r2,32768
1000ef98:	18800a1e 	bne	r3,r2,1000efc4 <__smakebuf_r+0x108>
1000ef9c:	80c00a17 	ldw	r3,40(r16)
1000efa0:	00840074 	movhi	r2,4097
1000efa4:	10864d04 	addi	r2,r2,6452
1000efa8:	1880061e 	bne	r3,r2,1000efc4 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
1000efac:	8080030b 	ldhu	r2,12(r16)
1000efb0:	10810014 	ori	r2,r2,1024
1000efb4:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
1000efb8:	00810004 	movi	r2,1024
1000efbc:	80801315 	stw	r2,76(r16)
1000efc0:	00000306 	br	1000efd0 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
1000efc4:	8080030b 	ldhu	r2,12(r16)
1000efc8:	10820014 	ori	r2,r2,2048
1000efcc:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
1000efd0:	90001126 	beq	r18,zero,1000f018 <__smakebuf_r+0x15c>
1000efd4:	8080038b 	ldhu	r2,14(r16)
1000efd8:	10bfffcc 	andi	r2,r2,65535
1000efdc:	10a0001c 	xori	r2,r2,32768
1000efe0:	10a00004 	addi	r2,r2,-32768
1000efe4:	100b883a 	mov	r5,r2
1000efe8:	e13ffb17 	ldw	r4,-20(fp)
1000efec:	00138500 	call	10013850 <_isatty_r>
1000eff0:	10000926 	beq	r2,zero,1000f018 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
1000eff4:	8080030b 	ldhu	r2,12(r16)
1000eff8:	10800054 	ori	r2,r2,1
1000effc:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
1000f000:	808010c4 	addi	r2,r16,67
1000f004:	80800015 	stw	r2,0(r16)
1000f008:	80800017 	ldw	r2,0(r16)
1000f00c:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
1000f010:	00800044 	movi	r2,1
1000f014:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
1000f018:	880b883a 	mov	r5,r17
1000f01c:	e13ffb17 	ldw	r4,-20(fp)
1000f020:	00064080 	call	10006408 <_malloc_r>
1000f024:	1027883a 	mov	r19,r2
1000f028:	98000e1e 	bne	r19,zero,1000f064 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
1000f02c:	8080030b 	ldhu	r2,12(r16)
1000f030:	10bfffcc 	andi	r2,r2,65535
1000f034:	1080800c 	andi	r2,r2,512
1000f038:	1000221e 	bne	r2,zero,1000f0c4 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
1000f03c:	8080030b 	ldhu	r2,12(r16)
1000f040:	10800094 	ori	r2,r2,2
1000f044:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
1000f048:	808010c4 	addi	r2,r16,67
1000f04c:	80800015 	stw	r2,0(r16)
1000f050:	80800017 	ldw	r2,0(r16)
1000f054:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
1000f058:	00800044 	movi	r2,1
1000f05c:	80800515 	stw	r2,20(r16)
1000f060:	00001806 	br	1000f0c4 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
1000f064:	e0fffb17 	ldw	r3,-20(fp)
1000f068:	00840074 	movhi	r2,4097
1000f06c:	10b6bd04 	addi	r2,r2,-9484
1000f070:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
1000f074:	8080030b 	ldhu	r2,12(r16)
1000f078:	10802014 	ori	r2,r2,128
1000f07c:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
1000f080:	84c00015 	stw	r19,0(r16)
1000f084:	80800017 	ldw	r2,0(r16)
1000f088:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
1000f08c:	8805883a 	mov	r2,r17
1000f090:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
1000f094:	90000b26 	beq	r18,zero,1000f0c4 <__smakebuf_r+0x208>
1000f098:	8080038b 	ldhu	r2,14(r16)
1000f09c:	10bfffcc 	andi	r2,r2,65535
1000f0a0:	10a0001c 	xori	r2,r2,32768
1000f0a4:	10a00004 	addi	r2,r2,-32768
1000f0a8:	100b883a 	mov	r5,r2
1000f0ac:	e13ffb17 	ldw	r4,-20(fp)
1000f0b0:	00138500 	call	10013850 <_isatty_r>
1000f0b4:	10000326 	beq	r2,zero,1000f0c4 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
1000f0b8:	8080030b 	ldhu	r2,12(r16)
1000f0bc:	10800054 	ori	r2,r2,1
1000f0c0:	8080030d 	sth	r2,12(r16)
    }
}
1000f0c4:	e6fffc04 	addi	sp,fp,-16
1000f0c8:	dfc00517 	ldw	ra,20(sp)
1000f0cc:	df000417 	ldw	fp,16(sp)
1000f0d0:	dcc00317 	ldw	r19,12(sp)
1000f0d4:	dc800217 	ldw	r18,8(sp)
1000f0d8:	dc400117 	ldw	r17,4(sp)
1000f0dc:	dc000017 	ldw	r16,0(sp)
1000f0e0:	dec00604 	addi	sp,sp,24
1000f0e4:	f800283a 	ret

1000f0e8 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
1000f0e8:	defff704 	addi	sp,sp,-36
1000f0ec:	df000815 	stw	fp,32(sp)
1000f0f0:	df000804 	addi	fp,sp,32
1000f0f4:	e13ffd15 	stw	r4,-12(fp)
1000f0f8:	e17ffe15 	stw	r5,-8(fp)
1000f0fc:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
1000f100:	e0bffd17 	ldw	r2,-12(fp)
1000f104:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
1000f108:	e0bffe17 	ldw	r2,-8(fp)
1000f10c:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
1000f110:	00001006 	br	1000f154 <memchr+0x6c>
    {
      if (!length--)
1000f114:	e0bfff17 	ldw	r2,-4(fp)
1000f118:	10ffffc4 	addi	r3,r2,-1
1000f11c:	e0ffff15 	stw	r3,-4(fp)
1000f120:	1000021e 	bne	r2,zero,1000f12c <memchr+0x44>
        return NULL;
1000f124:	0005883a 	mov	r2,zero
1000f128:	00005a06 	br	1000f294 <memchr+0x1ac>
      if (*src == d)
1000f12c:	e0bff817 	ldw	r2,-32(fp)
1000f130:	10800003 	ldbu	r2,0(r2)
1000f134:	10c03fcc 	andi	r3,r2,255
1000f138:	e0bffc03 	ldbu	r2,-16(fp)
1000f13c:	1880021e 	bne	r3,r2,1000f148 <memchr+0x60>
        return (void *) src;
1000f140:	e0bff817 	ldw	r2,-32(fp)
1000f144:	00005306 	br	1000f294 <memchr+0x1ac>
      src++;
1000f148:	e0bff817 	ldw	r2,-32(fp)
1000f14c:	10800044 	addi	r2,r2,1
1000f150:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
1000f154:	e0bff817 	ldw	r2,-32(fp)
1000f158:	108000cc 	andi	r2,r2,3
1000f15c:	103fed1e 	bne	r2,zero,1000f114 <__alt_data_end+0xf800f114>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
1000f160:	e0bfff17 	ldw	r2,-4(fp)
1000f164:	10800130 	cmpltui	r2,r2,4
1000f168:	1000451e 	bne	r2,zero,1000f280 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
1000f16c:	e0bff817 	ldw	r2,-32(fp)
1000f170:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
1000f174:	e0bffc03 	ldbu	r2,-16(fp)
1000f178:	1006923a 	slli	r3,r2,8
1000f17c:	e0bffc03 	ldbu	r2,-16(fp)
1000f180:	1884b03a 	or	r2,r3,r2
1000f184:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
1000f188:	e0bffa17 	ldw	r2,-24(fp)
1000f18c:	1004943a 	slli	r2,r2,16
1000f190:	e0fffa17 	ldw	r3,-24(fp)
1000f194:	1884b03a 	or	r2,r3,r2
1000f198:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000f19c:	00800804 	movi	r2,32
1000f1a0:	e0bffb15 	stw	r2,-20(fp)
1000f1a4:	00000906 	br	1000f1cc <memchr+0xe4>
        mask = (mask << i) | mask;
1000f1a8:	e0fffa17 	ldw	r3,-24(fp)
1000f1ac:	e0bffb17 	ldw	r2,-20(fp)
1000f1b0:	1884983a 	sll	r2,r3,r2
1000f1b4:	e0fffa17 	ldw	r3,-24(fp)
1000f1b8:	1884b03a 	or	r2,r3,r2
1000f1bc:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000f1c0:	e0bffb17 	ldw	r2,-20(fp)
1000f1c4:	1085883a 	add	r2,r2,r2
1000f1c8:	e0bffb15 	stw	r2,-20(fp)
1000f1cc:	e0bffb17 	ldw	r2,-20(fp)
1000f1d0:	10800830 	cmpltui	r2,r2,32
1000f1d4:	103ff41e 	bne	r2,zero,1000f1a8 <__alt_data_end+0xf800f1a8>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
1000f1d8:	00001706 	br	1000f238 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
1000f1dc:	e0bff917 	ldw	r2,-28(fp)
1000f1e0:	10c00017 	ldw	r3,0(r2)
1000f1e4:	e0bffa17 	ldw	r2,-24(fp)
1000f1e8:	1886f03a 	xor	r3,r3,r2
1000f1ec:	00bfbff4 	movhi	r2,65279
1000f1f0:	10bfbfc4 	addi	r2,r2,-257
1000f1f4:	1887883a 	add	r3,r3,r2
1000f1f8:	e0bff917 	ldw	r2,-28(fp)
1000f1fc:	11000017 	ldw	r4,0(r2)
1000f200:	e0bffa17 	ldw	r2,-24(fp)
1000f204:	2084f03a 	xor	r2,r4,r2
1000f208:	0084303a 	nor	r2,zero,r2
1000f20c:	1886703a 	and	r3,r3,r2
1000f210:	00a02074 	movhi	r2,32897
1000f214:	10a02004 	addi	r2,r2,-32640
1000f218:	1884703a 	and	r2,r3,r2
1000f21c:	10000a1e 	bne	r2,zero,1000f248 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
1000f220:	e0bfff17 	ldw	r2,-4(fp)
1000f224:	10bfff04 	addi	r2,r2,-4
1000f228:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
1000f22c:	e0bff917 	ldw	r2,-28(fp)
1000f230:	10800104 	addi	r2,r2,4
1000f234:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
1000f238:	e0bfff17 	ldw	r2,-4(fp)
1000f23c:	10800128 	cmpgeui	r2,r2,4
1000f240:	103fe61e 	bne	r2,zero,1000f1dc <__alt_data_end+0xf800f1dc>
1000f244:	00000106 	br	1000f24c <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
1000f248:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
1000f24c:	e0bff917 	ldw	r2,-28(fp)
1000f250:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
1000f254:	00000a06 	br	1000f280 <memchr+0x198>
    {
      if (*src == d)
1000f258:	e0bff817 	ldw	r2,-32(fp)
1000f25c:	10800003 	ldbu	r2,0(r2)
1000f260:	10c03fcc 	andi	r3,r2,255
1000f264:	e0bffc03 	ldbu	r2,-16(fp)
1000f268:	1880021e 	bne	r3,r2,1000f274 <memchr+0x18c>
        return (void *) src;
1000f26c:	e0bff817 	ldw	r2,-32(fp)
1000f270:	00000806 	br	1000f294 <memchr+0x1ac>
      src++;
1000f274:	e0bff817 	ldw	r2,-32(fp)
1000f278:	10800044 	addi	r2,r2,1
1000f27c:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
1000f280:	e0bfff17 	ldw	r2,-4(fp)
1000f284:	10ffffc4 	addi	r3,r2,-1
1000f288:	e0ffff15 	stw	r3,-4(fp)
1000f28c:	103ff21e 	bne	r2,zero,1000f258 <__alt_data_end+0xf800f258>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
1000f290:	0005883a 	mov	r2,zero
}
1000f294:	e037883a 	mov	sp,fp
1000f298:	df000017 	ldw	fp,0(sp)
1000f29c:	dec00104 	addi	sp,sp,4
1000f2a0:	f800283a 	ret

1000f2a4 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
1000f2a4:	defff804 	addi	sp,sp,-32
1000f2a8:	df000715 	stw	fp,28(sp)
1000f2ac:	df000704 	addi	fp,sp,28
1000f2b0:	e13ffd15 	stw	r4,-12(fp)
1000f2b4:	e17ffe15 	stw	r5,-8(fp)
1000f2b8:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
1000f2bc:	e0bffd17 	ldw	r2,-12(fp)
1000f2c0:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
1000f2c4:	e0bffe17 	ldw	r2,-8(fp)
1000f2c8:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
1000f2cc:	e0bfff17 	ldw	r2,-4(fp)
1000f2d0:	10800430 	cmpltui	r2,r2,16
1000f2d4:	10004c1e 	bne	r2,zero,1000f408 <memcpy+0x164>
1000f2d8:	e0fffa17 	ldw	r3,-24(fp)
1000f2dc:	e0bff917 	ldw	r2,-28(fp)
1000f2e0:	1884b03a 	or	r2,r3,r2
1000f2e4:	108000cc 	andi	r2,r2,3
1000f2e8:	1000471e 	bne	r2,zero,1000f408 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
1000f2ec:	e0bff917 	ldw	r2,-28(fp)
1000f2f0:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
1000f2f4:	e0bffa17 	ldw	r2,-24(fp)
1000f2f8:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
1000f2fc:	00002306 	br	1000f38c <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
1000f300:	e0bffb17 	ldw	r2,-20(fp)
1000f304:	10c00104 	addi	r3,r2,4
1000f308:	e0fffb15 	stw	r3,-20(fp)
1000f30c:	e0fffc17 	ldw	r3,-16(fp)
1000f310:	19000104 	addi	r4,r3,4
1000f314:	e13ffc15 	stw	r4,-16(fp)
1000f318:	18c00017 	ldw	r3,0(r3)
1000f31c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000f320:	e0bffb17 	ldw	r2,-20(fp)
1000f324:	10c00104 	addi	r3,r2,4
1000f328:	e0fffb15 	stw	r3,-20(fp)
1000f32c:	e0fffc17 	ldw	r3,-16(fp)
1000f330:	19000104 	addi	r4,r3,4
1000f334:	e13ffc15 	stw	r4,-16(fp)
1000f338:	18c00017 	ldw	r3,0(r3)
1000f33c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000f340:	e0bffb17 	ldw	r2,-20(fp)
1000f344:	10c00104 	addi	r3,r2,4
1000f348:	e0fffb15 	stw	r3,-20(fp)
1000f34c:	e0fffc17 	ldw	r3,-16(fp)
1000f350:	19000104 	addi	r4,r3,4
1000f354:	e13ffc15 	stw	r4,-16(fp)
1000f358:	18c00017 	ldw	r3,0(r3)
1000f35c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000f360:	e0bffb17 	ldw	r2,-20(fp)
1000f364:	10c00104 	addi	r3,r2,4
1000f368:	e0fffb15 	stw	r3,-20(fp)
1000f36c:	e0fffc17 	ldw	r3,-16(fp)
1000f370:	19000104 	addi	r4,r3,4
1000f374:	e13ffc15 	stw	r4,-16(fp)
1000f378:	18c00017 	ldw	r3,0(r3)
1000f37c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
1000f380:	e0bfff17 	ldw	r2,-4(fp)
1000f384:	10bffc04 	addi	r2,r2,-16
1000f388:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
1000f38c:	e0bfff17 	ldw	r2,-4(fp)
1000f390:	10800428 	cmpgeui	r2,r2,16
1000f394:	103fda1e 	bne	r2,zero,1000f300 <__alt_data_end+0xf800f300>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
1000f398:	00000b06 	br	1000f3c8 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
1000f39c:	e0bffb17 	ldw	r2,-20(fp)
1000f3a0:	10c00104 	addi	r3,r2,4
1000f3a4:	e0fffb15 	stw	r3,-20(fp)
1000f3a8:	e0fffc17 	ldw	r3,-16(fp)
1000f3ac:	19000104 	addi	r4,r3,4
1000f3b0:	e13ffc15 	stw	r4,-16(fp)
1000f3b4:	18c00017 	ldw	r3,0(r3)
1000f3b8:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
1000f3bc:	e0bfff17 	ldw	r2,-4(fp)
1000f3c0:	10bfff04 	addi	r2,r2,-4
1000f3c4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
1000f3c8:	e0bfff17 	ldw	r2,-4(fp)
1000f3cc:	10800128 	cmpgeui	r2,r2,4
1000f3d0:	103ff21e 	bne	r2,zero,1000f39c <__alt_data_end+0xf800f39c>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
1000f3d4:	e0bffb17 	ldw	r2,-20(fp)
1000f3d8:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
1000f3dc:	e0bffc17 	ldw	r2,-16(fp)
1000f3e0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
1000f3e4:	00000806 	br	1000f408 <memcpy+0x164>
    *dst++ = *src++;
1000f3e8:	e0bff917 	ldw	r2,-28(fp)
1000f3ec:	10c00044 	addi	r3,r2,1
1000f3f0:	e0fff915 	stw	r3,-28(fp)
1000f3f4:	e0fffa17 	ldw	r3,-24(fp)
1000f3f8:	19000044 	addi	r4,r3,1
1000f3fc:	e13ffa15 	stw	r4,-24(fp)
1000f400:	18c00003 	ldbu	r3,0(r3)
1000f404:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
1000f408:	e0bfff17 	ldw	r2,-4(fp)
1000f40c:	10ffffc4 	addi	r3,r2,-1
1000f410:	e0ffff15 	stw	r3,-4(fp)
1000f414:	103ff41e 	bne	r2,zero,1000f3e8 <__alt_data_end+0xf800f3e8>
    *dst++ = *src++;

  return dst0;
1000f418:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1000f41c:	e037883a 	mov	sp,fp
1000f420:	df000017 	ldw	fp,0(sp)
1000f424:	dec00104 	addi	sp,sp,4
1000f428:	f800283a 	ret

1000f42c <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
1000f42c:	defff804 	addi	sp,sp,-32
1000f430:	df000715 	stw	fp,28(sp)
1000f434:	df000704 	addi	fp,sp,28
1000f438:	e13ffd15 	stw	r4,-12(fp)
1000f43c:	e17ffe15 	stw	r5,-8(fp)
1000f440:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
1000f444:	e0bffd17 	ldw	r2,-12(fp)
1000f448:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
1000f44c:	e0bffe17 	ldw	r2,-8(fp)
1000f450:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
1000f454:	e0fffa17 	ldw	r3,-24(fp)
1000f458:	e0bff917 	ldw	r2,-28(fp)
1000f45c:	18801d2e 	bgeu	r3,r2,1000f4d4 <memmove+0xa8>
1000f460:	e0fffa17 	ldw	r3,-24(fp)
1000f464:	e0bfff17 	ldw	r2,-4(fp)
1000f468:	1885883a 	add	r2,r3,r2
1000f46c:	e0fff917 	ldw	r3,-28(fp)
1000f470:	1880182e 	bgeu	r3,r2,1000f4d4 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
1000f474:	e0fffa17 	ldw	r3,-24(fp)
1000f478:	e0bfff17 	ldw	r2,-4(fp)
1000f47c:	1885883a 	add	r2,r3,r2
1000f480:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
1000f484:	e0fff917 	ldw	r3,-28(fp)
1000f488:	e0bfff17 	ldw	r2,-4(fp)
1000f48c:	1885883a 	add	r2,r3,r2
1000f490:	e0bff915 	stw	r2,-28(fp)
      while (length--)
1000f494:	00000a06 	br	1000f4c0 <memmove+0x94>
	{
	  *--dst = *--src;
1000f498:	e0bff917 	ldw	r2,-28(fp)
1000f49c:	10bfffc4 	addi	r2,r2,-1
1000f4a0:	e0bff915 	stw	r2,-28(fp)
1000f4a4:	e0bffa17 	ldw	r2,-24(fp)
1000f4a8:	10bfffc4 	addi	r2,r2,-1
1000f4ac:	e0bffa15 	stw	r2,-24(fp)
1000f4b0:	e0bffa17 	ldw	r2,-24(fp)
1000f4b4:	10c00003 	ldbu	r3,0(r2)
1000f4b8:	e0bff917 	ldw	r2,-28(fp)
1000f4bc:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
1000f4c0:	e0bfff17 	ldw	r2,-4(fp)
1000f4c4:	10ffffc4 	addi	r3,r2,-1
1000f4c8:	e0ffff15 	stw	r3,-4(fp)
1000f4cc:	103ff21e 	bne	r2,zero,1000f498 <__alt_data_end+0xf800f498>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
1000f4d0:	00005306 	br	1000f620 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
1000f4d4:	e0bfff17 	ldw	r2,-4(fp)
1000f4d8:	10800430 	cmpltui	r2,r2,16
1000f4dc:	10004c1e 	bne	r2,zero,1000f610 <memmove+0x1e4>
1000f4e0:	e0fffa17 	ldw	r3,-24(fp)
1000f4e4:	e0bff917 	ldw	r2,-28(fp)
1000f4e8:	1884b03a 	or	r2,r3,r2
1000f4ec:	108000cc 	andi	r2,r2,3
1000f4f0:	1000471e 	bne	r2,zero,1000f610 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
1000f4f4:	e0bff917 	ldw	r2,-28(fp)
1000f4f8:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
1000f4fc:	e0bffa17 	ldw	r2,-24(fp)
1000f500:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
1000f504:	00002306 	br	1000f594 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
1000f508:	e0bffb17 	ldw	r2,-20(fp)
1000f50c:	10c00104 	addi	r3,r2,4
1000f510:	e0fffb15 	stw	r3,-20(fp)
1000f514:	e0fffc17 	ldw	r3,-16(fp)
1000f518:	19000104 	addi	r4,r3,4
1000f51c:	e13ffc15 	stw	r4,-16(fp)
1000f520:	18c00017 	ldw	r3,0(r3)
1000f524:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
1000f528:	e0bffb17 	ldw	r2,-20(fp)
1000f52c:	10c00104 	addi	r3,r2,4
1000f530:	e0fffb15 	stw	r3,-20(fp)
1000f534:	e0fffc17 	ldw	r3,-16(fp)
1000f538:	19000104 	addi	r4,r3,4
1000f53c:	e13ffc15 	stw	r4,-16(fp)
1000f540:	18c00017 	ldw	r3,0(r3)
1000f544:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
1000f548:	e0bffb17 	ldw	r2,-20(fp)
1000f54c:	10c00104 	addi	r3,r2,4
1000f550:	e0fffb15 	stw	r3,-20(fp)
1000f554:	e0fffc17 	ldw	r3,-16(fp)
1000f558:	19000104 	addi	r4,r3,4
1000f55c:	e13ffc15 	stw	r4,-16(fp)
1000f560:	18c00017 	ldw	r3,0(r3)
1000f564:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
1000f568:	e0bffb17 	ldw	r2,-20(fp)
1000f56c:	10c00104 	addi	r3,r2,4
1000f570:	e0fffb15 	stw	r3,-20(fp)
1000f574:	e0fffc17 	ldw	r3,-16(fp)
1000f578:	19000104 	addi	r4,r3,4
1000f57c:	e13ffc15 	stw	r4,-16(fp)
1000f580:	18c00017 	ldw	r3,0(r3)
1000f584:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
1000f588:	e0bfff17 	ldw	r2,-4(fp)
1000f58c:	10bffc04 	addi	r2,r2,-16
1000f590:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
1000f594:	e0bfff17 	ldw	r2,-4(fp)
1000f598:	10800428 	cmpgeui	r2,r2,16
1000f59c:	103fda1e 	bne	r2,zero,1000f508 <__alt_data_end+0xf800f508>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
1000f5a0:	00000b06 	br	1000f5d0 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
1000f5a4:	e0bffb17 	ldw	r2,-20(fp)
1000f5a8:	10c00104 	addi	r3,r2,4
1000f5ac:	e0fffb15 	stw	r3,-20(fp)
1000f5b0:	e0fffc17 	ldw	r3,-16(fp)
1000f5b4:	19000104 	addi	r4,r3,4
1000f5b8:	e13ffc15 	stw	r4,-16(fp)
1000f5bc:	18c00017 	ldw	r3,0(r3)
1000f5c0:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
1000f5c4:	e0bfff17 	ldw	r2,-4(fp)
1000f5c8:	10bfff04 	addi	r2,r2,-4
1000f5cc:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
1000f5d0:	e0bfff17 	ldw	r2,-4(fp)
1000f5d4:	10800128 	cmpgeui	r2,r2,4
1000f5d8:	103ff21e 	bne	r2,zero,1000f5a4 <__alt_data_end+0xf800f5a4>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
1000f5dc:	e0bffb17 	ldw	r2,-20(fp)
1000f5e0:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
1000f5e4:	e0bffc17 	ldw	r2,-16(fp)
1000f5e8:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
1000f5ec:	00000806 	br	1000f610 <memmove+0x1e4>
        {
          *dst++ = *src++;
1000f5f0:	e0bff917 	ldw	r2,-28(fp)
1000f5f4:	10c00044 	addi	r3,r2,1
1000f5f8:	e0fff915 	stw	r3,-28(fp)
1000f5fc:	e0fffa17 	ldw	r3,-24(fp)
1000f600:	19000044 	addi	r4,r3,1
1000f604:	e13ffa15 	stw	r4,-24(fp)
1000f608:	18c00003 	ldbu	r3,0(r3)
1000f60c:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
1000f610:	e0bfff17 	ldw	r2,-4(fp)
1000f614:	10ffffc4 	addi	r3,r2,-1
1000f618:	e0ffff15 	stw	r3,-4(fp)
1000f61c:	103ff41e 	bne	r2,zero,1000f5f0 <__alt_data_end+0xf800f5f0>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
1000f620:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1000f624:	e037883a 	mov	sp,fp
1000f628:	df000017 	ldw	fp,0(sp)
1000f62c:	dec00104 	addi	sp,sp,4
1000f630:	f800283a 	ret

1000f634 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
1000f634:	defffa04 	addi	sp,sp,-24
1000f638:	dfc00515 	stw	ra,20(sp)
1000f63c:	df000415 	stw	fp,16(sp)
1000f640:	df000404 	addi	fp,sp,16
1000f644:	e13ffe15 	stw	r4,-8(fp)
1000f648:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
1000f64c:	e0bffe17 	ldw	r2,-8(fp)
1000f650:	10801317 	ldw	r2,76(r2)
1000f654:	10000c1e 	bne	r2,zero,1000f688 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
1000f658:	01800844 	movi	r6,33
1000f65c:	01400104 	movi	r5,4
1000f660:	e13ffe17 	ldw	r4,-8(fp)
1000f664:	0005af00 	call	10005af0 <_calloc_r>
1000f668:	1007883a 	mov	r3,r2
1000f66c:	e0bffe17 	ldw	r2,-8(fp)
1000f670:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
1000f674:	e0bffe17 	ldw	r2,-8(fp)
1000f678:	10801317 	ldw	r2,76(r2)
1000f67c:	1000021e 	bne	r2,zero,1000f688 <_Balloc+0x54>
	{
	  return NULL;
1000f680:	0005883a 	mov	r2,zero
1000f684:	00003206 	br	1000f750 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
1000f688:	e0bffe17 	ldw	r2,-8(fp)
1000f68c:	10c01317 	ldw	r3,76(r2)
1000f690:	e0bfff17 	ldw	r2,-4(fp)
1000f694:	1085883a 	add	r2,r2,r2
1000f698:	1085883a 	add	r2,r2,r2
1000f69c:	1885883a 	add	r2,r3,r2
1000f6a0:	10800017 	ldw	r2,0(r2)
1000f6a4:	e0bffc15 	stw	r2,-16(fp)
1000f6a8:	e0bffc17 	ldw	r2,-16(fp)
1000f6ac:	10000a26 	beq	r2,zero,1000f6d8 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
1000f6b0:	e0bffe17 	ldw	r2,-8(fp)
1000f6b4:	10c01317 	ldw	r3,76(r2)
1000f6b8:	e0bfff17 	ldw	r2,-4(fp)
1000f6bc:	1085883a 	add	r2,r2,r2
1000f6c0:	1085883a 	add	r2,r2,r2
1000f6c4:	1885883a 	add	r2,r3,r2
1000f6c8:	e0fffc17 	ldw	r3,-16(fp)
1000f6cc:	18c00017 	ldw	r3,0(r3)
1000f6d0:	10c00015 	stw	r3,0(r2)
1000f6d4:	00001706 	br	1000f734 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
1000f6d8:	00c00044 	movi	r3,1
1000f6dc:	e0bfff17 	ldw	r2,-4(fp)
1000f6e0:	1884983a 	sll	r2,r3,r2
1000f6e4:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
1000f6e8:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
1000f6ec:	10800144 	addi	r2,r2,5
1000f6f0:	1085883a 	add	r2,r2,r2
1000f6f4:	1085883a 	add	r2,r2,r2
1000f6f8:	100d883a 	mov	r6,r2
1000f6fc:	01400044 	movi	r5,1
1000f700:	e13ffe17 	ldw	r4,-8(fp)
1000f704:	0005af00 	call	10005af0 <_calloc_r>
1000f708:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
1000f70c:	e0bffc17 	ldw	r2,-16(fp)
1000f710:	1000021e 	bne	r2,zero,1000f71c <_Balloc+0xe8>
1000f714:	0005883a 	mov	r2,zero
1000f718:	00000d06 	br	1000f750 <_Balloc+0x11c>
      rv->_k = k;
1000f71c:	e0bffc17 	ldw	r2,-16(fp)
1000f720:	e0ffff17 	ldw	r3,-4(fp)
1000f724:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
1000f728:	e0bffc17 	ldw	r2,-16(fp)
1000f72c:	e0fffd17 	ldw	r3,-12(fp)
1000f730:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
1000f734:	e0bffc17 	ldw	r2,-16(fp)
1000f738:	10000415 	stw	zero,16(r2)
1000f73c:	e0bffc17 	ldw	r2,-16(fp)
1000f740:	10c00417 	ldw	r3,16(r2)
1000f744:	e0bffc17 	ldw	r2,-16(fp)
1000f748:	10c00315 	stw	r3,12(r2)
  return rv;
1000f74c:	e0bffc17 	ldw	r2,-16(fp)
}
1000f750:	e037883a 	mov	sp,fp
1000f754:	dfc00117 	ldw	ra,4(sp)
1000f758:	df000017 	ldw	fp,0(sp)
1000f75c:	dec00204 	addi	sp,sp,8
1000f760:	f800283a 	ret

1000f764 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
1000f764:	defffd04 	addi	sp,sp,-12
1000f768:	df000215 	stw	fp,8(sp)
1000f76c:	df000204 	addi	fp,sp,8
1000f770:	e13ffe15 	stw	r4,-8(fp)
1000f774:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
1000f778:	e0bfff17 	ldw	r2,-4(fp)
1000f77c:	10001326 	beq	r2,zero,1000f7cc <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
1000f780:	e0bffe17 	ldw	r2,-8(fp)
1000f784:	10c01317 	ldw	r3,76(r2)
1000f788:	e0bfff17 	ldw	r2,-4(fp)
1000f78c:	10800117 	ldw	r2,4(r2)
1000f790:	1085883a 	add	r2,r2,r2
1000f794:	1085883a 	add	r2,r2,r2
1000f798:	1885883a 	add	r2,r3,r2
1000f79c:	10c00017 	ldw	r3,0(r2)
1000f7a0:	e0bfff17 	ldw	r2,-4(fp)
1000f7a4:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
1000f7a8:	e0bffe17 	ldw	r2,-8(fp)
1000f7ac:	10c01317 	ldw	r3,76(r2)
1000f7b0:	e0bfff17 	ldw	r2,-4(fp)
1000f7b4:	10800117 	ldw	r2,4(r2)
1000f7b8:	1085883a 	add	r2,r2,r2
1000f7bc:	1085883a 	add	r2,r2,r2
1000f7c0:	1885883a 	add	r2,r3,r2
1000f7c4:	e0ffff17 	ldw	r3,-4(fp)
1000f7c8:	10c00015 	stw	r3,0(r2)
    }
}
1000f7cc:	0001883a 	nop
1000f7d0:	e037883a 	mov	sp,fp
1000f7d4:	df000017 	ldw	fp,0(sp)
1000f7d8:	dec00104 	addi	sp,sp,4
1000f7dc:	f800283a 	ret

1000f7e0 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
1000f7e0:	defff304 	addi	sp,sp,-52
1000f7e4:	dfc00c15 	stw	ra,48(sp)
1000f7e8:	df000b15 	stw	fp,44(sp)
1000f7ec:	df000b04 	addi	fp,sp,44
1000f7f0:	e13ffc15 	stw	r4,-16(fp)
1000f7f4:	e17ffd15 	stw	r5,-12(fp)
1000f7f8:	e1bffe15 	stw	r6,-8(fp)
1000f7fc:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
1000f800:	e0bffd17 	ldw	r2,-12(fp)
1000f804:	10800417 	ldw	r2,16(r2)
1000f808:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
1000f80c:	e0bffd17 	ldw	r2,-12(fp)
1000f810:	10800504 	addi	r2,r2,20
1000f814:	e0bff615 	stw	r2,-40(fp)
  i = 0;
1000f818:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
1000f81c:	e0bff617 	ldw	r2,-40(fp)
1000f820:	10800017 	ldw	r2,0(r2)
1000f824:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
1000f828:	e0bff817 	ldw	r2,-32(fp)
1000f82c:	10bfffcc 	andi	r2,r2,65535
1000f830:	e0fffe17 	ldw	r3,-8(fp)
1000f834:	180b883a 	mov	r5,r3
1000f838:	1009883a 	mov	r4,r2
1000f83c:	0005a080 	call	10005a08 <__mulsi3>
1000f840:	1007883a 	mov	r3,r2
1000f844:	e0bfff17 	ldw	r2,-4(fp)
1000f848:	1885883a 	add	r2,r3,r2
1000f84c:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
1000f850:	e0bff817 	ldw	r2,-32(fp)
1000f854:	1004d43a 	srli	r2,r2,16
1000f858:	e0fffe17 	ldw	r3,-8(fp)
1000f85c:	180b883a 	mov	r5,r3
1000f860:	1009883a 	mov	r4,r2
1000f864:	0005a080 	call	10005a08 <__mulsi3>
1000f868:	1007883a 	mov	r3,r2
1000f86c:	e0bff917 	ldw	r2,-28(fp)
1000f870:	1004d43a 	srli	r2,r2,16
1000f874:	1885883a 	add	r2,r3,r2
1000f878:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
1000f87c:	e0bffa17 	ldw	r2,-24(fp)
1000f880:	1004d43a 	srli	r2,r2,16
1000f884:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
1000f888:	e0bff617 	ldw	r2,-40(fp)
1000f88c:	10c00104 	addi	r3,r2,4
1000f890:	e0fff615 	stw	r3,-40(fp)
1000f894:	e0fffa17 	ldw	r3,-24(fp)
1000f898:	1808943a 	slli	r4,r3,16
1000f89c:	e0fff917 	ldw	r3,-28(fp)
1000f8a0:	18ffffcc 	andi	r3,r3,65535
1000f8a4:	20c7883a 	add	r3,r4,r3
1000f8a8:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
1000f8ac:	e0bff517 	ldw	r2,-44(fp)
1000f8b0:	10800044 	addi	r2,r2,1
1000f8b4:	e0bff515 	stw	r2,-44(fp)
1000f8b8:	e0fff517 	ldw	r3,-44(fp)
1000f8bc:	e0bff717 	ldw	r2,-36(fp)
1000f8c0:	18bfd616 	blt	r3,r2,1000f81c <__alt_data_end+0xf800f81c>
  if (a)
1000f8c4:	e0bfff17 	ldw	r2,-4(fp)
1000f8c8:	10002a26 	beq	r2,zero,1000f974 <__multadd+0x194>
    {
      if (wds >= b->_maxwds)
1000f8cc:	e0bffd17 	ldw	r2,-12(fp)
1000f8d0:	10800217 	ldw	r2,8(r2)
1000f8d4:	e0fff717 	ldw	r3,-36(fp)
1000f8d8:	18801916 	blt	r3,r2,1000f940 <__multadd+0x160>
	{
	  b1 = Balloc (ptr, b->_k + 1);
1000f8dc:	e0bffd17 	ldw	r2,-12(fp)
1000f8e0:	10800117 	ldw	r2,4(r2)
1000f8e4:	10800044 	addi	r2,r2,1
1000f8e8:	100b883a 	mov	r5,r2
1000f8ec:	e13ffc17 	ldw	r4,-16(fp)
1000f8f0:	000f6340 	call	1000f634 <_Balloc>
1000f8f4:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
1000f8f8:	e0bffb17 	ldw	r2,-20(fp)
1000f8fc:	10c00304 	addi	r3,r2,12
1000f900:	e0bffd17 	ldw	r2,-12(fp)
1000f904:	11000304 	addi	r4,r2,12
1000f908:	e0bffd17 	ldw	r2,-12(fp)
1000f90c:	10800417 	ldw	r2,16(r2)
1000f910:	10800084 	addi	r2,r2,2
1000f914:	1085883a 	add	r2,r2,r2
1000f918:	1085883a 	add	r2,r2,r2
1000f91c:	100d883a 	mov	r6,r2
1000f920:	200b883a 	mov	r5,r4
1000f924:	1809883a 	mov	r4,r3
1000f928:	000f2a40 	call	1000f2a4 <memcpy>
	  Bfree (ptr, b);
1000f92c:	e17ffd17 	ldw	r5,-12(fp)
1000f930:	e13ffc17 	ldw	r4,-16(fp)
1000f934:	000f7640 	call	1000f764 <_Bfree>
	  b = b1;
1000f938:	e0bffb17 	ldw	r2,-20(fp)
1000f93c:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
1000f940:	e0bff717 	ldw	r2,-36(fp)
1000f944:	10c00044 	addi	r3,r2,1
1000f948:	e0fff715 	stw	r3,-36(fp)
1000f94c:	e0ffff17 	ldw	r3,-4(fp)
1000f950:	e13ffd17 	ldw	r4,-12(fp)
1000f954:	10800144 	addi	r2,r2,5
1000f958:	1085883a 	add	r2,r2,r2
1000f95c:	1085883a 	add	r2,r2,r2
1000f960:	2085883a 	add	r2,r4,r2
1000f964:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
1000f968:	e0bffd17 	ldw	r2,-12(fp)
1000f96c:	e0fff717 	ldw	r3,-36(fp)
1000f970:	10c00415 	stw	r3,16(r2)
    }
  return b;
1000f974:	e0bffd17 	ldw	r2,-12(fp)
}
1000f978:	e037883a 	mov	sp,fp
1000f97c:	dfc00117 	ldw	ra,4(sp)
1000f980:	df000017 	ldw	fp,0(sp)
1000f984:	dec00204 	addi	sp,sp,8
1000f988:	f800283a 	ret

1000f98c <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
1000f98c:	defff504 	addi	sp,sp,-44
1000f990:	dfc00a15 	stw	ra,40(sp)
1000f994:	df000915 	stw	fp,36(sp)
1000f998:	df000904 	addi	fp,sp,36
1000f99c:	e13ffc15 	stw	r4,-16(fp)
1000f9a0:	e17ffd15 	stw	r5,-12(fp)
1000f9a4:	e1bffe15 	stw	r6,-8(fp)
1000f9a8:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
1000f9ac:	e0bfff17 	ldw	r2,-4(fp)
1000f9b0:	10800204 	addi	r2,r2,8
1000f9b4:	01400244 	movi	r5,9
1000f9b8:	1009883a 	mov	r4,r2
1000f9bc:	00023980 	call	10002398 <__divsi3>
1000f9c0:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
1000f9c4:	e03ff915 	stw	zero,-28(fp)
1000f9c8:	00800044 	movi	r2,1
1000f9cc:	e0bffa15 	stw	r2,-24(fp)
1000f9d0:	00000606 	br	1000f9ec <__s2b+0x60>
1000f9d4:	e0bffa17 	ldw	r2,-24(fp)
1000f9d8:	1085883a 	add	r2,r2,r2
1000f9dc:	e0bffa15 	stw	r2,-24(fp)
1000f9e0:	e0bff917 	ldw	r2,-28(fp)
1000f9e4:	10800044 	addi	r2,r2,1
1000f9e8:	e0bff915 	stw	r2,-28(fp)
1000f9ec:	e0bffb17 	ldw	r2,-20(fp)
1000f9f0:	e0fffa17 	ldw	r3,-24(fp)
1000f9f4:	18bff716 	blt	r3,r2,1000f9d4 <__alt_data_end+0xf800f9d4>
#ifdef Pack_32
  b = Balloc (ptr, k);
1000f9f8:	e17ff917 	ldw	r5,-28(fp)
1000f9fc:	e13ffc17 	ldw	r4,-16(fp)
1000fa00:	000f6340 	call	1000f634 <_Balloc>
1000fa04:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
1000fa08:	e0bff717 	ldw	r2,-36(fp)
1000fa0c:	e0c00217 	ldw	r3,8(fp)
1000fa10:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
1000fa14:	e0bff717 	ldw	r2,-36(fp)
1000fa18:	00c00044 	movi	r3,1
1000fa1c:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
1000fa20:	00800244 	movi	r2,9
1000fa24:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
1000fa28:	e0bffe17 	ldw	r2,-8(fp)
1000fa2c:	10800290 	cmplti	r2,r2,10
1000fa30:	10001b1e 	bne	r2,zero,1000faa0 <__s2b+0x114>
    {
      s += 9;
1000fa34:	e0bffd17 	ldw	r2,-12(fp)
1000fa38:	10800244 	addi	r2,r2,9
1000fa3c:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
1000fa40:	e0bffd17 	ldw	r2,-12(fp)
1000fa44:	10c00044 	addi	r3,r2,1
1000fa48:	e0fffd15 	stw	r3,-12(fp)
1000fa4c:	10800003 	ldbu	r2,0(r2)
1000fa50:	10803fcc 	andi	r2,r2,255
1000fa54:	1080201c 	xori	r2,r2,128
1000fa58:	10bfe004 	addi	r2,r2,-128
1000fa5c:	10bff404 	addi	r2,r2,-48
1000fa60:	100f883a 	mov	r7,r2
1000fa64:	01800284 	movi	r6,10
1000fa68:	e17ff717 	ldw	r5,-36(fp)
1000fa6c:	e13ffc17 	ldw	r4,-16(fp)
1000fa70:	000f7e00 	call	1000f7e0 <__multadd>
1000fa74:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
1000fa78:	e0bff817 	ldw	r2,-32(fp)
1000fa7c:	10800044 	addi	r2,r2,1
1000fa80:	e0bff815 	stw	r2,-32(fp)
1000fa84:	e0fff817 	ldw	r3,-32(fp)
1000fa88:	e0bffe17 	ldw	r2,-8(fp)
1000fa8c:	18bfec16 	blt	r3,r2,1000fa40 <__alt_data_end+0xf800fa40>
      s++;
1000fa90:	e0bffd17 	ldw	r2,-12(fp)
1000fa94:	10800044 	addi	r2,r2,1
1000fa98:	e0bffd15 	stw	r2,-12(fp)
1000fa9c:	00001506 	br	1000faf4 <__s2b+0x168>
    }
  else
    s += 10;
1000faa0:	e0bffd17 	ldw	r2,-12(fp)
1000faa4:	10800284 	addi	r2,r2,10
1000faa8:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
1000faac:	00001106 	br	1000faf4 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
1000fab0:	e0bffd17 	ldw	r2,-12(fp)
1000fab4:	10c00044 	addi	r3,r2,1
1000fab8:	e0fffd15 	stw	r3,-12(fp)
1000fabc:	10800003 	ldbu	r2,0(r2)
1000fac0:	10803fcc 	andi	r2,r2,255
1000fac4:	1080201c 	xori	r2,r2,128
1000fac8:	10bfe004 	addi	r2,r2,-128
1000facc:	10bff404 	addi	r2,r2,-48
1000fad0:	100f883a 	mov	r7,r2
1000fad4:	01800284 	movi	r6,10
1000fad8:	e17ff717 	ldw	r5,-36(fp)
1000fadc:	e13ffc17 	ldw	r4,-16(fp)
1000fae0:	000f7e00 	call	1000f7e0 <__multadd>
1000fae4:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
1000fae8:	e0bff817 	ldw	r2,-32(fp)
1000faec:	10800044 	addi	r2,r2,1
1000faf0:	e0bff815 	stw	r2,-32(fp)
1000faf4:	e0fff817 	ldw	r3,-32(fp)
1000faf8:	e0bfff17 	ldw	r2,-4(fp)
1000fafc:	18bfec16 	blt	r3,r2,1000fab0 <__alt_data_end+0xf800fab0>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
1000fb00:	e0bff717 	ldw	r2,-36(fp)
}
1000fb04:	e037883a 	mov	sp,fp
1000fb08:	dfc00117 	ldw	ra,4(sp)
1000fb0c:	df000017 	ldw	fp,0(sp)
1000fb10:	dec00204 	addi	sp,sp,8
1000fb14:	f800283a 	ret

1000fb18 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
1000fb18:	defffe04 	addi	sp,sp,-8
1000fb1c:	df000115 	stw	fp,4(sp)
1000fb20:	dc000015 	stw	r16,0(sp)
1000fb24:	df000104 	addi	fp,sp,4
1000fb28:	2005883a 	mov	r2,r4
  register int k = 0;
1000fb2c:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
1000fb30:	10ffffec 	andhi	r3,r2,65535
1000fb34:	1800021e 	bne	r3,zero,1000fb40 <__hi0bits+0x28>
    {
      k = 16;
1000fb38:	04000404 	movi	r16,16
      x <<= 16;
1000fb3c:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
1000fb40:	10ffc02c 	andhi	r3,r2,65280
1000fb44:	1800021e 	bne	r3,zero,1000fb50 <__hi0bits+0x38>
    {
      k += 8;
1000fb48:	84000204 	addi	r16,r16,8
      x <<= 8;
1000fb4c:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
1000fb50:	10fc002c 	andhi	r3,r2,61440
1000fb54:	1800021e 	bne	r3,zero,1000fb60 <__hi0bits+0x48>
    {
      k += 4;
1000fb58:	84000104 	addi	r16,r16,4
      x <<= 4;
1000fb5c:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
1000fb60:	10f0002c 	andhi	r3,r2,49152
1000fb64:	1800031e 	bne	r3,zero,1000fb74 <__hi0bits+0x5c>
    {
      k += 2;
1000fb68:	84000084 	addi	r16,r16,2
      x <<= 2;
1000fb6c:	1085883a 	add	r2,r2,r2
1000fb70:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
1000fb74:	1007883a 	mov	r3,r2
1000fb78:	18000516 	blt	r3,zero,1000fb90 <__hi0bits+0x78>
    {
      k++;
1000fb7c:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
1000fb80:	1090002c 	andhi	r2,r2,16384
1000fb84:	1000021e 	bne	r2,zero,1000fb90 <__hi0bits+0x78>
	return 32;
1000fb88:	00800804 	movi	r2,32
1000fb8c:	00000106 	br	1000fb94 <__hi0bits+0x7c>
    }
  return k;
1000fb90:	8005883a 	mov	r2,r16
}
1000fb94:	e6ffff04 	addi	sp,fp,-4
1000fb98:	df000117 	ldw	fp,4(sp)
1000fb9c:	dc000017 	ldw	r16,0(sp)
1000fba0:	dec00204 	addi	sp,sp,8
1000fba4:	f800283a 	ret

1000fba8 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
1000fba8:	defffc04 	addi	sp,sp,-16
1000fbac:	df000315 	stw	fp,12(sp)
1000fbb0:	dc400215 	stw	r17,8(sp)
1000fbb4:	dc000115 	stw	r16,4(sp)
1000fbb8:	df000304 	addi	fp,sp,12
1000fbbc:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
1000fbc0:	e0bffd17 	ldw	r2,-12(fp)
1000fbc4:	14000017 	ldw	r16,0(r2)

  if (x & 7)
1000fbc8:	808001cc 	andi	r2,r16,7
1000fbcc:	10001026 	beq	r2,zero,1000fc10 <__lo0bits+0x68>
    {
      if (x & 1)
1000fbd0:	8080004c 	andi	r2,r16,1
1000fbd4:	10000226 	beq	r2,zero,1000fbe0 <__lo0bits+0x38>
	return 0;
1000fbd8:	0005883a 	mov	r2,zero
1000fbdc:	00002706 	br	1000fc7c <__lo0bits+0xd4>
      if (x & 2)
1000fbe0:	8080008c 	andi	r2,r16,2
1000fbe4:	10000526 	beq	r2,zero,1000fbfc <__lo0bits+0x54>
	{
	  *y = x >> 1;
1000fbe8:	8006d07a 	srli	r3,r16,1
1000fbec:	e0bffd17 	ldw	r2,-12(fp)
1000fbf0:	10c00015 	stw	r3,0(r2)
	  return 1;
1000fbf4:	00800044 	movi	r2,1
1000fbf8:	00002006 	br	1000fc7c <__lo0bits+0xd4>
	}
      *y = x >> 2;
1000fbfc:	8006d0ba 	srli	r3,r16,2
1000fc00:	e0bffd17 	ldw	r2,-12(fp)
1000fc04:	10c00015 	stw	r3,0(r2)
      return 2;
1000fc08:	00800084 	movi	r2,2
1000fc0c:	00001b06 	br	1000fc7c <__lo0bits+0xd4>
    }
  k = 0;
1000fc10:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
1000fc14:	80bfffcc 	andi	r2,r16,65535
1000fc18:	1000021e 	bne	r2,zero,1000fc24 <__lo0bits+0x7c>
    {
      k = 16;
1000fc1c:	04400404 	movi	r17,16
      x >>= 16;
1000fc20:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
1000fc24:	80803fcc 	andi	r2,r16,255
1000fc28:	1000021e 	bne	r2,zero,1000fc34 <__lo0bits+0x8c>
    {
      k += 8;
1000fc2c:	8c400204 	addi	r17,r17,8
      x >>= 8;
1000fc30:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
1000fc34:	808003cc 	andi	r2,r16,15
1000fc38:	1000021e 	bne	r2,zero,1000fc44 <__lo0bits+0x9c>
    {
      k += 4;
1000fc3c:	8c400104 	addi	r17,r17,4
      x >>= 4;
1000fc40:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
1000fc44:	808000cc 	andi	r2,r16,3
1000fc48:	1000021e 	bne	r2,zero,1000fc54 <__lo0bits+0xac>
    {
      k += 2;
1000fc4c:	8c400084 	addi	r17,r17,2
      x >>= 2;
1000fc50:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
1000fc54:	8080004c 	andi	r2,r16,1
1000fc58:	1000051e 	bne	r2,zero,1000fc70 <__lo0bits+0xc8>
    {
      k++;
1000fc5c:	8c400044 	addi	r17,r17,1
      x >>= 1;
1000fc60:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
1000fc64:	8000021e 	bne	r16,zero,1000fc70 <__lo0bits+0xc8>
	return 32;
1000fc68:	00800804 	movi	r2,32
1000fc6c:	00000306 	br	1000fc7c <__lo0bits+0xd4>
    }
  *y = x;
1000fc70:	e0bffd17 	ldw	r2,-12(fp)
1000fc74:	14000015 	stw	r16,0(r2)
  return k;
1000fc78:	8805883a 	mov	r2,r17
}
1000fc7c:	e6fffe04 	addi	sp,fp,-8
1000fc80:	df000217 	ldw	fp,8(sp)
1000fc84:	dc400117 	ldw	r17,4(sp)
1000fc88:	dc000017 	ldw	r16,0(sp)
1000fc8c:	dec00304 	addi	sp,sp,12
1000fc90:	f800283a 	ret

1000fc94 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
1000fc94:	defffb04 	addi	sp,sp,-20
1000fc98:	dfc00415 	stw	ra,16(sp)
1000fc9c:	df000315 	stw	fp,12(sp)
1000fca0:	df000304 	addi	fp,sp,12
1000fca4:	e13ffe15 	stw	r4,-8(fp)
1000fca8:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
1000fcac:	01400044 	movi	r5,1
1000fcb0:	e13ffe17 	ldw	r4,-8(fp)
1000fcb4:	000f6340 	call	1000f634 <_Balloc>
1000fcb8:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
1000fcbc:	e0ffff17 	ldw	r3,-4(fp)
1000fcc0:	e0bffd17 	ldw	r2,-12(fp)
1000fcc4:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
1000fcc8:	e0bffd17 	ldw	r2,-12(fp)
1000fccc:	00c00044 	movi	r3,1
1000fcd0:	10c00415 	stw	r3,16(r2)
  return b;
1000fcd4:	e0bffd17 	ldw	r2,-12(fp)
}
1000fcd8:	e037883a 	mov	sp,fp
1000fcdc:	dfc00117 	ldw	ra,4(sp)
1000fce0:	df000017 	ldw	fp,0(sp)
1000fce4:	dec00204 	addi	sp,sp,8
1000fce8:	f800283a 	ret

1000fcec <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
1000fcec:	deffeb04 	addi	sp,sp,-84
1000fcf0:	dfc01415 	stw	ra,80(sp)
1000fcf4:	df001315 	stw	fp,76(sp)
1000fcf8:	df001304 	addi	fp,sp,76
1000fcfc:	e13ffd15 	stw	r4,-12(fp)
1000fd00:	e17ffe15 	stw	r5,-8(fp)
1000fd04:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
1000fd08:	e0bffe17 	ldw	r2,-8(fp)
1000fd0c:	10c00417 	ldw	r3,16(r2)
1000fd10:	e0bfff17 	ldw	r2,-4(fp)
1000fd14:	10800417 	ldw	r2,16(r2)
1000fd18:	1880060e 	bge	r3,r2,1000fd34 <__multiply+0x48>
    {
      c = a;
1000fd1c:	e0bffe17 	ldw	r2,-8(fp)
1000fd20:	e0bff515 	stw	r2,-44(fp)
      a = b;
1000fd24:	e0bfff17 	ldw	r2,-4(fp)
1000fd28:	e0bffe15 	stw	r2,-8(fp)
      b = c;
1000fd2c:	e0bff517 	ldw	r2,-44(fp)
1000fd30:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
1000fd34:	e0bffe17 	ldw	r2,-8(fp)
1000fd38:	10800117 	ldw	r2,4(r2)
1000fd3c:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
1000fd40:	e0bffe17 	ldw	r2,-8(fp)
1000fd44:	10800417 	ldw	r2,16(r2)
1000fd48:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
1000fd4c:	e0bfff17 	ldw	r2,-4(fp)
1000fd50:	10800417 	ldw	r2,16(r2)
1000fd54:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
1000fd58:	e0fff617 	ldw	r3,-40(fp)
1000fd5c:	e0bff717 	ldw	r2,-36(fp)
1000fd60:	1885883a 	add	r2,r3,r2
1000fd64:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
1000fd68:	e0bffe17 	ldw	r2,-8(fp)
1000fd6c:	10c00217 	ldw	r3,8(r2)
1000fd70:	e0bfee17 	ldw	r2,-72(fp)
1000fd74:	1880030e 	bge	r3,r2,1000fd84 <__multiply+0x98>
    k++;
1000fd78:	e0bfed17 	ldw	r2,-76(fp)
1000fd7c:	10800044 	addi	r2,r2,1
1000fd80:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
1000fd84:	e17fed17 	ldw	r5,-76(fp)
1000fd88:	e13ffd17 	ldw	r4,-12(fp)
1000fd8c:	000f6340 	call	1000f634 <_Balloc>
1000fd90:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
1000fd94:	e0bff517 	ldw	r2,-44(fp)
1000fd98:	10800504 	addi	r2,r2,20
1000fd9c:	e0bff015 	stw	r2,-64(fp)
1000fda0:	e0bfee17 	ldw	r2,-72(fp)
1000fda4:	1085883a 	add	r2,r2,r2
1000fda8:	1085883a 	add	r2,r2,r2
1000fdac:	1007883a 	mov	r3,r2
1000fdb0:	e0bff017 	ldw	r2,-64(fp)
1000fdb4:	10c5883a 	add	r2,r2,r3
1000fdb8:	e0bff815 	stw	r2,-32(fp)
1000fdbc:	00000506 	br	1000fdd4 <__multiply+0xe8>
    *x = 0;
1000fdc0:	e0bff017 	ldw	r2,-64(fp)
1000fdc4:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
1000fdc8:	e0bff017 	ldw	r2,-64(fp)
1000fdcc:	10800104 	addi	r2,r2,4
1000fdd0:	e0bff015 	stw	r2,-64(fp)
1000fdd4:	e0fff017 	ldw	r3,-64(fp)
1000fdd8:	e0bff817 	ldw	r2,-32(fp)
1000fddc:	18bff836 	bltu	r3,r2,1000fdc0 <__alt_data_end+0xf800fdc0>
    *x = 0;
  xa = a->_x;
1000fde0:	e0bffe17 	ldw	r2,-8(fp)
1000fde4:	10800504 	addi	r2,r2,20
1000fde8:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
1000fdec:	e0bff617 	ldw	r2,-40(fp)
1000fdf0:	1085883a 	add	r2,r2,r2
1000fdf4:	1085883a 	add	r2,r2,r2
1000fdf8:	1007883a 	mov	r3,r2
1000fdfc:	e0bff817 	ldw	r2,-32(fp)
1000fe00:	10c5883a 	add	r2,r2,r3
1000fe04:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
1000fe08:	e0bfff17 	ldw	r2,-4(fp)
1000fe0c:	10800504 	addi	r2,r2,20
1000fe10:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
1000fe14:	e0bff717 	ldw	r2,-36(fp)
1000fe18:	1085883a 	add	r2,r2,r2
1000fe1c:	1085883a 	add	r2,r2,r2
1000fe20:	1007883a 	mov	r3,r2
1000fe24:	e0bff117 	ldw	r2,-60(fp)
1000fe28:	10c5883a 	add	r2,r2,r3
1000fe2c:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
1000fe30:	e0bff517 	ldw	r2,-44(fp)
1000fe34:	10800504 	addi	r2,r2,20
1000fe38:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
1000fe3c:	00008506 	br	10010054 <__multiply+0x368>
    {
      if ((y = *xb & 0xffff) != 0)
1000fe40:	e0bff117 	ldw	r2,-60(fp)
1000fe44:	10800017 	ldw	r2,0(r2)
1000fe48:	10bfffcc 	andi	r2,r2,65535
1000fe4c:	e0bffb15 	stw	r2,-20(fp)
1000fe50:	e0bffb17 	ldw	r2,-20(fp)
1000fe54:	10003826 	beq	r2,zero,1000ff38 <__multiply+0x24c>
	{
	  x = xa;
1000fe58:	e0bff817 	ldw	r2,-32(fp)
1000fe5c:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
1000fe60:	e0bff317 	ldw	r2,-52(fp)
1000fe64:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
1000fe68:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
1000fe6c:	e0bff017 	ldw	r2,-64(fp)
1000fe70:	10800017 	ldw	r2,0(r2)
1000fe74:	10bfffcc 	andi	r2,r2,65535
1000fe78:	e17ffb17 	ldw	r5,-20(fp)
1000fe7c:	1009883a 	mov	r4,r2
1000fe80:	0005a080 	call	10005a08 <__mulsi3>
1000fe84:	1007883a 	mov	r3,r2
1000fe88:	e0bff217 	ldw	r2,-56(fp)
1000fe8c:	10800017 	ldw	r2,0(r2)
1000fe90:	10bfffcc 	andi	r2,r2,65535
1000fe94:	1887883a 	add	r3,r3,r2
1000fe98:	e0bfef17 	ldw	r2,-68(fp)
1000fe9c:	1885883a 	add	r2,r3,r2
1000fea0:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
1000fea4:	e0bffc17 	ldw	r2,-16(fp)
1000fea8:	1004d43a 	srli	r2,r2,16
1000feac:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
1000feb0:	e0bff017 	ldw	r2,-64(fp)
1000feb4:	10c00104 	addi	r3,r2,4
1000feb8:	e0fff015 	stw	r3,-64(fp)
1000febc:	10800017 	ldw	r2,0(r2)
1000fec0:	1004d43a 	srli	r2,r2,16
1000fec4:	e17ffb17 	ldw	r5,-20(fp)
1000fec8:	1009883a 	mov	r4,r2
1000fecc:	0005a080 	call	10005a08 <__mulsi3>
1000fed0:	1007883a 	mov	r3,r2
1000fed4:	e0bff217 	ldw	r2,-56(fp)
1000fed8:	10800017 	ldw	r2,0(r2)
1000fedc:	1004d43a 	srli	r2,r2,16
1000fee0:	1887883a 	add	r3,r3,r2
1000fee4:	e0bfef17 	ldw	r2,-68(fp)
1000fee8:	1885883a 	add	r2,r3,r2
1000feec:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
1000fef0:	e0bff417 	ldw	r2,-48(fp)
1000fef4:	1004d43a 	srli	r2,r2,16
1000fef8:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
1000fefc:	e0bff217 	ldw	r2,-56(fp)
1000ff00:	10c00104 	addi	r3,r2,4
1000ff04:	e0fff215 	stw	r3,-56(fp)
1000ff08:	e0fff417 	ldw	r3,-48(fp)
1000ff0c:	1808943a 	slli	r4,r3,16
1000ff10:	e0fffc17 	ldw	r3,-16(fp)
1000ff14:	18ffffcc 	andi	r3,r3,65535
1000ff18:	20c6b03a 	or	r3,r4,r3
1000ff1c:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
1000ff20:	e0fff017 	ldw	r3,-64(fp)
1000ff24:	e0bff917 	ldw	r2,-28(fp)
1000ff28:	18bfd036 	bltu	r3,r2,1000fe6c <__alt_data_end+0xf800fe6c>
	  *xc = carry;
1000ff2c:	e0bff217 	ldw	r2,-56(fp)
1000ff30:	e0ffef17 	ldw	r3,-68(fp)
1000ff34:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
1000ff38:	e0bff117 	ldw	r2,-60(fp)
1000ff3c:	10800017 	ldw	r2,0(r2)
1000ff40:	1004d43a 	srli	r2,r2,16
1000ff44:	e0bffb15 	stw	r2,-20(fp)
1000ff48:	e0bffb17 	ldw	r2,-20(fp)
1000ff4c:	10003b26 	beq	r2,zero,1001003c <__multiply+0x350>
	{
	  x = xa;
1000ff50:	e0bff817 	ldw	r2,-32(fp)
1000ff54:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
1000ff58:	e0bff317 	ldw	r2,-52(fp)
1000ff5c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
1000ff60:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
1000ff64:	e0bff217 	ldw	r2,-56(fp)
1000ff68:	10800017 	ldw	r2,0(r2)
1000ff6c:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
1000ff70:	e0bff017 	ldw	r2,-64(fp)
1000ff74:	10800017 	ldw	r2,0(r2)
1000ff78:	10bfffcc 	andi	r2,r2,65535
1000ff7c:	e17ffb17 	ldw	r5,-20(fp)
1000ff80:	1009883a 	mov	r4,r2
1000ff84:	0005a080 	call	10005a08 <__mulsi3>
1000ff88:	1007883a 	mov	r3,r2
1000ff8c:	e0bff217 	ldw	r2,-56(fp)
1000ff90:	10800017 	ldw	r2,0(r2)
1000ff94:	1004d43a 	srli	r2,r2,16
1000ff98:	1887883a 	add	r3,r3,r2
1000ff9c:	e0bfef17 	ldw	r2,-68(fp)
1000ffa0:	1885883a 	add	r2,r3,r2
1000ffa4:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
1000ffa8:	e0bffc17 	ldw	r2,-16(fp)
1000ffac:	1004d43a 	srli	r2,r2,16
1000ffb0:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
1000ffb4:	e0bff217 	ldw	r2,-56(fp)
1000ffb8:	10c00104 	addi	r3,r2,4
1000ffbc:	e0fff215 	stw	r3,-56(fp)
1000ffc0:	e0fffc17 	ldw	r3,-16(fp)
1000ffc4:	1808943a 	slli	r4,r3,16
1000ffc8:	e0fff417 	ldw	r3,-48(fp)
1000ffcc:	18ffffcc 	andi	r3,r3,65535
1000ffd0:	20c6b03a 	or	r3,r4,r3
1000ffd4:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
1000ffd8:	e0bff017 	ldw	r2,-64(fp)
1000ffdc:	10c00104 	addi	r3,r2,4
1000ffe0:	e0fff015 	stw	r3,-64(fp)
1000ffe4:	10800017 	ldw	r2,0(r2)
1000ffe8:	1004d43a 	srli	r2,r2,16
1000ffec:	e17ffb17 	ldw	r5,-20(fp)
1000fff0:	1009883a 	mov	r4,r2
1000fff4:	0005a080 	call	10005a08 <__mulsi3>
1000fff8:	1007883a 	mov	r3,r2
1000fffc:	e0bff217 	ldw	r2,-56(fp)
10010000:	10800017 	ldw	r2,0(r2)
10010004:	10bfffcc 	andi	r2,r2,65535
10010008:	1887883a 	add	r3,r3,r2
1001000c:	e0bfef17 	ldw	r2,-68(fp)
10010010:	1885883a 	add	r2,r3,r2
10010014:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
10010018:	e0bff417 	ldw	r2,-48(fp)
1001001c:	1004d43a 	srli	r2,r2,16
10010020:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
10010024:	e0fff017 	ldw	r3,-64(fp)
10010028:	e0bff917 	ldw	r2,-28(fp)
1001002c:	18bfd036 	bltu	r3,r2,1000ff70 <__alt_data_end+0xf800ff70>
	  *xc = z2;
10010030:	e0bff217 	ldw	r2,-56(fp)
10010034:	e0fff417 	ldw	r3,-48(fp)
10010038:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
1001003c:	e0bff117 	ldw	r2,-60(fp)
10010040:	10800104 	addi	r2,r2,4
10010044:	e0bff115 	stw	r2,-60(fp)
10010048:	e0bff317 	ldw	r2,-52(fp)
1001004c:	10800104 	addi	r2,r2,4
10010050:	e0bff315 	stw	r2,-52(fp)
10010054:	e0fff117 	ldw	r3,-60(fp)
10010058:	e0bffa17 	ldw	r2,-24(fp)
1001005c:	18bf7836 	bltu	r3,r2,1000fe40 <__alt_data_end+0xf800fe40>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
10010060:	e0bff517 	ldw	r2,-44(fp)
10010064:	10800504 	addi	r2,r2,20
10010068:	e0bff315 	stw	r2,-52(fp)
1001006c:	e0bfee17 	ldw	r2,-72(fp)
10010070:	1085883a 	add	r2,r2,r2
10010074:	1085883a 	add	r2,r2,r2
10010078:	1007883a 	mov	r3,r2
1001007c:	e0bff317 	ldw	r2,-52(fp)
10010080:	10c5883a 	add	r2,r2,r3
10010084:	e0bff215 	stw	r2,-56(fp)
10010088:	00000306 	br	10010098 <__multiply+0x3ac>
1001008c:	e0bfee17 	ldw	r2,-72(fp)
10010090:	10bfffc4 	addi	r2,r2,-1
10010094:	e0bfee15 	stw	r2,-72(fp)
10010098:	e0bfee17 	ldw	r2,-72(fp)
1001009c:	0080060e 	bge	zero,r2,100100b8 <__multiply+0x3cc>
100100a0:	e0bff217 	ldw	r2,-56(fp)
100100a4:	10bfff04 	addi	r2,r2,-4
100100a8:	e0bff215 	stw	r2,-56(fp)
100100ac:	e0bff217 	ldw	r2,-56(fp)
100100b0:	10800017 	ldw	r2,0(r2)
100100b4:	103ff526 	beq	r2,zero,1001008c <__alt_data_end+0xf801008c>
  c->_wds = wc;
100100b8:	e0bff517 	ldw	r2,-44(fp)
100100bc:	e0ffee17 	ldw	r3,-72(fp)
100100c0:	10c00415 	stw	r3,16(r2)
  return c;
100100c4:	e0bff517 	ldw	r2,-44(fp)
}
100100c8:	e037883a 	mov	sp,fp
100100cc:	dfc00117 	ldw	ra,4(sp)
100100d0:	df000017 	ldw	fp,0(sp)
100100d4:	dec00204 	addi	sp,sp,8
100100d8:	f800283a 	ret

100100dc <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
100100dc:	defff704 	addi	sp,sp,-36
100100e0:	dfc00815 	stw	ra,32(sp)
100100e4:	df000715 	stw	fp,28(sp)
100100e8:	df000704 	addi	fp,sp,28
100100ec:	e13ffd15 	stw	r4,-12(fp)
100100f0:	e17ffe15 	stw	r5,-8(fp)
100100f4:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
100100f8:	e0bfff17 	ldw	r2,-4(fp)
100100fc:	108000cc 	andi	r2,r2,3
10010100:	e0bffb15 	stw	r2,-20(fp)
10010104:	e0bffb17 	ldw	r2,-20(fp)
10010108:	10000e26 	beq	r2,zero,10010144 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
1001010c:	e0bffb17 	ldw	r2,-20(fp)
10010110:	10ffffc4 	addi	r3,r2,-1
10010114:	00840374 	movhi	r2,4109
10010118:	10be2704 	addi	r2,r2,-1892
1001011c:	18c7883a 	add	r3,r3,r3
10010120:	18c7883a 	add	r3,r3,r3
10010124:	10c5883a 	add	r2,r2,r3
10010128:	10800017 	ldw	r2,0(r2)
1001012c:	000f883a 	mov	r7,zero
10010130:	100d883a 	mov	r6,r2
10010134:	e17ffe17 	ldw	r5,-8(fp)
10010138:	e13ffd17 	ldw	r4,-12(fp)
1001013c:	000f7e00 	call	1000f7e0 <__multadd>
10010140:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
10010144:	e0bfff17 	ldw	r2,-4(fp)
10010148:	1005d0ba 	srai	r2,r2,2
1001014c:	e0bfff15 	stw	r2,-4(fp)
10010150:	e0bfff17 	ldw	r2,-4(fp)
10010154:	1000021e 	bne	r2,zero,10010160 <__pow5mult+0x84>
    return b;
10010158:	e0bffe17 	ldw	r2,-8(fp)
1001015c:	00003806 	br	10010240 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
10010160:	e0bffd17 	ldw	r2,-12(fp)
10010164:	10801217 	ldw	r2,72(r2)
10010168:	e0bff915 	stw	r2,-28(fp)
1001016c:	e0bff917 	ldw	r2,-28(fp)
10010170:	10000b1e 	bne	r2,zero,100101a0 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
10010174:	01409c44 	movi	r5,625
10010178:	e13ffd17 	ldw	r4,-12(fp)
1001017c:	000fc940 	call	1000fc94 <__i2b>
10010180:	1007883a 	mov	r3,r2
10010184:	e0bffd17 	ldw	r2,-12(fp)
10010188:	10c01215 	stw	r3,72(r2)
1001018c:	e0bffd17 	ldw	r2,-12(fp)
10010190:	10801217 	ldw	r2,72(r2)
10010194:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
10010198:	e0bff917 	ldw	r2,-28(fp)
1001019c:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
100101a0:	e0bfff17 	ldw	r2,-4(fp)
100101a4:	1080004c 	andi	r2,r2,1
100101a8:	10000a26 	beq	r2,zero,100101d4 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
100101ac:	e1bff917 	ldw	r6,-28(fp)
100101b0:	e17ffe17 	ldw	r5,-8(fp)
100101b4:	e13ffd17 	ldw	r4,-12(fp)
100101b8:	000fcec0 	call	1000fcec <__multiply>
100101bc:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
100101c0:	e17ffe17 	ldw	r5,-8(fp)
100101c4:	e13ffd17 	ldw	r4,-12(fp)
100101c8:	000f7640 	call	1000f764 <_Bfree>
	  b = b1;
100101cc:	e0bffc17 	ldw	r2,-16(fp)
100101d0:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
100101d4:	e0bfff17 	ldw	r2,-4(fp)
100101d8:	1005d07a 	srai	r2,r2,1
100101dc:	e0bfff15 	stw	r2,-4(fp)
100101e0:	e0bfff17 	ldw	r2,-4(fp)
100101e4:	10001426 	beq	r2,zero,10010238 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
100101e8:	e0bff917 	ldw	r2,-28(fp)
100101ec:	10800017 	ldw	r2,0(r2)
100101f0:	e0bffa15 	stw	r2,-24(fp)
100101f4:	e0bffa17 	ldw	r2,-24(fp)
100101f8:	10000c1e 	bne	r2,zero,1001022c <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
100101fc:	e1bff917 	ldw	r6,-28(fp)
10010200:	e17ff917 	ldw	r5,-28(fp)
10010204:	e13ffd17 	ldw	r4,-12(fp)
10010208:	000fcec0 	call	1000fcec <__multiply>
1001020c:	1007883a 	mov	r3,r2
10010210:	e0bff917 	ldw	r2,-28(fp)
10010214:	10c00015 	stw	r3,0(r2)
10010218:	e0bff917 	ldw	r2,-28(fp)
1001021c:	10800017 	ldw	r2,0(r2)
10010220:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
10010224:	e0bffa17 	ldw	r2,-24(fp)
10010228:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
1001022c:	e0bffa17 	ldw	r2,-24(fp)
10010230:	e0bff915 	stw	r2,-28(fp)
    }
10010234:	003fda06 	br	100101a0 <__alt_data_end+0xf80101a0>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
10010238:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
1001023c:	e0bffe17 	ldw	r2,-8(fp)
}
10010240:	e037883a 	mov	sp,fp
10010244:	dfc00117 	ldw	ra,4(sp)
10010248:	df000017 	ldw	fp,0(sp)
1001024c:	dec00204 	addi	sp,sp,8
10010250:	f800283a 	ret

10010254 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
10010254:	defff204 	addi	sp,sp,-56
10010258:	dfc00d15 	stw	ra,52(sp)
1001025c:	df000c15 	stw	fp,48(sp)
10010260:	df000c04 	addi	fp,sp,48
10010264:	e13ffd15 	stw	r4,-12(fp)
10010268:	e17ffe15 	stw	r5,-8(fp)
1001026c:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
10010270:	e0bfff17 	ldw	r2,-4(fp)
10010274:	1005d17a 	srai	r2,r2,5
10010278:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
1001027c:	e0bffe17 	ldw	r2,-8(fp)
10010280:	10800117 	ldw	r2,4(r2)
10010284:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
10010288:	e0bffe17 	ldw	r2,-8(fp)
1001028c:	10c00417 	ldw	r3,16(r2)
10010290:	e0bffa17 	ldw	r2,-24(fp)
10010294:	1885883a 	add	r2,r3,r2
10010298:	10800044 	addi	r2,r2,1
1001029c:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
100102a0:	e0bffe17 	ldw	r2,-8(fp)
100102a4:	10800217 	ldw	r2,8(r2)
100102a8:	e0bff415 	stw	r2,-48(fp)
100102ac:	00000606 	br	100102c8 <__lshift+0x74>
    k1++;
100102b0:	e0bff517 	ldw	r2,-44(fp)
100102b4:	10800044 	addi	r2,r2,1
100102b8:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
100102bc:	e0bff417 	ldw	r2,-48(fp)
100102c0:	1085883a 	add	r2,r2,r2
100102c4:	e0bff415 	stw	r2,-48(fp)
100102c8:	e0bff617 	ldw	r2,-40(fp)
100102cc:	e0fff417 	ldw	r3,-48(fp)
100102d0:	18bff716 	blt	r3,r2,100102b0 <__alt_data_end+0xf80102b0>
    k1++;
  b1 = Balloc (ptr, k1);
100102d4:	e17ff517 	ldw	r5,-44(fp)
100102d8:	e13ffd17 	ldw	r4,-12(fp)
100102dc:	000f6340 	call	1000f634 <_Balloc>
100102e0:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
100102e4:	e0bffb17 	ldw	r2,-20(fp)
100102e8:	10800504 	addi	r2,r2,20
100102ec:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
100102f0:	e03ff415 	stw	zero,-48(fp)
100102f4:	00000706 	br	10010314 <__lshift+0xc0>
    *x1++ = 0;
100102f8:	e0bff817 	ldw	r2,-32(fp)
100102fc:	10c00104 	addi	r3,r2,4
10010300:	e0fff815 	stw	r3,-32(fp)
10010304:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
10010308:	e0bff417 	ldw	r2,-48(fp)
1001030c:	10800044 	addi	r2,r2,1
10010310:	e0bff415 	stw	r2,-48(fp)
10010314:	e0fff417 	ldw	r3,-48(fp)
10010318:	e0bffa17 	ldw	r2,-24(fp)
1001031c:	18bff616 	blt	r3,r2,100102f8 <__alt_data_end+0xf80102f8>
    *x1++ = 0;
  x = b->_x;
10010320:	e0bffe17 	ldw	r2,-8(fp)
10010324:	10800504 	addi	r2,r2,20
10010328:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
1001032c:	e0bffe17 	ldw	r2,-8(fp)
10010330:	10800417 	ldw	r2,16(r2)
10010334:	1085883a 	add	r2,r2,r2
10010338:	1085883a 	add	r2,r2,r2
1001033c:	1007883a 	mov	r3,r2
10010340:	e0bff717 	ldw	r2,-36(fp)
10010344:	10c5883a 	add	r2,r2,r3
10010348:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
1001034c:	e0bfff17 	ldw	r2,-4(fp)
10010350:	108007cc 	andi	r2,r2,31
10010354:	e0bfff15 	stw	r2,-4(fp)
10010358:	e0bfff17 	ldw	r2,-4(fp)
1001035c:	10002326 	beq	r2,zero,100103ec <__lshift+0x198>
    {
      k1 = 32 - k;
10010360:	00c00804 	movi	r3,32
10010364:	e0bfff17 	ldw	r2,-4(fp)
10010368:	1885c83a 	sub	r2,r3,r2
1001036c:	e0bff515 	stw	r2,-44(fp)
      z = 0;
10010370:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
10010374:	e0bff817 	ldw	r2,-32(fp)
10010378:	10c00104 	addi	r3,r2,4
1001037c:	e0fff815 	stw	r3,-32(fp)
10010380:	e0fff717 	ldw	r3,-36(fp)
10010384:	19000017 	ldw	r4,0(r3)
10010388:	e0ffff17 	ldw	r3,-4(fp)
1001038c:	20c8983a 	sll	r4,r4,r3
10010390:	e0fff917 	ldw	r3,-28(fp)
10010394:	20c6b03a 	or	r3,r4,r3
10010398:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
1001039c:	e0bff717 	ldw	r2,-36(fp)
100103a0:	10c00104 	addi	r3,r2,4
100103a4:	e0fff715 	stw	r3,-36(fp)
100103a8:	10c00017 	ldw	r3,0(r2)
100103ac:	e0bff517 	ldw	r2,-44(fp)
100103b0:	1884d83a 	srl	r2,r3,r2
100103b4:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
100103b8:	e0fff717 	ldw	r3,-36(fp)
100103bc:	e0bffc17 	ldw	r2,-16(fp)
100103c0:	18bfec36 	bltu	r3,r2,10010374 <__alt_data_end+0xf8010374>
      if ((*x1 = z) != 0)
100103c4:	e0bff817 	ldw	r2,-32(fp)
100103c8:	e0fff917 	ldw	r3,-28(fp)
100103cc:	10c00015 	stw	r3,0(r2)
100103d0:	e0bff817 	ldw	r2,-32(fp)
100103d4:	10800017 	ldw	r2,0(r2)
100103d8:	10000f26 	beq	r2,zero,10010418 <__lshift+0x1c4>
	++n1;
100103dc:	e0bff617 	ldw	r2,-40(fp)
100103e0:	10800044 	addi	r2,r2,1
100103e4:	e0bff615 	stw	r2,-40(fp)
100103e8:	00000b06 	br	10010418 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
100103ec:	e0bff817 	ldw	r2,-32(fp)
100103f0:	10c00104 	addi	r3,r2,4
100103f4:	e0fff815 	stw	r3,-32(fp)
100103f8:	e0fff717 	ldw	r3,-36(fp)
100103fc:	19000104 	addi	r4,r3,4
10010400:	e13ff715 	stw	r4,-36(fp)
10010404:	18c00017 	ldw	r3,0(r3)
10010408:	10c00015 	stw	r3,0(r2)
    while (x < xe);
1001040c:	e0fff717 	ldw	r3,-36(fp)
10010410:	e0bffc17 	ldw	r2,-16(fp)
10010414:	18bff536 	bltu	r3,r2,100103ec <__alt_data_end+0xf80103ec>
  b1->_wds = n1 - 1;
10010418:	e0bff617 	ldw	r2,-40(fp)
1001041c:	10ffffc4 	addi	r3,r2,-1
10010420:	e0bffb17 	ldw	r2,-20(fp)
10010424:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
10010428:	e17ffe17 	ldw	r5,-8(fp)
1001042c:	e13ffd17 	ldw	r4,-12(fp)
10010430:	000f7640 	call	1000f764 <_Bfree>
  return b1;
10010434:	e0bffb17 	ldw	r2,-20(fp)
}
10010438:	e037883a 	mov	sp,fp
1001043c:	dfc00117 	ldw	ra,4(sp)
10010440:	df000017 	ldw	fp,0(sp)
10010444:	dec00204 	addi	sp,sp,8
10010448:	f800283a 	ret

1001044c <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
1001044c:	defff704 	addi	sp,sp,-36
10010450:	df000815 	stw	fp,32(sp)
10010454:	df000804 	addi	fp,sp,32
10010458:	e13ffe15 	stw	r4,-8(fp)
1001045c:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
10010460:	e0bffe17 	ldw	r2,-8(fp)
10010464:	10800417 	ldw	r2,16(r2)
10010468:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
1001046c:	e0bfff17 	ldw	r2,-4(fp)
10010470:	10800417 	ldw	r2,16(r2)
10010474:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
10010478:	e0fffa17 	ldw	r3,-24(fp)
1001047c:	e0bffb17 	ldw	r2,-20(fp)
10010480:	1885c83a 	sub	r2,r3,r2
10010484:	e0bffa15 	stw	r2,-24(fp)
10010488:	e0bffa17 	ldw	r2,-24(fp)
1001048c:	10000226 	beq	r2,zero,10010498 <__mcmp+0x4c>
    return i;
10010490:	e0bffa17 	ldw	r2,-24(fp)
10010494:	00002e06 	br	10010550 <__mcmp+0x104>
  xa0 = a->_x;
10010498:	e0bffe17 	ldw	r2,-8(fp)
1001049c:	10800504 	addi	r2,r2,20
100104a0:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
100104a4:	e0bffb17 	ldw	r2,-20(fp)
100104a8:	1085883a 	add	r2,r2,r2
100104ac:	1085883a 	add	r2,r2,r2
100104b0:	1007883a 	mov	r3,r2
100104b4:	e0bffc17 	ldw	r2,-16(fp)
100104b8:	10c5883a 	add	r2,r2,r3
100104bc:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
100104c0:	e0bfff17 	ldw	r2,-4(fp)
100104c4:	10800504 	addi	r2,r2,20
100104c8:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
100104cc:	e0bffb17 	ldw	r2,-20(fp)
100104d0:	1085883a 	add	r2,r2,r2
100104d4:	1085883a 	add	r2,r2,r2
100104d8:	1007883a 	mov	r3,r2
100104dc:	e0bffd17 	ldw	r2,-12(fp)
100104e0:	10c5883a 	add	r2,r2,r3
100104e4:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
100104e8:	e0bff817 	ldw	r2,-32(fp)
100104ec:	10bfff04 	addi	r2,r2,-4
100104f0:	e0bff815 	stw	r2,-32(fp)
100104f4:	e0bff817 	ldw	r2,-32(fp)
100104f8:	10c00017 	ldw	r3,0(r2)
100104fc:	e0bff917 	ldw	r2,-28(fp)
10010500:	10bfff04 	addi	r2,r2,-4
10010504:	e0bff915 	stw	r2,-28(fp)
10010508:	e0bff917 	ldw	r2,-28(fp)
1001050c:	10800017 	ldw	r2,0(r2)
10010510:	18800926 	beq	r3,r2,10010538 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
10010514:	e0bff817 	ldw	r2,-32(fp)
10010518:	10c00017 	ldw	r3,0(r2)
1001051c:	e0bff917 	ldw	r2,-28(fp)
10010520:	10800017 	ldw	r2,0(r2)
10010524:	1880022e 	bgeu	r3,r2,10010530 <__mcmp+0xe4>
10010528:	00bfffc4 	movi	r2,-1
1001052c:	00000806 	br	10010550 <__mcmp+0x104>
10010530:	00800044 	movi	r2,1
10010534:	00000606 	br	10010550 <__mcmp+0x104>
      if (xa <= xa0)
10010538:	e0bff817 	ldw	r2,-32(fp)
1001053c:	e0fffc17 	ldw	r3,-16(fp)
10010540:	1880012e 	bgeu	r3,r2,10010548 <__mcmp+0xfc>
	break;
    }
10010544:	003fe806 	br	100104e8 <__alt_data_end+0xf80104e8>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
10010548:	0001883a 	nop
    }
  return 0;
1001054c:	0005883a 	mov	r2,zero
}
10010550:	e037883a 	mov	sp,fp
10010554:	df000017 	ldw	fp,0(sp)
10010558:	dec00104 	addi	sp,sp,4
1001055c:	f800283a 	ret

10010560 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
10010560:	deffef04 	addi	sp,sp,-68
10010564:	dfc01015 	stw	ra,64(sp)
10010568:	df000f15 	stw	fp,60(sp)
1001056c:	df000f04 	addi	fp,sp,60
10010570:	e13ffd15 	stw	r4,-12(fp)
10010574:	e17ffe15 	stw	r5,-8(fp)
10010578:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
1001057c:	e17fff17 	ldw	r5,-4(fp)
10010580:	e13ffe17 	ldw	r4,-8(fp)
10010584:	001044c0 	call	1001044c <__mcmp>
10010588:	e0bff115 	stw	r2,-60(fp)
  if (!i)
1001058c:	e0bff117 	ldw	r2,-60(fp)
10010590:	10000b1e 	bne	r2,zero,100105c0 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
10010594:	000b883a 	mov	r5,zero
10010598:	e13ffd17 	ldw	r4,-12(fp)
1001059c:	000f6340 	call	1000f634 <_Balloc>
100105a0:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
100105a4:	e0bff717 	ldw	r2,-36(fp)
100105a8:	00c00044 	movi	r3,1
100105ac:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
100105b0:	e0bff717 	ldw	r2,-36(fp)
100105b4:	10000515 	stw	zero,20(r2)
      return c;
100105b8:	e0bff717 	ldw	r2,-36(fp)
100105bc:	00008c06 	br	100107f0 <__mdiff+0x290>
    }
  if (i < 0)
100105c0:	e0bff117 	ldw	r2,-60(fp)
100105c4:	1000090e 	bge	r2,zero,100105ec <__mdiff+0x8c>
    {
      c = a;
100105c8:	e0bffe17 	ldw	r2,-8(fp)
100105cc:	e0bff715 	stw	r2,-36(fp)
      a = b;
100105d0:	e0bfff17 	ldw	r2,-4(fp)
100105d4:	e0bffe15 	stw	r2,-8(fp)
      b = c;
100105d8:	e0bff717 	ldw	r2,-36(fp)
100105dc:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
100105e0:	00800044 	movi	r2,1
100105e4:	e0bff115 	stw	r2,-60(fp)
100105e8:	00000106 	br	100105f0 <__mdiff+0x90>
    }
  else
    i = 0;
100105ec:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
100105f0:	e0bffe17 	ldw	r2,-8(fp)
100105f4:	10800117 	ldw	r2,4(r2)
100105f8:	100b883a 	mov	r5,r2
100105fc:	e13ffd17 	ldw	r4,-12(fp)
10010600:	000f6340 	call	1000f634 <_Balloc>
10010604:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
10010608:	e0bff717 	ldw	r2,-36(fp)
1001060c:	e0fff117 	ldw	r3,-60(fp)
10010610:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
10010614:	e0bffe17 	ldw	r2,-8(fp)
10010618:	10800417 	ldw	r2,16(r2)
1001061c:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
10010620:	e0bffe17 	ldw	r2,-8(fp)
10010624:	10800504 	addi	r2,r2,20
10010628:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
1001062c:	e0bff217 	ldw	r2,-56(fp)
10010630:	1085883a 	add	r2,r2,r2
10010634:	1085883a 	add	r2,r2,r2
10010638:	1007883a 	mov	r3,r2
1001063c:	e0bff417 	ldw	r2,-48(fp)
10010640:	10c5883a 	add	r2,r2,r3
10010644:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
10010648:	e0bfff17 	ldw	r2,-4(fp)
1001064c:	10800417 	ldw	r2,16(r2)
10010650:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
10010654:	e0bfff17 	ldw	r2,-4(fp)
10010658:	10800504 	addi	r2,r2,20
1001065c:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
10010660:	e0bff917 	ldw	r2,-28(fp)
10010664:	1085883a 	add	r2,r2,r2
10010668:	1085883a 	add	r2,r2,r2
1001066c:	1007883a 	mov	r3,r2
10010670:	e0bff517 	ldw	r2,-44(fp)
10010674:	10c5883a 	add	r2,r2,r3
10010678:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
1001067c:	e0bff717 	ldw	r2,-36(fp)
10010680:	10800504 	addi	r2,r2,20
10010684:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
10010688:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
1001068c:	e0bff417 	ldw	r2,-48(fp)
10010690:	10800017 	ldw	r2,0(r2)
10010694:	10ffffcc 	andi	r3,r2,65535
10010698:	e0bff517 	ldw	r2,-44(fp)
1001069c:	10800017 	ldw	r2,0(r2)
100106a0:	10bfffcc 	andi	r2,r2,65535
100106a4:	1887c83a 	sub	r3,r3,r2
100106a8:	e0bff317 	ldw	r2,-52(fp)
100106ac:	1885883a 	add	r2,r3,r2
100106b0:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
100106b4:	e0bffb17 	ldw	r2,-20(fp)
100106b8:	1005d43a 	srai	r2,r2,16
100106bc:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
100106c0:	e0bff417 	ldw	r2,-48(fp)
100106c4:	10c00104 	addi	r3,r2,4
100106c8:	e0fff415 	stw	r3,-48(fp)
100106cc:	10800017 	ldw	r2,0(r2)
100106d0:	1006d43a 	srli	r3,r2,16
100106d4:	e0bff517 	ldw	r2,-44(fp)
100106d8:	11000104 	addi	r4,r2,4
100106dc:	e13ff515 	stw	r4,-44(fp)
100106e0:	10800017 	ldw	r2,0(r2)
100106e4:	1004d43a 	srli	r2,r2,16
100106e8:	1887c83a 	sub	r3,r3,r2
100106ec:	e0bff317 	ldw	r2,-52(fp)
100106f0:	1885883a 	add	r2,r3,r2
100106f4:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
100106f8:	e0bffc17 	ldw	r2,-16(fp)
100106fc:	1005d43a 	srai	r2,r2,16
10010700:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
10010704:	e0bff617 	ldw	r2,-40(fp)
10010708:	10c00104 	addi	r3,r2,4
1001070c:	e0fff615 	stw	r3,-40(fp)
10010710:	e0fffc17 	ldw	r3,-16(fp)
10010714:	1808943a 	slli	r4,r3,16
10010718:	e0fffb17 	ldw	r3,-20(fp)
1001071c:	18ffffcc 	andi	r3,r3,65535
10010720:	20c6b03a 	or	r3,r4,r3
10010724:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
10010728:	e0fff517 	ldw	r3,-44(fp)
1001072c:	e0bffa17 	ldw	r2,-24(fp)
10010730:	18bfd636 	bltu	r3,r2,1001068c <__alt_data_end+0xf801068c>
  while (xa < xae)
10010734:	00001d06 	br	100107ac <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
10010738:	e0bff417 	ldw	r2,-48(fp)
1001073c:	10800017 	ldw	r2,0(r2)
10010740:	10ffffcc 	andi	r3,r2,65535
10010744:	e0bff317 	ldw	r2,-52(fp)
10010748:	1885883a 	add	r2,r3,r2
1001074c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
10010750:	e0bffb17 	ldw	r2,-20(fp)
10010754:	1005d43a 	srai	r2,r2,16
10010758:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
1001075c:	e0bff417 	ldw	r2,-48(fp)
10010760:	10c00104 	addi	r3,r2,4
10010764:	e0fff415 	stw	r3,-48(fp)
10010768:	10800017 	ldw	r2,0(r2)
1001076c:	1006d43a 	srli	r3,r2,16
10010770:	e0bff317 	ldw	r2,-52(fp)
10010774:	1885883a 	add	r2,r3,r2
10010778:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
1001077c:	e0bffc17 	ldw	r2,-16(fp)
10010780:	1005d43a 	srai	r2,r2,16
10010784:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
10010788:	e0bff617 	ldw	r2,-40(fp)
1001078c:	10c00104 	addi	r3,r2,4
10010790:	e0fff615 	stw	r3,-40(fp)
10010794:	e0fffc17 	ldw	r3,-16(fp)
10010798:	1808943a 	slli	r4,r3,16
1001079c:	e0fffb17 	ldw	r3,-20(fp)
100107a0:	18ffffcc 	andi	r3,r3,65535
100107a4:	20c6b03a 	or	r3,r4,r3
100107a8:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
100107ac:	e0fff417 	ldw	r3,-48(fp)
100107b0:	e0bff817 	ldw	r2,-32(fp)
100107b4:	18bfe036 	bltu	r3,r2,10010738 <__alt_data_end+0xf8010738>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
100107b8:	00000306 	br	100107c8 <__mdiff+0x268>
    wa--;
100107bc:	e0bff217 	ldw	r2,-56(fp)
100107c0:	10bfffc4 	addi	r2,r2,-1
100107c4:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
100107c8:	e0bff617 	ldw	r2,-40(fp)
100107cc:	10bfff04 	addi	r2,r2,-4
100107d0:	e0bff615 	stw	r2,-40(fp)
100107d4:	e0bff617 	ldw	r2,-40(fp)
100107d8:	10800017 	ldw	r2,0(r2)
100107dc:	103ff726 	beq	r2,zero,100107bc <__alt_data_end+0xf80107bc>
    wa--;
  c->_wds = wa;
100107e0:	e0bff717 	ldw	r2,-36(fp)
100107e4:	e0fff217 	ldw	r3,-56(fp)
100107e8:	10c00415 	stw	r3,16(r2)
  return c;
100107ec:	e0bff717 	ldw	r2,-36(fp)
}
100107f0:	e037883a 	mov	sp,fp
100107f4:	dfc00117 	ldw	ra,4(sp)
100107f8:	df000017 	ldw	fp,0(sp)
100107fc:	dec00204 	addi	sp,sp,8
10010800:	f800283a 	ret

10010804 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
10010804:	defff804 	addi	sp,sp,-32
10010808:	df000715 	stw	fp,28(sp)
1001080c:	dc000615 	stw	r16,24(sp)
10010810:	df000704 	addi	fp,sp,28
10010814:	e13ffd15 	stw	r4,-12(fp)
10010818:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
1001081c:	e0bffd17 	ldw	r2,-12(fp)
10010820:	e0bff915 	stw	r2,-28(fp)
10010824:	e0bffe17 	ldw	r2,-8(fp)
10010828:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
1001082c:	e0bffa17 	ldw	r2,-24(fp)
10010830:	10dffc2c 	andhi	r3,r2,32752
10010834:	00bf3034 	movhi	r2,64704
10010838:	1885883a 	add	r2,r3,r2
1001083c:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
10010840:	0400040e 	bge	zero,r16,10010854 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
10010844:	8005883a 	mov	r2,r16
10010848:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
1001084c:	e03ffb15 	stw	zero,-20(fp)
10010850:	00001406 	br	100108a4 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
10010854:	0405c83a 	sub	r2,zero,r16
10010858:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
1001085c:	80800508 	cmpgei	r2,r16,20
10010860:	1000051e 	bne	r2,zero,10010878 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
10010864:	00800234 	movhi	r2,8
10010868:	1405d83a 	sra	r2,r2,r16
1001086c:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
10010870:	e03ffb15 	stw	zero,-20(fp)
10010874:	00000b06 	br	100108a4 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
10010878:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
1001087c:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
10010880:	808007c8 	cmpgei	r2,r16,31
10010884:	1000051e 	bne	r2,zero,1001089c <__ulp+0x98>
10010888:	008007c4 	movi	r2,31
1001088c:	1405c83a 	sub	r2,r2,r16
10010890:	00c00044 	movi	r3,1
10010894:	1884983a 	sll	r2,r3,r2
10010898:	00000106 	br	100108a0 <__ulp+0x9c>
1001089c:	00800044 	movi	r2,1
100108a0:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
100108a4:	e0bffb17 	ldw	r2,-20(fp)
100108a8:	e0fffc17 	ldw	r3,-16(fp)
100108ac:	1009883a 	mov	r4,r2
100108b0:	180b883a 	mov	r5,r3
}
100108b4:	2005883a 	mov	r2,r4
100108b8:	2807883a 	mov	r3,r5
100108bc:	e6ffff04 	addi	sp,fp,-4
100108c0:	df000117 	ldw	fp,4(sp)
100108c4:	dc000017 	ldw	r16,0(sp)
100108c8:	dec00204 	addi	sp,sp,8
100108cc:	f800283a 	ret

100108d0 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
100108d0:	defff404 	addi	sp,sp,-48
100108d4:	dfc00b15 	stw	ra,44(sp)
100108d8:	df000a15 	stw	fp,40(sp)
100108dc:	df000a04 	addi	fp,sp,40
100108e0:	e13ffe15 	stw	r4,-8(fp)
100108e4:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
100108e8:	e0bffe17 	ldw	r2,-8(fp)
100108ec:	10800504 	addi	r2,r2,20
100108f0:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
100108f4:	e0bffe17 	ldw	r2,-8(fp)
100108f8:	10800417 	ldw	r2,16(r2)
100108fc:	1085883a 	add	r2,r2,r2
10010900:	1085883a 	add	r2,r2,r2
10010904:	1007883a 	mov	r3,r2
10010908:	e0bff717 	ldw	r2,-36(fp)
1001090c:	10c5883a 	add	r2,r2,r3
10010910:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
10010914:	e0bff617 	ldw	r2,-40(fp)
10010918:	10bfff04 	addi	r2,r2,-4
1001091c:	e0bff615 	stw	r2,-40(fp)
10010920:	e0bff617 	ldw	r2,-40(fp)
10010924:	10800017 	ldw	r2,0(r2)
10010928:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
1001092c:	e13ff817 	ldw	r4,-32(fp)
10010930:	000fb180 	call	1000fb18 <__hi0bits>
10010934:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
10010938:	00c00804 	movi	r3,32
1001093c:	e0bff917 	ldw	r2,-28(fp)
10010940:	1887c83a 	sub	r3,r3,r2
10010944:	e0bfff17 	ldw	r2,-4(fp)
10010948:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
1001094c:	e0bff917 	ldw	r2,-28(fp)
10010950:	108002c8 	cmpgei	r2,r2,11
10010954:	10001e1e 	bne	r2,zero,100109d0 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
10010958:	00c002c4 	movi	r3,11
1001095c:	e0bff917 	ldw	r2,-28(fp)
10010960:	1885c83a 	sub	r2,r3,r2
10010964:	e0fff817 	ldw	r3,-32(fp)
10010968:	1884d83a 	srl	r2,r3,r2
1001096c:	108ffc34 	orhi	r2,r2,16368
10010970:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
10010974:	e0bff617 	ldw	r2,-40(fp)
10010978:	e0fff717 	ldw	r3,-36(fp)
1001097c:	1880062e 	bgeu	r3,r2,10010998 <__b2d+0xc8>
10010980:	e0bff617 	ldw	r2,-40(fp)
10010984:	10bfff04 	addi	r2,r2,-4
10010988:	e0bff615 	stw	r2,-40(fp)
1001098c:	e0bff617 	ldw	r2,-40(fp)
10010990:	10800017 	ldw	r2,0(r2)
10010994:	00000106 	br	1001099c <__b2d+0xcc>
10010998:	0005883a 	mov	r2,zero
1001099c:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
100109a0:	e0bff917 	ldw	r2,-28(fp)
100109a4:	10800544 	addi	r2,r2,21
100109a8:	e0fff817 	ldw	r3,-32(fp)
100109ac:	1886983a 	sll	r3,r3,r2
100109b0:	010002c4 	movi	r4,11
100109b4:	e0bff917 	ldw	r2,-28(fp)
100109b8:	2085c83a 	sub	r2,r4,r2
100109bc:	e13ffa17 	ldw	r4,-24(fp)
100109c0:	2084d83a 	srl	r2,r4,r2
100109c4:	1884b03a 	or	r2,r3,r2
100109c8:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
100109cc:	00003606 	br	10010aa8 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
100109d0:	e0bff617 	ldw	r2,-40(fp)
100109d4:	e0fff717 	ldw	r3,-36(fp)
100109d8:	1880062e 	bgeu	r3,r2,100109f4 <__b2d+0x124>
100109dc:	e0bff617 	ldw	r2,-40(fp)
100109e0:	10bfff04 	addi	r2,r2,-4
100109e4:	e0bff615 	stw	r2,-40(fp)
100109e8:	e0bff617 	ldw	r2,-40(fp)
100109ec:	10800017 	ldw	r2,0(r2)
100109f0:	00000106 	br	100109f8 <__b2d+0x128>
100109f4:	0005883a 	mov	r2,zero
100109f8:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
100109fc:	e0bff917 	ldw	r2,-28(fp)
10010a00:	10bffd44 	addi	r2,r2,-11
10010a04:	e0bff915 	stw	r2,-28(fp)
10010a08:	e0bff917 	ldw	r2,-28(fp)
10010a0c:	10002126 	beq	r2,zero,10010a94 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
10010a10:	e0fff817 	ldw	r3,-32(fp)
10010a14:	e0bff917 	ldw	r2,-28(fp)
10010a18:	1886983a 	sll	r3,r3,r2
10010a1c:	01000804 	movi	r4,32
10010a20:	e0bff917 	ldw	r2,-28(fp)
10010a24:	2085c83a 	sub	r2,r4,r2
10010a28:	e13ffb17 	ldw	r4,-20(fp)
10010a2c:	2084d83a 	srl	r2,r4,r2
10010a30:	1884b03a 	or	r2,r3,r2
10010a34:	108ffc34 	orhi	r2,r2,16368
10010a38:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
10010a3c:	e0bff617 	ldw	r2,-40(fp)
10010a40:	e0fff717 	ldw	r3,-36(fp)
10010a44:	1880062e 	bgeu	r3,r2,10010a60 <__b2d+0x190>
10010a48:	e0bff617 	ldw	r2,-40(fp)
10010a4c:	10bfff04 	addi	r2,r2,-4
10010a50:	e0bff615 	stw	r2,-40(fp)
10010a54:	e0bff617 	ldw	r2,-40(fp)
10010a58:	10800017 	ldw	r2,0(r2)
10010a5c:	00000106 	br	10010a64 <__b2d+0x194>
10010a60:	0005883a 	mov	r2,zero
10010a64:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
10010a68:	e0fffb17 	ldw	r3,-20(fp)
10010a6c:	e0bff917 	ldw	r2,-28(fp)
10010a70:	1886983a 	sll	r3,r3,r2
10010a74:	01000804 	movi	r4,32
10010a78:	e0bff917 	ldw	r2,-28(fp)
10010a7c:	2085c83a 	sub	r2,r4,r2
10010a80:	e13ff817 	ldw	r4,-32(fp)
10010a84:	2084d83a 	srl	r2,r4,r2
10010a88:	1884b03a 	or	r2,r3,r2
10010a8c:	e0bffc15 	stw	r2,-16(fp)
10010a90:	00000506 	br	10010aa8 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
10010a94:	e0bff817 	ldw	r2,-32(fp)
10010a98:	108ffc34 	orhi	r2,r2,16368
10010a9c:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
10010aa0:	e0bffb17 	ldw	r2,-20(fp)
10010aa4:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
10010aa8:	e0bffc17 	ldw	r2,-16(fp)
10010aac:	e0fffd17 	ldw	r3,-12(fp)
10010ab0:	1009883a 	mov	r4,r2
10010ab4:	180b883a 	mov	r5,r3
}
10010ab8:	2005883a 	mov	r2,r4
10010abc:	2807883a 	mov	r3,r5
10010ac0:	e037883a 	mov	sp,fp
10010ac4:	dfc00117 	ldw	ra,4(sp)
10010ac8:	df000017 	ldw	fp,0(sp)
10010acc:	dec00204 	addi	sp,sp,8
10010ad0:	f800283a 	ret

10010ad4 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
10010ad4:	defff004 	addi	sp,sp,-64
10010ad8:	dfc00f15 	stw	ra,60(sp)
10010adc:	df000e15 	stw	fp,56(sp)
10010ae0:	dc000d15 	stw	r16,52(sp)
10010ae4:	df000e04 	addi	fp,sp,56
10010ae8:	e13ffb15 	stw	r4,-20(fp)
10010aec:	e17ffc15 	stw	r5,-16(fp)
10010af0:	e1bffd15 	stw	r6,-12(fp)
10010af4:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
10010af8:	e0bffc17 	ldw	r2,-16(fp)
10010afc:	e0bff715 	stw	r2,-36(fp)
10010b00:	e0bffd17 	ldw	r2,-12(fp)
10010b04:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
10010b08:	e0bffc17 	ldw	r2,-16(fp)
10010b0c:	e0bff715 	stw	r2,-36(fp)
10010b10:	e0bffd17 	ldw	r2,-12(fp)
10010b14:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
10010b18:	01400044 	movi	r5,1
10010b1c:	e13ffb17 	ldw	r4,-20(fp)
10010b20:	000f6340 	call	1000f634 <_Balloc>
10010b24:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
10010b28:	e0bff417 	ldw	r2,-48(fp)
10010b2c:	10800504 	addi	r2,r2,20
10010b30:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
10010b34:	e0fff817 	ldw	r3,-32(fp)
10010b38:	00800434 	movhi	r2,16
10010b3c:	10bfffc4 	addi	r2,r2,-1
10010b40:	1884703a 	and	r2,r3,r2
10010b44:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
10010b48:	e0fff817 	ldw	r3,-32(fp)
10010b4c:	00a00034 	movhi	r2,32768
10010b50:	10bfffc4 	addi	r2,r2,-1
10010b54:	1884703a 	and	r2,r3,r2
10010b58:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
10010b5c:	e0bff817 	ldw	r2,-32(fp)
10010b60:	1004d53a 	srli	r2,r2,20
10010b64:	e0bff615 	stw	r2,-40(fp)
10010b68:	e0bff617 	ldw	r2,-40(fp)
10010b6c:	10000326 	beq	r2,zero,10010b7c <__d2b+0xa8>
    z |= Exp_msk1;
10010b70:	e0bffa17 	ldw	r2,-24(fp)
10010b74:	10800434 	orhi	r2,r2,16
10010b78:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
10010b7c:	e0bff717 	ldw	r2,-36(fp)
10010b80:	10002826 	beq	r2,zero,10010c24 <__d2b+0x150>
    {
      y = d1;
10010b84:	e0bff717 	ldw	r2,-36(fp)
10010b88:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
10010b8c:	e0bff904 	addi	r2,fp,-28
10010b90:	1009883a 	mov	r4,r2
10010b94:	000fba80 	call	1000fba8 <__lo0bits>
10010b98:	e0bff315 	stw	r2,-52(fp)
      if (k)
10010b9c:	e0bff317 	ldw	r2,-52(fp)
10010ba0:	10000e26 	beq	r2,zero,10010bdc <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
10010ba4:	e0fffa17 	ldw	r3,-24(fp)
10010ba8:	01000804 	movi	r4,32
10010bac:	e0bff317 	ldw	r2,-52(fp)
10010bb0:	2085c83a 	sub	r2,r4,r2
10010bb4:	1886983a 	sll	r3,r3,r2
10010bb8:	e0bff917 	ldw	r2,-28(fp)
10010bbc:	1886b03a 	or	r3,r3,r2
10010bc0:	e0bff517 	ldw	r2,-44(fp)
10010bc4:	10c00015 	stw	r3,0(r2)
	  z >>= k;
10010bc8:	e0fffa17 	ldw	r3,-24(fp)
10010bcc:	e0bff317 	ldw	r2,-52(fp)
10010bd0:	1884d83a 	srl	r2,r3,r2
10010bd4:	e0bffa15 	stw	r2,-24(fp)
10010bd8:	00000306 	br	10010be8 <__d2b+0x114>
	}
      else
	x[0] = y;
10010bdc:	e0fff917 	ldw	r3,-28(fp)
10010be0:	e0bff517 	ldw	r2,-44(fp)
10010be4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
10010be8:	e0bff517 	ldw	r2,-44(fp)
10010bec:	10800104 	addi	r2,r2,4
10010bf0:	e0fffa17 	ldw	r3,-24(fp)
10010bf4:	10c00015 	stw	r3,0(r2)
10010bf8:	10800017 	ldw	r2,0(r2)
10010bfc:	10000226 	beq	r2,zero,10010c08 <__d2b+0x134>
10010c00:	00800084 	movi	r2,2
10010c04:	00000106 	br	10010c0c <__d2b+0x138>
10010c08:	00800044 	movi	r2,1
10010c0c:	e0fff417 	ldw	r3,-48(fp)
10010c10:	18800415 	stw	r2,16(r3)
10010c14:	e0bff417 	ldw	r2,-48(fp)
10010c18:	10800417 	ldw	r2,16(r2)
10010c1c:	e0bff215 	stw	r2,-56(fp)
10010c20:	00001006 	br	10010c64 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
10010c24:	e0bffa04 	addi	r2,fp,-24
10010c28:	1009883a 	mov	r4,r2
10010c2c:	000fba80 	call	1000fba8 <__lo0bits>
10010c30:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
10010c34:	e0fffa17 	ldw	r3,-24(fp)
10010c38:	e0bff517 	ldw	r2,-44(fp)
10010c3c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
10010c40:	e0bff417 	ldw	r2,-48(fp)
10010c44:	00c00044 	movi	r3,1
10010c48:	10c00415 	stw	r3,16(r2)
10010c4c:	e0bff417 	ldw	r2,-48(fp)
10010c50:	10800417 	ldw	r2,16(r2)
10010c54:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
10010c58:	e0bff317 	ldw	r2,-52(fp)
10010c5c:	10800804 	addi	r2,r2,32
10010c60:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
10010c64:	e0bff617 	ldw	r2,-40(fp)
10010c68:	10000c26 	beq	r2,zero,10010c9c <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
10010c6c:	e0bff617 	ldw	r2,-40(fp)
10010c70:	10fef344 	addi	r3,r2,-1075
10010c74:	e0bff317 	ldw	r2,-52(fp)
10010c78:	1887883a 	add	r3,r3,r2
10010c7c:	e0bffe17 	ldw	r2,-8(fp)
10010c80:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
10010c84:	00c00d44 	movi	r3,53
10010c88:	e0bff317 	ldw	r2,-52(fp)
10010c8c:	1887c83a 	sub	r3,r3,r2
10010c90:	e0800217 	ldw	r2,8(fp)
10010c94:	10c00015 	stw	r3,0(r2)
10010c98:	00001706 	br	10010cf8 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
10010c9c:	e0bff617 	ldw	r2,-40(fp)
10010ca0:	10fef384 	addi	r3,r2,-1074
10010ca4:	e0bff317 	ldw	r2,-52(fp)
10010ca8:	1887883a 	add	r3,r3,r2
10010cac:	e0bffe17 	ldw	r2,-8(fp)
10010cb0:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
10010cb4:	e0bff217 	ldw	r2,-56(fp)
10010cb8:	1020917a 	slli	r16,r2,5
10010cbc:	e0fff217 	ldw	r3,-56(fp)
10010cc0:	00900034 	movhi	r2,16384
10010cc4:	10bfffc4 	addi	r2,r2,-1
10010cc8:	1885883a 	add	r2,r3,r2
10010ccc:	1085883a 	add	r2,r2,r2
10010cd0:	1085883a 	add	r2,r2,r2
10010cd4:	1007883a 	mov	r3,r2
10010cd8:	e0bff517 	ldw	r2,-44(fp)
10010cdc:	10c5883a 	add	r2,r2,r3
10010ce0:	10800017 	ldw	r2,0(r2)
10010ce4:	1009883a 	mov	r4,r2
10010ce8:	000fb180 	call	1000fb18 <__hi0bits>
10010cec:	8087c83a 	sub	r3,r16,r2
10010cf0:	e0800217 	ldw	r2,8(fp)
10010cf4:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
10010cf8:	e0bff417 	ldw	r2,-48(fp)
}
10010cfc:	e6ffff04 	addi	sp,fp,-4
10010d00:	dfc00217 	ldw	ra,8(sp)
10010d04:	df000117 	ldw	fp,4(sp)
10010d08:	dc000017 	ldw	r16,0(sp)
10010d0c:	dec00304 	addi	sp,sp,12
10010d10:	f800283a 	ret

10010d14 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
10010d14:	defff504 	addi	sp,sp,-44
10010d18:	dfc00a15 	stw	ra,40(sp)
10010d1c:	df000915 	stw	fp,36(sp)
10010d20:	df000904 	addi	fp,sp,36
10010d24:	e13ffe15 	stw	r4,-8(fp)
10010d28:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
10010d2c:	e0bffc04 	addi	r2,fp,-16
10010d30:	100b883a 	mov	r5,r2
10010d34:	e13ffe17 	ldw	r4,-8(fp)
10010d38:	00108d00 	call	100108d0 <__b2d>
10010d3c:	1009883a 	mov	r4,r2
10010d40:	180b883a 	mov	r5,r3
10010d44:	e13ff815 	stw	r4,-32(fp)
10010d48:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
10010d4c:	e0bffd04 	addi	r2,fp,-12
10010d50:	100b883a 	mov	r5,r2
10010d54:	e13fff17 	ldw	r4,-4(fp)
10010d58:	00108d00 	call	100108d0 <__b2d>
10010d5c:	1009883a 	mov	r4,r2
10010d60:	180b883a 	mov	r5,r3
10010d64:	e13ffa15 	stw	r4,-24(fp)
10010d68:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
10010d6c:	e0fffc17 	ldw	r3,-16(fp)
10010d70:	e0bffd17 	ldw	r2,-12(fp)
10010d74:	1887c83a 	sub	r3,r3,r2
10010d78:	e0bffe17 	ldw	r2,-8(fp)
10010d7c:	11000417 	ldw	r4,16(r2)
10010d80:	e0bfff17 	ldw	r2,-4(fp)
10010d84:	10800417 	ldw	r2,16(r2)
10010d88:	2085c83a 	sub	r2,r4,r2
10010d8c:	1004917a 	slli	r2,r2,5
10010d90:	1885883a 	add	r2,r3,r2
10010d94:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
10010d98:	e0bff717 	ldw	r2,-36(fp)
10010d9c:	0080060e 	bge	zero,r2,10010db8 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
10010da0:	e0fff917 	ldw	r3,-28(fp)
10010da4:	e0bff717 	ldw	r2,-36(fp)
10010da8:	1004953a 	slli	r2,r2,20
10010dac:	1885883a 	add	r2,r3,r2
10010db0:	e0bff915 	stw	r2,-28(fp)
10010db4:	00000806 	br	10010dd8 <__ratio+0xc4>
  else
    {
      k = -k;
10010db8:	e0bff717 	ldw	r2,-36(fp)
10010dbc:	0085c83a 	sub	r2,zero,r2
10010dc0:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
10010dc4:	e0fffb17 	ldw	r3,-20(fp)
10010dc8:	e0bff717 	ldw	r2,-36(fp)
10010dcc:	1004953a 	slli	r2,r2,20
10010dd0:	1885883a 	add	r2,r3,r2
10010dd4:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
10010dd8:	e0bff817 	ldw	r2,-32(fp)
10010ddc:	e0fff917 	ldw	r3,-28(fp)
10010de0:	e13ffa17 	ldw	r4,-24(fp)
10010de4:	e17ffb17 	ldw	r5,-20(fp)
10010de8:	200d883a 	mov	r6,r4
10010dec:	280f883a 	mov	r7,r5
10010df0:	1009883a 	mov	r4,r2
10010df4:	180b883a 	mov	r5,r3
10010df8:	00148480 	call	10014848 <__divdf3>
10010dfc:	100f883a 	mov	r7,r2
10010e00:	1811883a 	mov	r8,r3
10010e04:	380b883a 	mov	r5,r7
10010e08:	400d883a 	mov	r6,r8
10010e0c:	2807883a 	mov	r3,r5
10010e10:	3009883a 	mov	r4,r6
}
10010e14:	1805883a 	mov	r2,r3
10010e18:	2007883a 	mov	r3,r4
10010e1c:	e037883a 	mov	sp,fp
10010e20:	dfc00117 	ldw	ra,4(sp)
10010e24:	df000017 	ldw	fp,0(sp)
10010e28:	dec00204 	addi	sp,sp,8
10010e2c:	f800283a 	ret

10010e30 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
10010e30:	defffb04 	addi	sp,sp,-20
10010e34:	dfc00415 	stw	ra,16(sp)
10010e38:	df000315 	stw	fp,12(sp)
10010e3c:	df000304 	addi	fp,sp,12
10010e40:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
10010e44:	e03ffd15 	stw	zero,-12(fp)
10010e48:	008ffc34 	movhi	r2,16368
10010e4c:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
10010e50:	e0bfff17 	ldw	r2,-4(fp)
10010e54:	10800608 	cmpgei	r2,r2,24
10010e58:	1000141e 	bne	r2,zero,10010eac <_mprec_log10+0x7c>
    return tens[dig];
10010e5c:	00840374 	movhi	r2,4109
10010e60:	10bde104 	addi	r2,r2,-2172
10010e64:	e0ffff17 	ldw	r3,-4(fp)
10010e68:	180690fa 	slli	r3,r3,3
10010e6c:	10c9883a 	add	r4,r2,r3
10010e70:	20800017 	ldw	r2,0(r4)
10010e74:	20c00117 	ldw	r3,4(r4)
10010e78:	00001006 	br	10010ebc <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
10010e7c:	000d883a 	mov	r6,zero
10010e80:	01d00934 	movhi	r7,16420
10010e84:	e13ffd17 	ldw	r4,-12(fp)
10010e88:	e17ffe17 	ldw	r5,-8(fp)
10010e8c:	00045880 	call	10004588 <__muldf3>
10010e90:	1009883a 	mov	r4,r2
10010e94:	180b883a 	mov	r5,r3
10010e98:	e13ffd15 	stw	r4,-12(fp)
10010e9c:	e17ffe15 	stw	r5,-8(fp)
      dig--;
10010ea0:	e0bfff17 	ldw	r2,-4(fp)
10010ea4:	10bfffc4 	addi	r2,r2,-1
10010ea8:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
10010eac:	e0bfff17 	ldw	r2,-4(fp)
10010eb0:	00bff216 	blt	zero,r2,10010e7c <__alt_data_end+0xf8010e7c>
    {
      v *= 10;
      dig--;
    }
  return v;
10010eb4:	e0bffd17 	ldw	r2,-12(fp)
10010eb8:	e0fffe17 	ldw	r3,-8(fp)
10010ebc:	1009883a 	mov	r4,r2
10010ec0:	180b883a 	mov	r5,r3
}
10010ec4:	2005883a 	mov	r2,r4
10010ec8:	2807883a 	mov	r3,r5
10010ecc:	e037883a 	mov	sp,fp
10010ed0:	dfc00117 	ldw	ra,4(sp)
10010ed4:	df000017 	ldw	fp,0(sp)
10010ed8:	dec00204 	addi	sp,sp,8
10010edc:	f800283a 	ret

10010ee0 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
10010ee0:	defff904 	addi	sp,sp,-28
10010ee4:	df000615 	stw	fp,24(sp)
10010ee8:	df000604 	addi	fp,sp,24
10010eec:	e13ffd15 	stw	r4,-12(fp)
10010ef0:	e17ffe15 	stw	r5,-8(fp)
10010ef4:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
10010ef8:	e0bffe17 	ldw	r2,-8(fp)
10010efc:	10bfffc4 	addi	r2,r2,-1
10010f00:	1005d17a 	srai	r2,r2,5
10010f04:	10800044 	addi	r2,r2,1
10010f08:	1085883a 	add	r2,r2,r2
10010f0c:	1085883a 	add	r2,r2,r2
10010f10:	1007883a 	mov	r3,r2
10010f14:	e0bffd17 	ldw	r2,-12(fp)
10010f18:	10c5883a 	add	r2,r2,r3
10010f1c:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
10010f20:	e0bfff17 	ldw	r2,-4(fp)
10010f24:	10800504 	addi	r2,r2,20
10010f28:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
10010f2c:	e0bfff17 	ldw	r2,-4(fp)
10010f30:	10800417 	ldw	r2,16(r2)
10010f34:	1085883a 	add	r2,r2,r2
10010f38:	1085883a 	add	r2,r2,r2
10010f3c:	1007883a 	mov	r3,r2
10010f40:	e0bffa17 	ldw	r2,-24(fp)
10010f44:	10c5883a 	add	r2,r2,r3
10010f48:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
10010f4c:	00000806 	br	10010f70 <__copybits+0x90>
		*c++ = *x++;
10010f50:	e0bffd17 	ldw	r2,-12(fp)
10010f54:	10c00104 	addi	r3,r2,4
10010f58:	e0fffd15 	stw	r3,-12(fp)
10010f5c:	e0fffa17 	ldw	r3,-24(fp)
10010f60:	19000104 	addi	r4,r3,4
10010f64:	e13ffa15 	stw	r4,-24(fp)
10010f68:	18c00017 	ldw	r3,0(r3)
10010f6c:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
10010f70:	e0fffa17 	ldw	r3,-24(fp)
10010f74:	e0bffc17 	ldw	r2,-16(fp)
10010f78:	18bff536 	bltu	r3,r2,10010f50 <__alt_data_end+0xf8010f50>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
10010f7c:	00000406 	br	10010f90 <__copybits+0xb0>
		*c++ = 0;
10010f80:	e0bffd17 	ldw	r2,-12(fp)
10010f84:	10c00104 	addi	r3,r2,4
10010f88:	e0fffd15 	stw	r3,-12(fp)
10010f8c:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
10010f90:	e0fffd17 	ldw	r3,-12(fp)
10010f94:	e0bffb17 	ldw	r2,-20(fp)
10010f98:	18bff936 	bltu	r3,r2,10010f80 <__alt_data_end+0xf8010f80>
		*c++ = 0;
}
10010f9c:	0001883a 	nop
10010fa0:	e037883a 	mov	sp,fp
10010fa4:	df000017 	ldw	fp,0(sp)
10010fa8:	dec00104 	addi	sp,sp,4
10010fac:	f800283a 	ret

10010fb0 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
10010fb0:	defff704 	addi	sp,sp,-36
10010fb4:	df000815 	stw	fp,32(sp)
10010fb8:	df000804 	addi	fp,sp,32
10010fbc:	e13ffe15 	stw	r4,-8(fp)
10010fc0:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
10010fc4:	e0bffe17 	ldw	r2,-8(fp)
10010fc8:	10800504 	addi	r2,r2,20
10010fcc:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
10010fd0:	e0bffe17 	ldw	r2,-8(fp)
10010fd4:	10800417 	ldw	r2,16(r2)
10010fd8:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
10010fdc:	e0bfff17 	ldw	r2,-4(fp)
10010fe0:	1005d17a 	srai	r2,r2,5
10010fe4:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
10010fe8:	e0bff817 	ldw	r2,-32(fp)
10010fec:	e0fffa17 	ldw	r3,-24(fp)
10010ff0:	1880030e 	bge	r3,r2,10011000 <__any_on+0x50>
		n = nwds;
10010ff4:	e0bffa17 	ldw	r2,-24(fp)
10010ff8:	e0bff815 	stw	r2,-32(fp)
10010ffc:	00001f06 	br	1001107c <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
10011000:	e0fff817 	ldw	r3,-32(fp)
10011004:	e0bffa17 	ldw	r2,-24(fp)
10011008:	18801c0e 	bge	r3,r2,1001107c <__any_on+0xcc>
1001100c:	e0bfff17 	ldw	r2,-4(fp)
10011010:	108007cc 	andi	r2,r2,31
10011014:	e0bfff15 	stw	r2,-4(fp)
10011018:	e0bfff17 	ldw	r2,-4(fp)
1001101c:	10001726 	beq	r2,zero,1001107c <__any_on+0xcc>
		x1 = x2 = x[n];
10011020:	e0bff817 	ldw	r2,-32(fp)
10011024:	1085883a 	add	r2,r2,r2
10011028:	1085883a 	add	r2,r2,r2
1001102c:	1007883a 	mov	r3,r2
10011030:	e0bff917 	ldw	r2,-28(fp)
10011034:	10c5883a 	add	r2,r2,r3
10011038:	10800017 	ldw	r2,0(r2)
1001103c:	e0bffb15 	stw	r2,-20(fp)
10011040:	e0bffb17 	ldw	r2,-20(fp)
10011044:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
10011048:	e0fffc17 	ldw	r3,-16(fp)
1001104c:	e0bfff17 	ldw	r2,-4(fp)
10011050:	1884d83a 	srl	r2,r3,r2
10011054:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
10011058:	e0fffc17 	ldw	r3,-16(fp)
1001105c:	e0bfff17 	ldw	r2,-4(fp)
10011060:	1884983a 	sll	r2,r3,r2
10011064:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
10011068:	e0fffc17 	ldw	r3,-16(fp)
1001106c:	e0bffb17 	ldw	r2,-20(fp)
10011070:	18800226 	beq	r3,r2,1001107c <__any_on+0xcc>
			return 1;
10011074:	00800044 	movi	r2,1
10011078:	00001606 	br	100110d4 <__any_on+0x124>
		}
	x0 = x;
1001107c:	e0bff917 	ldw	r2,-28(fp)
10011080:	e0bffd15 	stw	r2,-12(fp)
	x += n;
10011084:	e0bff817 	ldw	r2,-32(fp)
10011088:	1085883a 	add	r2,r2,r2
1001108c:	1085883a 	add	r2,r2,r2
10011090:	1007883a 	mov	r3,r2
10011094:	e0bff917 	ldw	r2,-28(fp)
10011098:	10c5883a 	add	r2,r2,r3
1001109c:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
100110a0:	00000806 	br	100110c4 <__any_on+0x114>
		if (*--x)
100110a4:	e0bff917 	ldw	r2,-28(fp)
100110a8:	10bfff04 	addi	r2,r2,-4
100110ac:	e0bff915 	stw	r2,-28(fp)
100110b0:	e0bff917 	ldw	r2,-28(fp)
100110b4:	10800017 	ldw	r2,0(r2)
100110b8:	10000226 	beq	r2,zero,100110c4 <__any_on+0x114>
			return 1;
100110bc:	00800044 	movi	r2,1
100110c0:	00000406 	br	100110d4 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
100110c4:	e0bff917 	ldw	r2,-28(fp)
100110c8:	e0fffd17 	ldw	r3,-12(fp)
100110cc:	18bff536 	bltu	r3,r2,100110a4 <__alt_data_end+0xf80110a4>
		if (*--x)
			return 1;
	return 0;
100110d0:	0005883a 	mov	r2,zero
}
100110d4:	e037883a 	mov	sp,fp
100110d8:	df000017 	ldw	fp,0(sp)
100110dc:	dec00104 	addi	sp,sp,4
100110e0:	f800283a 	ret

100110e4 <_putc_r>:
int
_DEFUN(_putc_r, (ptr, c, fp),
       struct _reent *ptr _AND
       int c _AND
       register FILE *fp)
{
100110e4:	defff904 	addi	sp,sp,-28
100110e8:	dfc00615 	stw	ra,24(sp)
100110ec:	df000515 	stw	fp,20(sp)
100110f0:	dc000415 	stw	r16,16(sp)
100110f4:	df000504 	addi	fp,sp,20
100110f8:	e13ffd15 	stw	r4,-12(fp)
100110fc:	e17ffe15 	stw	r5,-8(fp)
10011100:	3021883a 	mov	r16,r6
  int result;
  CHECK_INIT (ptr, fp);
10011104:	e0bffd17 	ldw	r2,-12(fp)
10011108:	e0bffb15 	stw	r2,-20(fp)
1001110c:	e0bffb17 	ldw	r2,-20(fp)
10011110:	10000526 	beq	r2,zero,10011128 <_putc_r+0x44>
10011114:	e0bffb17 	ldw	r2,-20(fp)
10011118:	10800e17 	ldw	r2,56(r2)
1001111c:	1000021e 	bne	r2,zero,10011128 <_putc_r+0x44>
10011120:	e13ffb17 	ldw	r4,-20(fp)
10011124:	000db740 	call	1000db74 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (ptr, c, fp);
10011128:	80800217 	ldw	r2,8(r16)
1001112c:	10bfffc4 	addi	r2,r2,-1
10011130:	80800215 	stw	r2,8(r16)
10011134:	80800217 	ldw	r2,8(r16)
10011138:	10001b0e 	bge	r2,zero,100111a8 <_putc_r+0xc4>
1001113c:	80c00217 	ldw	r3,8(r16)
10011140:	80800617 	ldw	r2,24(r16)
10011144:	18801316 	blt	r3,r2,10011194 <_putc_r+0xb0>
10011148:	80800017 	ldw	r2,0(r16)
1001114c:	e0fffe17 	ldw	r3,-8(fp)
10011150:	10c00005 	stb	r3,0(r2)
10011154:	80800017 	ldw	r2,0(r16)
10011158:	10800003 	ldbu	r2,0(r2)
1001115c:	10803fcc 	andi	r2,r2,255
10011160:	108002a0 	cmpeqi	r2,r2,10
10011164:	1000061e 	bne	r2,zero,10011180 <_putc_r+0x9c>
10011168:	80800017 	ldw	r2,0(r16)
1001116c:	10c00044 	addi	r3,r2,1
10011170:	80c00015 	stw	r3,0(r16)
10011174:	10800003 	ldbu	r2,0(r2)
10011178:	10803fcc 	andi	r2,r2,255
1001117c:	00001206 	br	100111c8 <_putc_r+0xe4>
10011180:	800d883a 	mov	r6,r16
10011184:	01400284 	movi	r5,10
10011188:	e13ffd17 	ldw	r4,-12(fp)
1001118c:	00130c80 	call	100130c8 <__swbuf_r>
10011190:	00000d06 	br	100111c8 <_putc_r+0xe4>
10011194:	800d883a 	mov	r6,r16
10011198:	e17ffe17 	ldw	r5,-8(fp)
1001119c:	e13ffd17 	ldw	r4,-12(fp)
100111a0:	00130c80 	call	100130c8 <__swbuf_r>
100111a4:	00000806 	br	100111c8 <_putc_r+0xe4>
100111a8:	80800017 	ldw	r2,0(r16)
100111ac:	e0fffe17 	ldw	r3,-8(fp)
100111b0:	10c00005 	stb	r3,0(r2)
100111b4:	80800017 	ldw	r2,0(r16)
100111b8:	10c00044 	addi	r3,r2,1
100111bc:	80c00015 	stw	r3,0(r16)
100111c0:	10800003 	ldbu	r2,0(r2)
100111c4:	10803fcc 	andi	r2,r2,255
100111c8:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return result;
100111cc:	e0bffc17 	ldw	r2,-16(fp)
}
100111d0:	e6ffff04 	addi	sp,fp,-4
100111d4:	dfc00217 	ldw	ra,8(sp)
100111d8:	df000117 	ldw	fp,4(sp)
100111dc:	dc000017 	ldw	r16,0(sp)
100111e0:	dec00304 	addi	sp,sp,12
100111e4:	f800283a 	ret

100111e8 <putc>:
#ifndef _REENT_ONLY
int
_DEFUN(putc, (c, fp),
       int c _AND
       register FILE *fp)
{
100111e8:	defff904 	addi	sp,sp,-28
100111ec:	dfc00615 	stw	ra,24(sp)
100111f0:	df000515 	stw	fp,20(sp)
100111f4:	dc000415 	stw	r16,16(sp)
100111f8:	df000504 	addi	fp,sp,20
100111fc:	e13ffe15 	stw	r4,-8(fp)
10011200:	2821883a 	mov	r16,r5
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  int result;
  struct _reent *reent = _REENT;
10011204:	008403b4 	movhi	r2,4110
10011208:	10a45004 	addi	r2,r2,-28352
1001120c:	10800017 	ldw	r2,0(r2)
10011210:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT (reent, fp);
10011214:	e0bffb17 	ldw	r2,-20(fp)
10011218:	e0bffc15 	stw	r2,-16(fp)
1001121c:	e0bffc17 	ldw	r2,-16(fp)
10011220:	10000526 	beq	r2,zero,10011238 <putc+0x50>
10011224:	e0bffc17 	ldw	r2,-16(fp)
10011228:	10800e17 	ldw	r2,56(r2)
1001122c:	1000021e 	bne	r2,zero,10011238 <putc+0x50>
10011230:	e13ffc17 	ldw	r4,-16(fp)
10011234:	000db740 	call	1000db74 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (reent, c, fp);
10011238:	80800217 	ldw	r2,8(r16)
1001123c:	10bfffc4 	addi	r2,r2,-1
10011240:	80800215 	stw	r2,8(r16)
10011244:	80800217 	ldw	r2,8(r16)
10011248:	10001b0e 	bge	r2,zero,100112b8 <putc+0xd0>
1001124c:	80c00217 	ldw	r3,8(r16)
10011250:	80800617 	ldw	r2,24(r16)
10011254:	18801316 	blt	r3,r2,100112a4 <putc+0xbc>
10011258:	80800017 	ldw	r2,0(r16)
1001125c:	e0fffe17 	ldw	r3,-8(fp)
10011260:	10c00005 	stb	r3,0(r2)
10011264:	80800017 	ldw	r2,0(r16)
10011268:	10800003 	ldbu	r2,0(r2)
1001126c:	10803fcc 	andi	r2,r2,255
10011270:	108002a0 	cmpeqi	r2,r2,10
10011274:	1000061e 	bne	r2,zero,10011290 <putc+0xa8>
10011278:	80800017 	ldw	r2,0(r16)
1001127c:	10c00044 	addi	r3,r2,1
10011280:	80c00015 	stw	r3,0(r16)
10011284:	10800003 	ldbu	r2,0(r2)
10011288:	10803fcc 	andi	r2,r2,255
1001128c:	00001206 	br	100112d8 <putc+0xf0>
10011290:	800d883a 	mov	r6,r16
10011294:	01400284 	movi	r5,10
10011298:	e13ffb17 	ldw	r4,-20(fp)
1001129c:	00130c80 	call	100130c8 <__swbuf_r>
100112a0:	00000d06 	br	100112d8 <putc+0xf0>
100112a4:	800d883a 	mov	r6,r16
100112a8:	e17ffe17 	ldw	r5,-8(fp)
100112ac:	e13ffb17 	ldw	r4,-20(fp)
100112b0:	00130c80 	call	100130c8 <__swbuf_r>
100112b4:	00000806 	br	100112d8 <putc+0xf0>
100112b8:	80800017 	ldw	r2,0(r16)
100112bc:	e0fffe17 	ldw	r3,-8(fp)
100112c0:	10c00005 	stb	r3,0(r2)
100112c4:	80800017 	ldw	r2,0(r16)
100112c8:	10c00044 	addi	r3,r2,1
100112cc:	80c00015 	stw	r3,0(r16)
100112d0:	10800003 	ldbu	r2,0(r2)
100112d4:	10803fcc 	andi	r2,r2,255
100112d8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
100112dc:	e0bffd17 	ldw	r2,-12(fp)
#else
  return _putc_r (_REENT, c, fp);
#endif
}
100112e0:	e6ffff04 	addi	sp,fp,-4
100112e4:	dfc00217 	ldw	ra,8(sp)
100112e8:	df000117 	ldw	fp,4(sp)
100112ec:	dc000017 	ldw	r16,0(sp)
100112f0:	dec00304 	addi	sp,sp,12
100112f4:	f800283a 	ret

100112f8 <lflush>:
#include "local.h"

static int
_DEFUN(lflush, (fp),
       FILE *fp)
{
100112f8:	defffd04 	addi	sp,sp,-12
100112fc:	dfc00215 	stw	ra,8(sp)
10011300:	df000115 	stw	fp,4(sp)
10011304:	df000104 	addi	fp,sp,4
10011308:	e13fff15 	stw	r4,-4(fp)
  if ((fp->_flags & (__SLBF | __SWR)) == (__SLBF | __SWR))
1001130c:	e0bfff17 	ldw	r2,-4(fp)
10011310:	1080030b 	ldhu	r2,12(r2)
10011314:	10bfffcc 	andi	r2,r2,65535
10011318:	1080024c 	andi	r2,r2,9
1001131c:	10800258 	cmpnei	r2,r2,9
10011320:	1000031e 	bne	r2,zero,10011330 <lflush+0x38>
    return fflush (fp);
10011324:	e13fff17 	ldw	r4,-4(fp)
10011328:	000d7340 	call	1000d734 <fflush>
1001132c:	00000106 	br	10011334 <lflush+0x3c>
  return 0;
10011330:	0005883a 	mov	r2,zero
}
10011334:	e037883a 	mov	sp,fp
10011338:	dfc00117 	ldw	ra,4(sp)
1001133c:	df000017 	ldw	fp,0(sp)
10011340:	dec00204 	addi	sp,sp,8
10011344:	f800283a 	ret

10011348 <__srefill_r>:

int
_DEFUN(__srefill_r, (ptr, fp),
       struct _reent * ptr _AND
       register FILE * fp)
{
10011348:	defffa04 	addi	sp,sp,-24
1001134c:	dfc00515 	stw	ra,20(sp)
10011350:	df000415 	stw	fp,16(sp)
10011354:	dc000315 	stw	r16,12(sp)
10011358:	df000404 	addi	fp,sp,16
1001135c:	e13ffe15 	stw	r4,-8(fp)
10011360:	2821883a 	mov	r16,r5
  /* make sure stdio is set up */

  CHECK_INIT (ptr, fp);
10011364:	e0bffe17 	ldw	r2,-8(fp)
10011368:	e0bffc15 	stw	r2,-16(fp)
1001136c:	e0bffc17 	ldw	r2,-16(fp)
10011370:	10000526 	beq	r2,zero,10011388 <__srefill_r+0x40>
10011374:	e0bffc17 	ldw	r2,-16(fp)
10011378:	10800e17 	ldw	r2,56(r2)
1001137c:	1000021e 	bne	r2,zero,10011388 <__srefill_r+0x40>
10011380:	e13ffc17 	ldw	r4,-16(fp)
10011384:	000db740 	call	1000db74 <__sinit>

  ORIENT (fp, -1);
10011388:	8080030b 	ldhu	r2,12(r16)
1001138c:	10bfffcc 	andi	r2,r2,65535
10011390:	1088000c 	andi	r2,r2,8192
10011394:	1000071e 	bne	r2,zero,100113b4 <__srefill_r+0x6c>
10011398:	8080030b 	ldhu	r2,12(r16)
1001139c:	10880014 	ori	r2,r2,8192
100113a0:	8080030d 	sth	r2,12(r16)
100113a4:	80c01917 	ldw	r3,100(r16)
100113a8:	00b7ffc4 	movi	r2,-8193
100113ac:	1884703a 	and	r2,r3,r2
100113b0:	80801915 	stw	r2,100(r16)

  fp->_r = 0;			/* largely a convenience for callers */
100113b4:	80000115 	stw	zero,4(r16)

#ifndef __CYGWIN__
  /* SysV does not make this test; take it out for compatibility */
  if (fp->_flags & __SEOF)
100113b8:	8080030b 	ldhu	r2,12(r16)
100113bc:	10bfffcc 	andi	r2,r2,65535
100113c0:	1080080c 	andi	r2,r2,32
100113c4:	10000226 	beq	r2,zero,100113d0 <__srefill_r+0x88>
    return EOF;
100113c8:	00bfffc4 	movi	r2,-1
100113cc:	00006f06 	br	1001158c <__srefill_r+0x244>
#endif

  /* if not already reading, have to be reading and writing */
  if ((fp->_flags & __SRD) == 0)
100113d0:	8080030b 	ldhu	r2,12(r16)
100113d4:	10bfffcc 	andi	r2,r2,65535
100113d8:	1080010c 	andi	r2,r2,4
100113dc:	1000201e 	bne	r2,zero,10011460 <__srefill_r+0x118>
    {
      if ((fp->_flags & __SRW) == 0)
100113e0:	8080030b 	ldhu	r2,12(r16)
100113e4:	10bfffcc 	andi	r2,r2,65535
100113e8:	1080040c 	andi	r2,r2,16
100113ec:	1000081e 	bne	r2,zero,10011410 <__srefill_r+0xc8>
	{
	  ptr->_errno = EBADF;
100113f0:	e0bffe17 	ldw	r2,-8(fp)
100113f4:	00c00244 	movi	r3,9
100113f8:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
100113fc:	8080030b 	ldhu	r2,12(r16)
10011400:	10801014 	ori	r2,r2,64
10011404:	8080030d 	sth	r2,12(r16)
	  return EOF;
10011408:	00bfffc4 	movi	r2,-1
1001140c:	00005f06 	br	1001158c <__srefill_r+0x244>
	}
      /* switch to reading */
      if (fp->_flags & __SWR)
10011410:	8080030b 	ldhu	r2,12(r16)
10011414:	10bfffcc 	andi	r2,r2,65535
10011418:	1080020c 	andi	r2,r2,8
1001141c:	10000c26 	beq	r2,zero,10011450 <__srefill_r+0x108>
	{
	  if (_fflush_r (ptr, fp))
10011420:	800b883a 	mov	r5,r16
10011424:	e13ffe17 	ldw	r4,-8(fp)
10011428:	000d6ac0 	call	1000d6ac <_fflush_r>
1001142c:	10000226 	beq	r2,zero,10011438 <__srefill_r+0xf0>
	    return EOF;
10011430:	00bfffc4 	movi	r2,-1
10011434:	00005506 	br	1001158c <__srefill_r+0x244>
	  fp->_flags &= ~__SWR;
10011438:	80c0030b 	ldhu	r3,12(r16)
1001143c:	00bffdc4 	movi	r2,-9
10011440:	1884703a 	and	r2,r3,r2
10011444:	8080030d 	sth	r2,12(r16)
	  fp->_w = 0;
10011448:	80000215 	stw	zero,8(r16)
	  fp->_lbfsize = 0;
1001144c:	80000615 	stw	zero,24(r16)
	}
      fp->_flags |= __SRD;
10011450:	8080030b 	ldhu	r2,12(r16)
10011454:	10800114 	ori	r2,r2,4
10011458:	8080030d 	sth	r2,12(r16)
1001145c:	00001206 	br	100114a8 <__srefill_r+0x160>
       * We were reading.  If there is an ungetc buffer,
       * we must have been reading from that.  Drop it,
       * restoring the previous buffer (if any).  If there
       * is anything in that buffer, return.
       */
      if (HASUB (fp))
10011460:	80800c17 	ldw	r2,48(r16)
10011464:	10001026 	beq	r2,zero,100114a8 <__srefill_r+0x160>
	{
	  FREEUB (ptr, fp);
10011468:	80c00c17 	ldw	r3,48(r16)
1001146c:	80801004 	addi	r2,r16,64
10011470:	18800426 	beq	r3,r2,10011484 <__srefill_r+0x13c>
10011474:	80800c17 	ldw	r2,48(r16)
10011478:	100b883a 	mov	r5,r2
1001147c:	e13ffe17 	ldw	r4,-8(fp)
10011480:	000dda40 	call	1000dda4 <_free_r>
10011484:	80000c15 	stw	zero,48(r16)
	  if ((fp->_r = fp->_ur) != 0)
10011488:	80800f17 	ldw	r2,60(r16)
1001148c:	80800115 	stw	r2,4(r16)
10011490:	80800117 	ldw	r2,4(r16)
10011494:	10000426 	beq	r2,zero,100114a8 <__srefill_r+0x160>
	    {
	      fp->_p = fp->_up;
10011498:	80800e17 	ldw	r2,56(r16)
1001149c:	80800015 	stw	r2,0(r16)
	      return 0;
100114a0:	0005883a 	mov	r2,zero
100114a4:	00003906 	br	1001158c <__srefill_r+0x244>
	    }
	}
    }

  if (fp->_bf._base == NULL)
100114a8:	80800417 	ldw	r2,16(r16)
100114ac:	1000031e 	bne	r2,zero,100114bc <__srefill_r+0x174>
    __smakebuf_r (ptr, fp);
100114b0:	800b883a 	mov	r5,r16
100114b4:	e13ffe17 	ldw	r4,-8(fp)
100114b8:	000eebc0 	call	1000eebc <__smakebuf_r>
  /*
   * Before reading from a line buffered or unbuffered file,
   * flush all line buffered output files, per the ANSI C
   * standard.
   */
  if (fp->_flags & (__SLBF | __SNBF))
100114bc:	8080030b 	ldhu	r2,12(r16)
100114c0:	10bfffcc 	andi	r2,r2,65535
100114c4:	108000cc 	andi	r2,r2,3
100114c8:	10001526 	beq	r2,zero,10011520 <__srefill_r+0x1d8>
    {
      /* Ignore this file in _fwalk to avoid potential deadlock. */
      short orig_flags = fp->_flags;
100114cc:	8080030b 	ldhu	r2,12(r16)
100114d0:	e0bffd0d 	sth	r2,-12(fp)
      fp->_flags = 1;
100114d4:	00800044 	movi	r2,1
100114d8:	8080030d 	sth	r2,12(r16)
      _CAST_VOID _fwalk (_GLOBAL_REENT, lflush);
100114dc:	008403b4 	movhi	r2,4110
100114e0:	10a45104 	addi	r2,r2,-28348
100114e4:	10800017 	ldw	r2,0(r2)
100114e8:	01440074 	movhi	r5,4097
100114ec:	2944be04 	addi	r5,r5,4856
100114f0:	1009883a 	mov	r4,r2
100114f4:	000ead40 	call	1000ead4 <_fwalk>
      fp->_flags = orig_flags;
100114f8:	e0bffd0b 	ldhu	r2,-12(fp)
100114fc:	8080030d 	sth	r2,12(r16)

      /* Now flush this file without locking it. */
      if ((fp->_flags & (__SLBF|__SWR)) == (__SLBF|__SWR))
10011500:	8080030b 	ldhu	r2,12(r16)
10011504:	10bfffcc 	andi	r2,r2,65535
10011508:	1080024c 	andi	r2,r2,9
1001150c:	10800258 	cmpnei	r2,r2,9
10011510:	1000031e 	bne	r2,zero,10011520 <__srefill_r+0x1d8>
	__sflush_r (ptr, fp);
10011514:	800b883a 	mov	r5,r16
10011518:	e13ffe17 	ldw	r4,-8(fp)
1001151c:	000d3a80 	call	1000d3a8 <__sflush_r>
    }

  fp->_p = fp->_bf._base;
10011520:	80800417 	ldw	r2,16(r16)
10011524:	80800015 	stw	r2,0(r16)
  fp->_r = fp->_read (ptr, fp->_cookie, (char *) fp->_p, fp->_bf._size);
10011528:	80800817 	ldw	r2,32(r16)
1001152c:	80c00717 	ldw	r3,28(r16)
10011530:	81000017 	ldw	r4,0(r16)
10011534:	81400517 	ldw	r5,20(r16)
10011538:	280f883a 	mov	r7,r5
1001153c:	200d883a 	mov	r6,r4
10011540:	180b883a 	mov	r5,r3
10011544:	e13ffe17 	ldw	r4,-8(fp)
10011548:	103ee83a 	callr	r2
1001154c:	80800115 	stw	r2,4(r16)
#ifndef __CYGWIN__
  if (fp->_r <= 0)
10011550:	80800117 	ldw	r2,4(r16)
10011554:	00800c16 	blt	zero,r2,10011588 <__srefill_r+0x240>
  if (fp->_r > 0)
    fp->_flags &= ~__SEOF;
  else
#endif
    {
      if (fp->_r == 0)
10011558:	80800117 	ldw	r2,4(r16)
1001155c:	1000041e 	bne	r2,zero,10011570 <__srefill_r+0x228>
	fp->_flags |= __SEOF;
10011560:	8080030b 	ldhu	r2,12(r16)
10011564:	10800814 	ori	r2,r2,32
10011568:	8080030d 	sth	r2,12(r16)
1001156c:	00000406 	br	10011580 <__srefill_r+0x238>
      else
	{
	  fp->_r = 0;
10011570:	80000115 	stw	zero,4(r16)
	  fp->_flags |= __SERR;
10011574:	8080030b 	ldhu	r2,12(r16)
10011578:	10801014 	ori	r2,r2,64
1001157c:	8080030d 	sth	r2,12(r16)
	}
      return EOF;
10011580:	00bfffc4 	movi	r2,-1
10011584:	00000106 	br	1001158c <__srefill_r+0x244>
    }
  return 0;
10011588:	0005883a 	mov	r2,zero
}
1001158c:	e6ffff04 	addi	sp,fp,-4
10011590:	dfc00217 	ldw	ra,8(sp)
10011594:	df000117 	ldw	fp,4(sp)
10011598:	dc000017 	ldw	r16,0(sp)
1001159c:	dec00304 	addi	sp,sp,12
100115a0:	f800283a 	ret

100115a4 <copysign>:
	double copysign(double x, double y)
#else
	double copysign(x,y)
	double x,y;
#endif
{
100115a4:	defff304 	addi	sp,sp,-52
100115a8:	df000c15 	stw	fp,48(sp)
100115ac:	df000c04 	addi	fp,sp,48
100115b0:	e13ffc15 	stw	r4,-16(fp)
100115b4:	e17ffd15 	stw	r5,-12(fp)
100115b8:	e1bffe15 	stw	r6,-8(fp)
100115bc:	e1ffff15 	stw	r7,-4(fp)
	__uint32_t hx,hy;
	GET_HIGH_WORD(hx,x);
100115c0:	e0bffc17 	ldw	r2,-16(fp)
100115c4:	e0bff615 	stw	r2,-40(fp)
100115c8:	e0bffd17 	ldw	r2,-12(fp)
100115cc:	e0bff715 	stw	r2,-36(fp)
100115d0:	e0bff717 	ldw	r2,-36(fp)
100115d4:	e0bff415 	stw	r2,-48(fp)
	GET_HIGH_WORD(hy,y);
100115d8:	e0bffe17 	ldw	r2,-8(fp)
100115dc:	e0bff815 	stw	r2,-32(fp)
100115e0:	e0bfff17 	ldw	r2,-4(fp)
100115e4:	e0bff915 	stw	r2,-28(fp)
100115e8:	e0bff917 	ldw	r2,-28(fp)
100115ec:	e0bff515 	stw	r2,-44(fp)
	SET_HIGH_WORD(x,(hx&0x7fffffff)|(hy&0x80000000));
100115f0:	e0bffc17 	ldw	r2,-16(fp)
100115f4:	e0bffa15 	stw	r2,-24(fp)
100115f8:	e0bffd17 	ldw	r2,-12(fp)
100115fc:	e0bffb15 	stw	r2,-20(fp)
10011600:	e0fff417 	ldw	r3,-48(fp)
10011604:	00a00034 	movhi	r2,32768
10011608:	10bfffc4 	addi	r2,r2,-1
1001160c:	1886703a 	and	r3,r3,r2
10011610:	e0bff517 	ldw	r2,-44(fp)
10011614:	10a0002c 	andhi	r2,r2,32768
10011618:	1884b03a 	or	r2,r3,r2
1001161c:	e0bffb15 	stw	r2,-20(fp)
10011620:	e0bffa17 	ldw	r2,-24(fp)
10011624:	e0bffc15 	stw	r2,-16(fp)
10011628:	e0bffb17 	ldw	r2,-20(fp)
1001162c:	e0bffd15 	stw	r2,-12(fp)
        return x;
10011630:	e0bffc17 	ldw	r2,-16(fp)
10011634:	e0fffd17 	ldw	r3,-12(fp)
10011638:	1009883a 	mov	r4,r2
1001163c:	180b883a 	mov	r5,r3
}
10011640:	2005883a 	mov	r2,r4
10011644:	2807883a 	mov	r3,r5
10011648:	e037883a 	mov	sp,fp
1001164c:	df000017 	ldw	fp,0(sp)
10011650:	dec00104 	addi	sp,sp,4
10011654:	f800283a 	ret

10011658 <finite>:
	int finite(double x)
#else
	int finite(x)
	double x;
#endif
{
10011658:	defffa04 	addi	sp,sp,-24
1001165c:	df000515 	stw	fp,20(sp)
10011660:	df000504 	addi	fp,sp,20
10011664:	e13ffe15 	stw	r4,-8(fp)
10011668:	e17fff15 	stw	r5,-4(fp)
	__int32_t hx;
	GET_HIGH_WORD(hx,x);
1001166c:	e0bffe17 	ldw	r2,-8(fp)
10011670:	e0bffc15 	stw	r2,-16(fp)
10011674:	e0bfff17 	ldw	r2,-4(fp)
10011678:	e0bffd15 	stw	r2,-12(fp)
1001167c:	e0bffd17 	ldw	r2,-12(fp)
10011680:	e0bffb15 	stw	r2,-20(fp)
	return  (int)((__uint32_t)((hx&0x7fffffff)-0x7ff00000)>>31);
10011684:	e0fffb17 	ldw	r3,-20(fp)
10011688:	00a00034 	movhi	r2,32768
1001168c:	10bfffc4 	addi	r2,r2,-1
10011690:	1886703a 	and	r3,r3,r2
10011694:	00a00434 	movhi	r2,32784
10011698:	1885883a 	add	r2,r3,r2
1001169c:	1004d7fa 	srli	r2,r2,31
}
100116a0:	e037883a 	mov	sp,fp
100116a4:	df000017 	ldw	fp,0(sp)
100116a8:	dec00104 	addi	sp,sp,4
100116ac:	f800283a 	ret

100116b0 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
100116b0:	defff904 	addi	sp,sp,-28
100116b4:	df000615 	stw	fp,24(sp)
100116b8:	df000604 	addi	fp,sp,24
100116bc:	e13ffe15 	stw	r4,-8(fp)
100116c0:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
100116c4:	e0bffe17 	ldw	r2,-8(fp)
100116c8:	e0bffc15 	stw	r2,-16(fp)
100116cc:	e0bfff17 	ldw	r2,-4(fp)
100116d0:	e0bffd15 	stw	r2,-12(fp)
100116d4:	e0bffd17 	ldw	r2,-12(fp)
100116d8:	e0bffa15 	stw	r2,-24(fp)
100116dc:	e0bffc17 	ldw	r2,-16(fp)
100116e0:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
100116e4:	e0bffa17 	ldw	r2,-24(fp)
100116e8:	1000021e 	bne	r2,zero,100116f4 <__fpclassifyd+0x44>
100116ec:	e0bffb17 	ldw	r2,-20(fp)
100116f0:	10000526 	beq	r2,zero,10011708 <__fpclassifyd+0x58>
100116f4:	e0fffa17 	ldw	r3,-24(fp)
100116f8:	00a00034 	movhi	r2,32768
100116fc:	1880041e 	bne	r3,r2,10011710 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
10011700:	e0bffb17 	ldw	r2,-20(fp)
10011704:	1000021e 	bne	r2,zero,10011710 <__fpclassifyd+0x60>
    return FP_ZERO;
10011708:	00800084 	movi	r2,2
1001170c:	00002506 	br	100117a4 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
10011710:	e0fffa17 	ldw	r3,-24(fp)
10011714:	00800434 	movhi	r2,16
10011718:	18800336 	bltu	r3,r2,10011728 <__fpclassifyd+0x78>
1001171c:	e0fffa17 	ldw	r3,-24(fp)
10011720:	009ffc34 	movhi	r2,32752
10011724:	18800636 	bltu	r3,r2,10011740 <__fpclassifyd+0x90>
10011728:	e0fffa17 	ldw	r3,-24(fp)
1001172c:	00a00434 	movhi	r2,32784
10011730:	18800536 	bltu	r3,r2,10011748 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
10011734:	e0fffa17 	ldw	r3,-24(fp)
10011738:	00bffc34 	movhi	r2,65520
1001173c:	1880022e 	bgeu	r3,r2,10011748 <__fpclassifyd+0x98>
    return FP_NORMAL;
10011740:	00800104 	movi	r2,4
10011744:	00001706 	br	100117a4 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
10011748:	e0fffa17 	ldw	r3,-24(fp)
1001174c:	00800434 	movhi	r2,16
10011750:	18800536 	bltu	r3,r2,10011768 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
10011754:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
10011758:	1000050e 	bge	r2,zero,10011770 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
1001175c:	e0fffa17 	ldw	r3,-24(fp)
10011760:	00a00434 	movhi	r2,32784
10011764:	1880022e 	bgeu	r3,r2,10011770 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
10011768:	008000c4 	movi	r2,3
1001176c:	00000d06 	br	100117a4 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
10011770:	e0fffa17 	ldw	r3,-24(fp)
10011774:	009ffc34 	movhi	r2,32752
10011778:	1880021e 	bne	r3,r2,10011784 <__fpclassifyd+0xd4>
1001177c:	e0bffb17 	ldw	r2,-20(fp)
10011780:	10000526 	beq	r2,zero,10011798 <__fpclassifyd+0xe8>
10011784:	e0fffa17 	ldw	r3,-24(fp)
10011788:	00bffc34 	movhi	r2,65520
1001178c:	1880041e 	bne	r3,r2,100117a0 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
10011790:	e0bffb17 	ldw	r2,-20(fp)
10011794:	1000021e 	bne	r2,zero,100117a0 <__fpclassifyd+0xf0>
    return FP_INFINITE;
10011798:	00800044 	movi	r2,1
1001179c:	00000106 	br	100117a4 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
100117a0:	0005883a 	mov	r2,zero
}
100117a4:	e037883a 	mov	sp,fp
100117a8:	df000017 	ldw	fp,0(sp)
100117ac:	dec00104 	addi	sp,sp,4
100117b0:	f800283a 	ret

100117b4 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
100117b4:	defff804 	addi	sp,sp,-32
100117b8:	dfc00715 	stw	ra,28(sp)
100117bc:	df000615 	stw	fp,24(sp)
100117c0:	dc400515 	stw	r17,20(sp)
100117c4:	dc000415 	stw	r16,16(sp)
100117c8:	df000604 	addi	fp,sp,24
100117cc:	e13ffa15 	stw	r4,-24(fp)
100117d0:	e17ffb15 	stw	r5,-20(fp)
100117d4:	e1bffc15 	stw	r6,-16(fp)
100117d8:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
100117dc:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
100117e0:	8080038b 	ldhu	r2,14(r16)
100117e4:	10bfffcc 	andi	r2,r2,65535
100117e8:	10a0001c 	xori	r2,r2,32768
100117ec:	10a00004 	addi	r2,r2,-32768
100117f0:	e0fffd17 	ldw	r3,-12(fp)
100117f4:	180f883a 	mov	r7,r3
100117f8:	e1bffc17 	ldw	r6,-16(fp)
100117fc:	100b883a 	mov	r5,r2
10011800:	e13ffa17 	ldw	r4,-24(fp)
10011804:	00139500 	call	10013950 <_read_r>
10011808:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
1001180c:	88000416 	blt	r17,zero,10011820 <__sread+0x6c>
    fp->_offset += ret;
10011810:	80801417 	ldw	r2,80(r16)
10011814:	1445883a 	add	r2,r2,r17
10011818:	80801415 	stw	r2,80(r16)
1001181c:	00000406 	br	10011830 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
10011820:	80c0030b 	ldhu	r3,12(r16)
10011824:	00bbffc4 	movi	r2,-4097
10011828:	1884703a 	and	r2,r3,r2
1001182c:	8080030d 	sth	r2,12(r16)
  return ret;
10011830:	8805883a 	mov	r2,r17
}
10011834:	e6fffe04 	addi	sp,fp,-8
10011838:	dfc00317 	ldw	ra,12(sp)
1001183c:	df000217 	ldw	fp,8(sp)
10011840:	dc400117 	ldw	r17,4(sp)
10011844:	dc000017 	ldw	r16,0(sp)
10011848:	dec00404 	addi	sp,sp,16
1001184c:	f800283a 	ret

10011850 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
10011850:	defffb04 	addi	sp,sp,-20
10011854:	df000415 	stw	fp,16(sp)
10011858:	df000404 	addi	fp,sp,16
1001185c:	e13ffc15 	stw	r4,-16(fp)
10011860:	e17ffd15 	stw	r5,-12(fp)
10011864:	e1bffe15 	stw	r6,-8(fp)
10011868:	e1ffff15 	stw	r7,-4(fp)
  return 0;
1001186c:	0005883a 	mov	r2,zero
}
10011870:	e037883a 	mov	sp,fp
10011874:	df000017 	ldw	fp,0(sp)
10011878:	dec00104 	addi	sp,sp,4
1001187c:	f800283a 	ret

10011880 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
10011880:	defff804 	addi	sp,sp,-32
10011884:	dfc00715 	stw	ra,28(sp)
10011888:	df000615 	stw	fp,24(sp)
1001188c:	dc000515 	stw	r16,20(sp)
10011890:	df000604 	addi	fp,sp,24
10011894:	e13ffb15 	stw	r4,-20(fp)
10011898:	e17ffc15 	stw	r5,-16(fp)
1001189c:	e1bffd15 	stw	r6,-12(fp)
100118a0:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
100118a4:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
100118a8:	8080030b 	ldhu	r2,12(r16)
100118ac:	10bfffcc 	andi	r2,r2,65535
100118b0:	1080400c 	andi	r2,r2,256
100118b4:	10000926 	beq	r2,zero,100118dc <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
100118b8:	8080038b 	ldhu	r2,14(r16)
100118bc:	10bfffcc 	andi	r2,r2,65535
100118c0:	10a0001c 	xori	r2,r2,32768
100118c4:	10a00004 	addi	r2,r2,-32768
100118c8:	01c00084 	movi	r7,2
100118cc:	000d883a 	mov	r6,zero
100118d0:	100b883a 	mov	r5,r2
100118d4:	e13ffb17 	ldw	r4,-20(fp)
100118d8:	00138c80 	call	100138c8 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
100118dc:	80c0030b 	ldhu	r3,12(r16)
100118e0:	00bbffc4 	movi	r2,-4097
100118e4:	1884703a 	and	r2,r3,r2
100118e8:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
100118ec:	8080038b 	ldhu	r2,14(r16)
100118f0:	10bfffcc 	andi	r2,r2,65535
100118f4:	10a0001c 	xori	r2,r2,32768
100118f8:	10a00004 	addi	r2,r2,-32768
100118fc:	e0fffe17 	ldw	r3,-8(fp)
10011900:	180f883a 	mov	r7,r3
10011904:	e1bffd17 	ldw	r6,-12(fp)
10011908:	100b883a 	mov	r5,r2
1001190c:	e13ffb17 	ldw	r4,-20(fp)
10011910:	00132780 	call	10013278 <_write_r>
10011914:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
10011918:	e0bffa17 	ldw	r2,-24(fp)
}
1001191c:	e6ffff04 	addi	sp,fp,-4
10011920:	dfc00217 	ldw	ra,8(sp)
10011924:	df000117 	ldw	fp,4(sp)
10011928:	dc000017 	ldw	r16,0(sp)
1001192c:	dec00304 	addi	sp,sp,12
10011930:	f800283a 	ret

10011934 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
10011934:	defff804 	addi	sp,sp,-32
10011938:	dfc00715 	stw	ra,28(sp)
1001193c:	df000615 	stw	fp,24(sp)
10011940:	dc400515 	stw	r17,20(sp)
10011944:	dc000415 	stw	r16,16(sp)
10011948:	df000604 	addi	fp,sp,24
1001194c:	e13ffa15 	stw	r4,-24(fp)
10011950:	e17ffb15 	stw	r5,-20(fp)
10011954:	e1bffc15 	stw	r6,-16(fp)
10011958:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
1001195c:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
10011960:	8080038b 	ldhu	r2,14(r16)
10011964:	10bfffcc 	andi	r2,r2,65535
10011968:	10a0001c 	xori	r2,r2,32768
1001196c:	10a00004 	addi	r2,r2,-32768
10011970:	e1fffd17 	ldw	r7,-12(fp)
10011974:	e1bffc17 	ldw	r6,-16(fp)
10011978:	100b883a 	mov	r5,r2
1001197c:	e13ffa17 	ldw	r4,-24(fp)
10011980:	00138c80 	call	100138c8 <_lseek_r>
10011984:	1023883a 	mov	r17,r2
  if (ret == -1L)
10011988:	88bfffd8 	cmpnei	r2,r17,-1
1001198c:	1000051e 	bne	r2,zero,100119a4 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
10011990:	80c0030b 	ldhu	r3,12(r16)
10011994:	00bbffc4 	movi	r2,-4097
10011998:	1884703a 	and	r2,r3,r2
1001199c:	8080030d 	sth	r2,12(r16)
100119a0:	00000406 	br	100119b4 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
100119a4:	8080030b 	ldhu	r2,12(r16)
100119a8:	10840014 	ori	r2,r2,4096
100119ac:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
100119b0:	84401415 	stw	r17,80(r16)
    }
  return ret;
100119b4:	8805883a 	mov	r2,r17
}
100119b8:	e6fffe04 	addi	sp,fp,-8
100119bc:	dfc00317 	ldw	ra,12(sp)
100119c0:	df000217 	ldw	fp,8(sp)
100119c4:	dc400117 	ldw	r17,4(sp)
100119c8:	dc000017 	ldw	r16,0(sp)
100119cc:	dec00404 	addi	sp,sp,16
100119d0:	f800283a 	ret

100119d4 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
100119d4:	defffb04 	addi	sp,sp,-20
100119d8:	dfc00415 	stw	ra,16(sp)
100119dc:	df000315 	stw	fp,12(sp)
100119e0:	df000304 	addi	fp,sp,12
100119e4:	e13ffe15 	stw	r4,-8(fp)
100119e8:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
100119ec:	e0bfff17 	ldw	r2,-4(fp)
100119f0:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
100119f4:	e0bffd17 	ldw	r2,-12(fp)
100119f8:	1080038b 	ldhu	r2,14(r2)
100119fc:	10bfffcc 	andi	r2,r2,65535
10011a00:	10a0001c 	xori	r2,r2,32768
10011a04:	10a00004 	addi	r2,r2,-32768
10011a08:	100b883a 	mov	r5,r2
10011a0c:	e13ffe17 	ldw	r4,-8(fp)
10011a10:	00133000 	call	10013300 <_close_r>
}
10011a14:	e037883a 	mov	sp,fp
10011a18:	dfc00117 	ldw	ra,4(sp)
10011a1c:	df000017 	ldw	fp,0(sp)
10011a20:	dec00204 	addi	sp,sp,8
10011a24:	f800283a 	ret

10011a28 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
10011a28:	defffb04 	addi	sp,sp,-20
10011a2c:	df000415 	stw	fp,16(sp)
10011a30:	df000404 	addi	fp,sp,16
10011a34:	e13ffe15 	stw	r4,-8(fp)
10011a38:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
10011a3c:	e0fffe17 	ldw	r3,-8(fp)
10011a40:	e0bfff17 	ldw	r2,-4(fp)
10011a44:	1884b03a 	or	r2,r3,r2
10011a48:	108000cc 	andi	r2,r2,3
10011a4c:	10002a1e 	bne	r2,zero,10011af8 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
10011a50:	e0bffe17 	ldw	r2,-8(fp)
10011a54:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
10011a58:	e0bfff17 	ldw	r2,-4(fp)
10011a5c:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
10011a60:	00001506 	br	10011ab8 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
10011a64:	e0bffc17 	ldw	r2,-16(fp)
10011a68:	10c00017 	ldw	r3,0(r2)
10011a6c:	00bfbff4 	movhi	r2,65279
10011a70:	10bfbfc4 	addi	r2,r2,-257
10011a74:	1887883a 	add	r3,r3,r2
10011a78:	e0bffc17 	ldw	r2,-16(fp)
10011a7c:	10800017 	ldw	r2,0(r2)
10011a80:	0084303a 	nor	r2,zero,r2
10011a84:	1886703a 	and	r3,r3,r2
10011a88:	00a02074 	movhi	r2,32897
10011a8c:	10a02004 	addi	r2,r2,-32640
10011a90:	1884703a 	and	r2,r3,r2
10011a94:	10000226 	beq	r2,zero,10011aa0 <strcmp+0x78>
	    return 0;
10011a98:	0005883a 	mov	r2,zero
10011a9c:	00002e06 	br	10011b58 <strcmp+0x130>

          a1++;
10011aa0:	e0bffc17 	ldw	r2,-16(fp)
10011aa4:	10800104 	addi	r2,r2,4
10011aa8:	e0bffc15 	stw	r2,-16(fp)
          a2++;
10011aac:	e0bffd17 	ldw	r2,-12(fp)
10011ab0:	10800104 	addi	r2,r2,4
10011ab4:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
10011ab8:	e0bffc17 	ldw	r2,-16(fp)
10011abc:	10c00017 	ldw	r3,0(r2)
10011ac0:	e0bffd17 	ldw	r2,-12(fp)
10011ac4:	10800017 	ldw	r2,0(r2)
10011ac8:	18bfe626 	beq	r3,r2,10011a64 <__alt_data_end+0xf8011a64>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
10011acc:	e0bffc17 	ldw	r2,-16(fp)
10011ad0:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
10011ad4:	e0bffd17 	ldw	r2,-12(fp)
10011ad8:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
10011adc:	00000606 	br	10011af8 <strcmp+0xd0>
    {
      s1++;
10011ae0:	e0bffe17 	ldw	r2,-8(fp)
10011ae4:	10800044 	addi	r2,r2,1
10011ae8:	e0bffe15 	stw	r2,-8(fp)
      s2++;
10011aec:	e0bfff17 	ldw	r2,-4(fp)
10011af0:	10800044 	addi	r2,r2,1
10011af4:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
10011af8:	e0bffe17 	ldw	r2,-8(fp)
10011afc:	10800003 	ldbu	r2,0(r2)
10011b00:	10803fcc 	andi	r2,r2,255
10011b04:	1080201c 	xori	r2,r2,128
10011b08:	10bfe004 	addi	r2,r2,-128
10011b0c:	10000b26 	beq	r2,zero,10011b3c <strcmp+0x114>
10011b10:	e0bffe17 	ldw	r2,-8(fp)
10011b14:	10c00003 	ldbu	r3,0(r2)
10011b18:	e0bfff17 	ldw	r2,-4(fp)
10011b1c:	10800003 	ldbu	r2,0(r2)
10011b20:	18c03fcc 	andi	r3,r3,255
10011b24:	18c0201c 	xori	r3,r3,128
10011b28:	18ffe004 	addi	r3,r3,-128
10011b2c:	10803fcc 	andi	r2,r2,255
10011b30:	1080201c 	xori	r2,r2,128
10011b34:	10bfe004 	addi	r2,r2,-128
10011b38:	18bfe926 	beq	r3,r2,10011ae0 <__alt_data_end+0xf8011ae0>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
10011b3c:	e0bffe17 	ldw	r2,-8(fp)
10011b40:	10800003 	ldbu	r2,0(r2)
10011b44:	10c03fcc 	andi	r3,r2,255
10011b48:	e0bfff17 	ldw	r2,-4(fp)
10011b4c:	10800003 	ldbu	r2,0(r2)
10011b50:	10803fcc 	andi	r2,r2,255
10011b54:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10011b58:	e037883a 	mov	sp,fp
10011b5c:	df000017 	ldw	fp,0(sp)
10011b60:	dec00104 	addi	sp,sp,4
10011b64:	f800283a 	ret

10011b68 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
10011b68:	defff604 	addi	sp,sp,-40
10011b6c:	dfc00915 	stw	ra,36(sp)
10011b70:	df000815 	stw	fp,32(sp)
10011b74:	dc400715 	stw	r17,28(sp)
10011b78:	dc000615 	stw	r16,24(sp)
10011b7c:	df000804 	addi	fp,sp,32
10011b80:	e13ffc15 	stw	r4,-16(fp)
10011b84:	e17ffd15 	stw	r5,-12(fp)
10011b88:	3021883a 	mov	r16,r6
	register int err = 0;
10011b8c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
10011b90:	80800217 	ldw	r2,8(r16)
10011b94:	1000031e 	bne	r2,zero,10011ba4 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
10011b98:	80000115 	stw	zero,4(r16)
		return (0);
10011b9c:	0005883a 	mov	r2,zero
10011ba0:	00003906 	br	10011c88 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
10011ba4:	e0bffd17 	ldw	r2,-12(fp)
10011ba8:	10801917 	ldw	r2,100(r2)
10011bac:	1088000c 	andi	r2,r2,8192
10011bb0:	10002d26 	beq	r2,zero,10011c68 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
10011bb4:	80800017 	ldw	r2,0(r16)
10011bb8:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
10011bbc:	00002706 	br	10011c5c <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
10011bc0:	e0bff817 	ldw	r2,-32(fp)
10011bc4:	10800017 	ldw	r2,0(r2)
10011bc8:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
10011bcc:	e0bff817 	ldw	r2,-32(fp)
10011bd0:	10800117 	ldw	r2,4(r2)
10011bd4:	1004d0ba 	srli	r2,r2,2
10011bd8:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
10011bdc:	e03ff915 	stw	zero,-28(fp)
10011be0:	00001206 	br	10011c2c <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
10011be4:	e0bff917 	ldw	r2,-28(fp)
10011be8:	1085883a 	add	r2,r2,r2
10011bec:	1085883a 	add	r2,r2,r2
10011bf0:	1007883a 	mov	r3,r2
10011bf4:	e0bffa17 	ldw	r2,-24(fp)
10011bf8:	10c5883a 	add	r2,r2,r3
10011bfc:	10800017 	ldw	r2,0(r2)
10011c00:	e1bffd17 	ldw	r6,-12(fp)
10011c04:	100b883a 	mov	r5,r2
10011c08:	e13ffc17 	ldw	r4,-16(fp)
10011c0c:	00136d80 	call	100136d8 <_fputwc_r>
10011c10:	10bfffd8 	cmpnei	r2,r2,-1
10011c14:	1000021e 	bne	r2,zero,10011c20 <__sprint_r+0xb8>
					err = -1;
10011c18:	047fffc4 	movi	r17,-1
					goto out;
10011c1c:	00001706 	br	10011c7c <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
10011c20:	e0bff917 	ldw	r2,-28(fp)
10011c24:	10800044 	addi	r2,r2,1
10011c28:	e0bff915 	stw	r2,-28(fp)
10011c2c:	e0fff917 	ldw	r3,-28(fp)
10011c30:	e0bffb17 	ldw	r2,-20(fp)
10011c34:	18bfeb16 	blt	r3,r2,10011be4 <__alt_data_end+0xf8011be4>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
10011c38:	80c00217 	ldw	r3,8(r16)
10011c3c:	e0bffb17 	ldw	r2,-20(fp)
10011c40:	1085883a 	add	r2,r2,r2
10011c44:	1085883a 	add	r2,r2,r2
10011c48:	1885c83a 	sub	r2,r3,r2
10011c4c:	80800215 	stw	r2,8(r16)
10011c50:	e0bff817 	ldw	r2,-32(fp)
10011c54:	10800204 	addi	r2,r2,8
10011c58:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
10011c5c:	80800217 	ldw	r2,8(r16)
10011c60:	103fd71e 	bne	r2,zero,10011bc0 <__alt_data_end+0xf8011bc0>
10011c64:	00000506 	br	10011c7c <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
10011c68:	800d883a 	mov	r6,r16
10011c6c:	e17ffd17 	ldw	r5,-12(fp)
10011c70:	e13ffc17 	ldw	r4,-16(fp)
10011c74:	000e4ec0 	call	1000e4ec <__sfvwrite_r>
10011c78:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
10011c7c:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
10011c80:	80000115 	stw	zero,4(r16)
	return (err);
10011c84:	8805883a 	mov	r2,r17
}
10011c88:	e6fffe04 	addi	sp,fp,-8
10011c8c:	dfc00317 	ldw	ra,12(sp)
10011c90:	df000217 	ldw	fp,8(sp)
10011c94:	dc400117 	ldw	r17,4(sp)
10011c98:	dc000017 	ldw	r16,0(sp)
10011c9c:	dec00404 	addi	sp,sp,16
10011ca0:	f800283a 	ret

10011ca4 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
10011ca4:	defedf04 	addi	sp,sp,-1156
10011ca8:	dfc12015 	stw	ra,1152(sp)
10011cac:	df011f15 	stw	fp,1148(sp)
10011cb0:	dc011e15 	stw	r16,1144(sp)
10011cb4:	df011f04 	addi	fp,sp,1148
10011cb8:	e13ffc15 	stw	r4,-16(fp)
10011cbc:	2821883a 	mov	r16,r5
10011cc0:	e1bffd15 	stw	r6,-12(fp)
10011cc4:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
10011cc8:	80c0030b 	ldhu	r3,12(r16)
10011ccc:	00bfff44 	movi	r2,-3
10011cd0:	1884703a 	and	r2,r3,r2
10011cd4:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
10011cd8:	80801917 	ldw	r2,100(r16)
10011cdc:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
10011ce0:	8080038b 	ldhu	r2,14(r16)
10011ce4:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
10011ce8:	80800717 	ldw	r2,28(r16)
10011cec:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
10011cf0:	80800917 	ldw	r2,36(r16)
10011cf4:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
10011cf8:	e0befc04 	addi	r2,fp,-1040
10011cfc:	e0bee215 	stw	r2,-1144(fp)
10011d00:	e0bee217 	ldw	r2,-1144(fp)
10011d04:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
10011d08:	00810004 	movi	r2,1024
10011d0c:	e0bee415 	stw	r2,-1136(fp)
10011d10:	e0bee417 	ldw	r2,-1136(fp)
10011d14:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
10011d18:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
10011d1c:	e0bee204 	addi	r2,fp,-1144
10011d20:	e1fffe17 	ldw	r7,-8(fp)
10011d24:	e1bffd17 	ldw	r6,-12(fp)
10011d28:	100b883a 	mov	r5,r2
10011d2c:	e13ffc17 	ldw	r4,-16(fp)
10011d30:	0011dec0 	call	10011dec <___vfiprintf_internal_r>
10011d34:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
10011d38:	e0bee117 	ldw	r2,-1148(fp)
10011d3c:	10000716 	blt	r2,zero,10011d5c <__sbprintf+0xb8>
10011d40:	e0bee204 	addi	r2,fp,-1144
10011d44:	100b883a 	mov	r5,r2
10011d48:	e13ffc17 	ldw	r4,-16(fp)
10011d4c:	000d6ac0 	call	1000d6ac <_fflush_r>
10011d50:	10000226 	beq	r2,zero,10011d5c <__sbprintf+0xb8>
		ret = EOF;
10011d54:	00bfffc4 	movi	r2,-1
10011d58:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
10011d5c:	e0bee50b 	ldhu	r2,-1132(fp)
10011d60:	10bfffcc 	andi	r2,r2,65535
10011d64:	1080100c 	andi	r2,r2,64
10011d68:	10000326 	beq	r2,zero,10011d78 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
10011d6c:	8080030b 	ldhu	r2,12(r16)
10011d70:	10801014 	ori	r2,r2,64
10011d74:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
10011d78:	e0bee117 	ldw	r2,-1148(fp)
}
10011d7c:	e6ffff04 	addi	sp,fp,-4
10011d80:	dfc00217 	ldw	ra,8(sp)
10011d84:	df000117 	ldw	fp,4(sp)
10011d88:	dc000017 	ldw	r16,0(sp)
10011d8c:	dec00304 	addi	sp,sp,12
10011d90:	f800283a 	ret

10011d94 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
10011d94:	defffa04 	addi	sp,sp,-24
10011d98:	dfc00515 	stw	ra,20(sp)
10011d9c:	df000415 	stw	fp,16(sp)
10011da0:	df000404 	addi	fp,sp,16
10011da4:	e13ffd15 	stw	r4,-12(fp)
10011da8:	e17ffe15 	stw	r5,-8(fp)
10011dac:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
10011db0:	008403b4 	movhi	r2,4110
10011db4:	10a45004 	addi	r2,r2,-28352
10011db8:	10800017 	ldw	r2,0(r2)
10011dbc:	e1ffff17 	ldw	r7,-4(fp)
10011dc0:	e1bffe17 	ldw	r6,-8(fp)
10011dc4:	e17ffd17 	ldw	r5,-12(fp)
10011dc8:	1009883a 	mov	r4,r2
10011dcc:	0011dec0 	call	10011dec <___vfiprintf_internal_r>
10011dd0:	e0bffc15 	stw	r2,-16(fp)
  return result;
10011dd4:	e0bffc17 	ldw	r2,-16(fp)
}
10011dd8:	e037883a 	mov	sp,fp
10011ddc:	dfc00117 	ldw	ra,4(sp)
10011de0:	df000017 	ldw	fp,0(sp)
10011de4:	dec00204 	addi	sp,sp,8
10011de8:	f800283a 	ret

10011dec <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
10011dec:	deffb704 	addi	sp,sp,-292
10011df0:	dfc04815 	stw	ra,288(sp)
10011df4:	df004715 	stw	fp,284(sp)
10011df8:	ddc04615 	stw	r23,280(sp)
10011dfc:	dd804515 	stw	r22,276(sp)
10011e00:	dd404415 	stw	r21,272(sp)
10011e04:	dd004315 	stw	r20,268(sp)
10011e08:	dcc04215 	stw	r19,264(sp)
10011e0c:	dc804115 	stw	r18,260(sp)
10011e10:	dc404015 	stw	r17,256(sp)
10011e14:	dc003f15 	stw	r16,252(sp)
10011e18:	df004704 	addi	fp,sp,284
10011e1c:	e13fe615 	stw	r4,-104(fp)
10011e20:	e17fe715 	stw	r5,-100(fp)
10011e24:	e1bfe815 	stw	r6,-96(fp)
10011e28:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
10011e2c:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
10011e30:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
10011e34:	e0bfe617 	ldw	r2,-104(fp)
10011e38:	e0bfc415 	stw	r2,-240(fp)
10011e3c:	e0bfc417 	ldw	r2,-240(fp)
10011e40:	10000526 	beq	r2,zero,10011e58 <___vfiprintf_internal_r+0x6c>
10011e44:	e0bfc417 	ldw	r2,-240(fp)
10011e48:	10800e17 	ldw	r2,56(r2)
10011e4c:	1000021e 	bne	r2,zero,10011e58 <___vfiprintf_internal_r+0x6c>
10011e50:	e13fc417 	ldw	r4,-240(fp)
10011e54:	000db740 	call	1000db74 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
10011e58:	e0bfe717 	ldw	r2,-100(fp)
10011e5c:	1080030b 	ldhu	r2,12(r2)
10011e60:	10bfffcc 	andi	r2,r2,65535
10011e64:	1088000c 	andi	r2,r2,8192
10011e68:	10000c1e 	bne	r2,zero,10011e9c <___vfiprintf_internal_r+0xb0>
10011e6c:	e0bfe717 	ldw	r2,-100(fp)
10011e70:	1080030b 	ldhu	r2,12(r2)
10011e74:	10880014 	ori	r2,r2,8192
10011e78:	1007883a 	mov	r3,r2
10011e7c:	e0bfe717 	ldw	r2,-100(fp)
10011e80:	10c0030d 	sth	r3,12(r2)
10011e84:	e0bfe717 	ldw	r2,-100(fp)
10011e88:	10c01917 	ldw	r3,100(r2)
10011e8c:	00b7ffc4 	movi	r2,-8193
10011e90:	1886703a 	and	r3,r3,r2
10011e94:	e0bfe717 	ldw	r2,-100(fp)
10011e98:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
10011e9c:	e0bfe717 	ldw	r2,-100(fp)
10011ea0:	1080030b 	ldhu	r2,12(r2)
10011ea4:	10bfffcc 	andi	r2,r2,65535
10011ea8:	1080020c 	andi	r2,r2,8
10011eac:	10000326 	beq	r2,zero,10011ebc <___vfiprintf_internal_r+0xd0>
10011eb0:	e0bfe717 	ldw	r2,-100(fp)
10011eb4:	10800417 	ldw	r2,16(r2)
10011eb8:	1000061e 	bne	r2,zero,10011ed4 <___vfiprintf_internal_r+0xe8>
10011ebc:	e17fe717 	ldw	r5,-100(fp)
10011ec0:	e13fe617 	ldw	r4,-104(fp)
10011ec4:	000b29c0 	call	1000b29c <__swsetup_r>
10011ec8:	10000226 	beq	r2,zero,10011ed4 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
10011ecc:	00bfffc4 	movi	r2,-1
10011ed0:	00047006 	br	10013094 <___vfiprintf_internal_r+0x12a8>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10011ed4:	e0bfe717 	ldw	r2,-100(fp)
10011ed8:	1080030b 	ldhu	r2,12(r2)
10011edc:	10bfffcc 	andi	r2,r2,65535
10011ee0:	1080068c 	andi	r2,r2,26
10011ee4:	10800298 	cmpnei	r2,r2,10
10011ee8:	10000c1e 	bne	r2,zero,10011f1c <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
10011eec:	e0bfe717 	ldw	r2,-100(fp)
10011ef0:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10011ef4:	10bfffcc 	andi	r2,r2,65535
10011ef8:	10a0001c 	xori	r2,r2,32768
10011efc:	10a00004 	addi	r2,r2,-32768
10011f00:	10000616 	blt	r2,zero,10011f1c <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
10011f04:	e1ffe917 	ldw	r7,-92(fp)
10011f08:	e1bfe817 	ldw	r6,-96(fp)
10011f0c:	e17fe717 	ldw	r5,-100(fp)
10011f10:	e13fe617 	ldw	r4,-104(fp)
10011f14:	0011ca40 	call	10011ca4 <__sbprintf>
10011f18:	00045e06 	br	10013094 <___vfiprintf_internal_r+0x12a8>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
10011f1c:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
10011f20:	e4bfcb04 	addi	r18,fp,-212
10011f24:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
10011f28:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
10011f2c:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
10011f30:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
10011f34:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10011f38:	00000106 	br	10011f40 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
10011f3c:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10011f40:	a8800003 	ldbu	r2,0(r21)
10011f44:	10803fcc 	andi	r2,r2,255
10011f48:	1080201c 	xori	r2,r2,128
10011f4c:	10bfe004 	addi	r2,r2,-128
10011f50:	10000626 	beq	r2,zero,10011f6c <___vfiprintf_internal_r+0x180>
10011f54:	a8800003 	ldbu	r2,0(r21)
10011f58:	10803fcc 	andi	r2,r2,255
10011f5c:	1080201c 	xori	r2,r2,128
10011f60:	10bfe004 	addi	r2,r2,-128
10011f64:	10800958 	cmpnei	r2,r2,37
10011f68:	103ff41e 	bne	r2,zero,10011f3c <__alt_data_end+0xf8011f3c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
10011f6c:	a807883a 	mov	r3,r21
10011f70:	a005883a 	mov	r2,r20
10011f74:	18a1c83a 	sub	r16,r3,r2
10011f78:	80001826 	beq	r16,zero,10011fdc <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
10011f7c:	95000015 	stw	r20,0(r18)
10011f80:	8005883a 	mov	r2,r16
10011f84:	90800115 	stw	r2,4(r18)
10011f88:	e0bfca17 	ldw	r2,-216(fp)
10011f8c:	8007883a 	mov	r3,r16
10011f90:	10c5883a 	add	r2,r2,r3
10011f94:	e0bfca15 	stw	r2,-216(fp)
10011f98:	94800204 	addi	r18,r18,8
10011f9c:	e0bfc917 	ldw	r2,-220(fp)
10011fa0:	10800044 	addi	r2,r2,1
10011fa4:	e0bfc915 	stw	r2,-220(fp)
10011fa8:	e0bfc917 	ldw	r2,-220(fp)
10011fac:	10800210 	cmplti	r2,r2,8
10011fb0:	1000071e 	bne	r2,zero,10011fd0 <___vfiprintf_internal_r+0x1e4>
10011fb4:	e0bfc804 	addi	r2,fp,-224
10011fb8:	100d883a 	mov	r6,r2
10011fbc:	e17fe717 	ldw	r5,-100(fp)
10011fc0:	e13fe617 	ldw	r4,-104(fp)
10011fc4:	0011b680 	call	10011b68 <__sprint_r>
10011fc8:	1004091e 	bne	r2,zero,10012ff0 <___vfiprintf_internal_r+0x1204>
10011fcc:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
10011fd0:	e0bfb917 	ldw	r2,-284(fp)
10011fd4:	1405883a 	add	r2,r2,r16
10011fd8:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
10011fdc:	a8800003 	ldbu	r2,0(r21)
10011fe0:	10803fcc 	andi	r2,r2,255
10011fe4:	1080201c 	xori	r2,r2,128
10011fe8:	10bfe004 	addi	r2,r2,-128
10011fec:	1003f226 	beq	r2,zero,10012fb8 <___vfiprintf_internal_r+0x11cc>
                    goto done;
#endif
		fmt_anchor = fmt;
10011ff0:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
10011ff4:	ad400044 	addi	r21,r21,1

		flags = 0;
10011ff8:	0027883a 	mov	r19,zero
		dprec = 0;
10011ffc:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
10012000:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
10012004:	00bfffc4 	movi	r2,-1
10012008:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
1001200c:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
10012010:	a805883a 	mov	r2,r21
10012014:	15400044 	addi	r21,r2,1
10012018:	10800003 	ldbu	r2,0(r2)
1001201c:	14403fcc 	andi	r17,r2,255
10012020:	8c40201c 	xori	r17,r17,128
10012024:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
10012028:	88bff804 	addi	r2,r17,-32
1001202c:	10c01668 	cmpgeui	r3,r2,89
10012030:	18028e1e 	bne	r3,zero,10012a6c <___vfiprintf_internal_r+0xc80>
10012034:	100690ba 	slli	r3,r2,2
10012038:	00840074 	movhi	r2,4097
1001203c:	10881304 	addi	r2,r2,8268
10012040:	1885883a 	add	r2,r3,r2
10012044:	10800017 	ldw	r2,0(r2)
10012048:	1000683a 	jmp	r2
1001204c:	100121b0 	cmpltui	zero,r2,1158
10012050:	10012a6c 	andhi	zero,r2,1193
10012054:	10012a6c 	andhi	zero,r2,1193
10012058:	100121d0 	cmplti	zero,r2,1159
1001205c:	10012a6c 	andhi	zero,r2,1193
10012060:	10012a6c 	andhi	zero,r2,1193
10012064:	10012a6c 	andhi	zero,r2,1193
10012068:	10012a6c 	andhi	zero,r2,1193
1001206c:	10012a6c 	andhi	zero,r2,1193
10012070:	10012a6c 	andhi	zero,r2,1193
10012074:	100121d8 	cmpnei	zero,r2,1159
10012078:	1001220c 	andi	zero,r2,1160
1001207c:	10012a6c 	andhi	zero,r2,1193
10012080:	10012204 	addi	zero,r2,1160
10012084:	10012218 	cmpnei	zero,r2,1160
10012088:	10012a6c 	andhi	zero,r2,1193
1001208c:	100122b8 	rdprs	zero,r2,1162
10012090:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
10012094:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
10012098:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
1001209c:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
100120a0:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
100120a4:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
100120a8:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
100120ac:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
100120b0:	100122c0 	call	1100122c <__alt_heap_start+0xf1e5b8>
100120b4:	10012a6c 	andhi	zero,r2,1193
100120b8:	10012a6c 	andhi	zero,r2,1193
100120bc:	10012a6c 	andhi	zero,r2,1193
100120c0:	10012a6c 	andhi	zero,r2,1193
100120c4:	10012a6c 	andhi	zero,r2,1193
100120c8:	10012a6c 	andhi	zero,r2,1193
100120cc:	10012a6c 	andhi	zero,r2,1193
100120d0:	10012a6c 	andhi	zero,r2,1193
100120d4:	10012a6c 	andhi	zero,r2,1193
100120d8:	10012a6c 	andhi	zero,r2,1193
100120dc:	1001236c 	andhi	zero,r2,1165
100120e0:	10012a6c 	andhi	zero,r2,1193
100120e4:	10012a6c 	andhi	zero,r2,1193
100120e8:	10012a6c 	andhi	zero,r2,1193
100120ec:	10012a6c 	andhi	zero,r2,1193
100120f0:	10012a6c 	andhi	zero,r2,1193
100120f4:	10012a6c 	andhi	zero,r2,1193
100120f8:	10012a6c 	andhi	zero,r2,1193
100120fc:	10012a6c 	andhi	zero,r2,1193
10012100:	10012a6c 	andhi	zero,r2,1193
10012104:	10012a6c 	andhi	zero,r2,1193
10012108:	1001250c 	andi	zero,r2,1172
1001210c:	10012a6c 	andhi	zero,r2,1193
10012110:	10012a6c 	andhi	zero,r2,1193
10012114:	10012a6c 	andhi	zero,r2,1193
10012118:	10012a6c 	andhi	zero,r2,1193
1001211c:	10012a6c 	andhi	zero,r2,1193
10012120:	10012688 	cmpgei	zero,r2,1178
10012124:	10012a6c 	andhi	zero,r2,1193
10012128:	10012a6c 	andhi	zero,r2,1193
1001212c:	10012748 	cmpgei	zero,r2,1181
10012130:	10012a6c 	andhi	zero,r2,1193
10012134:	10012a6c 	andhi	zero,r2,1193
10012138:	10012a6c 	andhi	zero,r2,1193
1001213c:	10012a6c 	andhi	zero,r2,1193
10012140:	10012a6c 	andhi	zero,r2,1193
10012144:	10012a6c 	andhi	zero,r2,1193
10012148:	10012a6c 	andhi	zero,r2,1193
1001214c:	10012a6c 	andhi	zero,r2,1193
10012150:	10012a6c 	andhi	zero,r2,1193
10012154:	10012a6c 	andhi	zero,r2,1193
10012158:	10012344 	addi	zero,r2,1165
1001215c:	10012370 	cmpltui	zero,r2,1165
10012160:	10012a6c 	andhi	zero,r2,1193
10012164:	10012a6c 	andhi	zero,r2,1193
10012168:	10012a6c 	andhi	zero,r2,1193
1001216c:	10012308 	cmpgei	zero,r2,1164
10012170:	10012370 	cmpltui	zero,r2,1165
10012174:	10012a6c 	andhi	zero,r2,1193
10012178:	10012a6c 	andhi	zero,r2,1193
1001217c:	10012310 	cmplti	zero,r2,1164
10012180:	10012a6c 	andhi	zero,r2,1193
10012184:	1001246c 	andhi	zero,r2,1169
10012188:	10012510 	cmplti	zero,r2,1172
1001218c:	100125b0 	cmpltui	zero,r2,1174
10012190:	1001233c 	xorhi	zero,r2,1164
10012194:	10012a6c 	andhi	zero,r2,1193
10012198:	100125f8 	rdprs	zero,r2,1175
1001219c:	10012a6c 	andhi	zero,r2,1193
100121a0:	1001268c 	andi	zero,r2,1178
100121a4:	10012a6c 	andhi	zero,r2,1193
100121a8:	10012a6c 	andhi	zero,r2,1193
100121ac:	10012758 	cmpnei	zero,r2,1181
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
100121b0:	e0bfc703 	ldbu	r2,-228(fp)
100121b4:	10803fcc 	andi	r2,r2,255
100121b8:	1080201c 	xori	r2,r2,128
100121bc:	10bfe004 	addi	r2,r2,-128
100121c0:	103f931e 	bne	r2,zero,10012010 <__alt_data_end+0xf8012010>
				sign = ' ';
100121c4:	00800804 	movi	r2,32
100121c8:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
100121cc:	003f9006 	br	10012010 <__alt_data_end+0xf8012010>
		case '#':
			flags |= ALT;
100121d0:	9cc00054 	ori	r19,r19,1
			goto rflag;
100121d4:	003f8e06 	br	10012010 <__alt_data_end+0xf8012010>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
100121d8:	e0bfe917 	ldw	r2,-92(fp)
100121dc:	10c00104 	addi	r3,r2,4
100121e0:	e0ffe915 	stw	r3,-92(fp)
100121e4:	10800017 	ldw	r2,0(r2)
100121e8:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
100121ec:	e0bfba17 	ldw	r2,-280(fp)
100121f0:	10000116 	blt	r2,zero,100121f8 <___vfiprintf_internal_r+0x40c>
				goto rflag;
100121f4:	003f8606 	br	10012010 <__alt_data_end+0xf8012010>
			width = -width;
100121f8:	e0bfba17 	ldw	r2,-280(fp)
100121fc:	0085c83a 	sub	r2,zero,r2
10012200:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
10012204:	9cc00114 	ori	r19,r19,4
			goto rflag;
10012208:	003f8106 	br	10012010 <__alt_data_end+0xf8012010>
		case '+':
			sign = '+';
1001220c:	00800ac4 	movi	r2,43
10012210:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
10012214:	003f7e06 	br	10012010 <__alt_data_end+0xf8012010>
		case '.':
			if ((ch = *fmt++) == '*') {
10012218:	a805883a 	mov	r2,r21
1001221c:	15400044 	addi	r21,r2,1
10012220:	10800003 	ldbu	r2,0(r2)
10012224:	14403fcc 	andi	r17,r2,255
10012228:	8c40201c 	xori	r17,r17,128
1001222c:	8c7fe004 	addi	r17,r17,-128
10012230:	88800a98 	cmpnei	r2,r17,42
10012234:	10000a1e 	bne	r2,zero,10012260 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
10012238:	e0bfe917 	ldw	r2,-92(fp)
1001223c:	10c00104 	addi	r3,r2,4
10012240:	e0ffe915 	stw	r3,-92(fp)
10012244:	10800017 	ldw	r2,0(r2)
10012248:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
1001224c:	e0bfbb17 	ldw	r2,-276(fp)
10012250:	103f6f0e 	bge	r2,zero,10012010 <__alt_data_end+0xf8012010>
					prec = -1;
10012254:	00bfffc4 	movi	r2,-1
10012258:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
1001225c:	003f6c06 	br	10012010 <__alt_data_end+0xf8012010>
			}
			n = 0;
10012260:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
10012264:	00000c06 	br	10012298 <___vfiprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
10012268:	01400284 	movi	r5,10
1001226c:	8009883a 	mov	r4,r16
10012270:	0005a080 	call	10005a08 <__mulsi3>
10012274:	1007883a 	mov	r3,r2
10012278:	88bff404 	addi	r2,r17,-48
1001227c:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10012280:	a805883a 	mov	r2,r21
10012284:	15400044 	addi	r21,r2,1
10012288:	10800003 	ldbu	r2,0(r2)
1001228c:	14403fcc 	andi	r17,r2,255
10012290:	8c40201c 	xori	r17,r17,128
10012294:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
10012298:	88bff404 	addi	r2,r17,-48
1001229c:	108002b0 	cmpltui	r2,r2,10
100122a0:	103ff11e 	bne	r2,zero,10012268 <__alt_data_end+0xf8012268>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
100122a4:	8005883a 	mov	r2,r16
100122a8:	1000010e 	bge	r2,zero,100122b0 <___vfiprintf_internal_r+0x4c4>
100122ac:	00bfffc4 	movi	r2,-1
100122b0:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
100122b4:	003f5c06 	br	10012028 <__alt_data_end+0xf8012028>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
100122b8:	9cc02014 	ori	r19,r19,128
			goto rflag;
100122bc:	003f5406 	br	10012010 <__alt_data_end+0xf8012010>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
100122c0:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
100122c4:	01400284 	movi	r5,10
100122c8:	8009883a 	mov	r4,r16
100122cc:	0005a080 	call	10005a08 <__mulsi3>
100122d0:	1007883a 	mov	r3,r2
100122d4:	88bff404 	addi	r2,r17,-48
100122d8:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
100122dc:	a805883a 	mov	r2,r21
100122e0:	15400044 	addi	r21,r2,1
100122e4:	10800003 	ldbu	r2,0(r2)
100122e8:	14403fcc 	andi	r17,r2,255
100122ec:	8c40201c 	xori	r17,r17,128
100122f0:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
100122f4:	88bff404 	addi	r2,r17,-48
100122f8:	108002b0 	cmpltui	r2,r2,10
100122fc:	103ff11e 	bne	r2,zero,100122c4 <__alt_data_end+0xf80122c4>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
10012300:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
10012304:	003f4806 	br	10012028 <__alt_data_end+0xf8012028>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
10012308:	9cc01014 	ori	r19,r19,64
			goto rflag;
1001230c:	003f4006 	br	10012010 <__alt_data_end+0xf8012010>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
10012310:	a8800003 	ldbu	r2,0(r21)
10012314:	10803fcc 	andi	r2,r2,255
10012318:	1080201c 	xori	r2,r2,128
1001231c:	10bfe004 	addi	r2,r2,-128
10012320:	10801b18 	cmpnei	r2,r2,108
10012324:	1000031e 	bne	r2,zero,10012334 <___vfiprintf_internal_r+0x548>
				fmt++;
10012328:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
1001232c:	9cc00814 	ori	r19,r19,32
10012330:	003f3706 	br	10012010 <__alt_data_end+0xf8012010>
			} else
#endif
				flags |= LONGINT;
10012334:	9cc00414 	ori	r19,r19,16
			goto rflag;
10012338:	003f3506 	br	10012010 <__alt_data_end+0xf8012010>
		case 'q': /* extension */
			flags |= QUADINT;
1001233c:	9cc00814 	ori	r19,r19,32
			goto rflag;
10012340:	003f3306 	br	10012010 <__alt_data_end+0xf8012010>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
10012344:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
10012348:	e0bfe917 	ldw	r2,-92(fp)
1001234c:	10c00104 	addi	r3,r2,4
10012350:	e0ffe915 	stw	r3,-92(fp)
10012354:	10800017 	ldw	r2,0(r2)
10012358:	a0800005 	stb	r2,0(r20)
				size = 1;
1001235c:	00800044 	movi	r2,1
10012360:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
10012364:	e03fc705 	stb	zero,-228(fp)
			break;
10012368:	0001c806 	br	10012a8c <___vfiprintf_internal_r+0xca0>
		case 'D':  /* extension */
			flags |= LONGINT;
1001236c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
10012370:	9880080c 	andi	r2,r19,32
10012374:	10000826 	beq	r2,zero,10012398 <___vfiprintf_internal_r+0x5ac>
10012378:	e13fe917 	ldw	r4,-92(fp)
1001237c:	20800204 	addi	r2,r4,8
10012380:	e0bfe915 	stw	r2,-92(fp)
10012384:	20800017 	ldw	r2,0(r4)
10012388:	20c00117 	ldw	r3,4(r4)
1001238c:	e0bfea15 	stw	r2,-88(fp)
10012390:	e0ffeb15 	stw	r3,-84(fp)
10012394:	00001e06 	br	10012410 <___vfiprintf_internal_r+0x624>
10012398:	9880040c 	andi	r2,r19,16
1001239c:	10000826 	beq	r2,zero,100123c0 <___vfiprintf_internal_r+0x5d4>
100123a0:	e0bfe917 	ldw	r2,-92(fp)
100123a4:	10c00104 	addi	r3,r2,4
100123a8:	e0ffe915 	stw	r3,-92(fp)
100123ac:	10800017 	ldw	r2,0(r2)
100123b0:	e0bfea15 	stw	r2,-88(fp)
100123b4:	1005d7fa 	srai	r2,r2,31
100123b8:	e0bfeb15 	stw	r2,-84(fp)
100123bc:	00001406 	br	10012410 <___vfiprintf_internal_r+0x624>
100123c0:	9880100c 	andi	r2,r19,64
100123c4:	10000b26 	beq	r2,zero,100123f4 <___vfiprintf_internal_r+0x608>
100123c8:	e0bfe917 	ldw	r2,-92(fp)
100123cc:	10c00104 	addi	r3,r2,4
100123d0:	e0ffe915 	stw	r3,-92(fp)
100123d4:	10800017 	ldw	r2,0(r2)
100123d8:	10bfffcc 	andi	r2,r2,65535
100123dc:	10a0001c 	xori	r2,r2,32768
100123e0:	10a00004 	addi	r2,r2,-32768
100123e4:	e0bfea15 	stw	r2,-88(fp)
100123e8:	1005d7fa 	srai	r2,r2,31
100123ec:	e0bfeb15 	stw	r2,-84(fp)
100123f0:	00000706 	br	10012410 <___vfiprintf_internal_r+0x624>
100123f4:	e0bfe917 	ldw	r2,-92(fp)
100123f8:	10c00104 	addi	r3,r2,4
100123fc:	e0ffe915 	stw	r3,-92(fp)
10012400:	10800017 	ldw	r2,0(r2)
10012404:	e0bfea15 	stw	r2,-88(fp)
10012408:	1005d7fa 	srai	r2,r2,31
1001240c:	e0bfeb15 	stw	r2,-84(fp)
10012410:	e0bfea17 	ldw	r2,-88(fp)
10012414:	e0bfbc15 	stw	r2,-272(fp)
10012418:	e0ffeb17 	ldw	r3,-84(fp)
1001241c:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
10012420:	e0bfbc17 	ldw	r2,-272(fp)
10012424:	e0ffbd17 	ldw	r3,-268(fp)
10012428:	18000d0e 	bge	r3,zero,10012460 <___vfiprintf_internal_r+0x674>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
1001242c:	000d883a 	mov	r6,zero
10012430:	000f883a 	mov	r7,zero
10012434:	e13fbc17 	ldw	r4,-272(fp)
10012438:	e17fbd17 	ldw	r5,-268(fp)
1001243c:	3105c83a 	sub	r2,r6,r4
10012440:	3091803a 	cmpltu	r8,r6,r2
10012444:	3947c83a 	sub	r3,r7,r5
10012448:	1a09c83a 	sub	r4,r3,r8
1001244c:	2007883a 	mov	r3,r4
10012450:	e0bfbc15 	stw	r2,-272(fp)
10012454:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
10012458:	00800b44 	movi	r2,45
1001245c:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
10012460:	00800044 	movi	r2,1
10012464:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
10012468:	0000f806 	br	1001284c <___vfiprintf_internal_r+0xa60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
1001246c:	9880080c 	andi	r2,r19,32
10012470:	10000d26 	beq	r2,zero,100124a8 <___vfiprintf_internal_r+0x6bc>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
10012474:	e0bfe917 	ldw	r2,-92(fp)
10012478:	10c00104 	addi	r3,r2,4
1001247c:	e0ffe915 	stw	r3,-92(fp)
10012480:	10800017 	ldw	r2,0(r2)
10012484:	e0ffb917 	ldw	r3,-284(fp)
10012488:	e0fff015 	stw	r3,-64(fp)
1001248c:	1807d7fa 	srai	r3,r3,31
10012490:	e0fff115 	stw	r3,-60(fp)
10012494:	e0fff017 	ldw	r3,-64(fp)
10012498:	10c00015 	stw	r3,0(r2)
1001249c:	e0fff117 	ldw	r3,-60(fp)
100124a0:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
100124a4:	0002c306 	br	10012fb4 <___vfiprintf_internal_r+0x11c8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
100124a8:	9880040c 	andi	r2,r19,16
100124ac:	10000726 	beq	r2,zero,100124cc <___vfiprintf_internal_r+0x6e0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
100124b0:	e0bfe917 	ldw	r2,-92(fp)
100124b4:	10c00104 	addi	r3,r2,4
100124b8:	e0ffe915 	stw	r3,-92(fp)
100124bc:	10800017 	ldw	r2,0(r2)
100124c0:	e0ffb917 	ldw	r3,-284(fp)
100124c4:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
100124c8:	0002ba06 	br	10012fb4 <___vfiprintf_internal_r+0x11c8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
100124cc:	9880100c 	andi	r2,r19,64
100124d0:	10000726 	beq	r2,zero,100124f0 <___vfiprintf_internal_r+0x704>
				*GET_ARG (N, ap, short_ptr_t) = ret;
100124d4:	e0bfe917 	ldw	r2,-92(fp)
100124d8:	10c00104 	addi	r3,r2,4
100124dc:	e0ffe915 	stw	r3,-92(fp)
100124e0:	10800017 	ldw	r2,0(r2)
100124e4:	e0ffb917 	ldw	r3,-284(fp)
100124e8:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
100124ec:	0002b106 	br	10012fb4 <___vfiprintf_internal_r+0x11c8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
100124f0:	e0bfe917 	ldw	r2,-92(fp)
100124f4:	10c00104 	addi	r3,r2,4
100124f8:	e0ffe915 	stw	r3,-92(fp)
100124fc:	10800017 	ldw	r2,0(r2)
10012500:	e0ffb917 	ldw	r3,-284(fp)
10012504:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
10012508:	0002aa06 	br	10012fb4 <___vfiprintf_internal_r+0x11c8>
		case 'O': /* extension */
			flags |= LONGINT;
1001250c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
10012510:	9880080c 	andi	r2,r19,32
10012514:	10000626 	beq	r2,zero,10012530 <___vfiprintf_internal_r+0x744>
10012518:	e0bfe917 	ldw	r2,-92(fp)
1001251c:	10c00204 	addi	r3,r2,8
10012520:	e0ffe915 	stw	r3,-92(fp)
10012524:	15800017 	ldw	r22,0(r2)
10012528:	15c00117 	ldw	r23,4(r2)
1001252c:	00001c06 	br	100125a0 <___vfiprintf_internal_r+0x7b4>
10012530:	9880040c 	andi	r2,r19,16
10012534:	10000726 	beq	r2,zero,10012554 <___vfiprintf_internal_r+0x768>
10012538:	e0bfe917 	ldw	r2,-92(fp)
1001253c:	10c00104 	addi	r3,r2,4
10012540:	e0ffe915 	stw	r3,-92(fp)
10012544:	10800017 	ldw	r2,0(r2)
10012548:	102d883a 	mov	r22,r2
1001254c:	002f883a 	mov	r23,zero
10012550:	00001306 	br	100125a0 <___vfiprintf_internal_r+0x7b4>
10012554:	9880100c 	andi	r2,r19,64
10012558:	10000b26 	beq	r2,zero,10012588 <___vfiprintf_internal_r+0x79c>
1001255c:	e0bfe917 	ldw	r2,-92(fp)
10012560:	10c00104 	addi	r3,r2,4
10012564:	e0ffe915 	stw	r3,-92(fp)
10012568:	10800017 	ldw	r2,0(r2)
1001256c:	e0bff215 	stw	r2,-56(fp)
10012570:	e03ff315 	stw	zero,-52(fp)
10012574:	e0bff217 	ldw	r2,-56(fp)
10012578:	15bfffcc 	andi	r22,r2,65535
1001257c:	e0fff317 	ldw	r3,-52(fp)
10012580:	182e703a 	and	r23,r3,zero
10012584:	00000606 	br	100125a0 <___vfiprintf_internal_r+0x7b4>
10012588:	e0bfe917 	ldw	r2,-92(fp)
1001258c:	10c00104 	addi	r3,r2,4
10012590:	e0ffe915 	stw	r3,-92(fp)
10012594:	10800017 	ldw	r2,0(r2)
10012598:	102d883a 	mov	r22,r2
1001259c:	002f883a 	mov	r23,zero
100125a0:	e5bfbc15 	stw	r22,-272(fp)
100125a4:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
100125a8:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
100125ac:	0000a606 	br	10012848 <___vfiprintf_internal_r+0xa5c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
100125b0:	e0bfe917 	ldw	r2,-92(fp)
100125b4:	10c00104 	addi	r3,r2,4
100125b8:	e0ffe915 	stw	r3,-92(fp)
100125bc:	10800017 	ldw	r2,0(r2)
100125c0:	e0bfbc15 	stw	r2,-272(fp)
100125c4:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
100125c8:	00800084 	movi	r2,2
100125cc:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
100125d0:	00840374 	movhi	r2,4109
100125d4:	10be2a04 	addi	r2,r2,-1880
100125d8:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
100125dc:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
100125e0:	00800c04 	movi	r2,48
100125e4:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
100125e8:	04401e04 	movi	r17,120
100125ec:	00801e04 	movi	r2,120
100125f0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
100125f4:	00009406 	br	10012848 <___vfiprintf_internal_r+0xa5c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
100125f8:	e0bfe917 	ldw	r2,-92(fp)
100125fc:	10c00104 	addi	r3,r2,4
10012600:	e0ffe915 	stw	r3,-92(fp)
10012604:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
10012608:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
1001260c:	a000081e 	bne	r20,zero,10012630 <___vfiprintf_internal_r+0x844>
				cp = "(null)";
10012610:	05040374 	movhi	r20,4109
10012614:	a53e2f04 	addi	r20,r20,-1860
				size = ((unsigned) prec > 6U) ? 6 : prec;
10012618:	e0bfbb17 	ldw	r2,-276(fp)
1001261c:	10c001f0 	cmpltui	r3,r2,7
10012620:	1800011e 	bne	r3,zero,10012628 <___vfiprintf_internal_r+0x83c>
10012624:	00800184 	movi	r2,6
10012628:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
1001262c:	00011706 	br	10012a8c <___vfiprintf_internal_r+0xca0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
10012630:	e0bfbb17 	ldw	r2,-276(fp)
10012634:	10001016 	blt	r2,zero,10012678 <___vfiprintf_internal_r+0x88c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
10012638:	e0bfbb17 	ldw	r2,-276(fp)
1001263c:	100d883a 	mov	r6,r2
10012640:	000b883a 	mov	r5,zero
10012644:	a009883a 	mov	r4,r20
10012648:	000f0e80 	call	1000f0e8 <memchr>
1001264c:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
10012650:	e0bfc617 	ldw	r2,-232(fp)
10012654:	10000526 	beq	r2,zero,1001266c <___vfiprintf_internal_r+0x880>
					size = p - cp;
10012658:	e0bfc617 	ldw	r2,-232(fp)
1001265c:	a007883a 	mov	r3,r20
10012660:	10c5c83a 	sub	r2,r2,r3
10012664:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
10012668:	00010806 	br	10012a8c <___vfiprintf_internal_r+0xca0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
1001266c:	e0bfbb17 	ldw	r2,-276(fp)
10012670:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
10012674:	00010506 	br	10012a8c <___vfiprintf_internal_r+0xca0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
10012678:	a009883a 	mov	r4,r20
1001267c:	00088880 	call	10008888 <strlen>
10012680:	e0bfc115 	stw	r2,-252(fp)

			break;
10012684:	00010106 	br	10012a8c <___vfiprintf_internal_r+0xca0>
		case 'U': /* extension */
			flags |= LONGINT;
10012688:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
1001268c:	9880080c 	andi	r2,r19,32
10012690:	10000826 	beq	r2,zero,100126b4 <___vfiprintf_internal_r+0x8c8>
10012694:	e0bfe917 	ldw	r2,-92(fp)
10012698:	10c00204 	addi	r3,r2,8
1001269c:	e0ffe915 	stw	r3,-92(fp)
100126a0:	10c00017 	ldw	r3,0(r2)
100126a4:	e0ffec15 	stw	r3,-80(fp)
100126a8:	10c00117 	ldw	r3,4(r2)
100126ac:	e0ffed15 	stw	r3,-76(fp)
100126b0:	00001e06 	br	1001272c <___vfiprintf_internal_r+0x940>
100126b4:	9880040c 	andi	r2,r19,16
100126b8:	10000726 	beq	r2,zero,100126d8 <___vfiprintf_internal_r+0x8ec>
100126bc:	e0bfe917 	ldw	r2,-92(fp)
100126c0:	10c00104 	addi	r3,r2,4
100126c4:	e0ffe915 	stw	r3,-92(fp)
100126c8:	10800017 	ldw	r2,0(r2)
100126cc:	e0bfec15 	stw	r2,-80(fp)
100126d0:	e03fed15 	stw	zero,-76(fp)
100126d4:	00001506 	br	1001272c <___vfiprintf_internal_r+0x940>
100126d8:	9880100c 	andi	r2,r19,64
100126dc:	10000d26 	beq	r2,zero,10012714 <___vfiprintf_internal_r+0x928>
100126e0:	e0bfe917 	ldw	r2,-92(fp)
100126e4:	10c00104 	addi	r3,r2,4
100126e8:	e0ffe915 	stw	r3,-92(fp)
100126ec:	10800017 	ldw	r2,0(r2)
100126f0:	e0bff415 	stw	r2,-48(fp)
100126f4:	e03ff515 	stw	zero,-44(fp)
100126f8:	e0bff417 	ldw	r2,-48(fp)
100126fc:	10bfffcc 	andi	r2,r2,65535
10012700:	e0bfec15 	stw	r2,-80(fp)
10012704:	e0fff517 	ldw	r3,-44(fp)
10012708:	1806703a 	and	r3,r3,zero
1001270c:	e0ffed15 	stw	r3,-76(fp)
10012710:	00000606 	br	1001272c <___vfiprintf_internal_r+0x940>
10012714:	e0bfe917 	ldw	r2,-92(fp)
10012718:	10c00104 	addi	r3,r2,4
1001271c:	e0ffe915 	stw	r3,-92(fp)
10012720:	10800017 	ldw	r2,0(r2)
10012724:	e0bfec15 	stw	r2,-80(fp)
10012728:	e03fed15 	stw	zero,-76(fp)
1001272c:	e0bfec17 	ldw	r2,-80(fp)
10012730:	e0bfbc15 	stw	r2,-272(fp)
10012734:	e0ffed17 	ldw	r3,-76(fp)
10012738:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
1001273c:	00800044 	movi	r2,1
10012740:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
10012744:	00004006 	br	10012848 <___vfiprintf_internal_r+0xa5c>
		case 'X':
			xdigs = "0123456789ABCDEF";
10012748:	00840374 	movhi	r2,4109
1001274c:	10be3104 	addi	r2,r2,-1852
10012750:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
10012754:	00000306 	br	10012764 <___vfiprintf_internal_r+0x978>
		case 'x':
			xdigs = "0123456789abcdef";
10012758:	00840374 	movhi	r2,4109
1001275c:	10be2a04 	addi	r2,r2,-1880
10012760:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
10012764:	9880080c 	andi	r2,r19,32
10012768:	10000826 	beq	r2,zero,1001278c <___vfiprintf_internal_r+0x9a0>
1001276c:	e0bfe917 	ldw	r2,-92(fp)
10012770:	10c00204 	addi	r3,r2,8
10012774:	e0ffe915 	stw	r3,-92(fp)
10012778:	10c00017 	ldw	r3,0(r2)
1001277c:	e0ffee15 	stw	r3,-72(fp)
10012780:	10c00117 	ldw	r3,4(r2)
10012784:	e0ffef15 	stw	r3,-68(fp)
10012788:	00001e06 	br	10012804 <___vfiprintf_internal_r+0xa18>
1001278c:	9880040c 	andi	r2,r19,16
10012790:	10000726 	beq	r2,zero,100127b0 <___vfiprintf_internal_r+0x9c4>
10012794:	e0bfe917 	ldw	r2,-92(fp)
10012798:	10c00104 	addi	r3,r2,4
1001279c:	e0ffe915 	stw	r3,-92(fp)
100127a0:	10800017 	ldw	r2,0(r2)
100127a4:	e0bfee15 	stw	r2,-72(fp)
100127a8:	e03fef15 	stw	zero,-68(fp)
100127ac:	00001506 	br	10012804 <___vfiprintf_internal_r+0xa18>
100127b0:	9880100c 	andi	r2,r19,64
100127b4:	10000d26 	beq	r2,zero,100127ec <___vfiprintf_internal_r+0xa00>
100127b8:	e0bfe917 	ldw	r2,-92(fp)
100127bc:	10c00104 	addi	r3,r2,4
100127c0:	e0ffe915 	stw	r3,-92(fp)
100127c4:	10800017 	ldw	r2,0(r2)
100127c8:	e0bff615 	stw	r2,-40(fp)
100127cc:	e03ff715 	stw	zero,-36(fp)
100127d0:	e0bff617 	ldw	r2,-40(fp)
100127d4:	10bfffcc 	andi	r2,r2,65535
100127d8:	e0bfee15 	stw	r2,-72(fp)
100127dc:	e0fff717 	ldw	r3,-36(fp)
100127e0:	1806703a 	and	r3,r3,zero
100127e4:	e0ffef15 	stw	r3,-68(fp)
100127e8:	00000606 	br	10012804 <___vfiprintf_internal_r+0xa18>
100127ec:	e0bfe917 	ldw	r2,-92(fp)
100127f0:	10c00104 	addi	r3,r2,4
100127f4:	e0ffe915 	stw	r3,-92(fp)
100127f8:	10800017 	ldw	r2,0(r2)
100127fc:	e0bfee15 	stw	r2,-72(fp)
10012800:	e03fef15 	stw	zero,-68(fp)
10012804:	e0bfee17 	ldw	r2,-72(fp)
10012808:	e0bfbc15 	stw	r2,-272(fp)
1001280c:	e0ffef17 	ldw	r3,-68(fp)
10012810:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
10012814:	00800084 	movi	r2,2
10012818:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
1001281c:	9880004c 	andi	r2,r19,1
10012820:	10000926 	beq	r2,zero,10012848 <___vfiprintf_internal_r+0xa5c>
10012824:	e0bfbc17 	ldw	r2,-272(fp)
10012828:	e0ffbd17 	ldw	r3,-268(fp)
1001282c:	10c4b03a 	or	r2,r2,r3
10012830:	10000526 	beq	r2,zero,10012848 <___vfiprintf_internal_r+0xa5c>
				ox[0] = '0';
10012834:	00800c04 	movi	r2,48
10012838:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
1001283c:	8805883a 	mov	r2,r17
10012840:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
10012844:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
10012848:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
1001284c:	e0bfbb17 	ldw	r2,-276(fp)
10012850:	e0bfbf15 	stw	r2,-260(fp)
10012854:	e0bfbf17 	ldw	r2,-260(fp)
10012858:	10000216 	blt	r2,zero,10012864 <___vfiprintf_internal_r+0xa78>
				flags &= ~ZEROPAD;
1001285c:	00bfdfc4 	movi	r2,-129
10012860:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
10012864:	e53fdb04 	addi	r20,fp,-148
10012868:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
1001286c:	e0bfbc17 	ldw	r2,-272(fp)
10012870:	e0ffbd17 	ldw	r3,-268(fp)
10012874:	10c4b03a 	or	r2,r2,r3
10012878:	1000021e 	bne	r2,zero,10012884 <___vfiprintf_internal_r+0xa98>
1001287c:	e0bfbb17 	ldw	r2,-276(fp)
10012880:	10006c26 	beq	r2,zero,10012a34 <___vfiprintf_internal_r+0xc48>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
10012884:	e0bfbe03 	ldbu	r2,-264(fp)
10012888:	10c00060 	cmpeqi	r3,r2,1
1001288c:	1800211e 	bne	r3,zero,10012914 <___vfiprintf_internal_r+0xb28>
10012890:	10c000a0 	cmpeqi	r3,r2,2
10012894:	1800491e 	bne	r3,zero,100129bc <___vfiprintf_internal_r+0xbd0>
10012898:	10005d1e 	bne	r2,zero,10012a10 <___vfiprintf_internal_r+0xc24>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
1001289c:	a53fffc4 	addi	r20,r20,-1
100128a0:	e0bfbc17 	ldw	r2,-272(fp)
100128a4:	108001cc 	andi	r2,r2,7
100128a8:	10800c04 	addi	r2,r2,48
100128ac:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
100128b0:	e0bfbd17 	ldw	r2,-268(fp)
100128b4:	1004977a 	slli	r2,r2,29
100128b8:	e0ffbc17 	ldw	r3,-272(fp)
100128bc:	1806d0fa 	srli	r3,r3,3
100128c0:	1884b03a 	or	r2,r3,r2
100128c4:	e0bfbc15 	stw	r2,-272(fp)
100128c8:	e0bfbd17 	ldw	r2,-268(fp)
100128cc:	1004d0fa 	srli	r2,r2,3
100128d0:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
100128d4:	e0bfbc17 	ldw	r2,-272(fp)
100128d8:	e0ffbd17 	ldw	r3,-268(fp)
100128dc:	10c4b03a 	or	r2,r2,r3
100128e0:	103fee1e 	bne	r2,zero,1001289c <__alt_data_end+0xf801289c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
100128e4:	9880004c 	andi	r2,r19,1
100128e8:	10005026 	beq	r2,zero,10012a2c <___vfiprintf_internal_r+0xc40>
100128ec:	a0800003 	ldbu	r2,0(r20)
100128f0:	10803fcc 	andi	r2,r2,255
100128f4:	1080201c 	xori	r2,r2,128
100128f8:	10bfe004 	addi	r2,r2,-128
100128fc:	10800c20 	cmpeqi	r2,r2,48
10012900:	10004a1e 	bne	r2,zero,10012a2c <___vfiprintf_internal_r+0xc40>
						*--cp = '0';
10012904:	a53fffc4 	addi	r20,r20,-1
10012908:	00800c04 	movi	r2,48
1001290c:	a0800005 	stb	r2,0(r20)
					break;
10012910:	00004606 	br	10012a2c <___vfiprintf_internal_r+0xc40>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
10012914:	e0bfbd17 	ldw	r2,-268(fp)
10012918:	10000a1e 	bne	r2,zero,10012944 <___vfiprintf_internal_r+0xb58>
1001291c:	e0bfbd17 	ldw	r2,-268(fp)
10012920:	1000031e 	bne	r2,zero,10012930 <___vfiprintf_internal_r+0xb44>
10012924:	e0bfbc17 	ldw	r2,-272(fp)
10012928:	108002a8 	cmpgeui	r2,r2,10
1001292c:	1000051e 	bne	r2,zero,10012944 <___vfiprintf_internal_r+0xb58>
						*--cp = to_char(_uquad);
10012930:	a53fffc4 	addi	r20,r20,-1
10012934:	e0bfbc17 	ldw	r2,-272(fp)
10012938:	10800c04 	addi	r2,r2,48
1001293c:	a0800005 	stb	r2,0(r20)
						break;
10012940:	00003b06 	br	10012a30 <___vfiprintf_internal_r+0xc44>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
10012944:	a53fffc4 	addi	r20,r20,-1
10012948:	e0bfbc17 	ldw	r2,-272(fp)
1001294c:	e0ffbd17 	ldw	r3,-268(fp)
10012950:	01800284 	movi	r6,10
10012954:	000f883a 	mov	r7,zero
10012958:	1009883a 	mov	r4,r2
1001295c:	180b883a 	mov	r5,r3
10012960:	00142840 	call	10014284 <__umoddi3>
10012964:	1009883a 	mov	r4,r2
10012968:	180b883a 	mov	r5,r3
1001296c:	2005883a 	mov	r2,r4
10012970:	2807883a 	mov	r3,r5
10012974:	10800c04 	addi	r2,r2,48
10012978:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
1001297c:	e0bfbc17 	ldw	r2,-272(fp)
10012980:	e0ffbd17 	ldw	r3,-268(fp)
10012984:	01800284 	movi	r6,10
10012988:	000f883a 	mov	r7,zero
1001298c:	1009883a 	mov	r4,r2
10012990:	180b883a 	mov	r5,r3
10012994:	0013c880 	call	10013c88 <__udivdi3>
10012998:	1009883a 	mov	r4,r2
1001299c:	180b883a 	mov	r5,r3
100129a0:	e13fbc15 	stw	r4,-272(fp)
100129a4:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
100129a8:	e0bfbc17 	ldw	r2,-272(fp)
100129ac:	e0ffbd17 	ldw	r3,-268(fp)
100129b0:	10c4b03a 	or	r2,r2,r3
100129b4:	103fe31e 	bne	r2,zero,10012944 <__alt_data_end+0xf8012944>
					break;
100129b8:	00001d06 	br	10012a30 <___vfiprintf_internal_r+0xc44>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
100129bc:	a53fffc4 	addi	r20,r20,-1
100129c0:	e0bfbc17 	ldw	r2,-272(fp)
100129c4:	108003cc 	andi	r2,r2,15
100129c8:	e0ffc217 	ldw	r3,-248(fp)
100129cc:	1885883a 	add	r2,r3,r2
100129d0:	10800003 	ldbu	r2,0(r2)
100129d4:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
100129d8:	e0bfbd17 	ldw	r2,-268(fp)
100129dc:	1004973a 	slli	r2,r2,28
100129e0:	e0ffbc17 	ldw	r3,-272(fp)
100129e4:	1806d13a 	srli	r3,r3,4
100129e8:	1884b03a 	or	r2,r3,r2
100129ec:	e0bfbc15 	stw	r2,-272(fp)
100129f0:	e0bfbd17 	ldw	r2,-268(fp)
100129f4:	1004d13a 	srli	r2,r2,4
100129f8:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
100129fc:	e0bfbc17 	ldw	r2,-272(fp)
10012a00:	e0ffbd17 	ldw	r3,-268(fp)
10012a04:	10c4b03a 	or	r2,r2,r3
10012a08:	103fec1e 	bne	r2,zero,100129bc <__alt_data_end+0xf80129bc>
					break;
10012a0c:	00000806 	br	10012a30 <___vfiprintf_internal_r+0xc44>

				default:
					cp = "bug in vfprintf: bad base";
10012a10:	05040374 	movhi	r20,4109
10012a14:	a53e3604 	addi	r20,r20,-1832
					size = strlen (cp);
10012a18:	a009883a 	mov	r4,r20
10012a1c:	00088880 	call	10008888 <strlen>
10012a20:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
10012a24:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
10012a28:	00001806 	br	10012a8c <___vfiprintf_internal_r+0xca0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
10012a2c:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
10012a30:	00000706 	br	10012a50 <___vfiprintf_internal_r+0xc64>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
10012a34:	e0bfbe03 	ldbu	r2,-264(fp)
10012a38:	1000051e 	bne	r2,zero,10012a50 <___vfiprintf_internal_r+0xc64>
10012a3c:	9880004c 	andi	r2,r19,1
10012a40:	10000326 	beq	r2,zero,10012a50 <___vfiprintf_internal_r+0xc64>
                         *--cp = '0';
10012a44:	a53fffc4 	addi	r20,r20,-1
10012a48:	00800c04 	movi	r2,48
10012a4c:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
10012a50:	e0bfdb04 	addi	r2,fp,-148
10012a54:	10800a04 	addi	r2,r2,40
10012a58:	1007883a 	mov	r3,r2
10012a5c:	a005883a 	mov	r2,r20
10012a60:	1885c83a 	sub	r2,r3,r2
10012a64:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
10012a68:	00000806 	br	10012a8c <___vfiprintf_internal_r+0xca0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
10012a6c:	88015426 	beq	r17,zero,10012fc0 <___vfiprintf_internal_r+0x11d4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
10012a70:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
10012a74:	8805883a 	mov	r2,r17
10012a78:	a0800005 	stb	r2,0(r20)
			size = 1;
10012a7c:	00800044 	movi	r2,1
10012a80:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
10012a84:	e03fc705 	stb	zero,-228(fp)
			break;
10012a88:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
10012a8c:	e0ffbf17 	ldw	r3,-260(fp)
10012a90:	e0bfc117 	ldw	r2,-252(fp)
10012a94:	10c0010e 	bge	r2,r3,10012a9c <___vfiprintf_internal_r+0xcb0>
10012a98:	1805883a 	mov	r2,r3
10012a9c:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
10012aa0:	e0bfc703 	ldbu	r2,-228(fp)
10012aa4:	10803fcc 	andi	r2,r2,255
10012aa8:	1080201c 	xori	r2,r2,128
10012aac:	10bfe004 	addi	r2,r2,-128
10012ab0:	10000326 	beq	r2,zero,10012ac0 <___vfiprintf_internal_r+0xcd4>
			realsz++;
10012ab4:	e0bfc017 	ldw	r2,-256(fp)
10012ab8:	10800044 	addi	r2,r2,1
10012abc:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
10012ac0:	9880008c 	andi	r2,r19,2
10012ac4:	10000326 	beq	r2,zero,10012ad4 <___vfiprintf_internal_r+0xce8>
			realsz+= 2;
10012ac8:	e0bfc017 	ldw	r2,-256(fp)
10012acc:	10800084 	addi	r2,r2,2
10012ad0:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
10012ad4:	9880210c 	andi	r2,r19,132
10012ad8:	1000351e 	bne	r2,zero,10012bb0 <___vfiprintf_internal_r+0xdc4>
			PAD (width - realsz, blanks);
10012adc:	e0ffba17 	ldw	r3,-280(fp)
10012ae0:	e0bfc017 	ldw	r2,-256(fp)
10012ae4:	18a1c83a 	sub	r16,r3,r2
10012ae8:	0400310e 	bge	zero,r16,10012bb0 <___vfiprintf_internal_r+0xdc4>
10012aec:	00001706 	br	10012b4c <___vfiprintf_internal_r+0xd60>
10012af0:	00840374 	movhi	r2,4109
10012af4:	10be3c84 	addi	r2,r2,-1806
10012af8:	90800015 	stw	r2,0(r18)
10012afc:	00800404 	movi	r2,16
10012b00:	90800115 	stw	r2,4(r18)
10012b04:	e0bfca17 	ldw	r2,-216(fp)
10012b08:	10800404 	addi	r2,r2,16
10012b0c:	e0bfca15 	stw	r2,-216(fp)
10012b10:	94800204 	addi	r18,r18,8
10012b14:	e0bfc917 	ldw	r2,-220(fp)
10012b18:	10800044 	addi	r2,r2,1
10012b1c:	e0bfc915 	stw	r2,-220(fp)
10012b20:	e0bfc917 	ldw	r2,-220(fp)
10012b24:	10800210 	cmplti	r2,r2,8
10012b28:	1000071e 	bne	r2,zero,10012b48 <___vfiprintf_internal_r+0xd5c>
10012b2c:	e0bfc804 	addi	r2,fp,-224
10012b30:	100d883a 	mov	r6,r2
10012b34:	e17fe717 	ldw	r5,-100(fp)
10012b38:	e13fe617 	ldw	r4,-104(fp)
10012b3c:	0011b680 	call	10011b68 <__sprint_r>
10012b40:	10012d1e 	bne	r2,zero,10012ff8 <___vfiprintf_internal_r+0x120c>
10012b44:	e4bfcb04 	addi	r18,fp,-212
10012b48:	843ffc04 	addi	r16,r16,-16
10012b4c:	80800448 	cmpgei	r2,r16,17
10012b50:	103fe71e 	bne	r2,zero,10012af0 <__alt_data_end+0xf8012af0>
10012b54:	00840374 	movhi	r2,4109
10012b58:	10be3c84 	addi	r2,r2,-1806
10012b5c:	90800015 	stw	r2,0(r18)
10012b60:	8005883a 	mov	r2,r16
10012b64:	90800115 	stw	r2,4(r18)
10012b68:	e0bfca17 	ldw	r2,-216(fp)
10012b6c:	8007883a 	mov	r3,r16
10012b70:	10c5883a 	add	r2,r2,r3
10012b74:	e0bfca15 	stw	r2,-216(fp)
10012b78:	94800204 	addi	r18,r18,8
10012b7c:	e0bfc917 	ldw	r2,-220(fp)
10012b80:	10800044 	addi	r2,r2,1
10012b84:	e0bfc915 	stw	r2,-220(fp)
10012b88:	e0bfc917 	ldw	r2,-220(fp)
10012b8c:	10800210 	cmplti	r2,r2,8
10012b90:	1000071e 	bne	r2,zero,10012bb0 <___vfiprintf_internal_r+0xdc4>
10012b94:	e0bfc804 	addi	r2,fp,-224
10012b98:	100d883a 	mov	r6,r2
10012b9c:	e17fe717 	ldw	r5,-100(fp)
10012ba0:	e13fe617 	ldw	r4,-104(fp)
10012ba4:	0011b680 	call	10011b68 <__sprint_r>
10012ba8:	1001151e 	bne	r2,zero,10013000 <___vfiprintf_internal_r+0x1214>
10012bac:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
10012bb0:	e0bfc703 	ldbu	r2,-228(fp)
10012bb4:	10803fcc 	andi	r2,r2,255
10012bb8:	1080201c 	xori	r2,r2,128
10012bbc:	10bfe004 	addi	r2,r2,-128
10012bc0:	10001526 	beq	r2,zero,10012c18 <___vfiprintf_internal_r+0xe2c>
			PRINT (&sign, 1);
10012bc4:	e0bfc704 	addi	r2,fp,-228
10012bc8:	90800015 	stw	r2,0(r18)
10012bcc:	00800044 	movi	r2,1
10012bd0:	90800115 	stw	r2,4(r18)
10012bd4:	e0bfca17 	ldw	r2,-216(fp)
10012bd8:	10800044 	addi	r2,r2,1
10012bdc:	e0bfca15 	stw	r2,-216(fp)
10012be0:	94800204 	addi	r18,r18,8
10012be4:	e0bfc917 	ldw	r2,-220(fp)
10012be8:	10800044 	addi	r2,r2,1
10012bec:	e0bfc915 	stw	r2,-220(fp)
10012bf0:	e0bfc917 	ldw	r2,-220(fp)
10012bf4:	10800210 	cmplti	r2,r2,8
10012bf8:	1000071e 	bne	r2,zero,10012c18 <___vfiprintf_internal_r+0xe2c>
10012bfc:	e0bfc804 	addi	r2,fp,-224
10012c00:	100d883a 	mov	r6,r2
10012c04:	e17fe717 	ldw	r5,-100(fp)
10012c08:	e13fe617 	ldw	r4,-104(fp)
10012c0c:	0011b680 	call	10011b68 <__sprint_r>
10012c10:	1000fd1e 	bne	r2,zero,10013008 <___vfiprintf_internal_r+0x121c>
10012c14:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
10012c18:	9880008c 	andi	r2,r19,2
10012c1c:	10001526 	beq	r2,zero,10012c74 <___vfiprintf_internal_r+0xe88>
			PRINT (ox, 2);
10012c20:	e0bfe504 	addi	r2,fp,-108
10012c24:	90800015 	stw	r2,0(r18)
10012c28:	00800084 	movi	r2,2
10012c2c:	90800115 	stw	r2,4(r18)
10012c30:	e0bfca17 	ldw	r2,-216(fp)
10012c34:	10800084 	addi	r2,r2,2
10012c38:	e0bfca15 	stw	r2,-216(fp)
10012c3c:	94800204 	addi	r18,r18,8
10012c40:	e0bfc917 	ldw	r2,-220(fp)
10012c44:	10800044 	addi	r2,r2,1
10012c48:	e0bfc915 	stw	r2,-220(fp)
10012c4c:	e0bfc917 	ldw	r2,-220(fp)
10012c50:	10800210 	cmplti	r2,r2,8
10012c54:	1000071e 	bne	r2,zero,10012c74 <___vfiprintf_internal_r+0xe88>
10012c58:	e0bfc804 	addi	r2,fp,-224
10012c5c:	100d883a 	mov	r6,r2
10012c60:	e17fe717 	ldw	r5,-100(fp)
10012c64:	e13fe617 	ldw	r4,-104(fp)
10012c68:	0011b680 	call	10011b68 <__sprint_r>
10012c6c:	1000e81e 	bne	r2,zero,10013010 <___vfiprintf_internal_r+0x1224>
10012c70:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
10012c74:	9880210c 	andi	r2,r19,132
10012c78:	10802018 	cmpnei	r2,r2,128
10012c7c:	1000351e 	bne	r2,zero,10012d54 <___vfiprintf_internal_r+0xf68>
			PAD (width - realsz, zeroes);
10012c80:	e0ffba17 	ldw	r3,-280(fp)
10012c84:	e0bfc017 	ldw	r2,-256(fp)
10012c88:	18a1c83a 	sub	r16,r3,r2
10012c8c:	0400310e 	bge	zero,r16,10012d54 <___vfiprintf_internal_r+0xf68>
10012c90:	00001706 	br	10012cf0 <___vfiprintf_internal_r+0xf04>
10012c94:	00840374 	movhi	r2,4109
10012c98:	10be4084 	addi	r2,r2,-1790
10012c9c:	90800015 	stw	r2,0(r18)
10012ca0:	00800404 	movi	r2,16
10012ca4:	90800115 	stw	r2,4(r18)
10012ca8:	e0bfca17 	ldw	r2,-216(fp)
10012cac:	10800404 	addi	r2,r2,16
10012cb0:	e0bfca15 	stw	r2,-216(fp)
10012cb4:	94800204 	addi	r18,r18,8
10012cb8:	e0bfc917 	ldw	r2,-220(fp)
10012cbc:	10800044 	addi	r2,r2,1
10012cc0:	e0bfc915 	stw	r2,-220(fp)
10012cc4:	e0bfc917 	ldw	r2,-220(fp)
10012cc8:	10800210 	cmplti	r2,r2,8
10012ccc:	1000071e 	bne	r2,zero,10012cec <___vfiprintf_internal_r+0xf00>
10012cd0:	e0bfc804 	addi	r2,fp,-224
10012cd4:	100d883a 	mov	r6,r2
10012cd8:	e17fe717 	ldw	r5,-100(fp)
10012cdc:	e13fe617 	ldw	r4,-104(fp)
10012ce0:	0011b680 	call	10011b68 <__sprint_r>
10012ce4:	1000cc1e 	bne	r2,zero,10013018 <___vfiprintf_internal_r+0x122c>
10012ce8:	e4bfcb04 	addi	r18,fp,-212
10012cec:	843ffc04 	addi	r16,r16,-16
10012cf0:	80800448 	cmpgei	r2,r16,17
10012cf4:	103fe71e 	bne	r2,zero,10012c94 <__alt_data_end+0xf8012c94>
10012cf8:	00840374 	movhi	r2,4109
10012cfc:	10be4084 	addi	r2,r2,-1790
10012d00:	90800015 	stw	r2,0(r18)
10012d04:	8005883a 	mov	r2,r16
10012d08:	90800115 	stw	r2,4(r18)
10012d0c:	e0bfca17 	ldw	r2,-216(fp)
10012d10:	8007883a 	mov	r3,r16
10012d14:	10c5883a 	add	r2,r2,r3
10012d18:	e0bfca15 	stw	r2,-216(fp)
10012d1c:	94800204 	addi	r18,r18,8
10012d20:	e0bfc917 	ldw	r2,-220(fp)
10012d24:	10800044 	addi	r2,r2,1
10012d28:	e0bfc915 	stw	r2,-220(fp)
10012d2c:	e0bfc917 	ldw	r2,-220(fp)
10012d30:	10800210 	cmplti	r2,r2,8
10012d34:	1000071e 	bne	r2,zero,10012d54 <___vfiprintf_internal_r+0xf68>
10012d38:	e0bfc804 	addi	r2,fp,-224
10012d3c:	100d883a 	mov	r6,r2
10012d40:	e17fe717 	ldw	r5,-100(fp)
10012d44:	e13fe617 	ldw	r4,-104(fp)
10012d48:	0011b680 	call	10011b68 <__sprint_r>
10012d4c:	1000b41e 	bne	r2,zero,10013020 <___vfiprintf_internal_r+0x1234>
10012d50:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
10012d54:	e0ffbf17 	ldw	r3,-260(fp)
10012d58:	e0bfc117 	ldw	r2,-252(fp)
10012d5c:	18a1c83a 	sub	r16,r3,r2
10012d60:	0400310e 	bge	zero,r16,10012e28 <___vfiprintf_internal_r+0x103c>
10012d64:	00001706 	br	10012dc4 <___vfiprintf_internal_r+0xfd8>
10012d68:	00840374 	movhi	r2,4109
10012d6c:	10be4084 	addi	r2,r2,-1790
10012d70:	90800015 	stw	r2,0(r18)
10012d74:	00800404 	movi	r2,16
10012d78:	90800115 	stw	r2,4(r18)
10012d7c:	e0bfca17 	ldw	r2,-216(fp)
10012d80:	10800404 	addi	r2,r2,16
10012d84:	e0bfca15 	stw	r2,-216(fp)
10012d88:	94800204 	addi	r18,r18,8
10012d8c:	e0bfc917 	ldw	r2,-220(fp)
10012d90:	10800044 	addi	r2,r2,1
10012d94:	e0bfc915 	stw	r2,-220(fp)
10012d98:	e0bfc917 	ldw	r2,-220(fp)
10012d9c:	10800210 	cmplti	r2,r2,8
10012da0:	1000071e 	bne	r2,zero,10012dc0 <___vfiprintf_internal_r+0xfd4>
10012da4:	e0bfc804 	addi	r2,fp,-224
10012da8:	100d883a 	mov	r6,r2
10012dac:	e17fe717 	ldw	r5,-100(fp)
10012db0:	e13fe617 	ldw	r4,-104(fp)
10012db4:	0011b680 	call	10011b68 <__sprint_r>
10012db8:	10009b1e 	bne	r2,zero,10013028 <___vfiprintf_internal_r+0x123c>
10012dbc:	e4bfcb04 	addi	r18,fp,-212
10012dc0:	843ffc04 	addi	r16,r16,-16
10012dc4:	80800448 	cmpgei	r2,r16,17
10012dc8:	103fe71e 	bne	r2,zero,10012d68 <__alt_data_end+0xf8012d68>
10012dcc:	00840374 	movhi	r2,4109
10012dd0:	10be4084 	addi	r2,r2,-1790
10012dd4:	90800015 	stw	r2,0(r18)
10012dd8:	8005883a 	mov	r2,r16
10012ddc:	90800115 	stw	r2,4(r18)
10012de0:	e0bfca17 	ldw	r2,-216(fp)
10012de4:	8007883a 	mov	r3,r16
10012de8:	10c5883a 	add	r2,r2,r3
10012dec:	e0bfca15 	stw	r2,-216(fp)
10012df0:	94800204 	addi	r18,r18,8
10012df4:	e0bfc917 	ldw	r2,-220(fp)
10012df8:	10800044 	addi	r2,r2,1
10012dfc:	e0bfc915 	stw	r2,-220(fp)
10012e00:	e0bfc917 	ldw	r2,-220(fp)
10012e04:	10800210 	cmplti	r2,r2,8
10012e08:	1000071e 	bne	r2,zero,10012e28 <___vfiprintf_internal_r+0x103c>
10012e0c:	e0bfc804 	addi	r2,fp,-224
10012e10:	100d883a 	mov	r6,r2
10012e14:	e17fe717 	ldw	r5,-100(fp)
10012e18:	e13fe617 	ldw	r4,-104(fp)
10012e1c:	0011b680 	call	10011b68 <__sprint_r>
10012e20:	1000831e 	bne	r2,zero,10013030 <___vfiprintf_internal_r+0x1244>
10012e24:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
10012e28:	95000015 	stw	r20,0(r18)
10012e2c:	e0bfc117 	ldw	r2,-252(fp)
10012e30:	90800115 	stw	r2,4(r18)
10012e34:	e0ffca17 	ldw	r3,-216(fp)
10012e38:	e0bfc117 	ldw	r2,-252(fp)
10012e3c:	1885883a 	add	r2,r3,r2
10012e40:	e0bfca15 	stw	r2,-216(fp)
10012e44:	94800204 	addi	r18,r18,8
10012e48:	e0bfc917 	ldw	r2,-220(fp)
10012e4c:	10800044 	addi	r2,r2,1
10012e50:	e0bfc915 	stw	r2,-220(fp)
10012e54:	e0bfc917 	ldw	r2,-220(fp)
10012e58:	10800210 	cmplti	r2,r2,8
10012e5c:	1000071e 	bne	r2,zero,10012e7c <___vfiprintf_internal_r+0x1090>
10012e60:	e0bfc804 	addi	r2,fp,-224
10012e64:	100d883a 	mov	r6,r2
10012e68:	e17fe717 	ldw	r5,-100(fp)
10012e6c:	e13fe617 	ldw	r4,-104(fp)
10012e70:	0011b680 	call	10011b68 <__sprint_r>
10012e74:	1000701e 	bne	r2,zero,10013038 <___vfiprintf_internal_r+0x124c>
10012e78:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
10012e7c:	9880010c 	andi	r2,r19,4
10012e80:	10003526 	beq	r2,zero,10012f58 <___vfiprintf_internal_r+0x116c>
			PAD (width - realsz, blanks);
10012e84:	e0ffba17 	ldw	r3,-280(fp)
10012e88:	e0bfc017 	ldw	r2,-256(fp)
10012e8c:	18a1c83a 	sub	r16,r3,r2
10012e90:	0400310e 	bge	zero,r16,10012f58 <___vfiprintf_internal_r+0x116c>
10012e94:	00001706 	br	10012ef4 <___vfiprintf_internal_r+0x1108>
10012e98:	00840374 	movhi	r2,4109
10012e9c:	10be3c84 	addi	r2,r2,-1806
10012ea0:	90800015 	stw	r2,0(r18)
10012ea4:	00800404 	movi	r2,16
10012ea8:	90800115 	stw	r2,4(r18)
10012eac:	e0bfca17 	ldw	r2,-216(fp)
10012eb0:	10800404 	addi	r2,r2,16
10012eb4:	e0bfca15 	stw	r2,-216(fp)
10012eb8:	94800204 	addi	r18,r18,8
10012ebc:	e0bfc917 	ldw	r2,-220(fp)
10012ec0:	10800044 	addi	r2,r2,1
10012ec4:	e0bfc915 	stw	r2,-220(fp)
10012ec8:	e0bfc917 	ldw	r2,-220(fp)
10012ecc:	10800210 	cmplti	r2,r2,8
10012ed0:	1000071e 	bne	r2,zero,10012ef0 <___vfiprintf_internal_r+0x1104>
10012ed4:	e0bfc804 	addi	r2,fp,-224
10012ed8:	100d883a 	mov	r6,r2
10012edc:	e17fe717 	ldw	r5,-100(fp)
10012ee0:	e13fe617 	ldw	r4,-104(fp)
10012ee4:	0011b680 	call	10011b68 <__sprint_r>
10012ee8:	1000551e 	bne	r2,zero,10013040 <___vfiprintf_internal_r+0x1254>
10012eec:	e4bfcb04 	addi	r18,fp,-212
10012ef0:	843ffc04 	addi	r16,r16,-16
10012ef4:	80800448 	cmpgei	r2,r16,17
10012ef8:	103fe71e 	bne	r2,zero,10012e98 <__alt_data_end+0xf8012e98>
10012efc:	00840374 	movhi	r2,4109
10012f00:	10be3c84 	addi	r2,r2,-1806
10012f04:	90800015 	stw	r2,0(r18)
10012f08:	8005883a 	mov	r2,r16
10012f0c:	90800115 	stw	r2,4(r18)
10012f10:	e0bfca17 	ldw	r2,-216(fp)
10012f14:	8007883a 	mov	r3,r16
10012f18:	10c5883a 	add	r2,r2,r3
10012f1c:	e0bfca15 	stw	r2,-216(fp)
10012f20:	94800204 	addi	r18,r18,8
10012f24:	e0bfc917 	ldw	r2,-220(fp)
10012f28:	10800044 	addi	r2,r2,1
10012f2c:	e0bfc915 	stw	r2,-220(fp)
10012f30:	e0bfc917 	ldw	r2,-220(fp)
10012f34:	10800210 	cmplti	r2,r2,8
10012f38:	1000071e 	bne	r2,zero,10012f58 <___vfiprintf_internal_r+0x116c>
10012f3c:	e0bfc804 	addi	r2,fp,-224
10012f40:	100d883a 	mov	r6,r2
10012f44:	e17fe717 	ldw	r5,-100(fp)
10012f48:	e13fe617 	ldw	r4,-104(fp)
10012f4c:	0011b680 	call	10011b68 <__sprint_r>
10012f50:	10003d1e 	bne	r2,zero,10013048 <___vfiprintf_internal_r+0x125c>
10012f54:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
10012f58:	e0ffba17 	ldw	r3,-280(fp)
10012f5c:	e0bfc017 	ldw	r2,-256(fp)
10012f60:	10c0010e 	bge	r2,r3,10012f68 <___vfiprintf_internal_r+0x117c>
10012f64:	1805883a 	mov	r2,r3
10012f68:	e0ffb917 	ldw	r3,-284(fp)
10012f6c:	1885883a 	add	r2,r3,r2
10012f70:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
10012f74:	e0bfca17 	ldw	r2,-216(fp)
10012f78:	10000626 	beq	r2,zero,10012f94 <___vfiprintf_internal_r+0x11a8>
10012f7c:	e0bfc804 	addi	r2,fp,-224
10012f80:	100d883a 	mov	r6,r2
10012f84:	e17fe717 	ldw	r5,-100(fp)
10012f88:	e13fe617 	ldw	r4,-104(fp)
10012f8c:	0011b680 	call	10011b68 <__sprint_r>
10012f90:	10002f1e 	bne	r2,zero,10013050 <___vfiprintf_internal_r+0x1264>
10012f94:	e03fc915 	stw	zero,-220(fp)
10012f98:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
10012f9c:	e0bfc317 	ldw	r2,-244(fp)
10012fa0:	103be426 	beq	r2,zero,10011f34 <__alt_data_end+0xf8011f34>
			_free_r (data, malloc_buf);
10012fa4:	e17fc317 	ldw	r5,-244(fp)
10012fa8:	e13fe617 	ldw	r4,-104(fp)
10012fac:	000dda40 	call	1000dda4 <_free_r>
			malloc_buf = NULL;
10012fb0:	e03fc315 	stw	zero,-244(fp)
		}
	}
10012fb4:	003bdf06 	br	10011f34 <__alt_data_end+0xf8011f34>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
10012fb8:	0001883a 	nop
10012fbc:	00000106 	br	10012fc4 <___vfiprintf_internal_r+0x11d8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
10012fc0:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
10012fc4:	e0bfca17 	ldw	r2,-216(fp)
10012fc8:	10000626 	beq	r2,zero,10012fe4 <___vfiprintf_internal_r+0x11f8>
10012fcc:	e0bfc804 	addi	r2,fp,-224
10012fd0:	100d883a 	mov	r6,r2
10012fd4:	e17fe717 	ldw	r5,-100(fp)
10012fd8:	e13fe617 	ldw	r4,-104(fp)
10012fdc:	0011b680 	call	10011b68 <__sprint_r>
10012fe0:	10001d1e 	bne	r2,zero,10013058 <___vfiprintf_internal_r+0x126c>
10012fe4:	e03fc915 	stw	zero,-220(fp)
10012fe8:	e4bfcb04 	addi	r18,fp,-212
10012fec:	00001b06 	br	1001305c <___vfiprintf_internal_r+0x1270>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
10012ff0:	0001883a 	nop
10012ff4:	00001906 	br	1001305c <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
10012ff8:	0001883a 	nop
10012ffc:	00001706 	br	1001305c <___vfiprintf_internal_r+0x1270>
10013000:	0001883a 	nop
10013004:	00001506 	br	1001305c <___vfiprintf_internal_r+0x1270>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
10013008:	0001883a 	nop
1001300c:	00001306 	br	1001305c <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
10013010:	0001883a 	nop
10013014:	00001106 	br	1001305c <___vfiprintf_internal_r+0x1270>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
10013018:	0001883a 	nop
1001301c:	00000f06 	br	1001305c <___vfiprintf_internal_r+0x1270>
10013020:	0001883a 	nop
10013024:	00000d06 	br	1001305c <___vfiprintf_internal_r+0x1270>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
10013028:	0001883a 	nop
1001302c:	00000b06 	br	1001305c <___vfiprintf_internal_r+0x1270>
10013030:	0001883a 	nop
10013034:	00000906 	br	1001305c <___vfiprintf_internal_r+0x1270>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
10013038:	0001883a 	nop
1001303c:	00000706 	br	1001305c <___vfiprintf_internal_r+0x1270>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
10013040:	0001883a 	nop
10013044:	00000506 	br	1001305c <___vfiprintf_internal_r+0x1270>
10013048:	0001883a 	nop
1001304c:	00000306 	br	1001305c <___vfiprintf_internal_r+0x1270>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
10013050:	0001883a 	nop
10013054:	00000106 	br	1001305c <___vfiprintf_internal_r+0x1270>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
10013058:	0001883a 	nop
error:
	if (malloc_buf != NULL)
1001305c:	e0bfc317 	ldw	r2,-244(fp)
10013060:	10000326 	beq	r2,zero,10013070 <___vfiprintf_internal_r+0x1284>
		_free_r (data, malloc_buf);
10013064:	e17fc317 	ldw	r5,-244(fp)
10013068:	e13fe617 	ldw	r4,-104(fp)
1001306c:	000dda40 	call	1000dda4 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
10013070:	e0bfe717 	ldw	r2,-100(fp)
10013074:	1080030b 	ldhu	r2,12(r2)
10013078:	10bfffcc 	andi	r2,r2,65535
1001307c:	1080100c 	andi	r2,r2,64
10013080:	1000021e 	bne	r2,zero,1001308c <___vfiprintf_internal_r+0x12a0>
10013084:	e0bfb917 	ldw	r2,-284(fp)
10013088:	00000206 	br	10013094 <___vfiprintf_internal_r+0x12a8>
1001308c:	00bfffc4 	movi	r2,-1
10013090:	0001883a 	nop
	/* NOTREACHED */
}
10013094:	e6fff804 	addi	sp,fp,-32
10013098:	dfc00917 	ldw	ra,36(sp)
1001309c:	df000817 	ldw	fp,32(sp)
100130a0:	ddc00717 	ldw	r23,28(sp)
100130a4:	dd800617 	ldw	r22,24(sp)
100130a8:	dd400517 	ldw	r21,20(sp)
100130ac:	dd000417 	ldw	r20,16(sp)
100130b0:	dcc00317 	ldw	r19,12(sp)
100130b4:	dc800217 	ldw	r18,8(sp)
100130b8:	dc400117 	ldw	r17,4(sp)
100130bc:	dc000017 	ldw	r16,0(sp)
100130c0:	dec00a04 	addi	sp,sp,40
100130c4:	f800283a 	ret

100130c8 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
100130c8:	defff904 	addi	sp,sp,-28
100130cc:	dfc00615 	stw	ra,24(sp)
100130d0:	df000515 	stw	fp,20(sp)
100130d4:	dc800415 	stw	r18,16(sp)
100130d8:	dc400315 	stw	r17,12(sp)
100130dc:	dc000215 	stw	r16,8(sp)
100130e0:	df000504 	addi	fp,sp,20
100130e4:	e13ffc15 	stw	r4,-16(fp)
100130e8:	2825883a 	mov	r18,r5
100130ec:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
100130f0:	e0bffc17 	ldw	r2,-16(fp)
100130f4:	e0bffb15 	stw	r2,-20(fp)
100130f8:	e0bffb17 	ldw	r2,-20(fp)
100130fc:	10000526 	beq	r2,zero,10013114 <__swbuf_r+0x4c>
10013100:	e0bffb17 	ldw	r2,-20(fp)
10013104:	10800e17 	ldw	r2,56(r2)
10013108:	1000021e 	bne	r2,zero,10013114 <__swbuf_r+0x4c>
1001310c:	e13ffb17 	ldw	r4,-20(fp)
10013110:	000db740 	call	1000db74 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
10013114:	80800617 	ldw	r2,24(r16)
10013118:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
1001311c:	8080030b 	ldhu	r2,12(r16)
10013120:	10bfffcc 	andi	r2,r2,65535
10013124:	1080020c 	andi	r2,r2,8
10013128:	10000226 	beq	r2,zero,10013134 <__swbuf_r+0x6c>
1001312c:	80800417 	ldw	r2,16(r16)
10013130:	1000061e 	bne	r2,zero,1001314c <__swbuf_r+0x84>
10013134:	800b883a 	mov	r5,r16
10013138:	e13ffc17 	ldw	r4,-16(fp)
1001313c:	000b29c0 	call	1000b29c <__swsetup_r>
10013140:	10000226 	beq	r2,zero,1001314c <__swbuf_r+0x84>
    return EOF;
10013144:	00bfffc4 	movi	r2,-1
10013148:	00003106 	br	10013210 <__swbuf_r+0x148>
  c = (unsigned char) c;
1001314c:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
10013150:	8080030b 	ldhu	r2,12(r16)
10013154:	10bfffcc 	andi	r2,r2,65535
10013158:	1088000c 	andi	r2,r2,8192
1001315c:	1000071e 	bne	r2,zero,1001317c <__swbuf_r+0xb4>
10013160:	8080030b 	ldhu	r2,12(r16)
10013164:	10880014 	ori	r2,r2,8192
10013168:	8080030d 	sth	r2,12(r16)
1001316c:	80c01917 	ldw	r3,100(r16)
10013170:	00b7ffc4 	movi	r2,-8193
10013174:	1884703a 	and	r2,r3,r2
10013178:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
1001317c:	80800017 	ldw	r2,0(r16)
10013180:	1007883a 	mov	r3,r2
10013184:	80800417 	ldw	r2,16(r16)
10013188:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
1001318c:	80800517 	ldw	r2,20(r16)
10013190:	88800716 	blt	r17,r2,100131b0 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
10013194:	800b883a 	mov	r5,r16
10013198:	e13ffc17 	ldw	r4,-16(fp)
1001319c:	000d6ac0 	call	1000d6ac <_fflush_r>
100131a0:	10000226 	beq	r2,zero,100131ac <__swbuf_r+0xe4>
	return EOF;
100131a4:	00bfffc4 	movi	r2,-1
100131a8:	00001906 	br	10013210 <__swbuf_r+0x148>
      n = 0;
100131ac:	0023883a 	mov	r17,zero
    }
  fp->_w--;
100131b0:	80800217 	ldw	r2,8(r16)
100131b4:	10bfffc4 	addi	r2,r2,-1
100131b8:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
100131bc:	80800017 	ldw	r2,0(r16)
100131c0:	10c00044 	addi	r3,r2,1
100131c4:	80c00015 	stw	r3,0(r16)
100131c8:	9007883a 	mov	r3,r18
100131cc:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
100131d0:	8c400044 	addi	r17,r17,1
100131d4:	80800517 	ldw	r2,20(r16)
100131d8:	88800626 	beq	r17,r2,100131f4 <__swbuf_r+0x12c>
100131dc:	8080030b 	ldhu	r2,12(r16)
100131e0:	10bfffcc 	andi	r2,r2,65535
100131e4:	1080004c 	andi	r2,r2,1
100131e8:	10000826 	beq	r2,zero,1001320c <__swbuf_r+0x144>
100131ec:	90800298 	cmpnei	r2,r18,10
100131f0:	1000061e 	bne	r2,zero,1001320c <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
100131f4:	800b883a 	mov	r5,r16
100131f8:	e13ffc17 	ldw	r4,-16(fp)
100131fc:	000d6ac0 	call	1000d6ac <_fflush_r>
10013200:	10000226 	beq	r2,zero,1001320c <__swbuf_r+0x144>
      return EOF;
10013204:	00bfffc4 	movi	r2,-1
10013208:	00000106 	br	10013210 <__swbuf_r+0x148>
  return c;
1001320c:	9005883a 	mov	r2,r18
}
10013210:	e6fffd04 	addi	sp,fp,-12
10013214:	dfc00417 	ldw	ra,16(sp)
10013218:	df000317 	ldw	fp,12(sp)
1001321c:	dc800217 	ldw	r18,8(sp)
10013220:	dc400117 	ldw	r17,4(sp)
10013224:	dc000017 	ldw	r16,0(sp)
10013228:	dec00504 	addi	sp,sp,20
1001322c:	f800283a 	ret

10013230 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
10013230:	defffe04 	addi	sp,sp,-8
10013234:	dfc00115 	stw	ra,4(sp)
10013238:	df000015 	stw	fp,0(sp)
1001323c:	d839883a 	mov	fp,sp
10013240:	2007883a 	mov	r3,r4
10013244:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
10013248:	008403b4 	movhi	r2,4110
1001324c:	10a45004 	addi	r2,r2,-28352
10013250:	10800017 	ldw	r2,0(r2)
10013254:	200d883a 	mov	r6,r4
10013258:	180b883a 	mov	r5,r3
1001325c:	1009883a 	mov	r4,r2
10013260:	00130c80 	call	100130c8 <__swbuf_r>
}
10013264:	e037883a 	mov	sp,fp
10013268:	dfc00117 	ldw	ra,4(sp)
1001326c:	df000017 	ldw	fp,0(sp)
10013270:	dec00204 	addi	sp,sp,8
10013274:	f800283a 	ret

10013278 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
10013278:	defff904 	addi	sp,sp,-28
1001327c:	dfc00615 	stw	ra,24(sp)
10013280:	df000515 	stw	fp,20(sp)
10013284:	df000504 	addi	fp,sp,20
10013288:	e13ffc15 	stw	r4,-16(fp)
1001328c:	e17ffd15 	stw	r5,-12(fp)
10013290:	e1bffe15 	stw	r6,-8(fp)
10013294:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
10013298:	008403b4 	movhi	r2,4110
1001329c:	108aa904 	addi	r2,r2,10916
100132a0:	10000015 	stw	zero,0(r2)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
100132a4:	e1bfff17 	ldw	r6,-4(fp)
100132a8:	e17ffe17 	ldw	r5,-8(fp)
100132ac:	e13ffd17 	ldw	r4,-12(fp)
100132b0:	00162340 	call	10016234 <write>
100132b4:	e0bffb15 	stw	r2,-20(fp)
100132b8:	e0bffb17 	ldw	r2,-20(fp)
100132bc:	10bfffd8 	cmpnei	r2,r2,-1
100132c0:	1000091e 	bne	r2,zero,100132e8 <_write_r+0x70>
100132c4:	008403b4 	movhi	r2,4110
100132c8:	108aa904 	addi	r2,r2,10916
100132cc:	10800017 	ldw	r2,0(r2)
100132d0:	10000526 	beq	r2,zero,100132e8 <_write_r+0x70>
    ptr->_errno = errno;
100132d4:	008403b4 	movhi	r2,4110
100132d8:	108aa904 	addi	r2,r2,10916
100132dc:	10c00017 	ldw	r3,0(r2)
100132e0:	e0bffc17 	ldw	r2,-16(fp)
100132e4:	10c00015 	stw	r3,0(r2)
  return ret;
100132e8:	e0bffb17 	ldw	r2,-20(fp)
}
100132ec:	e037883a 	mov	sp,fp
100132f0:	dfc00117 	ldw	ra,4(sp)
100132f4:	df000017 	ldw	fp,0(sp)
100132f8:	dec00204 	addi	sp,sp,8
100132fc:	f800283a 	ret

10013300 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
10013300:	defffb04 	addi	sp,sp,-20
10013304:	dfc00415 	stw	ra,16(sp)
10013308:	df000315 	stw	fp,12(sp)
1001330c:	df000304 	addi	fp,sp,12
10013310:	e13ffe15 	stw	r4,-8(fp)
10013314:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
10013318:	008403b4 	movhi	r2,4110
1001331c:	108aa904 	addi	r2,r2,10916
10013320:	10000015 	stw	zero,0(r2)
  if ((ret = _close (fd)) == -1 && errno != 0)
10013324:	e13fff17 	ldw	r4,-4(fp)
10013328:	00155d00 	call	100155d0 <close>
1001332c:	e0bffd15 	stw	r2,-12(fp)
10013330:	e0bffd17 	ldw	r2,-12(fp)
10013334:	10bfffd8 	cmpnei	r2,r2,-1
10013338:	1000091e 	bne	r2,zero,10013360 <_close_r+0x60>
1001333c:	008403b4 	movhi	r2,4110
10013340:	108aa904 	addi	r2,r2,10916
10013344:	10800017 	ldw	r2,0(r2)
10013348:	10000526 	beq	r2,zero,10013360 <_close_r+0x60>
    ptr->_errno = errno;
1001334c:	008403b4 	movhi	r2,4110
10013350:	108aa904 	addi	r2,r2,10916
10013354:	10c00017 	ldw	r3,0(r2)
10013358:	e0bffe17 	ldw	r2,-8(fp)
1001335c:	10c00015 	stw	r3,0(r2)
  return ret;
10013360:	e0bffd17 	ldw	r2,-12(fp)
}
10013364:	e037883a 	mov	sp,fp
10013368:	dfc00117 	ldw	ra,4(sp)
1001336c:	df000017 	ldw	fp,0(sp)
10013370:	dec00204 	addi	sp,sp,8
10013374:	f800283a 	ret

10013378 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
10013378:	defffa04 	addi	sp,sp,-24
1001337c:	dfc00515 	stw	ra,20(sp)
10013380:	df000415 	stw	fp,16(sp)
10013384:	dc000315 	stw	r16,12(sp)
10013388:	df000404 	addi	fp,sp,16
1001338c:	e13ffe15 	stw	r4,-8(fp)
10013390:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
10013394:	8000021e 	bne	r16,zero,100133a0 <_fclose_r+0x28>
    return (0);			/* on NULL */
10013398:	0005883a 	mov	r2,zero
1001339c:	00003b06 	br	1001348c <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
100133a0:	e0bffe17 	ldw	r2,-8(fp)
100133a4:	e0bffd15 	stw	r2,-12(fp)
100133a8:	e0bffd17 	ldw	r2,-12(fp)
100133ac:	10000526 	beq	r2,zero,100133c4 <_fclose_r+0x4c>
100133b0:	e0bffd17 	ldw	r2,-12(fp)
100133b4:	10800e17 	ldw	r2,56(r2)
100133b8:	1000021e 	bne	r2,zero,100133c4 <_fclose_r+0x4c>
100133bc:	e13ffd17 	ldw	r4,-12(fp)
100133c0:	000db740 	call	1000db74 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
100133c4:	8080030b 	ldhu	r2,12(r16)
100133c8:	10bfffcc 	andi	r2,r2,65535
100133cc:	10a0001c 	xori	r2,r2,32768
100133d0:	10a00004 	addi	r2,r2,-32768
100133d4:	1000021e 	bne	r2,zero,100133e0 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
100133d8:	0005883a 	mov	r2,zero
100133dc:	00002b06 	br	1001348c <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
100133e0:	800b883a 	mov	r5,r16
100133e4:	e13ffe17 	ldw	r4,-8(fp)
100133e8:	000d3a80 	call	1000d3a8 <__sflush_r>
100133ec:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
100133f0:	80800b17 	ldw	r2,44(r16)
100133f4:	10000826 	beq	r2,zero,10013418 <_fclose_r+0xa0>
100133f8:	80800b17 	ldw	r2,44(r16)
100133fc:	80c00717 	ldw	r3,28(r16)
10013400:	180b883a 	mov	r5,r3
10013404:	e13ffe17 	ldw	r4,-8(fp)
10013408:	103ee83a 	callr	r2
1001340c:	1000020e 	bge	r2,zero,10013418 <_fclose_r+0xa0>
    r = EOF;
10013410:	00bfffc4 	movi	r2,-1
10013414:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
10013418:	8080030b 	ldhu	r2,12(r16)
1001341c:	10bfffcc 	andi	r2,r2,65535
10013420:	1080200c 	andi	r2,r2,128
10013424:	10000426 	beq	r2,zero,10013438 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
10013428:	80800417 	ldw	r2,16(r16)
1001342c:	100b883a 	mov	r5,r2
10013430:	e13ffe17 	ldw	r4,-8(fp)
10013434:	000dda40 	call	1000dda4 <_free_r>
  if (HASUB (fp))
10013438:	80800c17 	ldw	r2,48(r16)
1001343c:	10000826 	beq	r2,zero,10013460 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
10013440:	80c00c17 	ldw	r3,48(r16)
10013444:	80801004 	addi	r2,r16,64
10013448:	18800426 	beq	r3,r2,1001345c <_fclose_r+0xe4>
1001344c:	80800c17 	ldw	r2,48(r16)
10013450:	100b883a 	mov	r5,r2
10013454:	e13ffe17 	ldw	r4,-8(fp)
10013458:	000dda40 	call	1000dda4 <_free_r>
1001345c:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
10013460:	80801117 	ldw	r2,68(r16)
10013464:	10000526 	beq	r2,zero,1001347c <_fclose_r+0x104>
    FREELB (rptr, fp);
10013468:	80801117 	ldw	r2,68(r16)
1001346c:	100b883a 	mov	r5,r2
10013470:	e13ffe17 	ldw	r4,-8(fp)
10013474:	000dda40 	call	1000dda4 <_free_r>
10013478:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
1001347c:	000dc4c0 	call	1000dc4c <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
10013480:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
10013484:	000dc6c0 	call	1000dc6c <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
10013488:	e0bffc17 	ldw	r2,-16(fp)
}
1001348c:	e6ffff04 	addi	sp,fp,-4
10013490:	dfc00217 	ldw	ra,8(sp)
10013494:	df000117 	ldw	fp,4(sp)
10013498:	dc000017 	ldw	r16,0(sp)
1001349c:	dec00304 	addi	sp,sp,12
100134a0:	f800283a 	ret

100134a4 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
100134a4:	defffe04 	addi	sp,sp,-8
100134a8:	dfc00115 	stw	ra,4(sp)
100134ac:	df000015 	stw	fp,0(sp)
100134b0:	d839883a 	mov	fp,sp
100134b4:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
100134b8:	008403b4 	movhi	r2,4110
100134bc:	10a45004 	addi	r2,r2,-28352
100134c0:	10800017 	ldw	r2,0(r2)
100134c4:	180b883a 	mov	r5,r3
100134c8:	1009883a 	mov	r4,r2
100134cc:	00133780 	call	10013378 <_fclose_r>
}
100134d0:	e037883a 	mov	sp,fp
100134d4:	dfc00117 	ldw	ra,4(sp)
100134d8:	df000017 	ldw	fp,0(sp)
100134dc:	dec00204 	addi	sp,sp,8
100134e0:	f800283a 	ret

100134e4 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
100134e4:	defff804 	addi	sp,sp,-32
100134e8:	dfc00715 	stw	ra,28(sp)
100134ec:	df000615 	stw	fp,24(sp)
100134f0:	df000604 	addi	fp,sp,24
100134f4:	e13ffd15 	stw	r4,-12(fp)
100134f8:	e17ffe15 	stw	r5,-8(fp)
100134fc:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
10013500:	000edb00 	call	1000edb0 <__locale_mb_cur_max>
10013504:	10800058 	cmpnei	r2,r2,1
10013508:	10000a1e 	bne	r2,zero,10013534 <__fputwc+0x50>
1001350c:	e0bffe17 	ldw	r2,-8(fp)
10013510:	0080080e 	bge	zero,r2,10013534 <__fputwc+0x50>
10013514:	e0bffe17 	ldw	r2,-8(fp)
10013518:	10804008 	cmpgei	r2,r2,256
1001351c:	1000051e 	bne	r2,zero,10013534 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
10013520:	e0bffe17 	ldw	r2,-8(fp)
10013524:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
10013528:	00800044 	movi	r2,1
1001352c:	e0bffb15 	stw	r2,-20(fp)
10013530:	00001406 	br	10013584 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
10013534:	e0bfff17 	ldw	r2,-4(fp)
10013538:	10c01704 	addi	r3,r2,92
1001353c:	e0bffc04 	addi	r2,fp,-16
10013540:	180f883a 	mov	r7,r3
10013544:	e1bffe17 	ldw	r6,-8(fp)
10013548:	100b883a 	mov	r5,r2
1001354c:	e13ffd17 	ldw	r4,-12(fp)
10013550:	00139d80 	call	100139d8 <_wcrtomb_r>
10013554:	e0bffb15 	stw	r2,-20(fp)
10013558:	e0bffb17 	ldw	r2,-20(fp)
1001355c:	10bfffd8 	cmpnei	r2,r2,-1
10013560:	1000081e 	bne	r2,zero,10013584 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
10013564:	e0bfff17 	ldw	r2,-4(fp)
10013568:	1080030b 	ldhu	r2,12(r2)
1001356c:	10801014 	ori	r2,r2,64
10013570:	1007883a 	mov	r3,r2
10013574:	e0bfff17 	ldw	r2,-4(fp)
10013578:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
1001357c:	00bfffc4 	movi	r2,-1
10013580:	00005006 	br	100136c4 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
10013584:	e03ffa15 	stw	zero,-24(fp)
10013588:	00004a06 	br	100136b4 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
1001358c:	e0bfff17 	ldw	r2,-4(fp)
10013590:	10800217 	ldw	r2,8(r2)
10013594:	10ffffc4 	addi	r3,r2,-1
10013598:	e0bfff17 	ldw	r2,-4(fp)
1001359c:	10c00215 	stw	r3,8(r2)
100135a0:	e0bfff17 	ldw	r2,-4(fp)
100135a4:	10800217 	ldw	r2,8(r2)
100135a8:	10002c0e 	bge	r2,zero,1001365c <__fputwc+0x178>
100135ac:	e0bfff17 	ldw	r2,-4(fp)
100135b0:	10c00217 	ldw	r3,8(r2)
100135b4:	e0bfff17 	ldw	r2,-4(fp)
100135b8:	10800617 	ldw	r2,24(r2)
100135bc:	18801c16 	blt	r3,r2,10013630 <__fputwc+0x14c>
100135c0:	e0bfff17 	ldw	r2,-4(fp)
100135c4:	10800017 	ldw	r2,0(r2)
100135c8:	e13ffc04 	addi	r4,fp,-16
100135cc:	e0fffa17 	ldw	r3,-24(fp)
100135d0:	20c7883a 	add	r3,r4,r3
100135d4:	18c00003 	ldbu	r3,0(r3)
100135d8:	10c00005 	stb	r3,0(r2)
100135dc:	e0bfff17 	ldw	r2,-4(fp)
100135e0:	10800017 	ldw	r2,0(r2)
100135e4:	10800003 	ldbu	r2,0(r2)
100135e8:	10803fcc 	andi	r2,r2,255
100135ec:	108002a0 	cmpeqi	r2,r2,10
100135f0:	1000091e 	bne	r2,zero,10013618 <__fputwc+0x134>
100135f4:	e0bfff17 	ldw	r2,-4(fp)
100135f8:	10800017 	ldw	r2,0(r2)
100135fc:	11000044 	addi	r4,r2,1
10013600:	e0ffff17 	ldw	r3,-4(fp)
10013604:	19000015 	stw	r4,0(r3)
10013608:	10800003 	ldbu	r2,0(r2)
1001360c:	10803fcc 	andi	r2,r2,255
10013610:	10bfffe0 	cmpeqi	r2,r2,-1
10013614:	00002006 	br	10013698 <__fputwc+0x1b4>
10013618:	e1bfff17 	ldw	r6,-4(fp)
1001361c:	01400284 	movi	r5,10
10013620:	e13ffd17 	ldw	r4,-12(fp)
10013624:	00130c80 	call	100130c8 <__swbuf_r>
10013628:	10bfffe0 	cmpeqi	r2,r2,-1
1001362c:	00001a06 	br	10013698 <__fputwc+0x1b4>
10013630:	e0fffc04 	addi	r3,fp,-16
10013634:	e0bffa17 	ldw	r2,-24(fp)
10013638:	1885883a 	add	r2,r3,r2
1001363c:	10800003 	ldbu	r2,0(r2)
10013640:	10803fcc 	andi	r2,r2,255
10013644:	e1bfff17 	ldw	r6,-4(fp)
10013648:	100b883a 	mov	r5,r2
1001364c:	e13ffd17 	ldw	r4,-12(fp)
10013650:	00130c80 	call	100130c8 <__swbuf_r>
10013654:	10bfffe0 	cmpeqi	r2,r2,-1
10013658:	00000f06 	br	10013698 <__fputwc+0x1b4>
1001365c:	e0bfff17 	ldw	r2,-4(fp)
10013660:	10800017 	ldw	r2,0(r2)
10013664:	e13ffc04 	addi	r4,fp,-16
10013668:	e0fffa17 	ldw	r3,-24(fp)
1001366c:	20c7883a 	add	r3,r4,r3
10013670:	18c00003 	ldbu	r3,0(r3)
10013674:	10c00005 	stb	r3,0(r2)
10013678:	e0bfff17 	ldw	r2,-4(fp)
1001367c:	10800017 	ldw	r2,0(r2)
10013680:	11000044 	addi	r4,r2,1
10013684:	e0ffff17 	ldw	r3,-4(fp)
10013688:	19000015 	stw	r4,0(r3)
1001368c:	10800003 	ldbu	r2,0(r2)
10013690:	10803fcc 	andi	r2,r2,255
10013694:	10bfffe0 	cmpeqi	r2,r2,-1
10013698:	10803fcc 	andi	r2,r2,255
1001369c:	10000226 	beq	r2,zero,100136a8 <__fputwc+0x1c4>
      return WEOF;
100136a0:	00bfffc4 	movi	r2,-1
100136a4:	00000706 	br	100136c4 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
100136a8:	e0bffa17 	ldw	r2,-24(fp)
100136ac:	10800044 	addi	r2,r2,1
100136b0:	e0bffa15 	stw	r2,-24(fp)
100136b4:	e0fffa17 	ldw	r3,-24(fp)
100136b8:	e0bffb17 	ldw	r2,-20(fp)
100136bc:	18bfb336 	bltu	r3,r2,1001358c <__alt_data_end+0xf801358c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
100136c0:	e0bffe17 	ldw	r2,-8(fp)
}
100136c4:	e037883a 	mov	sp,fp
100136c8:	dfc00117 	ldw	ra,4(sp)
100136cc:	df000017 	ldw	fp,0(sp)
100136d0:	dec00204 	addi	sp,sp,8
100136d4:	f800283a 	ret

100136d8 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
100136d8:	defffa04 	addi	sp,sp,-24
100136dc:	dfc00515 	stw	ra,20(sp)
100136e0:	df000415 	stw	fp,16(sp)
100136e4:	df000404 	addi	fp,sp,16
100136e8:	e13ffd15 	stw	r4,-12(fp)
100136ec:	e17ffe15 	stw	r5,-8(fp)
100136f0:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
100136f4:	e0bfff17 	ldw	r2,-4(fp)
100136f8:	1080030b 	ldhu	r2,12(r2)
100136fc:	10bfffcc 	andi	r2,r2,65535
10013700:	1088000c 	andi	r2,r2,8192
10013704:	10000b1e 	bne	r2,zero,10013734 <_fputwc_r+0x5c>
10013708:	e0bfff17 	ldw	r2,-4(fp)
1001370c:	1080030b 	ldhu	r2,12(r2)
10013710:	10880014 	ori	r2,r2,8192
10013714:	1007883a 	mov	r3,r2
10013718:	e0bfff17 	ldw	r2,-4(fp)
1001371c:	10c0030d 	sth	r3,12(r2)
10013720:	e0bfff17 	ldw	r2,-4(fp)
10013724:	10801917 	ldw	r2,100(r2)
10013728:	10c80014 	ori	r3,r2,8192
1001372c:	e0bfff17 	ldw	r2,-4(fp)
10013730:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
10013734:	e1bfff17 	ldw	r6,-4(fp)
10013738:	e17ffe17 	ldw	r5,-8(fp)
1001373c:	e13ffd17 	ldw	r4,-12(fp)
10013740:	00134e40 	call	100134e4 <__fputwc>
10013744:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
10013748:	e0bffc17 	ldw	r2,-16(fp)
}
1001374c:	e037883a 	mov	sp,fp
10013750:	dfc00117 	ldw	ra,4(sp)
10013754:	df000017 	ldw	fp,0(sp)
10013758:	dec00204 	addi	sp,sp,8
1001375c:	f800283a 	ret

10013760 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
10013760:	defffa04 	addi	sp,sp,-24
10013764:	dfc00515 	stw	ra,20(sp)
10013768:	df000415 	stw	fp,16(sp)
1001376c:	df000404 	addi	fp,sp,16
10013770:	e13ffe15 	stw	r4,-8(fp)
10013774:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
10013778:	008403b4 	movhi	r2,4110
1001377c:	10a45004 	addi	r2,r2,-28352
10013780:	10800017 	ldw	r2,0(r2)
10013784:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
10013788:	e0bffc17 	ldw	r2,-16(fp)
1001378c:	e0bffd15 	stw	r2,-12(fp)
10013790:	e0bffd17 	ldw	r2,-12(fp)
10013794:	10000526 	beq	r2,zero,100137ac <fputwc+0x4c>
10013798:	e0bffd17 	ldw	r2,-12(fp)
1001379c:	10800e17 	ldw	r2,56(r2)
100137a0:	1000021e 	bne	r2,zero,100137ac <fputwc+0x4c>
100137a4:	e13ffd17 	ldw	r4,-12(fp)
100137a8:	000db740 	call	1000db74 <__sinit>
  return _fputwc_r (reent, wc, fp);
100137ac:	e1bfff17 	ldw	r6,-4(fp)
100137b0:	e17ffe17 	ldw	r5,-8(fp)
100137b4:	e13ffc17 	ldw	r4,-16(fp)
100137b8:	00136d80 	call	100136d8 <_fputwc_r>
}
100137bc:	e037883a 	mov	sp,fp
100137c0:	dfc00117 	ldw	ra,4(sp)
100137c4:	df000017 	ldw	fp,0(sp)
100137c8:	dec00204 	addi	sp,sp,8
100137cc:	f800283a 	ret

100137d0 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
100137d0:	defffa04 	addi	sp,sp,-24
100137d4:	dfc00515 	stw	ra,20(sp)
100137d8:	df000415 	stw	fp,16(sp)
100137dc:	df000404 	addi	fp,sp,16
100137e0:	e13ffd15 	stw	r4,-12(fp)
100137e4:	e17ffe15 	stw	r5,-8(fp)
100137e8:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
100137ec:	008403b4 	movhi	r2,4110
100137f0:	108aa904 	addi	r2,r2,10916
100137f4:	10000015 	stw	zero,0(r2)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
100137f8:	e17fff17 	ldw	r5,-4(fp)
100137fc:	e13ffe17 	ldw	r4,-8(fp)
10013800:	00157240 	call	10015724 <fstat>
10013804:	e0bffc15 	stw	r2,-16(fp)
10013808:	e0bffc17 	ldw	r2,-16(fp)
1001380c:	10bfffd8 	cmpnei	r2,r2,-1
10013810:	1000091e 	bne	r2,zero,10013838 <_fstat_r+0x68>
10013814:	008403b4 	movhi	r2,4110
10013818:	108aa904 	addi	r2,r2,10916
1001381c:	10800017 	ldw	r2,0(r2)
10013820:	10000526 	beq	r2,zero,10013838 <_fstat_r+0x68>
    ptr->_errno = errno;
10013824:	008403b4 	movhi	r2,4110
10013828:	108aa904 	addi	r2,r2,10916
1001382c:	10c00017 	ldw	r3,0(r2)
10013830:	e0bffd17 	ldw	r2,-12(fp)
10013834:	10c00015 	stw	r3,0(r2)
  return ret;
10013838:	e0bffc17 	ldw	r2,-16(fp)
}
1001383c:	e037883a 	mov	sp,fp
10013840:	dfc00117 	ldw	ra,4(sp)
10013844:	df000017 	ldw	fp,0(sp)
10013848:	dec00204 	addi	sp,sp,8
1001384c:	f800283a 	ret

10013850 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
10013850:	defffb04 	addi	sp,sp,-20
10013854:	dfc00415 	stw	ra,16(sp)
10013858:	df000315 	stw	fp,12(sp)
1001385c:	df000304 	addi	fp,sp,12
10013860:	e13ffe15 	stw	r4,-8(fp)
10013864:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
10013868:	008403b4 	movhi	r2,4110
1001386c:	108aa904 	addi	r2,r2,10916
10013870:	10000015 	stw	zero,0(r2)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
10013874:	e13fff17 	ldw	r4,-4(fp)
10013878:	0015a300 	call	10015a30 <isatty>
1001387c:	e0bffd15 	stw	r2,-12(fp)
10013880:	e0bffd17 	ldw	r2,-12(fp)
10013884:	10bfffd8 	cmpnei	r2,r2,-1
10013888:	1000091e 	bne	r2,zero,100138b0 <_isatty_r+0x60>
1001388c:	008403b4 	movhi	r2,4110
10013890:	108aa904 	addi	r2,r2,10916
10013894:	10800017 	ldw	r2,0(r2)
10013898:	10000526 	beq	r2,zero,100138b0 <_isatty_r+0x60>
    ptr->_errno = errno;
1001389c:	008403b4 	movhi	r2,4110
100138a0:	108aa904 	addi	r2,r2,10916
100138a4:	10c00017 	ldw	r3,0(r2)
100138a8:	e0bffe17 	ldw	r2,-8(fp)
100138ac:	10c00015 	stw	r3,0(r2)
  return ret;
100138b0:	e0bffd17 	ldw	r2,-12(fp)
}
100138b4:	e037883a 	mov	sp,fp
100138b8:	dfc00117 	ldw	ra,4(sp)
100138bc:	df000017 	ldw	fp,0(sp)
100138c0:	dec00204 	addi	sp,sp,8
100138c4:	f800283a 	ret

100138c8 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
100138c8:	defff904 	addi	sp,sp,-28
100138cc:	dfc00615 	stw	ra,24(sp)
100138d0:	df000515 	stw	fp,20(sp)
100138d4:	df000504 	addi	fp,sp,20
100138d8:	e13ffc15 	stw	r4,-16(fp)
100138dc:	e17ffd15 	stw	r5,-12(fp)
100138e0:	e1bffe15 	stw	r6,-8(fp)
100138e4:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
100138e8:	008403b4 	movhi	r2,4110
100138ec:	108aa904 	addi	r2,r2,10916
100138f0:	10000015 	stw	zero,0(r2)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
100138f4:	e1bfff17 	ldw	r6,-4(fp)
100138f8:	e17ffe17 	ldw	r5,-8(fp)
100138fc:	e13ffd17 	ldw	r4,-12(fp)
10013900:	0015c180 	call	10015c18 <lseek>
10013904:	e0bffb15 	stw	r2,-20(fp)
10013908:	e0bffb17 	ldw	r2,-20(fp)
1001390c:	10bfffd8 	cmpnei	r2,r2,-1
10013910:	1000091e 	bne	r2,zero,10013938 <_lseek_r+0x70>
10013914:	008403b4 	movhi	r2,4110
10013918:	108aa904 	addi	r2,r2,10916
1001391c:	10800017 	ldw	r2,0(r2)
10013920:	10000526 	beq	r2,zero,10013938 <_lseek_r+0x70>
    ptr->_errno = errno;
10013924:	008403b4 	movhi	r2,4110
10013928:	108aa904 	addi	r2,r2,10916
1001392c:	10c00017 	ldw	r3,0(r2)
10013930:	e0bffc17 	ldw	r2,-16(fp)
10013934:	10c00015 	stw	r3,0(r2)
  return ret;
10013938:	e0bffb17 	ldw	r2,-20(fp)
}
1001393c:	e037883a 	mov	sp,fp
10013940:	dfc00117 	ldw	ra,4(sp)
10013944:	df000017 	ldw	fp,0(sp)
10013948:	dec00204 	addi	sp,sp,8
1001394c:	f800283a 	ret

10013950 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
10013950:	defff904 	addi	sp,sp,-28
10013954:	dfc00615 	stw	ra,24(sp)
10013958:	df000515 	stw	fp,20(sp)
1001395c:	df000504 	addi	fp,sp,20
10013960:	e13ffc15 	stw	r4,-16(fp)
10013964:	e17ffd15 	stw	r5,-12(fp)
10013968:	e1bffe15 	stw	r6,-8(fp)
1001396c:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
10013970:	008403b4 	movhi	r2,4110
10013974:	108aa904 	addi	r2,r2,10916
10013978:	10000015 	stw	zero,0(r2)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
1001397c:	e1bfff17 	ldw	r6,-4(fp)
10013980:	e17ffe17 	ldw	r5,-8(fp)
10013984:	e13ffd17 	ldw	r4,-12(fp)
10013988:	0015e080 	call	10015e08 <read>
1001398c:	e0bffb15 	stw	r2,-20(fp)
10013990:	e0bffb17 	ldw	r2,-20(fp)
10013994:	10bfffd8 	cmpnei	r2,r2,-1
10013998:	1000091e 	bne	r2,zero,100139c0 <_read_r+0x70>
1001399c:	008403b4 	movhi	r2,4110
100139a0:	108aa904 	addi	r2,r2,10916
100139a4:	10800017 	ldw	r2,0(r2)
100139a8:	10000526 	beq	r2,zero,100139c0 <_read_r+0x70>
    ptr->_errno = errno;
100139ac:	008403b4 	movhi	r2,4110
100139b0:	108aa904 	addi	r2,r2,10916
100139b4:	10c00017 	ldw	r3,0(r2)
100139b8:	e0bffc17 	ldw	r2,-16(fp)
100139bc:	10c00015 	stw	r3,0(r2)
  return ret;
100139c0:	e0bffb17 	ldw	r2,-20(fp)
}
100139c4:	e037883a 	mov	sp,fp
100139c8:	dfc00117 	ldw	ra,4(sp)
100139cc:	df000017 	ldw	fp,0(sp)
100139d0:	dec00204 	addi	sp,sp,8
100139d4:	f800283a 	ret

100139d8 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
100139d8:	defff404 	addi	sp,sp,-48
100139dc:	dfc00b15 	stw	ra,44(sp)
100139e0:	df000a15 	stw	fp,40(sp)
100139e4:	dc000915 	stw	r16,36(sp)
100139e8:	df000a04 	addi	fp,sp,40
100139ec:	e13ffb15 	stw	r4,-20(fp)
100139f0:	e17ffc15 	stw	r5,-16(fp)
100139f4:	e1bffd15 	stw	r6,-12(fp)
100139f8:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
100139fc:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
10013a00:	e0bffc17 	ldw	r2,-16(fp)
10013a04:	10000f1e 	bne	r2,zero,10013a44 <_wcrtomb_r+0x6c>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
10013a08:	008403b4 	movhi	r2,4110
10013a0c:	10a45e04 	addi	r2,r2,-28296
10013a10:	14000017 	ldw	r16,0(r2)
10013a14:	000ed8c0 	call	1000ed8c <__locale_charset>
10013a18:	1009883a 	mov	r4,r2
10013a1c:	e0fff804 	addi	r3,fp,-32
10013a20:	e0bffe17 	ldw	r2,-8(fp)
10013a24:	d8800015 	stw	r2,0(sp)
10013a28:	200f883a 	mov	r7,r4
10013a2c:	000d883a 	mov	r6,zero
10013a30:	180b883a 	mov	r5,r3
10013a34:	e13ffb17 	ldw	r4,-20(fp)
10013a38:	803ee83a 	callr	r16
10013a3c:	e0bff715 	stw	r2,-36(fp)
10013a40:	00000d06 	br	10013a78 <_wcrtomb_r+0xa0>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
10013a44:	008403b4 	movhi	r2,4110
10013a48:	10a45e04 	addi	r2,r2,-28296
10013a4c:	14000017 	ldw	r16,0(r2)
10013a50:	000ed8c0 	call	1000ed8c <__locale_charset>
10013a54:	1007883a 	mov	r3,r2
10013a58:	e0bffe17 	ldw	r2,-8(fp)
10013a5c:	d8800015 	stw	r2,0(sp)
10013a60:	180f883a 	mov	r7,r3
10013a64:	e1bffd17 	ldw	r6,-12(fp)
10013a68:	e17ffc17 	ldw	r5,-16(fp)
10013a6c:	e13ffb17 	ldw	r4,-20(fp)
10013a70:	803ee83a 	callr	r16
10013a74:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
10013a78:	e0bff717 	ldw	r2,-36(fp)
10013a7c:	10bfffd8 	cmpnei	r2,r2,-1
10013a80:	1000071e 	bne	r2,zero,10013aa0 <_wcrtomb_r+0xc8>
    {
      ps->__count = 0;
10013a84:	e0bffe17 	ldw	r2,-8(fp)
10013a88:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
10013a8c:	e0bffb17 	ldw	r2,-20(fp)
10013a90:	00c02284 	movi	r3,138
10013a94:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
10013a98:	00bfffc4 	movi	r2,-1
10013a9c:	00000106 	br	10013aa4 <_wcrtomb_r+0xcc>
    }
  else
    return (size_t)retval;
10013aa0:	e0bff717 	ldw	r2,-36(fp)
}
10013aa4:	e6ffff04 	addi	sp,fp,-4
10013aa8:	dfc00217 	ldw	ra,8(sp)
10013aac:	df000117 	ldw	fp,4(sp)
10013ab0:	dc000017 	ldw	r16,0(sp)
10013ab4:	dec00304 	addi	sp,sp,12
10013ab8:	f800283a 	ret

10013abc <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
10013abc:	defff404 	addi	sp,sp,-48
10013ac0:	dfc00b15 	stw	ra,44(sp)
10013ac4:	df000a15 	stw	fp,40(sp)
10013ac8:	dc000915 	stw	r16,36(sp)
10013acc:	df000a04 	addi	fp,sp,40
10013ad0:	e13ffc15 	stw	r4,-16(fp)
10013ad4:	e17ffd15 	stw	r5,-12(fp)
10013ad8:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
10013adc:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
10013ae0:	008403b4 	movhi	r2,4110
10013ae4:	10a45004 	addi	r2,r2,-28352
10013ae8:	10800017 	ldw	r2,0(r2)
10013aec:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
10013af0:	e0bffc17 	ldw	r2,-16(fp)
10013af4:	10000f1e 	bne	r2,zero,10013b34 <wcrtomb+0x78>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
10013af8:	008403b4 	movhi	r2,4110
10013afc:	10a45e04 	addi	r2,r2,-28296
10013b00:	14000017 	ldw	r16,0(r2)
10013b04:	000ed8c0 	call	1000ed8c <__locale_charset>
10013b08:	1009883a 	mov	r4,r2
10013b0c:	e0fff904 	addi	r3,fp,-28
10013b10:	e0bffe17 	ldw	r2,-8(fp)
10013b14:	d8800015 	stw	r2,0(sp)
10013b18:	200f883a 	mov	r7,r4
10013b1c:	000d883a 	mov	r6,zero
10013b20:	180b883a 	mov	r5,r3
10013b24:	e13ff817 	ldw	r4,-32(fp)
10013b28:	803ee83a 	callr	r16
10013b2c:	e0bff715 	stw	r2,-36(fp)
10013b30:	00000d06 	br	10013b68 <wcrtomb+0xac>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
10013b34:	008403b4 	movhi	r2,4110
10013b38:	10a45e04 	addi	r2,r2,-28296
10013b3c:	14000017 	ldw	r16,0(r2)
10013b40:	000ed8c0 	call	1000ed8c <__locale_charset>
10013b44:	1007883a 	mov	r3,r2
10013b48:	e0bffe17 	ldw	r2,-8(fp)
10013b4c:	d8800015 	stw	r2,0(sp)
10013b50:	180f883a 	mov	r7,r3
10013b54:	e1bffd17 	ldw	r6,-12(fp)
10013b58:	e17ffc17 	ldw	r5,-16(fp)
10013b5c:	e13ff817 	ldw	r4,-32(fp)
10013b60:	803ee83a 	callr	r16
10013b64:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
10013b68:	e0bff717 	ldw	r2,-36(fp)
10013b6c:	10bfffd8 	cmpnei	r2,r2,-1
10013b70:	1000071e 	bne	r2,zero,10013b90 <wcrtomb+0xd4>
    {
      ps->__count = 0;
10013b74:	e0bffe17 	ldw	r2,-8(fp)
10013b78:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
10013b7c:	e0bff817 	ldw	r2,-32(fp)
10013b80:	00c02284 	movi	r3,138
10013b84:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
10013b88:	00bfffc4 	movi	r2,-1
10013b8c:	00000106 	br	10013b94 <wcrtomb+0xd8>
    }
  else
    return (size_t)retval;
10013b90:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10013b94:	e6ffff04 	addi	sp,fp,-4
10013b98:	dfc00217 	ldw	ra,8(sp)
10013b9c:	df000117 	ldw	fp,4(sp)
10013ba0:	dc000017 	ldw	r16,0(sp)
10013ba4:	dec00304 	addi	sp,sp,12
10013ba8:	f800283a 	ret

10013bac <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
10013bac:	defff804 	addi	sp,sp,-32
10013bb0:	dfc00715 	stw	ra,28(sp)
10013bb4:	df000615 	stw	fp,24(sp)
10013bb8:	dc000515 	stw	r16,20(sp)
10013bbc:	df000604 	addi	fp,sp,24
10013bc0:	e13ffb15 	stw	r4,-20(fp)
10013bc4:	e17ffc15 	stw	r5,-16(fp)
10013bc8:	e1bffd15 	stw	r6,-12(fp)
10013bcc:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
10013bd0:	d4201417 	ldw	r16,-32688(gp)
10013bd4:	000ed8c0 	call	1000ed8c <__locale_charset>
10013bd8:	1007883a 	mov	r3,r2
10013bdc:	e0bffe17 	ldw	r2,-8(fp)
10013be0:	d8800015 	stw	r2,0(sp)
10013be4:	180f883a 	mov	r7,r3
10013be8:	e1bffd17 	ldw	r6,-12(fp)
10013bec:	e17ffc17 	ldw	r5,-16(fp)
10013bf0:	e13ffb17 	ldw	r4,-20(fp)
10013bf4:	803ee83a 	callr	r16
}
10013bf8:	e6ffff04 	addi	sp,fp,-4
10013bfc:	dfc00217 	ldw	ra,8(sp)
10013c00:	df000117 	ldw	fp,4(sp)
10013c04:	dc000017 	ldw	r16,0(sp)
10013c08:	dec00304 	addi	sp,sp,12
10013c0c:	f800283a 	ret

10013c10 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
10013c10:	defffa04 	addi	sp,sp,-24
10013c14:	df000515 	stw	fp,20(sp)
10013c18:	df000504 	addi	fp,sp,20
10013c1c:	e13ffc15 	stw	r4,-16(fp)
10013c20:	e17ffd15 	stw	r5,-12(fp)
10013c24:	e1bffe15 	stw	r6,-8(fp)
10013c28:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
10013c2c:	e0bffe17 	ldw	r2,-8(fp)
10013c30:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
10013c34:	e0bffd17 	ldw	r2,-12(fp)
10013c38:	1000021e 	bne	r2,zero,10013c44 <__ascii_wctomb+0x34>
    return 0;
10013c3c:	0005883a 	mov	r2,zero
10013c40:	00000d06 	br	10013c78 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
10013c44:	e0bffb17 	ldw	r2,-20(fp)
10013c48:	10804030 	cmpltui	r2,r2,256
10013c4c:	1000051e 	bne	r2,zero,10013c64 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
10013c50:	e0bffc17 	ldw	r2,-16(fp)
10013c54:	00c02284 	movi	r3,138
10013c58:	10c00015 	stw	r3,0(r2)
      return -1;
10013c5c:	00bfffc4 	movi	r2,-1
10013c60:	00000506 	br	10013c78 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
10013c64:	e0bffb17 	ldw	r2,-20(fp)
10013c68:	1007883a 	mov	r3,r2
10013c6c:	e0bffd17 	ldw	r2,-12(fp)
10013c70:	10c00005 	stb	r3,0(r2)
  return 1;
10013c74:	00800044 	movi	r2,1
}
10013c78:	e037883a 	mov	sp,fp
10013c7c:	df000017 	ldw	fp,0(sp)
10013c80:	dec00104 	addi	sp,sp,4
10013c84:	f800283a 	ret

10013c88 <__udivdi3>:
10013c88:	defff404 	addi	sp,sp,-48
10013c8c:	dcc00515 	stw	r19,20(sp)
10013c90:	dc000215 	stw	r16,8(sp)
10013c94:	dfc00b15 	stw	ra,44(sp)
10013c98:	df000a15 	stw	fp,40(sp)
10013c9c:	ddc00915 	stw	r23,36(sp)
10013ca0:	dd800815 	stw	r22,32(sp)
10013ca4:	dd400715 	stw	r21,28(sp)
10013ca8:	dd000615 	stw	r20,24(sp)
10013cac:	dc800415 	stw	r18,16(sp)
10013cb0:	dc400315 	stw	r17,12(sp)
10013cb4:	2027883a 	mov	r19,r4
10013cb8:	2821883a 	mov	r16,r5
10013cbc:	3800461e 	bne	r7,zero,10013dd8 <__udivdi3+0x150>
10013cc0:	3023883a 	mov	r17,r6
10013cc4:	2025883a 	mov	r18,r4
10013cc8:	2980572e 	bgeu	r5,r6,10013e28 <__udivdi3+0x1a0>
10013ccc:	00bfffd4 	movui	r2,65535
10013cd0:	282d883a 	mov	r22,r5
10013cd4:	1180b236 	bltu	r2,r6,10013fa0 <__udivdi3+0x318>
10013cd8:	00803fc4 	movi	r2,255
10013cdc:	1185803a 	cmpltu	r2,r2,r6
10013ce0:	100490fa 	slli	r2,r2,3
10013ce4:	3086d83a 	srl	r3,r6,r2
10013ce8:	01040374 	movhi	r4,4109
10013cec:	213cd504 	addi	r4,r4,-3244
10013cf0:	20c7883a 	add	r3,r4,r3
10013cf4:	18c00003 	ldbu	r3,0(r3)
10013cf8:	1885883a 	add	r2,r3,r2
10013cfc:	00c00804 	movi	r3,32
10013d00:	1887c83a 	sub	r3,r3,r2
10013d04:	18000526 	beq	r3,zero,10013d1c <__udivdi3+0x94>
10013d08:	80e0983a 	sll	r16,r16,r3
10013d0c:	9884d83a 	srl	r2,r19,r2
10013d10:	30e2983a 	sll	r17,r6,r3
10013d14:	98e4983a 	sll	r18,r19,r3
10013d18:	142cb03a 	or	r22,r2,r16
10013d1c:	882ad43a 	srli	r21,r17,16
10013d20:	b009883a 	mov	r4,r22
10013d24:	8d3fffcc 	andi	r20,r17,65535
10013d28:	a80b883a 	mov	r5,r21
10013d2c:	00024f40 	call	100024f4 <__umodsi3>
10013d30:	b009883a 	mov	r4,r22
10013d34:	a80b883a 	mov	r5,r21
10013d38:	1027883a 	mov	r19,r2
10013d3c:	00024900 	call	10002490 <__udivsi3>
10013d40:	100b883a 	mov	r5,r2
10013d44:	a009883a 	mov	r4,r20
10013d48:	102d883a 	mov	r22,r2
10013d4c:	0005a080 	call	10005a08 <__mulsi3>
10013d50:	9826943a 	slli	r19,r19,16
10013d54:	9006d43a 	srli	r3,r18,16
10013d58:	1cc6b03a 	or	r3,r3,r19
10013d5c:	1880052e 	bgeu	r3,r2,10013d74 <__udivdi3+0xec>
10013d60:	1c47883a 	add	r3,r3,r17
10013d64:	b13fffc4 	addi	r4,r22,-1
10013d68:	1c400136 	bltu	r3,r17,10013d70 <__udivdi3+0xe8>
10013d6c:	18814236 	bltu	r3,r2,10014278 <__udivdi3+0x5f0>
10013d70:	202d883a 	mov	r22,r4
10013d74:	18a1c83a 	sub	r16,r3,r2
10013d78:	8009883a 	mov	r4,r16
10013d7c:	a80b883a 	mov	r5,r21
10013d80:	00024f40 	call	100024f4 <__umodsi3>
10013d84:	1027883a 	mov	r19,r2
10013d88:	8009883a 	mov	r4,r16
10013d8c:	a80b883a 	mov	r5,r21
10013d90:	9826943a 	slli	r19,r19,16
10013d94:	00024900 	call	10002490 <__udivsi3>
10013d98:	100b883a 	mov	r5,r2
10013d9c:	a009883a 	mov	r4,r20
10013da0:	94bfffcc 	andi	r18,r18,65535
10013da4:	1021883a 	mov	r16,r2
10013da8:	94e4b03a 	or	r18,r18,r19
10013dac:	0005a080 	call	10005a08 <__mulsi3>
10013db0:	9080052e 	bgeu	r18,r2,10013dc8 <__udivdi3+0x140>
10013db4:	8ca5883a 	add	r18,r17,r18
10013db8:	80ffffc4 	addi	r3,r16,-1
10013dbc:	94410c36 	bltu	r18,r17,100141f0 <__udivdi3+0x568>
10013dc0:	90810b2e 	bgeu	r18,r2,100141f0 <__udivdi3+0x568>
10013dc4:	843fff84 	addi	r16,r16,-2
10013dc8:	b004943a 	slli	r2,r22,16
10013dcc:	0007883a 	mov	r3,zero
10013dd0:	1404b03a 	or	r2,r2,r16
10013dd4:	00005e06 	br	10013f50 <__udivdi3+0x2c8>
10013dd8:	29c05b36 	bltu	r5,r7,10013f48 <__udivdi3+0x2c0>
10013ddc:	00bfffd4 	movui	r2,65535
10013de0:	11c0672e 	bgeu	r2,r7,10013f80 <__udivdi3+0x2f8>
10013de4:	00804034 	movhi	r2,256
10013de8:	10bfffc4 	addi	r2,r2,-1
10013dec:	11c10a36 	bltu	r2,r7,10014218 <__udivdi3+0x590>
10013df0:	00800404 	movi	r2,16
10013df4:	3886d83a 	srl	r3,r7,r2
10013df8:	01040374 	movhi	r4,4109
10013dfc:	213cd504 	addi	r4,r4,-3244
10013e00:	20c7883a 	add	r3,r4,r3
10013e04:	18c00003 	ldbu	r3,0(r3)
10013e08:	05c00804 	movi	r23,32
10013e0c:	1885883a 	add	r2,r3,r2
10013e10:	b8afc83a 	sub	r23,r23,r2
10013e14:	b800671e 	bne	r23,zero,10013fb4 <__udivdi3+0x32c>
10013e18:	3c010536 	bltu	r7,r16,10014230 <__udivdi3+0x5a8>
10013e1c:	9985403a 	cmpgeu	r2,r19,r6
10013e20:	0007883a 	mov	r3,zero
10013e24:	00004a06 	br	10013f50 <__udivdi3+0x2c8>
10013e28:	3000041e 	bne	r6,zero,10013e3c <__udivdi3+0x1b4>
10013e2c:	000b883a 	mov	r5,zero
10013e30:	01000044 	movi	r4,1
10013e34:	00024900 	call	10002490 <__udivsi3>
10013e38:	1023883a 	mov	r17,r2
10013e3c:	00bfffd4 	movui	r2,65535
10013e40:	1440532e 	bgeu	r2,r17,10013f90 <__udivdi3+0x308>
10013e44:	00804034 	movhi	r2,256
10013e48:	10bfffc4 	addi	r2,r2,-1
10013e4c:	1440f436 	bltu	r2,r17,10014220 <__udivdi3+0x598>
10013e50:	00800404 	movi	r2,16
10013e54:	8886d83a 	srl	r3,r17,r2
10013e58:	01040374 	movhi	r4,4109
10013e5c:	213cd504 	addi	r4,r4,-3244
10013e60:	20c7883a 	add	r3,r4,r3
10013e64:	18c00003 	ldbu	r3,0(r3)
10013e68:	1885883a 	add	r2,r3,r2
10013e6c:	00c00804 	movi	r3,32
10013e70:	1887c83a 	sub	r3,r3,r2
10013e74:	1800a51e 	bne	r3,zero,1001410c <__udivdi3+0x484>
10013e78:	882ad43a 	srli	r21,r17,16
10013e7c:	8461c83a 	sub	r16,r16,r17
10013e80:	8d3fffcc 	andi	r20,r17,65535
10013e84:	00c00044 	movi	r3,1
10013e88:	a80b883a 	mov	r5,r21
10013e8c:	8009883a 	mov	r4,r16
10013e90:	d8c00115 	stw	r3,4(sp)
10013e94:	00024f40 	call	100024f4 <__umodsi3>
10013e98:	a80b883a 	mov	r5,r21
10013e9c:	8009883a 	mov	r4,r16
10013ea0:	1027883a 	mov	r19,r2
10013ea4:	00024900 	call	10002490 <__udivsi3>
10013ea8:	a00b883a 	mov	r5,r20
10013eac:	1009883a 	mov	r4,r2
10013eb0:	102d883a 	mov	r22,r2
10013eb4:	0005a080 	call	10005a08 <__mulsi3>
10013eb8:	9826943a 	slli	r19,r19,16
10013ebc:	900ed43a 	srli	r7,r18,16
10013ec0:	d8c00117 	ldw	r3,4(sp)
10013ec4:	3cceb03a 	or	r7,r7,r19
10013ec8:	3880052e 	bgeu	r7,r2,10013ee0 <__udivdi3+0x258>
10013ecc:	3c4f883a 	add	r7,r7,r17
10013ed0:	b13fffc4 	addi	r4,r22,-1
10013ed4:	3c400136 	bltu	r7,r17,10013edc <__udivdi3+0x254>
10013ed8:	3880e436 	bltu	r7,r2,1001426c <__udivdi3+0x5e4>
10013edc:	202d883a 	mov	r22,r4
10013ee0:	38a1c83a 	sub	r16,r7,r2
10013ee4:	8009883a 	mov	r4,r16
10013ee8:	a80b883a 	mov	r5,r21
10013eec:	d8c00115 	stw	r3,4(sp)
10013ef0:	00024f40 	call	100024f4 <__umodsi3>
10013ef4:	1027883a 	mov	r19,r2
10013ef8:	8009883a 	mov	r4,r16
10013efc:	a80b883a 	mov	r5,r21
10013f00:	9826943a 	slli	r19,r19,16
10013f04:	00024900 	call	10002490 <__udivsi3>
10013f08:	a00b883a 	mov	r5,r20
10013f0c:	1009883a 	mov	r4,r2
10013f10:	94bfffcc 	andi	r18,r18,65535
10013f14:	1021883a 	mov	r16,r2
10013f18:	94e4b03a 	or	r18,r18,r19
10013f1c:	0005a080 	call	10005a08 <__mulsi3>
10013f20:	d8c00117 	ldw	r3,4(sp)
10013f24:	9080052e 	bgeu	r18,r2,10013f3c <__udivdi3+0x2b4>
10013f28:	8ca5883a 	add	r18,r17,r18
10013f2c:	813fffc4 	addi	r4,r16,-1
10013f30:	9440ad36 	bltu	r18,r17,100141e8 <__udivdi3+0x560>
10013f34:	9080ac2e 	bgeu	r18,r2,100141e8 <__udivdi3+0x560>
10013f38:	843fff84 	addi	r16,r16,-2
10013f3c:	b004943a 	slli	r2,r22,16
10013f40:	1404b03a 	or	r2,r2,r16
10013f44:	00000206 	br	10013f50 <__udivdi3+0x2c8>
10013f48:	0007883a 	mov	r3,zero
10013f4c:	0005883a 	mov	r2,zero
10013f50:	dfc00b17 	ldw	ra,44(sp)
10013f54:	df000a17 	ldw	fp,40(sp)
10013f58:	ddc00917 	ldw	r23,36(sp)
10013f5c:	dd800817 	ldw	r22,32(sp)
10013f60:	dd400717 	ldw	r21,28(sp)
10013f64:	dd000617 	ldw	r20,24(sp)
10013f68:	dcc00517 	ldw	r19,20(sp)
10013f6c:	dc800417 	ldw	r18,16(sp)
10013f70:	dc400317 	ldw	r17,12(sp)
10013f74:	dc000217 	ldw	r16,8(sp)
10013f78:	dec00c04 	addi	sp,sp,48
10013f7c:	f800283a 	ret
10013f80:	00803fc4 	movi	r2,255
10013f84:	11c5803a 	cmpltu	r2,r2,r7
10013f88:	100490fa 	slli	r2,r2,3
10013f8c:	003f9906 	br	10013df4 <__alt_data_end+0xf8013df4>
10013f90:	00803fc4 	movi	r2,255
10013f94:	1445803a 	cmpltu	r2,r2,r17
10013f98:	100490fa 	slli	r2,r2,3
10013f9c:	003fad06 	br	10013e54 <__alt_data_end+0xf8013e54>
10013fa0:	00804034 	movhi	r2,256
10013fa4:	10bfffc4 	addi	r2,r2,-1
10013fa8:	11809f36 	bltu	r2,r6,10014228 <__udivdi3+0x5a0>
10013fac:	00800404 	movi	r2,16
10013fb0:	003f4c06 	br	10013ce4 <__alt_data_end+0xf8013ce4>
10013fb4:	3dce983a 	sll	r7,r7,r23
10013fb8:	30b8d83a 	srl	fp,r6,r2
10013fbc:	80a2d83a 	srl	r17,r16,r2
10013fc0:	35cc983a 	sll	r6,r6,r23
10013fc4:	3f38b03a 	or	fp,r7,fp
10013fc8:	e024d43a 	srli	r18,fp,16
10013fcc:	9884d83a 	srl	r2,r19,r2
10013fd0:	85e0983a 	sll	r16,r16,r23
10013fd4:	8809883a 	mov	r4,r17
10013fd8:	900b883a 	mov	r5,r18
10013fdc:	d9800015 	stw	r6,0(sp)
10013fe0:	1420b03a 	or	r16,r2,r16
10013fe4:	00024f40 	call	100024f4 <__umodsi3>
10013fe8:	900b883a 	mov	r5,r18
10013fec:	8809883a 	mov	r4,r17
10013ff0:	1029883a 	mov	r20,r2
10013ff4:	e5bfffcc 	andi	r22,fp,65535
10013ff8:	00024900 	call	10002490 <__udivsi3>
10013ffc:	100b883a 	mov	r5,r2
10014000:	b009883a 	mov	r4,r22
10014004:	102b883a 	mov	r21,r2
10014008:	0005a080 	call	10005a08 <__mulsi3>
1001400c:	a028943a 	slli	r20,r20,16
10014010:	8006d43a 	srli	r3,r16,16
10014014:	1d06b03a 	or	r3,r3,r20
10014018:	1880042e 	bgeu	r3,r2,1001402c <__udivdi3+0x3a4>
1001401c:	1f07883a 	add	r3,r3,fp
10014020:	a93fffc4 	addi	r4,r21,-1
10014024:	1f00892e 	bgeu	r3,fp,1001424c <__udivdi3+0x5c4>
10014028:	202b883a 	mov	r21,r4
1001402c:	18a3c83a 	sub	r17,r3,r2
10014030:	8809883a 	mov	r4,r17
10014034:	900b883a 	mov	r5,r18
10014038:	00024f40 	call	100024f4 <__umodsi3>
1001403c:	1029883a 	mov	r20,r2
10014040:	8809883a 	mov	r4,r17
10014044:	900b883a 	mov	r5,r18
10014048:	a028943a 	slli	r20,r20,16
1001404c:	00024900 	call	10002490 <__udivsi3>
10014050:	100b883a 	mov	r5,r2
10014054:	b009883a 	mov	r4,r22
10014058:	843fffcc 	andi	r16,r16,65535
1001405c:	1023883a 	mov	r17,r2
10014060:	8520b03a 	or	r16,r16,r20
10014064:	0005a080 	call	10005a08 <__mulsi3>
10014068:	8080042e 	bgeu	r16,r2,1001407c <__udivdi3+0x3f4>
1001406c:	8721883a 	add	r16,r16,fp
10014070:	88ffffc4 	addi	r3,r17,-1
10014074:	8700712e 	bgeu	r16,fp,1001423c <__udivdi3+0x5b4>
10014078:	1823883a 	mov	r17,r3
1001407c:	a80e943a 	slli	r7,r21,16
10014080:	d8c00017 	ldw	r3,0(sp)
10014084:	80a1c83a 	sub	r16,r16,r2
10014088:	3c64b03a 	or	r18,r7,r17
1001408c:	1d3fffcc 	andi	r20,r3,65535
10014090:	9022d43a 	srli	r17,r18,16
10014094:	95bfffcc 	andi	r22,r18,65535
10014098:	a00b883a 	mov	r5,r20
1001409c:	b009883a 	mov	r4,r22
100140a0:	182ad43a 	srli	r21,r3,16
100140a4:	0005a080 	call	10005a08 <__mulsi3>
100140a8:	a00b883a 	mov	r5,r20
100140ac:	8809883a 	mov	r4,r17
100140b0:	1039883a 	mov	fp,r2
100140b4:	0005a080 	call	10005a08 <__mulsi3>
100140b8:	8809883a 	mov	r4,r17
100140bc:	a80b883a 	mov	r5,r21
100140c0:	1029883a 	mov	r20,r2
100140c4:	0005a080 	call	10005a08 <__mulsi3>
100140c8:	a80b883a 	mov	r5,r21
100140cc:	b009883a 	mov	r4,r22
100140d0:	1023883a 	mov	r17,r2
100140d4:	0005a080 	call	10005a08 <__mulsi3>
100140d8:	e006d43a 	srli	r3,fp,16
100140dc:	1505883a 	add	r2,r2,r20
100140e0:	1887883a 	add	r3,r3,r2
100140e4:	1d00022e 	bgeu	r3,r20,100140f0 <__udivdi3+0x468>
100140e8:	00800074 	movhi	r2,1
100140ec:	88a3883a 	add	r17,r17,r2
100140f0:	1804d43a 	srli	r2,r3,16
100140f4:	1463883a 	add	r17,r2,r17
100140f8:	84404436 	bltu	r16,r17,1001420c <__udivdi3+0x584>
100140fc:	84403e26 	beq	r16,r17,100141f8 <__udivdi3+0x570>
10014100:	9005883a 	mov	r2,r18
10014104:	0007883a 	mov	r3,zero
10014108:	003f9106 	br	10013f50 <__alt_data_end+0xf8013f50>
1001410c:	88e2983a 	sll	r17,r17,r3
10014110:	80aed83a 	srl	r23,r16,r2
10014114:	80e0983a 	sll	r16,r16,r3
10014118:	882ad43a 	srli	r21,r17,16
1001411c:	9884d83a 	srl	r2,r19,r2
10014120:	b809883a 	mov	r4,r23
10014124:	a80b883a 	mov	r5,r21
10014128:	98e4983a 	sll	r18,r19,r3
1001412c:	142cb03a 	or	r22,r2,r16
10014130:	00024f40 	call	100024f4 <__umodsi3>
10014134:	b809883a 	mov	r4,r23
10014138:	a80b883a 	mov	r5,r21
1001413c:	1027883a 	mov	r19,r2
10014140:	8d3fffcc 	andi	r20,r17,65535
10014144:	00024900 	call	10002490 <__udivsi3>
10014148:	a009883a 	mov	r4,r20
1001414c:	100b883a 	mov	r5,r2
10014150:	102f883a 	mov	r23,r2
10014154:	0005a080 	call	10005a08 <__mulsi3>
10014158:	9826943a 	slli	r19,r19,16
1001415c:	b008d43a 	srli	r4,r22,16
10014160:	24c8b03a 	or	r4,r4,r19
10014164:	2080062e 	bgeu	r4,r2,10014180 <__udivdi3+0x4f8>
10014168:	2449883a 	add	r4,r4,r17
1001416c:	b8ffffc4 	addi	r3,r23,-1
10014170:	24403c36 	bltu	r4,r17,10014264 <__udivdi3+0x5dc>
10014174:	20803b2e 	bgeu	r4,r2,10014264 <__udivdi3+0x5dc>
10014178:	bdffff84 	addi	r23,r23,-2
1001417c:	2449883a 	add	r4,r4,r17
10014180:	20a1c83a 	sub	r16,r4,r2
10014184:	a80b883a 	mov	r5,r21
10014188:	8009883a 	mov	r4,r16
1001418c:	00024f40 	call	100024f4 <__umodsi3>
10014190:	a80b883a 	mov	r5,r21
10014194:	8009883a 	mov	r4,r16
10014198:	1027883a 	mov	r19,r2
1001419c:	00024900 	call	10002490 <__udivsi3>
100141a0:	a009883a 	mov	r4,r20
100141a4:	100b883a 	mov	r5,r2
100141a8:	9826943a 	slli	r19,r19,16
100141ac:	1039883a 	mov	fp,r2
100141b0:	0005a080 	call	10005a08 <__mulsi3>
100141b4:	b13fffcc 	andi	r4,r22,65535
100141b8:	24c8b03a 	or	r4,r4,r19
100141bc:	2080062e 	bgeu	r4,r2,100141d8 <__udivdi3+0x550>
100141c0:	2449883a 	add	r4,r4,r17
100141c4:	e0ffffc4 	addi	r3,fp,-1
100141c8:	24402436 	bltu	r4,r17,1001425c <__udivdi3+0x5d4>
100141cc:	2080232e 	bgeu	r4,r2,1001425c <__udivdi3+0x5d4>
100141d0:	e73fff84 	addi	fp,fp,-2
100141d4:	2449883a 	add	r4,r4,r17
100141d8:	b82e943a 	slli	r23,r23,16
100141dc:	20a1c83a 	sub	r16,r4,r2
100141e0:	bf06b03a 	or	r3,r23,fp
100141e4:	003f2806 	br	10013e88 <__alt_data_end+0xf8013e88>
100141e8:	2021883a 	mov	r16,r4
100141ec:	003f5306 	br	10013f3c <__alt_data_end+0xf8013f3c>
100141f0:	1821883a 	mov	r16,r3
100141f4:	003ef406 	br	10013dc8 <__alt_data_end+0xf8013dc8>
100141f8:	1806943a 	slli	r3,r3,16
100141fc:	9de6983a 	sll	r19,r19,r23
10014200:	e73fffcc 	andi	fp,fp,65535
10014204:	1f07883a 	add	r3,r3,fp
10014208:	98ffbd2e 	bgeu	r19,r3,10014100 <__alt_data_end+0xf8014100>
1001420c:	90bfffc4 	addi	r2,r18,-1
10014210:	0007883a 	mov	r3,zero
10014214:	003f4e06 	br	10013f50 <__alt_data_end+0xf8013f50>
10014218:	00800604 	movi	r2,24
1001421c:	003ef506 	br	10013df4 <__alt_data_end+0xf8013df4>
10014220:	00800604 	movi	r2,24
10014224:	003f0b06 	br	10013e54 <__alt_data_end+0xf8013e54>
10014228:	00800604 	movi	r2,24
1001422c:	003ead06 	br	10013ce4 <__alt_data_end+0xf8013ce4>
10014230:	0007883a 	mov	r3,zero
10014234:	00800044 	movi	r2,1
10014238:	003f4506 	br	10013f50 <__alt_data_end+0xf8013f50>
1001423c:	80bf8e2e 	bgeu	r16,r2,10014078 <__alt_data_end+0xf8014078>
10014240:	8c7fff84 	addi	r17,r17,-2
10014244:	8721883a 	add	r16,r16,fp
10014248:	003f8c06 	br	1001407c <__alt_data_end+0xf801407c>
1001424c:	18bf762e 	bgeu	r3,r2,10014028 <__alt_data_end+0xf8014028>
10014250:	ad7fff84 	addi	r21,r21,-2
10014254:	1f07883a 	add	r3,r3,fp
10014258:	003f7406 	br	1001402c <__alt_data_end+0xf801402c>
1001425c:	1839883a 	mov	fp,r3
10014260:	003fdd06 	br	100141d8 <__alt_data_end+0xf80141d8>
10014264:	182f883a 	mov	r23,r3
10014268:	003fc506 	br	10014180 <__alt_data_end+0xf8014180>
1001426c:	b5bfff84 	addi	r22,r22,-2
10014270:	3c4f883a 	add	r7,r7,r17
10014274:	003f1a06 	br	10013ee0 <__alt_data_end+0xf8013ee0>
10014278:	b5bfff84 	addi	r22,r22,-2
1001427c:	1c47883a 	add	r3,r3,r17
10014280:	003ebc06 	br	10013d74 <__alt_data_end+0xf8013d74>

10014284 <__umoddi3>:
10014284:	defff304 	addi	sp,sp,-52
10014288:	df000b15 	stw	fp,44(sp)
1001428c:	dc400415 	stw	r17,16(sp)
10014290:	dc000315 	stw	r16,12(sp)
10014294:	dfc00c15 	stw	ra,48(sp)
10014298:	ddc00a15 	stw	r23,40(sp)
1001429c:	dd800915 	stw	r22,36(sp)
100142a0:	dd400815 	stw	r21,32(sp)
100142a4:	dd000715 	stw	r20,28(sp)
100142a8:	dcc00615 	stw	r19,24(sp)
100142ac:	dc800515 	stw	r18,20(sp)
100142b0:	2021883a 	mov	r16,r4
100142b4:	2823883a 	mov	r17,r5
100142b8:	2839883a 	mov	fp,r5
100142bc:	3800401e 	bne	r7,zero,100143c0 <__umoddi3+0x13c>
100142c0:	3027883a 	mov	r19,r6
100142c4:	2029883a 	mov	r20,r4
100142c8:	2980552e 	bgeu	r5,r6,10014420 <__umoddi3+0x19c>
100142cc:	00bfffd4 	movui	r2,65535
100142d0:	1180a236 	bltu	r2,r6,1001455c <__umoddi3+0x2d8>
100142d4:	01003fc4 	movi	r4,255
100142d8:	2189803a 	cmpltu	r4,r4,r6
100142dc:	200890fa 	slli	r4,r4,3
100142e0:	3104d83a 	srl	r2,r6,r4
100142e4:	00c40374 	movhi	r3,4109
100142e8:	18fcd504 	addi	r3,r3,-3244
100142ec:	1885883a 	add	r2,r3,r2
100142f0:	10c00003 	ldbu	r3,0(r2)
100142f4:	00800804 	movi	r2,32
100142f8:	1909883a 	add	r4,r3,r4
100142fc:	1125c83a 	sub	r18,r2,r4
10014300:	90000526 	beq	r18,zero,10014318 <__umoddi3+0x94>
10014304:	8ca2983a 	sll	r17,r17,r18
10014308:	8108d83a 	srl	r4,r16,r4
1001430c:	34a6983a 	sll	r19,r6,r18
10014310:	84a8983a 	sll	r20,r16,r18
10014314:	2478b03a 	or	fp,r4,r17
10014318:	982cd43a 	srli	r22,r19,16
1001431c:	e009883a 	mov	r4,fp
10014320:	9dffffcc 	andi	r23,r19,65535
10014324:	b00b883a 	mov	r5,r22
10014328:	00024f40 	call	100024f4 <__umodsi3>
1001432c:	b00b883a 	mov	r5,r22
10014330:	e009883a 	mov	r4,fp
10014334:	102b883a 	mov	r21,r2
10014338:	00024900 	call	10002490 <__udivsi3>
1001433c:	100b883a 	mov	r5,r2
10014340:	b809883a 	mov	r4,r23
10014344:	0005a080 	call	10005a08 <__mulsi3>
10014348:	a82a943a 	slli	r21,r21,16
1001434c:	a006d43a 	srli	r3,r20,16
10014350:	1d46b03a 	or	r3,r3,r21
10014354:	1880032e 	bgeu	r3,r2,10014364 <__umoddi3+0xe0>
10014358:	1cc7883a 	add	r3,r3,r19
1001435c:	1cc00136 	bltu	r3,r19,10014364 <__umoddi3+0xe0>
10014360:	18813136 	bltu	r3,r2,10014828 <__umoddi3+0x5a4>
10014364:	18a1c83a 	sub	r16,r3,r2
10014368:	b00b883a 	mov	r5,r22
1001436c:	8009883a 	mov	r4,r16
10014370:	00024f40 	call	100024f4 <__umodsi3>
10014374:	b00b883a 	mov	r5,r22
10014378:	8009883a 	mov	r4,r16
1001437c:	1023883a 	mov	r17,r2
10014380:	00024900 	call	10002490 <__udivsi3>
10014384:	100b883a 	mov	r5,r2
10014388:	b809883a 	mov	r4,r23
1001438c:	8822943a 	slli	r17,r17,16
10014390:	0005a080 	call	10005a08 <__mulsi3>
10014394:	a0ffffcc 	andi	r3,r20,65535
10014398:	1c46b03a 	or	r3,r3,r17
1001439c:	1880042e 	bgeu	r3,r2,100143b0 <__umoddi3+0x12c>
100143a0:	1cc7883a 	add	r3,r3,r19
100143a4:	1cc00236 	bltu	r3,r19,100143b0 <__umoddi3+0x12c>
100143a8:	1880012e 	bgeu	r3,r2,100143b0 <__umoddi3+0x12c>
100143ac:	1cc7883a 	add	r3,r3,r19
100143b0:	1885c83a 	sub	r2,r3,r2
100143b4:	1484d83a 	srl	r2,r2,r18
100143b8:	0007883a 	mov	r3,zero
100143bc:	00005306 	br	1001450c <__umoddi3+0x288>
100143c0:	29c05036 	bltu	r5,r7,10014504 <__umoddi3+0x280>
100143c4:	00bfffd4 	movui	r2,65535
100143c8:	11c05c2e 	bgeu	r2,r7,1001453c <__umoddi3+0x2b8>
100143cc:	00804034 	movhi	r2,256
100143d0:	10bfffc4 	addi	r2,r2,-1
100143d4:	11c10636 	bltu	r2,r7,100147f0 <__umoddi3+0x56c>
100143d8:	01000404 	movi	r4,16
100143dc:	3904d83a 	srl	r2,r7,r4
100143e0:	00c40374 	movhi	r3,4109
100143e4:	18fcd504 	addi	r3,r3,-3244
100143e8:	1885883a 	add	r2,r3,r2
100143ec:	14c00003 	ldbu	r19,0(r2)
100143f0:	00c00804 	movi	r3,32
100143f4:	9927883a 	add	r19,r19,r4
100143f8:	1ce9c83a 	sub	r20,r3,r19
100143fc:	a0005c1e 	bne	r20,zero,10014570 <__umoddi3+0x2ec>
10014400:	3c400136 	bltu	r7,r17,10014408 <__umoddi3+0x184>
10014404:	81810a36 	bltu	r16,r6,10014830 <__umoddi3+0x5ac>
10014408:	8185c83a 	sub	r2,r16,r6
1001440c:	89e3c83a 	sub	r17,r17,r7
10014410:	8089803a 	cmpltu	r4,r16,r2
10014414:	8939c83a 	sub	fp,r17,r4
10014418:	e007883a 	mov	r3,fp
1001441c:	00003b06 	br	1001450c <__umoddi3+0x288>
10014420:	3000041e 	bne	r6,zero,10014434 <__umoddi3+0x1b0>
10014424:	000b883a 	mov	r5,zero
10014428:	01000044 	movi	r4,1
1001442c:	00024900 	call	10002490 <__udivsi3>
10014430:	1027883a 	mov	r19,r2
10014434:	00bfffd4 	movui	r2,65535
10014438:	14c0442e 	bgeu	r2,r19,1001454c <__umoddi3+0x2c8>
1001443c:	00804034 	movhi	r2,256
10014440:	10bfffc4 	addi	r2,r2,-1
10014444:	14c0ec36 	bltu	r2,r19,100147f8 <__umoddi3+0x574>
10014448:	00800404 	movi	r2,16
1001444c:	9886d83a 	srl	r3,r19,r2
10014450:	01040374 	movhi	r4,4109
10014454:	213cd504 	addi	r4,r4,-3244
10014458:	20c7883a 	add	r3,r4,r3
1001445c:	18c00003 	ldbu	r3,0(r3)
10014460:	1887883a 	add	r3,r3,r2
10014464:	00800804 	movi	r2,32
10014468:	10e5c83a 	sub	r18,r2,r3
1001446c:	9000ab1e 	bne	r18,zero,1001471c <__umoddi3+0x498>
10014470:	982cd43a 	srli	r22,r19,16
10014474:	8ce3c83a 	sub	r17,r17,r19
10014478:	9dffffcc 	andi	r23,r19,65535
1001447c:	b00b883a 	mov	r5,r22
10014480:	8809883a 	mov	r4,r17
10014484:	00024f40 	call	100024f4 <__umodsi3>
10014488:	b00b883a 	mov	r5,r22
1001448c:	8809883a 	mov	r4,r17
10014490:	102b883a 	mov	r21,r2
10014494:	00024900 	call	10002490 <__udivsi3>
10014498:	b80b883a 	mov	r5,r23
1001449c:	1009883a 	mov	r4,r2
100144a0:	0005a080 	call	10005a08 <__mulsi3>
100144a4:	a82a943a 	slli	r21,r21,16
100144a8:	a006d43a 	srli	r3,r20,16
100144ac:	1d46b03a 	or	r3,r3,r21
100144b0:	1880042e 	bgeu	r3,r2,100144c4 <__umoddi3+0x240>
100144b4:	1cc7883a 	add	r3,r3,r19
100144b8:	1cc00236 	bltu	r3,r19,100144c4 <__umoddi3+0x240>
100144bc:	1880012e 	bgeu	r3,r2,100144c4 <__umoddi3+0x240>
100144c0:	1cc7883a 	add	r3,r3,r19
100144c4:	18a1c83a 	sub	r16,r3,r2
100144c8:	b00b883a 	mov	r5,r22
100144cc:	8009883a 	mov	r4,r16
100144d0:	00024f40 	call	100024f4 <__umodsi3>
100144d4:	1023883a 	mov	r17,r2
100144d8:	b00b883a 	mov	r5,r22
100144dc:	8009883a 	mov	r4,r16
100144e0:	00024900 	call	10002490 <__udivsi3>
100144e4:	8822943a 	slli	r17,r17,16
100144e8:	b80b883a 	mov	r5,r23
100144ec:	1009883a 	mov	r4,r2
100144f0:	0005a080 	call	10005a08 <__mulsi3>
100144f4:	a53fffcc 	andi	r20,r20,65535
100144f8:	a446b03a 	or	r3,r20,r17
100144fc:	18bfac2e 	bgeu	r3,r2,100143b0 <__alt_data_end+0xf80143b0>
10014500:	003fa706 	br	100143a0 <__alt_data_end+0xf80143a0>
10014504:	2005883a 	mov	r2,r4
10014508:	2807883a 	mov	r3,r5
1001450c:	dfc00c17 	ldw	ra,48(sp)
10014510:	df000b17 	ldw	fp,44(sp)
10014514:	ddc00a17 	ldw	r23,40(sp)
10014518:	dd800917 	ldw	r22,36(sp)
1001451c:	dd400817 	ldw	r21,32(sp)
10014520:	dd000717 	ldw	r20,28(sp)
10014524:	dcc00617 	ldw	r19,24(sp)
10014528:	dc800517 	ldw	r18,20(sp)
1001452c:	dc400417 	ldw	r17,16(sp)
10014530:	dc000317 	ldw	r16,12(sp)
10014534:	dec00d04 	addi	sp,sp,52
10014538:	f800283a 	ret
1001453c:	04c03fc4 	movi	r19,255
10014540:	99c9803a 	cmpltu	r4,r19,r7
10014544:	200890fa 	slli	r4,r4,3
10014548:	003fa406 	br	100143dc <__alt_data_end+0xf80143dc>
1001454c:	00803fc4 	movi	r2,255
10014550:	14c5803a 	cmpltu	r2,r2,r19
10014554:	100490fa 	slli	r2,r2,3
10014558:	003fbc06 	br	1001444c <__alt_data_end+0xf801444c>
1001455c:	00804034 	movhi	r2,256
10014560:	10bfffc4 	addi	r2,r2,-1
10014564:	1180a636 	bltu	r2,r6,10014800 <__umoddi3+0x57c>
10014568:	01000404 	movi	r4,16
1001456c:	003f5c06 	br	100142e0 <__alt_data_end+0xf80142e0>
10014570:	3d0e983a 	sll	r7,r7,r20
10014574:	34ead83a 	srl	r21,r6,r19
10014578:	8cc6d83a 	srl	r3,r17,r19
1001457c:	8d10983a 	sll	r8,r17,r20
10014580:	3d6ab03a 	or	r21,r7,r21
10014584:	a82cd43a 	srli	r22,r21,16
10014588:	84e2d83a 	srl	r17,r16,r19
1001458c:	1809883a 	mov	r4,r3
10014590:	b00b883a 	mov	r5,r22
10014594:	8a22b03a 	or	r17,r17,r8
10014598:	3524983a 	sll	r18,r6,r20
1001459c:	dc400015 	stw	r17,0(sp)
100145a0:	d8c00115 	stw	r3,4(sp)
100145a4:	00024f40 	call	100024f4 <__umodsi3>
100145a8:	d8c00117 	ldw	r3,4(sp)
100145ac:	b00b883a 	mov	r5,r22
100145b0:	1039883a 	mov	fp,r2
100145b4:	1809883a 	mov	r4,r3
100145b8:	00024900 	call	10002490 <__udivsi3>
100145bc:	adffffcc 	andi	r23,r21,65535
100145c0:	100b883a 	mov	r5,r2
100145c4:	b809883a 	mov	r4,r23
100145c8:	1023883a 	mov	r17,r2
100145cc:	0005a080 	call	10005a08 <__mulsi3>
100145d0:	d9400017 	ldw	r5,0(sp)
100145d4:	e008943a 	slli	r4,fp,16
100145d8:	8520983a 	sll	r16,r16,r20
100145dc:	2806d43a 	srli	r3,r5,16
100145e0:	1906b03a 	or	r3,r3,r4
100145e4:	1880042e 	bgeu	r3,r2,100145f8 <__umoddi3+0x374>
100145e8:	1d47883a 	add	r3,r3,r21
100145ec:	893fffc4 	addi	r4,r17,-1
100145f0:	1d40892e 	bgeu	r3,r21,10014818 <__umoddi3+0x594>
100145f4:	2023883a 	mov	r17,r4
100145f8:	18b9c83a 	sub	fp,r3,r2
100145fc:	b00b883a 	mov	r5,r22
10014600:	e009883a 	mov	r4,fp
10014604:	00024f40 	call	100024f4 <__umodsi3>
10014608:	b00b883a 	mov	r5,r22
1001460c:	e009883a 	mov	r4,fp
10014610:	d8800215 	stw	r2,8(sp)
10014614:	00024900 	call	10002490 <__udivsi3>
10014618:	100b883a 	mov	r5,r2
1001461c:	b809883a 	mov	r4,r23
10014620:	102d883a 	mov	r22,r2
10014624:	0005a080 	call	10005a08 <__mulsi3>
10014628:	d9800217 	ldw	r6,8(sp)
1001462c:	d8c00017 	ldw	r3,0(sp)
10014630:	300c943a 	slli	r6,r6,16
10014634:	1a3fffcc 	andi	r8,r3,65535
10014638:	4190b03a 	or	r8,r8,r6
1001463c:	4080042e 	bgeu	r8,r2,10014650 <__umoddi3+0x3cc>
10014640:	4551883a 	add	r8,r8,r21
10014644:	b0ffffc4 	addi	r3,r22,-1
10014648:	45406f2e 	bgeu	r8,r21,10014808 <__umoddi3+0x584>
1001464c:	182d883a 	mov	r22,r3
10014650:	880e943a 	slli	r7,r17,16
10014654:	9006d43a 	srli	r3,r18,16
10014658:	91bfffcc 	andi	r6,r18,65535
1001465c:	3dacb03a 	or	r22,r7,r22
10014660:	b02ed43a 	srli	r23,r22,16
10014664:	b5bfffcc 	andi	r22,r22,65535
10014668:	300b883a 	mov	r5,r6
1001466c:	b009883a 	mov	r4,r22
10014670:	40a3c83a 	sub	r17,r8,r2
10014674:	d8c00115 	stw	r3,4(sp)
10014678:	d9800215 	stw	r6,8(sp)
1001467c:	0005a080 	call	10005a08 <__mulsi3>
10014680:	d9800217 	ldw	r6,8(sp)
10014684:	b809883a 	mov	r4,r23
10014688:	1039883a 	mov	fp,r2
1001468c:	300b883a 	mov	r5,r6
10014690:	0005a080 	call	10005a08 <__mulsi3>
10014694:	d8c00117 	ldw	r3,4(sp)
10014698:	b809883a 	mov	r4,r23
1001469c:	d8800215 	stw	r2,8(sp)
100146a0:	180b883a 	mov	r5,r3
100146a4:	0005a080 	call	10005a08 <__mulsi3>
100146a8:	d8c00117 	ldw	r3,4(sp)
100146ac:	b009883a 	mov	r4,r22
100146b0:	102f883a 	mov	r23,r2
100146b4:	180b883a 	mov	r5,r3
100146b8:	0005a080 	call	10005a08 <__mulsi3>
100146bc:	d9800217 	ldw	r6,8(sp)
100146c0:	e006d43a 	srli	r3,fp,16
100146c4:	1185883a 	add	r2,r2,r6
100146c8:	1885883a 	add	r2,r3,r2
100146cc:	1180022e 	bgeu	r2,r6,100146d8 <__umoddi3+0x454>
100146d0:	00c00074 	movhi	r3,1
100146d4:	b8ef883a 	add	r23,r23,r3
100146d8:	1006d43a 	srli	r3,r2,16
100146dc:	1004943a 	slli	r2,r2,16
100146e0:	e73fffcc 	andi	fp,fp,65535
100146e4:	1dc7883a 	add	r3,r3,r23
100146e8:	1739883a 	add	fp,r2,fp
100146ec:	88c03a36 	bltu	r17,r3,100147d8 <__umoddi3+0x554>
100146f0:	88c05126 	beq	r17,r3,10014838 <__umoddi3+0x5b4>
100146f4:	88c9c83a 	sub	r4,r17,r3
100146f8:	e00f883a 	mov	r7,fp
100146fc:	81cfc83a 	sub	r7,r16,r7
10014700:	81c7803a 	cmpltu	r3,r16,r7
10014704:	20c7c83a 	sub	r3,r4,r3
10014708:	1cc4983a 	sll	r2,r3,r19
1001470c:	3d0ed83a 	srl	r7,r7,r20
10014710:	1d06d83a 	srl	r3,r3,r20
10014714:	11c4b03a 	or	r2,r2,r7
10014718:	003f7c06 	br	1001450c <__alt_data_end+0xf801450c>
1001471c:	9ca6983a 	sll	r19,r19,r18
10014720:	88f8d83a 	srl	fp,r17,r3
10014724:	80c4d83a 	srl	r2,r16,r3
10014728:	982cd43a 	srli	r22,r19,16
1001472c:	8ca2983a 	sll	r17,r17,r18
10014730:	e009883a 	mov	r4,fp
10014734:	b00b883a 	mov	r5,r22
10014738:	146ab03a 	or	r21,r2,r17
1001473c:	00024f40 	call	100024f4 <__umodsi3>
10014740:	b00b883a 	mov	r5,r22
10014744:	e009883a 	mov	r4,fp
10014748:	1029883a 	mov	r20,r2
1001474c:	9dffffcc 	andi	r23,r19,65535
10014750:	00024900 	call	10002490 <__udivsi3>
10014754:	b809883a 	mov	r4,r23
10014758:	100b883a 	mov	r5,r2
1001475c:	0005a080 	call	10005a08 <__mulsi3>
10014760:	a008943a 	slli	r4,r20,16
10014764:	a806d43a 	srli	r3,r21,16
10014768:	84a8983a 	sll	r20,r16,r18
1001476c:	1906b03a 	or	r3,r3,r4
10014770:	1880042e 	bgeu	r3,r2,10014784 <__umoddi3+0x500>
10014774:	1cc7883a 	add	r3,r3,r19
10014778:	1cc00236 	bltu	r3,r19,10014784 <__umoddi3+0x500>
1001477c:	1880012e 	bgeu	r3,r2,10014784 <__umoddi3+0x500>
10014780:	1cc7883a 	add	r3,r3,r19
10014784:	18a3c83a 	sub	r17,r3,r2
10014788:	b00b883a 	mov	r5,r22
1001478c:	8809883a 	mov	r4,r17
10014790:	00024f40 	call	100024f4 <__umodsi3>
10014794:	b00b883a 	mov	r5,r22
10014798:	8809883a 	mov	r4,r17
1001479c:	1021883a 	mov	r16,r2
100147a0:	00024900 	call	10002490 <__udivsi3>
100147a4:	100b883a 	mov	r5,r2
100147a8:	b809883a 	mov	r4,r23
100147ac:	8020943a 	slli	r16,r16,16
100147b0:	0005a080 	call	10005a08 <__mulsi3>
100147b4:	a8ffffcc 	andi	r3,r21,65535
100147b8:	1c06b03a 	or	r3,r3,r16
100147bc:	1880042e 	bgeu	r3,r2,100147d0 <__umoddi3+0x54c>
100147c0:	1cc7883a 	add	r3,r3,r19
100147c4:	1cc00236 	bltu	r3,r19,100147d0 <__umoddi3+0x54c>
100147c8:	1880012e 	bgeu	r3,r2,100147d0 <__umoddi3+0x54c>
100147cc:	1cc7883a 	add	r3,r3,r19
100147d0:	18a3c83a 	sub	r17,r3,r2
100147d4:	003f2906 	br	1001447c <__alt_data_end+0xf801447c>
100147d8:	e48fc83a 	sub	r7,fp,r18
100147dc:	1d49c83a 	sub	r4,r3,r21
100147e0:	e1f9803a 	cmpltu	fp,fp,r7
100147e4:	2739c83a 	sub	fp,r4,fp
100147e8:	8f09c83a 	sub	r4,r17,fp
100147ec:	003fc306 	br	100146fc <__alt_data_end+0xf80146fc>
100147f0:	01000604 	movi	r4,24
100147f4:	003ef906 	br	100143dc <__alt_data_end+0xf80143dc>
100147f8:	00800604 	movi	r2,24
100147fc:	003f1306 	br	1001444c <__alt_data_end+0xf801444c>
10014800:	01000604 	movi	r4,24
10014804:	003eb606 	br	100142e0 <__alt_data_end+0xf80142e0>
10014808:	40bf902e 	bgeu	r8,r2,1001464c <__alt_data_end+0xf801464c>
1001480c:	b5bfff84 	addi	r22,r22,-2
10014810:	4551883a 	add	r8,r8,r21
10014814:	003f8e06 	br	10014650 <__alt_data_end+0xf8014650>
10014818:	18bf762e 	bgeu	r3,r2,100145f4 <__alt_data_end+0xf80145f4>
1001481c:	8c7fff84 	addi	r17,r17,-2
10014820:	1d47883a 	add	r3,r3,r21
10014824:	003f7406 	br	100145f8 <__alt_data_end+0xf80145f8>
10014828:	1cc7883a 	add	r3,r3,r19
1001482c:	003ecd06 	br	10014364 <__alt_data_end+0xf8014364>
10014830:	8005883a 	mov	r2,r16
10014834:	003ef806 	br	10014418 <__alt_data_end+0xf8014418>
10014838:	873fe736 	bltu	r16,fp,100147d8 <__alt_data_end+0xf80147d8>
1001483c:	e00f883a 	mov	r7,fp
10014840:	0009883a 	mov	r4,zero
10014844:	003fad06 	br	100146fc <__alt_data_end+0xf80146fc>

10014848 <__divdf3>:
10014848:	defff004 	addi	sp,sp,-64
1001484c:	dc800815 	stw	r18,32(sp)
10014850:	2824d53a 	srli	r18,r5,20
10014854:	dd800c15 	stw	r22,48(sp)
10014858:	282cd7fa 	srli	r22,r5,31
1001485c:	dc000615 	stw	r16,24(sp)
10014860:	04000434 	movhi	r16,16
10014864:	843fffc4 	addi	r16,r16,-1
10014868:	dfc00f15 	stw	ra,60(sp)
1001486c:	df000e15 	stw	fp,56(sp)
10014870:	ddc00d15 	stw	r23,52(sp)
10014874:	dd400b15 	stw	r21,44(sp)
10014878:	dd000a15 	stw	r20,40(sp)
1001487c:	dcc00915 	stw	r19,36(sp)
10014880:	dc400715 	stw	r17,28(sp)
10014884:	9481ffcc 	andi	r18,r18,2047
10014888:	2c20703a 	and	r16,r5,r16
1001488c:	b2003fcc 	andi	r8,r22,255
10014890:	90006126 	beq	r18,zero,10014a18 <__divdf3+0x1d0>
10014894:	0081ffc4 	movi	r2,2047
10014898:	202b883a 	mov	r21,r4
1001489c:	90803726 	beq	r18,r2,1001497c <__divdf3+0x134>
100148a0:	80c00434 	orhi	r3,r16,16
100148a4:	180690fa 	slli	r3,r3,3
100148a8:	2020d77a 	srli	r16,r4,29
100148ac:	202a90fa 	slli	r21,r4,3
100148b0:	94bf0044 	addi	r18,r18,-1023
100148b4:	80e0b03a 	or	r16,r16,r3
100148b8:	0013883a 	mov	r9,zero
100148bc:	000b883a 	mov	r5,zero
100148c0:	3806d53a 	srli	r3,r7,20
100148c4:	382ed7fa 	srli	r23,r7,31
100148c8:	04400434 	movhi	r17,16
100148cc:	8c7fffc4 	addi	r17,r17,-1
100148d0:	18c1ffcc 	andi	r3,r3,2047
100148d4:	3029883a 	mov	r20,r6
100148d8:	3c62703a 	and	r17,r7,r17
100148dc:	bf003fcc 	andi	fp,r23,255
100148e0:	18006e26 	beq	r3,zero,10014a9c <__divdf3+0x254>
100148e4:	0081ffc4 	movi	r2,2047
100148e8:	18806626 	beq	r3,r2,10014a84 <__divdf3+0x23c>
100148ec:	89000434 	orhi	r4,r17,16
100148f0:	200890fa 	slli	r4,r4,3
100148f4:	3022d77a 	srli	r17,r6,29
100148f8:	302890fa 	slli	r20,r6,3
100148fc:	18ff0044 	addi	r3,r3,-1023
10014900:	8922b03a 	or	r17,r17,r4
10014904:	000f883a 	mov	r7,zero
10014908:	b5e6f03a 	xor	r19,r22,r23
1001490c:	3a4cb03a 	or	r6,r7,r9
10014910:	008003c4 	movi	r2,15
10014914:	9809883a 	mov	r4,r19
10014918:	90c7c83a 	sub	r3,r18,r3
1001491c:	9cc03fcc 	andi	r19,r19,255
10014920:	11809636 	bltu	r2,r6,10014b7c <__divdf3+0x334>
10014924:	300c90ba 	slli	r6,r6,2
10014928:	00840074 	movhi	r2,4097
1001492c:	10924f04 	addi	r2,r2,18748
10014930:	308d883a 	add	r6,r6,r2
10014934:	30800017 	ldw	r2,0(r6)
10014938:	1000683a 	jmp	r2
1001493c:	10014b7c 	xorhi	zero,r2,1325
10014940:	100149b4 	orhi	zero,r2,1318
10014944:	10014b6c 	andhi	zero,r2,1325
10014948:	100149a8 	cmpgeui	zero,r2,1318
1001494c:	10014b6c 	andhi	zero,r2,1325
10014950:	10014b40 	call	110014b4 <__alt_heap_start+0xf1e840>
10014954:	10014b6c 	andhi	zero,r2,1325
10014958:	100149a8 	cmpgeui	zero,r2,1318
1001495c:	100149b4 	orhi	zero,r2,1318
10014960:	100149b4 	orhi	zero,r2,1318
10014964:	10014b40 	call	110014b4 <__alt_heap_start+0xf1e840>
10014968:	100149a8 	cmpgeui	zero,r2,1318
1001496c:	10014998 	cmpnei	zero,r2,1318
10014970:	10014998 	cmpnei	zero,r2,1318
10014974:	10014998 	cmpnei	zero,r2,1318
10014978:	10014f04 	addi	zero,r2,1340
1001497c:	2404b03a 	or	r2,r4,r16
10014980:	10006c1e 	bne	r2,zero,10014b34 <__divdf3+0x2ec>
10014984:	02400204 	movi	r9,8
10014988:	0021883a 	mov	r16,zero
1001498c:	002b883a 	mov	r21,zero
10014990:	01400084 	movi	r5,2
10014994:	003fca06 	br	100148c0 <__alt_data_end+0xf80148c0>
10014998:	8023883a 	mov	r17,r16
1001499c:	a829883a 	mov	r20,r21
100149a0:	4039883a 	mov	fp,r8
100149a4:	280f883a 	mov	r7,r5
100149a8:	00800084 	movi	r2,2
100149ac:	3881601e 	bne	r7,r2,10014f30 <__divdf3+0x6e8>
100149b0:	e027883a 	mov	r19,fp
100149b4:	9900004c 	andi	r4,r19,1
100149b8:	0081ffc4 	movi	r2,2047
100149bc:	0021883a 	mov	r16,zero
100149c0:	002b883a 	mov	r21,zero
100149c4:	1004953a 	slli	r2,r2,20
100149c8:	20c03fcc 	andi	r3,r4,255
100149cc:	01400434 	movhi	r5,16
100149d0:	297fffc4 	addi	r5,r5,-1
100149d4:	180697fa 	slli	r3,r3,31
100149d8:	8160703a 	and	r16,r16,r5
100149dc:	80a0b03a 	or	r16,r16,r2
100149e0:	80c6b03a 	or	r3,r16,r3
100149e4:	a805883a 	mov	r2,r21
100149e8:	dfc00f17 	ldw	ra,60(sp)
100149ec:	df000e17 	ldw	fp,56(sp)
100149f0:	ddc00d17 	ldw	r23,52(sp)
100149f4:	dd800c17 	ldw	r22,48(sp)
100149f8:	dd400b17 	ldw	r21,44(sp)
100149fc:	dd000a17 	ldw	r20,40(sp)
10014a00:	dcc00917 	ldw	r19,36(sp)
10014a04:	dc800817 	ldw	r18,32(sp)
10014a08:	dc400717 	ldw	r17,28(sp)
10014a0c:	dc000617 	ldw	r16,24(sp)
10014a10:	dec01004 	addi	sp,sp,64
10014a14:	f800283a 	ret
10014a18:	2404b03a 	or	r2,r4,r16
10014a1c:	2023883a 	mov	r17,r4
10014a20:	10003f26 	beq	r2,zero,10014b20 <__divdf3+0x2d8>
10014a24:	80015e26 	beq	r16,zero,10014fa0 <__divdf3+0x758>
10014a28:	8009883a 	mov	r4,r16
10014a2c:	d9800215 	stw	r6,8(sp)
10014a30:	d9c00515 	stw	r7,20(sp)
10014a34:	da000415 	stw	r8,16(sp)
10014a38:	00059a40 	call	100059a4 <__clzsi2>
10014a3c:	d9800217 	ldw	r6,8(sp)
10014a40:	d9c00517 	ldw	r7,20(sp)
10014a44:	da000417 	ldw	r8,16(sp)
10014a48:	10fffd44 	addi	r3,r2,-11
10014a4c:	01000704 	movi	r4,28
10014a50:	20c14f16 	blt	r4,r3,10014f90 <__divdf3+0x748>
10014a54:	01000744 	movi	r4,29
10014a58:	157ffe04 	addi	r21,r2,-8
10014a5c:	20c9c83a 	sub	r4,r4,r3
10014a60:	8560983a 	sll	r16,r16,r21
10014a64:	8908d83a 	srl	r4,r17,r4
10014a68:	8d6a983a 	sll	r21,r17,r21
10014a6c:	2420b03a 	or	r16,r4,r16
10014a70:	04bf0084 	movi	r18,-1022
10014a74:	90e5c83a 	sub	r18,r18,r3
10014a78:	0013883a 	mov	r9,zero
10014a7c:	000b883a 	mov	r5,zero
10014a80:	003f8f06 	br	100148c0 <__alt_data_end+0xf80148c0>
10014a84:	3444b03a 	or	r2,r6,r17
10014a88:	1000231e 	bne	r2,zero,10014b18 <__divdf3+0x2d0>
10014a8c:	0023883a 	mov	r17,zero
10014a90:	0029883a 	mov	r20,zero
10014a94:	01c00084 	movi	r7,2
10014a98:	003f9b06 	br	10014908 <__alt_data_end+0xf8014908>
10014a9c:	3444b03a 	or	r2,r6,r17
10014aa0:	10001926 	beq	r2,zero,10014b08 <__divdf3+0x2c0>
10014aa4:	88014b26 	beq	r17,zero,10014fd4 <__divdf3+0x78c>
10014aa8:	8809883a 	mov	r4,r17
10014aac:	d9400115 	stw	r5,4(sp)
10014ab0:	d9800215 	stw	r6,8(sp)
10014ab4:	da000415 	stw	r8,16(sp)
10014ab8:	da400315 	stw	r9,12(sp)
10014abc:	00059a40 	call	100059a4 <__clzsi2>
10014ac0:	d9400117 	ldw	r5,4(sp)
10014ac4:	d9800217 	ldw	r6,8(sp)
10014ac8:	da000417 	ldw	r8,16(sp)
10014acc:	da400317 	ldw	r9,12(sp)
10014ad0:	10fffd44 	addi	r3,r2,-11
10014ad4:	01000704 	movi	r4,28
10014ad8:	20c13a16 	blt	r4,r3,10014fc4 <__divdf3+0x77c>
10014adc:	01000744 	movi	r4,29
10014ae0:	153ffe04 	addi	r20,r2,-8
10014ae4:	20c9c83a 	sub	r4,r4,r3
10014ae8:	8d22983a 	sll	r17,r17,r20
10014aec:	3108d83a 	srl	r4,r6,r4
10014af0:	3528983a 	sll	r20,r6,r20
10014af4:	2462b03a 	or	r17,r4,r17
10014af8:	00bf0084 	movi	r2,-1022
10014afc:	10c7c83a 	sub	r3,r2,r3
10014b00:	000f883a 	mov	r7,zero
10014b04:	003f8006 	br	10014908 <__alt_data_end+0xf8014908>
10014b08:	0023883a 	mov	r17,zero
10014b0c:	0029883a 	mov	r20,zero
10014b10:	01c00044 	movi	r7,1
10014b14:	003f7c06 	br	10014908 <__alt_data_end+0xf8014908>
10014b18:	01c000c4 	movi	r7,3
10014b1c:	003f7a06 	br	10014908 <__alt_data_end+0xf8014908>
10014b20:	02400104 	movi	r9,4
10014b24:	0021883a 	mov	r16,zero
10014b28:	002b883a 	mov	r21,zero
10014b2c:	01400044 	movi	r5,1
10014b30:	003f6306 	br	100148c0 <__alt_data_end+0xf80148c0>
10014b34:	02400304 	movi	r9,12
10014b38:	014000c4 	movi	r5,3
10014b3c:	003f6006 	br	100148c0 <__alt_data_end+0xf80148c0>
10014b40:	04000434 	movhi	r16,16
10014b44:	0009883a 	mov	r4,zero
10014b48:	843fffc4 	addi	r16,r16,-1
10014b4c:	057fffc4 	movi	r21,-1
10014b50:	0081ffc4 	movi	r2,2047
10014b54:	003f9b06 	br	100149c4 <__alt_data_end+0xf80149c4>
10014b58:	00c00044 	movi	r3,1
10014b5c:	1887c83a 	sub	r3,r3,r2
10014b60:	01000e04 	movi	r4,56
10014b64:	20c1530e 	bge	r4,r3,100150b4 <__divdf3+0x86c>
10014b68:	9900004c 	andi	r4,r19,1
10014b6c:	0005883a 	mov	r2,zero
10014b70:	0021883a 	mov	r16,zero
10014b74:	002b883a 	mov	r21,zero
10014b78:	003f9206 	br	100149c4 <__alt_data_end+0xf80149c4>
10014b7c:	8c012e36 	bltu	r17,r16,10015038 <__divdf3+0x7f0>
10014b80:	84412c26 	beq	r16,r17,10015034 <__divdf3+0x7ec>
10014b84:	a82f883a 	mov	r23,r21
10014b88:	18ffffc4 	addi	r3,r3,-1
10014b8c:	002b883a 	mov	r21,zero
10014b90:	a00ad63a 	srli	r5,r20,24
10014b94:	8822923a 	slli	r17,r17,8
10014b98:	a028923a 	slli	r20,r20,8
10014b9c:	8009883a 	mov	r4,r16
10014ba0:	896cb03a 	or	r22,r17,r5
10014ba4:	dd000015 	stw	r20,0(sp)
10014ba8:	b028d43a 	srli	r20,r22,16
10014bac:	d8c00215 	stw	r3,8(sp)
10014bb0:	b4bfffcc 	andi	r18,r22,65535
10014bb4:	a00b883a 	mov	r5,r20
10014bb8:	00024900 	call	10002490 <__udivsi3>
10014bbc:	100b883a 	mov	r5,r2
10014bc0:	9009883a 	mov	r4,r18
10014bc4:	1023883a 	mov	r17,r2
10014bc8:	0005a080 	call	10005a08 <__mulsi3>
10014bcc:	8009883a 	mov	r4,r16
10014bd0:	a00b883a 	mov	r5,r20
10014bd4:	1039883a 	mov	fp,r2
10014bd8:	00024f40 	call	100024f4 <__umodsi3>
10014bdc:	1004943a 	slli	r2,r2,16
10014be0:	b808d43a 	srli	r4,r23,16
10014be4:	d8c00217 	ldw	r3,8(sp)
10014be8:	2084b03a 	or	r2,r4,r2
10014bec:	1700062e 	bgeu	r2,fp,10014c08 <__divdf3+0x3c0>
10014bf0:	1585883a 	add	r2,r2,r22
10014bf4:	893fffc4 	addi	r4,r17,-1
10014bf8:	15811d36 	bltu	r2,r22,10015070 <__divdf3+0x828>
10014bfc:	17011c2e 	bgeu	r2,fp,10015070 <__divdf3+0x828>
10014c00:	8c7fff84 	addi	r17,r17,-2
10014c04:	1585883a 	add	r2,r2,r22
10014c08:	1739c83a 	sub	fp,r2,fp
10014c0c:	a00b883a 	mov	r5,r20
10014c10:	e009883a 	mov	r4,fp
10014c14:	d8c00215 	stw	r3,8(sp)
10014c18:	00024900 	call	10002490 <__udivsi3>
10014c1c:	100b883a 	mov	r5,r2
10014c20:	9009883a 	mov	r4,r18
10014c24:	1021883a 	mov	r16,r2
10014c28:	0005a080 	call	10005a08 <__mulsi3>
10014c2c:	a00b883a 	mov	r5,r20
10014c30:	e009883a 	mov	r4,fp
10014c34:	d8800415 	stw	r2,16(sp)
10014c38:	00024f40 	call	100024f4 <__umodsi3>
10014c3c:	1004943a 	slli	r2,r2,16
10014c40:	da000417 	ldw	r8,16(sp)
10014c44:	bdffffcc 	andi	r23,r23,65535
10014c48:	b884b03a 	or	r2,r23,r2
10014c4c:	d8c00217 	ldw	r3,8(sp)
10014c50:	1200062e 	bgeu	r2,r8,10014c6c <__divdf3+0x424>
10014c54:	1585883a 	add	r2,r2,r22
10014c58:	813fffc4 	addi	r4,r16,-1
10014c5c:	15810236 	bltu	r2,r22,10015068 <__divdf3+0x820>
10014c60:	1201012e 	bgeu	r2,r8,10015068 <__divdf3+0x820>
10014c64:	843fff84 	addi	r16,r16,-2
10014c68:	1585883a 	add	r2,r2,r22
10014c6c:	8822943a 	slli	r17,r17,16
10014c70:	d9800017 	ldw	r6,0(sp)
10014c74:	1211c83a 	sub	r8,r2,r8
10014c78:	8c22b03a 	or	r17,r17,r16
10014c7c:	373fffcc 	andi	fp,r6,65535
10014c80:	8abfffcc 	andi	r10,r17,65535
10014c84:	8820d43a 	srli	r16,r17,16
10014c88:	5009883a 	mov	r4,r10
10014c8c:	e00b883a 	mov	r5,fp
10014c90:	302ed43a 	srli	r23,r6,16
10014c94:	d8c00215 	stw	r3,8(sp)
10014c98:	da000415 	stw	r8,16(sp)
10014c9c:	da800115 	stw	r10,4(sp)
10014ca0:	0005a080 	call	10005a08 <__mulsi3>
10014ca4:	800b883a 	mov	r5,r16
10014ca8:	e009883a 	mov	r4,fp
10014cac:	d8800515 	stw	r2,20(sp)
10014cb0:	0005a080 	call	10005a08 <__mulsi3>
10014cb4:	8009883a 	mov	r4,r16
10014cb8:	b80b883a 	mov	r5,r23
10014cbc:	d8800315 	stw	r2,12(sp)
10014cc0:	0005a080 	call	10005a08 <__mulsi3>
10014cc4:	da800117 	ldw	r10,4(sp)
10014cc8:	b80b883a 	mov	r5,r23
10014ccc:	1021883a 	mov	r16,r2
10014cd0:	5009883a 	mov	r4,r10
10014cd4:	0005a080 	call	10005a08 <__mulsi3>
10014cd8:	d9c00517 	ldw	r7,20(sp)
10014cdc:	da400317 	ldw	r9,12(sp)
10014ce0:	d8c00217 	ldw	r3,8(sp)
10014ce4:	3808d43a 	srli	r4,r7,16
10014ce8:	1245883a 	add	r2,r2,r9
10014cec:	da000417 	ldw	r8,16(sp)
10014cf0:	2085883a 	add	r2,r4,r2
10014cf4:	1240022e 	bgeu	r2,r9,10014d00 <__divdf3+0x4b8>
10014cf8:	01000074 	movhi	r4,1
10014cfc:	8121883a 	add	r16,r16,r4
10014d00:	1008d43a 	srli	r4,r2,16
10014d04:	1004943a 	slli	r2,r2,16
10014d08:	39ffffcc 	andi	r7,r7,65535
10014d0c:	2409883a 	add	r4,r4,r16
10014d10:	11c5883a 	add	r2,r2,r7
10014d14:	4100bb36 	bltu	r8,r4,10015004 <__divdf3+0x7bc>
10014d18:	4100d726 	beq	r8,r4,10015078 <__divdf3+0x830>
10014d1c:	4109c83a 	sub	r4,r8,r4
10014d20:	a8a1c83a 	sub	r16,r21,r2
10014d24:	ac2b803a 	cmpltu	r21,r21,r16
10014d28:	256bc83a 	sub	r21,r4,r21
10014d2c:	b540d926 	beq	r22,r21,10015094 <__divdf3+0x84c>
10014d30:	a00b883a 	mov	r5,r20
10014d34:	a809883a 	mov	r4,r21
10014d38:	d8c00215 	stw	r3,8(sp)
10014d3c:	00024900 	call	10002490 <__udivsi3>
10014d40:	100b883a 	mov	r5,r2
10014d44:	9009883a 	mov	r4,r18
10014d48:	d8800515 	stw	r2,20(sp)
10014d4c:	0005a080 	call	10005a08 <__mulsi3>
10014d50:	a809883a 	mov	r4,r21
10014d54:	a00b883a 	mov	r5,r20
10014d58:	d8800415 	stw	r2,16(sp)
10014d5c:	00024f40 	call	100024f4 <__umodsi3>
10014d60:	1004943a 	slli	r2,r2,16
10014d64:	8008d43a 	srli	r4,r16,16
10014d68:	da000417 	ldw	r8,16(sp)
10014d6c:	d8c00217 	ldw	r3,8(sp)
10014d70:	2084b03a 	or	r2,r4,r2
10014d74:	d9c00517 	ldw	r7,20(sp)
10014d78:	1200062e 	bgeu	r2,r8,10014d94 <__divdf3+0x54c>
10014d7c:	1585883a 	add	r2,r2,r22
10014d80:	393fffc4 	addi	r4,r7,-1
10014d84:	1580c536 	bltu	r2,r22,1001509c <__divdf3+0x854>
10014d88:	1200c42e 	bgeu	r2,r8,1001509c <__divdf3+0x854>
10014d8c:	39ffff84 	addi	r7,r7,-2
10014d90:	1585883a 	add	r2,r2,r22
10014d94:	122bc83a 	sub	r21,r2,r8
10014d98:	a00b883a 	mov	r5,r20
10014d9c:	a809883a 	mov	r4,r21
10014da0:	d8c00215 	stw	r3,8(sp)
10014da4:	d9c00515 	stw	r7,20(sp)
10014da8:	00024900 	call	10002490 <__udivsi3>
10014dac:	9009883a 	mov	r4,r18
10014db0:	100b883a 	mov	r5,r2
10014db4:	d8800415 	stw	r2,16(sp)
10014db8:	0005a080 	call	10005a08 <__mulsi3>
10014dbc:	a809883a 	mov	r4,r21
10014dc0:	a00b883a 	mov	r5,r20
10014dc4:	1025883a 	mov	r18,r2
10014dc8:	00024f40 	call	100024f4 <__umodsi3>
10014dcc:	1004943a 	slli	r2,r2,16
10014dd0:	813fffcc 	andi	r4,r16,65535
10014dd4:	d8c00217 	ldw	r3,8(sp)
10014dd8:	20a0b03a 	or	r16,r4,r2
10014ddc:	d9c00517 	ldw	r7,20(sp)
10014de0:	da000417 	ldw	r8,16(sp)
10014de4:	8480062e 	bgeu	r16,r18,10014e00 <__divdf3+0x5b8>
10014de8:	85a1883a 	add	r16,r16,r22
10014dec:	40bfffc4 	addi	r2,r8,-1
10014df0:	8580ac36 	bltu	r16,r22,100150a4 <__divdf3+0x85c>
10014df4:	8480ab2e 	bgeu	r16,r18,100150a4 <__divdf3+0x85c>
10014df8:	423fff84 	addi	r8,r8,-2
10014dfc:	85a1883a 	add	r16,r16,r22
10014e00:	3804943a 	slli	r2,r7,16
10014e04:	84a1c83a 	sub	r16,r16,r18
10014e08:	e009883a 	mov	r4,fp
10014e0c:	1228b03a 	or	r20,r2,r8
10014e10:	a1ffffcc 	andi	r7,r20,65535
10014e14:	a024d43a 	srli	r18,r20,16
10014e18:	380b883a 	mov	r5,r7
10014e1c:	d8c00215 	stw	r3,8(sp)
10014e20:	d9c00515 	stw	r7,20(sp)
10014e24:	0005a080 	call	10005a08 <__mulsi3>
10014e28:	900b883a 	mov	r5,r18
10014e2c:	e009883a 	mov	r4,fp
10014e30:	102b883a 	mov	r21,r2
10014e34:	0005a080 	call	10005a08 <__mulsi3>
10014e38:	900b883a 	mov	r5,r18
10014e3c:	b809883a 	mov	r4,r23
10014e40:	1039883a 	mov	fp,r2
10014e44:	0005a080 	call	10005a08 <__mulsi3>
10014e48:	d9c00517 	ldw	r7,20(sp)
10014e4c:	b80b883a 	mov	r5,r23
10014e50:	1025883a 	mov	r18,r2
10014e54:	3809883a 	mov	r4,r7
10014e58:	0005a080 	call	10005a08 <__mulsi3>
10014e5c:	a808d43a 	srli	r4,r21,16
10014e60:	1705883a 	add	r2,r2,fp
10014e64:	d8c00217 	ldw	r3,8(sp)
10014e68:	2085883a 	add	r2,r4,r2
10014e6c:	1700022e 	bgeu	r2,fp,10014e78 <__divdf3+0x630>
10014e70:	01000074 	movhi	r4,1
10014e74:	9125883a 	add	r18,r18,r4
10014e78:	1008d43a 	srli	r4,r2,16
10014e7c:	1004943a 	slli	r2,r2,16
10014e80:	ad7fffcc 	andi	r21,r21,65535
10014e84:	2489883a 	add	r4,r4,r18
10014e88:	1545883a 	add	r2,r2,r21
10014e8c:	81003836 	bltu	r16,r4,10014f70 <__divdf3+0x728>
10014e90:	81003626 	beq	r16,r4,10014f6c <__divdf3+0x724>
10014e94:	a5000054 	ori	r20,r20,1
10014e98:	1880ffc4 	addi	r2,r3,1023
10014e9c:	00bf2e0e 	bge	zero,r2,10014b58 <__alt_data_end+0xf8014b58>
10014ea0:	a10001cc 	andi	r4,r20,7
10014ea4:	20000726 	beq	r4,zero,10014ec4 <__divdf3+0x67c>
10014ea8:	a10003cc 	andi	r4,r20,15
10014eac:	01400104 	movi	r5,4
10014eb0:	21400426 	beq	r4,r5,10014ec4 <__divdf3+0x67c>
10014eb4:	a149883a 	add	r4,r20,r5
10014eb8:	2529803a 	cmpltu	r20,r4,r20
10014ebc:	8d23883a 	add	r17,r17,r20
10014ec0:	2029883a 	mov	r20,r4
10014ec4:	8900402c 	andhi	r4,r17,256
10014ec8:	20000426 	beq	r4,zero,10014edc <__divdf3+0x694>
10014ecc:	18810004 	addi	r2,r3,1024
10014ed0:	00ffc034 	movhi	r3,65280
10014ed4:	18ffffc4 	addi	r3,r3,-1
10014ed8:	88e2703a 	and	r17,r17,r3
10014edc:	00c1ff84 	movi	r3,2046
10014ee0:	18beb416 	blt	r3,r2,100149b4 <__alt_data_end+0xf80149b4>
10014ee4:	a028d0fa 	srli	r20,r20,3
10014ee8:	882a977a 	slli	r21,r17,29
10014eec:	8820927a 	slli	r16,r17,9
10014ef0:	1081ffcc 	andi	r2,r2,2047
10014ef4:	ad2ab03a 	or	r21,r21,r20
10014ef8:	8020d33a 	srli	r16,r16,12
10014efc:	9900004c 	andi	r4,r19,1
10014f00:	003eb006 	br	100149c4 <__alt_data_end+0xf80149c4>
10014f04:	8080022c 	andhi	r2,r16,8
10014f08:	10001226 	beq	r2,zero,10014f54 <__divdf3+0x70c>
10014f0c:	8880022c 	andhi	r2,r17,8
10014f10:	1000101e 	bne	r2,zero,10014f54 <__divdf3+0x70c>
10014f14:	00800434 	movhi	r2,16
10014f18:	8c000234 	orhi	r16,r17,8
10014f1c:	10bfffc4 	addi	r2,r2,-1
10014f20:	b809883a 	mov	r4,r23
10014f24:	80a0703a 	and	r16,r16,r2
10014f28:	a02b883a 	mov	r21,r20
10014f2c:	003f0806 	br	10014b50 <__alt_data_end+0xf8014b50>
10014f30:	008000c4 	movi	r2,3
10014f34:	3880b126 	beq	r7,r2,100151fc <__divdf3+0x9b4>
10014f38:	00800044 	movi	r2,1
10014f3c:	38805b1e 	bne	r7,r2,100150ac <__divdf3+0x864>
10014f40:	e009883a 	mov	r4,fp
10014f44:	0005883a 	mov	r2,zero
10014f48:	0021883a 	mov	r16,zero
10014f4c:	002b883a 	mov	r21,zero
10014f50:	003e9c06 	br	100149c4 <__alt_data_end+0xf80149c4>
10014f54:	00800434 	movhi	r2,16
10014f58:	84000234 	orhi	r16,r16,8
10014f5c:	10bfffc4 	addi	r2,r2,-1
10014f60:	b009883a 	mov	r4,r22
10014f64:	80a0703a 	and	r16,r16,r2
10014f68:	003ef906 	br	10014b50 <__alt_data_end+0xf8014b50>
10014f6c:	103fca26 	beq	r2,zero,10014e98 <__alt_data_end+0xf8014e98>
10014f70:	b421883a 	add	r16,r22,r16
10014f74:	a17fffc4 	addi	r5,r20,-1
10014f78:	8580422e 	bgeu	r16,r22,10015084 <__divdf3+0x83c>
10014f7c:	2829883a 	mov	r20,r5
10014f80:	813fc41e 	bne	r16,r4,10014e94 <__alt_data_end+0xf8014e94>
10014f84:	d9800017 	ldw	r6,0(sp)
10014f88:	30bfc21e 	bne	r6,r2,10014e94 <__alt_data_end+0xf8014e94>
10014f8c:	003fc206 	br	10014e98 <__alt_data_end+0xf8014e98>
10014f90:	10bff604 	addi	r2,r2,-40
10014f94:	88a0983a 	sll	r16,r17,r2
10014f98:	002b883a 	mov	r21,zero
10014f9c:	003eb406 	br	10014a70 <__alt_data_end+0xf8014a70>
10014fa0:	d9800215 	stw	r6,8(sp)
10014fa4:	d9c00515 	stw	r7,20(sp)
10014fa8:	da000415 	stw	r8,16(sp)
10014fac:	00059a40 	call	100059a4 <__clzsi2>
10014fb0:	10800804 	addi	r2,r2,32
10014fb4:	da000417 	ldw	r8,16(sp)
10014fb8:	d9c00517 	ldw	r7,20(sp)
10014fbc:	d9800217 	ldw	r6,8(sp)
10014fc0:	003ea106 	br	10014a48 <__alt_data_end+0xf8014a48>
10014fc4:	10bff604 	addi	r2,r2,-40
10014fc8:	30a2983a 	sll	r17,r6,r2
10014fcc:	0029883a 	mov	r20,zero
10014fd0:	003ec906 	br	10014af8 <__alt_data_end+0xf8014af8>
10014fd4:	3009883a 	mov	r4,r6
10014fd8:	d9400115 	stw	r5,4(sp)
10014fdc:	d9800215 	stw	r6,8(sp)
10014fe0:	da000415 	stw	r8,16(sp)
10014fe4:	da400315 	stw	r9,12(sp)
10014fe8:	00059a40 	call	100059a4 <__clzsi2>
10014fec:	10800804 	addi	r2,r2,32
10014ff0:	da400317 	ldw	r9,12(sp)
10014ff4:	da000417 	ldw	r8,16(sp)
10014ff8:	d9800217 	ldw	r6,8(sp)
10014ffc:	d9400117 	ldw	r5,4(sp)
10015000:	003eb306 	br	10014ad0 <__alt_data_end+0xf8014ad0>
10015004:	d9800017 	ldw	r6,0(sp)
10015008:	a9ab883a 	add	r21,r21,r6
1001500c:	a98b803a 	cmpltu	r5,r21,r6
10015010:	2d8b883a 	add	r5,r5,r22
10015014:	2a11883a 	add	r8,r5,r8
10015018:	897fffc4 	addi	r5,r17,-1
1001501c:	b2000c2e 	bgeu	r22,r8,10015050 <__divdf3+0x808>
10015020:	41003f36 	bltu	r8,r4,10015120 <__divdf3+0x8d8>
10015024:	22006c26 	beq	r4,r8,100151d8 <__divdf3+0x990>
10015028:	4109c83a 	sub	r4,r8,r4
1001502c:	2823883a 	mov	r17,r5
10015030:	003f3b06 	br	10014d20 <__alt_data_end+0xf8014d20>
10015034:	ad3ed336 	bltu	r21,r20,10014b84 <__alt_data_end+0xf8014b84>
10015038:	a804d07a 	srli	r2,r21,1
1001503c:	802e97fa 	slli	r23,r16,31
10015040:	a82a97fa 	slli	r21,r21,31
10015044:	8020d07a 	srli	r16,r16,1
10015048:	b8aeb03a 	or	r23,r23,r2
1001504c:	003ed006 	br	10014b90 <__alt_data_end+0xf8014b90>
10015050:	b23ff51e 	bne	r22,r8,10015028 <__alt_data_end+0xf8015028>
10015054:	d9800017 	ldw	r6,0(sp)
10015058:	a9bff12e 	bgeu	r21,r6,10015020 <__alt_data_end+0xf8015020>
1001505c:	b109c83a 	sub	r4,r22,r4
10015060:	2823883a 	mov	r17,r5
10015064:	003f2e06 	br	10014d20 <__alt_data_end+0xf8014d20>
10015068:	2021883a 	mov	r16,r4
1001506c:	003eff06 	br	10014c6c <__alt_data_end+0xf8014c6c>
10015070:	2023883a 	mov	r17,r4
10015074:	003ee406 	br	10014c08 <__alt_data_end+0xf8014c08>
10015078:	a8bfe236 	bltu	r21,r2,10015004 <__alt_data_end+0xf8015004>
1001507c:	0009883a 	mov	r4,zero
10015080:	003f2706 	br	10014d20 <__alt_data_end+0xf8014d20>
10015084:	81002d36 	bltu	r16,r4,1001513c <__divdf3+0x8f4>
10015088:	24005626 	beq	r4,r16,100151e4 <__divdf3+0x99c>
1001508c:	2829883a 	mov	r20,r5
10015090:	003f8006 	br	10014e94 <__alt_data_end+0xf8014e94>
10015094:	053fffc4 	movi	r20,-1
10015098:	003f7f06 	br	10014e98 <__alt_data_end+0xf8014e98>
1001509c:	200f883a 	mov	r7,r4
100150a0:	003f3c06 	br	10014d94 <__alt_data_end+0xf8014d94>
100150a4:	1011883a 	mov	r8,r2
100150a8:	003f5506 	br	10014e00 <__alt_data_end+0xf8014e00>
100150ac:	e027883a 	mov	r19,fp
100150b0:	003f7906 	br	10014e98 <__alt_data_end+0xf8014e98>
100150b4:	010007c4 	movi	r4,31
100150b8:	20c02816 	blt	r4,r3,1001515c <__divdf3+0x914>
100150bc:	00800804 	movi	r2,32
100150c0:	10c5c83a 	sub	r2,r2,r3
100150c4:	888a983a 	sll	r5,r17,r2
100150c8:	a0c8d83a 	srl	r4,r20,r3
100150cc:	a084983a 	sll	r2,r20,r2
100150d0:	88e2d83a 	srl	r17,r17,r3
100150d4:	2906b03a 	or	r3,r5,r4
100150d8:	1004c03a 	cmpne	r2,r2,zero
100150dc:	1886b03a 	or	r3,r3,r2
100150e0:	188001cc 	andi	r2,r3,7
100150e4:	10000726 	beq	r2,zero,10015104 <__divdf3+0x8bc>
100150e8:	188003cc 	andi	r2,r3,15
100150ec:	01000104 	movi	r4,4
100150f0:	11000426 	beq	r2,r4,10015104 <__divdf3+0x8bc>
100150f4:	1805883a 	mov	r2,r3
100150f8:	10c00104 	addi	r3,r2,4
100150fc:	1885803a 	cmpltu	r2,r3,r2
10015100:	88a3883a 	add	r17,r17,r2
10015104:	8880202c 	andhi	r2,r17,128
10015108:	10002926 	beq	r2,zero,100151b0 <__divdf3+0x968>
1001510c:	9900004c 	andi	r4,r19,1
10015110:	00800044 	movi	r2,1
10015114:	0021883a 	mov	r16,zero
10015118:	002b883a 	mov	r21,zero
1001511c:	003e2906 	br	100149c4 <__alt_data_end+0xf80149c4>
10015120:	d9800017 	ldw	r6,0(sp)
10015124:	8c7fff84 	addi	r17,r17,-2
10015128:	a9ab883a 	add	r21,r21,r6
1001512c:	a98b803a 	cmpltu	r5,r21,r6
10015130:	2d8b883a 	add	r5,r5,r22
10015134:	2a11883a 	add	r8,r5,r8
10015138:	003ef806 	br	10014d1c <__alt_data_end+0xf8014d1c>
1001513c:	d9800017 	ldw	r6,0(sp)
10015140:	318f883a 	add	r7,r6,r6
10015144:	398b803a 	cmpltu	r5,r7,r6
10015148:	2d8d883a 	add	r6,r5,r22
1001514c:	81a1883a 	add	r16,r16,r6
10015150:	a17fff84 	addi	r5,r20,-2
10015154:	d9c00015 	stw	r7,0(sp)
10015158:	003f8806 	br	10014f7c <__alt_data_end+0xf8014f7c>
1001515c:	013ff844 	movi	r4,-31
10015160:	2085c83a 	sub	r2,r4,r2
10015164:	8888d83a 	srl	r4,r17,r2
10015168:	00800804 	movi	r2,32
1001516c:	18802126 	beq	r3,r2,100151f4 <__divdf3+0x9ac>
10015170:	04001004 	movi	r16,64
10015174:	80c7c83a 	sub	r3,r16,r3
10015178:	88e0983a 	sll	r16,r17,r3
1001517c:	8504b03a 	or	r2,r16,r20
10015180:	1004c03a 	cmpne	r2,r2,zero
10015184:	2084b03a 	or	r2,r4,r2
10015188:	144001cc 	andi	r17,r2,7
1001518c:	88000d1e 	bne	r17,zero,100151c4 <__divdf3+0x97c>
10015190:	0021883a 	mov	r16,zero
10015194:	102ad0fa 	srli	r21,r2,3
10015198:	9900004c 	andi	r4,r19,1
1001519c:	0005883a 	mov	r2,zero
100151a0:	ac6ab03a 	or	r21,r21,r17
100151a4:	003e0706 	br	100149c4 <__alt_data_end+0xf80149c4>
100151a8:	1007883a 	mov	r3,r2
100151ac:	0023883a 	mov	r17,zero
100151b0:	8820927a 	slli	r16,r17,9
100151b4:	1805883a 	mov	r2,r3
100151b8:	8822977a 	slli	r17,r17,29
100151bc:	8020d33a 	srli	r16,r16,12
100151c0:	003ff406 	br	10015194 <__alt_data_end+0xf8015194>
100151c4:	10c003cc 	andi	r3,r2,15
100151c8:	01000104 	movi	r4,4
100151cc:	193ff626 	beq	r3,r4,100151a8 <__alt_data_end+0xf80151a8>
100151d0:	0023883a 	mov	r17,zero
100151d4:	003fc806 	br	100150f8 <__alt_data_end+0xf80150f8>
100151d8:	a8bfd136 	bltu	r21,r2,10015120 <__alt_data_end+0xf8015120>
100151dc:	2823883a 	mov	r17,r5
100151e0:	003fa606 	br	1001507c <__alt_data_end+0xf801507c>
100151e4:	d9800017 	ldw	r6,0(sp)
100151e8:	30bfd436 	bltu	r6,r2,1001513c <__alt_data_end+0xf801513c>
100151ec:	2829883a 	mov	r20,r5
100151f0:	003f6406 	br	10014f84 <__alt_data_end+0xf8014f84>
100151f4:	0021883a 	mov	r16,zero
100151f8:	003fe006 	br	1001517c <__alt_data_end+0xf801517c>
100151fc:	00800434 	movhi	r2,16
10015200:	8c000234 	orhi	r16,r17,8
10015204:	10bfffc4 	addi	r2,r2,-1
10015208:	e009883a 	mov	r4,fp
1001520c:	80a0703a 	and	r16,r16,r2
10015210:	a02b883a 	mov	r21,r20
10015214:	003e4e06 	br	10014b50 <__alt_data_end+0xf8014b50>

10015218 <__eqdf2>:
10015218:	2804d53a 	srli	r2,r5,20
1001521c:	3806d53a 	srli	r3,r7,20
10015220:	02000434 	movhi	r8,16
10015224:	423fffc4 	addi	r8,r8,-1
10015228:	1081ffcc 	andi	r2,r2,2047
1001522c:	0281ffc4 	movi	r10,2047
10015230:	2a12703a 	and	r9,r5,r8
10015234:	18c1ffcc 	andi	r3,r3,2047
10015238:	3a10703a 	and	r8,r7,r8
1001523c:	280ad7fa 	srli	r5,r5,31
10015240:	380ed7fa 	srli	r7,r7,31
10015244:	12801026 	beq	r2,r10,10015288 <__eqdf2+0x70>
10015248:	0281ffc4 	movi	r10,2047
1001524c:	1a800a26 	beq	r3,r10,10015278 <__eqdf2+0x60>
10015250:	10c00226 	beq	r2,r3,1001525c <__eqdf2+0x44>
10015254:	00800044 	movi	r2,1
10015258:	f800283a 	ret
1001525c:	4a3ffd1e 	bne	r9,r8,10015254 <__alt_data_end+0xf8015254>
10015260:	21bffc1e 	bne	r4,r6,10015254 <__alt_data_end+0xf8015254>
10015264:	29c00c26 	beq	r5,r7,10015298 <__eqdf2+0x80>
10015268:	103ffa1e 	bne	r2,zero,10015254 <__alt_data_end+0xf8015254>
1001526c:	2244b03a 	or	r2,r4,r9
10015270:	1004c03a 	cmpne	r2,r2,zero
10015274:	f800283a 	ret
10015278:	3214b03a 	or	r10,r6,r8
1001527c:	503ff426 	beq	r10,zero,10015250 <__alt_data_end+0xf8015250>
10015280:	00800044 	movi	r2,1
10015284:	f800283a 	ret
10015288:	2254b03a 	or	r10,r4,r9
1001528c:	503fee26 	beq	r10,zero,10015248 <__alt_data_end+0xf8015248>
10015290:	00800044 	movi	r2,1
10015294:	f800283a 	ret
10015298:	0005883a 	mov	r2,zero
1001529c:	f800283a 	ret

100152a0 <__gedf2>:
100152a0:	2804d53a 	srli	r2,r5,20
100152a4:	3806d53a 	srli	r3,r7,20
100152a8:	02000434 	movhi	r8,16
100152ac:	423fffc4 	addi	r8,r8,-1
100152b0:	1081ffcc 	andi	r2,r2,2047
100152b4:	0241ffc4 	movi	r9,2047
100152b8:	2a14703a 	and	r10,r5,r8
100152bc:	18c1ffcc 	andi	r3,r3,2047
100152c0:	3a10703a 	and	r8,r7,r8
100152c4:	280ad7fa 	srli	r5,r5,31
100152c8:	380ed7fa 	srli	r7,r7,31
100152cc:	12401d26 	beq	r2,r9,10015344 <__gedf2+0xa4>
100152d0:	0241ffc4 	movi	r9,2047
100152d4:	1a401226 	beq	r3,r9,10015320 <__gedf2+0x80>
100152d8:	1000081e 	bne	r2,zero,100152fc <__gedf2+0x5c>
100152dc:	2296b03a 	or	r11,r4,r10
100152e0:	5813003a 	cmpeq	r9,r11,zero
100152e4:	1800091e 	bne	r3,zero,1001530c <__gedf2+0x6c>
100152e8:	3218b03a 	or	r12,r6,r8
100152ec:	6000071e 	bne	r12,zero,1001530c <__gedf2+0x6c>
100152f0:	0005883a 	mov	r2,zero
100152f4:	5800101e 	bne	r11,zero,10015338 <__gedf2+0x98>
100152f8:	f800283a 	ret
100152fc:	18000c1e 	bne	r3,zero,10015330 <__gedf2+0x90>
10015300:	3212b03a 	or	r9,r6,r8
10015304:	48000c26 	beq	r9,zero,10015338 <__gedf2+0x98>
10015308:	0013883a 	mov	r9,zero
1001530c:	39c03fcc 	andi	r7,r7,255
10015310:	48000826 	beq	r9,zero,10015334 <__gedf2+0x94>
10015314:	38000926 	beq	r7,zero,1001533c <__gedf2+0x9c>
10015318:	00800044 	movi	r2,1
1001531c:	f800283a 	ret
10015320:	3212b03a 	or	r9,r6,r8
10015324:	483fec26 	beq	r9,zero,100152d8 <__alt_data_end+0xf80152d8>
10015328:	00bfff84 	movi	r2,-2
1001532c:	f800283a 	ret
10015330:	39c03fcc 	andi	r7,r7,255
10015334:	29c00626 	beq	r5,r7,10015350 <__gedf2+0xb0>
10015338:	283ff726 	beq	r5,zero,10015318 <__alt_data_end+0xf8015318>
1001533c:	00bfffc4 	movi	r2,-1
10015340:	f800283a 	ret
10015344:	2292b03a 	or	r9,r4,r10
10015348:	483fe126 	beq	r9,zero,100152d0 <__alt_data_end+0xf80152d0>
1001534c:	003ff606 	br	10015328 <__alt_data_end+0xf8015328>
10015350:	18bff916 	blt	r3,r2,10015338 <__alt_data_end+0xf8015338>
10015354:	10c00316 	blt	r2,r3,10015364 <__gedf2+0xc4>
10015358:	42bff736 	bltu	r8,r10,10015338 <__alt_data_end+0xf8015338>
1001535c:	52000326 	beq	r10,r8,1001536c <__gedf2+0xcc>
10015360:	5200042e 	bgeu	r10,r8,10015374 <__gedf2+0xd4>
10015364:	283fec1e 	bne	r5,zero,10015318 <__alt_data_end+0xf8015318>
10015368:	003ff406 	br	1001533c <__alt_data_end+0xf801533c>
1001536c:	313ff236 	bltu	r6,r4,10015338 <__alt_data_end+0xf8015338>
10015370:	21bffc36 	bltu	r4,r6,10015364 <__alt_data_end+0xf8015364>
10015374:	0005883a 	mov	r2,zero
10015378:	f800283a 	ret

1001537c <__fixdfsi>:
1001537c:	280cd53a 	srli	r6,r5,20
10015380:	00c00434 	movhi	r3,16
10015384:	18ffffc4 	addi	r3,r3,-1
10015388:	3181ffcc 	andi	r6,r6,2047
1001538c:	01c0ff84 	movi	r7,1022
10015390:	28c6703a 	and	r3,r5,r3
10015394:	280ad7fa 	srli	r5,r5,31
10015398:	3980120e 	bge	r7,r6,100153e4 <__fixdfsi+0x68>
1001539c:	00810744 	movi	r2,1053
100153a0:	11800c16 	blt	r2,r6,100153d4 <__fixdfsi+0x58>
100153a4:	00810cc4 	movi	r2,1075
100153a8:	1185c83a 	sub	r2,r2,r6
100153ac:	01c007c4 	movi	r7,31
100153b0:	18c00434 	orhi	r3,r3,16
100153b4:	38800d16 	blt	r7,r2,100153ec <__fixdfsi+0x70>
100153b8:	31befb44 	addi	r6,r6,-1043
100153bc:	2084d83a 	srl	r2,r4,r2
100153c0:	1986983a 	sll	r3,r3,r6
100153c4:	1884b03a 	or	r2,r3,r2
100153c8:	28000726 	beq	r5,zero,100153e8 <__fixdfsi+0x6c>
100153cc:	0085c83a 	sub	r2,zero,r2
100153d0:	f800283a 	ret
100153d4:	00a00034 	movhi	r2,32768
100153d8:	10bfffc4 	addi	r2,r2,-1
100153dc:	2885883a 	add	r2,r5,r2
100153e0:	f800283a 	ret
100153e4:	0005883a 	mov	r2,zero
100153e8:	f800283a 	ret
100153ec:	008104c4 	movi	r2,1043
100153f0:	1185c83a 	sub	r2,r2,r6
100153f4:	1884d83a 	srl	r2,r3,r2
100153f8:	003ff306 	br	100153c8 <__alt_data_end+0xf80153c8>

100153fc <__floatsidf>:
100153fc:	defffd04 	addi	sp,sp,-12
10015400:	dfc00215 	stw	ra,8(sp)
10015404:	dc400115 	stw	r17,4(sp)
10015408:	dc000015 	stw	r16,0(sp)
1001540c:	20002b26 	beq	r4,zero,100154bc <__floatsidf+0xc0>
10015410:	2023883a 	mov	r17,r4
10015414:	2020d7fa 	srli	r16,r4,31
10015418:	20002d16 	blt	r4,zero,100154d0 <__floatsidf+0xd4>
1001541c:	8809883a 	mov	r4,r17
10015420:	00059a40 	call	100059a4 <__clzsi2>
10015424:	01410784 	movi	r5,1054
10015428:	288bc83a 	sub	r5,r5,r2
1001542c:	01010cc4 	movi	r4,1075
10015430:	2149c83a 	sub	r4,r4,r5
10015434:	00c007c4 	movi	r3,31
10015438:	1900160e 	bge	r3,r4,10015494 <__floatsidf+0x98>
1001543c:	00c104c4 	movi	r3,1043
10015440:	1947c83a 	sub	r3,r3,r5
10015444:	88c6983a 	sll	r3,r17,r3
10015448:	00800434 	movhi	r2,16
1001544c:	10bfffc4 	addi	r2,r2,-1
10015450:	1886703a 	and	r3,r3,r2
10015454:	2941ffcc 	andi	r5,r5,2047
10015458:	800d883a 	mov	r6,r16
1001545c:	0005883a 	mov	r2,zero
10015460:	280a953a 	slli	r5,r5,20
10015464:	31803fcc 	andi	r6,r6,255
10015468:	01000434 	movhi	r4,16
1001546c:	300c97fa 	slli	r6,r6,31
10015470:	213fffc4 	addi	r4,r4,-1
10015474:	1906703a 	and	r3,r3,r4
10015478:	1946b03a 	or	r3,r3,r5
1001547c:	1986b03a 	or	r3,r3,r6
10015480:	dfc00217 	ldw	ra,8(sp)
10015484:	dc400117 	ldw	r17,4(sp)
10015488:	dc000017 	ldw	r16,0(sp)
1001548c:	dec00304 	addi	sp,sp,12
10015490:	f800283a 	ret
10015494:	00c002c4 	movi	r3,11
10015498:	1887c83a 	sub	r3,r3,r2
1001549c:	88c6d83a 	srl	r3,r17,r3
100154a0:	8904983a 	sll	r2,r17,r4
100154a4:	01000434 	movhi	r4,16
100154a8:	213fffc4 	addi	r4,r4,-1
100154ac:	2941ffcc 	andi	r5,r5,2047
100154b0:	1906703a 	and	r3,r3,r4
100154b4:	800d883a 	mov	r6,r16
100154b8:	003fe906 	br	10015460 <__alt_data_end+0xf8015460>
100154bc:	000d883a 	mov	r6,zero
100154c0:	000b883a 	mov	r5,zero
100154c4:	0007883a 	mov	r3,zero
100154c8:	0005883a 	mov	r2,zero
100154cc:	003fe406 	br	10015460 <__alt_data_end+0xf8015460>
100154d0:	0123c83a 	sub	r17,zero,r4
100154d4:	003fd106 	br	1001541c <__alt_data_end+0xf801541c>

100154d8 <__floatunsidf>:
100154d8:	defffe04 	addi	sp,sp,-8
100154dc:	dc000015 	stw	r16,0(sp)
100154e0:	dfc00115 	stw	ra,4(sp)
100154e4:	2021883a 	mov	r16,r4
100154e8:	20002226 	beq	r4,zero,10015574 <__floatunsidf+0x9c>
100154ec:	00059a40 	call	100059a4 <__clzsi2>
100154f0:	01010784 	movi	r4,1054
100154f4:	2089c83a 	sub	r4,r4,r2
100154f8:	01810cc4 	movi	r6,1075
100154fc:	310dc83a 	sub	r6,r6,r4
10015500:	00c007c4 	movi	r3,31
10015504:	1980120e 	bge	r3,r6,10015550 <__floatunsidf+0x78>
10015508:	00c104c4 	movi	r3,1043
1001550c:	1907c83a 	sub	r3,r3,r4
10015510:	80ca983a 	sll	r5,r16,r3
10015514:	00800434 	movhi	r2,16
10015518:	10bfffc4 	addi	r2,r2,-1
1001551c:	2101ffcc 	andi	r4,r4,2047
10015520:	0021883a 	mov	r16,zero
10015524:	288a703a 	and	r5,r5,r2
10015528:	2008953a 	slli	r4,r4,20
1001552c:	00c00434 	movhi	r3,16
10015530:	18ffffc4 	addi	r3,r3,-1
10015534:	28c6703a 	and	r3,r5,r3
10015538:	8005883a 	mov	r2,r16
1001553c:	1906b03a 	or	r3,r3,r4
10015540:	dfc00117 	ldw	ra,4(sp)
10015544:	dc000017 	ldw	r16,0(sp)
10015548:	dec00204 	addi	sp,sp,8
1001554c:	f800283a 	ret
10015550:	00c002c4 	movi	r3,11
10015554:	188bc83a 	sub	r5,r3,r2
10015558:	814ad83a 	srl	r5,r16,r5
1001555c:	00c00434 	movhi	r3,16
10015560:	18ffffc4 	addi	r3,r3,-1
10015564:	81a0983a 	sll	r16,r16,r6
10015568:	2101ffcc 	andi	r4,r4,2047
1001556c:	28ca703a 	and	r5,r5,r3
10015570:	003fed06 	br	10015528 <__alt_data_end+0xf8015528>
10015574:	0009883a 	mov	r4,zero
10015578:	000b883a 	mov	r5,zero
1001557c:	003fea06 	br	10015528 <__alt_data_end+0xf8015528>

10015580 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015580:	defffe04 	addi	sp,sp,-8
10015584:	dfc00115 	stw	ra,4(sp)
10015588:	df000015 	stw	fp,0(sp)
1001558c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015590:	008403b4 	movhi	r2,4110
10015594:	10a46404 	addi	r2,r2,-28272
10015598:	10800017 	ldw	r2,0(r2)
1001559c:	10000526 	beq	r2,zero,100155b4 <alt_get_errno+0x34>
100155a0:	008403b4 	movhi	r2,4110
100155a4:	10a46404 	addi	r2,r2,-28272
100155a8:	10800017 	ldw	r2,0(r2)
100155ac:	103ee83a 	callr	r2
100155b0:	00000206 	br	100155bc <alt_get_errno+0x3c>
100155b4:	008403b4 	movhi	r2,4110
100155b8:	108aa904 	addi	r2,r2,10916
}
100155bc:	e037883a 	mov	sp,fp
100155c0:	dfc00117 	ldw	ra,4(sp)
100155c4:	df000017 	ldw	fp,0(sp)
100155c8:	dec00204 	addi	sp,sp,8
100155cc:	f800283a 	ret

100155d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100155d0:	defffb04 	addi	sp,sp,-20
100155d4:	dfc00415 	stw	ra,16(sp)
100155d8:	df000315 	stw	fp,12(sp)
100155dc:	df000304 	addi	fp,sp,12
100155e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100155e4:	e0bfff17 	ldw	r2,-4(fp)
100155e8:	10000816 	blt	r2,zero,1001560c <close+0x3c>
100155ec:	01400304 	movi	r5,12
100155f0:	e13fff17 	ldw	r4,-4(fp)
100155f4:	0005a080 	call	10005a08 <__mulsi3>
100155f8:	1007883a 	mov	r3,r2
100155fc:	00840374 	movhi	r2,4109
10015600:	109fc804 	addi	r2,r2,32544
10015604:	1885883a 	add	r2,r3,r2
10015608:	00000106 	br	10015610 <close+0x40>
1001560c:	0005883a 	mov	r2,zero
10015610:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10015614:	e0bffd17 	ldw	r2,-12(fp)
10015618:	10001926 	beq	r2,zero,10015680 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1001561c:	e0bffd17 	ldw	r2,-12(fp)
10015620:	10800017 	ldw	r2,0(r2)
10015624:	10800417 	ldw	r2,16(r2)
10015628:	10000626 	beq	r2,zero,10015644 <close+0x74>
1001562c:	e0bffd17 	ldw	r2,-12(fp)
10015630:	10800017 	ldw	r2,0(r2)
10015634:	10800417 	ldw	r2,16(r2)
10015638:	e13ffd17 	ldw	r4,-12(fp)
1001563c:	103ee83a 	callr	r2
10015640:	00000106 	br	10015648 <close+0x78>
10015644:	0005883a 	mov	r2,zero
10015648:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1001564c:	e13fff17 	ldw	r4,-4(fp)
10015650:	0015f0c0 	call	10015f0c <alt_release_fd>
    if (rval < 0)
10015654:	e0bffe17 	ldw	r2,-8(fp)
10015658:	1000070e 	bge	r2,zero,10015678 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1001565c:	00155800 	call	10015580 <alt_get_errno>
10015660:	1007883a 	mov	r3,r2
10015664:	e0bffe17 	ldw	r2,-8(fp)
10015668:	0085c83a 	sub	r2,zero,r2
1001566c:	18800015 	stw	r2,0(r3)
      return -1;
10015670:	00bfffc4 	movi	r2,-1
10015674:	00000706 	br	10015694 <close+0xc4>
    }
    return 0;
10015678:	0005883a 	mov	r2,zero
1001567c:	00000506 	br	10015694 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015680:	00155800 	call	10015580 <alt_get_errno>
10015684:	1007883a 	mov	r3,r2
10015688:	00801444 	movi	r2,81
1001568c:	18800015 	stw	r2,0(r3)
    return -1;
10015690:	00bfffc4 	movi	r2,-1
  }
}
10015694:	e037883a 	mov	sp,fp
10015698:	dfc00117 	ldw	ra,4(sp)
1001569c:	df000017 	ldw	fp,0(sp)
100156a0:	dec00204 	addi	sp,sp,8
100156a4:	f800283a 	ret

100156a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100156a8:	defffc04 	addi	sp,sp,-16
100156ac:	df000315 	stw	fp,12(sp)
100156b0:	df000304 	addi	fp,sp,12
100156b4:	e13ffd15 	stw	r4,-12(fp)
100156b8:	e17ffe15 	stw	r5,-8(fp)
100156bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
100156c0:	e0bfff17 	ldw	r2,-4(fp)
}
100156c4:	e037883a 	mov	sp,fp
100156c8:	df000017 	ldw	fp,0(sp)
100156cc:	dec00104 	addi	sp,sp,4
100156d0:	f800283a 	ret

100156d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100156d4:	defffe04 	addi	sp,sp,-8
100156d8:	dfc00115 	stw	ra,4(sp)
100156dc:	df000015 	stw	fp,0(sp)
100156e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100156e4:	008403b4 	movhi	r2,4110
100156e8:	10a46404 	addi	r2,r2,-28272
100156ec:	10800017 	ldw	r2,0(r2)
100156f0:	10000526 	beq	r2,zero,10015708 <alt_get_errno+0x34>
100156f4:	008403b4 	movhi	r2,4110
100156f8:	10a46404 	addi	r2,r2,-28272
100156fc:	10800017 	ldw	r2,0(r2)
10015700:	103ee83a 	callr	r2
10015704:	00000206 	br	10015710 <alt_get_errno+0x3c>
10015708:	008403b4 	movhi	r2,4110
1001570c:	108aa904 	addi	r2,r2,10916
}
10015710:	e037883a 	mov	sp,fp
10015714:	dfc00117 	ldw	ra,4(sp)
10015718:	df000017 	ldw	fp,0(sp)
1001571c:	dec00204 	addi	sp,sp,8
10015720:	f800283a 	ret

10015724 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10015724:	defffb04 	addi	sp,sp,-20
10015728:	dfc00415 	stw	ra,16(sp)
1001572c:	df000315 	stw	fp,12(sp)
10015730:	df000304 	addi	fp,sp,12
10015734:	e13ffe15 	stw	r4,-8(fp)
10015738:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001573c:	e0bffe17 	ldw	r2,-8(fp)
10015740:	10000816 	blt	r2,zero,10015764 <fstat+0x40>
10015744:	01400304 	movi	r5,12
10015748:	e13ffe17 	ldw	r4,-8(fp)
1001574c:	0005a080 	call	10005a08 <__mulsi3>
10015750:	1007883a 	mov	r3,r2
10015754:	00840374 	movhi	r2,4109
10015758:	109fc804 	addi	r2,r2,32544
1001575c:	1885883a 	add	r2,r3,r2
10015760:	00000106 	br	10015768 <fstat+0x44>
10015764:	0005883a 	mov	r2,zero
10015768:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001576c:	e0bffd17 	ldw	r2,-12(fp)
10015770:	10001026 	beq	r2,zero,100157b4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10015774:	e0bffd17 	ldw	r2,-12(fp)
10015778:	10800017 	ldw	r2,0(r2)
1001577c:	10800817 	ldw	r2,32(r2)
10015780:	10000726 	beq	r2,zero,100157a0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10015784:	e0bffd17 	ldw	r2,-12(fp)
10015788:	10800017 	ldw	r2,0(r2)
1001578c:	10800817 	ldw	r2,32(r2)
10015790:	e17fff17 	ldw	r5,-4(fp)
10015794:	e13ffd17 	ldw	r4,-12(fp)
10015798:	103ee83a 	callr	r2
1001579c:	00000a06 	br	100157c8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100157a0:	e0bfff17 	ldw	r2,-4(fp)
100157a4:	00c80004 	movi	r3,8192
100157a8:	10c00115 	stw	r3,4(r2)
      return 0;
100157ac:	0005883a 	mov	r2,zero
100157b0:	00000506 	br	100157c8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100157b4:	00156d40 	call	100156d4 <alt_get_errno>
100157b8:	1007883a 	mov	r3,r2
100157bc:	00801444 	movi	r2,81
100157c0:	18800015 	stw	r2,0(r3)
    return -1;
100157c4:	00bfffc4 	movi	r2,-1
  }
}
100157c8:	e037883a 	mov	sp,fp
100157cc:	dfc00117 	ldw	ra,4(sp)
100157d0:	df000017 	ldw	fp,0(sp)
100157d4:	dec00204 	addi	sp,sp,8
100157d8:	f800283a 	ret

100157dc <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
100157dc:	defff404 	addi	sp,sp,-48
100157e0:	dfc00b15 	stw	ra,44(sp)
100157e4:	df000a15 	stw	fp,40(sp)
100157e8:	dd000915 	stw	r20,36(sp)
100157ec:	dcc00815 	stw	r19,32(sp)
100157f0:	dc800715 	stw	r18,28(sp)
100157f4:	dc400615 	stw	r17,24(sp)
100157f8:	dc000515 	stw	r16,20(sp)
100157fc:	df000a04 	addi	fp,sp,40
10015800:	e13ff915 	stw	r4,-28(fp)
10015804:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
10015808:	e0bffa17 	ldw	r2,-24(fp)
1001580c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10015810:	008403b4 	movhi	r2,4110
10015814:	108ab604 	addi	r2,r2,10968
10015818:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
1001581c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10015820:	008403b4 	movhi	r2,4110
10015824:	108ab504 	addi	r2,r2,10964
10015828:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
1001582c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
10015830:	e0bff817 	ldw	r2,-32(fp)
10015834:	10005f26 	beq	r2,zero,100159b4 <gettimeofday+0x1d8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
10015838:	d0866617 	ldw	r2,6552(gp)
1001583c:	1029883a 	mov	r20,r2
10015840:	e17ff817 	ldw	r5,-32(fp)
10015844:	e13ff717 	ldw	r4,-36(fp)
10015848:	00024900 	call	10002490 <__udivsi3>
1001584c:	a085883a 	add	r2,r20,r2
10015850:	1007883a 	mov	r3,r2
10015854:	e0bff917 	ldw	r2,-28(fp)
10015858:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
1001585c:	d0866717 	ldw	r2,6556(gp)
10015860:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
10015864:	e0bff717 	ldw	r2,-36(fp)
10015868:	1021883a 	mov	r16,r2
1001586c:	0023883a 	mov	r17,zero
10015870:	e17ff817 	ldw	r5,-32(fp)
10015874:	010003f4 	movhi	r4,15
10015878:	21109004 	addi	r4,r4,16960
1001587c:	00024900 	call	10002490 <__udivsi3>
10015880:	1025883a 	mov	r18,r2
10015884:	0027883a 	mov	r19,zero
10015888:	900d883a 	mov	r6,r18
1001588c:	980f883a 	mov	r7,r19
10015890:	8009883a 	mov	r4,r16
10015894:	880b883a 	mov	r5,r17
10015898:	00186200 	call	10018620 <__muldi3>
1001589c:	1009883a 	mov	r4,r2
100158a0:	180b883a 	mov	r5,r3
100158a4:	2005883a 	mov	r2,r4
100158a8:	2807883a 	mov	r3,r5
100158ac:	018003f4 	movhi	r6,15
100158b0:	31909004 	addi	r6,r6,16960
100158b4:	000f883a 	mov	r7,zero
100158b8:	1009883a 	mov	r4,r2
100158bc:	180b883a 	mov	r5,r3
100158c0:	00142840 	call	10014284 <__umoddi3>
100158c4:	1009883a 	mov	r4,r2
100158c8:	180b883a 	mov	r5,r3
100158cc:	2005883a 	mov	r2,r4
100158d0:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
100158d4:	a085883a 	add	r2,r20,r2
100158d8:	1007883a 	mov	r3,r2
100158dc:	e0bff917 	ldw	r2,-28(fp)
100158e0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
100158e4:	00001406 	br	10015938 <gettimeofday+0x15c>
      if (ptimeval->tv_sec <= 0)
100158e8:	e0bff917 	ldw	r2,-28(fp)
100158ec:	10800017 	ldw	r2,0(r2)
100158f0:	00800516 	blt	zero,r2,10015908 <gettimeofday+0x12c>
      {
          ptimeval->tv_sec = 0;
100158f4:	e0bff917 	ldw	r2,-28(fp)
100158f8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
100158fc:	e0bff917 	ldw	r2,-28(fp)
10015900:	10000115 	stw	zero,4(r2)
          break;
10015904:	00000f06 	br	10015944 <gettimeofday+0x168>
      }
      else
      {
          ptimeval->tv_sec--;
10015908:	e0bff917 	ldw	r2,-28(fp)
1001590c:	10800017 	ldw	r2,0(r2)
10015910:	10ffffc4 	addi	r3,r2,-1
10015914:	e0bff917 	ldw	r2,-28(fp)
10015918:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
1001591c:	e0bff917 	ldw	r2,-28(fp)
10015920:	10c00117 	ldw	r3,4(r2)
10015924:	008003f4 	movhi	r2,15
10015928:	10909004 	addi	r2,r2,16960
1001592c:	1887883a 	add	r3,r3,r2
10015930:	e0bff917 	ldw	r2,-28(fp)
10015934:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10015938:	e0bff917 	ldw	r2,-28(fp)
1001593c:	10800117 	ldw	r2,4(r2)
10015940:	103fe916 	blt	r2,zero,100158e8 <__alt_data_end+0xf80158e8>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10015944:	00000c06 	br	10015978 <gettimeofday+0x19c>
      ptimeval->tv_sec++;
10015948:	e0bff917 	ldw	r2,-28(fp)
1001594c:	10800017 	ldw	r2,0(r2)
10015950:	10c00044 	addi	r3,r2,1
10015954:	e0bff917 	ldw	r2,-28(fp)
10015958:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
1001595c:	e0bff917 	ldw	r2,-28(fp)
10015960:	10c00117 	ldw	r3,4(r2)
10015964:	00bffc74 	movhi	r2,65521
10015968:	10af7004 	addi	r2,r2,-16960
1001596c:	1887883a 	add	r3,r3,r2
10015970:	e0bff917 	ldw	r2,-28(fp)
10015974:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10015978:	e0bff917 	ldw	r2,-28(fp)
1001597c:	10c00117 	ldw	r3,4(r2)
10015980:	008003f4 	movhi	r2,15
10015984:	10908fc4 	addi	r2,r2,16959
10015988:	10ffef16 	blt	r2,r3,10015948 <__alt_data_end+0xf8015948>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
1001598c:	e0bff617 	ldw	r2,-40(fp)
10015990:	10000626 	beq	r2,zero,100159ac <gettimeofday+0x1d0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
10015994:	d0c66417 	ldw	r3,6544(gp)
10015998:	e0bff617 	ldw	r2,-40(fp)
1001599c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
100159a0:	d0c66517 	ldw	r3,6548(gp)
100159a4:	e0bff617 	ldw	r2,-40(fp)
100159a8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
100159ac:	0005883a 	mov	r2,zero
100159b0:	00000106 	br	100159b8 <gettimeofday+0x1dc>
  }

  return -ENOTSUP;
100159b4:	00bfde84 	movi	r2,-134
}
100159b8:	e6fffb04 	addi	sp,fp,-20
100159bc:	dfc00617 	ldw	ra,24(sp)
100159c0:	df000517 	ldw	fp,20(sp)
100159c4:	dd000417 	ldw	r20,16(sp)
100159c8:	dcc00317 	ldw	r19,12(sp)
100159cc:	dc800217 	ldw	r18,8(sp)
100159d0:	dc400117 	ldw	r17,4(sp)
100159d4:	dc000017 	ldw	r16,0(sp)
100159d8:	dec00704 	addi	sp,sp,28
100159dc:	f800283a 	ret

100159e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100159e0:	defffe04 	addi	sp,sp,-8
100159e4:	dfc00115 	stw	ra,4(sp)
100159e8:	df000015 	stw	fp,0(sp)
100159ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100159f0:	008403b4 	movhi	r2,4110
100159f4:	10a46404 	addi	r2,r2,-28272
100159f8:	10800017 	ldw	r2,0(r2)
100159fc:	10000526 	beq	r2,zero,10015a14 <alt_get_errno+0x34>
10015a00:	008403b4 	movhi	r2,4110
10015a04:	10a46404 	addi	r2,r2,-28272
10015a08:	10800017 	ldw	r2,0(r2)
10015a0c:	103ee83a 	callr	r2
10015a10:	00000206 	br	10015a1c <alt_get_errno+0x3c>
10015a14:	008403b4 	movhi	r2,4110
10015a18:	108aa904 	addi	r2,r2,10916
}
10015a1c:	e037883a 	mov	sp,fp
10015a20:	dfc00117 	ldw	ra,4(sp)
10015a24:	df000017 	ldw	fp,0(sp)
10015a28:	dec00204 	addi	sp,sp,8
10015a2c:	f800283a 	ret

10015a30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10015a30:	deffed04 	addi	sp,sp,-76
10015a34:	dfc01215 	stw	ra,72(sp)
10015a38:	df001115 	stw	fp,68(sp)
10015a3c:	df001104 	addi	fp,sp,68
10015a40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015a44:	e0bfff17 	ldw	r2,-4(fp)
10015a48:	10000816 	blt	r2,zero,10015a6c <isatty+0x3c>
10015a4c:	01400304 	movi	r5,12
10015a50:	e13fff17 	ldw	r4,-4(fp)
10015a54:	0005a080 	call	10005a08 <__mulsi3>
10015a58:	1007883a 	mov	r3,r2
10015a5c:	00840374 	movhi	r2,4109
10015a60:	109fc804 	addi	r2,r2,32544
10015a64:	1885883a 	add	r2,r3,r2
10015a68:	00000106 	br	10015a70 <isatty+0x40>
10015a6c:	0005883a 	mov	r2,zero
10015a70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10015a74:	e0bfef17 	ldw	r2,-68(fp)
10015a78:	10000e26 	beq	r2,zero,10015ab4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10015a7c:	e0bfef17 	ldw	r2,-68(fp)
10015a80:	10800017 	ldw	r2,0(r2)
10015a84:	10800817 	ldw	r2,32(r2)
10015a88:	1000021e 	bne	r2,zero,10015a94 <isatty+0x64>
    {
      return 1;
10015a8c:	00800044 	movi	r2,1
10015a90:	00000d06 	br	10015ac8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10015a94:	e0bff004 	addi	r2,fp,-64
10015a98:	100b883a 	mov	r5,r2
10015a9c:	e13fff17 	ldw	r4,-4(fp)
10015aa0:	00157240 	call	10015724 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10015aa4:	e0bff117 	ldw	r2,-60(fp)
10015aa8:	10880020 	cmpeqi	r2,r2,8192
10015aac:	10803fcc 	andi	r2,r2,255
10015ab0:	00000506 	br	10015ac8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015ab4:	00159e00 	call	100159e0 <alt_get_errno>
10015ab8:	1007883a 	mov	r3,r2
10015abc:	00801444 	movi	r2,81
10015ac0:	18800015 	stw	r2,0(r3)
    return 0;
10015ac4:	0005883a 	mov	r2,zero
  }
}
10015ac8:	e037883a 	mov	sp,fp
10015acc:	dfc00117 	ldw	ra,4(sp)
10015ad0:	df000017 	ldw	fp,0(sp)
10015ad4:	dec00204 	addi	sp,sp,8
10015ad8:	f800283a 	ret

10015adc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10015adc:	defffc04 	addi	sp,sp,-16
10015ae0:	df000315 	stw	fp,12(sp)
10015ae4:	df000304 	addi	fp,sp,12
10015ae8:	e13ffd15 	stw	r4,-12(fp)
10015aec:	e17ffe15 	stw	r5,-8(fp)
10015af0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10015af4:	e0fffe17 	ldw	r3,-8(fp)
10015af8:	e0bffd17 	ldw	r2,-12(fp)
10015afc:	18800c26 	beq	r3,r2,10015b30 <alt_load_section+0x54>
  {
    while( to != end )
10015b00:	00000806 	br	10015b24 <alt_load_section+0x48>
    {
      *to++ = *from++;
10015b04:	e0bffe17 	ldw	r2,-8(fp)
10015b08:	10c00104 	addi	r3,r2,4
10015b0c:	e0fffe15 	stw	r3,-8(fp)
10015b10:	e0fffd17 	ldw	r3,-12(fp)
10015b14:	19000104 	addi	r4,r3,4
10015b18:	e13ffd15 	stw	r4,-12(fp)
10015b1c:	18c00017 	ldw	r3,0(r3)
10015b20:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10015b24:	e0fffe17 	ldw	r3,-8(fp)
10015b28:	e0bfff17 	ldw	r2,-4(fp)
10015b2c:	18bff51e 	bne	r3,r2,10015b04 <__alt_data_end+0xf8015b04>
    {
      *to++ = *from++;
    }
  }
}
10015b30:	0001883a 	nop
10015b34:	e037883a 	mov	sp,fp
10015b38:	df000017 	ldw	fp,0(sp)
10015b3c:	dec00104 	addi	sp,sp,4
10015b40:	f800283a 	ret

10015b44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10015b44:	defffe04 	addi	sp,sp,-8
10015b48:	dfc00115 	stw	ra,4(sp)
10015b4c:	df000015 	stw	fp,0(sp)
10015b50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10015b54:	018403b4 	movhi	r6,4110
10015b58:	31a47b04 	addi	r6,r6,-28180
10015b5c:	01440374 	movhi	r5,4109
10015b60:	297e5504 	addi	r5,r5,-1708
10015b64:	010403b4 	movhi	r4,4110
10015b68:	21247b04 	addi	r4,r4,-28180
10015b6c:	0015adc0 	call	10015adc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10015b70:	01840034 	movhi	r6,4096
10015b74:	31808c04 	addi	r6,r6,560
10015b78:	01440034 	movhi	r5,4096
10015b7c:	29400804 	addi	r5,r5,32
10015b80:	01040034 	movhi	r4,4096
10015b84:	21000804 	addi	r4,r4,32
10015b88:	0015adc0 	call	10015adc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10015b8c:	01840374 	movhi	r6,4109
10015b90:	31be5504 	addi	r6,r6,-1708
10015b94:	014400b4 	movhi	r5,4098
10015b98:	2961d804 	addi	r5,r5,-30880
10015b9c:	010400b4 	movhi	r4,4098
10015ba0:	2121d804 	addi	r4,r4,-30880
10015ba4:	0015adc0 	call	10015adc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10015ba8:	00174380 	call	10017438 <alt_dcache_flush_all>
  alt_icache_flush_all();
10015bac:	00176900 	call	10017690 <alt_icache_flush_all>
}
10015bb0:	0001883a 	nop
10015bb4:	e037883a 	mov	sp,fp
10015bb8:	dfc00117 	ldw	ra,4(sp)
10015bbc:	df000017 	ldw	fp,0(sp)
10015bc0:	dec00204 	addi	sp,sp,8
10015bc4:	f800283a 	ret

10015bc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015bc8:	defffe04 	addi	sp,sp,-8
10015bcc:	dfc00115 	stw	ra,4(sp)
10015bd0:	df000015 	stw	fp,0(sp)
10015bd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015bd8:	008403b4 	movhi	r2,4110
10015bdc:	10a46404 	addi	r2,r2,-28272
10015be0:	10800017 	ldw	r2,0(r2)
10015be4:	10000526 	beq	r2,zero,10015bfc <alt_get_errno+0x34>
10015be8:	008403b4 	movhi	r2,4110
10015bec:	10a46404 	addi	r2,r2,-28272
10015bf0:	10800017 	ldw	r2,0(r2)
10015bf4:	103ee83a 	callr	r2
10015bf8:	00000206 	br	10015c04 <alt_get_errno+0x3c>
10015bfc:	008403b4 	movhi	r2,4110
10015c00:	108aa904 	addi	r2,r2,10916
}
10015c04:	e037883a 	mov	sp,fp
10015c08:	dfc00117 	ldw	ra,4(sp)
10015c0c:	df000017 	ldw	fp,0(sp)
10015c10:	dec00204 	addi	sp,sp,8
10015c14:	f800283a 	ret

10015c18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10015c18:	defff904 	addi	sp,sp,-28
10015c1c:	dfc00615 	stw	ra,24(sp)
10015c20:	df000515 	stw	fp,20(sp)
10015c24:	df000504 	addi	fp,sp,20
10015c28:	e13ffd15 	stw	r4,-12(fp)
10015c2c:	e17ffe15 	stw	r5,-8(fp)
10015c30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10015c34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015c38:	e0bffd17 	ldw	r2,-12(fp)
10015c3c:	10000816 	blt	r2,zero,10015c60 <lseek+0x48>
10015c40:	01400304 	movi	r5,12
10015c44:	e13ffd17 	ldw	r4,-12(fp)
10015c48:	0005a080 	call	10005a08 <__mulsi3>
10015c4c:	1007883a 	mov	r3,r2
10015c50:	00840374 	movhi	r2,4109
10015c54:	109fc804 	addi	r2,r2,32544
10015c58:	1885883a 	add	r2,r3,r2
10015c5c:	00000106 	br	10015c64 <lseek+0x4c>
10015c60:	0005883a 	mov	r2,zero
10015c64:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10015c68:	e0bffc17 	ldw	r2,-16(fp)
10015c6c:	10001026 	beq	r2,zero,10015cb0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10015c70:	e0bffc17 	ldw	r2,-16(fp)
10015c74:	10800017 	ldw	r2,0(r2)
10015c78:	10800717 	ldw	r2,28(r2)
10015c7c:	10000926 	beq	r2,zero,10015ca4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10015c80:	e0bffc17 	ldw	r2,-16(fp)
10015c84:	10800017 	ldw	r2,0(r2)
10015c88:	10800717 	ldw	r2,28(r2)
10015c8c:	e1bfff17 	ldw	r6,-4(fp)
10015c90:	e17ffe17 	ldw	r5,-8(fp)
10015c94:	e13ffc17 	ldw	r4,-16(fp)
10015c98:	103ee83a 	callr	r2
10015c9c:	e0bffb15 	stw	r2,-20(fp)
10015ca0:	00000506 	br	10015cb8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10015ca4:	00bfde84 	movi	r2,-134
10015ca8:	e0bffb15 	stw	r2,-20(fp)
10015cac:	00000206 	br	10015cb8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10015cb0:	00bfebc4 	movi	r2,-81
10015cb4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10015cb8:	e0bffb17 	ldw	r2,-20(fp)
10015cbc:	1000070e 	bge	r2,zero,10015cdc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10015cc0:	0015bc80 	call	10015bc8 <alt_get_errno>
10015cc4:	1007883a 	mov	r3,r2
10015cc8:	e0bffb17 	ldw	r2,-20(fp)
10015ccc:	0085c83a 	sub	r2,zero,r2
10015cd0:	18800015 	stw	r2,0(r3)
    rc = -1;
10015cd4:	00bfffc4 	movi	r2,-1
10015cd8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10015cdc:	e0bffb17 	ldw	r2,-20(fp)
}
10015ce0:	e037883a 	mov	sp,fp
10015ce4:	dfc00117 	ldw	ra,4(sp)
10015ce8:	df000017 	ldw	fp,0(sp)
10015cec:	dec00204 	addi	sp,sp,8
10015cf0:	f800283a 	ret

10015cf4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10015cf4:	defffd04 	addi	sp,sp,-12
10015cf8:	dfc00215 	stw	ra,8(sp)
10015cfc:	df000115 	stw	fp,4(sp)
10015d00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10015d04:	0009883a 	mov	r4,zero
10015d08:	001636c0 	call	1001636c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10015d0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10015d10:	00163a40 	call	100163a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10015d14:	01840374 	movhi	r6,4109
10015d18:	31be4804 	addi	r6,r6,-1760
10015d1c:	01440374 	movhi	r5,4109
10015d20:	297e4804 	addi	r5,r5,-1760
10015d24:	01040374 	movhi	r4,4109
10015d28:	213e4804 	addi	r4,r4,-1760
10015d2c:	0017a640 	call	10017a64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10015d30:	001754c0 	call	1001754c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10015d34:	01040074 	movhi	r4,4097
10015d38:	211d6b04 	addi	r4,r4,30124
10015d3c:	00180bc0 	call	100180bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10015d40:	d0866817 	ldw	r2,6560(gp)
10015d44:	d0c66917 	ldw	r3,6564(gp)
10015d48:	d1066a17 	ldw	r4,6568(gp)
10015d4c:	200d883a 	mov	r6,r4
10015d50:	180b883a 	mov	r5,r3
10015d54:	1009883a 	mov	r4,r2
10015d58:	000076c0 	call	1000076c <main>
10015d5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10015d60:	01000044 	movi	r4,1
10015d64:	00155d00 	call	100155d0 <close>
  exit (result);
10015d68:	e13fff17 	ldw	r4,-4(fp)
10015d6c:	00180f80 	call	100180f8 <exit>

10015d70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10015d70:	defffe04 	addi	sp,sp,-8
10015d74:	df000115 	stw	fp,4(sp)
10015d78:	df000104 	addi	fp,sp,4
10015d7c:	e13fff15 	stw	r4,-4(fp)
}
10015d80:	0001883a 	nop
10015d84:	e037883a 	mov	sp,fp
10015d88:	df000017 	ldw	fp,0(sp)
10015d8c:	dec00104 	addi	sp,sp,4
10015d90:	f800283a 	ret

10015d94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10015d94:	defffe04 	addi	sp,sp,-8
10015d98:	df000115 	stw	fp,4(sp)
10015d9c:	df000104 	addi	fp,sp,4
10015da0:	e13fff15 	stw	r4,-4(fp)
}
10015da4:	0001883a 	nop
10015da8:	e037883a 	mov	sp,fp
10015dac:	df000017 	ldw	fp,0(sp)
10015db0:	dec00104 	addi	sp,sp,4
10015db4:	f800283a 	ret

10015db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015db8:	defffe04 	addi	sp,sp,-8
10015dbc:	dfc00115 	stw	ra,4(sp)
10015dc0:	df000015 	stw	fp,0(sp)
10015dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015dc8:	008403b4 	movhi	r2,4110
10015dcc:	10a46404 	addi	r2,r2,-28272
10015dd0:	10800017 	ldw	r2,0(r2)
10015dd4:	10000526 	beq	r2,zero,10015dec <alt_get_errno+0x34>
10015dd8:	008403b4 	movhi	r2,4110
10015ddc:	10a46404 	addi	r2,r2,-28272
10015de0:	10800017 	ldw	r2,0(r2)
10015de4:	103ee83a 	callr	r2
10015de8:	00000206 	br	10015df4 <alt_get_errno+0x3c>
10015dec:	008403b4 	movhi	r2,4110
10015df0:	108aa904 	addi	r2,r2,10916
}
10015df4:	e037883a 	mov	sp,fp
10015df8:	dfc00117 	ldw	ra,4(sp)
10015dfc:	df000017 	ldw	fp,0(sp)
10015e00:	dec00204 	addi	sp,sp,8
10015e04:	f800283a 	ret

10015e08 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10015e08:	defff904 	addi	sp,sp,-28
10015e0c:	dfc00615 	stw	ra,24(sp)
10015e10:	df000515 	stw	fp,20(sp)
10015e14:	df000504 	addi	fp,sp,20
10015e18:	e13ffd15 	stw	r4,-12(fp)
10015e1c:	e17ffe15 	stw	r5,-8(fp)
10015e20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015e24:	e0bffd17 	ldw	r2,-12(fp)
10015e28:	10000816 	blt	r2,zero,10015e4c <read+0x44>
10015e2c:	01400304 	movi	r5,12
10015e30:	e13ffd17 	ldw	r4,-12(fp)
10015e34:	0005a080 	call	10005a08 <__mulsi3>
10015e38:	1007883a 	mov	r3,r2
10015e3c:	00840374 	movhi	r2,4109
10015e40:	109fc804 	addi	r2,r2,32544
10015e44:	1885883a 	add	r2,r3,r2
10015e48:	00000106 	br	10015e50 <read+0x48>
10015e4c:	0005883a 	mov	r2,zero
10015e50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10015e54:	e0bffb17 	ldw	r2,-20(fp)
10015e58:	10002226 	beq	r2,zero,10015ee4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10015e5c:	e0bffb17 	ldw	r2,-20(fp)
10015e60:	10800217 	ldw	r2,8(r2)
10015e64:	108000cc 	andi	r2,r2,3
10015e68:	10800060 	cmpeqi	r2,r2,1
10015e6c:	1000181e 	bne	r2,zero,10015ed0 <read+0xc8>
        (fd->dev->read))
10015e70:	e0bffb17 	ldw	r2,-20(fp)
10015e74:	10800017 	ldw	r2,0(r2)
10015e78:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
10015e7c:	10001426 	beq	r2,zero,10015ed0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10015e80:	e0bffb17 	ldw	r2,-20(fp)
10015e84:	10800017 	ldw	r2,0(r2)
10015e88:	10800517 	ldw	r2,20(r2)
10015e8c:	e0ffff17 	ldw	r3,-4(fp)
10015e90:	180d883a 	mov	r6,r3
10015e94:	e17ffe17 	ldw	r5,-8(fp)
10015e98:	e13ffb17 	ldw	r4,-20(fp)
10015e9c:	103ee83a 	callr	r2
10015ea0:	e0bffc15 	stw	r2,-16(fp)
10015ea4:	e0bffc17 	ldw	r2,-16(fp)
10015ea8:	1000070e 	bge	r2,zero,10015ec8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
10015eac:	0015db80 	call	10015db8 <alt_get_errno>
10015eb0:	1007883a 	mov	r3,r2
10015eb4:	e0bffc17 	ldw	r2,-16(fp)
10015eb8:	0085c83a 	sub	r2,zero,r2
10015ebc:	18800015 	stw	r2,0(r3)
          return -1;
10015ec0:	00bfffc4 	movi	r2,-1
10015ec4:	00000c06 	br	10015ef8 <read+0xf0>
        }
        return rval;
10015ec8:	e0bffc17 	ldw	r2,-16(fp)
10015ecc:	00000a06 	br	10015ef8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
10015ed0:	0015db80 	call	10015db8 <alt_get_errno>
10015ed4:	1007883a 	mov	r3,r2
10015ed8:	00800344 	movi	r2,13
10015edc:	18800015 	stw	r2,0(r3)
10015ee0:	00000406 	br	10015ef4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
10015ee4:	0015db80 	call	10015db8 <alt_get_errno>
10015ee8:	1007883a 	mov	r3,r2
10015eec:	00801444 	movi	r2,81
10015ef0:	18800015 	stw	r2,0(r3)
  }
  return -1;
10015ef4:	00bfffc4 	movi	r2,-1
}
10015ef8:	e037883a 	mov	sp,fp
10015efc:	dfc00117 	ldw	ra,4(sp)
10015f00:	df000017 	ldw	fp,0(sp)
10015f04:	dec00204 	addi	sp,sp,8
10015f08:	f800283a 	ret

10015f0c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
10015f0c:	defffc04 	addi	sp,sp,-16
10015f10:	dfc00315 	stw	ra,12(sp)
10015f14:	df000215 	stw	fp,8(sp)
10015f18:	dc000115 	stw	r16,4(sp)
10015f1c:	df000204 	addi	fp,sp,8
10015f20:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10015f24:	e0bffe17 	ldw	r2,-8(fp)
10015f28:	108000d0 	cmplti	r2,r2,3
10015f2c:	1000111e 	bne	r2,zero,10015f74 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10015f30:	04040374 	movhi	r16,4109
10015f34:	841fc804 	addi	r16,r16,32544
10015f38:	e0bffe17 	ldw	r2,-8(fp)
10015f3c:	01400304 	movi	r5,12
10015f40:	1009883a 	mov	r4,r2
10015f44:	0005a080 	call	10005a08 <__mulsi3>
10015f48:	8085883a 	add	r2,r16,r2
10015f4c:	10800204 	addi	r2,r2,8
10015f50:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10015f54:	04040374 	movhi	r16,4109
10015f58:	841fc804 	addi	r16,r16,32544
10015f5c:	e0bffe17 	ldw	r2,-8(fp)
10015f60:	01400304 	movi	r5,12
10015f64:	1009883a 	mov	r4,r2
10015f68:	0005a080 	call	10005a08 <__mulsi3>
10015f6c:	8085883a 	add	r2,r16,r2
10015f70:	10000015 	stw	zero,0(r2)
  }
}
10015f74:	0001883a 	nop
10015f78:	e6ffff04 	addi	sp,fp,-4
10015f7c:	dfc00217 	ldw	ra,8(sp)
10015f80:	df000117 	ldw	fp,4(sp)
10015f84:	dc000017 	ldw	r16,0(sp)
10015f88:	dec00304 	addi	sp,sp,12
10015f8c:	f800283a 	ret

10015f90 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10015f90:	defff904 	addi	sp,sp,-28
10015f94:	df000615 	stw	fp,24(sp)
10015f98:	df000604 	addi	fp,sp,24
10015f9c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10015fa0:	0005303a 	rdctl	r2,status
10015fa4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10015fa8:	e0fffe17 	ldw	r3,-8(fp)
10015fac:	00bfff84 	movi	r2,-2
10015fb0:	1884703a 	and	r2,r3,r2
10015fb4:	1001703a 	wrctl	status,r2
  
  return context;
10015fb8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
10015fbc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
10015fc0:	d0a01b17 	ldw	r2,-32660(gp)
10015fc4:	10c000c4 	addi	r3,r2,3
10015fc8:	00bfff04 	movi	r2,-4
10015fcc:	1884703a 	and	r2,r3,r2
10015fd0:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
10015fd4:	d0e01b17 	ldw	r3,-32660(gp)
10015fd8:	e0bfff17 	ldw	r2,-4(fp)
10015fdc:	1887883a 	add	r3,r3,r2
10015fe0:	00860034 	movhi	r2,6144
10015fe4:	10800004 	addi	r2,r2,0
10015fe8:	10c0062e 	bgeu	r2,r3,10016004 <sbrk+0x74>
10015fec:	e0bffb17 	ldw	r2,-20(fp)
10015ff0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10015ff4:	e0bffa17 	ldw	r2,-24(fp)
10015ff8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
10015ffc:	00bfffc4 	movi	r2,-1
10016000:	00000b06 	br	10016030 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10016004:	d0a01b17 	ldw	r2,-32660(gp)
10016008:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001600c:	d0e01b17 	ldw	r3,-32660(gp)
10016010:	e0bfff17 	ldw	r2,-4(fp)
10016014:	1885883a 	add	r2,r3,r2
10016018:	d0a01b15 	stw	r2,-32660(gp)
1001601c:	e0bffb17 	ldw	r2,-20(fp)
10016020:	e0bffc15 	stw	r2,-16(fp)
10016024:	e0bffc17 	ldw	r2,-16(fp)
10016028:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001602c:	e0bffd17 	ldw	r2,-12(fp)
} 
10016030:	e037883a 	mov	sp,fp
10016034:	df000017 	ldw	fp,0(sp)
10016038:	dec00104 	addi	sp,sp,4
1001603c:	f800283a 	ret

10016040 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10016040:	defffa04 	addi	sp,sp,-24
10016044:	df000515 	stw	fp,20(sp)
10016048:	df000504 	addi	fp,sp,20
1001604c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016050:	0005303a 	rdctl	r2,status
10016054:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016058:	e0fffc17 	ldw	r3,-16(fp)
1001605c:	00bfff84 	movi	r2,-2
10016060:	1884703a 	and	r2,r3,r2
10016064:	1001703a 	wrctl	status,r2
  
  return context;
10016068:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001606c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10016070:	e0bfff17 	ldw	r2,-4(fp)
10016074:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10016078:	e0bffd17 	ldw	r2,-12(fp)
1001607c:	10800017 	ldw	r2,0(r2)
10016080:	e0fffd17 	ldw	r3,-12(fp)
10016084:	18c00117 	ldw	r3,4(r3)
10016088:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001608c:	e0bffd17 	ldw	r2,-12(fp)
10016090:	10800117 	ldw	r2,4(r2)
10016094:	e0fffd17 	ldw	r3,-12(fp)
10016098:	18c00017 	ldw	r3,0(r3)
1001609c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100160a0:	e0bffd17 	ldw	r2,-12(fp)
100160a4:	e0fffd17 	ldw	r3,-12(fp)
100160a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100160ac:	e0bffd17 	ldw	r2,-12(fp)
100160b0:	e0fffd17 	ldw	r3,-12(fp)
100160b4:	10c00015 	stw	r3,0(r2)
100160b8:	e0bffb17 	ldw	r2,-20(fp)
100160bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100160c0:	e0bffe17 	ldw	r2,-8(fp)
100160c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100160c8:	0001883a 	nop
100160cc:	e037883a 	mov	sp,fp
100160d0:	df000017 	ldw	fp,0(sp)
100160d4:	dec00104 	addi	sp,sp,4
100160d8:	f800283a 	ret

100160dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100160dc:	defffb04 	addi	sp,sp,-20
100160e0:	dfc00415 	stw	ra,16(sp)
100160e4:	df000315 	stw	fp,12(sp)
100160e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100160ec:	d0a01c17 	ldw	r2,-32656(gp)
100160f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100160f4:	d0866c17 	ldw	r2,6576(gp)
100160f8:	10800044 	addi	r2,r2,1
100160fc:	d0866c15 	stw	r2,6576(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10016100:	00002e06 	br	100161bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10016104:	e0bffd17 	ldw	r2,-12(fp)
10016108:	10800017 	ldw	r2,0(r2)
1001610c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10016110:	e0bffd17 	ldw	r2,-12(fp)
10016114:	10800403 	ldbu	r2,16(r2)
10016118:	10803fcc 	andi	r2,r2,255
1001611c:	10000426 	beq	r2,zero,10016130 <alt_tick+0x54>
10016120:	d0866c17 	ldw	r2,6576(gp)
10016124:	1000021e 	bne	r2,zero,10016130 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10016128:	e0bffd17 	ldw	r2,-12(fp)
1001612c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10016130:	e0bffd17 	ldw	r2,-12(fp)
10016134:	10800217 	ldw	r2,8(r2)
10016138:	d0c66c17 	ldw	r3,6576(gp)
1001613c:	18801d36 	bltu	r3,r2,100161b4 <alt_tick+0xd8>
10016140:	e0bffd17 	ldw	r2,-12(fp)
10016144:	10800403 	ldbu	r2,16(r2)
10016148:	10803fcc 	andi	r2,r2,255
1001614c:	1000191e 	bne	r2,zero,100161b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10016150:	e0bffd17 	ldw	r2,-12(fp)
10016154:	10800317 	ldw	r2,12(r2)
10016158:	e0fffd17 	ldw	r3,-12(fp)
1001615c:	18c00517 	ldw	r3,20(r3)
10016160:	1809883a 	mov	r4,r3
10016164:	103ee83a 	callr	r2
10016168:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001616c:	e0bfff17 	ldw	r2,-4(fp)
10016170:	1000031e 	bne	r2,zero,10016180 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10016174:	e13ffd17 	ldw	r4,-12(fp)
10016178:	00160400 	call	10016040 <alt_alarm_stop>
1001617c:	00000d06 	br	100161b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10016180:	e0bffd17 	ldw	r2,-12(fp)
10016184:	10c00217 	ldw	r3,8(r2)
10016188:	e0bfff17 	ldw	r2,-4(fp)
1001618c:	1887883a 	add	r3,r3,r2
10016190:	e0bffd17 	ldw	r2,-12(fp)
10016194:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10016198:	e0bffd17 	ldw	r2,-12(fp)
1001619c:	10c00217 	ldw	r3,8(r2)
100161a0:	d0866c17 	ldw	r2,6576(gp)
100161a4:	1880032e 	bgeu	r3,r2,100161b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100161a8:	e0bffd17 	ldw	r2,-12(fp)
100161ac:	00c00044 	movi	r3,1
100161b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100161b4:	e0bffe17 	ldw	r2,-8(fp)
100161b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100161bc:	e0fffd17 	ldw	r3,-12(fp)
100161c0:	d0a01c04 	addi	r2,gp,-32656
100161c4:	18bfcf1e 	bne	r3,r2,10016104 <__alt_data_end+0xf8016104>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100161c8:	0001883a 	nop
}
100161cc:	0001883a 	nop
100161d0:	e037883a 	mov	sp,fp
100161d4:	dfc00117 	ldw	ra,4(sp)
100161d8:	df000017 	ldw	fp,0(sp)
100161dc:	dec00204 	addi	sp,sp,8
100161e0:	f800283a 	ret

100161e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100161e4:	defffe04 	addi	sp,sp,-8
100161e8:	dfc00115 	stw	ra,4(sp)
100161ec:	df000015 	stw	fp,0(sp)
100161f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100161f4:	008403b4 	movhi	r2,4110
100161f8:	10a46404 	addi	r2,r2,-28272
100161fc:	10800017 	ldw	r2,0(r2)
10016200:	10000526 	beq	r2,zero,10016218 <alt_get_errno+0x34>
10016204:	008403b4 	movhi	r2,4110
10016208:	10a46404 	addi	r2,r2,-28272
1001620c:	10800017 	ldw	r2,0(r2)
10016210:	103ee83a 	callr	r2
10016214:	00000206 	br	10016220 <alt_get_errno+0x3c>
10016218:	008403b4 	movhi	r2,4110
1001621c:	108aa904 	addi	r2,r2,10916
}
10016220:	e037883a 	mov	sp,fp
10016224:	dfc00117 	ldw	ra,4(sp)
10016228:	df000017 	ldw	fp,0(sp)
1001622c:	dec00204 	addi	sp,sp,8
10016230:	f800283a 	ret

10016234 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10016234:	defff904 	addi	sp,sp,-28
10016238:	dfc00615 	stw	ra,24(sp)
1001623c:	df000515 	stw	fp,20(sp)
10016240:	df000504 	addi	fp,sp,20
10016244:	e13ffd15 	stw	r4,-12(fp)
10016248:	e17ffe15 	stw	r5,-8(fp)
1001624c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016250:	e0bffd17 	ldw	r2,-12(fp)
10016254:	10000816 	blt	r2,zero,10016278 <write+0x44>
10016258:	01400304 	movi	r5,12
1001625c:	e13ffd17 	ldw	r4,-12(fp)
10016260:	0005a080 	call	10005a08 <__mulsi3>
10016264:	1007883a 	mov	r3,r2
10016268:	00840374 	movhi	r2,4109
1001626c:	109fc804 	addi	r2,r2,32544
10016270:	1885883a 	add	r2,r3,r2
10016274:	00000106 	br	1001627c <write+0x48>
10016278:	0005883a 	mov	r2,zero
1001627c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10016280:	e0bffb17 	ldw	r2,-20(fp)
10016284:	10002126 	beq	r2,zero,1001630c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10016288:	e0bffb17 	ldw	r2,-20(fp)
1001628c:	10800217 	ldw	r2,8(r2)
10016290:	108000cc 	andi	r2,r2,3
10016294:	10001826 	beq	r2,zero,100162f8 <write+0xc4>
10016298:	e0bffb17 	ldw	r2,-20(fp)
1001629c:	10800017 	ldw	r2,0(r2)
100162a0:	10800617 	ldw	r2,24(r2)
100162a4:	10001426 	beq	r2,zero,100162f8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100162a8:	e0bffb17 	ldw	r2,-20(fp)
100162ac:	10800017 	ldw	r2,0(r2)
100162b0:	10800617 	ldw	r2,24(r2)
100162b4:	e0ffff17 	ldw	r3,-4(fp)
100162b8:	180d883a 	mov	r6,r3
100162bc:	e17ffe17 	ldw	r5,-8(fp)
100162c0:	e13ffb17 	ldw	r4,-20(fp)
100162c4:	103ee83a 	callr	r2
100162c8:	e0bffc15 	stw	r2,-16(fp)
100162cc:	e0bffc17 	ldw	r2,-16(fp)
100162d0:	1000070e 	bge	r2,zero,100162f0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100162d4:	00161e40 	call	100161e4 <alt_get_errno>
100162d8:	1007883a 	mov	r3,r2
100162dc:	e0bffc17 	ldw	r2,-16(fp)
100162e0:	0085c83a 	sub	r2,zero,r2
100162e4:	18800015 	stw	r2,0(r3)
        return -1;
100162e8:	00bfffc4 	movi	r2,-1
100162ec:	00000c06 	br	10016320 <write+0xec>
      }
      return rval;
100162f0:	e0bffc17 	ldw	r2,-16(fp)
100162f4:	00000a06 	br	10016320 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100162f8:	00161e40 	call	100161e4 <alt_get_errno>
100162fc:	1007883a 	mov	r3,r2
10016300:	00800344 	movi	r2,13
10016304:	18800015 	stw	r2,0(r3)
10016308:	00000406 	br	1001631c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001630c:	00161e40 	call	100161e4 <alt_get_errno>
10016310:	1007883a 	mov	r3,r2
10016314:	00801444 	movi	r2,81
10016318:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001631c:	00bfffc4 	movi	r2,-1
}
10016320:	e037883a 	mov	sp,fp
10016324:	dfc00117 	ldw	ra,4(sp)
10016328:	df000017 	ldw	fp,0(sp)
1001632c:	dec00204 	addi	sp,sp,8
10016330:	f800283a 	ret

10016334 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10016334:	defffd04 	addi	sp,sp,-12
10016338:	dfc00215 	stw	ra,8(sp)
1001633c:	df000115 	stw	fp,4(sp)
10016340:	df000104 	addi	fp,sp,4
10016344:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10016348:	014403b4 	movhi	r5,4110
1001634c:	29646104 	addi	r5,r5,-28284
10016350:	e13fff17 	ldw	r4,-4(fp)
10016354:	00174a80 	call	100174a8 <alt_dev_llist_insert>
}
10016358:	e037883a 	mov	sp,fp
1001635c:	dfc00117 	ldw	ra,4(sp)
10016360:	df000017 	ldw	fp,0(sp)
10016364:	dec00204 	addi	sp,sp,8
10016368:	f800283a 	ret

1001636c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001636c:	defffd04 	addi	sp,sp,-12
10016370:	dfc00215 	stw	ra,8(sp)
10016374:	df000115 	stw	fp,4(sp)
10016378:	df000104 	addi	fp,sp,4
1001637c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10016380:	0017d840 	call	10017d84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10016384:	00800044 	movi	r2,1
10016388:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1001638c:	0001883a 	nop
10016390:	e037883a 	mov	sp,fp
10016394:	dfc00117 	ldw	ra,4(sp)
10016398:	df000017 	ldw	fp,0(sp)
1001639c:	dec00204 	addi	sp,sp,8
100163a0:	f800283a 	ret

100163a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100163a4:	defffe04 	addi	sp,sp,-8
100163a8:	dfc00115 	stw	ra,4(sp)
100163ac:	df000015 	stw	fp,0(sp)
100163b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100163b4:	01800144 	movi	r6,5
100163b8:	000b883a 	mov	r5,zero
100163bc:	010403b4 	movhi	r4,4110
100163c0:	21203204 	addi	r4,r4,-32568
100163c4:	00165600 	call	10016560 <altera_avalon_jtag_uart_init>
100163c8:	010403b4 	movhi	r4,4110
100163cc:	21202804 	addi	r4,r4,-32608
100163d0:	00163340 	call	10016334 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100163d4:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
100163d8:	010403b4 	movhi	r4,4110
100163dc:	21244004 	addi	r4,r4,-28416
100163e0:	001760c0 	call	1001760c <alt_fs_reg>
}
100163e4:	0001883a 	nop
100163e8:	e037883a 	mov	sp,fp
100163ec:	dfc00117 	ldw	ra,4(sp)
100163f0:	df000017 	ldw	fp,0(sp)
100163f4:	dec00204 	addi	sp,sp,8
100163f8:	f800283a 	ret

100163fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100163fc:	defffa04 	addi	sp,sp,-24
10016400:	dfc00515 	stw	ra,20(sp)
10016404:	df000415 	stw	fp,16(sp)
10016408:	df000404 	addi	fp,sp,16
1001640c:	e13ffd15 	stw	r4,-12(fp)
10016410:	e17ffe15 	stw	r5,-8(fp)
10016414:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016418:	e0bffd17 	ldw	r2,-12(fp)
1001641c:	10800017 	ldw	r2,0(r2)
10016420:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10016424:	e0bffc17 	ldw	r2,-16(fp)
10016428:	10c00a04 	addi	r3,r2,40
1001642c:	e0bffd17 	ldw	r2,-12(fp)
10016430:	10800217 	ldw	r2,8(r2)
10016434:	100f883a 	mov	r7,r2
10016438:	e1bfff17 	ldw	r6,-4(fp)
1001643c:	e17ffe17 	ldw	r5,-8(fp)
10016440:	1809883a 	mov	r4,r3
10016444:	0016a340 	call	10016a34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10016448:	e037883a 	mov	sp,fp
1001644c:	dfc00117 	ldw	ra,4(sp)
10016450:	df000017 	ldw	fp,0(sp)
10016454:	dec00204 	addi	sp,sp,8
10016458:	f800283a 	ret

1001645c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001645c:	defffa04 	addi	sp,sp,-24
10016460:	dfc00515 	stw	ra,20(sp)
10016464:	df000415 	stw	fp,16(sp)
10016468:	df000404 	addi	fp,sp,16
1001646c:	e13ffd15 	stw	r4,-12(fp)
10016470:	e17ffe15 	stw	r5,-8(fp)
10016474:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016478:	e0bffd17 	ldw	r2,-12(fp)
1001647c:	10800017 	ldw	r2,0(r2)
10016480:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10016484:	e0bffc17 	ldw	r2,-16(fp)
10016488:	10c00a04 	addi	r3,r2,40
1001648c:	e0bffd17 	ldw	r2,-12(fp)
10016490:	10800217 	ldw	r2,8(r2)
10016494:	100f883a 	mov	r7,r2
10016498:	e1bfff17 	ldw	r6,-4(fp)
1001649c:	e17ffe17 	ldw	r5,-8(fp)
100164a0:	1809883a 	mov	r4,r3
100164a4:	0016c500 	call	10016c50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100164a8:	e037883a 	mov	sp,fp
100164ac:	dfc00117 	ldw	ra,4(sp)
100164b0:	df000017 	ldw	fp,0(sp)
100164b4:	dec00204 	addi	sp,sp,8
100164b8:	f800283a 	ret

100164bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100164bc:	defffc04 	addi	sp,sp,-16
100164c0:	dfc00315 	stw	ra,12(sp)
100164c4:	df000215 	stw	fp,8(sp)
100164c8:	df000204 	addi	fp,sp,8
100164cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100164d0:	e0bfff17 	ldw	r2,-4(fp)
100164d4:	10800017 	ldw	r2,0(r2)
100164d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100164dc:	e0bffe17 	ldw	r2,-8(fp)
100164e0:	10c00a04 	addi	r3,r2,40
100164e4:	e0bfff17 	ldw	r2,-4(fp)
100164e8:	10800217 	ldw	r2,8(r2)
100164ec:	100b883a 	mov	r5,r2
100164f0:	1809883a 	mov	r4,r3
100164f4:	00168dc0 	call	100168dc <altera_avalon_jtag_uart_close>
}
100164f8:	e037883a 	mov	sp,fp
100164fc:	dfc00117 	ldw	ra,4(sp)
10016500:	df000017 	ldw	fp,0(sp)
10016504:	dec00204 	addi	sp,sp,8
10016508:	f800283a 	ret

1001650c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001650c:	defffa04 	addi	sp,sp,-24
10016510:	dfc00515 	stw	ra,20(sp)
10016514:	df000415 	stw	fp,16(sp)
10016518:	df000404 	addi	fp,sp,16
1001651c:	e13ffd15 	stw	r4,-12(fp)
10016520:	e17ffe15 	stw	r5,-8(fp)
10016524:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10016528:	e0bffd17 	ldw	r2,-12(fp)
1001652c:	10800017 	ldw	r2,0(r2)
10016530:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10016534:	e0bffc17 	ldw	r2,-16(fp)
10016538:	10800a04 	addi	r2,r2,40
1001653c:	e1bfff17 	ldw	r6,-4(fp)
10016540:	e17ffe17 	ldw	r5,-8(fp)
10016544:	1009883a 	mov	r4,r2
10016548:	00169440 	call	10016944 <altera_avalon_jtag_uart_ioctl>
}
1001654c:	e037883a 	mov	sp,fp
10016550:	dfc00117 	ldw	ra,4(sp)
10016554:	df000017 	ldw	fp,0(sp)
10016558:	dec00204 	addi	sp,sp,8
1001655c:	f800283a 	ret

10016560 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10016560:	defffa04 	addi	sp,sp,-24
10016564:	dfc00515 	stw	ra,20(sp)
10016568:	df000415 	stw	fp,16(sp)
1001656c:	df000404 	addi	fp,sp,16
10016570:	e13ffd15 	stw	r4,-12(fp)
10016574:	e17ffe15 	stw	r5,-8(fp)
10016578:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001657c:	e0bffd17 	ldw	r2,-12(fp)
10016580:	00c00044 	movi	r3,1
10016584:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10016588:	e0bffd17 	ldw	r2,-12(fp)
1001658c:	10800017 	ldw	r2,0(r2)
10016590:	10800104 	addi	r2,r2,4
10016594:	1007883a 	mov	r3,r2
10016598:	e0bffd17 	ldw	r2,-12(fp)
1001659c:	10800817 	ldw	r2,32(r2)
100165a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100165a4:	e0bffe17 	ldw	r2,-8(fp)
100165a8:	e0ffff17 	ldw	r3,-4(fp)
100165ac:	d8000015 	stw	zero,0(sp)
100165b0:	e1fffd17 	ldw	r7,-12(fp)
100165b4:	01840074 	movhi	r6,4097
100165b8:	31998a04 	addi	r6,r6,26152
100165bc:	180b883a 	mov	r5,r3
100165c0:	1009883a 	mov	r4,r2
100165c4:	00176b00 	call	100176b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100165c8:	e0bffd17 	ldw	r2,-12(fp)
100165cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100165d0:	e0bffd17 	ldw	r2,-12(fp)
100165d4:	10c00204 	addi	r3,r2,8
100165d8:	008403b4 	movhi	r2,4110
100165dc:	108ab504 	addi	r2,r2,10964
100165e0:	10800017 	ldw	r2,0(r2)
100165e4:	e1fffd17 	ldw	r7,-12(fp)
100165e8:	01840074 	movhi	r6,4097
100165ec:	319a0d04 	addi	r6,r6,26676
100165f0:	100b883a 	mov	r5,r2
100165f4:	1809883a 	mov	r4,r3
100165f8:	00172f80 	call	100172f8 <alt_alarm_start>
100165fc:	1000040e 	bge	r2,zero,10016610 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10016600:	e0fffd17 	ldw	r3,-12(fp)
10016604:	00a00034 	movhi	r2,32768
10016608:	10bfffc4 	addi	r2,r2,-1
1001660c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10016610:	0001883a 	nop
10016614:	e037883a 	mov	sp,fp
10016618:	dfc00117 	ldw	ra,4(sp)
1001661c:	df000017 	ldw	fp,0(sp)
10016620:	dec00204 	addi	sp,sp,8
10016624:	f800283a 	ret

10016628 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10016628:	defff804 	addi	sp,sp,-32
1001662c:	df000715 	stw	fp,28(sp)
10016630:	df000704 	addi	fp,sp,28
10016634:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10016638:	e0bfff17 	ldw	r2,-4(fp)
1001663c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10016640:	e0bffb17 	ldw	r2,-20(fp)
10016644:	10800017 	ldw	r2,0(r2)
10016648:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001664c:	e0bffc17 	ldw	r2,-16(fp)
10016650:	10800104 	addi	r2,r2,4
10016654:	10800037 	ldwio	r2,0(r2)
10016658:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001665c:	e0bffd17 	ldw	r2,-12(fp)
10016660:	1080c00c 	andi	r2,r2,768
10016664:	10006d26 	beq	r2,zero,1001681c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10016668:	e0bffd17 	ldw	r2,-12(fp)
1001666c:	1080400c 	andi	r2,r2,256
10016670:	10003526 	beq	r2,zero,10016748 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10016674:	00800074 	movhi	r2,1
10016678:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001667c:	e0bffb17 	ldw	r2,-20(fp)
10016680:	10800a17 	ldw	r2,40(r2)
10016684:	10800044 	addi	r2,r2,1
10016688:	1081ffcc 	andi	r2,r2,2047
1001668c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10016690:	e0bffb17 	ldw	r2,-20(fp)
10016694:	10c00b17 	ldw	r3,44(r2)
10016698:	e0bffe17 	ldw	r2,-8(fp)
1001669c:	18801526 	beq	r3,r2,100166f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100166a0:	e0bffc17 	ldw	r2,-16(fp)
100166a4:	10800037 	ldwio	r2,0(r2)
100166a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100166ac:	e0bff917 	ldw	r2,-28(fp)
100166b0:	10a0000c 	andi	r2,r2,32768
100166b4:	10001126 	beq	r2,zero,100166fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100166b8:	e0bffb17 	ldw	r2,-20(fp)
100166bc:	10800a17 	ldw	r2,40(r2)
100166c0:	e0fff917 	ldw	r3,-28(fp)
100166c4:	1809883a 	mov	r4,r3
100166c8:	e0fffb17 	ldw	r3,-20(fp)
100166cc:	1885883a 	add	r2,r3,r2
100166d0:	10800e04 	addi	r2,r2,56
100166d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100166d8:	e0bffb17 	ldw	r2,-20(fp)
100166dc:	10800a17 	ldw	r2,40(r2)
100166e0:	10800044 	addi	r2,r2,1
100166e4:	10c1ffcc 	andi	r3,r2,2047
100166e8:	e0bffb17 	ldw	r2,-20(fp)
100166ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100166f0:	003fe206 	br	1001667c <__alt_data_end+0xf801667c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100166f4:	0001883a 	nop
100166f8:	00000106 	br	10016700 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100166fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10016700:	e0bff917 	ldw	r2,-28(fp)
10016704:	10bfffec 	andhi	r2,r2,65535
10016708:	10000f26 	beq	r2,zero,10016748 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001670c:	e0bffb17 	ldw	r2,-20(fp)
10016710:	10c00817 	ldw	r3,32(r2)
10016714:	00bfff84 	movi	r2,-2
10016718:	1886703a 	and	r3,r3,r2
1001671c:	e0bffb17 	ldw	r2,-20(fp)
10016720:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10016724:	e0bffc17 	ldw	r2,-16(fp)
10016728:	10800104 	addi	r2,r2,4
1001672c:	1007883a 	mov	r3,r2
10016730:	e0bffb17 	ldw	r2,-20(fp)
10016734:	10800817 	ldw	r2,32(r2)
10016738:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001673c:	e0bffc17 	ldw	r2,-16(fp)
10016740:	10800104 	addi	r2,r2,4
10016744:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10016748:	e0bffd17 	ldw	r2,-12(fp)
1001674c:	1080800c 	andi	r2,r2,512
10016750:	103fbe26 	beq	r2,zero,1001664c <__alt_data_end+0xf801664c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10016754:	e0bffd17 	ldw	r2,-12(fp)
10016758:	1004d43a 	srli	r2,r2,16
1001675c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10016760:	00001406 	br	100167b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10016764:	e0bffc17 	ldw	r2,-16(fp)
10016768:	e0fffb17 	ldw	r3,-20(fp)
1001676c:	18c00d17 	ldw	r3,52(r3)
10016770:	e13ffb17 	ldw	r4,-20(fp)
10016774:	20c7883a 	add	r3,r4,r3
10016778:	18c20e04 	addi	r3,r3,2104
1001677c:	18c00003 	ldbu	r3,0(r3)
10016780:	18c03fcc 	andi	r3,r3,255
10016784:	18c0201c 	xori	r3,r3,128
10016788:	18ffe004 	addi	r3,r3,-128
1001678c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016790:	e0bffb17 	ldw	r2,-20(fp)
10016794:	10800d17 	ldw	r2,52(r2)
10016798:	10800044 	addi	r2,r2,1
1001679c:	10c1ffcc 	andi	r3,r2,2047
100167a0:	e0bffb17 	ldw	r2,-20(fp)
100167a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100167a8:	e0bffa17 	ldw	r2,-24(fp)
100167ac:	10bfffc4 	addi	r2,r2,-1
100167b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100167b4:	e0bffa17 	ldw	r2,-24(fp)
100167b8:	10000526 	beq	r2,zero,100167d0 <altera_avalon_jtag_uart_irq+0x1a8>
100167bc:	e0bffb17 	ldw	r2,-20(fp)
100167c0:	10c00d17 	ldw	r3,52(r2)
100167c4:	e0bffb17 	ldw	r2,-20(fp)
100167c8:	10800c17 	ldw	r2,48(r2)
100167cc:	18bfe51e 	bne	r3,r2,10016764 <__alt_data_end+0xf8016764>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100167d0:	e0bffa17 	ldw	r2,-24(fp)
100167d4:	103f9d26 	beq	r2,zero,1001664c <__alt_data_end+0xf801664c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100167d8:	e0bffb17 	ldw	r2,-20(fp)
100167dc:	10c00817 	ldw	r3,32(r2)
100167e0:	00bfff44 	movi	r2,-3
100167e4:	1886703a 	and	r3,r3,r2
100167e8:	e0bffb17 	ldw	r2,-20(fp)
100167ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100167f0:	e0bffb17 	ldw	r2,-20(fp)
100167f4:	10800017 	ldw	r2,0(r2)
100167f8:	10800104 	addi	r2,r2,4
100167fc:	1007883a 	mov	r3,r2
10016800:	e0bffb17 	ldw	r2,-20(fp)
10016804:	10800817 	ldw	r2,32(r2)
10016808:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001680c:	e0bffc17 	ldw	r2,-16(fp)
10016810:	10800104 	addi	r2,r2,4
10016814:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10016818:	003f8c06 	br	1001664c <__alt_data_end+0xf801664c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
1001681c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10016820:	0001883a 	nop
10016824:	e037883a 	mov	sp,fp
10016828:	df000017 	ldw	fp,0(sp)
1001682c:	dec00104 	addi	sp,sp,4
10016830:	f800283a 	ret

10016834 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10016834:	defff804 	addi	sp,sp,-32
10016838:	df000715 	stw	fp,28(sp)
1001683c:	df000704 	addi	fp,sp,28
10016840:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10016844:	e0bffb17 	ldw	r2,-20(fp)
10016848:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1001684c:	e0bff917 	ldw	r2,-28(fp)
10016850:	10800017 	ldw	r2,0(r2)
10016854:	10800104 	addi	r2,r2,4
10016858:	10800037 	ldwio	r2,0(r2)
1001685c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10016860:	e0bffa17 	ldw	r2,-24(fp)
10016864:	1081000c 	andi	r2,r2,1024
10016868:	10000b26 	beq	r2,zero,10016898 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1001686c:	e0bff917 	ldw	r2,-28(fp)
10016870:	10800017 	ldw	r2,0(r2)
10016874:	10800104 	addi	r2,r2,4
10016878:	1007883a 	mov	r3,r2
1001687c:	e0bff917 	ldw	r2,-28(fp)
10016880:	10800817 	ldw	r2,32(r2)
10016884:	10810014 	ori	r2,r2,1024
10016888:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1001688c:	e0bff917 	ldw	r2,-28(fp)
10016890:	10000915 	stw	zero,36(r2)
10016894:	00000a06 	br	100168c0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10016898:	e0bff917 	ldw	r2,-28(fp)
1001689c:	10c00917 	ldw	r3,36(r2)
100168a0:	00a00034 	movhi	r2,32768
100168a4:	10bfff04 	addi	r2,r2,-4
100168a8:	10c00536 	bltu	r2,r3,100168c0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
100168ac:	e0bff917 	ldw	r2,-28(fp)
100168b0:	10800917 	ldw	r2,36(r2)
100168b4:	10c00044 	addi	r3,r2,1
100168b8:	e0bff917 	ldw	r2,-28(fp)
100168bc:	10c00915 	stw	r3,36(r2)
100168c0:	008403b4 	movhi	r2,4110
100168c4:	108ab504 	addi	r2,r2,10964
100168c8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
100168cc:	e037883a 	mov	sp,fp
100168d0:	df000017 	ldw	fp,0(sp)
100168d4:	dec00104 	addi	sp,sp,4
100168d8:	f800283a 	ret

100168dc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
100168dc:	defffd04 	addi	sp,sp,-12
100168e0:	df000215 	stw	fp,8(sp)
100168e4:	df000204 	addi	fp,sp,8
100168e8:	e13ffe15 	stw	r4,-8(fp)
100168ec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
100168f0:	00000506 	br	10016908 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
100168f4:	e0bfff17 	ldw	r2,-4(fp)
100168f8:	1090000c 	andi	r2,r2,16384
100168fc:	10000226 	beq	r2,zero,10016908 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10016900:	00bffd44 	movi	r2,-11
10016904:	00000b06 	br	10016934 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10016908:	e0bffe17 	ldw	r2,-8(fp)
1001690c:	10c00d17 	ldw	r3,52(r2)
10016910:	e0bffe17 	ldw	r2,-8(fp)
10016914:	10800c17 	ldw	r2,48(r2)
10016918:	18800526 	beq	r3,r2,10016930 <altera_avalon_jtag_uart_close+0x54>
1001691c:	e0bffe17 	ldw	r2,-8(fp)
10016920:	10c00917 	ldw	r3,36(r2)
10016924:	e0bffe17 	ldw	r2,-8(fp)
10016928:	10800117 	ldw	r2,4(r2)
1001692c:	18bff136 	bltu	r3,r2,100168f4 <__alt_data_end+0xf80168f4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10016930:	0005883a 	mov	r2,zero
}
10016934:	e037883a 	mov	sp,fp
10016938:	df000017 	ldw	fp,0(sp)
1001693c:	dec00104 	addi	sp,sp,4
10016940:	f800283a 	ret

10016944 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10016944:	defffa04 	addi	sp,sp,-24
10016948:	df000515 	stw	fp,20(sp)
1001694c:	df000504 	addi	fp,sp,20
10016950:	e13ffd15 	stw	r4,-12(fp)
10016954:	e17ffe15 	stw	r5,-8(fp)
10016958:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1001695c:	00bff9c4 	movi	r2,-25
10016960:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10016964:	e0bffe17 	ldw	r2,-8(fp)
10016968:	10da8060 	cmpeqi	r3,r2,27137
1001696c:	1800031e 	bne	r3,zero,1001697c <altera_avalon_jtag_uart_ioctl+0x38>
10016970:	109a80a0 	cmpeqi	r2,r2,27138
10016974:	1000181e 	bne	r2,zero,100169d8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10016978:	00002906 	br	10016a20 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1001697c:	e0bffd17 	ldw	r2,-12(fp)
10016980:	10c00117 	ldw	r3,4(r2)
10016984:	00a00034 	movhi	r2,32768
10016988:	10bfffc4 	addi	r2,r2,-1
1001698c:	18802126 	beq	r3,r2,10016a14 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10016990:	e0bfff17 	ldw	r2,-4(fp)
10016994:	10800017 	ldw	r2,0(r2)
10016998:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1001699c:	e0bffc17 	ldw	r2,-16(fp)
100169a0:	10800090 	cmplti	r2,r2,2
100169a4:	1000061e 	bne	r2,zero,100169c0 <altera_avalon_jtag_uart_ioctl+0x7c>
100169a8:	e0fffc17 	ldw	r3,-16(fp)
100169ac:	00a00034 	movhi	r2,32768
100169b0:	10bfffc4 	addi	r2,r2,-1
100169b4:	18800226 	beq	r3,r2,100169c0 <altera_avalon_jtag_uart_ioctl+0x7c>
100169b8:	e0bffc17 	ldw	r2,-16(fp)
100169bc:	00000206 	br	100169c8 <altera_avalon_jtag_uart_ioctl+0x84>
100169c0:	00a00034 	movhi	r2,32768
100169c4:	10bfff84 	addi	r2,r2,-2
100169c8:	e0fffd17 	ldw	r3,-12(fp)
100169cc:	18800115 	stw	r2,4(r3)
      rc = 0;
100169d0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
100169d4:	00000f06 	br	10016a14 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
100169d8:	e0bffd17 	ldw	r2,-12(fp)
100169dc:	10c00117 	ldw	r3,4(r2)
100169e0:	00a00034 	movhi	r2,32768
100169e4:	10bfffc4 	addi	r2,r2,-1
100169e8:	18800c26 	beq	r3,r2,10016a1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
100169ec:	e0bffd17 	ldw	r2,-12(fp)
100169f0:	10c00917 	ldw	r3,36(r2)
100169f4:	e0bffd17 	ldw	r2,-12(fp)
100169f8:	10800117 	ldw	r2,4(r2)
100169fc:	1885803a 	cmpltu	r2,r3,r2
10016a00:	10c03fcc 	andi	r3,r2,255
10016a04:	e0bfff17 	ldw	r2,-4(fp)
10016a08:	10c00015 	stw	r3,0(r2)
      rc = 0;
10016a0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10016a10:	00000206 	br	10016a1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10016a14:	0001883a 	nop
10016a18:	00000106 	br	10016a20 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10016a1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10016a20:	e0bffb17 	ldw	r2,-20(fp)
}
10016a24:	e037883a 	mov	sp,fp
10016a28:	df000017 	ldw	fp,0(sp)
10016a2c:	dec00104 	addi	sp,sp,4
10016a30:	f800283a 	ret

10016a34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10016a34:	defff304 	addi	sp,sp,-52
10016a38:	dfc00c15 	stw	ra,48(sp)
10016a3c:	df000b15 	stw	fp,44(sp)
10016a40:	df000b04 	addi	fp,sp,44
10016a44:	e13ffc15 	stw	r4,-16(fp)
10016a48:	e17ffd15 	stw	r5,-12(fp)
10016a4c:	e1bffe15 	stw	r6,-8(fp)
10016a50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10016a54:	e0bffd17 	ldw	r2,-12(fp)
10016a58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10016a5c:	00004706 	br	10016b7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10016a60:	e0bffc17 	ldw	r2,-16(fp)
10016a64:	10800a17 	ldw	r2,40(r2)
10016a68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10016a6c:	e0bffc17 	ldw	r2,-16(fp)
10016a70:	10800b17 	ldw	r2,44(r2)
10016a74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10016a78:	e0fff717 	ldw	r3,-36(fp)
10016a7c:	e0bff817 	ldw	r2,-32(fp)
10016a80:	18800536 	bltu	r3,r2,10016a98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10016a84:	e0fff717 	ldw	r3,-36(fp)
10016a88:	e0bff817 	ldw	r2,-32(fp)
10016a8c:	1885c83a 	sub	r2,r3,r2
10016a90:	e0bff615 	stw	r2,-40(fp)
10016a94:	00000406 	br	10016aa8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10016a98:	00c20004 	movi	r3,2048
10016a9c:	e0bff817 	ldw	r2,-32(fp)
10016aa0:	1885c83a 	sub	r2,r3,r2
10016aa4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016aa8:	e0bff617 	ldw	r2,-40(fp)
10016aac:	10001e26 	beq	r2,zero,10016b28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10016ab0:	e0fffe17 	ldw	r3,-8(fp)
10016ab4:	e0bff617 	ldw	r2,-40(fp)
10016ab8:	1880022e 	bgeu	r3,r2,10016ac4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10016abc:	e0bffe17 	ldw	r2,-8(fp)
10016ac0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10016ac4:	e0bffc17 	ldw	r2,-16(fp)
10016ac8:	10c00e04 	addi	r3,r2,56
10016acc:	e0bff817 	ldw	r2,-32(fp)
10016ad0:	1885883a 	add	r2,r3,r2
10016ad4:	e1bff617 	ldw	r6,-40(fp)
10016ad8:	100b883a 	mov	r5,r2
10016adc:	e13ff517 	ldw	r4,-44(fp)
10016ae0:	000f2a40 	call	1000f2a4 <memcpy>
      ptr   += n;
10016ae4:	e0fff517 	ldw	r3,-44(fp)
10016ae8:	e0bff617 	ldw	r2,-40(fp)
10016aec:	1885883a 	add	r2,r3,r2
10016af0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10016af4:	e0fffe17 	ldw	r3,-8(fp)
10016af8:	e0bff617 	ldw	r2,-40(fp)
10016afc:	1885c83a 	sub	r2,r3,r2
10016b00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016b04:	e0fff817 	ldw	r3,-32(fp)
10016b08:	e0bff617 	ldw	r2,-40(fp)
10016b0c:	1885883a 	add	r2,r3,r2
10016b10:	10c1ffcc 	andi	r3,r2,2047
10016b14:	e0bffc17 	ldw	r2,-16(fp)
10016b18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10016b1c:	e0bffe17 	ldw	r2,-8(fp)
10016b20:	00bfcf16 	blt	zero,r2,10016a60 <__alt_data_end+0xf8016a60>
10016b24:	00000106 	br	10016b2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10016b28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10016b2c:	e0fff517 	ldw	r3,-44(fp)
10016b30:	e0bffd17 	ldw	r2,-12(fp)
10016b34:	1880141e 	bne	r3,r2,10016b88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10016b38:	e0bfff17 	ldw	r2,-4(fp)
10016b3c:	1090000c 	andi	r2,r2,16384
10016b40:	1000131e 	bne	r2,zero,10016b90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10016b44:	0001883a 	nop
10016b48:	e0bffc17 	ldw	r2,-16(fp)
10016b4c:	10c00a17 	ldw	r3,40(r2)
10016b50:	e0bff717 	ldw	r2,-36(fp)
10016b54:	1880051e 	bne	r3,r2,10016b6c <altera_avalon_jtag_uart_read+0x138>
10016b58:	e0bffc17 	ldw	r2,-16(fp)
10016b5c:	10c00917 	ldw	r3,36(r2)
10016b60:	e0bffc17 	ldw	r2,-16(fp)
10016b64:	10800117 	ldw	r2,4(r2)
10016b68:	18bff736 	bltu	r3,r2,10016b48 <__alt_data_end+0xf8016b48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10016b6c:	e0bffc17 	ldw	r2,-16(fp)
10016b70:	10c00a17 	ldw	r3,40(r2)
10016b74:	e0bff717 	ldw	r2,-36(fp)
10016b78:	18800726 	beq	r3,r2,10016b98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10016b7c:	e0bffe17 	ldw	r2,-8(fp)
10016b80:	00bfb716 	blt	zero,r2,10016a60 <__alt_data_end+0xf8016a60>
10016b84:	00000506 	br	10016b9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10016b88:	0001883a 	nop
10016b8c:	00000306 	br	10016b9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10016b90:	0001883a 	nop
10016b94:	00000106 	br	10016b9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10016b98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10016b9c:	e0fff517 	ldw	r3,-44(fp)
10016ba0:	e0bffd17 	ldw	r2,-12(fp)
10016ba4:	18801826 	beq	r3,r2,10016c08 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016ba8:	0005303a 	rdctl	r2,status
10016bac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016bb0:	e0fffb17 	ldw	r3,-20(fp)
10016bb4:	00bfff84 	movi	r2,-2
10016bb8:	1884703a 	and	r2,r3,r2
10016bbc:	1001703a 	wrctl	status,r2
  
  return context;
10016bc0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10016bc4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10016bc8:	e0bffc17 	ldw	r2,-16(fp)
10016bcc:	10800817 	ldw	r2,32(r2)
10016bd0:	10c00054 	ori	r3,r2,1
10016bd4:	e0bffc17 	ldw	r2,-16(fp)
10016bd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016bdc:	e0bffc17 	ldw	r2,-16(fp)
10016be0:	10800017 	ldw	r2,0(r2)
10016be4:	10800104 	addi	r2,r2,4
10016be8:	1007883a 	mov	r3,r2
10016bec:	e0bffc17 	ldw	r2,-16(fp)
10016bf0:	10800817 	ldw	r2,32(r2)
10016bf4:	18800035 	stwio	r2,0(r3)
10016bf8:	e0bffa17 	ldw	r2,-24(fp)
10016bfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016c00:	e0bff917 	ldw	r2,-28(fp)
10016c04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10016c08:	e0fff517 	ldw	r3,-44(fp)
10016c0c:	e0bffd17 	ldw	r2,-12(fp)
10016c10:	18800426 	beq	r3,r2,10016c24 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10016c14:	e0fff517 	ldw	r3,-44(fp)
10016c18:	e0bffd17 	ldw	r2,-12(fp)
10016c1c:	1885c83a 	sub	r2,r3,r2
10016c20:	00000606 	br	10016c3c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10016c24:	e0bfff17 	ldw	r2,-4(fp)
10016c28:	1090000c 	andi	r2,r2,16384
10016c2c:	10000226 	beq	r2,zero,10016c38 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10016c30:	00bffd44 	movi	r2,-11
10016c34:	00000106 	br	10016c3c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10016c38:	00bffec4 	movi	r2,-5
}
10016c3c:	e037883a 	mov	sp,fp
10016c40:	dfc00117 	ldw	ra,4(sp)
10016c44:	df000017 	ldw	fp,0(sp)
10016c48:	dec00204 	addi	sp,sp,8
10016c4c:	f800283a 	ret

10016c50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10016c50:	defff304 	addi	sp,sp,-52
10016c54:	dfc00c15 	stw	ra,48(sp)
10016c58:	df000b15 	stw	fp,44(sp)
10016c5c:	df000b04 	addi	fp,sp,44
10016c60:	e13ffc15 	stw	r4,-16(fp)
10016c64:	e17ffd15 	stw	r5,-12(fp)
10016c68:	e1bffe15 	stw	r6,-8(fp)
10016c6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10016c70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10016c74:	e0bffd17 	ldw	r2,-12(fp)
10016c78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10016c7c:	00003706 	br	10016d5c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10016c80:	e0bffc17 	ldw	r2,-16(fp)
10016c84:	10800c17 	ldw	r2,48(r2)
10016c88:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10016c8c:	e0bffc17 	ldw	r2,-16(fp)
10016c90:	10800d17 	ldw	r2,52(r2)
10016c94:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10016c98:	e0fff917 	ldw	r3,-28(fp)
10016c9c:	e0bff517 	ldw	r2,-44(fp)
10016ca0:	1880062e 	bgeu	r3,r2,10016cbc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10016ca4:	e0fff517 	ldw	r3,-44(fp)
10016ca8:	e0bff917 	ldw	r2,-28(fp)
10016cac:	1885c83a 	sub	r2,r3,r2
10016cb0:	10bfffc4 	addi	r2,r2,-1
10016cb4:	e0bff615 	stw	r2,-40(fp)
10016cb8:	00000b06 	br	10016ce8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10016cbc:	e0bff517 	ldw	r2,-44(fp)
10016cc0:	10000526 	beq	r2,zero,10016cd8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10016cc4:	00c20004 	movi	r3,2048
10016cc8:	e0bff917 	ldw	r2,-28(fp)
10016ccc:	1885c83a 	sub	r2,r3,r2
10016cd0:	e0bff615 	stw	r2,-40(fp)
10016cd4:	00000406 	br	10016ce8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10016cd8:	00c1ffc4 	movi	r3,2047
10016cdc:	e0bff917 	ldw	r2,-28(fp)
10016ce0:	1885c83a 	sub	r2,r3,r2
10016ce4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016ce8:	e0bff617 	ldw	r2,-40(fp)
10016cec:	10001e26 	beq	r2,zero,10016d68 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10016cf0:	e0fffe17 	ldw	r3,-8(fp)
10016cf4:	e0bff617 	ldw	r2,-40(fp)
10016cf8:	1880022e 	bgeu	r3,r2,10016d04 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10016cfc:	e0bffe17 	ldw	r2,-8(fp)
10016d00:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10016d04:	e0bffc17 	ldw	r2,-16(fp)
10016d08:	10c20e04 	addi	r3,r2,2104
10016d0c:	e0bff917 	ldw	r2,-28(fp)
10016d10:	1885883a 	add	r2,r3,r2
10016d14:	e1bff617 	ldw	r6,-40(fp)
10016d18:	e17ffd17 	ldw	r5,-12(fp)
10016d1c:	1009883a 	mov	r4,r2
10016d20:	000f2a40 	call	1000f2a4 <memcpy>
      ptr   += n;
10016d24:	e0fffd17 	ldw	r3,-12(fp)
10016d28:	e0bff617 	ldw	r2,-40(fp)
10016d2c:	1885883a 	add	r2,r3,r2
10016d30:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10016d34:	e0fffe17 	ldw	r3,-8(fp)
10016d38:	e0bff617 	ldw	r2,-40(fp)
10016d3c:	1885c83a 	sub	r2,r3,r2
10016d40:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016d44:	e0fff917 	ldw	r3,-28(fp)
10016d48:	e0bff617 	ldw	r2,-40(fp)
10016d4c:	1885883a 	add	r2,r3,r2
10016d50:	10c1ffcc 	andi	r3,r2,2047
10016d54:	e0bffc17 	ldw	r2,-16(fp)
10016d58:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10016d5c:	e0bffe17 	ldw	r2,-8(fp)
10016d60:	00bfc716 	blt	zero,r2,10016c80 <__alt_data_end+0xf8016c80>
10016d64:	00000106 	br	10016d6c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10016d68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016d6c:	0005303a 	rdctl	r2,status
10016d70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016d74:	e0fffb17 	ldw	r3,-20(fp)
10016d78:	00bfff84 	movi	r2,-2
10016d7c:	1884703a 	and	r2,r3,r2
10016d80:	1001703a 	wrctl	status,r2
  
  return context;
10016d84:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10016d88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10016d8c:	e0bffc17 	ldw	r2,-16(fp)
10016d90:	10800817 	ldw	r2,32(r2)
10016d94:	10c00094 	ori	r3,r2,2
10016d98:	e0bffc17 	ldw	r2,-16(fp)
10016d9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016da0:	e0bffc17 	ldw	r2,-16(fp)
10016da4:	10800017 	ldw	r2,0(r2)
10016da8:	10800104 	addi	r2,r2,4
10016dac:	1007883a 	mov	r3,r2
10016db0:	e0bffc17 	ldw	r2,-16(fp)
10016db4:	10800817 	ldw	r2,32(r2)
10016db8:	18800035 	stwio	r2,0(r3)
10016dbc:	e0bffa17 	ldw	r2,-24(fp)
10016dc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016dc4:	e0bff817 	ldw	r2,-32(fp)
10016dc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10016dcc:	e0bffe17 	ldw	r2,-8(fp)
10016dd0:	0080100e 	bge	zero,r2,10016e14 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10016dd4:	e0bfff17 	ldw	r2,-4(fp)
10016dd8:	1090000c 	andi	r2,r2,16384
10016ddc:	1000101e 	bne	r2,zero,10016e20 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10016de0:	0001883a 	nop
10016de4:	e0bffc17 	ldw	r2,-16(fp)
10016de8:	10c00d17 	ldw	r3,52(r2)
10016dec:	e0bff517 	ldw	r2,-44(fp)
10016df0:	1880051e 	bne	r3,r2,10016e08 <altera_avalon_jtag_uart_write+0x1b8>
10016df4:	e0bffc17 	ldw	r2,-16(fp)
10016df8:	10c00917 	ldw	r3,36(r2)
10016dfc:	e0bffc17 	ldw	r2,-16(fp)
10016e00:	10800117 	ldw	r2,4(r2)
10016e04:	18bff736 	bltu	r3,r2,10016de4 <__alt_data_end+0xf8016de4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10016e08:	e0bffc17 	ldw	r2,-16(fp)
10016e0c:	10800917 	ldw	r2,36(r2)
10016e10:	1000051e 	bne	r2,zero,10016e28 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10016e14:	e0bffe17 	ldw	r2,-8(fp)
10016e18:	00bfd016 	blt	zero,r2,10016d5c <__alt_data_end+0xf8016d5c>
10016e1c:	00000306 	br	10016e2c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10016e20:	0001883a 	nop
10016e24:	00000106 	br	10016e2c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10016e28:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10016e2c:	e0fffd17 	ldw	r3,-12(fp)
10016e30:	e0bff717 	ldw	r2,-36(fp)
10016e34:	18800426 	beq	r3,r2,10016e48 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10016e38:	e0fffd17 	ldw	r3,-12(fp)
10016e3c:	e0bff717 	ldw	r2,-36(fp)
10016e40:	1885c83a 	sub	r2,r3,r2
10016e44:	00000606 	br	10016e60 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10016e48:	e0bfff17 	ldw	r2,-4(fp)
10016e4c:	1090000c 	andi	r2,r2,16384
10016e50:	10000226 	beq	r2,zero,10016e5c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10016e54:	00bffd44 	movi	r2,-11
10016e58:	00000106 	br	10016e60 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10016e5c:	00bffec4 	movi	r2,-5
}
10016e60:	e037883a 	mov	sp,fp
10016e64:	dfc00117 	ldw	ra,4(sp)
10016e68:	df000017 	ldw	fp,0(sp)
10016e6c:	dec00204 	addi	sp,sp,8
10016e70:	f800283a 	ret

10016e74 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10016e74:	defff404 	addi	sp,sp,-48
10016e78:	df000b15 	stw	fp,44(sp)
10016e7c:	df000b04 	addi	fp,sp,44
10016e80:	e13ffc15 	stw	r4,-16(fp)
10016e84:	e17ffd15 	stw	r5,-12(fp)
10016e88:	e1bffe15 	stw	r6,-8(fp)
10016e8c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10016e90:	e0bffc17 	ldw	r2,-16(fp)
10016e94:	10800017 	ldw	r2,0(r2)
10016e98:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10016e9c:	e0bff517 	ldw	r2,-44(fp)
10016ea0:	10800217 	ldw	r2,8(r2)
10016ea4:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10016ea8:	e0bff617 	ldw	r2,-40(fp)
10016eac:	10bfffc4 	addi	r2,r2,-1
10016eb0:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
10016eb4:	e0bffb17 	ldw	r2,-20(fp)
10016eb8:	10800044 	addi	r2,r2,1
10016ebc:	e0bffb15 	stw	r2,-20(fp)
10016ec0:	e0bffb17 	ldw	r2,-20(fp)
10016ec4:	10800003 	ldbu	r2,0(r2)
10016ec8:	10803fcc 	andi	r2,r2,255
10016ecc:	1080201c 	xori	r2,r2,128
10016ed0:	10bfe004 	addi	r2,r2,-128
10016ed4:	103ff71e 	bne	r2,zero,10016eb4 <__alt_data_end+0xf8016eb4>
    ;

  return ptr - string;
10016ed8:	e0fffb17 	ldw	r3,-20(fp)
10016edc:	e0bff617 	ldw	r2,-40(fp)
10016ee0:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
10016ee4:	10800044 	addi	r2,r2,1
10016ee8:	1007883a 	mov	r3,r2
10016eec:	e0bffd17 	ldw	r2,-12(fp)
10016ef0:	10c5883a 	add	r2,r2,r3
10016ef4:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
10016ef8:	d0a01e04 	addi	r2,gp,-32648
10016efc:	1007883a 	mov	r3,r2
  r4 = (int)name;
10016f00:	e0bffd17 	ldw	r2,-12(fp)
10016f04:	1009883a 	mov	r4,r2
  r5 = flags;
10016f08:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
10016f0c:	e1bfff17 	ldw	r6,-4(fp)
10016f10:	e0bffd17 	ldw	r2,-12(fp)
10016f14:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10016f18:	e0bff917 	ldw	r2,-28(fp)
10016f1c:	10bfffc4 	addi	r2,r2,-1
10016f20:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10016f24:	e0bffa17 	ldw	r2,-24(fp)
10016f28:	10800044 	addi	r2,r2,1
10016f2c:	e0bffa15 	stw	r2,-24(fp)
10016f30:	e0bffa17 	ldw	r2,-24(fp)
10016f34:	10800003 	ldbu	r2,0(r2)
10016f38:	10803fcc 	andi	r2,r2,255
10016f3c:	1080201c 	xori	r2,r2,128
10016f40:	10bfe004 	addi	r2,r2,-128
10016f44:	103ff71e 	bne	r2,zero,10016f24 <__alt_data_end+0xf8016f24>
    ;

  return ptr - string;
10016f48:	e1fffa17 	ldw	r7,-24(fp)
10016f4c:	e0bff917 	ldw	r2,-28(fp)
10016f50:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10016f54:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10016f58:	003da07a 	break	1

  handle = (void *)r2;
10016f5c:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10016f60:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10016f64:	e0bff817 	ldw	r2,-32(fp)
10016f68:	1000031e 	bne	r2,zero,10016f78 <alt_hostfs_open+0x104>
    fd->priv = handle;
10016f6c:	e0bffc17 	ldw	r2,-16(fp)
10016f70:	e0fff717 	ldw	r3,-36(fp)
10016f74:	10c00115 	stw	r3,4(r2)

  return -error;
10016f78:	e0bff817 	ldw	r2,-32(fp)
10016f7c:	0085c83a 	sub	r2,zero,r2
}
10016f80:	e037883a 	mov	sp,fp
10016f84:	df000017 	ldw	fp,0(sp)
10016f88:	dec00104 	addi	sp,sp,4
10016f8c:	f800283a 	ret

10016f90 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10016f90:	defffd04 	addi	sp,sp,-12
10016f94:	df000215 	stw	fp,8(sp)
10016f98:	df000204 	addi	fp,sp,8
10016f9c:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
10016fa0:	d0a02104 	addi	r2,gp,-32636
10016fa4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10016fa8:	e0bfff17 	ldw	r2,-4(fp)
10016fac:	10800117 	ldw	r2,4(r2)
10016fb0:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
10016fb4:	003da07a 	break	1

  error = r3;
10016fb8:	e0fffe15 	stw	r3,-8(fp)

  return -error;
10016fbc:	e0bffe17 	ldw	r2,-8(fp)
10016fc0:	0085c83a 	sub	r2,zero,r2
}
10016fc4:	e037883a 	mov	sp,fp
10016fc8:	df000017 	ldw	fp,0(sp)
10016fcc:	dec00104 	addi	sp,sp,4
10016fd0:	f800283a 	ret

10016fd4 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
10016fd4:	defffa04 	addi	sp,sp,-24
10016fd8:	df000515 	stw	fp,20(sp)
10016fdc:	df000504 	addi	fp,sp,20
10016fe0:	e13ffd15 	stw	r4,-12(fp)
10016fe4:	e17ffe15 	stw	r5,-8(fp)
10016fe8:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
10016fec:	d0a02404 	addi	r2,gp,-32624
10016ff0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10016ff4:	e0bffd17 	ldw	r2,-12(fp)
10016ff8:	10800117 	ldw	r2,4(r2)
10016ffc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10017000:	e0bffe17 	ldw	r2,-8(fp)
10017004:	100b883a 	mov	r5,r2
  r6 = len;
10017008:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1001700c:	003da07a 	break	1

  rc = r2;
10017010:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10017014:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10017018:	e0bffc17 	ldw	r2,-16(fp)
1001701c:	10000326 	beq	r2,zero,1001702c <alt_hostfs_read+0x58>
10017020:	e0bffc17 	ldw	r2,-16(fp)
10017024:	0085c83a 	sub	r2,zero,r2
10017028:	00000106 	br	10017030 <alt_hostfs_read+0x5c>
1001702c:	e0bffb17 	ldw	r2,-20(fp)
}
10017030:	e037883a 	mov	sp,fp
10017034:	df000017 	ldw	fp,0(sp)
10017038:	dec00104 	addi	sp,sp,4
1001703c:	f800283a 	ret

10017040 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10017040:	defffa04 	addi	sp,sp,-24
10017044:	df000515 	stw	fp,20(sp)
10017048:	df000504 	addi	fp,sp,20
1001704c:	e13ffd15 	stw	r4,-12(fp)
10017050:	e17ffe15 	stw	r5,-8(fp)
10017054:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10017058:	d0a02704 	addi	r2,gp,-32612
1001705c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10017060:	e0bffd17 	ldw	r2,-12(fp)
10017064:	10800117 	ldw	r2,4(r2)
10017068:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1001706c:	e0bffe17 	ldw	r2,-8(fp)
10017070:	100b883a 	mov	r5,r2
  r6 = len;
10017074:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10017078:	003da07a 	break	1

  rc = r2;
1001707c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10017080:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10017084:	e0bffc17 	ldw	r2,-16(fp)
10017088:	10000326 	beq	r2,zero,10017098 <alt_hostfs_write+0x58>
1001708c:	e0bffc17 	ldw	r2,-16(fp)
10017090:	0085c83a 	sub	r2,zero,r2
10017094:	00000106 	br	1001709c <alt_hostfs_write+0x5c>
10017098:	e0bffb17 	ldw	r2,-20(fp)
}
1001709c:	e037883a 	mov	sp,fp
100170a0:	df000017 	ldw	fp,0(sp)
100170a4:	dec00104 	addi	sp,sp,4
100170a8:	f800283a 	ret

100170ac <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
100170ac:	defffa04 	addi	sp,sp,-24
100170b0:	df000515 	stw	fp,20(sp)
100170b4:	df000504 	addi	fp,sp,20
100170b8:	e13ffd15 	stw	r4,-12(fp)
100170bc:	e17ffe15 	stw	r5,-8(fp)
100170c0:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
100170c4:	d0a02a04 	addi	r2,gp,-32600
100170c8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100170cc:	e0bffd17 	ldw	r2,-12(fp)
100170d0:	10800117 	ldw	r2,4(r2)
100170d4:	1009883a 	mov	r4,r2
  r5 = ptr;
100170d8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
100170dc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
100170e0:	003da07a 	break	1

  rc = r2;
100170e4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100170e8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100170ec:	e0bffc17 	ldw	r2,-16(fp)
100170f0:	10000326 	beq	r2,zero,10017100 <alt_hostfs_seek+0x54>
100170f4:	e0bffc17 	ldw	r2,-16(fp)
100170f8:	0085c83a 	sub	r2,zero,r2
100170fc:	00000106 	br	10017104 <alt_hostfs_seek+0x58>
10017100:	e0bffb17 	ldw	r2,-20(fp)
}
10017104:	e037883a 	mov	sp,fp
10017108:	df000017 	ldw	fp,0(sp)
1001710c:	dec00104 	addi	sp,sp,4
10017110:	f800283a 	ret

10017114 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10017114:	deffe904 	addi	sp,sp,-92
10017118:	df001615 	stw	fp,88(sp)
1001711c:	df001604 	addi	fp,sp,88
10017120:	e13ffe15 	stw	r4,-8(fp)
10017124:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10017128:	d0a02d04 	addi	r2,gp,-32588
1001712c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10017130:	e0bffe17 	ldw	r2,-8(fp)
10017134:	10800117 	ldw	r2,4(r2)
10017138:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1001713c:	e0bfee04 	addi	r2,fp,-72
10017140:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10017144:	003da07a 	break	1

  rc = r2;
10017148:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1001714c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10017150:	e0bfec17 	ldw	r2,-80(fp)
10017154:	1000621e 	bne	r2,zero,100172e0 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10017158:	e0bfee04 	addi	r2,fp,-72
1001715c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10017160:	e0bfea17 	ldw	r2,-88(fp)
10017164:	10801004 	addi	r2,r2,64
10017168:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1001716c:	00001606 	br	100171c8 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10017170:	e0bfea17 	ldw	r2,-88(fp)
10017174:	10800017 	ldw	r2,0(r2)
10017178:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1001717c:	e0bfea17 	ldw	r2,-88(fp)
10017180:	10800017 	ldw	r2,0(r2)
10017184:	10803fec 	andhi	r2,r2,255
10017188:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1001718c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10017190:	e0bfea17 	ldw	r2,-88(fp)
10017194:	10800017 	ldw	r2,0(r2)
10017198:	10bfc00c 	andi	r2,r2,65280
1001719c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
100171a0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
100171a4:	e0bfea17 	ldw	r2,-88(fp)
100171a8:	10800017 	ldw	r2,0(r2)
100171ac:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
100171b0:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
100171b4:	e0bfea17 	ldw	r2,-88(fp)
100171b8:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
100171bc:	e0bfea17 	ldw	r2,-88(fp)
100171c0:	10800104 	addi	r2,r2,4
100171c4:	e0bfea15 	stw	r2,-88(fp)
100171c8:	e0ffea17 	ldw	r3,-88(fp)
100171cc:	e0bfed17 	ldw	r2,-76(fp)
100171d0:	18bfe736 	bltu	r3,r2,10017170 <__alt_data_end+0xf8017170>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
100171d4:	e0bfff17 	ldw	r2,-4(fp)
100171d8:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
100171dc:	e0bfea17 	ldw	r2,-88(fp)
100171e0:	10800f04 	addi	r2,r2,60
100171e4:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
100171e8:	00000506 	br	10017200 <alt_hostfs_fstat+0xec>
      *ptr = 0;
100171ec:	e0bfea17 	ldw	r2,-88(fp)
100171f0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
100171f4:	e0bfea17 	ldw	r2,-88(fp)
100171f8:	10800104 	addi	r2,r2,4
100171fc:	e0bfea15 	stw	r2,-88(fp)
10017200:	e0ffea17 	ldw	r3,-88(fp)
10017204:	e0bfed17 	ldw	r2,-76(fp)
10017208:	18bff836 	bltu	r3,r2,100171ec <__alt_data_end+0xf80171ec>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1001720c:	e0bfee17 	ldw	r2,-72(fp)
10017210:	1007883a 	mov	r3,r2
10017214:	e0bfff17 	ldw	r2,-4(fp)
10017218:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1001721c:	e0bfef17 	ldw	r2,-68(fp)
10017220:	1007883a 	mov	r3,r2
10017224:	e0bfff17 	ldw	r2,-4(fp)
10017228:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1001722c:	e0fff017 	ldw	r3,-64(fp)
10017230:	e0bfff17 	ldw	r2,-4(fp)
10017234:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10017238:	e0bff117 	ldw	r2,-60(fp)
1001723c:	1007883a 	mov	r3,r2
10017240:	e0bfff17 	ldw	r2,-4(fp)
10017244:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10017248:	e0bff217 	ldw	r2,-56(fp)
1001724c:	1007883a 	mov	r3,r2
10017250:	e0bfff17 	ldw	r2,-4(fp)
10017254:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10017258:	e0bff317 	ldw	r2,-52(fp)
1001725c:	1007883a 	mov	r3,r2
10017260:	e0bfff17 	ldw	r2,-4(fp)
10017264:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10017268:	e0bff417 	ldw	r2,-48(fp)
1001726c:	1007883a 	mov	r3,r2
10017270:	e0bfff17 	ldw	r2,-4(fp)
10017274:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10017278:	e0bff617 	ldw	r2,-40(fp)
1001727c:	1007883a 	mov	r3,r2
10017280:	e0bfff17 	ldw	r2,-4(fp)
10017284:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10017288:	e0bffb17 	ldw	r2,-20(fp)
1001728c:	1007883a 	mov	r3,r2
10017290:	e0bfff17 	ldw	r2,-4(fp)
10017294:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10017298:	e0bffc17 	ldw	r2,-16(fp)
1001729c:	1007883a 	mov	r3,r2
100172a0:	e0bfff17 	ldw	r2,-4(fp)
100172a4:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
100172a8:	e0bffd17 	ldw	r2,-12(fp)
100172ac:	1007883a 	mov	r3,r2
100172b0:	e0bfff17 	ldw	r2,-4(fp)
100172b4:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
100172b8:	e0bff817 	ldw	r2,-32(fp)
100172bc:	1007883a 	mov	r3,r2
100172c0:	e0bfff17 	ldw	r2,-4(fp)
100172c4:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
100172c8:	e0bffa17 	ldw	r2,-24(fp)
100172cc:	1007883a 	mov	r3,r2
100172d0:	e0bfff17 	ldw	r2,-4(fp)
100172d4:	10c00c15 	stw	r3,48(r2)

    return rc;
100172d8:	e0bfeb17 	ldw	r2,-84(fp)
100172dc:	00000206 	br	100172e8 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
100172e0:	e0bfec17 	ldw	r2,-80(fp)
100172e4:	0085c83a 	sub	r2,zero,r2
}
100172e8:	e037883a 	mov	sp,fp
100172ec:	df000017 	ldw	fp,0(sp)
100172f0:	dec00104 	addi	sp,sp,4
100172f4:	f800283a 	ret

100172f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100172f8:	defff504 	addi	sp,sp,-44
100172fc:	df000a15 	stw	fp,40(sp)
10017300:	df000a04 	addi	fp,sp,40
10017304:	e13ffc15 	stw	r4,-16(fp)
10017308:	e17ffd15 	stw	r5,-12(fp)
1001730c:	e1bffe15 	stw	r6,-8(fp)
10017310:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10017314:	e03ff615 	stw	zero,-40(fp)
10017318:	008403b4 	movhi	r2,4110
1001731c:	108ab504 	addi	r2,r2,10964
10017320:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10017324:	10003f26 	beq	r2,zero,10017424 <alt_alarm_start+0x12c>
  {
    if (alarm)
10017328:	e0bffc17 	ldw	r2,-16(fp)
1001732c:	10003b26 	beq	r2,zero,1001741c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10017330:	e0bffc17 	ldw	r2,-16(fp)
10017334:	e0fffe17 	ldw	r3,-8(fp)
10017338:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001733c:	e0bffc17 	ldw	r2,-16(fp)
10017340:	e0ffff17 	ldw	r3,-4(fp)
10017344:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017348:	0005303a 	rdctl	r2,status
1001734c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017350:	e0fff917 	ldw	r3,-28(fp)
10017354:	00bfff84 	movi	r2,-2
10017358:	1884703a 	and	r2,r3,r2
1001735c:	1001703a 	wrctl	status,r2
  
  return context;
10017360:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10017364:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10017368:	008403b4 	movhi	r2,4110
1001736c:	108ab604 	addi	r2,r2,10968
10017370:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10017374:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10017378:	e0fffd17 	ldw	r3,-12(fp)
1001737c:	e0bff617 	ldw	r2,-40(fp)
10017380:	1885883a 	add	r2,r3,r2
10017384:	10c00044 	addi	r3,r2,1
10017388:	e0bffc17 	ldw	r2,-16(fp)
1001738c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10017390:	e0bffc17 	ldw	r2,-16(fp)
10017394:	10c00217 	ldw	r3,8(r2)
10017398:	e0bff617 	ldw	r2,-40(fp)
1001739c:	1880042e 	bgeu	r3,r2,100173b0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100173a0:	e0bffc17 	ldw	r2,-16(fp)
100173a4:	00c00044 	movi	r3,1
100173a8:	10c00405 	stb	r3,16(r2)
100173ac:	00000206 	br	100173b8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100173b0:	e0bffc17 	ldw	r2,-16(fp)
100173b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100173b8:	e0fffc17 	ldw	r3,-16(fp)
100173bc:	008403b4 	movhi	r2,4110
100173c0:	10a46604 	addi	r2,r2,-28264
100173c4:	e0bffa15 	stw	r2,-24(fp)
100173c8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100173cc:	e0bffb17 	ldw	r2,-20(fp)
100173d0:	e0fffa17 	ldw	r3,-24(fp)
100173d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100173d8:	e0bffa17 	ldw	r2,-24(fp)
100173dc:	10c00017 	ldw	r3,0(r2)
100173e0:	e0bffb17 	ldw	r2,-20(fp)
100173e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100173e8:	e0bffa17 	ldw	r2,-24(fp)
100173ec:	10800017 	ldw	r2,0(r2)
100173f0:	e0fffb17 	ldw	r3,-20(fp)
100173f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100173f8:	e0bffa17 	ldw	r2,-24(fp)
100173fc:	e0fffb17 	ldw	r3,-20(fp)
10017400:	10c00015 	stw	r3,0(r2)
10017404:	e0bff817 	ldw	r2,-32(fp)
10017408:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001740c:	e0bff717 	ldw	r2,-36(fp)
10017410:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10017414:	0005883a 	mov	r2,zero
10017418:	00000306 	br	10017428 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001741c:	00bffa84 	movi	r2,-22
10017420:	00000106 	br	10017428 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10017424:	00bfde84 	movi	r2,-134
  }
}
10017428:	e037883a 	mov	sp,fp
1001742c:	df000017 	ldw	fp,0(sp)
10017430:	dec00104 	addi	sp,sp,4
10017434:	f800283a 	ret

10017438 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10017438:	deffff04 	addi	sp,sp,-4
1001743c:	df000015 	stw	fp,0(sp)
10017440:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10017444:	0001883a 	nop
10017448:	e037883a 	mov	sp,fp
1001744c:	df000017 	ldw	fp,0(sp)
10017450:	dec00104 	addi	sp,sp,4
10017454:	f800283a 	ret

10017458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017458:	defffe04 	addi	sp,sp,-8
1001745c:	dfc00115 	stw	ra,4(sp)
10017460:	df000015 	stw	fp,0(sp)
10017464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017468:	008403b4 	movhi	r2,4110
1001746c:	10a46404 	addi	r2,r2,-28272
10017470:	10800017 	ldw	r2,0(r2)
10017474:	10000526 	beq	r2,zero,1001748c <alt_get_errno+0x34>
10017478:	008403b4 	movhi	r2,4110
1001747c:	10a46404 	addi	r2,r2,-28272
10017480:	10800017 	ldw	r2,0(r2)
10017484:	103ee83a 	callr	r2
10017488:	00000206 	br	10017494 <alt_get_errno+0x3c>
1001748c:	008403b4 	movhi	r2,4110
10017490:	108aa904 	addi	r2,r2,10916
}
10017494:	e037883a 	mov	sp,fp
10017498:	dfc00117 	ldw	ra,4(sp)
1001749c:	df000017 	ldw	fp,0(sp)
100174a0:	dec00204 	addi	sp,sp,8
100174a4:	f800283a 	ret

100174a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100174a8:	defffa04 	addi	sp,sp,-24
100174ac:	dfc00515 	stw	ra,20(sp)
100174b0:	df000415 	stw	fp,16(sp)
100174b4:	df000404 	addi	fp,sp,16
100174b8:	e13ffe15 	stw	r4,-8(fp)
100174bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100174c0:	e0bffe17 	ldw	r2,-8(fp)
100174c4:	10000326 	beq	r2,zero,100174d4 <alt_dev_llist_insert+0x2c>
100174c8:	e0bffe17 	ldw	r2,-8(fp)
100174cc:	10800217 	ldw	r2,8(r2)
100174d0:	1000061e 	bne	r2,zero,100174ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100174d4:	00174580 	call	10017458 <alt_get_errno>
100174d8:	1007883a 	mov	r3,r2
100174dc:	00800584 	movi	r2,22
100174e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100174e4:	00bffa84 	movi	r2,-22
100174e8:	00001306 	br	10017538 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100174ec:	e0bffe17 	ldw	r2,-8(fp)
100174f0:	e0ffff17 	ldw	r3,-4(fp)
100174f4:	e0fffc15 	stw	r3,-16(fp)
100174f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100174fc:	e0bffd17 	ldw	r2,-12(fp)
10017500:	e0fffc17 	ldw	r3,-16(fp)
10017504:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10017508:	e0bffc17 	ldw	r2,-16(fp)
1001750c:	10c00017 	ldw	r3,0(r2)
10017510:	e0bffd17 	ldw	r2,-12(fp)
10017514:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10017518:	e0bffc17 	ldw	r2,-16(fp)
1001751c:	10800017 	ldw	r2,0(r2)
10017520:	e0fffd17 	ldw	r3,-12(fp)
10017524:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10017528:	e0bffc17 	ldw	r2,-16(fp)
1001752c:	e0fffd17 	ldw	r3,-12(fp)
10017530:	10c00015 	stw	r3,0(r2)

  return 0;  
10017534:	0005883a 	mov	r2,zero
}
10017538:	e037883a 	mov	sp,fp
1001753c:	dfc00117 	ldw	ra,4(sp)
10017540:	df000017 	ldw	fp,0(sp)
10017544:	dec00204 	addi	sp,sp,8
10017548:	f800283a 	ret

1001754c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1001754c:	defffd04 	addi	sp,sp,-12
10017550:	dfc00215 	stw	ra,8(sp)
10017554:	df000115 	stw	fp,4(sp)
10017558:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001755c:	008400b4 	movhi	r2,4098
10017560:	10a1d704 	addi	r2,r2,-30884
10017564:	e0bfff15 	stw	r2,-4(fp)
10017568:	00000606 	br	10017584 <_do_ctors+0x38>
        (*ctor) (); 
1001756c:	e0bfff17 	ldw	r2,-4(fp)
10017570:	10800017 	ldw	r2,0(r2)
10017574:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10017578:	e0bfff17 	ldw	r2,-4(fp)
1001757c:	10bfff04 	addi	r2,r2,-4
10017580:	e0bfff15 	stw	r2,-4(fp)
10017584:	e0ffff17 	ldw	r3,-4(fp)
10017588:	008400b4 	movhi	r2,4098
1001758c:	10a1d804 	addi	r2,r2,-30880
10017590:	18bff62e 	bgeu	r3,r2,1001756c <__alt_data_end+0xf801756c>
        (*ctor) (); 
}
10017594:	0001883a 	nop
10017598:	e037883a 	mov	sp,fp
1001759c:	dfc00117 	ldw	ra,4(sp)
100175a0:	df000017 	ldw	fp,0(sp)
100175a4:	dec00204 	addi	sp,sp,8
100175a8:	f800283a 	ret

100175ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100175ac:	defffd04 	addi	sp,sp,-12
100175b0:	dfc00215 	stw	ra,8(sp)
100175b4:	df000115 	stw	fp,4(sp)
100175b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100175bc:	008400b4 	movhi	r2,4098
100175c0:	10a1d704 	addi	r2,r2,-30884
100175c4:	e0bfff15 	stw	r2,-4(fp)
100175c8:	00000606 	br	100175e4 <_do_dtors+0x38>
        (*dtor) (); 
100175cc:	e0bfff17 	ldw	r2,-4(fp)
100175d0:	10800017 	ldw	r2,0(r2)
100175d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100175d8:	e0bfff17 	ldw	r2,-4(fp)
100175dc:	10bfff04 	addi	r2,r2,-4
100175e0:	e0bfff15 	stw	r2,-4(fp)
100175e4:	e0ffff17 	ldw	r3,-4(fp)
100175e8:	008400b4 	movhi	r2,4098
100175ec:	10a1d804 	addi	r2,r2,-30880
100175f0:	18bff62e 	bgeu	r3,r2,100175cc <__alt_data_end+0xf80175cc>
        (*dtor) (); 
}
100175f4:	0001883a 	nop
100175f8:	e037883a 	mov	sp,fp
100175fc:	dfc00117 	ldw	ra,4(sp)
10017600:	df000017 	ldw	fp,0(sp)
10017604:	dec00204 	addi	sp,sp,8
10017608:	f800283a 	ret

1001760c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
1001760c:	defffc04 	addi	sp,sp,-16
10017610:	df000315 	stw	fp,12(sp)
10017614:	df000304 	addi	fp,sp,12
10017618:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
1001761c:	e0bfff17 	ldw	r2,-4(fp)
10017620:	10800217 	ldw	r2,8(r2)
10017624:	1000021e 	bne	r2,zero,10017630 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10017628:	00bffb44 	movi	r2,-19
1001762c:	00001406 	br	10017680 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10017630:	e0ffff17 	ldw	r3,-4(fp)
10017634:	008403b4 	movhi	r2,4110
10017638:	10a45f04 	addi	r2,r2,-28292
1001763c:	e0bffd15 	stw	r2,-12(fp)
10017640:	e0fffe15 	stw	r3,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10017644:	e0bffe17 	ldw	r2,-8(fp)
10017648:	e0fffd17 	ldw	r3,-12(fp)
1001764c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10017650:	e0bffd17 	ldw	r2,-12(fp)
10017654:	10c00017 	ldw	r3,0(r2)
10017658:	e0bffe17 	ldw	r2,-8(fp)
1001765c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10017660:	e0bffd17 	ldw	r2,-12(fp)
10017664:	10800017 	ldw	r2,0(r2)
10017668:	e0fffe17 	ldw	r3,-8(fp)
1001766c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10017670:	e0bffd17 	ldw	r2,-12(fp)
10017674:	e0fffe17 	ldw	r3,-8(fp)
10017678:	10c00015 	stw	r3,0(r2)

  return 0;
1001767c:	0005883a 	mov	r2,zero
} 
10017680:	e037883a 	mov	sp,fp
10017684:	df000017 	ldw	fp,0(sp)
10017688:	dec00104 	addi	sp,sp,4
1001768c:	f800283a 	ret

10017690 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10017690:	deffff04 	addi	sp,sp,-4
10017694:	df000015 	stw	fp,0(sp)
10017698:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001769c:	0001883a 	nop
100176a0:	e037883a 	mov	sp,fp
100176a4:	df000017 	ldw	fp,0(sp)
100176a8:	dec00104 	addi	sp,sp,4
100176ac:	f800283a 	ret

100176b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100176b0:	defff904 	addi	sp,sp,-28
100176b4:	dfc00615 	stw	ra,24(sp)
100176b8:	df000515 	stw	fp,20(sp)
100176bc:	df000504 	addi	fp,sp,20
100176c0:	e13ffc15 	stw	r4,-16(fp)
100176c4:	e17ffd15 	stw	r5,-12(fp)
100176c8:	e1bffe15 	stw	r6,-8(fp)
100176cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100176d0:	e0800217 	ldw	r2,8(fp)
100176d4:	d8800015 	stw	r2,0(sp)
100176d8:	e1ffff17 	ldw	r7,-4(fp)
100176dc:	e1bffe17 	ldw	r6,-8(fp)
100176e0:	e17ffd17 	ldw	r5,-12(fp)
100176e4:	e13ffc17 	ldw	r4,-16(fp)
100176e8:	00178900 	call	10017890 <alt_iic_isr_register>
}  
100176ec:	e037883a 	mov	sp,fp
100176f0:	dfc00117 	ldw	ra,4(sp)
100176f4:	df000017 	ldw	fp,0(sp)
100176f8:	dec00204 	addi	sp,sp,8
100176fc:	f800283a 	ret

10017700 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10017700:	defff904 	addi	sp,sp,-28
10017704:	df000615 	stw	fp,24(sp)
10017708:	df000604 	addi	fp,sp,24
1001770c:	e13ffe15 	stw	r4,-8(fp)
10017710:	e17fff15 	stw	r5,-4(fp)
10017714:	e0bfff17 	ldw	r2,-4(fp)
10017718:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001771c:	0005303a 	rdctl	r2,status
10017720:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017724:	e0fffb17 	ldw	r3,-20(fp)
10017728:	00bfff84 	movi	r2,-2
1001772c:	1884703a 	and	r2,r3,r2
10017730:	1001703a 	wrctl	status,r2
  
  return context;
10017734:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10017738:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001773c:	00c00044 	movi	r3,1
10017740:	e0bffa17 	ldw	r2,-24(fp)
10017744:	1884983a 	sll	r2,r3,r2
10017748:	1007883a 	mov	r3,r2
1001774c:	008403b4 	movhi	r2,4110
10017750:	108ab704 	addi	r2,r2,10972
10017754:	10800017 	ldw	r2,0(r2)
10017758:	1886b03a 	or	r3,r3,r2
1001775c:	008403b4 	movhi	r2,4110
10017760:	108ab704 	addi	r2,r2,10972
10017764:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10017768:	008403b4 	movhi	r2,4110
1001776c:	108ab704 	addi	r2,r2,10972
10017770:	10800017 	ldw	r2,0(r2)
10017774:	100170fa 	wrctl	ienable,r2
10017778:	e0bffc17 	ldw	r2,-16(fp)
1001777c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017780:	e0bffd17 	ldw	r2,-12(fp)
10017784:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10017788:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001778c:	0001883a 	nop
}
10017790:	e037883a 	mov	sp,fp
10017794:	df000017 	ldw	fp,0(sp)
10017798:	dec00104 	addi	sp,sp,4
1001779c:	f800283a 	ret

100177a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100177a0:	defff904 	addi	sp,sp,-28
100177a4:	df000615 	stw	fp,24(sp)
100177a8:	df000604 	addi	fp,sp,24
100177ac:	e13ffe15 	stw	r4,-8(fp)
100177b0:	e17fff15 	stw	r5,-4(fp)
100177b4:	e0bfff17 	ldw	r2,-4(fp)
100177b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100177bc:	0005303a 	rdctl	r2,status
100177c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100177c4:	e0fffb17 	ldw	r3,-20(fp)
100177c8:	00bfff84 	movi	r2,-2
100177cc:	1884703a 	and	r2,r3,r2
100177d0:	1001703a 	wrctl	status,r2
  
  return context;
100177d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100177d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100177dc:	00c00044 	movi	r3,1
100177e0:	e0bffa17 	ldw	r2,-24(fp)
100177e4:	1884983a 	sll	r2,r3,r2
100177e8:	0084303a 	nor	r2,zero,r2
100177ec:	1007883a 	mov	r3,r2
100177f0:	008403b4 	movhi	r2,4110
100177f4:	108ab704 	addi	r2,r2,10972
100177f8:	10800017 	ldw	r2,0(r2)
100177fc:	1886703a 	and	r3,r3,r2
10017800:	008403b4 	movhi	r2,4110
10017804:	108ab704 	addi	r2,r2,10972
10017808:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
1001780c:	008403b4 	movhi	r2,4110
10017810:	108ab704 	addi	r2,r2,10972
10017814:	10800017 	ldw	r2,0(r2)
10017818:	100170fa 	wrctl	ienable,r2
1001781c:	e0bffc17 	ldw	r2,-16(fp)
10017820:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017824:	e0bffd17 	ldw	r2,-12(fp)
10017828:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
1001782c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10017830:	0001883a 	nop
}
10017834:	e037883a 	mov	sp,fp
10017838:	df000017 	ldw	fp,0(sp)
1001783c:	dec00104 	addi	sp,sp,4
10017840:	f800283a 	ret

10017844 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10017844:	defffc04 	addi	sp,sp,-16
10017848:	df000315 	stw	fp,12(sp)
1001784c:	df000304 	addi	fp,sp,12
10017850:	e13ffe15 	stw	r4,-8(fp)
10017854:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10017858:	000530fa 	rdctl	r2,ienable
1001785c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10017860:	00c00044 	movi	r3,1
10017864:	e0bfff17 	ldw	r2,-4(fp)
10017868:	1884983a 	sll	r2,r3,r2
1001786c:	1007883a 	mov	r3,r2
10017870:	e0bffd17 	ldw	r2,-12(fp)
10017874:	1884703a 	and	r2,r3,r2
10017878:	1004c03a 	cmpne	r2,r2,zero
1001787c:	10803fcc 	andi	r2,r2,255
}
10017880:	e037883a 	mov	sp,fp
10017884:	df000017 	ldw	fp,0(sp)
10017888:	dec00104 	addi	sp,sp,4
1001788c:	f800283a 	ret

10017890 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10017890:	defff504 	addi	sp,sp,-44
10017894:	dfc00a15 	stw	ra,40(sp)
10017898:	df000915 	stw	fp,36(sp)
1001789c:	df000904 	addi	fp,sp,36
100178a0:	e13ffc15 	stw	r4,-16(fp)
100178a4:	e17ffd15 	stw	r5,-12(fp)
100178a8:	e1bffe15 	stw	r6,-8(fp)
100178ac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
100178b0:	00bffa84 	movi	r2,-22
100178b4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
100178b8:	e0bffd17 	ldw	r2,-12(fp)
100178bc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
100178c0:	e0bff817 	ldw	r2,-32(fp)
100178c4:	10800808 	cmpgei	r2,r2,32
100178c8:	1000271e 	bne	r2,zero,10017968 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100178cc:	0005303a 	rdctl	r2,status
100178d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100178d4:	e0fffb17 	ldw	r3,-20(fp)
100178d8:	00bfff84 	movi	r2,-2
100178dc:	1884703a 	and	r2,r3,r2
100178e0:	1001703a 	wrctl	status,r2
  
  return context;
100178e4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
100178e8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
100178ec:	008403b4 	movhi	r2,4110
100178f0:	108add04 	addi	r2,r2,11124
100178f4:	e0fff817 	ldw	r3,-32(fp)
100178f8:	180690fa 	slli	r3,r3,3
100178fc:	10c5883a 	add	r2,r2,r3
10017900:	e0fffe17 	ldw	r3,-8(fp)
10017904:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10017908:	008403b4 	movhi	r2,4110
1001790c:	108add04 	addi	r2,r2,11124
10017910:	e0fff817 	ldw	r3,-32(fp)
10017914:	180690fa 	slli	r3,r3,3
10017918:	10c5883a 	add	r2,r2,r3
1001791c:	10800104 	addi	r2,r2,4
10017920:	e0ffff17 	ldw	r3,-4(fp)
10017924:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10017928:	e0bffe17 	ldw	r2,-8(fp)
1001792c:	10000526 	beq	r2,zero,10017944 <alt_iic_isr_register+0xb4>
10017930:	e0bff817 	ldw	r2,-32(fp)
10017934:	100b883a 	mov	r5,r2
10017938:	e13ffc17 	ldw	r4,-16(fp)
1001793c:	00177000 	call	10017700 <alt_ic_irq_enable>
10017940:	00000406 	br	10017954 <alt_iic_isr_register+0xc4>
10017944:	e0bff817 	ldw	r2,-32(fp)
10017948:	100b883a 	mov	r5,r2
1001794c:	e13ffc17 	ldw	r4,-16(fp)
10017950:	00177a00 	call	100177a0 <alt_ic_irq_disable>
10017954:	e0bff715 	stw	r2,-36(fp)
10017958:	e0bffa17 	ldw	r2,-24(fp)
1001795c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017960:	e0bff917 	ldw	r2,-28(fp)
10017964:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10017968:	e0bff717 	ldw	r2,-36(fp)
}
1001796c:	e037883a 	mov	sp,fp
10017970:	dfc00117 	ldw	ra,4(sp)
10017974:	df000017 	ldw	fp,0(sp)
10017978:	dec00204 	addi	sp,sp,8
1001797c:	f800283a 	ret

10017980 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10017980:	defff804 	addi	sp,sp,-32
10017984:	dfc00715 	stw	ra,28(sp)
10017988:	df000615 	stw	fp,24(sp)
1001798c:	dc000515 	stw	r16,20(sp)
10017990:	df000604 	addi	fp,sp,24
10017994:	e13ffb15 	stw	r4,-20(fp)
10017998:	e17ffc15 	stw	r5,-16(fp)
1001799c:	e1bffd15 	stw	r6,-12(fp)
100179a0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
100179a4:	e1bffe17 	ldw	r6,-8(fp)
100179a8:	e17ffd17 	ldw	r5,-12(fp)
100179ac:	e13ffc17 	ldw	r4,-16(fp)
100179b0:	0017c240 	call	10017c24 <open>
100179b4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
100179b8:	e0bffa17 	ldw	r2,-24(fp)
100179bc:	10002216 	blt	r2,zero,10017a48 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
100179c0:	04040374 	movhi	r16,4109
100179c4:	841fc804 	addi	r16,r16,32544
100179c8:	e0bffa17 	ldw	r2,-24(fp)
100179cc:	01400304 	movi	r5,12
100179d0:	1009883a 	mov	r4,r2
100179d4:	0005a080 	call	10005a08 <__mulsi3>
100179d8:	8085883a 	add	r2,r16,r2
100179dc:	10c00017 	ldw	r3,0(r2)
100179e0:	e0bffb17 	ldw	r2,-20(fp)
100179e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
100179e8:	04040374 	movhi	r16,4109
100179ec:	841fc804 	addi	r16,r16,32544
100179f0:	e0bffa17 	ldw	r2,-24(fp)
100179f4:	01400304 	movi	r5,12
100179f8:	1009883a 	mov	r4,r2
100179fc:	0005a080 	call	10005a08 <__mulsi3>
10017a00:	8085883a 	add	r2,r16,r2
10017a04:	10800104 	addi	r2,r2,4
10017a08:	10c00017 	ldw	r3,0(r2)
10017a0c:	e0bffb17 	ldw	r2,-20(fp)
10017a10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10017a14:	04040374 	movhi	r16,4109
10017a18:	841fc804 	addi	r16,r16,32544
10017a1c:	e0bffa17 	ldw	r2,-24(fp)
10017a20:	01400304 	movi	r5,12
10017a24:	1009883a 	mov	r4,r2
10017a28:	0005a080 	call	10005a08 <__mulsi3>
10017a2c:	8085883a 	add	r2,r16,r2
10017a30:	10800204 	addi	r2,r2,8
10017a34:	10c00017 	ldw	r3,0(r2)
10017a38:	e0bffb17 	ldw	r2,-20(fp)
10017a3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10017a40:	e13ffa17 	ldw	r4,-24(fp)
10017a44:	0015f0c0 	call	10015f0c <alt_release_fd>
  }
} 
10017a48:	0001883a 	nop
10017a4c:	e6ffff04 	addi	sp,fp,-4
10017a50:	dfc00217 	ldw	ra,8(sp)
10017a54:	df000117 	ldw	fp,4(sp)
10017a58:	dc000017 	ldw	r16,0(sp)
10017a5c:	dec00304 	addi	sp,sp,12
10017a60:	f800283a 	ret

10017a64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10017a64:	defffb04 	addi	sp,sp,-20
10017a68:	dfc00415 	stw	ra,16(sp)
10017a6c:	df000315 	stw	fp,12(sp)
10017a70:	df000304 	addi	fp,sp,12
10017a74:	e13ffd15 	stw	r4,-12(fp)
10017a78:	e17ffe15 	stw	r5,-8(fp)
10017a7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10017a80:	01c07fc4 	movi	r7,511
10017a84:	01800044 	movi	r6,1
10017a88:	e17ffd17 	ldw	r5,-12(fp)
10017a8c:	01040374 	movhi	r4,4109
10017a90:	211fcb04 	addi	r4,r4,32556
10017a94:	00179800 	call	10017980 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10017a98:	01c07fc4 	movi	r7,511
10017a9c:	000d883a 	mov	r6,zero
10017aa0:	e17ffe17 	ldw	r5,-8(fp)
10017aa4:	01040374 	movhi	r4,4109
10017aa8:	211fc804 	addi	r4,r4,32544
10017aac:	00179800 	call	10017980 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10017ab0:	01c07fc4 	movi	r7,511
10017ab4:	01800044 	movi	r6,1
10017ab8:	e17fff17 	ldw	r5,-4(fp)
10017abc:	01040374 	movhi	r4,4109
10017ac0:	211fce04 	addi	r4,r4,32568
10017ac4:	00179800 	call	10017980 <alt_open_fd>
}  
10017ac8:	0001883a 	nop
10017acc:	e037883a 	mov	sp,fp
10017ad0:	dfc00117 	ldw	ra,4(sp)
10017ad4:	df000017 	ldw	fp,0(sp)
10017ad8:	dec00204 	addi	sp,sp,8
10017adc:	f800283a 	ret

10017ae0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017ae0:	defffe04 	addi	sp,sp,-8
10017ae4:	dfc00115 	stw	ra,4(sp)
10017ae8:	df000015 	stw	fp,0(sp)
10017aec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017af0:	008403b4 	movhi	r2,4110
10017af4:	10a46404 	addi	r2,r2,-28272
10017af8:	10800017 	ldw	r2,0(r2)
10017afc:	10000526 	beq	r2,zero,10017b14 <alt_get_errno+0x34>
10017b00:	008403b4 	movhi	r2,4110
10017b04:	10a46404 	addi	r2,r2,-28272
10017b08:	10800017 	ldw	r2,0(r2)
10017b0c:	103ee83a 	callr	r2
10017b10:	00000206 	br	10017b1c <alt_get_errno+0x3c>
10017b14:	008403b4 	movhi	r2,4110
10017b18:	108aa904 	addi	r2,r2,10916
}
10017b1c:	e037883a 	mov	sp,fp
10017b20:	dfc00117 	ldw	ra,4(sp)
10017b24:	df000017 	ldw	fp,0(sp)
10017b28:	dec00204 	addi	sp,sp,8
10017b2c:	f800283a 	ret

10017b30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10017b30:	defffb04 	addi	sp,sp,-20
10017b34:	dfc00415 	stw	ra,16(sp)
10017b38:	df000315 	stw	fp,12(sp)
10017b3c:	dc000215 	stw	r16,8(sp)
10017b40:	df000304 	addi	fp,sp,12
10017b44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10017b48:	e0bffe17 	ldw	r2,-8(fp)
10017b4c:	10800217 	ldw	r2,8(r2)
10017b50:	10d00034 	orhi	r3,r2,16384
10017b54:	e0bffe17 	ldw	r2,-8(fp)
10017b58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017b5c:	e03ffd15 	stw	zero,-12(fp)
10017b60:	00002306 	br	10017bf0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017b64:	04040374 	movhi	r16,4109
10017b68:	841fc804 	addi	r16,r16,32544
10017b6c:	e0bffd17 	ldw	r2,-12(fp)
10017b70:	01400304 	movi	r5,12
10017b74:	1009883a 	mov	r4,r2
10017b78:	0005a080 	call	10005a08 <__mulsi3>
10017b7c:	8085883a 	add	r2,r16,r2
10017b80:	10c00017 	ldw	r3,0(r2)
10017b84:	e0bffe17 	ldw	r2,-8(fp)
10017b88:	10800017 	ldw	r2,0(r2)
10017b8c:	1880151e 	bne	r3,r2,10017be4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017b90:	04040374 	movhi	r16,4109
10017b94:	841fc804 	addi	r16,r16,32544
10017b98:	e0bffd17 	ldw	r2,-12(fp)
10017b9c:	01400304 	movi	r5,12
10017ba0:	1009883a 	mov	r4,r2
10017ba4:	0005a080 	call	10005a08 <__mulsi3>
10017ba8:	8085883a 	add	r2,r16,r2
10017bac:	10800204 	addi	r2,r2,8
10017bb0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017bb4:	10000b0e 	bge	r2,zero,10017be4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10017bb8:	01400304 	movi	r5,12
10017bbc:	e13ffd17 	ldw	r4,-12(fp)
10017bc0:	0005a080 	call	10005a08 <__mulsi3>
10017bc4:	1007883a 	mov	r3,r2
10017bc8:	00840374 	movhi	r2,4109
10017bcc:	109fc804 	addi	r2,r2,32544
10017bd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017bd4:	e0bffe17 	ldw	r2,-8(fp)
10017bd8:	18800226 	beq	r3,r2,10017be4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10017bdc:	00bffcc4 	movi	r2,-13
10017be0:	00000a06 	br	10017c0c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017be4:	e0bffd17 	ldw	r2,-12(fp)
10017be8:	10800044 	addi	r2,r2,1
10017bec:	e0bffd15 	stw	r2,-12(fp)
10017bf0:	008403b4 	movhi	r2,4110
10017bf4:	10a46304 	addi	r2,r2,-28276
10017bf8:	10800017 	ldw	r2,0(r2)
10017bfc:	1007883a 	mov	r3,r2
10017c00:	e0bffd17 	ldw	r2,-12(fp)
10017c04:	18bfd72e 	bgeu	r3,r2,10017b64 <__alt_data_end+0xf8017b64>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10017c08:	0005883a 	mov	r2,zero
}
10017c0c:	e6ffff04 	addi	sp,fp,-4
10017c10:	dfc00217 	ldw	ra,8(sp)
10017c14:	df000117 	ldw	fp,4(sp)
10017c18:	dc000017 	ldw	r16,0(sp)
10017c1c:	dec00304 	addi	sp,sp,12
10017c20:	f800283a 	ret

10017c24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10017c24:	defff604 	addi	sp,sp,-40
10017c28:	dfc00915 	stw	ra,36(sp)
10017c2c:	df000815 	stw	fp,32(sp)
10017c30:	df000804 	addi	fp,sp,32
10017c34:	e13ffd15 	stw	r4,-12(fp)
10017c38:	e17ffe15 	stw	r5,-8(fp)
10017c3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10017c40:	00bfffc4 	movi	r2,-1
10017c44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10017c48:	00bffb44 	movi	r2,-19
10017c4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10017c50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10017c54:	014403b4 	movhi	r5,4110
10017c58:	29646104 	addi	r5,r5,-28284
10017c5c:	e13ffd17 	ldw	r4,-12(fp)
10017c60:	0017da80 	call	10017da8 <alt_find_dev>
10017c64:	e0bff815 	stw	r2,-32(fp)
10017c68:	e0bff817 	ldw	r2,-32(fp)
10017c6c:	1000051e 	bne	r2,zero,10017c84 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10017c70:	e13ffd17 	ldw	r4,-12(fp)
10017c74:	0017e380 	call	10017e38 <alt_find_file>
10017c78:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10017c7c:	00800044 	movi	r2,1
10017c80:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10017c84:	e0bff817 	ldw	r2,-32(fp)
10017c88:	10002b26 	beq	r2,zero,10017d38 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10017c8c:	e13ff817 	ldw	r4,-32(fp)
10017c90:	0017f4c0 	call	10017f4c <alt_get_fd>
10017c94:	e0bff915 	stw	r2,-28(fp)
10017c98:	e0bff917 	ldw	r2,-28(fp)
10017c9c:	1000030e 	bge	r2,zero,10017cac <open+0x88>
    {
      status = index;
10017ca0:	e0bff917 	ldw	r2,-28(fp)
10017ca4:	e0bffa15 	stw	r2,-24(fp)
10017ca8:	00002506 	br	10017d40 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10017cac:	01400304 	movi	r5,12
10017cb0:	e13ff917 	ldw	r4,-28(fp)
10017cb4:	0005a080 	call	10005a08 <__mulsi3>
10017cb8:	1007883a 	mov	r3,r2
10017cbc:	00840374 	movhi	r2,4109
10017cc0:	109fc804 	addi	r2,r2,32544
10017cc4:	1885883a 	add	r2,r3,r2
10017cc8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10017ccc:	e0fffe17 	ldw	r3,-8(fp)
10017cd0:	00900034 	movhi	r2,16384
10017cd4:	10bfffc4 	addi	r2,r2,-1
10017cd8:	1886703a 	and	r3,r3,r2
10017cdc:	e0bffc17 	ldw	r2,-16(fp)
10017ce0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10017ce4:	e0bffb17 	ldw	r2,-20(fp)
10017ce8:	1000051e 	bne	r2,zero,10017d00 <open+0xdc>
10017cec:	e13ffc17 	ldw	r4,-16(fp)
10017cf0:	0017b300 	call	10017b30 <alt_file_locked>
10017cf4:	e0bffa15 	stw	r2,-24(fp)
10017cf8:	e0bffa17 	ldw	r2,-24(fp)
10017cfc:	10001016 	blt	r2,zero,10017d40 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10017d00:	e0bff817 	ldw	r2,-32(fp)
10017d04:	10800317 	ldw	r2,12(r2)
10017d08:	10000826 	beq	r2,zero,10017d2c <open+0x108>
10017d0c:	e0bff817 	ldw	r2,-32(fp)
10017d10:	10800317 	ldw	r2,12(r2)
10017d14:	e1ffff17 	ldw	r7,-4(fp)
10017d18:	e1bffe17 	ldw	r6,-8(fp)
10017d1c:	e17ffd17 	ldw	r5,-12(fp)
10017d20:	e13ffc17 	ldw	r4,-16(fp)
10017d24:	103ee83a 	callr	r2
10017d28:	00000106 	br	10017d30 <open+0x10c>
10017d2c:	0005883a 	mov	r2,zero
10017d30:	e0bffa15 	stw	r2,-24(fp)
10017d34:	00000206 	br	10017d40 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10017d38:	00bffb44 	movi	r2,-19
10017d3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10017d40:	e0bffa17 	ldw	r2,-24(fp)
10017d44:	1000090e 	bge	r2,zero,10017d6c <open+0x148>
  {
    alt_release_fd (index);  
10017d48:	e13ff917 	ldw	r4,-28(fp)
10017d4c:	0015f0c0 	call	10015f0c <alt_release_fd>
    ALT_ERRNO = -status;
10017d50:	0017ae00 	call	10017ae0 <alt_get_errno>
10017d54:	1007883a 	mov	r3,r2
10017d58:	e0bffa17 	ldw	r2,-24(fp)
10017d5c:	0085c83a 	sub	r2,zero,r2
10017d60:	18800015 	stw	r2,0(r3)
    return -1;
10017d64:	00bfffc4 	movi	r2,-1
10017d68:	00000106 	br	10017d70 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10017d6c:	e0bff917 	ldw	r2,-28(fp)
}
10017d70:	e037883a 	mov	sp,fp
10017d74:	dfc00117 	ldw	ra,4(sp)
10017d78:	df000017 	ldw	fp,0(sp)
10017d7c:	dec00204 	addi	sp,sp,8
10017d80:	f800283a 	ret

10017d84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10017d84:	deffff04 	addi	sp,sp,-4
10017d88:	df000015 	stw	fp,0(sp)
10017d8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10017d90:	000170fa 	wrctl	ienable,zero
}
10017d94:	0001883a 	nop
10017d98:	e037883a 	mov	sp,fp
10017d9c:	df000017 	ldw	fp,0(sp)
10017da0:	dec00104 	addi	sp,sp,4
10017da4:	f800283a 	ret

10017da8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10017da8:	defffa04 	addi	sp,sp,-24
10017dac:	dfc00515 	stw	ra,20(sp)
10017db0:	df000415 	stw	fp,16(sp)
10017db4:	df000404 	addi	fp,sp,16
10017db8:	e13ffe15 	stw	r4,-8(fp)
10017dbc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10017dc0:	e0bfff17 	ldw	r2,-4(fp)
10017dc4:	10800017 	ldw	r2,0(r2)
10017dc8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10017dcc:	e13ffe17 	ldw	r4,-8(fp)
10017dd0:	00088880 	call	10008888 <strlen>
10017dd4:	10800044 	addi	r2,r2,1
10017dd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10017ddc:	00000d06 	br	10017e14 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10017de0:	e0bffc17 	ldw	r2,-16(fp)
10017de4:	10800217 	ldw	r2,8(r2)
10017de8:	e0fffd17 	ldw	r3,-12(fp)
10017dec:	180d883a 	mov	r6,r3
10017df0:	e17ffe17 	ldw	r5,-8(fp)
10017df4:	1009883a 	mov	r4,r2
10017df8:	00181580 	call	10018158 <memcmp>
10017dfc:	1000021e 	bne	r2,zero,10017e08 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10017e00:	e0bffc17 	ldw	r2,-16(fp)
10017e04:	00000706 	br	10017e24 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10017e08:	e0bffc17 	ldw	r2,-16(fp)
10017e0c:	10800017 	ldw	r2,0(r2)
10017e10:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10017e14:	e0fffc17 	ldw	r3,-16(fp)
10017e18:	e0bfff17 	ldw	r2,-4(fp)
10017e1c:	18bff01e 	bne	r3,r2,10017de0 <__alt_data_end+0xf8017de0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10017e20:	0005883a 	mov	r2,zero
}
10017e24:	e037883a 	mov	sp,fp
10017e28:	dfc00117 	ldw	ra,4(sp)
10017e2c:	df000017 	ldw	fp,0(sp)
10017e30:	dec00204 	addi	sp,sp,8
10017e34:	f800283a 	ret

10017e38 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10017e38:	defffb04 	addi	sp,sp,-20
10017e3c:	dfc00415 	stw	ra,16(sp)
10017e40:	df000315 	stw	fp,12(sp)
10017e44:	df000304 	addi	fp,sp,12
10017e48:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10017e4c:	008403b4 	movhi	r2,4110
10017e50:	10a45f04 	addi	r2,r2,-28292
10017e54:	10800017 	ldw	r2,0(r2)
10017e58:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10017e5c:	00003106 	br	10017f24 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10017e60:	e0bffd17 	ldw	r2,-12(fp)
10017e64:	10800217 	ldw	r2,8(r2)
10017e68:	1009883a 	mov	r4,r2
10017e6c:	00088880 	call	10008888 <strlen>
10017e70:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10017e74:	e0bffd17 	ldw	r2,-12(fp)
10017e78:	10c00217 	ldw	r3,8(r2)
10017e7c:	e0bffe17 	ldw	r2,-8(fp)
10017e80:	10bfffc4 	addi	r2,r2,-1
10017e84:	1885883a 	add	r2,r3,r2
10017e88:	10800003 	ldbu	r2,0(r2)
10017e8c:	10803fcc 	andi	r2,r2,255
10017e90:	1080201c 	xori	r2,r2,128
10017e94:	10bfe004 	addi	r2,r2,-128
10017e98:	10800bd8 	cmpnei	r2,r2,47
10017e9c:	1000031e 	bne	r2,zero,10017eac <alt_find_file+0x74>
    {
      len -= 1;
10017ea0:	e0bffe17 	ldw	r2,-8(fp)
10017ea4:	10bfffc4 	addi	r2,r2,-1
10017ea8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10017eac:	e0bffe17 	ldw	r2,-8(fp)
10017eb0:	e0ffff17 	ldw	r3,-4(fp)
10017eb4:	1885883a 	add	r2,r3,r2
10017eb8:	10800003 	ldbu	r2,0(r2)
10017ebc:	10803fcc 	andi	r2,r2,255
10017ec0:	1080201c 	xori	r2,r2,128
10017ec4:	10bfe004 	addi	r2,r2,-128
10017ec8:	10800be0 	cmpeqi	r2,r2,47
10017ecc:	1000081e 	bne	r2,zero,10017ef0 <alt_find_file+0xb8>
10017ed0:	e0bffe17 	ldw	r2,-8(fp)
10017ed4:	e0ffff17 	ldw	r3,-4(fp)
10017ed8:	1885883a 	add	r2,r3,r2
10017edc:	10800003 	ldbu	r2,0(r2)
10017ee0:	10803fcc 	andi	r2,r2,255
10017ee4:	1080201c 	xori	r2,r2,128
10017ee8:	10bfe004 	addi	r2,r2,-128
10017eec:	10000a1e 	bne	r2,zero,10017f18 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10017ef0:	e0bffd17 	ldw	r2,-12(fp)
10017ef4:	10800217 	ldw	r2,8(r2)
10017ef8:	e0fffe17 	ldw	r3,-8(fp)
10017efc:	180d883a 	mov	r6,r3
10017f00:	e17fff17 	ldw	r5,-4(fp)
10017f04:	1009883a 	mov	r4,r2
10017f08:	00181580 	call	10018158 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10017f0c:	1000021e 	bne	r2,zero,10017f18 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10017f10:	e0bffd17 	ldw	r2,-12(fp)
10017f14:	00000806 	br	10017f38 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10017f18:	e0bffd17 	ldw	r2,-12(fp)
10017f1c:	10800017 	ldw	r2,0(r2)
10017f20:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10017f24:	e0fffd17 	ldw	r3,-12(fp)
10017f28:	008403b4 	movhi	r2,4110
10017f2c:	10a45f04 	addi	r2,r2,-28292
10017f30:	18bfcb1e 	bne	r3,r2,10017e60 <__alt_data_end+0xf8017e60>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10017f34:	0005883a 	mov	r2,zero
}
10017f38:	e037883a 	mov	sp,fp
10017f3c:	dfc00117 	ldw	ra,4(sp)
10017f40:	df000017 	ldw	fp,0(sp)
10017f44:	dec00204 	addi	sp,sp,8
10017f48:	f800283a 	ret

10017f4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10017f4c:	defffa04 	addi	sp,sp,-24
10017f50:	dfc00515 	stw	ra,20(sp)
10017f54:	df000415 	stw	fp,16(sp)
10017f58:	dc000315 	stw	r16,12(sp)
10017f5c:	df000404 	addi	fp,sp,16
10017f60:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10017f64:	00bffa04 	movi	r2,-24
10017f68:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10017f6c:	e03ffc15 	stw	zero,-16(fp)
10017f70:	00002106 	br	10017ff8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10017f74:	04040374 	movhi	r16,4109
10017f78:	841fc804 	addi	r16,r16,32544
10017f7c:	e0bffc17 	ldw	r2,-16(fp)
10017f80:	01400304 	movi	r5,12
10017f84:	1009883a 	mov	r4,r2
10017f88:	0005a080 	call	10005a08 <__mulsi3>
10017f8c:	8085883a 	add	r2,r16,r2
10017f90:	10800017 	ldw	r2,0(r2)
10017f94:	1000151e 	bne	r2,zero,10017fec <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10017f98:	04040374 	movhi	r16,4109
10017f9c:	841fc804 	addi	r16,r16,32544
10017fa0:	e0bffc17 	ldw	r2,-16(fp)
10017fa4:	01400304 	movi	r5,12
10017fa8:	1009883a 	mov	r4,r2
10017fac:	0005a080 	call	10005a08 <__mulsi3>
10017fb0:	8085883a 	add	r2,r16,r2
10017fb4:	e0fffe17 	ldw	r3,-8(fp)
10017fb8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10017fbc:	008403b4 	movhi	r2,4110
10017fc0:	10a46304 	addi	r2,r2,-28276
10017fc4:	10c00017 	ldw	r3,0(r2)
10017fc8:	e0bffc17 	ldw	r2,-16(fp)
10017fcc:	1880040e 	bge	r3,r2,10017fe0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10017fd0:	008403b4 	movhi	r2,4110
10017fd4:	10a46304 	addi	r2,r2,-28276
10017fd8:	e0fffc17 	ldw	r3,-16(fp)
10017fdc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10017fe0:	e0bffc17 	ldw	r2,-16(fp)
10017fe4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10017fe8:	00000606 	br	10018004 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10017fec:	e0bffc17 	ldw	r2,-16(fp)
10017ff0:	10800044 	addi	r2,r2,1
10017ff4:	e0bffc15 	stw	r2,-16(fp)
10017ff8:	e0bffc17 	ldw	r2,-16(fp)
10017ffc:	10800810 	cmplti	r2,r2,32
10018000:	103fdc1e 	bne	r2,zero,10017f74 <__alt_data_end+0xf8017f74>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10018004:	e0bffd17 	ldw	r2,-12(fp)
}
10018008:	e6ffff04 	addi	sp,fp,-4
1001800c:	dfc00217 	ldw	ra,8(sp)
10018010:	df000117 	ldw	fp,4(sp)
10018014:	dc000017 	ldw	r16,0(sp)
10018018:	dec00304 	addi	sp,sp,12
1001801c:	f800283a 	ret

10018020 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10018020:	defffe04 	addi	sp,sp,-8
10018024:	df000115 	stw	fp,4(sp)
10018028:	df000104 	addi	fp,sp,4
1001802c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10018030:	e0bfff17 	ldw	r2,-4(fp)
10018034:	10bffe84 	addi	r2,r2,-6
10018038:	10c00428 	cmpgeui	r3,r2,16
1001803c:	18001a1e 	bne	r3,zero,100180a8 <alt_exception_cause_generated_bad_addr+0x88>
10018040:	100690ba 	slli	r3,r2,2
10018044:	008400b4 	movhi	r2,4098
10018048:	10a01604 	addi	r2,r2,-32680
1001804c:	1885883a 	add	r2,r3,r2
10018050:	10800017 	ldw	r2,0(r2)
10018054:	1000683a 	jmp	r2
10018058:	10018098 	cmpnei	zero,r2,1538
1001805c:	10018098 	cmpnei	zero,r2,1538
10018060:	100180a8 	cmpgeui	zero,r2,1538
10018064:	100180a8 	cmpgeui	zero,r2,1538
10018068:	100180a8 	cmpgeui	zero,r2,1538
1001806c:	10018098 	cmpnei	zero,r2,1538
10018070:	100180a0 	cmpeqi	zero,r2,1538
10018074:	100180a8 	cmpgeui	zero,r2,1538
10018078:	10018098 	cmpnei	zero,r2,1538
1001807c:	10018098 	cmpnei	zero,r2,1538
10018080:	100180a8 	cmpgeui	zero,r2,1538
10018084:	10018098 	cmpnei	zero,r2,1538
10018088:	100180a0 	cmpeqi	zero,r2,1538
1001808c:	100180a8 	cmpgeui	zero,r2,1538
10018090:	100180a8 	cmpgeui	zero,r2,1538
10018094:	10018098 	cmpnei	zero,r2,1538
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10018098:	00800044 	movi	r2,1
1001809c:	00000306 	br	100180ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100180a0:	0005883a 	mov	r2,zero
100180a4:	00000106 	br	100180ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100180a8:	0005883a 	mov	r2,zero
  }
}
100180ac:	e037883a 	mov	sp,fp
100180b0:	df000017 	ldw	fp,0(sp)
100180b4:	dec00104 	addi	sp,sp,4
100180b8:	f800283a 	ret

100180bc <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
100180bc:	defffd04 	addi	sp,sp,-12
100180c0:	dfc00215 	stw	ra,8(sp)
100180c4:	df000115 	stw	fp,4(sp)
100180c8:	df000104 	addi	fp,sp,4
100180cc:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
100180d0:	000f883a 	mov	r7,zero
100180d4:	000d883a 	mov	r6,zero
100180d8:	e17fff17 	ldw	r5,-4(fp)
100180dc:	0009883a 	mov	r4,zero
100180e0:	001828c0 	call	1001828c <__register_exitproc>
}
100180e4:	e037883a 	mov	sp,fp
100180e8:	dfc00117 	ldw	ra,4(sp)
100180ec:	df000017 	ldw	fp,0(sp)
100180f0:	dec00204 	addi	sp,sp,8
100180f4:	f800283a 	ret

100180f8 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
100180f8:	defffd04 	addi	sp,sp,-12
100180fc:	dfc00215 	stw	ra,8(sp)
10018100:	df000115 	stw	fp,4(sp)
10018104:	df000104 	addi	fp,sp,4
10018108:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
1001810c:	000b883a 	mov	r5,zero
10018110:	e13fff17 	ldw	r4,-4(fp)
10018114:	00184240 	call	10018424 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
10018118:	008403b4 	movhi	r2,4110
1001811c:	10a45104 	addi	r2,r2,-28348
10018120:	10800017 	ldw	r2,0(r2)
10018124:	10800f17 	ldw	r2,60(r2)
10018128:	10000926 	beq	r2,zero,10018150 <exit+0x58>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
1001812c:	008403b4 	movhi	r2,4110
10018130:	10a45104 	addi	r2,r2,-28348
10018134:	10800017 	ldw	r2,0(r2)
10018138:	10c00f17 	ldw	r3,60(r2)
1001813c:	008403b4 	movhi	r2,4110
10018140:	10a45104 	addi	r2,r2,-28348
10018144:	10800017 	ldw	r2,0(r2)
10018148:	1009883a 	mov	r4,r2
1001814c:	183ee83a 	callr	r3
#endif							/* AlteraSpecific */
  _exit (code);
10018150:	e13fff17 	ldw	r4,-4(fp)
10018154:	001872c0 	call	1001872c <_exit>

10018158 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
10018158:	defff804 	addi	sp,sp,-32
1001815c:	df000715 	stw	fp,28(sp)
10018160:	df000704 	addi	fp,sp,28
10018164:	e13ffd15 	stw	r4,-12(fp)
10018168:	e17ffe15 	stw	r5,-8(fp)
1001816c:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
10018170:	e0bffd17 	ldw	r2,-12(fp)
10018174:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
10018178:	e0bffe17 	ldw	r2,-8(fp)
1001817c:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
10018180:	e0bfff17 	ldw	r2,-4(fp)
10018184:	10800130 	cmpltui	r2,r2,4
10018188:	1000371e 	bne	r2,zero,10018268 <memcmp+0x110>
1001818c:	e0fff917 	ldw	r3,-28(fp)
10018190:	e0bffa17 	ldw	r2,-24(fp)
10018194:	1884b03a 	or	r2,r3,r2
10018198:	108000cc 	andi	r2,r2,3
1001819c:	1000321e 	bne	r2,zero,10018268 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
100181a0:	e0bff917 	ldw	r2,-28(fp)
100181a4:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
100181a8:	e0bffa17 	ldw	r2,-24(fp)
100181ac:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
100181b0:	00000e06 	br	100181ec <memcmp+0x94>
        {
          if (*a1 != *a2) 
100181b4:	e0bffb17 	ldw	r2,-20(fp)
100181b8:	10c00017 	ldw	r3,0(r2)
100181bc:	e0bffc17 	ldw	r2,-16(fp)
100181c0:	10800017 	ldw	r2,0(r2)
100181c4:	18800d1e 	bne	r3,r2,100181fc <memcmp+0xa4>
   	    break;
          a1++;
100181c8:	e0bffb17 	ldw	r2,-20(fp)
100181cc:	10800104 	addi	r2,r2,4
100181d0:	e0bffb15 	stw	r2,-20(fp)
          a2++;
100181d4:	e0bffc17 	ldw	r2,-16(fp)
100181d8:	10800104 	addi	r2,r2,4
100181dc:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
100181e0:	e0bfff17 	ldw	r2,-4(fp)
100181e4:	10bfff04 	addi	r2,r2,-4
100181e8:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
100181ec:	e0bfff17 	ldw	r2,-4(fp)
100181f0:	10800128 	cmpgeui	r2,r2,4
100181f4:	103fef1e 	bne	r2,zero,100181b4 <__alt_data_end+0xf80181b4>
100181f8:	00000106 	br	10018200 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
100181fc:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
10018200:	e0bffb17 	ldw	r2,-20(fp)
10018204:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
10018208:	e0bffc17 	ldw	r2,-16(fp)
1001820c:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
10018210:	00001506 	br	10018268 <memcmp+0x110>
    {
      if (*s1 != *s2)
10018214:	e0bff917 	ldw	r2,-28(fp)
10018218:	10c00003 	ldbu	r3,0(r2)
1001821c:	e0bffa17 	ldw	r2,-24(fp)
10018220:	10800003 	ldbu	r2,0(r2)
10018224:	18c03fcc 	andi	r3,r3,255
10018228:	10803fcc 	andi	r2,r2,255
1001822c:	18800826 	beq	r3,r2,10018250 <memcmp+0xf8>
	return *s1 - *s2;
10018230:	e0bff917 	ldw	r2,-28(fp)
10018234:	10800003 	ldbu	r2,0(r2)
10018238:	10c03fcc 	andi	r3,r2,255
1001823c:	e0bffa17 	ldw	r2,-24(fp)
10018240:	10800003 	ldbu	r2,0(r2)
10018244:	10803fcc 	andi	r2,r2,255
10018248:	1885c83a 	sub	r2,r3,r2
1001824c:	00000b06 	br	1001827c <memcmp+0x124>
      s1++;
10018250:	e0bff917 	ldw	r2,-28(fp)
10018254:	10800044 	addi	r2,r2,1
10018258:	e0bff915 	stw	r2,-28(fp)
      s2++;
1001825c:	e0bffa17 	ldw	r2,-24(fp)
10018260:	10800044 	addi	r2,r2,1
10018264:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
10018268:	e0bfff17 	ldw	r2,-4(fp)
1001826c:	10ffffc4 	addi	r3,r2,-1
10018270:	e0ffff15 	stw	r3,-4(fp)
10018274:	103fe71e 	bne	r2,zero,10018214 <__alt_data_end+0xf8018214>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
10018278:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1001827c:	e037883a 	mov	sp,fp
10018280:	df000017 	ldw	fp,0(sp)
10018284:	dec00104 	addi	sp,sp,4
10018288:	f800283a 	ret

1001828c <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
1001828c:	defff804 	addi	sp,sp,-32
10018290:	dfc00715 	stw	ra,28(sp)
10018294:	df000615 	stw	fp,24(sp)
10018298:	dc000515 	stw	r16,20(sp)
1001829c:	df000604 	addi	fp,sp,24
100182a0:	e13ffb15 	stw	r4,-20(fp)
100182a4:	e17ffc15 	stw	r5,-16(fp)
100182a8:	e1bffd15 	stw	r6,-12(fp)
100182ac:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
100182b0:	008403b4 	movhi	r2,4110
100182b4:	10a45104 	addi	r2,r2,-28348
100182b8:	10800017 	ldw	r2,0(r2)
100182bc:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
100182c0:	8000081e 	bne	r16,zero,100182e4 <__register_exitproc+0x58>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
100182c4:	008403b4 	movhi	r2,4110
100182c8:	10a45104 	addi	r2,r2,-28348
100182cc:	10c00017 	ldw	r3,0(r2)
100182d0:	008403b4 	movhi	r2,4110
100182d4:	10a45104 	addi	r2,r2,-28348
100182d8:	10800017 	ldw	r2,0(r2)
100182dc:	14005304 	addi	r16,r2,332
100182e0:	1c005215 	stw	r16,328(r3)
  if (p->_ind >= _ATEXIT_SIZE)
100182e4:	80800117 	ldw	r2,4(r16)
100182e8:	10800810 	cmplti	r2,r2,32
100182ec:	1000171e 	bne	r2,zero,1001834c <__register_exitproc+0xc0>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
100182f0:	00840034 	movhi	r2,4096
100182f4:	1097f404 	addi	r2,r2,24528
100182f8:	1000021e 	bne	r2,zero,10018304 <__register_exitproc+0x78>
	return -1;
100182fc:	00bfffc4 	movi	r2,-1
10018300:	00004206 	br	1001840c <__register_exitproc+0x180>

      p = (struct _atexit *) malloc (sizeof *p);
10018304:	01006404 	movi	r4,400
10018308:	0005fd00 	call	10005fd0 <malloc>
1001830c:	1021883a 	mov	r16,r2
      if (p == NULL)
10018310:	8000021e 	bne	r16,zero,1001831c <__register_exitproc+0x90>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
10018314:	00bfffc4 	movi	r2,-1
10018318:	00003c06 	br	1001840c <__register_exitproc+0x180>
	}
      p->_ind = 0;
1001831c:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
10018320:	008403b4 	movhi	r2,4110
10018324:	10a45104 	addi	r2,r2,-28348
10018328:	10800017 	ldw	r2,0(r2)
1001832c:	10805217 	ldw	r2,328(r2)
10018330:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
10018334:	008403b4 	movhi	r2,4110
10018338:	10a45104 	addi	r2,r2,-28348
1001833c:	10800017 	ldw	r2,0(r2)
10018340:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
10018344:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
10018348:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
1001834c:	e0bffb17 	ldw	r2,-20(fp)
10018350:	10002426 	beq	r2,zero,100183e4 <__register_exitproc+0x158>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
10018354:	80802204 	addi	r2,r16,136
10018358:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
1001835c:	80800117 	ldw	r2,4(r16)
10018360:	e0fffa17 	ldw	r3,-24(fp)
10018364:	1085883a 	add	r2,r2,r2
10018368:	1085883a 	add	r2,r2,r2
1001836c:	1885883a 	add	r2,r3,r2
10018370:	e0fffd17 	ldw	r3,-12(fp)
10018374:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
10018378:	e0bffa17 	ldw	r2,-24(fp)
1001837c:	10804017 	ldw	r2,256(r2)
10018380:	80c00117 	ldw	r3,4(r16)
10018384:	01000044 	movi	r4,1
10018388:	20c6983a 	sll	r3,r4,r3
1001838c:	10c6b03a 	or	r3,r2,r3
10018390:	e0bffa17 	ldw	r2,-24(fp)
10018394:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
10018398:	80800117 	ldw	r2,4(r16)
1001839c:	e0fffa17 	ldw	r3,-24(fp)
100183a0:	10800804 	addi	r2,r2,32
100183a4:	1085883a 	add	r2,r2,r2
100183a8:	1085883a 	add	r2,r2,r2
100183ac:	1885883a 	add	r2,r3,r2
100183b0:	e0fffe17 	ldw	r3,-8(fp)
100183b4:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
100183b8:	e0bffb17 	ldw	r2,-20(fp)
100183bc:	10800098 	cmpnei	r2,r2,2
100183c0:	1000081e 	bne	r2,zero,100183e4 <__register_exitproc+0x158>
	args->_is_cxa |= (1 << p->_ind);
100183c4:	e0bffa17 	ldw	r2,-24(fp)
100183c8:	10804117 	ldw	r2,260(r2)
100183cc:	80c00117 	ldw	r3,4(r16)
100183d0:	01000044 	movi	r4,1
100183d4:	20c6983a 	sll	r3,r4,r3
100183d8:	10c6b03a 	or	r3,r2,r3
100183dc:	e0bffa17 	ldw	r2,-24(fp)
100183e0:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
100183e4:	80800117 	ldw	r2,4(r16)
100183e8:	10c00044 	addi	r3,r2,1
100183ec:	80c00115 	stw	r3,4(r16)
100183f0:	10800084 	addi	r2,r2,2
100183f4:	1085883a 	add	r2,r2,r2
100183f8:	1085883a 	add	r2,r2,r2
100183fc:	8085883a 	add	r2,r16,r2
10018400:	e0fffc17 	ldw	r3,-16(fp)
10018404:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
10018408:	0005883a 	mov	r2,zero
}
1001840c:	e6ffff04 	addi	sp,fp,-4
10018410:	dfc00217 	ldw	ra,8(sp)
10018414:	df000117 	ldw	fp,4(sp)
10018418:	dc000017 	ldw	r16,0(sp)
1001841c:	dec00304 	addi	sp,sp,12
10018420:	f800283a 	ret

10018424 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
10018424:	defff504 	addi	sp,sp,-44
10018428:	dfc00a15 	stw	ra,40(sp)
1001842c:	df000915 	stw	fp,36(sp)
10018430:	dc800815 	stw	r18,32(sp)
10018434:	dc400715 	stw	r17,28(sp)
10018438:	dc000615 	stw	r16,24(sp)
1001843c:	df000904 	addi	fp,sp,36
10018440:	e13ffb15 	stw	r4,-20(fp)
10018444:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
10018448:	008403b4 	movhi	r2,4110
1001844c:	10a45104 	addi	r2,r2,-28348
10018450:	10800017 	ldw	r2,0(r2)
10018454:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
10018458:	008403b4 	movhi	r2,4110
1001845c:	10a45104 	addi	r2,r2,-28348
10018460:	10800017 	ldw	r2,0(r2)
10018464:	10805204 	addi	r2,r2,328
10018468:	e0bff715 	stw	r2,-36(fp)
  while (p)
1001846c:	00006006 	br	100185f0 <__call_exitprocs+0x1cc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
10018470:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
10018474:	80800117 	ldw	r2,4(r16)
10018478:	147fffc4 	addi	r17,r2,-1
1001847c:	00004a06 	br	100185a8 <__call_exitprocs+0x184>
	{
	  int ind;

	  i = 1 << n;
10018480:	00800044 	movi	r2,1
10018484:	1444983a 	sll	r2,r2,r17
10018488:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
1001848c:	e0bffc17 	ldw	r2,-16(fp)
10018490:	10000826 	beq	r2,zero,100184b4 <__call_exitprocs+0x90>
10018494:	90004026 	beq	r18,zero,10018598 <__call_exitprocs+0x174>
10018498:	88800804 	addi	r2,r17,32
1001849c:	1085883a 	add	r2,r2,r2
100184a0:	1085883a 	add	r2,r2,r2
100184a4:	9085883a 	add	r2,r18,r2
100184a8:	10c00017 	ldw	r3,0(r2)
100184ac:	e0bffc17 	ldw	r2,-16(fp)
100184b0:	1880391e 	bne	r3,r2,10018598 <__call_exitprocs+0x174>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
100184b4:	88800084 	addi	r2,r17,2
100184b8:	1085883a 	add	r2,r2,r2
100184bc:	1085883a 	add	r2,r2,r2
100184c0:	8085883a 	add	r2,r16,r2
100184c4:	10800017 	ldw	r2,0(r2)
100184c8:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
100184cc:	80800117 	ldw	r2,4(r16)
100184d0:	10bfffc4 	addi	r2,r2,-1
100184d4:	1440041e 	bne	r2,r17,100184e8 <__call_exitprocs+0xc4>
	    p->_ind--;
100184d8:	80800117 	ldw	r2,4(r16)
100184dc:	10bfffc4 	addi	r2,r2,-1
100184e0:	80800115 	stw	r2,4(r16)
100184e4:	00000506 	br	100184fc <__call_exitprocs+0xd8>
	  else
	    p->_fns[n] = NULL;
100184e8:	88800084 	addi	r2,r17,2
100184ec:	1085883a 	add	r2,r2,r2
100184f0:	1085883a 	add	r2,r2,r2
100184f4:	8085883a 	add	r2,r16,r2
100184f8:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
100184fc:	e0bff917 	ldw	r2,-28(fp)
10018500:	10002726 	beq	r2,zero,100185a0 <__call_exitprocs+0x17c>
	    continue;

	  ind = p->_ind;
10018504:	80800117 	ldw	r2,4(r16)
10018508:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
1001850c:	90000426 	beq	r18,zero,10018520 <__call_exitprocs+0xfc>
10018510:	90c04017 	ldw	r3,256(r18)
10018514:	e0bff817 	ldw	r2,-32(fp)
10018518:	1884703a 	and	r2,r3,r2
1001851c:	1000031e 	bne	r2,zero,1001852c <__call_exitprocs+0x108>
	    fn ();
10018520:	e0bff917 	ldw	r2,-28(fp)
10018524:	103ee83a 	callr	r2
10018528:	00001406 	br	1001857c <__call_exitprocs+0x158>
	  else if ((args->_is_cxa & i) == 0)
1001852c:	90c04117 	ldw	r3,260(r18)
10018530:	e0bff817 	ldw	r2,-32(fp)
10018534:	1884703a 	and	r2,r3,r2
10018538:	1000091e 	bne	r2,zero,10018560 <__call_exitprocs+0x13c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
1001853c:	8c45883a 	add	r2,r17,r17
10018540:	1085883a 	add	r2,r2,r2
10018544:	9085883a 	add	r2,r18,r2
10018548:	10c00017 	ldw	r3,0(r2)
1001854c:	e0bff917 	ldw	r2,-28(fp)
10018550:	180b883a 	mov	r5,r3
10018554:	e13ffb17 	ldw	r4,-20(fp)
10018558:	103ee83a 	callr	r2
1001855c:	00000706 	br	1001857c <__call_exitprocs+0x158>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
10018560:	8c45883a 	add	r2,r17,r17
10018564:	1085883a 	add	r2,r2,r2
10018568:	9085883a 	add	r2,r18,r2
1001856c:	10c00017 	ldw	r3,0(r2)
10018570:	e0bff917 	ldw	r2,-28(fp)
10018574:	1809883a 	mov	r4,r3
10018578:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
1001857c:	80c00117 	ldw	r3,4(r16)
10018580:	e0bffa17 	ldw	r2,-24(fp)
10018584:	18bfb01e 	bne	r3,r2,10018448 <__alt_data_end+0xf8018448>
10018588:	e0bff717 	ldw	r2,-36(fp)
1001858c:	10800017 	ldw	r2,0(r2)
10018590:	143fad1e 	bne	r2,r16,10018448 <__alt_data_end+0xf8018448>
10018594:	00000306 	br	100185a4 <__call_exitprocs+0x180>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
10018598:	0001883a 	nop
1001859c:	00000106 	br	100185a4 <__call_exitprocs+0x180>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
100185a0:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
100185a4:	8c7fffc4 	addi	r17,r17,-1
100185a8:	883fb50e 	bge	r17,zero,10018480 <__alt_data_end+0xf8018480>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
100185ac:	00840034 	movhi	r2,4096
100185b0:	10980404 	addi	r2,r2,24592
100185b4:	10001026 	beq	r2,zero,100185f8 <__call_exitprocs+0x1d4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
100185b8:	80800117 	ldw	r2,4(r16)
100185bc:	10000a1e 	bne	r2,zero,100185e8 <__call_exitprocs+0x1c4>
100185c0:	80800017 	ldw	r2,0(r16)
100185c4:	10000826 	beq	r2,zero,100185e8 <__call_exitprocs+0x1c4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
100185c8:	80c00017 	ldw	r3,0(r16)
100185cc:	e0bff717 	ldw	r2,-36(fp)
100185d0:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
100185d4:	8009883a 	mov	r4,r16
100185d8:	00060100 	call	10006010 <free>
	  p = *lastp;
100185dc:	e0bff717 	ldw	r2,-36(fp)
100185e0:	14000017 	ldw	r16,0(r2)
100185e4:	00000206 	br	100185f0 <__call_exitprocs+0x1cc>
	}
      else
	{
	  lastp = &p->_next;
100185e8:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
100185ec:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
100185f0:	803f9f1e 	bne	r16,zero,10018470 <__alt_data_end+0xf8018470>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
100185f4:	00000106 	br	100185fc <__call_exitprocs+0x1d8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
100185f8:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
100185fc:	0001883a 	nop
10018600:	e6fffd04 	addi	sp,fp,-12
10018604:	dfc00417 	ldw	ra,16(sp)
10018608:	df000317 	ldw	fp,12(sp)
1001860c:	dc800217 	ldw	r18,8(sp)
10018610:	dc400117 	ldw	r17,4(sp)
10018614:	dc000017 	ldw	r16,0(sp)
10018618:	dec00504 	addi	sp,sp,20
1001861c:	f800283a 	ret

10018620 <__muldi3>:
10018620:	defff604 	addi	sp,sp,-40
10018624:	dd800615 	stw	r22,24(sp)
10018628:	dd400515 	stw	r21,20(sp)
1001862c:	dc400115 	stw	r17,4(sp)
10018630:	357fffcc 	andi	r21,r6,65535
10018634:	2022d43a 	srli	r17,r4,16
10018638:	25bfffcc 	andi	r22,r4,65535
1001863c:	dcc00315 	stw	r19,12(sp)
10018640:	dc800215 	stw	r18,8(sp)
10018644:	2027883a 	mov	r19,r4
10018648:	2825883a 	mov	r18,r5
1001864c:	b009883a 	mov	r4,r22
10018650:	a80b883a 	mov	r5,r21
10018654:	dfc00915 	stw	ra,36(sp)
10018658:	df000815 	stw	fp,32(sp)
1001865c:	ddc00715 	stw	r23,28(sp)
10018660:	3839883a 	mov	fp,r7
10018664:	302ed43a 	srli	r23,r6,16
10018668:	dd000415 	stw	r20,16(sp)
1001866c:	dc000015 	stw	r16,0(sp)
10018670:	3029883a 	mov	r20,r6
10018674:	0005a080 	call	10005a08 <__mulsi3>
10018678:	a80b883a 	mov	r5,r21
1001867c:	8809883a 	mov	r4,r17
10018680:	1021883a 	mov	r16,r2
10018684:	0005a080 	call	10005a08 <__mulsi3>
10018688:	8809883a 	mov	r4,r17
1001868c:	b80b883a 	mov	r5,r23
10018690:	102b883a 	mov	r21,r2
10018694:	0005a080 	call	10005a08 <__mulsi3>
10018698:	b80b883a 	mov	r5,r23
1001869c:	b009883a 	mov	r4,r22
100186a0:	1023883a 	mov	r17,r2
100186a4:	0005a080 	call	10005a08 <__mulsi3>
100186a8:	8006d43a 	srli	r3,r16,16
100186ac:	1545883a 	add	r2,r2,r21
100186b0:	1885883a 	add	r2,r3,r2
100186b4:	1540022e 	bgeu	r2,r21,100186c0 <__muldi3+0xa0>
100186b8:	00c00074 	movhi	r3,1
100186bc:	88e3883a 	add	r17,r17,r3
100186c0:	1006d43a 	srli	r3,r2,16
100186c4:	1004943a 	slli	r2,r2,16
100186c8:	e00b883a 	mov	r5,fp
100186cc:	9809883a 	mov	r4,r19
100186d0:	843fffcc 	andi	r16,r16,65535
100186d4:	1c63883a 	add	r17,r3,r17
100186d8:	1421883a 	add	r16,r2,r16
100186dc:	0005a080 	call	10005a08 <__mulsi3>
100186e0:	900b883a 	mov	r5,r18
100186e4:	a009883a 	mov	r4,r20
100186e8:	1027883a 	mov	r19,r2
100186ec:	0005a080 	call	10005a08 <__mulsi3>
100186f0:	9885883a 	add	r2,r19,r2
100186f4:	1447883a 	add	r3,r2,r17
100186f8:	8005883a 	mov	r2,r16
100186fc:	dfc00917 	ldw	ra,36(sp)
10018700:	df000817 	ldw	fp,32(sp)
10018704:	ddc00717 	ldw	r23,28(sp)
10018708:	dd800617 	ldw	r22,24(sp)
1001870c:	dd400517 	ldw	r21,20(sp)
10018710:	dd000417 	ldw	r20,16(sp)
10018714:	dcc00317 	ldw	r19,12(sp)
10018718:	dc800217 	ldw	r18,8(sp)
1001871c:	dc400117 	ldw	r17,4(sp)
10018720:	dc000017 	ldw	r16,0(sp)
10018724:	dec00a04 	addi	sp,sp,40
10018728:	f800283a 	ret

1001872c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001872c:	defffd04 	addi	sp,sp,-12
10018730:	df000215 	stw	fp,8(sp)
10018734:	df000204 	addi	fp,sp,8
10018738:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001873c:	0001883a 	nop
10018740:	e0bfff17 	ldw	r2,-4(fp)
10018744:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10018748:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001874c:	10000226 	beq	r2,zero,10018758 <_exit+0x2c>
    ALT_SIM_FAIL();
10018750:	002af070 	cmpltui	zero,zero,43969
10018754:	00000106 	br	1001875c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10018758:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001875c:	003fff06 	br	1001875c <__alt_data_end+0xf801875c>
