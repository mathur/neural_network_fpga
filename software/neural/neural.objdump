
neural.elf:     file format elf32-littlenios2
neural.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000cfb34 memsz 0x000cfb34 flags r-x
    LOAD off    0x000d0b54 vaddr 0x100cfb54 paddr 0x100d93dc align 2**12
         filesz 0x00009888 memsz 0x00009888 flags rw-
    LOAD off    0x000dac64 vaddr 0x100e2c64 paddr 0x100e2c64 align 2**12
         filesz 0x00000000 memsz 0x000001f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018730  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000b71f4  10018960  10018960  00019960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00009888  100cfb54  100d93dc  000d0b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000001f0  100e2c64  100e2c64  000dac64  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000da3dc  2**0
                  CONTENTS
  7 .sdram        00000000  100e2e54  100e2e54  000da3dc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000da3dc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001438  00000000  00000000  000da400  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002e787  00000000  00000000  000db838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b91d  00000000  00000000  00109fbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000d617  00000000  00000000  001158dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003258  00000000  00000000  00122ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000047e4  00000000  00000000  0012614c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000bb43  00000000  00000000  0012a930  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00136474  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001b20  00000000  00000000  00136488  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0013bfe2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0013bfe5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0013bff1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0013bff2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0013bff3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0013bff7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0013bffb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0013bfff  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0013c00a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0013c015  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0013c020  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000016  00000000  00000000  0013c02a  2**0
                  CONTENTS, READONLY
 30 .jdi          000043c0  00000000  00000000  0013c040  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00075370  00000000  00000000  00140400  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10018960 l    d  .rodata	00000000 .rodata
100cfb54 l    d  .rwdata	00000000 .rwdata
100e2c64 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
100e2e54 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../neural_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 formula.c
1000063c l     F .text	000000b8 printme
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 types.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 calloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 drand48.c
00000000 l    df *ABS*	00000000 erand48.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
100d7854 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
10006c24 l     F .text	000003b4 malloc_extend_top
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand48.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 s_ldexp.c
00000000 l    df *ABS*	00000000 s_scalbn.c
100d9340 l     O .rwdata	00000008 two54
100d9348 l     O .rwdata	00000008 twom54
100d9350 l     O .rwdata	00000008 huge
100d9358 l     O .rwdata	00000008 tiny
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
100098f0 l     F .text	000000f0 __sbprintf
1000bb20 l     F .text	0000020c cvt
1000bd2c l     F .text	00000140 exponent
100cf6ba l     O .rodata	00000010 blanks.4403
100cf6ca l     O .rodata	00000010 zeroes.4404
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
100cf6da l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
1000c014 l     F .text	000003c4 quorem
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1000e368 l     F .text	000000f4 std
100e2c7c l     O .bss	00000004 __sfp_lock
100e2c80 l     O .bss	00000004 __sinit_lock
1000e89c l     F .text	00000024 __fp_lock
1000e8c0 l     F .text	00000024 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
100d8080 l     O .rwdata	00000038 lconv
100d80b8 l     O .rwdata	00000020 lc_ctype_charset
100d80d8 l     O .rwdata	00000020 lc_message_charset
100e2c94 l     O .bss	00000004 lc_ctype_cjk_lang
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
100cfa9c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 refill.c
10011ec8 l     F .text	00000050 lflush
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10012874 l     F .text	000000f0 __sbprintf
100cfaf2 l     O .rodata	00000010 blanks.4348
100cfb02 l     O .rodata	00000010 zeroes.4349
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
10015780 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
100158a8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
100158d4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
10015be0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
10015cdc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
10015dc8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
10015fb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100d9384 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
100163e4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10016534 l     F .text	00000038 alt_dev_reg
100d82a0 l     O .rwdata	00001060 jtag_uart_0
100d9300 l     O .rwdata	00000028 altera_hostfs
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10016828 l     F .text	0000020c altera_avalon_jtag_uart_irq
10016a34 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
100d9390 l     O .rwdata	00000009 hcinfo.2538
100d939c l     O .rwdata	0000000a hcinfo.2551
100d93a8 l     O .rwdata	00000009 hcinfo.2560
100d93b4 l     O .rwdata	0000000a hcinfo.2573
100d93c0 l     O .rwdata	0000000a hcinfo.2586
100d93cc l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10017658 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10017b80 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10017ce0 l     F .text	00000050 alt_get_errno
10017d30 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
100e2cc4 l     O .bss	00000004 __atexit_lock
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
100e2cc0 g     O .bss	00000004 alt_instruction_exception_handler
100d932c g     O .rwdata	00000004 to_sw_port
10007e38 g     F .text	00000050 putchar
10011a00 g     F .text	000000b0 _mprec_log10
10011b80 g     F .text	00000134 __any_on
10014420 g     F .text	00000078 _isatty_r
100cfa74 g     O .rodata	00000028 __mprec_tinytens
10015ef4 g     F .text	0000007c alt_main
10007e88 g     F .text	00000118 _puts_r
100e2d54 g     O .bss	00000100 alt_irq
10014498 g     F .text	00000088 _lseek_r
100d93dc g       *ABS*	00000000 __flash_rwdata_start
10015418 g     F .text	00000088 .hidden __eqdf2
1000f858 g     F .text	00000080 _gettimeofday_r
100e2e54 g       *ABS*	00000000 __alt_heap_start
10007d7c g     F .text	00000078 printf
100145a8 g     F .text	000000e4 _wcrtomb_r
10012504 g     F .text	000000a0 __sseek
1000e744 g     F .text	000000d8 __sinit
10013c98 g     F .text	00000168 __swbuf_r
1000f8d8 g     F .text	00000084 _setlocale_r
1000e45c g     F .text	000000bc __sfmoreglue
10015f94 g     F .text	00000024 __malloc_unlock
10017074 g     F .text	0000011c alt_hostfs_open
10002c14 g     F .text	00000440 .hidden __divsf3
100e2cf0 g     O .bss	00000028 layer_2
1000fffc g     F .text	00000208 memmove
1000e708 g     F .text	0000003c _cleanup
10010204 g     F .text	00000130 _Balloc
10003b64 g     F .text	00000070 .hidden __fixsfsi
100154a0 g     F .text	000000dc .hidden __gtdf2
10017f84 g     F .text	00000024 altera_nios2_gen2_irq_init
1000df50 g     F .text	00000028 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100143a0 g     F .text	00000080 _fstat_r
100e2c84 g     O .bss	00000004 errno
10008e60 g     F .text	00000040 __srget
10012420 g     F .text	00000030 __seofread
100e2cac g     O .bss	00000004 alt_argv
100e1328 g       *ABS*	00000000 _gp
1000211c g     F .text	000002b8 backprop_layer_2
10003680 g     F .text	000004e4 .hidden __subsf3
100d8120 g     O .rwdata	00000180 alt_fd_list
10006a64 g     F .text	00000098 _getc_r
10006afc g     F .text	000000a4 getc
100172ac g     F .text	00000068 alt_hostfs_seek
10007df4 g     F .text	00000044 _putchar_r
10017fa8 g     F .text	00000090 alt_find_dev
1000fe74 g     F .text	00000188 memcpy
1000e6c4 g     F .text	00000044 _cleanup_r
100155fc g     F .text	000000dc .hidden __floatsidf
1001780c g     F .text	00000084 alt_fs_reg
10017c64 g     F .text	0000007c alt_io_redirect
10005064 g     F .text	000000f4 .hidden __ltdf2
10018960 g       *ABS*	00000000 __DTOR_END__
10007fa0 g     F .text	00000040 puts
10018220 g     F .text	0000009c alt_exception_cause_generated_bad_addr
100e2c64 g     O .bss	00000004 total_runs
10012280 g     F .text	00000104 __fpclassifyd
1000026c g     F .text	00000210 sigmoid
100118e4 g     F .text	0000011c __ratio
10012964 g     F .text	00000058 __vfiprintf_internal
10016c34 g     F .text	0000021c altera_avalon_jtag_uart_read
10006ba0 g     F .text	00000040 malloc
10007d18 g     F .text	00000064 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002690 g     F .text	00000064 .hidden __udivsi3
10015c30 g     F .text	000000ac isatty
100cf984 g     O .rodata	000000c8 __mprec_tens
1000f95c g     F .text	00000024 __locale_charset
10008ea0 g     F .text	000000cc ldexp
10003188 g     F .text	000000c8 .hidden __lesf2
100e2c98 g     O .bss	00000008 alt_timezone
100e2c70 g     O .bss	00000004 __malloc_top_pad
100d9364 g     O .rwdata	00000004 __mb_cur_max
1000f9e4 g     F .text	00000028 _localeconv_r
10010864 g     F .text	00000058 __i2b
1000f0bc g     F .text	000005e8 __sfvwrite_r
10009314 g     F .text	00000078 _sbrk_r
100171d4 g     F .text	0000006c alt_hostfs_read
10014520 g     F .text	00000088 _read_r
100d937c g     O .rwdata	00000004 alt_max_fd
10013f48 g     F .text	0000012c _fclose_r
10002000 g     F .text	0000011c eval_layer_2
1000e304 g     F .text	00000064 fflush
100e2c74 g     O .bss	00000004 __malloc_max_sbrked_mem
100062bc g     F .text	00000110 .hidden __extendsfdf2
100005bc g     F .text	00000080 debug
10003de8 g     F .text	000008ac .hidden __adddf3
10003054 g     F .text	00000078 .hidden __nesf2
100114a0 g     F .text	00000204 __b2d
10014e54 g     F .text	000005c4 .hidden __umoddi3
10015e18 g     F .text	000000dc lseek
100d9334 g     O .rwdata	00000004 _global_impure_ptr
100081e0 g     F .text	00000bf0 _realloc_r
100e2e54 g       *ABS*	00000000 __bss_end
10017a90 g     F .text	000000f0 alt_iic_isr_register
100162dc g     F .text	00000108 alt_tick
10014858 g     F .text	000005fc .hidden __udivdi3
100142a8 g     F .text	00000088 _fputwc_r
100cfa4c g     O .rodata	00000028 __mprec_bigtens
1001055c g     F .text	0000018c __s2b
100156d8 g     F .text	000000a8 .hidden __floatunsidf
1001101c g     F .text	00000114 __mcmp
100023d4 g     F .text	00000164 free_layer_2
1000e8e4 g     F .text	00000048 __fp_lock_all
10017a44 g     F .text	0000004c alt_ic_irq_enabled
10001d0c g     F .text	000002f4 init_layer_2
10016240 g     F .text	0000009c alt_alarm_stop
10009838 g     F .text	00000050 strtol
100e2cbc g     O .bss	00000004 alt_irq_active
10017190 g     F .text	00000044 alt_hostfs_close
100000fc g     F .exceptions	000000d4 alt_irq_handler
100d80f8 g     O .rwdata	00000028 alt_dev_null
10017638 g     F .text	00000020 alt_dcache_flush_all
100106e8 g     F .text	00000090 __hi0bits
1001557c g     F .text	00000080 .hidden __fixdfsi
10006678 g     F .text	00000048 calloc
100d93dc g       *ABS*	00000000 __ram_rwdata_end
100d9374 g     O .rwdata	00000008 alt_dev_list
1000084c g     F .text	00000134 parse_testing_data
10016434 g     F .text	00000100 write
10011cb4 g     F .text	00000104 _putc_r
100030cc g     F .text	000000bc .hidden __gtsf2
100cfb54 g       *ABS*	00000000 __ram_rodata_end
10015924 g     F .text	000000b8 fstat
10005064 g     F .text	000000f4 .hidden __ledf2
100068c8 g     F .text	00000144 _erand48_r
10010cac g     F .text	00000178 __pow5mult
100129bc g     F .text	000012dc ___vfiprintf_internal_r
100e2c88 g     O .bss	00000004 __nlocale_changed
100026f4 g     F .text	00000058 .hidden __umodsi3
100010e8 g     F .text	00000060 get_array_value
100e2e54 g       *ABS*	00000000 end
10006638 g     F .text	00000040 _atoi_r
10016760 g     F .text	000000c8 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10018960 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
10006574 g     F .text	00000064 .hidden __clzsi2
100d9328 g     O .rwdata	00000004 to_hw_port
10016e50 g     F .text	00000224 altera_avalon_jtag_uart_write
1000e81c g     F .text	00000020 __sfp_lock_acquire
1000fcb8 g     F .text	000001bc memchr
10009a38 g     F .text	000020e8 ___vfprintf_internal_r
1000e974 g     F .text	00000570 _free_r
1000119c g     F .text	000000a4 print_array
1000f980 g     F .text	00000020 __locale_mb_cur_max
10018624 g     F .text	000001fc __call_exitprocs
10008dd0 g     F .text	00000090 __srget_r
100e2c8c g     O .bss	00000004 __mlocale_changed
100d933c g     O .rwdata	00000004 __malloc_sbrk_base
10000230 g     F .text	0000003c _start
100e2cb4 g     O .bss	00000004 _alt_tick_rate
10010e24 g     F .text	000001f8 __lshift
100e2cb8 g     O .bss	00000004 _alt_nticks
10016008 g     F .text	00000104 read
100165a4 g     F .text	00000058 alt_sys_init
10003bd4 g     F .text	00000124 .hidden __floatsisf
1001848c g     F .text	00000198 __register_exitproc
100e2d18 g     O .bss	00000024 layer_1
100108bc g     F .text	000003f0 __multiply
10016adc g     F .text	00000068 altera_avalon_jtag_uart_close
100065d8 g     F .text	00000028 .hidden __mulsi3
100cfb54 g       *ABS*	00000000 __ram_rwdata_start
10018960 g       *ABS*	00000000 __ram_rodata_start
100e2cc8 g     O .bss	00000028 __malloc_current_mallinfo
10003054 g     F .text	00000078 .hidden __eqsf2
100116a4 g     F .text	00000240 __d2b
100d68b4 g     O .rwdata	00000fa0 testing_data
10008198 g     F .text	00000048 realloc
100165fc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
1001814c g     F .text	000000d4 alt_get_fd
10013ed0 g     F .text	00000078 _close_r
10018358 g     F .text	00000134 memcmp
100166bc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
100e2e54 g       *ABS*	00000000 __alt_stack_base
1001670c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
1000be6c g     F .text	000001a8 __swsetup_r
10004694 g     F .text	000009d0 .hidden __divdf3
1000e518 g     F .text	000001ac __sfp
10011ab0 g     F .text	000000d0 __copybits
100d7c78 g     O .rwdata	00000408 __malloc_av_
1000e87c g     F .text	00000020 __sinit_lock_release
10005158 g     F .text	00000868 .hidden __muldf3
10009414 g     F .text	00000044 srand48
10012384 g     F .text	0000009c __sread
10018038 g     F .text	00000114 alt_find_file
100006f4 g     F .text	00000158 parse_training_data
100176a8 g     F .text	000000a4 alt_dev_llist_insert
10015f70 g     F .text	00000024 __malloc_lock
10016190 g     F .text	000000b0 sbrk
1000e27c g     F .text	00000088 _fflush_r
100066c0 g     F .text	00000164 _calloc_r
10000f7c g     F .text	00000074 init_array
100159dc g     F .text	00000204 gettimeofday
10001768 g     F .text	0000013c eval_layer_1
100e2c64 g       *ABS*	00000000 __bss_start
10007b54 g     F .text	000001c4 memset
100004f0 g     F .text	00000088 err
10000980 g     F .text	000005fc main
100e2cb0 g     O .bss	00000004 alt_envp
100e2c78 g     O .bss	00000004 __malloc_max_total_mem
1001665c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10013e00 g     F .text	00000048 __swbuf
10003188 g     F .text	000000c8 .hidden __ltsf2
100125a4 g     F .text	00000054 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
10014074 g     F .text	00000040 fclose
1000954c g     F .text	000002ec _strtol_r
100063cc g     F .text	000001a8 .hidden __truncdfsf2
1000c3d8 g     F .text	00001b78 _dtoa_r
10006fd8 g     F .text	00000b7c _malloc_r
100147e0 g     F .text	00000078 __ascii_wctomb
10009888 g     F .text	00000068 time
10007fe0 g     F .text	000001b8 __dorand48
100d9380 g     O .rwdata	00000004 alt_errno
1000f6a4 g     F .text	000000d8 _fwalk
10011db8 g     F .text	00000110 putc
10002598 g     F .text	00000084 .hidden __divsi3
1000eee4 g     F .text	000001d8 _malloc_trim_r
10018960 g       *ABS*	00000000 __CTOR_END__
10003250 g     F .text	00000430 .hidden __mulsf3
10012228 g     F .text	00000058 finite
100125f8 g     F .text	00000140 strcmp
10018960 g       *ABS*	00000000 __flash_rodata_start
10018960 g       *ABS*	00000000 __DTOR_LIST__
10012174 g     F .text	000000b4 copysign
10015418 g     F .text	00000088 .hidden __nedf2
1001656c g     F .text	00000038 alt_irq_init
1001610c g     F .text	00000084 alt_release_fd
100cf554 g     O .rodata	00000100 .hidden __clz_tab
100e2c90 g     O .bss	00000004 _PathLocale
100182bc g     F .text	0000003c atexit
100030cc g     F .text	000000bc .hidden __gesf2
10013e48 g     F .text	00000088 _write_r
1000fa0c g     F .text	00000048 setlocale
100d9330 g     O .rwdata	00000004 _impure_ptr
100e2ca8 g     O .bss	00000004 alt_argc
10006824 g     F .text	00000054 _drand48_r
10006a0c g     F .text	00000058 erand48
1000df78 g     F .text	00000304 __sflush_r
10008f6c g     F .text	000003a8 scalbn
100177ac g     F .text	00000060 _do_dtors
1000f9c4 g     F .text	00000020 __locale_cjk_lang
10001240 g     F .text	00000090 print_float_array
10011f18 g     F .text	0000025c __srefill_r
10001ba0 g     F .text	0000016c free_layer_1
10000020 g       .exceptions	00000000 alt_irq_entry
100113d4 g     F .text	000000cc __ulp
1000e92c g     F .text	00000048 __fp_unlock_all
100018a4 g     F .text	000002fc backprop_layer_1
100d936c g     O .rwdata	00000008 alt_fs_list
10017240 g     F .text	0000006c alt_hostfs_write
100e2ca0 g     O .bss	00000008 alt_resettime
10000020 g       *ABS*	00000000 __ram_exceptions_start
1000fa54 g     F .text	00000038 localeconv
10000578 g     F .text	00000044 inv_err
100178b0 g     F .text	00000050 alt_ic_isr_register
1000047c g     F .text	00000074 inv_sigmoid
100e2d3c g     O .bss	0000000c target_vals
100d93dc g       *ABS*	00000000 _edata
100e2e54 g       *ABS*	00000000 _end
100140b4 g     F .text	000001f4 __fputwc
10000230 g       *ABS*	00000000 __ram_exceptions_end
1000938c g     F .text	00000088 _srand48_r
10016b44 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10006878 g     F .text	00000050 drand48
100cfb54 g     O .rwdata	00006d60 training_data
100179a0 g     F .text	000000a4 alt_ic_irq_disable
10012450 g     F .text	000000b4 __swrite
100e2d48 g     O .bss	0000000c attr_vals
100d9338 g     O .rwdata	00000004 __malloc_trim_threshold
100e2c68 g     O .bss	00000004 num_incorrect
1000f9a0 g     F .text	00000024 __locale_msgcharset
100182f8 g     F .text	00000060 exit
1000f77c g     F .text	000000dc _fwalk_reent
10003cf8 g     F .text	000000f0 .hidden __floatunsisf
10011130 g     F .text	000002a4 __mdiff
1000261c g     F .text	00000074 .hidden __modsi3
100d9360 g     O .rwdata	00000004 __ctype_ptr__
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
1000e83c g     F .text	00000020 __sfp_lock_release
100012d0 g     F .text	00000114 dot_product_1
100013e4 g     F .text	000000d0 dot_product_2
10000000 g       *ABS*	00000000 __alt_mem_sdram
10001148 g     F .text	00000054 free_array
10006600 g     F .text	00000038 atoi
100e2c6c g     O .bss	00000004 curr_point
100cf85a g     O .rodata	00000101 _ctype_
10002538 g     F .text	00000060 .hidden __fixunssfsi
1001892c g     F .text	00000034 _exit
100174f8 g     F .text	00000140 alt_alarm_start
10018820 g     F .text	0000010c .hidden __muldi3
1000fa8c g     F .text	0000022c __smakebuf_r
10009458 g     F .text	000000f4 strlen
10017e24 g     F .text	00000160 open
100154a0 g     F .text	000000dc .hidden __gedf2
100d9368 g     O .rwdata	00000004 __wctomb
10012738 g     F .text	0000013c __sprint_r
10017890 g     F .text	00000020 alt_icache_flush_all
100d93d8 g     O .rwdata	00000004 alt_priority_mask
10017900 g     F .text	000000a0 alt_ic_irq_enable
100099e0 g     F .text	00000058 __vfprintf_internal
1001477c g     F .text	00000064 _wctomb_r
100059c0 g     F .text	000008fc .hidden __subdf3
10010778 g     F .text	000000ec __lo0bits
100d9388 g     O .rwdata	00000008 alt_alarm_list
1001774c g     F .text	00000060 _do_ctors
100014b4 g     F .text	000002b4 init_layer_1
1001468c g     F .text	000000f0 wcrtomb
100157d0 g     F .text	000000d8 close
1000274c g     F .text	000004c8 .hidden __addsf3
10000ff0 g     F .text	000000f8 insert_array
10015d44 g     F .text	00000084 alt_load
10014330 g     F .text	00000070 fputwc
10006be0 g     F .text	00000044 free
1000e85c g     F .text	00000020 __sinit_lock_acquire
100103b0 g     F .text	000001ac __multadd
10010334 g     F .text	0000007c _Bfree
10017314 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	008403b4 	movhi	r2,4110
10000140:	108b5504 	addi	r2,r2,11604
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	008403b4 	movhi	r2,4110
10000158:	108b5504 	addi	r2,r2,11604
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0866617 	ldw	r2,6552(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0866617 	ldw	r2,6552(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	068403b4 	movhi	gp,4110
    ori gp, gp, %lo(_gp)
1000023c:	d684ca14 	ori	gp,gp,4904
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	008403b4 	movhi	r2,4110
    ori r2, r2, %lo(__bss_start)
10000244:	108b1914 	ori	r2,r2,11364

    movhi r3, %hi(__bss_end)
10000248:	00c403b4 	movhi	r3,4110
    ori r3, r3, %lo(__bss_end)
1000024c:	18cb9514 	ori	r3,r3,11860

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0015d440 	call	10015d44 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0015ef40 	call	10015ef4 <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <sigmoid>:
#include "formula.h"

volatile float *to_hw_port = (float *) 0x00000070;
volatile float *to_sw_port = (float *) 0x00000090;

float sigmoid(float x) {
1000026c:	defff604 	addi	sp,sp,-40
10000270:	dfc00915 	stw	ra,36(sp)
10000274:	df000815 	stw	fp,32(sp)
10000278:	dc400715 	stw	r17,28(sp)
1000027c:	dc000615 	stw	r16,24(sp)
10000280:	df000804 	addi	fp,sp,32
10000284:	e13ffd15 	stw	r4,-12(fp)
    if(!ON_FPGA) {
        int sign = x > 0;
10000288:	04000044 	movi	r16,1
1000028c:	000b883a 	mov	r5,zero
10000290:	e13ffd17 	ldw	r4,-12(fp)
10000294:	00030cc0 	call	100030cc <__gesf2>
10000298:	00800116 	blt	zero,r2,100002a0 <sigmoid+0x34>
1000029c:	0021883a 	mov	r16,zero
100002a0:	80803fcc 	andi	r2,r16,255
100002a4:	e0bff815 	stw	r2,-32(fp)
        x = fabs(x);
100002a8:	e0fffd17 	ldw	r3,-12(fp)
100002ac:	00a00034 	movhi	r2,32768
100002b0:	10bfffc4 	addi	r2,r2,-1
100002b4:	1884703a 	and	r2,r3,r2
100002b8:	e0bffd15 	stw	r2,-12(fp)

        float pow0 = 1;
100002bc:	008fe034 	movhi	r2,16256
100002c0:	e0bff915 	stw	r2,-28(fp)
    	float pow1 = x;
100002c4:	e0bffd17 	ldw	r2,-12(fp)
100002c8:	e0bffa15 	stw	r2,-24(fp)
    	float pow2 = pow1 * x;
100002cc:	e17ffd17 	ldw	r5,-12(fp)
100002d0:	e13ffa17 	ldw	r4,-24(fp)
100002d4:	00032500 	call	10003250 <__mulsf3>
100002d8:	1007883a 	mov	r3,r2
100002dc:	e0fffb15 	stw	r3,-20(fp)

        float approx = pow0 + pow1 + pow2/2.0;
100002e0:	e17ffa17 	ldw	r5,-24(fp)
100002e4:	e13ff917 	ldw	r4,-28(fp)
100002e8:	000274c0 	call	1000274c <__addsf3>
100002ec:	1007883a 	mov	r3,r2
100002f0:	1805883a 	mov	r2,r3
100002f4:	1009883a 	mov	r4,r2
100002f8:	00062bc0 	call	100062bc <__extendsfdf2>
100002fc:	1021883a 	mov	r16,r2
10000300:	1823883a 	mov	r17,r3
10000304:	e13ffb17 	ldw	r4,-20(fp)
10000308:	00062bc0 	call	100062bc <__extendsfdf2>
1000030c:	1011883a 	mov	r8,r2
10000310:	1813883a 	mov	r9,r3
10000314:	000d883a 	mov	r6,zero
10000318:	01d00034 	movhi	r7,16384
1000031c:	4009883a 	mov	r4,r8
10000320:	480b883a 	mov	r5,r9
10000324:	00046940 	call	10004694 <__divdf3>
10000328:	1009883a 	mov	r4,r2
1000032c:	180b883a 	mov	r5,r3
10000330:	2005883a 	mov	r2,r4
10000334:	2807883a 	mov	r3,r5
10000338:	100d883a 	mov	r6,r2
1000033c:	180f883a 	mov	r7,r3
10000340:	8009883a 	mov	r4,r16
10000344:	880b883a 	mov	r5,r17
10000348:	0003de80 	call	10003de8 <__adddf3>
1000034c:	1009883a 	mov	r4,r2
10000350:	180b883a 	mov	r5,r3
10000354:	2005883a 	mov	r2,r4
10000358:	2807883a 	mov	r3,r5
1000035c:	1009883a 	mov	r4,r2
10000360:	180b883a 	mov	r5,r3
10000364:	00063cc0 	call	100063cc <__truncdfsf2>
10000368:	1007883a 	mov	r3,r2
1000036c:	e0fffc15 	stw	r3,-16(fp)

        if (sign) {
10000370:	e0bff817 	ldw	r2,-32(fp)
10000374:	10001f26 	beq	r2,zero,100003f4 <sigmoid+0x188>
        	return approx / (1.0 + approx);
10000378:	e13ffc17 	ldw	r4,-16(fp)
1000037c:	00062bc0 	call	100062bc <__extendsfdf2>
10000380:	1021883a 	mov	r16,r2
10000384:	1823883a 	mov	r17,r3
10000388:	e13ffc17 	ldw	r4,-16(fp)
1000038c:	00062bc0 	call	100062bc <__extendsfdf2>
10000390:	1011883a 	mov	r8,r2
10000394:	1813883a 	mov	r9,r3
10000398:	000d883a 	mov	r6,zero
1000039c:	01cffc34 	movhi	r7,16368
100003a0:	4009883a 	mov	r4,r8
100003a4:	480b883a 	mov	r5,r9
100003a8:	0003de80 	call	10003de8 <__adddf3>
100003ac:	1009883a 	mov	r4,r2
100003b0:	180b883a 	mov	r5,r3
100003b4:	2005883a 	mov	r2,r4
100003b8:	2807883a 	mov	r3,r5
100003bc:	100d883a 	mov	r6,r2
100003c0:	180f883a 	mov	r7,r3
100003c4:	8009883a 	mov	r4,r16
100003c8:	880b883a 	mov	r5,r17
100003cc:	00046940 	call	10004694 <__divdf3>
100003d0:	1009883a 	mov	r4,r2
100003d4:	180b883a 	mov	r5,r3
100003d8:	2005883a 	mov	r2,r4
100003dc:	2807883a 	mov	r3,r5
100003e0:	1009883a 	mov	r4,r2
100003e4:	180b883a 	mov	r5,r3
100003e8:	00063cc0 	call	100063cc <__truncdfsf2>
100003ec:	1007883a 	mov	r3,r2
100003f0:	00001a06 	br	1000045c <sigmoid+0x1f0>
        } else {
        	return 1.0 / (1.0 + approx);
100003f4:	e13ffc17 	ldw	r4,-16(fp)
100003f8:	00062bc0 	call	100062bc <__extendsfdf2>
100003fc:	1011883a 	mov	r8,r2
10000400:	1813883a 	mov	r9,r3
10000404:	000d883a 	mov	r6,zero
10000408:	01cffc34 	movhi	r7,16368
1000040c:	4009883a 	mov	r4,r8
10000410:	480b883a 	mov	r5,r9
10000414:	0003de80 	call	10003de8 <__adddf3>
10000418:	1009883a 	mov	r4,r2
1000041c:	180b883a 	mov	r5,r3
10000420:	2005883a 	mov	r2,r4
10000424:	2807883a 	mov	r3,r5
10000428:	100d883a 	mov	r6,r2
1000042c:	180f883a 	mov	r7,r3
10000430:	0009883a 	mov	r4,zero
10000434:	014ffc34 	movhi	r5,16368
10000438:	00046940 	call	10004694 <__divdf3>
1000043c:	1009883a 	mov	r4,r2
10000440:	180b883a 	mov	r5,r3
10000444:	2005883a 	mov	r2,r4
10000448:	2807883a 	mov	r3,r5
1000044c:	1009883a 	mov	r4,r2
10000450:	180b883a 	mov	r5,r3
10000454:	00063cc0 	call	100063cc <__truncdfsf2>
10000458:	1007883a 	mov	r3,r2
1000045c:	1805883a 	mov	r2,r3
        }
    } else {
    	*to_hw_port = x;
    	return *to_sw_port;
    }
}
10000460:	e6fffe04 	addi	sp,fp,-8
10000464:	dfc00317 	ldw	ra,12(sp)
10000468:	df000217 	ldw	fp,8(sp)
1000046c:	dc400117 	ldw	r17,4(sp)
10000470:	dc000017 	ldw	r16,0(sp)
10000474:	dec00404 	addi	sp,sp,16
10000478:	f800283a 	ret

1000047c <inv_sigmoid>:

float inv_sigmoid(float x) {
1000047c:	defffc04 	addi	sp,sp,-16
10000480:	dfc00315 	stw	ra,12(sp)
10000484:	df000215 	stw	fp,8(sp)
10000488:	dc000115 	stw	r16,4(sp)
1000048c:	df000204 	addi	fp,sp,8
10000490:	e13ffe15 	stw	r4,-8(fp)
	return sigmoid(x) * (1 - sigmoid(x));
10000494:	e13ffe17 	ldw	r4,-8(fp)
10000498:	000026c0 	call	1000026c <sigmoid>
1000049c:	1021883a 	mov	r16,r2
100004a0:	e13ffe17 	ldw	r4,-8(fp)
100004a4:	000026c0 	call	1000026c <sigmoid>
100004a8:	1007883a 	mov	r3,r2
100004ac:	180b883a 	mov	r5,r3
100004b0:	010fe034 	movhi	r4,16256
100004b4:	00036800 	call	10003680 <__subsf3>
100004b8:	1007883a 	mov	r3,r2
100004bc:	1805883a 	mov	r2,r3
100004c0:	100b883a 	mov	r5,r2
100004c4:	8009883a 	mov	r4,r16
100004c8:	00032500 	call	10003250 <__mulsf3>
100004cc:	1009883a 	mov	r4,r2
100004d0:	2007883a 	mov	r3,r4
100004d4:	1805883a 	mov	r2,r3
}
100004d8:	e6ffff04 	addi	sp,fp,-4
100004dc:	dfc00217 	ldw	ra,8(sp)
100004e0:	df000117 	ldw	fp,4(sp)
100004e4:	dc000017 	ldw	r16,0(sp)
100004e8:	dec00304 	addi	sp,sp,12
100004ec:	f800283a 	ret

100004f0 <err>:

float err(float o, float t) {
100004f0:	defffb04 	addi	sp,sp,-20
100004f4:	dfc00415 	stw	ra,16(sp)
100004f8:	df000315 	stw	fp,12(sp)
100004fc:	dc000215 	stw	r16,8(sp)
10000500:	df000304 	addi	fp,sp,12
10000504:	e13ffd15 	stw	r4,-12(fp)
10000508:	e17ffe15 	stw	r5,-8(fp)
	return 0.5 * ((t - o) * (t - o));
1000050c:	e17ffd17 	ldw	r5,-12(fp)
10000510:	e13ffe17 	ldw	r4,-8(fp)
10000514:	00036800 	call	10003680 <__subsf3>
10000518:	1007883a 	mov	r3,r2
1000051c:	1821883a 	mov	r16,r3
10000520:	e17ffd17 	ldw	r5,-12(fp)
10000524:	e13ffe17 	ldw	r4,-8(fp)
10000528:	00036800 	call	10003680 <__subsf3>
1000052c:	1007883a 	mov	r3,r2
10000530:	1805883a 	mov	r2,r3
10000534:	100b883a 	mov	r5,r2
10000538:	8009883a 	mov	r4,r16
1000053c:	00032500 	call	10003250 <__mulsf3>
10000540:	1007883a 	mov	r3,r2
10000544:	1805883a 	mov	r2,r3
10000548:	014fc034 	movhi	r5,16128
1000054c:	1009883a 	mov	r4,r2
10000550:	00032500 	call	10003250 <__mulsf3>
10000554:	1009883a 	mov	r4,r2
10000558:	2007883a 	mov	r3,r4
1000055c:	1805883a 	mov	r2,r3
}
10000560:	e6ffff04 	addi	sp,fp,-4
10000564:	dfc00217 	ldw	ra,8(sp)
10000568:	df000117 	ldw	fp,4(sp)
1000056c:	dc000017 	ldw	r16,0(sp)
10000570:	dec00304 	addi	sp,sp,12
10000574:	f800283a 	ret

10000578 <inv_err>:

float inv_err(float o, float t) {
10000578:	defffc04 	addi	sp,sp,-16
1000057c:	dfc00315 	stw	ra,12(sp)
10000580:	df000215 	stw	fp,8(sp)
10000584:	df000204 	addi	fp,sp,8
10000588:	e13ffe15 	stw	r4,-8(fp)
1000058c:	e17fff15 	stw	r5,-4(fp)
	return (o - t);
10000590:	e17fff17 	ldw	r5,-4(fp)
10000594:	e13ffe17 	ldw	r4,-8(fp)
10000598:	00036800 	call	10003680 <__subsf3>
1000059c:	1009883a 	mov	r4,r2
100005a0:	2007883a 	mov	r3,r4
100005a4:	1805883a 	mov	r2,r3
}
100005a8:	e037883a 	mov	sp,fp
100005ac:	dfc00117 	ldw	ra,4(sp)
100005b0:	df000017 	ldw	fp,0(sp)
100005b4:	dec00204 	addi	sp,sp,8
100005b8:	f800283a 	ret

100005bc <debug>:

void debug(float x) {
100005bc:	defffd04 	addi	sp,sp,-12
100005c0:	dfc00215 	stw	ra,8(sp)
100005c4:	df000115 	stw	fp,4(sp)
100005c8:	df000104 	addi	fp,sp,4
100005cc:	e13fff15 	stw	r4,-4(fp)
	printf("Floating Point:\n");
100005d0:	010400b4 	movhi	r4,4098
100005d4:	21225804 	addi	r4,r4,-30368
100005d8:	0007fa00 	call	10007fa0 <puts>
	printf("%f : ", x);
100005dc:	e0bfff17 	ldw	r2,-4(fp)
100005e0:	1009883a 	mov	r4,r2
100005e4:	00062bc0 	call	100062bc <__extendsfdf2>
100005e8:	100d883a 	mov	r6,r2
100005ec:	180f883a 	mov	r7,r3
100005f0:	300b883a 	mov	r5,r6
100005f4:	380d883a 	mov	r6,r7
100005f8:	010400b4 	movhi	r4,4098
100005fc:	21225c04 	addi	r4,r4,-30352
10000600:	0007d7c0 	call	10007d7c <printf>
	printme(&x, sizeof(float));
10000604:	01400104 	movi	r5,4
10000608:	e13fff04 	addi	r4,fp,-4
1000060c:	000063c0 	call	1000063c <printme>

	printf("Fixed Point:\n");
10000610:	010400b4 	movhi	r4,4098
10000614:	21225e04 	addi	r4,r4,-30344
10000618:	0007fa00 	call	10007fa0 <puts>
	// convert to fixed point
	printf("\n");
1000061c:	01000284 	movi	r4,10
10000620:	0007e380 	call	10007e38 <putchar>
}
10000624:	0001883a 	nop
10000628:	e037883a 	mov	sp,fp
1000062c:	dfc00117 	ldw	ra,4(sp)
10000630:	df000017 	ldw	fp,0(sp)
10000634:	dec00204 	addi	sp,sp,8
10000638:	f800283a 	ret

1000063c <printme>:

static void printme(void *c, size_t n) {
1000063c:	defffa04 	addi	sp,sp,-24
10000640:	dfc00515 	stw	ra,20(sp)
10000644:	df000415 	stw	fp,16(sp)
10000648:	df000404 	addi	fp,sp,16
1000064c:	e13ffe15 	stw	r4,-8(fp)
10000650:	e17fff15 	stw	r5,-4(fp)
	unsigned char *t = c;
10000654:	e0bffe17 	ldw	r2,-8(fp)
10000658:	e0bffd15 	stw	r2,-12(fp)
	if (c == NULL)
1000065c:	e0bffe17 	ldw	r2,-8(fp)
10000660:	10001e26 	beq	r2,zero,100006dc <printme+0xa0>
		return;
	while (n > 0) {
10000664:	00001806 	br	100006c8 <printme+0x8c>
		int q;
		--n;
10000668:	e0bfff17 	ldw	r2,-4(fp)
1000066c:	10bfffc4 	addi	r2,r2,-1
10000670:	e0bfff15 	stw	r2,-4(fp)
		for(q = 0x80; q; q >>= 1)
10000674:	00802004 	movi	r2,128
10000678:	e0bffc15 	stw	r2,-16(fp)
1000067c:	00001006 	br	100006c0 <printme+0x84>
			printf("%x", !!(t[n] & q));
10000680:	e0fffd17 	ldw	r3,-12(fp)
10000684:	e0bfff17 	ldw	r2,-4(fp)
10000688:	1885883a 	add	r2,r3,r2
1000068c:	10800003 	ldbu	r2,0(r2)
10000690:	10c03fcc 	andi	r3,r2,255
10000694:	e0bffc17 	ldw	r2,-16(fp)
10000698:	1884703a 	and	r2,r3,r2
1000069c:	1004c03a 	cmpne	r2,r2,zero
100006a0:	10803fcc 	andi	r2,r2,255
100006a4:	100b883a 	mov	r5,r2
100006a8:	010400b4 	movhi	r4,4098
100006ac:	21226204 	addi	r4,r4,-30328
100006b0:	0007d7c0 	call	10007d7c <printf>
	if (c == NULL)
		return;
	while (n > 0) {
		int q;
		--n;
		for(q = 0x80; q; q >>= 1)
100006b4:	e0bffc17 	ldw	r2,-16(fp)
100006b8:	1005d07a 	srai	r2,r2,1
100006bc:	e0bffc15 	stw	r2,-16(fp)
100006c0:	e0bffc17 	ldw	r2,-16(fp)
100006c4:	103fee1e 	bne	r2,zero,10000680 <__alt_data_end+0xf8000680>

static void printme(void *c, size_t n) {
	unsigned char *t = c;
	if (c == NULL)
		return;
	while (n > 0) {
100006c8:	e0bfff17 	ldw	r2,-4(fp)
100006cc:	103fe61e 	bne	r2,zero,10000668 <__alt_data_end+0xf8000668>
		int q;
		--n;
		for(q = 0x80; q; q >>= 1)
			printf("%x", !!(t[n] & q));
	}
	printf("\n");
100006d0:	01000284 	movi	r4,10
100006d4:	0007e380 	call	10007e38 <putchar>
100006d8:	00000106 	br	100006e0 <printme+0xa4>
}

static void printme(void *c, size_t n) {
	unsigned char *t = c;
	if (c == NULL)
		return;
100006dc:	0001883a 	nop
		--n;
		for(q = 0x80; q; q >>= 1)
			printf("%x", !!(t[n] & q));
	}
	printf("\n");
}
100006e0:	e037883a 	mov	sp,fp
100006e4:	dfc00117 	ldw	ra,4(sp)
100006e8:	df000017 	ldw	fp,0(sp)
100006ec:	dec00204 	addi	sp,sp,8
100006f0:	f800283a 	ret

100006f4 <parse_training_data>:

uint32_t	curr_point;
uint32_t 	total_runs;
uint32_t	num_incorrect;

int parse_training_data() {
100006f4:	defff904 	addi	sp,sp,-28
100006f8:	dfc00615 	stw	ra,24(sp)
100006fc:	df000515 	stw	fp,20(sp)
10000700:	df000504 	addi	fp,sp,20
	// reset dataset
	init_array(&target_vals, INITIAL_ARR_SIZE);
10000704:	0150b234 	movhi	r5,17096
10000708:	010403b4 	movhi	r4,4110
1000070c:	210b4f04 	addi	r4,r4,11580
10000710:	0000f7c0 	call	10000f7c <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
10000714:	0150b234 	movhi	r5,17096
10000718:	010403b4 	movhi	r4,4110
1000071c:	210b5204 	addi	r4,r4,11592
10000720:	0000f7c0 	call	10000f7c <init_array>
	curr_point 		= 0;
10000724:	008403b4 	movhi	r2,4110
10000728:	108b1b04 	addi	r2,r2,11372
1000072c:	10000015 	stw	zero,0(r2)
	total_runs 		= 0;
10000730:	008403b4 	movhi	r2,4110
10000734:	108b1904 	addi	r2,r2,11364
10000738:	10000015 	stw	zero,0(r2)
	num_incorrect 	= 0;
1000073c:	008403b4 	movhi	r2,4110
10000740:	108b1a04 	addi	r2,r2,11368
10000744:	10000015 	stw	zero,0(r2)

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
10000748:	e03ffc15 	stw	zero,-16(fp)
1000074c:	00003606 	br	10000828 <parse_training_data+0x134>
		line = training_data[i];
10000750:	00840374 	movhi	r2,4109
10000754:	10bed504 	addi	r2,r2,-1196
10000758:	e0fffc17 	ldw	r3,-16(fp)
1000075c:	18c7883a 	add	r3,r3,r3
10000760:	18c7883a 	add	r3,r3,r3
10000764:	10c5883a 	add	r2,r2,r3
10000768:	10800017 	ldw	r2,0(r2)
1000076c:	e0bffe15 	stw	r2,-8(fp)
		first_elem = 1;
10000770:	00800044 	movi	r2,1
10000774:	e0bffb05 	stb	r2,-20(fp)
		if (i % 100 == 0) printf("%d\n", i);
10000778:	e0bffc17 	ldw	r2,-16(fp)
1000077c:	01401904 	movi	r5,100
10000780:	1009883a 	mov	r4,r2
10000784:	000261c0 	call	1000261c <__modsi3>
10000788:	1000041e 	bne	r2,zero,1000079c <parse_training_data+0xa8>
1000078c:	e17ffc17 	ldw	r5,-16(fp)
10000790:	01040374 	movhi	r4,4109
10000794:	213cec04 	addi	r4,r4,-3152
10000798:	0007d7c0 	call	10007d7c <printf>
	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
1000079c:	e03ffd15 	stw	zero,-12(fp)
100007a0:	00001b06 	br	10000810 <parse_training_data+0x11c>
			int value = atoi(line + j);
100007a4:	e0bffd17 	ldw	r2,-12(fp)
100007a8:	e0fffe17 	ldw	r3,-8(fp)
100007ac:	1885883a 	add	r2,r3,r2
100007b0:	1009883a 	mov	r4,r2
100007b4:	00066000 	call	10006600 <atoi>
100007b8:	e0bfff15 	stw	r2,-4(fp)
			if (first_elem) {
100007bc:	e0bffb03 	ldbu	r2,-20(fp)
100007c0:	10000926 	beq	r2,zero,100007e8 <parse_training_data+0xf4>
				insert_array(&target_vals, value);
100007c4:	e13fff17 	ldw	r4,-4(fp)
100007c8:	0003bd40 	call	10003bd4 <__floatsisf>
100007cc:	1007883a 	mov	r3,r2
100007d0:	180b883a 	mov	r5,r3
100007d4:	010403b4 	movhi	r4,4110
100007d8:	210b4f04 	addi	r4,r4,11580
100007dc:	0000ff00 	call	10000ff0 <insert_array>
				first_elem = 0;
100007e0:	e03ffb05 	stb	zero,-20(fp)
100007e4:	00000706 	br	10000804 <parse_training_data+0x110>
			} else {
				insert_array(&attr_vals, value);
100007e8:	e13fff17 	ldw	r4,-4(fp)
100007ec:	0003bd40 	call	10003bd4 <__floatsisf>
100007f0:	1007883a 	mov	r3,r2
100007f4:	180b883a 	mov	r5,r3
100007f8:	010403b4 	movhi	r4,4110
100007fc:	210b5204 	addi	r4,r4,11592
10000800:	0000ff00 	call	10000ff0 <insert_array>
	for(int i = 0; i < 100; i++) {
		line = training_data[i];
		first_elem = 1;
		if (i % 100 == 0) printf("%d\n", i);
	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000804:	e0bffd17 	ldw	r2,-12(fp)
10000808:	10800084 	addi	r2,r2,2
1000080c:	e0bffd15 	stw	r2,-12(fp)
10000810:	e0bffd17 	ldw	r2,-12(fp)
10000814:	10803250 	cmplti	r2,r2,201
10000818:	103fe21e 	bne	r2,zero,100007a4 <__alt_data_end+0xf80007a4>
	total_runs 		= 0;
	num_incorrect 	= 0;

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
1000081c:	e0bffc17 	ldw	r2,-16(fp)
10000820:	10800044 	addi	r2,r2,1
10000824:	e0bffc15 	stw	r2,-16(fp)
10000828:	e0bffc17 	ldw	r2,-16(fp)
1000082c:	10801910 	cmplti	r2,r2,100
10000830:	103fc71e 	bne	r2,zero,10000750 <__alt_data_end+0xf8000750>
				insert_array(&attr_vals, value);
			}
		}
	}

	return 0;
10000834:	0005883a 	mov	r2,zero
}
10000838:	e037883a 	mov	sp,fp
1000083c:	dfc00117 	ldw	ra,4(sp)
10000840:	df000017 	ldw	fp,0(sp)
10000844:	dec00204 	addi	sp,sp,8
10000848:	f800283a 	ret

1000084c <parse_testing_data>:

int parse_testing_data() {
1000084c:	defff904 	addi	sp,sp,-28
10000850:	dfc00615 	stw	ra,24(sp)
10000854:	df000515 	stw	fp,20(sp)
10000858:	df000504 	addi	fp,sp,20
	// reset dataset
	init_array(&target_vals, INITIAL_ARR_SIZE);
1000085c:	0150b234 	movhi	r5,17096
10000860:	010403b4 	movhi	r4,4110
10000864:	210b4f04 	addi	r4,r4,11580
10000868:	0000f7c0 	call	10000f7c <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
1000086c:	0150b234 	movhi	r5,17096
10000870:	010403b4 	movhi	r4,4110
10000874:	210b5204 	addi	r4,r4,11592
10000878:	0000f7c0 	call	10000f7c <init_array>
	curr_point 		= 0;
1000087c:	008403b4 	movhi	r2,4110
10000880:	108b1b04 	addi	r2,r2,11372
10000884:	10000015 	stw	zero,0(r2)
	total_runs 		= 0;
10000888:	008403b4 	movhi	r2,4110
1000088c:	108b1904 	addi	r2,r2,11364
10000890:	10000015 	stw	zero,0(r2)
	num_incorrect 	= 0;
10000894:	008403b4 	movhi	r2,4110
10000898:	108b1a04 	addi	r2,r2,11368
1000089c:	10000015 	stw	zero,0(r2)

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
100008a0:	e03ffc15 	stw	zero,-16(fp)
100008a4:	00002d06 	br	1000095c <parse_testing_data+0x110>
		line = testing_data[i];
100008a8:	00840374 	movhi	r2,4109
100008ac:	109a2d04 	addi	r2,r2,26804
100008b0:	e0fffc17 	ldw	r3,-16(fp)
100008b4:	18c7883a 	add	r3,r3,r3
100008b8:	18c7883a 	add	r3,r3,r3
100008bc:	10c5883a 	add	r2,r2,r3
100008c0:	10800017 	ldw	r2,0(r2)
100008c4:	e0bffe15 	stw	r2,-8(fp)
		first_elem = 1;
100008c8:	00800044 	movi	r2,1
100008cc:	e0bffb05 	stb	r2,-20(fp)

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
100008d0:	e03ffd15 	stw	zero,-12(fp)
100008d4:	00001b06 	br	10000944 <parse_testing_data+0xf8>
			int value = atoi(line + j);
100008d8:	e0bffd17 	ldw	r2,-12(fp)
100008dc:	e0fffe17 	ldw	r3,-8(fp)
100008e0:	1885883a 	add	r2,r3,r2
100008e4:	1009883a 	mov	r4,r2
100008e8:	00066000 	call	10006600 <atoi>
100008ec:	e0bfff15 	stw	r2,-4(fp)
			if (first_elem) {
100008f0:	e0bffb03 	ldbu	r2,-20(fp)
100008f4:	10000926 	beq	r2,zero,1000091c <parse_testing_data+0xd0>
				insert_array(&target_vals, value);
100008f8:	e13fff17 	ldw	r4,-4(fp)
100008fc:	0003bd40 	call	10003bd4 <__floatsisf>
10000900:	1007883a 	mov	r3,r2
10000904:	180b883a 	mov	r5,r3
10000908:	010403b4 	movhi	r4,4110
1000090c:	210b4f04 	addi	r4,r4,11580
10000910:	0000ff00 	call	10000ff0 <insert_array>
				first_elem = 0;
10000914:	e03ffb05 	stb	zero,-20(fp)
10000918:	00000706 	br	10000938 <parse_testing_data+0xec>
			} else {
				insert_array(&attr_vals, value);
1000091c:	e13fff17 	ldw	r4,-4(fp)
10000920:	0003bd40 	call	10003bd4 <__floatsisf>
10000924:	1007883a 	mov	r3,r2
10000928:	180b883a 	mov	r5,r3
1000092c:	010403b4 	movhi	r4,4110
10000930:	210b5204 	addi	r4,r4,11592
10000934:	0000ff00 	call	10000ff0 <insert_array>
	for(int i = 0; i < 100; i++) {
		line = testing_data[i];
		first_elem = 1;

	    // split by delimiter
		for(int j = 0; j < 201; j += 2) {
10000938:	e0bffd17 	ldw	r2,-12(fp)
1000093c:	10800084 	addi	r2,r2,2
10000940:	e0bffd15 	stw	r2,-12(fp)
10000944:	e0bffd17 	ldw	r2,-12(fp)
10000948:	10803250 	cmplti	r2,r2,201
1000094c:	103fe21e 	bne	r2,zero,100008d8 <__alt_data_end+0xf80008d8>
	total_runs 		= 0;
	num_incorrect 	= 0;

	char *line;
	uint8_t first_elem;
	for(int i = 0; i < 100; i++) {
10000950:	e0bffc17 	ldw	r2,-16(fp)
10000954:	10800044 	addi	r2,r2,1
10000958:	e0bffc15 	stw	r2,-16(fp)
1000095c:	e0bffc17 	ldw	r2,-16(fp)
10000960:	10801910 	cmplti	r2,r2,100
10000964:	103fd01e 	bne	r2,zero,100008a8 <__alt_data_end+0xf80008a8>
				insert_array(&attr_vals, value);
			}
		}
	}

	return 0;
10000968:	0005883a 	mov	r2,zero
}
1000096c:	e037883a 	mov	sp,fp
10000970:	dfc00117 	ldw	ra,4(sp)
10000974:	df000017 	ldw	fp,0(sp)
10000978:	dec00204 	addi	sp,sp,8
1000097c:	f800283a 	ret

10000980 <main>:

int main() {
10000980:	defff804 	addi	sp,sp,-32
10000984:	dfc00715 	stw	ra,28(sp)
10000988:	df000615 	stw	fp,24(sp)
1000098c:	dc000515 	stw	r16,20(sp)
10000990:	df000604 	addi	fp,sp,24
	printf("Initializing neural network...\n");
10000994:	01040374 	movhi	r4,4109
10000998:	213ced04 	addi	r4,r4,-3148
1000099c:	0007fa00 	call	10007fa0 <puts>
	srand48(time(NULL));
100009a0:	0009883a 	mov	r4,zero
100009a4:	00098880 	call	10009888 <time>
100009a8:	1009883a 	mov	r4,r2
100009ac:	00094140 	call	10009414 <srand48>

	init_array(&target_vals, INITIAL_ARR_SIZE);
100009b0:	0150b234 	movhi	r5,17096
100009b4:	010403b4 	movhi	r4,4110
100009b8:	210b4f04 	addi	r4,r4,11580
100009bc:	0000f7c0 	call	10000f7c <init_array>
	init_array(&attr_vals, INITIAL_ARR_SIZE);
100009c0:	0150b234 	movhi	r5,17096
100009c4:	010403b4 	movhi	r4,4110
100009c8:	210b5204 	addi	r4,r4,11592
100009cc:	0000f7c0 	call	10000f7c <init_array>

	init_layer_1(&layer_1, &attr_vals, curr_point, LAYER_1_NUM_NODES, 1);
100009d0:	008403b4 	movhi	r2,4110
100009d4:	108b1b04 	addi	r2,r2,11372
100009d8:	10800017 	ldw	r2,0(r2)
100009dc:	1009883a 	mov	r4,r2
100009e0:	0003cf80 	call	10003cf8 <__floatunsisf>
100009e4:	1007883a 	mov	r3,r2
100009e8:	008fe034 	movhi	r2,16256
100009ec:	d8800015 	stw	r2,0(sp)
100009f0:	01d03034 	movhi	r7,16576
100009f4:	180d883a 	mov	r6,r3
100009f8:	014403b4 	movhi	r5,4110
100009fc:	294b5204 	addi	r5,r5,11592
10000a00:	010403b4 	movhi	r4,4110
10000a04:	210b4604 	addi	r4,r4,11544
10000a08:	00014b40 	call	100014b4 <init_layer_1>
	init_layer_2(&layer_2, layer_1.layer_out, curr_point, 1, 2, LAYER_1_NUM_NODES);
10000a0c:	008403b4 	movhi	r2,4110
10000a10:	108b4604 	addi	r2,r2,11544
10000a14:	14000717 	ldw	r16,28(r2)
10000a18:	008403b4 	movhi	r2,4110
10000a1c:	108b1b04 	addi	r2,r2,11372
10000a20:	10800017 	ldw	r2,0(r2)
10000a24:	1009883a 	mov	r4,r2
10000a28:	0003cf80 	call	10003cf8 <__floatunsisf>
10000a2c:	1007883a 	mov	r3,r2
10000a30:	00903034 	movhi	r2,16576
10000a34:	d8800115 	stw	r2,4(sp)
10000a38:	00900034 	movhi	r2,16384
10000a3c:	d8800015 	stw	r2,0(sp)
10000a40:	01cfe034 	movhi	r7,16256
10000a44:	180d883a 	mov	r6,r3
10000a48:	800b883a 	mov	r5,r16
10000a4c:	010403b4 	movhi	r4,4110
10000a50:	210b3c04 	addi	r4,r4,11504
10000a54:	0001d0c0 	call	10001d0c <init_layer_2>

	printf("Parsing training dataset...\n");
10000a58:	01040374 	movhi	r4,4109
10000a5c:	213cf504 	addi	r4,r4,-3116
10000a60:	0007fa00 	call	10007fa0 <puts>
	if(parse_training_data() == -1) {
10000a64:	00006f40 	call	100006f4 <parse_training_data>
10000a68:	10bfffd8 	cmpnei	r2,r2,-1
10000a6c:	1000051e 	bne	r2,zero,10000a84 <main+0x104>
		printf("Failed to parse dataset\n");
10000a70:	01040374 	movhi	r4,4109
10000a74:	213cfc04 	addi	r4,r4,-3088
10000a78:	0007fa00 	call	10007fa0 <puts>
		return -1;
10000a7c:	00bfffc4 	movi	r2,-1
10000a80:	00013806 	br	10000f64 <main+0x5e4>
	}

	printf("Starting training...\n");
10000a84:	01040374 	movhi	r4,4109
10000a88:	213d0204 	addi	r4,r4,-3064
10000a8c:	0007fa00 	call	10007fa0 <puts>
	float total_err = 0;
10000a90:	e03ffc15 	stw	zero,-16(fp)
	while(total_runs < 1000) {
10000a94:	00008706 	br	10000cb4 <main+0x334>
		// set up the first layer and evaluate it
		layer_1.curr_point = curr_point;
10000a98:	008403b4 	movhi	r2,4110
10000a9c:	108b1b04 	addi	r2,r2,11372
10000aa0:	10800017 	ldw	r2,0(r2)
10000aa4:	1009883a 	mov	r4,r2
10000aa8:	0003cf80 	call	10003cf8 <__floatunsisf>
10000aac:	1007883a 	mov	r3,r2
10000ab0:	008403b4 	movhi	r2,4110
10000ab4:	108b4604 	addi	r2,r2,11544
10000ab8:	10c00115 	stw	r3,4(r2)
		eval_layer_1(&layer_1);
10000abc:	010403b4 	movhi	r4,4110
10000ac0:	210b4604 	addi	r4,r4,11544
10000ac4:	00017680 	call	10001768 <eval_layer_1>

		// set up the second layer and evaluate it
		layer_2.curr_point = curr_point;
10000ac8:	008403b4 	movhi	r2,4110
10000acc:	108b1b04 	addi	r2,r2,11372
10000ad0:	10800017 	ldw	r2,0(r2)
10000ad4:	1009883a 	mov	r4,r2
10000ad8:	0003cf80 	call	10003cf8 <__floatunsisf>
10000adc:	1007883a 	mov	r3,r2
10000ae0:	008403b4 	movhi	r2,4110
10000ae4:	108b3c04 	addi	r2,r2,11504
10000ae8:	10c00115 	stw	r3,4(r2)
		eval_layer_2(&layer_2);
10000aec:	010403b4 	movhi	r4,4110
10000af0:	210b3c04 	addi	r4,r4,11504
10000af4:	00020000 	call	10002000 <eval_layer_2>

		backprop_layer_2(&layer_2, get_array_value(&target_vals, curr_point));
10000af8:	008403b4 	movhi	r2,4110
10000afc:	108b1b04 	addi	r2,r2,11372
10000b00:	10800017 	ldw	r2,0(r2)
10000b04:	100b883a 	mov	r5,r2
10000b08:	010403b4 	movhi	r4,4110
10000b0c:	210b4f04 	addi	r4,r4,11580
10000b10:	00010e80 	call	100010e8 <get_array_value>
10000b14:	1007883a 	mov	r3,r2
10000b18:	180b883a 	mov	r5,r3
10000b1c:	010403b4 	movhi	r4,4110
10000b20:	210b3c04 	addi	r4,r4,11504
10000b24:	000211c0 	call	1000211c <backprop_layer_2>
		backprop_layer_1(&layer_1, &layer_2);
10000b28:	014403b4 	movhi	r5,4110
10000b2c:	294b3c04 	addi	r5,r5,11504
10000b30:	010403b4 	movhi	r4,4110
10000b34:	210b4604 	addi	r4,r4,11544
10000b38:	00018a40 	call	100018a4 <backprop_layer_1>

		float curr_err = err(layer_2.layer_out[0], get_array_value(&target_vals, curr_point));
10000b3c:	008403b4 	movhi	r2,4110
10000b40:	108b3c04 	addi	r2,r2,11504
10000b44:	10800817 	ldw	r2,32(r2)
10000b48:	14000017 	ldw	r16,0(r2)
10000b4c:	008403b4 	movhi	r2,4110
10000b50:	108b1b04 	addi	r2,r2,11372
10000b54:	10800017 	ldw	r2,0(r2)
10000b58:	100b883a 	mov	r5,r2
10000b5c:	010403b4 	movhi	r4,4110
10000b60:	210b4f04 	addi	r4,r4,11580
10000b64:	00010e80 	call	100010e8 <get_array_value>
10000b68:	1007883a 	mov	r3,r2
10000b6c:	180b883a 	mov	r5,r3
10000b70:	8009883a 	mov	r4,r16
10000b74:	00004f00 	call	100004f0 <err>
10000b78:	e0bffe15 	stw	r2,-8(fp)
		total_err += curr_err;
10000b7c:	e17ffe17 	ldw	r5,-8(fp)
10000b80:	e13ffc17 	ldw	r4,-16(fp)
10000b84:	000274c0 	call	1000274c <__addsf3>
10000b88:	1007883a 	mov	r3,r2
10000b8c:	e0fffc15 	stw	r3,-16(fp)
		if(total_runs % ITER_TO_CHECK == 0) {
10000b90:	008403b4 	movhi	r2,4110
10000b94:	108b1904 	addi	r2,r2,11364
10000b98:	10800017 	ldw	r2,0(r2)
10000b9c:	01400284 	movi	r5,10
10000ba0:	1009883a 	mov	r4,r2
10000ba4:	00026f40 	call	100026f4 <__umodsi3>
10000ba8:	10002a1e 	bne	r2,zero,10000c54 <main+0x2d4>
			if((total_err / ITER_TO_CHECK) < CONVERGENCE_THRESHOLD) {
10000bac:	01504834 	movhi	r5,16672
10000bb0:	e13ffc17 	ldw	r4,-16(fp)
10000bb4:	0002c140 	call	10002c14 <__divsf3>
10000bb8:	1007883a 	mov	r3,r2
10000bbc:	1805883a 	mov	r2,r3
10000bc0:	1009883a 	mov	r4,r2
10000bc4:	00062bc0 	call	100062bc <__extendsfdf2>
10000bc8:	1011883a 	mov	r8,r2
10000bcc:	1813883a 	mov	r9,r3
10000bd0:	0191ebb4 	movhi	r6,18350
10000bd4:	31851ec4 	addi	r6,r6,5243
10000bd8:	01cfe134 	movhi	r7,16260
10000bdc:	39deb844 	addi	r7,r7,31457
10000be0:	4009883a 	mov	r4,r8
10000be4:	480b883a 	mov	r5,r9
10000be8:	00050640 	call	10005064 <__ledf2>
10000bec:	1000080e 	bge	r2,zero,10000c10 <main+0x290>
				printf("Data has converged at the %dth run\n", total_runs);
10000bf0:	008403b4 	movhi	r2,4110
10000bf4:	108b1904 	addi	r2,r2,11364
10000bf8:	10800017 	ldw	r2,0(r2)
10000bfc:	100b883a 	mov	r5,r2
10000c00:	01040374 	movhi	r4,4109
10000c04:	213d0804 	addi	r4,r4,-3040
10000c08:	0007d7c0 	call	10007d7c <printf>
				break;
10000c0c:	00002e06 	br	10000cc8 <main+0x348>
			}
			total_err = 0;
10000c10:	e03ffc15 	stw	zero,-16(fp)

			printf("Current iteration: %d\n", total_runs);
10000c14:	008403b4 	movhi	r2,4110
10000c18:	108b1904 	addi	r2,r2,11364
10000c1c:	10800017 	ldw	r2,0(r2)
10000c20:	100b883a 	mov	r5,r2
10000c24:	01040374 	movhi	r4,4109
10000c28:	213d1104 	addi	r4,r4,-3004
10000c2c:	0007d7c0 	call	10007d7c <printf>
			printf("Current error: %f\n\n", curr_err);
10000c30:	e13ffe17 	ldw	r4,-8(fp)
10000c34:	00062bc0 	call	100062bc <__extendsfdf2>
10000c38:	100d883a 	mov	r6,r2
10000c3c:	180f883a 	mov	r7,r3
10000c40:	300b883a 	mov	r5,r6
10000c44:	380d883a 	mov	r6,r7
10000c48:	01040374 	movhi	r4,4109
10000c4c:	213d1704 	addi	r4,r4,-2980
10000c50:	0007d7c0 	call	10007d7c <printf>
		}

		// move onto the next data entry
		total_runs++;
10000c54:	008403b4 	movhi	r2,4110
10000c58:	108b1904 	addi	r2,r2,11364
10000c5c:	10800017 	ldw	r2,0(r2)
10000c60:	10c00044 	addi	r3,r2,1
10000c64:	008403b4 	movhi	r2,4110
10000c68:	108b1904 	addi	r2,r2,11364
10000c6c:	10c00015 	stw	r3,0(r2)
		curr_point++;
10000c70:	008403b4 	movhi	r2,4110
10000c74:	108b1b04 	addi	r2,r2,11372
10000c78:	10800017 	ldw	r2,0(r2)
10000c7c:	10c00044 	addi	r3,r2,1
10000c80:	008403b4 	movhi	r2,4110
10000c84:	108b1b04 	addi	r2,r2,11372
10000c88:	10c00015 	stw	r3,0(r2)
		if(curr_point >= target_vals.used) {
10000c8c:	008403b4 	movhi	r2,4110
10000c90:	108b4f04 	addi	r2,r2,11580
10000c94:	10c00117 	ldw	r3,4(r2)
10000c98:	008403b4 	movhi	r2,4110
10000c9c:	108b1b04 	addi	r2,r2,11372
10000ca0:	10800017 	ldw	r2,0(r2)
10000ca4:	10c00336 	bltu	r2,r3,10000cb4 <main+0x334>
			curr_point = 0;
10000ca8:	008403b4 	movhi	r2,4110
10000cac:	108b1b04 	addi	r2,r2,11372
10000cb0:	10000015 	stw	zero,0(r2)
		return -1;
	}

	printf("Starting training...\n");
	float total_err = 0;
	while(total_runs < 1000) {
10000cb4:	008403b4 	movhi	r2,4110
10000cb8:	108b1904 	addi	r2,r2,11364
10000cbc:	10800017 	ldw	r2,0(r2)
10000cc0:	1080fa30 	cmpltui	r2,r2,1000
10000cc4:	103f741e 	bne	r2,zero,10000a98 <__alt_data_end+0xf8000a98>
		if(curr_point >= target_vals.used) {
			curr_point = 0;
		}
	}

	printf("Done training! Press ENTER to begin testing the neural network.\n");
10000cc8:	01040374 	movhi	r4,4109
10000ccc:	213d1c04 	addi	r4,r4,-2960
10000cd0:	0007fa00 	call	10007fa0 <puts>
	getchar();
10000cd4:	008403b4 	movhi	r2,4110
10000cd8:	10a4cc04 	addi	r2,r2,-27856
10000cdc:	10800017 	ldw	r2,0(r2)
10000ce0:	10800117 	ldw	r2,4(r2)
10000ce4:	1009883a 	mov	r4,r2
10000ce8:	0006afc0 	call	10006afc <getc>

	// clean up arrays from training
	free_array(&target_vals);
10000cec:	010403b4 	movhi	r4,4110
10000cf0:	210b4f04 	addi	r4,r4,11580
10000cf4:	00011480 	call	10001148 <free_array>
	free_array(&attr_vals);
10000cf8:	010403b4 	movhi	r4,4110
10000cfc:	210b5204 	addi	r4,r4,11592
10000d00:	00011480 	call	10001148 <free_array>
	printf("Parsing testing dataset...\n");
10000d04:	01040374 	movhi	r4,4109
10000d08:	213d2c04 	addi	r4,r4,-2896
10000d0c:	0007fa00 	call	10007fa0 <puts>
	if(parse_testing_data() == -1) {
10000d10:	000084c0 	call	1000084c <parse_testing_data>
10000d14:	10bfffd8 	cmpnei	r2,r2,-1
10000d18:	1000051e 	bne	r2,zero,10000d30 <main+0x3b0>
		printf("Failed to parse dataset\n");
10000d1c:	01040374 	movhi	r4,4109
10000d20:	213cfc04 	addi	r4,r4,-3088
10000d24:	0007fa00 	call	10007fa0 <puts>
		return -1;
10000d28:	00bfffc4 	movi	r2,-1
10000d2c:	00008d06 	br	10000f64 <main+0x5e4>
	}

	// test here
	printf("Starting testing...\n");
10000d30:	01040374 	movhi	r4,4109
10000d34:	213d3304 	addi	r4,r4,-2868
10000d38:	0007fa00 	call	10007fa0 <puts>
	while(curr_point < target_vals.used) {
10000d3c:	00004406 	br	10000e50 <main+0x4d0>
		// set up the first layer and evaluate it
		layer_1.curr_point = curr_point;
10000d40:	008403b4 	movhi	r2,4110
10000d44:	108b1b04 	addi	r2,r2,11372
10000d48:	10800017 	ldw	r2,0(r2)
10000d4c:	1009883a 	mov	r4,r2
10000d50:	0003cf80 	call	10003cf8 <__floatunsisf>
10000d54:	1007883a 	mov	r3,r2
10000d58:	008403b4 	movhi	r2,4110
10000d5c:	108b4604 	addi	r2,r2,11544
10000d60:	10c00115 	stw	r3,4(r2)
		eval_layer_1(&layer_1);
10000d64:	010403b4 	movhi	r4,4110
10000d68:	210b4604 	addi	r4,r4,11544
10000d6c:	00017680 	call	10001768 <eval_layer_1>

		// set up the second layer and evaluate it
		layer_2.curr_point = curr_point;
10000d70:	008403b4 	movhi	r2,4110
10000d74:	108b1b04 	addi	r2,r2,11372
10000d78:	10800017 	ldw	r2,0(r2)
10000d7c:	1009883a 	mov	r4,r2
10000d80:	0003cf80 	call	10003cf8 <__floatunsisf>
10000d84:	1007883a 	mov	r3,r2
10000d88:	008403b4 	movhi	r2,4110
10000d8c:	108b3c04 	addi	r2,r2,11504
10000d90:	10c00115 	stw	r3,4(r2)
		eval_layer_2(&layer_2);
10000d94:	010403b4 	movhi	r4,4110
10000d98:	210b3c04 	addi	r4,r4,11504
10000d9c:	00020000 	call	10002000 <eval_layer_2>

		// round up or down
		float temp = 0;
10000da0:	e03ffd15 	stw	zero,-12(fp)
		if(layer_2.layer_out[0] >= 0.5) {
10000da4:	008403b4 	movhi	r2,4110
10000da8:	108b3c04 	addi	r2,r2,11504
10000dac:	10800817 	ldw	r2,32(r2)
10000db0:	10c00017 	ldw	r3,0(r2)
10000db4:	014fc034 	movhi	r5,16128
10000db8:	1809883a 	mov	r4,r3
10000dbc:	00030cc0 	call	100030cc <__gesf2>
10000dc0:	10000216 	blt	r2,zero,10000dcc <main+0x44c>
			temp = 1;
10000dc4:	008fe034 	movhi	r2,16256
10000dc8:	e0bffd15 	stw	r2,-12(fp)
		}

		// check for validity of input
		if(temp != get_array_value(&target_vals, curr_point)) {
10000dcc:	008403b4 	movhi	r2,4110
10000dd0:	108b1b04 	addi	r2,r2,11372
10000dd4:	10800017 	ldw	r2,0(r2)
10000dd8:	100b883a 	mov	r5,r2
10000ddc:	010403b4 	movhi	r4,4110
10000de0:	210b4f04 	addi	r4,r4,11580
10000de4:	00010e80 	call	100010e8 <get_array_value>
10000de8:	1007883a 	mov	r3,r2
10000dec:	e17ffd17 	ldw	r5,-12(fp)
10000df0:	1809883a 	mov	r4,r3
10000df4:	00030540 	call	10003054 <__eqsf2>
10000df8:	10000726 	beq	r2,zero,10000e18 <main+0x498>
			num_incorrect++;
10000dfc:	008403b4 	movhi	r2,4110
10000e00:	108b1a04 	addi	r2,r2,11368
10000e04:	10800017 	ldw	r2,0(r2)
10000e08:	10c00044 	addi	r3,r2,1
10000e0c:	008403b4 	movhi	r2,4110
10000e10:	108b1a04 	addi	r2,r2,11368
10000e14:	10c00015 	stw	r3,0(r2)
		}

		// move onto the next data entry
		total_runs++;
10000e18:	008403b4 	movhi	r2,4110
10000e1c:	108b1904 	addi	r2,r2,11364
10000e20:	10800017 	ldw	r2,0(r2)
10000e24:	10c00044 	addi	r3,r2,1
10000e28:	008403b4 	movhi	r2,4110
10000e2c:	108b1904 	addi	r2,r2,11364
10000e30:	10c00015 	stw	r3,0(r2)
		curr_point++;
10000e34:	008403b4 	movhi	r2,4110
10000e38:	108b1b04 	addi	r2,r2,11372
10000e3c:	10800017 	ldw	r2,0(r2)
10000e40:	10c00044 	addi	r3,r2,1
10000e44:	008403b4 	movhi	r2,4110
10000e48:	108b1b04 	addi	r2,r2,11372
10000e4c:	10c00015 	stw	r3,0(r2)
		return -1;
	}

	// test here
	printf("Starting testing...\n");
	while(curr_point < target_vals.used) {
10000e50:	008403b4 	movhi	r2,4110
10000e54:	108b4f04 	addi	r2,r2,11580
10000e58:	10c00117 	ldw	r3,4(r2)
10000e5c:	008403b4 	movhi	r2,4110
10000e60:	108b1b04 	addi	r2,r2,11372
10000e64:	10800017 	ldw	r2,0(r2)
10000e68:	10ffb536 	bltu	r2,r3,10000d40 <__alt_data_end+0xf8000d40>
		// move onto the next data entry
		total_runs++;
		curr_point++;
	}

	printf("Incorrectly classified from testing dataset: %d\n", num_incorrect);
10000e6c:	008403b4 	movhi	r2,4110
10000e70:	108b1a04 	addi	r2,r2,11368
10000e74:	10800017 	ldw	r2,0(r2)
10000e78:	100b883a 	mov	r5,r2
10000e7c:	01040374 	movhi	r4,4109
10000e80:	213d3804 	addi	r4,r4,-2848
10000e84:	0007d7c0 	call	10007d7c <printf>
	printf("Accuracy percentage: %0.2f%%\n", (1 - ((float) num_incorrect) / target_vals.used) * 100);
10000e88:	008403b4 	movhi	r2,4110
10000e8c:	108b1a04 	addi	r2,r2,11368
10000e90:	10800017 	ldw	r2,0(r2)
10000e94:	1009883a 	mov	r4,r2
10000e98:	0003cf80 	call	10003cf8 <__floatunsisf>
10000e9c:	1021883a 	mov	r16,r2
10000ea0:	008403b4 	movhi	r2,4110
10000ea4:	108b4f04 	addi	r2,r2,11580
10000ea8:	10800117 	ldw	r2,4(r2)
10000eac:	1009883a 	mov	r4,r2
10000eb0:	0003cf80 	call	10003cf8 <__floatunsisf>
10000eb4:	1007883a 	mov	r3,r2
10000eb8:	180b883a 	mov	r5,r3
10000ebc:	8009883a 	mov	r4,r16
10000ec0:	0002c140 	call	10002c14 <__divsf3>
10000ec4:	1007883a 	mov	r3,r2
10000ec8:	1805883a 	mov	r2,r3
10000ecc:	100b883a 	mov	r5,r2
10000ed0:	010fe034 	movhi	r4,16256
10000ed4:	00036800 	call	10003680 <__subsf3>
10000ed8:	1007883a 	mov	r3,r2
10000edc:	1805883a 	mov	r2,r3
10000ee0:	0150b234 	movhi	r5,17096
10000ee4:	1009883a 	mov	r4,r2
10000ee8:	00032500 	call	10003250 <__mulsf3>
10000eec:	1007883a 	mov	r3,r2
10000ef0:	1805883a 	mov	r2,r3
10000ef4:	1009883a 	mov	r4,r2
10000ef8:	00062bc0 	call	100062bc <__extendsfdf2>
10000efc:	100d883a 	mov	r6,r2
10000f00:	180f883a 	mov	r7,r3
10000f04:	300b883a 	mov	r5,r6
10000f08:	380d883a 	mov	r6,r7
10000f0c:	01040374 	movhi	r4,4109
10000f10:	213d4504 	addi	r4,r4,-2796
10000f14:	0007d7c0 	call	10007d7c <printf>
	getchar();
10000f18:	008403b4 	movhi	r2,4110
10000f1c:	10a4cc04 	addi	r2,r2,-27856
10000f20:	10800017 	ldw	r2,0(r2)
10000f24:	10800117 	ldw	r2,4(r2)
10000f28:	1009883a 	mov	r4,r2
10000f2c:	0006afc0 	call	10006afc <getc>

	free_layer_1(&layer_1);
10000f30:	010403b4 	movhi	r4,4110
10000f34:	210b4604 	addi	r4,r4,11544
10000f38:	0001ba00 	call	10001ba0 <free_layer_1>
	free_layer_2(&layer_2);
10000f3c:	010403b4 	movhi	r4,4110
10000f40:	210b3c04 	addi	r4,r4,11504
10000f44:	00023d40 	call	100023d4 <free_layer_2>
	free_array(&target_vals);
10000f48:	010403b4 	movhi	r4,4110
10000f4c:	210b4f04 	addi	r4,r4,11580
10000f50:	00011480 	call	10001148 <free_array>
	free_array(&attr_vals);
10000f54:	010403b4 	movhi	r4,4110
10000f58:	210b5204 	addi	r4,r4,11592
10000f5c:	00011480 	call	10001148 <free_array>

	return 0;
10000f60:	0005883a 	mov	r2,zero
}
10000f64:	e6ffff04 	addi	sp,fp,-4
10000f68:	dfc00217 	ldw	ra,8(sp)
10000f6c:	df000117 	ldw	fp,4(sp)
10000f70:	dc000017 	ldw	r16,0(sp)
10000f74:	dec00304 	addi	sp,sp,12
10000f78:	f800283a 	ret

10000f7c <init_array>:
#include "types.h"

// dynamically sized array
void init_array(array_t * a, float initial_size) {
10000f7c:	defffc04 	addi	sp,sp,-16
10000f80:	dfc00315 	stw	ra,12(sp)
10000f84:	df000215 	stw	fp,8(sp)
10000f88:	df000204 	addi	fp,sp,8
10000f8c:	e13ffe15 	stw	r4,-8(fp)
10000f90:	e17fff15 	stw	r5,-4(fp)
    a->array = (float *) malloc(initial_size * sizeof(float));
10000f94:	01502034 	movhi	r5,16512
10000f98:	e13fff17 	ldw	r4,-4(fp)
10000f9c:	00032500 	call	10003250 <__mulsf3>
10000fa0:	1007883a 	mov	r3,r2
10000fa4:	1805883a 	mov	r2,r3
10000fa8:	1009883a 	mov	r4,r2
10000fac:	00025380 	call	10002538 <__fixunssfsi>
10000fb0:	1009883a 	mov	r4,r2
10000fb4:	0006ba00 	call	10006ba0 <malloc>
10000fb8:	1007883a 	mov	r3,r2
10000fbc:	e0bffe17 	ldw	r2,-8(fp)
10000fc0:	10c00015 	stw	r3,0(r2)
    a->used = 0;
10000fc4:	e0bffe17 	ldw	r2,-8(fp)
10000fc8:	10000115 	stw	zero,4(r2)
    a->size = initial_size;
10000fcc:	e0bffe17 	ldw	r2,-8(fp)
10000fd0:	e0ffff17 	ldw	r3,-4(fp)
10000fd4:	10c00215 	stw	r3,8(r2)
}
10000fd8:	0001883a 	nop
10000fdc:	e037883a 	mov	sp,fp
10000fe0:	dfc00117 	ldw	ra,4(sp)
10000fe4:	df000017 	ldw	fp,0(sp)
10000fe8:	dec00204 	addi	sp,sp,8
10000fec:	f800283a 	ret

10000ff0 <insert_array>:

void insert_array(array_t * a, float element) {
10000ff0:	defffb04 	addi	sp,sp,-20
10000ff4:	dfc00415 	stw	ra,16(sp)
10000ff8:	df000315 	stw	fp,12(sp)
10000ffc:	dc000215 	stw	r16,8(sp)
10001000:	df000304 	addi	fp,sp,12
10001004:	e13ffd15 	stw	r4,-12(fp)
10001008:	e17ffe15 	stw	r5,-8(fp)
    if (a->used == a->size) {
1000100c:	e0bffd17 	ldw	r2,-12(fp)
10001010:	10800117 	ldw	r2,4(r2)
10001014:	1009883a 	mov	r4,r2
10001018:	0003cf80 	call	10003cf8 <__floatunsisf>
1000101c:	1009883a 	mov	r4,r2
10001020:	e0bffd17 	ldw	r2,-12(fp)
10001024:	10c00217 	ldw	r3,8(r2)
10001028:	180b883a 	mov	r5,r3
1000102c:	00030540 	call	10003054 <__eqsf2>
10001030:	10001a1e 	bne	r2,zero,1000109c <insert_array+0xac>
        a->size *= 2;
10001034:	e0fffd17 	ldw	r3,-12(fp)
10001038:	18800217 	ldw	r2,8(r3)
1000103c:	100b883a 	mov	r5,r2
10001040:	1009883a 	mov	r4,r2
10001044:	000274c0 	call	1000274c <__addsf3>
10001048:	1009883a 	mov	r4,r2
1000104c:	2007883a 	mov	r3,r4
10001050:	e0bffd17 	ldw	r2,-12(fp)
10001054:	10c00215 	stw	r3,8(r2)
        a->array = (float *) realloc(a->array, a->size * sizeof(float));
10001058:	e0bffd17 	ldw	r2,-12(fp)
1000105c:	14000017 	ldw	r16,0(r2)
10001060:	e0bffd17 	ldw	r2,-12(fp)
10001064:	10c00217 	ldw	r3,8(r2)
10001068:	01502034 	movhi	r5,16512
1000106c:	1809883a 	mov	r4,r3
10001070:	00032500 	call	10003250 <__mulsf3>
10001074:	1007883a 	mov	r3,r2
10001078:	1805883a 	mov	r2,r3
1000107c:	1009883a 	mov	r4,r2
10001080:	00025380 	call	10002538 <__fixunssfsi>
10001084:	100b883a 	mov	r5,r2
10001088:	8009883a 	mov	r4,r16
1000108c:	00081980 	call	10008198 <realloc>
10001090:	1007883a 	mov	r3,r2
10001094:	e0bffd17 	ldw	r2,-12(fp)
10001098:	10c00015 	stw	r3,0(r2)
    }

    a->array[a->used++] = element;
1000109c:	e0bffd17 	ldw	r2,-12(fp)
100010a0:	10c00017 	ldw	r3,0(r2)
100010a4:	e0bffd17 	ldw	r2,-12(fp)
100010a8:	10800117 	ldw	r2,4(r2)
100010ac:	11400044 	addi	r5,r2,1
100010b0:	e13ffd17 	ldw	r4,-12(fp)
100010b4:	21400115 	stw	r5,4(r4)
100010b8:	1085883a 	add	r2,r2,r2
100010bc:	1085883a 	add	r2,r2,r2
100010c0:	1885883a 	add	r2,r3,r2
100010c4:	e0fffe17 	ldw	r3,-8(fp)
100010c8:	10c00015 	stw	r3,0(r2)
}
100010cc:	0001883a 	nop
100010d0:	e6ffff04 	addi	sp,fp,-4
100010d4:	dfc00217 	ldw	ra,8(sp)
100010d8:	df000117 	ldw	fp,4(sp)
100010dc:	dc000017 	ldw	r16,0(sp)
100010e0:	dec00304 	addi	sp,sp,12
100010e4:	f800283a 	ret

100010e8 <get_array_value>:

float get_array_value(array_t * a, uint32_t idx) {
100010e8:	defffd04 	addi	sp,sp,-12
100010ec:	df000215 	stw	fp,8(sp)
100010f0:	df000204 	addi	fp,sp,8
100010f4:	e13ffe15 	stw	r4,-8(fp)
100010f8:	e17fff15 	stw	r5,-4(fp)
    if(idx >= a->used) {
100010fc:	e0bffe17 	ldw	r2,-8(fp)
10001100:	10800117 	ldw	r2,4(r2)
10001104:	e0ffff17 	ldw	r3,-4(fp)
10001108:	18800236 	bltu	r3,r2,10001114 <get_array_value+0x2c>
        return -1;
1000110c:	00afe034 	movhi	r2,49024
10001110:	00000706 	br	10001130 <get_array_value+0x48>
    } else {
        return a->array[idx];
10001114:	e0bffe17 	ldw	r2,-8(fp)
10001118:	10c00017 	ldw	r3,0(r2)
1000111c:	e0bfff17 	ldw	r2,-4(fp)
10001120:	1085883a 	add	r2,r2,r2
10001124:	1085883a 	add	r2,r2,r2
10001128:	1887883a 	add	r3,r3,r2
1000112c:	18800017 	ldw	r2,0(r3)
10001130:	1007883a 	mov	r3,r2
    }
}
10001134:	1805883a 	mov	r2,r3
10001138:	e037883a 	mov	sp,fp
1000113c:	df000017 	ldw	fp,0(sp)
10001140:	dec00104 	addi	sp,sp,4
10001144:	f800283a 	ret

10001148 <free_array>:

void free_array(array_t *a) {
10001148:	defffd04 	addi	sp,sp,-12
1000114c:	dfc00215 	stw	ra,8(sp)
10001150:	df000115 	stw	fp,4(sp)
10001154:	df000104 	addi	fp,sp,4
10001158:	e13fff15 	stw	r4,-4(fp)
    free(a->array);
1000115c:	e0bfff17 	ldw	r2,-4(fp)
10001160:	10800017 	ldw	r2,0(r2)
10001164:	1009883a 	mov	r4,r2
10001168:	0006be00 	call	10006be0 <free>
    a->array = NULL;
1000116c:	e0bfff17 	ldw	r2,-4(fp)
10001170:	10000015 	stw	zero,0(r2)
    a->used = a->size = 0;
10001174:	e0bfff17 	ldw	r2,-4(fp)
10001178:	10000215 	stw	zero,8(r2)
1000117c:	e0bfff17 	ldw	r2,-4(fp)
10001180:	10000115 	stw	zero,4(r2)
}
10001184:	0001883a 	nop
10001188:	e037883a 	mov	sp,fp
1000118c:	dfc00117 	ldw	ra,4(sp)
10001190:	df000017 	ldw	fp,0(sp)
10001194:	dec00204 	addi	sp,sp,8
10001198:	f800283a 	ret

1000119c <print_array>:

void print_array(array_t * a) {
1000119c:	defffc04 	addi	sp,sp,-16
100011a0:	dfc00315 	stw	ra,12(sp)
100011a4:	df000215 	stw	fp,8(sp)
100011a8:	df000204 	addi	fp,sp,8
100011ac:	e13fff15 	stw	r4,-4(fp)
    printf("Size of array is %d\n", a->used);
100011b0:	e0bfff17 	ldw	r2,-4(fp)
100011b4:	10800117 	ldw	r2,4(r2)
100011b8:	100b883a 	mov	r5,r2
100011bc:	01040374 	movhi	r4,4109
100011c0:	213d4d04 	addi	r4,r4,-2764
100011c4:	0007d7c0 	call	10007d7c <printf>
    for(int i = 0; i < a->used; i++) {
100011c8:	e03ffe15 	stw	zero,-8(fp)
100011cc:	00001006 	br	10001210 <print_array+0x74>
        printf("%d ", (uint32_t) a->array[i]);
100011d0:	e0bfff17 	ldw	r2,-4(fp)
100011d4:	10c00017 	ldw	r3,0(r2)
100011d8:	e0bffe17 	ldw	r2,-8(fp)
100011dc:	1085883a 	add	r2,r2,r2
100011e0:	1085883a 	add	r2,r2,r2
100011e4:	1885883a 	add	r2,r3,r2
100011e8:	10c00017 	ldw	r3,0(r2)
100011ec:	1809883a 	mov	r4,r3
100011f0:	00025380 	call	10002538 <__fixunssfsi>
100011f4:	100b883a 	mov	r5,r2
100011f8:	01040374 	movhi	r4,4109
100011fc:	213d5304 	addi	r4,r4,-2740
10001200:	0007d7c0 	call	10007d7c <printf>
    a->used = a->size = 0;
}

void print_array(array_t * a) {
    printf("Size of array is %d\n", a->used);
    for(int i = 0; i < a->used; i++) {
10001204:	e0bffe17 	ldw	r2,-8(fp)
10001208:	10800044 	addi	r2,r2,1
1000120c:	e0bffe15 	stw	r2,-8(fp)
10001210:	e0bfff17 	ldw	r2,-4(fp)
10001214:	10800117 	ldw	r2,4(r2)
10001218:	e0fffe17 	ldw	r3,-8(fp)
1000121c:	18bfec36 	bltu	r3,r2,100011d0 <__alt_data_end+0xf80011d0>
        printf("%d ", (uint32_t) a->array[i]);
    }
    printf("\n");
10001220:	01000284 	movi	r4,10
10001224:	0007e380 	call	10007e38 <putchar>
}
10001228:	0001883a 	nop
1000122c:	e037883a 	mov	sp,fp
10001230:	dfc00117 	ldw	ra,4(sp)
10001234:	df000017 	ldw	fp,0(sp)
10001238:	dec00204 	addi	sp,sp,8
1000123c:	f800283a 	ret

10001240 <print_float_array>:

void print_float_array(float * arr, uint32_t size) {
10001240:	defffb04 	addi	sp,sp,-20
10001244:	dfc00415 	stw	ra,16(sp)
10001248:	df000315 	stw	fp,12(sp)
1000124c:	df000304 	addi	fp,sp,12
10001250:	e13ffe15 	stw	r4,-8(fp)
10001254:	e17fff15 	stw	r5,-4(fp)
    for(int i = 0; i < size; i++) {
10001258:	e03ffd15 	stw	zero,-12(fp)
1000125c:	00001306 	br	100012ac <print_float_array+0x6c>
        printf("%f ", arr[i]);
10001260:	e0bffd17 	ldw	r2,-12(fp)
10001264:	1085883a 	add	r2,r2,r2
10001268:	1085883a 	add	r2,r2,r2
1000126c:	1007883a 	mov	r3,r2
10001270:	e0bffe17 	ldw	r2,-8(fp)
10001274:	10c5883a 	add	r2,r2,r3
10001278:	10c00017 	ldw	r3,0(r2)
1000127c:	1809883a 	mov	r4,r3
10001280:	00062bc0 	call	100062bc <__extendsfdf2>
10001284:	100d883a 	mov	r6,r2
10001288:	180f883a 	mov	r7,r3
1000128c:	300b883a 	mov	r5,r6
10001290:	380d883a 	mov	r6,r7
10001294:	01040374 	movhi	r4,4109
10001298:	213d5404 	addi	r4,r4,-2736
1000129c:	0007d7c0 	call	10007d7c <printf>
    }
    printf("\n");
}

void print_float_array(float * arr, uint32_t size) {
    for(int i = 0; i < size; i++) {
100012a0:	e0bffd17 	ldw	r2,-12(fp)
100012a4:	10800044 	addi	r2,r2,1
100012a8:	e0bffd15 	stw	r2,-12(fp)
100012ac:	e0fffd17 	ldw	r3,-12(fp)
100012b0:	e0bfff17 	ldw	r2,-4(fp)
100012b4:	18bfea36 	bltu	r3,r2,10001260 <__alt_data_end+0xf8001260>
        printf("%f ", arr[i]);
    }
}
100012b8:	0001883a 	nop
100012bc:	e037883a 	mov	sp,fp
100012c0:	dfc00117 	ldw	ra,4(sp)
100012c4:	df000017 	ldw	fp,0(sp)
100012c8:	dec00204 	addi	sp,sp,8
100012cc:	f800283a 	ret

100012d0 <dot_product_1>:

float dot_product_1(array_t * arr1, float * arr2, float size, uint32_t curr_point) {
100012d0:	defff704 	addi	sp,sp,-36
100012d4:	dfc00815 	stw	ra,32(sp)
100012d8:	df000715 	stw	fp,28(sp)
100012dc:	dc000615 	stw	r16,24(sp)
100012e0:	df000704 	addi	fp,sp,28
100012e4:	e13ffb15 	stw	r4,-20(fp)
100012e8:	e17ffc15 	stw	r5,-16(fp)
100012ec:	e1bffd15 	stw	r6,-12(fp)
100012f0:	e1fffe15 	stw	r7,-8(fp)
    float total_sum = 0;
100012f4:	e03ff915 	stw	zero,-28(fp)
    for(int i = 0; i < size; i++) {
100012f8:	e03ffa15 	stw	zero,-24(fp)
100012fc:	00002906 	br	100013a4 <dot_product_1+0xd4>
        total_sum += (get_array_value(arr1, size * curr_point + i) * arr2[i]);
10001300:	e13ffe17 	ldw	r4,-8(fp)
10001304:	0003cf80 	call	10003cf8 <__floatunsisf>
10001308:	1007883a 	mov	r3,r2
1000130c:	e17ffd17 	ldw	r5,-12(fp)
10001310:	1809883a 	mov	r4,r3
10001314:	00032500 	call	10003250 <__mulsf3>
10001318:	1007883a 	mov	r3,r2
1000131c:	1821883a 	mov	r16,r3
10001320:	e13ffa17 	ldw	r4,-24(fp)
10001324:	0003bd40 	call	10003bd4 <__floatsisf>
10001328:	1007883a 	mov	r3,r2
1000132c:	180b883a 	mov	r5,r3
10001330:	8009883a 	mov	r4,r16
10001334:	000274c0 	call	1000274c <__addsf3>
10001338:	1007883a 	mov	r3,r2
1000133c:	1805883a 	mov	r2,r3
10001340:	1009883a 	mov	r4,r2
10001344:	00025380 	call	10002538 <__fixunssfsi>
10001348:	100b883a 	mov	r5,r2
1000134c:	e13ffb17 	ldw	r4,-20(fp)
10001350:	00010e80 	call	100010e8 <get_array_value>
10001354:	1009883a 	mov	r4,r2
10001358:	e0bffa17 	ldw	r2,-24(fp)
1000135c:	1085883a 	add	r2,r2,r2
10001360:	1085883a 	add	r2,r2,r2
10001364:	1007883a 	mov	r3,r2
10001368:	e0bffc17 	ldw	r2,-16(fp)
1000136c:	10c5883a 	add	r2,r2,r3
10001370:	10c00017 	ldw	r3,0(r2)
10001374:	180b883a 	mov	r5,r3
10001378:	00032500 	call	10003250 <__mulsf3>
1000137c:	1007883a 	mov	r3,r2
10001380:	1805883a 	mov	r2,r3
10001384:	100b883a 	mov	r5,r2
10001388:	e13ff917 	ldw	r4,-28(fp)
1000138c:	000274c0 	call	1000274c <__addsf3>
10001390:	1007883a 	mov	r3,r2
10001394:	e0fff915 	stw	r3,-28(fp)
    }
}

float dot_product_1(array_t * arr1, float * arr2, float size, uint32_t curr_point) {
    float total_sum = 0;
    for(int i = 0; i < size; i++) {
10001398:	e0bffa17 	ldw	r2,-24(fp)
1000139c:	10800044 	addi	r2,r2,1
100013a0:	e0bffa15 	stw	r2,-24(fp)
100013a4:	e13ffa17 	ldw	r4,-24(fp)
100013a8:	0003bd40 	call	10003bd4 <__floatsisf>
100013ac:	1007883a 	mov	r3,r2
100013b0:	e17ffd17 	ldw	r5,-12(fp)
100013b4:	1809883a 	mov	r4,r3
100013b8:	00031880 	call	10003188 <__lesf2>
100013bc:	103fd016 	blt	r2,zero,10001300 <__alt_data_end+0xf8001300>
        total_sum += (get_array_value(arr1, size * curr_point + i) * arr2[i]);
    }

    return total_sum;
100013c0:	e0bff917 	ldw	r2,-28(fp)
100013c4:	1007883a 	mov	r3,r2
}
100013c8:	1805883a 	mov	r2,r3
100013cc:	e6ffff04 	addi	sp,fp,-4
100013d0:	dfc00217 	ldw	ra,8(sp)
100013d4:	df000117 	ldw	fp,4(sp)
100013d8:	dc000017 	ldw	r16,0(sp)
100013dc:	dec00304 	addi	sp,sp,12
100013e0:	f800283a 	ret

100013e4 <dot_product_2>:

float dot_product_2(float * arr1, float * arr2, float size) {
100013e4:	defff904 	addi	sp,sp,-28
100013e8:	dfc00615 	stw	ra,24(sp)
100013ec:	df000515 	stw	fp,20(sp)
100013f0:	df000504 	addi	fp,sp,20
100013f4:	e13ffd15 	stw	r4,-12(fp)
100013f8:	e17ffe15 	stw	r5,-8(fp)
100013fc:	e1bfff15 	stw	r6,-4(fp)
    float total_sum = 0;
10001400:	e03ffb15 	stw	zero,-20(fp)
    for(int i = 0; i < size; i++) {
10001404:	e03ffc15 	stw	zero,-16(fp)
10001408:	00001b06 	br	10001478 <dot_product_2+0x94>
        total_sum += (arr1[i] * arr2[i]);
1000140c:	e0bffc17 	ldw	r2,-16(fp)
10001410:	1085883a 	add	r2,r2,r2
10001414:	1085883a 	add	r2,r2,r2
10001418:	1007883a 	mov	r3,r2
1000141c:	e0bffd17 	ldw	r2,-12(fp)
10001420:	10c5883a 	add	r2,r2,r3
10001424:	10c00017 	ldw	r3,0(r2)
10001428:	e0bffc17 	ldw	r2,-16(fp)
1000142c:	1085883a 	add	r2,r2,r2
10001430:	1085883a 	add	r2,r2,r2
10001434:	1009883a 	mov	r4,r2
10001438:	e0bffe17 	ldw	r2,-8(fp)
1000143c:	1105883a 	add	r2,r2,r4
10001440:	11000017 	ldw	r4,0(r2)
10001444:	200b883a 	mov	r5,r4
10001448:	1809883a 	mov	r4,r3
1000144c:	00032500 	call	10003250 <__mulsf3>
10001450:	1007883a 	mov	r3,r2
10001454:	1805883a 	mov	r2,r3
10001458:	100b883a 	mov	r5,r2
1000145c:	e13ffb17 	ldw	r4,-20(fp)
10001460:	000274c0 	call	1000274c <__addsf3>
10001464:	1007883a 	mov	r3,r2
10001468:	e0fffb15 	stw	r3,-20(fp)
    return total_sum;
}

float dot_product_2(float * arr1, float * arr2, float size) {
    float total_sum = 0;
    for(int i = 0; i < size; i++) {
1000146c:	e0bffc17 	ldw	r2,-16(fp)
10001470:	10800044 	addi	r2,r2,1
10001474:	e0bffc15 	stw	r2,-16(fp)
10001478:	e13ffc17 	ldw	r4,-16(fp)
1000147c:	0003bd40 	call	10003bd4 <__floatsisf>
10001480:	1007883a 	mov	r3,r2
10001484:	e17fff17 	ldw	r5,-4(fp)
10001488:	1809883a 	mov	r4,r3
1000148c:	00031880 	call	10003188 <__lesf2>
10001490:	103fde16 	blt	r2,zero,1000140c <__alt_data_end+0xf800140c>
        total_sum += (arr1[i] * arr2[i]);
    }

    return total_sum;
10001494:	e0bffb17 	ldw	r2,-20(fp)
10001498:	1007883a 	mov	r3,r2
}
1000149c:	1805883a 	mov	r2,r3
100014a0:	e037883a 	mov	sp,fp
100014a4:	dfc00117 	ldw	ra,4(sp)
100014a8:	df000017 	ldw	fp,0(sp)
100014ac:	dec00204 	addi	sp,sp,8
100014b0:	f800283a 	ret

100014b4 <init_layer_1>:

// layers
void init_layer_1(layer_1_t * l, array_t * input_vals, float curr_point, float num_nodes, float layer_num) {
100014b4:	defff504 	addi	sp,sp,-44
100014b8:	dfc00a15 	stw	ra,40(sp)
100014bc:	df000915 	stw	fp,36(sp)
100014c0:	dc000815 	stw	r16,32(sp)
100014c4:	df000904 	addi	fp,sp,36
100014c8:	e13ffb15 	stw	r4,-20(fp)
100014cc:	e17ffc15 	stw	r5,-16(fp)
100014d0:	e1bffd15 	stw	r6,-12(fp)
100014d4:	e1fffe15 	stw	r7,-8(fp)
    l->input_vals = input_vals;
100014d8:	e0bffb17 	ldw	r2,-20(fp)
100014dc:	e0fffc17 	ldw	r3,-16(fp)
100014e0:	10c00015 	stw	r3,0(r2)
    l->curr_point = curr_point;
100014e4:	e0bffb17 	ldw	r2,-20(fp)
100014e8:	e0fffd17 	ldw	r3,-12(fp)
100014ec:	10c00115 	stw	r3,4(r2)
    l->num_nodes = num_nodes;
100014f0:	e0bffb17 	ldw	r2,-20(fp)
100014f4:	e0fffe17 	ldw	r3,-8(fp)
100014f8:	10c00215 	stw	r3,8(r2)
    l->layer_num = layer_num;
100014fc:	e0bffb17 	ldw	r2,-20(fp)
10001500:	e0c00217 	ldw	r3,8(fp)
10001504:	10c00315 	stw	r3,12(r2)

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
10001508:	01502034 	movhi	r5,16512
1000150c:	e13ffe17 	ldw	r4,-8(fp)
10001510:	00032500 	call	10003250 <__mulsf3>
10001514:	1007883a 	mov	r3,r2
10001518:	1805883a 	mov	r2,r3
1000151c:	1009883a 	mov	r4,r2
10001520:	00025380 	call	10002538 <__fixunssfsi>
10001524:	1009883a 	mov	r4,r2
10001528:	0006ba00 	call	10006ba0 <malloc>
1000152c:	1007883a 	mov	r3,r2
10001530:	e0bffb17 	ldw	r2,-20(fp)
10001534:	10c00415 	stw	r3,16(r2)
    for(int i = 0; i < num_nodes; i++) {
10001538:	e03ff715 	stw	zero,-36(fp)
1000153c:	00000c06 	br	10001570 <init_layer_1+0xbc>
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
10001540:	e0bffb17 	ldw	r2,-20(fp)
10001544:	10c00417 	ldw	r3,16(r2)
10001548:	e0bff717 	ldw	r2,-36(fp)
1000154c:	1085883a 	add	r2,r2,r2
10001550:	1085883a 	add	r2,r2,r2
10001554:	18a1883a 	add	r16,r3,r2
10001558:	01006404 	movi	r4,400
1000155c:	0006ba00 	call	10006ba0 <malloc>
10001560:	80800015 	stw	r2,0(r16)
    l->curr_point = curr_point;
    l->num_nodes = num_nodes;
    l->layer_num = layer_num;

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001564:	e0bff717 	ldw	r2,-36(fp)
10001568:	10800044 	addi	r2,r2,1
1000156c:	e0bff715 	stw	r2,-36(fp)
10001570:	e13ff717 	ldw	r4,-36(fp)
10001574:	0003bd40 	call	10003bd4 <__floatsisf>
10001578:	1007883a 	mov	r3,r2
1000157c:	e17ffe17 	ldw	r5,-8(fp)
10001580:	1809883a 	mov	r4,r3
10001584:	00031880 	call	10003188 <__lesf2>
10001588:	103fed16 	blt	r2,zero,10001540 <__alt_data_end+0xf8001540>
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
1000158c:	e03ff815 	stw	zero,-32(fp)
10001590:	00001e06 	br	1000160c <init_layer_1+0x158>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
10001594:	e03ff915 	stw	zero,-28(fp)
10001598:	00001606 	br	100015f4 <init_layer_1+0x140>
            l->weights[i][j] = drand48();
1000159c:	e0bffb17 	ldw	r2,-20(fp)
100015a0:	10c00417 	ldw	r3,16(r2)
100015a4:	e0bff817 	ldw	r2,-32(fp)
100015a8:	1085883a 	add	r2,r2,r2
100015ac:	1085883a 	add	r2,r2,r2
100015b0:	1885883a 	add	r2,r3,r2
100015b4:	10c00017 	ldw	r3,0(r2)
100015b8:	e0bff917 	ldw	r2,-28(fp)
100015bc:	1085883a 	add	r2,r2,r2
100015c0:	1085883a 	add	r2,r2,r2
100015c4:	18a1883a 	add	r16,r3,r2
100015c8:	00068780 	call	10006878 <drand48>
100015cc:	100b883a 	mov	r5,r2
100015d0:	180d883a 	mov	r6,r3
100015d4:	2809883a 	mov	r4,r5
100015d8:	300b883a 	mov	r5,r6
100015dc:	00063cc0 	call	100063cc <__truncdfsf2>
100015e0:	1007883a 	mov	r3,r2
100015e4:	80c00015 	stw	r3,0(r16)
    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100015e8:	e0bff917 	ldw	r2,-28(fp)
100015ec:	10800044 	addi	r2,r2,1
100015f0:	e0bff915 	stw	r2,-28(fp)
100015f4:	e0bff917 	ldw	r2,-28(fp)
100015f8:	10801910 	cmplti	r2,r2,100
100015fc:	103fe71e 	bne	r2,zero,1000159c <__alt_data_end+0xf800159c>

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(ATTRS_PER_ENTRY * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001600:	e0bff817 	ldw	r2,-32(fp)
10001604:	10800044 	addi	r2,r2,1
10001608:	e0bff815 	stw	r2,-32(fp)
1000160c:	e13ff817 	ldw	r4,-32(fp)
10001610:	0003bd40 	call	10003bd4 <__floatsisf>
10001614:	1007883a 	mov	r3,r2
10001618:	e17ffe17 	ldw	r5,-8(fp)
1000161c:	1809883a 	mov	r4,r3
10001620:	00031880 	call	10003188 <__lesf2>
10001624:	103fdb16 	blt	r2,zero,10001594 <__alt_data_end+0xf8001594>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
10001628:	e13ffe17 	ldw	r4,-8(fp)
1000162c:	00025380 	call	10002538 <__fixunssfsi>
10001630:	01400104 	movi	r5,4
10001634:	1009883a 	mov	r4,r2
10001638:	00066780 	call	10006678 <calloc>
1000163c:	1007883a 	mov	r3,r2
10001640:	e0bffb17 	ldw	r2,-20(fp)
10001644:	10c00515 	stw	r3,20(r2)
    for(int i = 0; i < num_nodes; i++) {
10001648:	e03ffa15 	stw	zero,-24(fp)
1000164c:	00000d06 	br	10001684 <init_layer_1+0x1d0>
        l->weight_deltas[i] = (float *) calloc(ATTRS_PER_ENTRY, sizeof(float));
10001650:	e0bffb17 	ldw	r2,-20(fp)
10001654:	10c00517 	ldw	r3,20(r2)
10001658:	e0bffa17 	ldw	r2,-24(fp)
1000165c:	1085883a 	add	r2,r2,r2
10001660:	1085883a 	add	r2,r2,r2
10001664:	18a1883a 	add	r16,r3,r2
10001668:	01400104 	movi	r5,4
1000166c:	01001904 	movi	r4,100
10001670:	00066780 	call	10006678 <calloc>
10001674:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001678:	e0bffa17 	ldw	r2,-24(fp)
1000167c:	10800044 	addi	r2,r2,1
10001680:	e0bffa15 	stw	r2,-24(fp)
10001684:	e13ffa17 	ldw	r4,-24(fp)
10001688:	0003bd40 	call	10003bd4 <__floatsisf>
1000168c:	1007883a 	mov	r3,r2
10001690:	e17ffe17 	ldw	r5,-8(fp)
10001694:	1809883a 	mov	r4,r3
10001698:	00031880 	call	10003188 <__lesf2>
1000169c:	103fec16 	blt	r2,zero,10001650 <__alt_data_end+0xf8001650>
        l->weight_deltas[i] = (float *) calloc(ATTRS_PER_ENTRY, sizeof(float));
    }

    l->layer_net = (float *) calloc(num_nodes, sizeof(float));
100016a0:	e13ffe17 	ldw	r4,-8(fp)
100016a4:	00025380 	call	10002538 <__fixunssfsi>
100016a8:	01400104 	movi	r5,4
100016ac:	1009883a 	mov	r4,r2
100016b0:	00066780 	call	10006678 <calloc>
100016b4:	1007883a 	mov	r3,r2
100016b8:	e0bffb17 	ldw	r2,-20(fp)
100016bc:	10c00615 	stw	r3,24(r2)
    l->layer_out = (float *) calloc(num_nodes, sizeof(float));
100016c0:	e13ffe17 	ldw	r4,-8(fp)
100016c4:	00025380 	call	10002538 <__fixunssfsi>
100016c8:	01400104 	movi	r5,4
100016cc:	1009883a 	mov	r4,r2
100016d0:	00066780 	call	10006678 <calloc>
100016d4:	1007883a 	mov	r3,r2
100016d8:	e0bffb17 	ldw	r2,-20(fp)
100016dc:	10c00715 	stw	r3,28(r2)
    l->bias = (drand48() * 2) - 1;
100016e0:	00068780 	call	10006878 <drand48>
100016e4:	1011883a 	mov	r8,r2
100016e8:	1813883a 	mov	r9,r3
100016ec:	400d883a 	mov	r6,r8
100016f0:	480f883a 	mov	r7,r9
100016f4:	4009883a 	mov	r4,r8
100016f8:	480b883a 	mov	r5,r9
100016fc:	0003de80 	call	10003de8 <__adddf3>
10001700:	1009883a 	mov	r4,r2
10001704:	180b883a 	mov	r5,r3
10001708:	2005883a 	mov	r2,r4
1000170c:	2807883a 	mov	r3,r5
10001710:	000d883a 	mov	r6,zero
10001714:	01cffc34 	movhi	r7,16368
10001718:	1009883a 	mov	r4,r2
1000171c:	180b883a 	mov	r5,r3
10001720:	00059c00 	call	100059c0 <__subdf3>
10001724:	1009883a 	mov	r4,r2
10001728:	180b883a 	mov	r5,r3
1000172c:	2005883a 	mov	r2,r4
10001730:	2807883a 	mov	r3,r5
10001734:	1009883a 	mov	r4,r2
10001738:	180b883a 	mov	r5,r3
1000173c:	00063cc0 	call	100063cc <__truncdfsf2>
10001740:	1007883a 	mov	r3,r2
10001744:	e0bffb17 	ldw	r2,-20(fp)
10001748:	10c00815 	stw	r3,32(r2)
}
1000174c:	0001883a 	nop
10001750:	e6ffff04 	addi	sp,fp,-4
10001754:	dfc00217 	ldw	ra,8(sp)
10001758:	df000117 	ldw	fp,4(sp)
1000175c:	dc000017 	ldw	r16,0(sp)
10001760:	dec00304 	addi	sp,sp,12
10001764:	f800283a 	ret

10001768 <eval_layer_1>:

void eval_layer_1(layer_1_t * l) {
10001768:	defff904 	addi	sp,sp,-28
1000176c:	dfc00615 	stw	ra,24(sp)
10001770:	df000515 	stw	fp,20(sp)
10001774:	dc800415 	stw	r18,16(sp)
10001778:	dc400315 	stw	r17,12(sp)
1000177c:	dc000215 	stw	r16,8(sp)
10001780:	df000504 	addi	fp,sp,20
10001784:	e13ffc15 	stw	r4,-16(fp)
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001788:	e03ffb15 	stw	zero,-20(fp)
1000178c:	00003406 	br	10001860 <eval_layer_1+0xf8>
        l->layer_net[i] = dot_product_1(l->input_vals, l->weights[i], ATTRS_PER_ENTRY, l->curr_point) + l->bias;
10001790:	e0bffc17 	ldw	r2,-16(fp)
10001794:	10c00617 	ldw	r3,24(r2)
10001798:	e0bffb17 	ldw	r2,-20(fp)
1000179c:	1085883a 	add	r2,r2,r2
100017a0:	1085883a 	add	r2,r2,r2
100017a4:	18a1883a 	add	r16,r3,r2
100017a8:	e0bffc17 	ldw	r2,-16(fp)
100017ac:	14400017 	ldw	r17,0(r2)
100017b0:	e0bffc17 	ldw	r2,-16(fp)
100017b4:	10c00417 	ldw	r3,16(r2)
100017b8:	e0bffb17 	ldw	r2,-20(fp)
100017bc:	1085883a 	add	r2,r2,r2
100017c0:	1085883a 	add	r2,r2,r2
100017c4:	1885883a 	add	r2,r3,r2
100017c8:	14800017 	ldw	r18,0(r2)
100017cc:	e0bffc17 	ldw	r2,-16(fp)
100017d0:	10c00117 	ldw	r3,4(r2)
100017d4:	1809883a 	mov	r4,r3
100017d8:	00025380 	call	10002538 <__fixunssfsi>
100017dc:	100f883a 	mov	r7,r2
100017e0:	0190b234 	movhi	r6,17096
100017e4:	900b883a 	mov	r5,r18
100017e8:	8809883a 	mov	r4,r17
100017ec:	00012d00 	call	100012d0 <dot_product_1>
100017f0:	1009883a 	mov	r4,r2
100017f4:	e0bffc17 	ldw	r2,-16(fp)
100017f8:	10c00817 	ldw	r3,32(r2)
100017fc:	180b883a 	mov	r5,r3
10001800:	000274c0 	call	1000274c <__addsf3>
10001804:	1007883a 	mov	r3,r2
10001808:	1805883a 	mov	r2,r3
1000180c:	80800015 	stw	r2,0(r16)
        l->layer_out[i] = sigmoid(l->layer_net[i]);
10001810:	e0bffc17 	ldw	r2,-16(fp)
10001814:	10c00717 	ldw	r3,28(r2)
10001818:	e0bffb17 	ldw	r2,-20(fp)
1000181c:	1085883a 	add	r2,r2,r2
10001820:	1085883a 	add	r2,r2,r2
10001824:	18a1883a 	add	r16,r3,r2
10001828:	e0bffc17 	ldw	r2,-16(fp)
1000182c:	10c00617 	ldw	r3,24(r2)
10001830:	e0bffb17 	ldw	r2,-20(fp)
10001834:	1085883a 	add	r2,r2,r2
10001838:	1085883a 	add	r2,r2,r2
1000183c:	1885883a 	add	r2,r3,r2
10001840:	10c00017 	ldw	r3,0(r2)
10001844:	1809883a 	mov	r4,r3
10001848:	000026c0 	call	1000026c <sigmoid>
1000184c:	1007883a 	mov	r3,r2
10001850:	80c00015 	stw	r3,0(r16)
}

void eval_layer_1(layer_1_t * l) {
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10001854:	e0bffb17 	ldw	r2,-20(fp)
10001858:	10800044 	addi	r2,r2,1
1000185c:	e0bffb15 	stw	r2,-20(fp)
10001860:	e13ffb17 	ldw	r4,-20(fp)
10001864:	0003bd40 	call	10003bd4 <__floatsisf>
10001868:	1009883a 	mov	r4,r2
1000186c:	e0bffc17 	ldw	r2,-16(fp)
10001870:	10c00217 	ldw	r3,8(r2)
10001874:	180b883a 	mov	r5,r3
10001878:	00031880 	call	10003188 <__lesf2>
1000187c:	103fc416 	blt	r2,zero,10001790 <__alt_data_end+0xf8001790>
        l->layer_net[i] = dot_product_1(l->input_vals, l->weights[i], ATTRS_PER_ENTRY, l->curr_point) + l->bias;
        l->layer_out[i] = sigmoid(l->layer_net[i]);
    }

    return;
10001880:	0001883a 	nop
}
10001884:	e6fffd04 	addi	sp,fp,-12
10001888:	dfc00417 	ldw	ra,16(sp)
1000188c:	df000317 	ldw	fp,12(sp)
10001890:	dc800217 	ldw	r18,8(sp)
10001894:	dc400117 	ldw	r17,4(sp)
10001898:	dc000017 	ldw	r16,0(sp)
1000189c:	dec00504 	addi	sp,sp,20
100018a0:	f800283a 	ret

100018a4 <backprop_layer_1>:

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
100018a4:	defff304 	addi	sp,sp,-52
100018a8:	dfc00c15 	stw	ra,48(sp)
100018ac:	df000b15 	stw	fp,44(sp)
100018b0:	dd800a15 	stw	r22,40(sp)
100018b4:	dd400915 	stw	r21,36(sp)
100018b8:	dd000815 	stw	r20,32(sp)
100018bc:	dcc00715 	stw	r19,28(sp)
100018c0:	dc800615 	stw	r18,24(sp)
100018c4:	dc400515 	stw	r17,20(sp)
100018c8:	dc000415 	stw	r16,16(sp)
100018cc:	df000b04 	addi	fp,sp,44
100018d0:	e13ff715 	stw	r4,-36(fp)
100018d4:	e17ff815 	stw	r5,-32(fp)
    for(int i = 0; i < l->num_nodes; i++) {
100018d8:	e03ff515 	stw	zero,-44(fp)
100018dc:	00009b06 	br	10001b4c <backprop_layer_1+0x2a8>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
100018e0:	e03ff615 	stw	zero,-40(fp)
100018e4:	00009306 	br	10001b34 <backprop_layer_1+0x290>
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * other->weight_deltas[0][i] * get_array_value(l->input_vals, (l->curr_point * ATTRS_PER_ENTRY + j)) * other->weights[0][i] * inv_sigmoid(l->layer_out[i]));
100018e8:	e0bff717 	ldw	r2,-36(fp)
100018ec:	10c00417 	ldw	r3,16(r2)
100018f0:	e0bff517 	ldw	r2,-44(fp)
100018f4:	1085883a 	add	r2,r2,r2
100018f8:	1085883a 	add	r2,r2,r2
100018fc:	1885883a 	add	r2,r3,r2
10001900:	10c00017 	ldw	r3,0(r2)
10001904:	e0bff617 	ldw	r2,-40(fp)
10001908:	1085883a 	add	r2,r2,r2
1000190c:	1085883a 	add	r2,r2,r2
10001910:	18a9883a 	add	r20,r3,r2
10001914:	e0bff717 	ldw	r2,-36(fp)
10001918:	10c00417 	ldw	r3,16(r2)
1000191c:	e0bff517 	ldw	r2,-44(fp)
10001920:	1085883a 	add	r2,r2,r2
10001924:	1085883a 	add	r2,r2,r2
10001928:	1885883a 	add	r2,r3,r2
1000192c:	10c00017 	ldw	r3,0(r2)
10001930:	e0bff617 	ldw	r2,-40(fp)
10001934:	1085883a 	add	r2,r2,r2
10001938:	1085883a 	add	r2,r2,r2
1000193c:	1885883a 	add	r2,r3,r2
10001940:	10c00017 	ldw	r3,0(r2)
10001944:	1809883a 	mov	r4,r3
10001948:	00062bc0 	call	100062bc <__extendsfdf2>
1000194c:	1021883a 	mov	r16,r2
10001950:	1823883a 	mov	r17,r3
10001954:	e0bff817 	ldw	r2,-32(fp)
10001958:	10800617 	ldw	r2,24(r2)
1000195c:	10c00017 	ldw	r3,0(r2)
10001960:	e0bff517 	ldw	r2,-44(fp)
10001964:	1085883a 	add	r2,r2,r2
10001968:	1085883a 	add	r2,r2,r2
1000196c:	1885883a 	add	r2,r3,r2
10001970:	10c00017 	ldw	r3,0(r2)
10001974:	1809883a 	mov	r4,r3
10001978:	00062bc0 	call	100062bc <__extendsfdf2>
1000197c:	1011883a 	mov	r8,r2
10001980:	1813883a 	mov	r9,r3
10001984:	01a666b4 	movhi	r6,39322
10001988:	31a66684 	addi	r6,r6,-26214
1000198c:	01cff2b4 	movhi	r7,16330
10001990:	39e66644 	addi	r7,r7,-26215
10001994:	4009883a 	mov	r4,r8
10001998:	480b883a 	mov	r5,r9
1000199c:	00051580 	call	10005158 <__muldf3>
100019a0:	1009883a 	mov	r4,r2
100019a4:	180b883a 	mov	r5,r3
100019a8:	2025883a 	mov	r18,r4
100019ac:	2827883a 	mov	r19,r5
100019b0:	e0bff717 	ldw	r2,-36(fp)
100019b4:	15400017 	ldw	r21,0(r2)
100019b8:	e0bff717 	ldw	r2,-36(fp)
100019bc:	10c00117 	ldw	r3,4(r2)
100019c0:	0150b234 	movhi	r5,17096
100019c4:	1809883a 	mov	r4,r3
100019c8:	00032500 	call	10003250 <__mulsf3>
100019cc:	1007883a 	mov	r3,r2
100019d0:	182d883a 	mov	r22,r3
100019d4:	e13ff617 	ldw	r4,-40(fp)
100019d8:	0003bd40 	call	10003bd4 <__floatsisf>
100019dc:	1007883a 	mov	r3,r2
100019e0:	180b883a 	mov	r5,r3
100019e4:	b009883a 	mov	r4,r22
100019e8:	000274c0 	call	1000274c <__addsf3>
100019ec:	1007883a 	mov	r3,r2
100019f0:	1805883a 	mov	r2,r3
100019f4:	1009883a 	mov	r4,r2
100019f8:	00025380 	call	10002538 <__fixunssfsi>
100019fc:	100b883a 	mov	r5,r2
10001a00:	a809883a 	mov	r4,r21
10001a04:	00010e80 	call	100010e8 <get_array_value>
10001a08:	1007883a 	mov	r3,r2
10001a0c:	1809883a 	mov	r4,r3
10001a10:	00062bc0 	call	100062bc <__extendsfdf2>
10001a14:	1009883a 	mov	r4,r2
10001a18:	180b883a 	mov	r5,r3
10001a1c:	200d883a 	mov	r6,r4
10001a20:	280f883a 	mov	r7,r5
10001a24:	9009883a 	mov	r4,r18
10001a28:	980b883a 	mov	r5,r19
10001a2c:	00051580 	call	10005158 <__muldf3>
10001a30:	1009883a 	mov	r4,r2
10001a34:	180b883a 	mov	r5,r3
10001a38:	2025883a 	mov	r18,r4
10001a3c:	2827883a 	mov	r19,r5
10001a40:	e0bff817 	ldw	r2,-32(fp)
10001a44:	10800517 	ldw	r2,20(r2)
10001a48:	10c00017 	ldw	r3,0(r2)
10001a4c:	e0bff517 	ldw	r2,-44(fp)
10001a50:	1085883a 	add	r2,r2,r2
10001a54:	1085883a 	add	r2,r2,r2
10001a58:	1885883a 	add	r2,r3,r2
10001a5c:	10c00017 	ldw	r3,0(r2)
10001a60:	1809883a 	mov	r4,r3
10001a64:	00062bc0 	call	100062bc <__extendsfdf2>
10001a68:	1009883a 	mov	r4,r2
10001a6c:	180b883a 	mov	r5,r3
10001a70:	200d883a 	mov	r6,r4
10001a74:	280f883a 	mov	r7,r5
10001a78:	9009883a 	mov	r4,r18
10001a7c:	980b883a 	mov	r5,r19
10001a80:	00051580 	call	10005158 <__muldf3>
10001a84:	1009883a 	mov	r4,r2
10001a88:	180b883a 	mov	r5,r3
10001a8c:	2025883a 	mov	r18,r4
10001a90:	2827883a 	mov	r19,r5
10001a94:	e0bff717 	ldw	r2,-36(fp)
10001a98:	10c00717 	ldw	r3,28(r2)
10001a9c:	e0bff517 	ldw	r2,-44(fp)
10001aa0:	1085883a 	add	r2,r2,r2
10001aa4:	1085883a 	add	r2,r2,r2
10001aa8:	1885883a 	add	r2,r3,r2
10001aac:	10c00017 	ldw	r3,0(r2)
10001ab0:	1809883a 	mov	r4,r3
10001ab4:	000047c0 	call	1000047c <inv_sigmoid>
10001ab8:	1007883a 	mov	r3,r2
10001abc:	1809883a 	mov	r4,r3
10001ac0:	00062bc0 	call	100062bc <__extendsfdf2>
10001ac4:	1009883a 	mov	r4,r2
10001ac8:	180b883a 	mov	r5,r3
10001acc:	200d883a 	mov	r6,r4
10001ad0:	280f883a 	mov	r7,r5
10001ad4:	9009883a 	mov	r4,r18
10001ad8:	980b883a 	mov	r5,r19
10001adc:	00051580 	call	10005158 <__muldf3>
10001ae0:	1009883a 	mov	r4,r2
10001ae4:	180b883a 	mov	r5,r3
10001ae8:	2005883a 	mov	r2,r4
10001aec:	2807883a 	mov	r3,r5
10001af0:	100d883a 	mov	r6,r2
10001af4:	180f883a 	mov	r7,r3
10001af8:	8009883a 	mov	r4,r16
10001afc:	880b883a 	mov	r5,r17
10001b00:	00059c00 	call	100059c0 <__subdf3>
10001b04:	1009883a 	mov	r4,r2
10001b08:	180b883a 	mov	r5,r3
10001b0c:	2005883a 	mov	r2,r4
10001b10:	2807883a 	mov	r3,r5
10001b14:	1009883a 	mov	r4,r2
10001b18:	180b883a 	mov	r5,r3
10001b1c:	00063cc0 	call	100063cc <__truncdfsf2>
10001b20:	1007883a 	mov	r3,r2
10001b24:	a0c00015 	stw	r3,0(r20)
    return;
}

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
    for(int i = 0; i < l->num_nodes; i++) {
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
10001b28:	e0bff617 	ldw	r2,-40(fp)
10001b2c:	10800044 	addi	r2,r2,1
10001b30:	e0bff615 	stw	r2,-40(fp)
10001b34:	e0bff617 	ldw	r2,-40(fp)
10001b38:	10801910 	cmplti	r2,r2,100
10001b3c:	103f6a1e 	bne	r2,zero,100018e8 <__alt_data_end+0xf80018e8>

    return;
}

void backprop_layer_1(layer_1_t * l, layer_2_t * other) {
    for(int i = 0; i < l->num_nodes; i++) {
10001b40:	e0bff517 	ldw	r2,-44(fp)
10001b44:	10800044 	addi	r2,r2,1
10001b48:	e0bff515 	stw	r2,-44(fp)
10001b4c:	e13ff517 	ldw	r4,-44(fp)
10001b50:	0003bd40 	call	10003bd4 <__floatsisf>
10001b54:	1009883a 	mov	r4,r2
10001b58:	e0bff717 	ldw	r2,-36(fp)
10001b5c:	10c00217 	ldw	r3,8(r2)
10001b60:	180b883a 	mov	r5,r3
10001b64:	00031880 	call	10003188 <__lesf2>
10001b68:	103f5d16 	blt	r2,zero,100018e0 <__alt_data_end+0xf80018e0>
        for(int j = 0; j < ATTRS_PER_ENTRY; j++) {
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * other->weight_deltas[0][i] * get_array_value(l->input_vals, (l->curr_point * ATTRS_PER_ENTRY + j)) * other->weights[0][i] * inv_sigmoid(l->layer_out[i]));
        }
    }
    return;
10001b6c:	0001883a 	nop
}
10001b70:	e6fff904 	addi	sp,fp,-28
10001b74:	dfc00817 	ldw	ra,32(sp)
10001b78:	df000717 	ldw	fp,28(sp)
10001b7c:	dd800617 	ldw	r22,24(sp)
10001b80:	dd400517 	ldw	r21,20(sp)
10001b84:	dd000417 	ldw	r20,16(sp)
10001b88:	dcc00317 	ldw	r19,12(sp)
10001b8c:	dc800217 	ldw	r18,8(sp)
10001b90:	dc400117 	ldw	r17,4(sp)
10001b94:	dc000017 	ldw	r16,0(sp)
10001b98:	dec00904 	addi	sp,sp,36
10001b9c:	f800283a 	ret

10001ba0 <free_layer_1>:

void free_layer_1(layer_1_t * l) {
10001ba0:	defffb04 	addi	sp,sp,-20
10001ba4:	dfc00415 	stw	ra,16(sp)
10001ba8:	df000315 	stw	fp,12(sp)
10001bac:	df000304 	addi	fp,sp,12
10001bb0:	e13fff15 	stw	r4,-4(fp)
    free_array(l->input_vals);
10001bb4:	e0bfff17 	ldw	r2,-4(fp)
10001bb8:	10800017 	ldw	r2,0(r2)
10001bbc:	1009883a 	mov	r4,r2
10001bc0:	00011480 	call	10001148 <free_array>

    for(int i = 0; i < l->num_nodes; i++) {
10001bc4:	e03ffd15 	stw	zero,-12(fp)
10001bc8:	00000c06 	br	10001bfc <free_layer_1+0x5c>
        free(l->weights[i]);
10001bcc:	e0bfff17 	ldw	r2,-4(fp)
10001bd0:	10c00417 	ldw	r3,16(r2)
10001bd4:	e0bffd17 	ldw	r2,-12(fp)
10001bd8:	1085883a 	add	r2,r2,r2
10001bdc:	1085883a 	add	r2,r2,r2
10001be0:	1885883a 	add	r2,r3,r2
10001be4:	10800017 	ldw	r2,0(r2)
10001be8:	1009883a 	mov	r4,r2
10001bec:	0006be00 	call	10006be0 <free>
}

void free_layer_1(layer_1_t * l) {
    free_array(l->input_vals);

    for(int i = 0; i < l->num_nodes; i++) {
10001bf0:	e0bffd17 	ldw	r2,-12(fp)
10001bf4:	10800044 	addi	r2,r2,1
10001bf8:	e0bffd15 	stw	r2,-12(fp)
10001bfc:	e13ffd17 	ldw	r4,-12(fp)
10001c00:	0003bd40 	call	10003bd4 <__floatsisf>
10001c04:	1009883a 	mov	r4,r2
10001c08:	e0bfff17 	ldw	r2,-4(fp)
10001c0c:	10c00217 	ldw	r3,8(r2)
10001c10:	180b883a 	mov	r5,r3
10001c14:	00031880 	call	10003188 <__lesf2>
10001c18:	103fec16 	blt	r2,zero,10001bcc <__alt_data_end+0xf8001bcc>
        free(l->weights[i]);
    }
    free(l->weights);
10001c1c:	e0bfff17 	ldw	r2,-4(fp)
10001c20:	10800417 	ldw	r2,16(r2)
10001c24:	1009883a 	mov	r4,r2
10001c28:	0006be00 	call	10006be0 <free>
    l->weights = NULL;
10001c2c:	e0bfff17 	ldw	r2,-4(fp)
10001c30:	10000415 	stw	zero,16(r2)

    for(int i = 0; i < l->num_nodes; i++) {
10001c34:	e03ffe15 	stw	zero,-8(fp)
10001c38:	00000c06 	br	10001c6c <free_layer_1+0xcc>
        free(l->weight_deltas[i]);
10001c3c:	e0bfff17 	ldw	r2,-4(fp)
10001c40:	10c00517 	ldw	r3,20(r2)
10001c44:	e0bffe17 	ldw	r2,-8(fp)
10001c48:	1085883a 	add	r2,r2,r2
10001c4c:	1085883a 	add	r2,r2,r2
10001c50:	1885883a 	add	r2,r3,r2
10001c54:	10800017 	ldw	r2,0(r2)
10001c58:	1009883a 	mov	r4,r2
10001c5c:	0006be00 	call	10006be0 <free>
        free(l->weights[i]);
    }
    free(l->weights);
    l->weights = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
10001c60:	e0bffe17 	ldw	r2,-8(fp)
10001c64:	10800044 	addi	r2,r2,1
10001c68:	e0bffe15 	stw	r2,-8(fp)
10001c6c:	e13ffe17 	ldw	r4,-8(fp)
10001c70:	0003bd40 	call	10003bd4 <__floatsisf>
10001c74:	1009883a 	mov	r4,r2
10001c78:	e0bfff17 	ldw	r2,-4(fp)
10001c7c:	10c00217 	ldw	r3,8(r2)
10001c80:	180b883a 	mov	r5,r3
10001c84:	00031880 	call	10003188 <__lesf2>
10001c88:	103fec16 	blt	r2,zero,10001c3c <__alt_data_end+0xf8001c3c>
        free(l->weight_deltas[i]);
    }
    free(l->weight_deltas);
10001c8c:	e0bfff17 	ldw	r2,-4(fp)
10001c90:	10800517 	ldw	r2,20(r2)
10001c94:	1009883a 	mov	r4,r2
10001c98:	0006be00 	call	10006be0 <free>
    l->weight_deltas = NULL;
10001c9c:	e0bfff17 	ldw	r2,-4(fp)
10001ca0:	10000515 	stw	zero,20(r2)

    free(l->layer_net);
10001ca4:	e0bfff17 	ldw	r2,-4(fp)
10001ca8:	10800617 	ldw	r2,24(r2)
10001cac:	1009883a 	mov	r4,r2
10001cb0:	0006be00 	call	10006be0 <free>
    l->layer_net = NULL;
10001cb4:	e0bfff17 	ldw	r2,-4(fp)
10001cb8:	10000615 	stw	zero,24(r2)

    free(l->layer_out);
10001cbc:	e0bfff17 	ldw	r2,-4(fp)
10001cc0:	10800717 	ldw	r2,28(r2)
10001cc4:	1009883a 	mov	r4,r2
10001cc8:	0006be00 	call	10006be0 <free>
    l->layer_out = NULL;
10001ccc:	e0bfff17 	ldw	r2,-4(fp)
10001cd0:	10000715 	stw	zero,28(r2)

    l->curr_point = 0;
10001cd4:	e0bfff17 	ldw	r2,-4(fp)
10001cd8:	10000115 	stw	zero,4(r2)
    l->num_nodes = 0;
10001cdc:	e0bfff17 	ldw	r2,-4(fp)
10001ce0:	10000215 	stw	zero,8(r2)
    l->layer_num = 0;
10001ce4:	e0bfff17 	ldw	r2,-4(fp)
10001ce8:	10000315 	stw	zero,12(r2)
    l->bias = 0;
10001cec:	e0bfff17 	ldw	r2,-4(fp)
10001cf0:	10000815 	stw	zero,32(r2)
}
10001cf4:	0001883a 	nop
10001cf8:	e037883a 	mov	sp,fp
10001cfc:	dfc00117 	ldw	ra,4(sp)
10001d00:	df000017 	ldw	fp,0(sp)
10001d04:	dec00204 	addi	sp,sp,8
10001d08:	f800283a 	ret

10001d0c <init_layer_2>:

void init_layer_2(layer_2_t * l, float * input_vals, float curr_point, float num_nodes, float layer_num, float input_num_nodes) {
10001d0c:	defff504 	addi	sp,sp,-44
10001d10:	dfc00a15 	stw	ra,40(sp)
10001d14:	df000915 	stw	fp,36(sp)
10001d18:	dc000815 	stw	r16,32(sp)
10001d1c:	df000904 	addi	fp,sp,36
10001d20:	e13ffb15 	stw	r4,-20(fp)
10001d24:	e17ffc15 	stw	r5,-16(fp)
10001d28:	e1bffd15 	stw	r6,-12(fp)
10001d2c:	e1fffe15 	stw	r7,-8(fp)
    l->input_vals = input_vals;
10001d30:	e0bffb17 	ldw	r2,-20(fp)
10001d34:	e0fffc17 	ldw	r3,-16(fp)
10001d38:	10c00015 	stw	r3,0(r2)
    l->curr_point = curr_point;
10001d3c:	e0bffb17 	ldw	r2,-20(fp)
10001d40:	e0fffd17 	ldw	r3,-12(fp)
10001d44:	10c00115 	stw	r3,4(r2)
    l->num_nodes = num_nodes;
10001d48:	e0bffb17 	ldw	r2,-20(fp)
10001d4c:	e0fffe17 	ldw	r3,-8(fp)
10001d50:	10c00215 	stw	r3,8(r2)
    l->layer_num = layer_num;
10001d54:	e0bffb17 	ldw	r2,-20(fp)
10001d58:	e0c00217 	ldw	r3,8(fp)
10001d5c:	10c00315 	stw	r3,12(r2)
    l->input_num_nodes = input_num_nodes;
10001d60:	e0bffb17 	ldw	r2,-20(fp)
10001d64:	e0c00317 	ldw	r3,12(fp)
10001d68:	10c00415 	stw	r3,16(r2)

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
10001d6c:	01502034 	movhi	r5,16512
10001d70:	e13ffe17 	ldw	r4,-8(fp)
10001d74:	00032500 	call	10003250 <__mulsf3>
10001d78:	1007883a 	mov	r3,r2
10001d7c:	1805883a 	mov	r2,r3
10001d80:	1009883a 	mov	r4,r2
10001d84:	00025380 	call	10002538 <__fixunssfsi>
10001d88:	1009883a 	mov	r4,r2
10001d8c:	0006ba00 	call	10006ba0 <malloc>
10001d90:	1007883a 	mov	r3,r2
10001d94:	e0bffb17 	ldw	r2,-20(fp)
10001d98:	10c00515 	stw	r3,20(r2)
    for(int i = 0; i < num_nodes; i++) {
10001d9c:	e03ff715 	stw	zero,-36(fp)
10001da0:	00001306 	br	10001df0 <init_layer_2+0xe4>
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
10001da4:	e0bffb17 	ldw	r2,-20(fp)
10001da8:	10c00517 	ldw	r3,20(r2)
10001dac:	e0bff717 	ldw	r2,-36(fp)
10001db0:	1085883a 	add	r2,r2,r2
10001db4:	1085883a 	add	r2,r2,r2
10001db8:	18a1883a 	add	r16,r3,r2
10001dbc:	01502034 	movhi	r5,16512
10001dc0:	e1000317 	ldw	r4,12(fp)
10001dc4:	00032500 	call	10003250 <__mulsf3>
10001dc8:	1007883a 	mov	r3,r2
10001dcc:	1805883a 	mov	r2,r3
10001dd0:	1009883a 	mov	r4,r2
10001dd4:	00025380 	call	10002538 <__fixunssfsi>
10001dd8:	1009883a 	mov	r4,r2
10001ddc:	0006ba00 	call	10006ba0 <malloc>
10001de0:	80800015 	stw	r2,0(r16)
    l->num_nodes = num_nodes;
    l->layer_num = layer_num;
    l->input_num_nodes = input_num_nodes;

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001de4:	e0bff717 	ldw	r2,-36(fp)
10001de8:	10800044 	addi	r2,r2,1
10001dec:	e0bff715 	stw	r2,-36(fp)
10001df0:	e13ff717 	ldw	r4,-36(fp)
10001df4:	0003bd40 	call	10003bd4 <__floatsisf>
10001df8:	1007883a 	mov	r3,r2
10001dfc:	e17ffe17 	ldw	r5,-8(fp)
10001e00:	1809883a 	mov	r4,r3
10001e04:	00031880 	call	10003188 <__lesf2>
10001e08:	103fe616 	blt	r2,zero,10001da4 <__alt_data_end+0xf8001da4>
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001e0c:	e03ff815 	stw	zero,-32(fp)
10001e10:	00002206 	br	10001e9c <init_layer_2+0x190>
        for(int j = 0; j < input_num_nodes; j++) {
10001e14:	e03ff915 	stw	zero,-28(fp)
10001e18:	00001606 	br	10001e74 <init_layer_2+0x168>
            l->weights[i][j] = drand48();
10001e1c:	e0bffb17 	ldw	r2,-20(fp)
10001e20:	10c00517 	ldw	r3,20(r2)
10001e24:	e0bff817 	ldw	r2,-32(fp)
10001e28:	1085883a 	add	r2,r2,r2
10001e2c:	1085883a 	add	r2,r2,r2
10001e30:	1885883a 	add	r2,r3,r2
10001e34:	10c00017 	ldw	r3,0(r2)
10001e38:	e0bff917 	ldw	r2,-28(fp)
10001e3c:	1085883a 	add	r2,r2,r2
10001e40:	1085883a 	add	r2,r2,r2
10001e44:	18a1883a 	add	r16,r3,r2
10001e48:	00068780 	call	10006878 <drand48>
10001e4c:	100b883a 	mov	r5,r2
10001e50:	180d883a 	mov	r6,r3
10001e54:	2809883a 	mov	r4,r5
10001e58:	300b883a 	mov	r5,r6
10001e5c:	00063cc0 	call	100063cc <__truncdfsf2>
10001e60:	1007883a 	mov	r3,r2
10001e64:	80c00015 	stw	r3,0(r16)
    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
        for(int j = 0; j < input_num_nodes; j++) {
10001e68:	e0bff917 	ldw	r2,-28(fp)
10001e6c:	10800044 	addi	r2,r2,1
10001e70:	e0bff915 	stw	r2,-28(fp)
10001e74:	e13ff917 	ldw	r4,-28(fp)
10001e78:	0003bd40 	call	10003bd4 <__floatsisf>
10001e7c:	1007883a 	mov	r3,r2
10001e80:	e1400317 	ldw	r5,12(fp)
10001e84:	1809883a 	mov	r4,r3
10001e88:	00031880 	call	10003188 <__lesf2>
10001e8c:	103fe316 	blt	r2,zero,10001e1c <__alt_data_end+0xf8001e1c>

    l->weights = (float **) malloc(num_nodes * sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
        l->weights[i] = (float *) malloc(input_num_nodes * sizeof(float));
    }
    for(int i = 0; i < num_nodes; i++) {
10001e90:	e0bff817 	ldw	r2,-32(fp)
10001e94:	10800044 	addi	r2,r2,1
10001e98:	e0bff815 	stw	r2,-32(fp)
10001e9c:	e13ff817 	ldw	r4,-32(fp)
10001ea0:	0003bd40 	call	10003bd4 <__floatsisf>
10001ea4:	1007883a 	mov	r3,r2
10001ea8:	e17ffe17 	ldw	r5,-8(fp)
10001eac:	1809883a 	mov	r4,r3
10001eb0:	00031880 	call	10003188 <__lesf2>
10001eb4:	103fd716 	blt	r2,zero,10001e14 <__alt_data_end+0xf8001e14>
        for(int j = 0; j < input_num_nodes; j++) {
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
10001eb8:	e13ffe17 	ldw	r4,-8(fp)
10001ebc:	00025380 	call	10002538 <__fixunssfsi>
10001ec0:	01400104 	movi	r5,4
10001ec4:	1009883a 	mov	r4,r2
10001ec8:	00066780 	call	10006678 <calloc>
10001ecc:	1007883a 	mov	r3,r2
10001ed0:	e0bffb17 	ldw	r2,-20(fp)
10001ed4:	10c00615 	stw	r3,24(r2)
    for(int i = 0; i < num_nodes; i++) {
10001ed8:	e03ffa15 	stw	zero,-24(fp)
10001edc:	00000f06 	br	10001f1c <init_layer_2+0x210>
        l->weight_deltas[i] = (float *) calloc(input_num_nodes, sizeof(float));
10001ee0:	e0bffb17 	ldw	r2,-20(fp)
10001ee4:	10c00617 	ldw	r3,24(r2)
10001ee8:	e0bffa17 	ldw	r2,-24(fp)
10001eec:	1085883a 	add	r2,r2,r2
10001ef0:	1085883a 	add	r2,r2,r2
10001ef4:	18a1883a 	add	r16,r3,r2
10001ef8:	e1000317 	ldw	r4,12(fp)
10001efc:	00025380 	call	10002538 <__fixunssfsi>
10001f00:	01400104 	movi	r5,4
10001f04:	1009883a 	mov	r4,r2
10001f08:	00066780 	call	10006678 <calloc>
10001f0c:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = drand48();
        }
    }

    l->weight_deltas = (float **) calloc(num_nodes, sizeof(float *));
    for(int i = 0; i < num_nodes; i++) {
10001f10:	e0bffa17 	ldw	r2,-24(fp)
10001f14:	10800044 	addi	r2,r2,1
10001f18:	e0bffa15 	stw	r2,-24(fp)
10001f1c:	e13ffa17 	ldw	r4,-24(fp)
10001f20:	0003bd40 	call	10003bd4 <__floatsisf>
10001f24:	1007883a 	mov	r3,r2
10001f28:	e17ffe17 	ldw	r5,-8(fp)
10001f2c:	1809883a 	mov	r4,r3
10001f30:	00031880 	call	10003188 <__lesf2>
10001f34:	103fea16 	blt	r2,zero,10001ee0 <__alt_data_end+0xf8001ee0>
        l->weight_deltas[i] = (float *) calloc(input_num_nodes, sizeof(float));
    }

    l->layer_net = (float *) calloc(num_nodes, sizeof(float));
10001f38:	e13ffe17 	ldw	r4,-8(fp)
10001f3c:	00025380 	call	10002538 <__fixunssfsi>
10001f40:	01400104 	movi	r5,4
10001f44:	1009883a 	mov	r4,r2
10001f48:	00066780 	call	10006678 <calloc>
10001f4c:	1007883a 	mov	r3,r2
10001f50:	e0bffb17 	ldw	r2,-20(fp)
10001f54:	10c00715 	stw	r3,28(r2)
    l->layer_out = (float *) calloc(num_nodes, sizeof(float));
10001f58:	e13ffe17 	ldw	r4,-8(fp)
10001f5c:	00025380 	call	10002538 <__fixunssfsi>
10001f60:	01400104 	movi	r5,4
10001f64:	1009883a 	mov	r4,r2
10001f68:	00066780 	call	10006678 <calloc>
10001f6c:	1007883a 	mov	r3,r2
10001f70:	e0bffb17 	ldw	r2,-20(fp)
10001f74:	10c00815 	stw	r3,32(r2)
    l->bias = (drand48() * 2) - 1;
10001f78:	00068780 	call	10006878 <drand48>
10001f7c:	1011883a 	mov	r8,r2
10001f80:	1813883a 	mov	r9,r3
10001f84:	400d883a 	mov	r6,r8
10001f88:	480f883a 	mov	r7,r9
10001f8c:	4009883a 	mov	r4,r8
10001f90:	480b883a 	mov	r5,r9
10001f94:	0003de80 	call	10003de8 <__adddf3>
10001f98:	1009883a 	mov	r4,r2
10001f9c:	180b883a 	mov	r5,r3
10001fa0:	2005883a 	mov	r2,r4
10001fa4:	2807883a 	mov	r3,r5
10001fa8:	000d883a 	mov	r6,zero
10001fac:	01cffc34 	movhi	r7,16368
10001fb0:	1009883a 	mov	r4,r2
10001fb4:	180b883a 	mov	r5,r3
10001fb8:	00059c00 	call	100059c0 <__subdf3>
10001fbc:	1009883a 	mov	r4,r2
10001fc0:	180b883a 	mov	r5,r3
10001fc4:	2005883a 	mov	r2,r4
10001fc8:	2807883a 	mov	r3,r5
10001fcc:	1009883a 	mov	r4,r2
10001fd0:	180b883a 	mov	r5,r3
10001fd4:	00063cc0 	call	100063cc <__truncdfsf2>
10001fd8:	1007883a 	mov	r3,r2
10001fdc:	e0bffb17 	ldw	r2,-20(fp)
10001fe0:	10c00915 	stw	r3,36(r2)
}
10001fe4:	0001883a 	nop
10001fe8:	e6ffff04 	addi	sp,fp,-4
10001fec:	dfc00217 	ldw	ra,8(sp)
10001ff0:	df000117 	ldw	fp,4(sp)
10001ff4:	dc000017 	ldw	r16,0(sp)
10001ff8:	dec00304 	addi	sp,sp,12
10001ffc:	f800283a 	ret

10002000 <eval_layer_2>:

void eval_layer_2(layer_2_t * l) {
10002000:	defffb04 	addi	sp,sp,-20
10002004:	dfc00415 	stw	ra,16(sp)
10002008:	df000315 	stw	fp,12(sp)
1000200c:	dc000215 	stw	r16,8(sp)
10002010:	df000304 	addi	fp,sp,12
10002014:	e13ffe15 	stw	r4,-8(fp)
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
10002018:	e03ffd15 	stw	zero,-12(fp)
1000201c:	00003006 	br	100020e0 <eval_layer_2+0xe0>
        l->layer_net[i] = dot_product_2(l->input_vals, l->weights[i], l->input_num_nodes) + l->bias;
10002020:	e0bffe17 	ldw	r2,-8(fp)
10002024:	10c00717 	ldw	r3,28(r2)
10002028:	e0bffd17 	ldw	r2,-12(fp)
1000202c:	1085883a 	add	r2,r2,r2
10002030:	1085883a 	add	r2,r2,r2
10002034:	18a1883a 	add	r16,r3,r2
10002038:	e0bffe17 	ldw	r2,-8(fp)
1000203c:	11000017 	ldw	r4,0(r2)
10002040:	e0bffe17 	ldw	r2,-8(fp)
10002044:	10c00517 	ldw	r3,20(r2)
10002048:	e0bffd17 	ldw	r2,-12(fp)
1000204c:	1085883a 	add	r2,r2,r2
10002050:	1085883a 	add	r2,r2,r2
10002054:	1885883a 	add	r2,r3,r2
10002058:	10c00017 	ldw	r3,0(r2)
1000205c:	e0bffe17 	ldw	r2,-8(fp)
10002060:	11400417 	ldw	r5,16(r2)
10002064:	280d883a 	mov	r6,r5
10002068:	180b883a 	mov	r5,r3
1000206c:	00013e40 	call	100013e4 <dot_product_2>
10002070:	1009883a 	mov	r4,r2
10002074:	e0bffe17 	ldw	r2,-8(fp)
10002078:	10c00917 	ldw	r3,36(r2)
1000207c:	180b883a 	mov	r5,r3
10002080:	000274c0 	call	1000274c <__addsf3>
10002084:	1007883a 	mov	r3,r2
10002088:	1805883a 	mov	r2,r3
1000208c:	80800015 	stw	r2,0(r16)
        l->layer_out[i] = sigmoid(l->layer_net[i]);
10002090:	e0bffe17 	ldw	r2,-8(fp)
10002094:	10c00817 	ldw	r3,32(r2)
10002098:	e0bffd17 	ldw	r2,-12(fp)
1000209c:	1085883a 	add	r2,r2,r2
100020a0:	1085883a 	add	r2,r2,r2
100020a4:	18a1883a 	add	r16,r3,r2
100020a8:	e0bffe17 	ldw	r2,-8(fp)
100020ac:	10c00717 	ldw	r3,28(r2)
100020b0:	e0bffd17 	ldw	r2,-12(fp)
100020b4:	1085883a 	add	r2,r2,r2
100020b8:	1085883a 	add	r2,r2,r2
100020bc:	1885883a 	add	r2,r3,r2
100020c0:	10c00017 	ldw	r3,0(r2)
100020c4:	1809883a 	mov	r4,r3
100020c8:	000026c0 	call	1000026c <sigmoid>
100020cc:	1007883a 	mov	r3,r2
100020d0:	80c00015 	stw	r3,0(r16)
}

void eval_layer_2(layer_2_t * l) {
    // now calculate the dot product of input_vals and l->weights[i]
    // at each iteration
    for(int i = 0; i < l->num_nodes; i++) {
100020d4:	e0bffd17 	ldw	r2,-12(fp)
100020d8:	10800044 	addi	r2,r2,1
100020dc:	e0bffd15 	stw	r2,-12(fp)
100020e0:	e13ffd17 	ldw	r4,-12(fp)
100020e4:	0003bd40 	call	10003bd4 <__floatsisf>
100020e8:	1009883a 	mov	r4,r2
100020ec:	e0bffe17 	ldw	r2,-8(fp)
100020f0:	10c00217 	ldw	r3,8(r2)
100020f4:	180b883a 	mov	r5,r3
100020f8:	00031880 	call	10003188 <__lesf2>
100020fc:	103fc816 	blt	r2,zero,10002020 <__alt_data_end+0xf8002020>
        l->layer_net[i] = dot_product_2(l->input_vals, l->weights[i], l->input_num_nodes) + l->bias;
        l->layer_out[i] = sigmoid(l->layer_net[i]);
    }

    return;
10002100:	0001883a 	nop
}
10002104:	e6ffff04 	addi	sp,fp,-4
10002108:	dfc00217 	ldw	ra,8(sp)
1000210c:	df000117 	ldw	fp,4(sp)
10002110:	dc000017 	ldw	r16,0(sp)
10002114:	dec00304 	addi	sp,sp,12
10002118:	f800283a 	ret

1000211c <backprop_layer_2>:

void backprop_layer_2(layer_2_t * l, float other) {
1000211c:	defff504 	addi	sp,sp,-44
10002120:	dfc00a15 	stw	ra,40(sp)
10002124:	df000915 	stw	fp,36(sp)
10002128:	dd000815 	stw	r20,32(sp)
1000212c:	dcc00715 	stw	r19,28(sp)
10002130:	dc800615 	stw	r18,24(sp)
10002134:	dc400515 	stw	r17,20(sp)
10002138:	dc000415 	stw	r16,16(sp)
1000213c:	df000904 	addi	fp,sp,36
10002140:	e13ff915 	stw	r4,-28(fp)
10002144:	e17ffa15 	stw	r5,-24(fp)
    for(int i = 0; i < l->num_nodes; i++) {
10002148:	e03ff715 	stw	zero,-36(fp)
1000214c:	00008e06 	br	10002388 <backprop_layer_2+0x26c>
        for(int j = 0; j < l->input_num_nodes; j++) {
10002150:	e03ff815 	stw	zero,-32(fp)
10002154:	00008106 	br	1000235c <backprop_layer_2+0x240>
            l->weight_deltas[i][j] = inv_sigmoid(l->layer_out[i]) * inv_err(l->layer_out[i], other);
10002158:	e0bff917 	ldw	r2,-28(fp)
1000215c:	10c00617 	ldw	r3,24(r2)
10002160:	e0bff717 	ldw	r2,-36(fp)
10002164:	1085883a 	add	r2,r2,r2
10002168:	1085883a 	add	r2,r2,r2
1000216c:	1885883a 	add	r2,r3,r2
10002170:	10c00017 	ldw	r3,0(r2)
10002174:	e0bff817 	ldw	r2,-32(fp)
10002178:	1085883a 	add	r2,r2,r2
1000217c:	1085883a 	add	r2,r2,r2
10002180:	18a1883a 	add	r16,r3,r2
10002184:	e0bff917 	ldw	r2,-28(fp)
10002188:	10c00817 	ldw	r3,32(r2)
1000218c:	e0bff717 	ldw	r2,-36(fp)
10002190:	1085883a 	add	r2,r2,r2
10002194:	1085883a 	add	r2,r2,r2
10002198:	1885883a 	add	r2,r3,r2
1000219c:	10c00017 	ldw	r3,0(r2)
100021a0:	1809883a 	mov	r4,r3
100021a4:	000047c0 	call	1000047c <inv_sigmoid>
100021a8:	1023883a 	mov	r17,r2
100021ac:	e0bff917 	ldw	r2,-28(fp)
100021b0:	10c00817 	ldw	r3,32(r2)
100021b4:	e0bff717 	ldw	r2,-36(fp)
100021b8:	1085883a 	add	r2,r2,r2
100021bc:	1085883a 	add	r2,r2,r2
100021c0:	1885883a 	add	r2,r3,r2
100021c4:	10c00017 	ldw	r3,0(r2)
100021c8:	e17ffa17 	ldw	r5,-24(fp)
100021cc:	1809883a 	mov	r4,r3
100021d0:	00005780 	call	10000578 <inv_err>
100021d4:	1007883a 	mov	r3,r2
100021d8:	180b883a 	mov	r5,r3
100021dc:	8809883a 	mov	r4,r17
100021e0:	00032500 	call	10003250 <__mulsf3>
100021e4:	1007883a 	mov	r3,r2
100021e8:	1805883a 	mov	r2,r3
100021ec:	80800015 	stw	r2,0(r16)
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * l->weight_deltas[i][j] * l->input_vals[j]);
100021f0:	e0bff917 	ldw	r2,-28(fp)
100021f4:	10c00517 	ldw	r3,20(r2)
100021f8:	e0bff717 	ldw	r2,-36(fp)
100021fc:	1085883a 	add	r2,r2,r2
10002200:	1085883a 	add	r2,r2,r2
10002204:	1885883a 	add	r2,r3,r2
10002208:	10c00017 	ldw	r3,0(r2)
1000220c:	e0bff817 	ldw	r2,-32(fp)
10002210:	1085883a 	add	r2,r2,r2
10002214:	1085883a 	add	r2,r2,r2
10002218:	18a9883a 	add	r20,r3,r2
1000221c:	e0bff917 	ldw	r2,-28(fp)
10002220:	10c00517 	ldw	r3,20(r2)
10002224:	e0bff717 	ldw	r2,-36(fp)
10002228:	1085883a 	add	r2,r2,r2
1000222c:	1085883a 	add	r2,r2,r2
10002230:	1885883a 	add	r2,r3,r2
10002234:	10c00017 	ldw	r3,0(r2)
10002238:	e0bff817 	ldw	r2,-32(fp)
1000223c:	1085883a 	add	r2,r2,r2
10002240:	1085883a 	add	r2,r2,r2
10002244:	1885883a 	add	r2,r3,r2
10002248:	10c00017 	ldw	r3,0(r2)
1000224c:	1809883a 	mov	r4,r3
10002250:	00062bc0 	call	100062bc <__extendsfdf2>
10002254:	1021883a 	mov	r16,r2
10002258:	1823883a 	mov	r17,r3
1000225c:	e0bff917 	ldw	r2,-28(fp)
10002260:	10c00617 	ldw	r3,24(r2)
10002264:	e0bff717 	ldw	r2,-36(fp)
10002268:	1085883a 	add	r2,r2,r2
1000226c:	1085883a 	add	r2,r2,r2
10002270:	1885883a 	add	r2,r3,r2
10002274:	10c00017 	ldw	r3,0(r2)
10002278:	e0bff817 	ldw	r2,-32(fp)
1000227c:	1085883a 	add	r2,r2,r2
10002280:	1085883a 	add	r2,r2,r2
10002284:	1885883a 	add	r2,r3,r2
10002288:	10c00017 	ldw	r3,0(r2)
1000228c:	1809883a 	mov	r4,r3
10002290:	00062bc0 	call	100062bc <__extendsfdf2>
10002294:	1011883a 	mov	r8,r2
10002298:	1813883a 	mov	r9,r3
1000229c:	01a666b4 	movhi	r6,39322
100022a0:	31a66684 	addi	r6,r6,-26214
100022a4:	01cff2b4 	movhi	r7,16330
100022a8:	39e66644 	addi	r7,r7,-26215
100022ac:	4009883a 	mov	r4,r8
100022b0:	480b883a 	mov	r5,r9
100022b4:	00051580 	call	10005158 <__muldf3>
100022b8:	1009883a 	mov	r4,r2
100022bc:	180b883a 	mov	r5,r3
100022c0:	2025883a 	mov	r18,r4
100022c4:	2827883a 	mov	r19,r5
100022c8:	e0bff917 	ldw	r2,-28(fp)
100022cc:	10c00017 	ldw	r3,0(r2)
100022d0:	e0bff817 	ldw	r2,-32(fp)
100022d4:	1085883a 	add	r2,r2,r2
100022d8:	1085883a 	add	r2,r2,r2
100022dc:	1885883a 	add	r2,r3,r2
100022e0:	10c00017 	ldw	r3,0(r2)
100022e4:	1809883a 	mov	r4,r3
100022e8:	00062bc0 	call	100062bc <__extendsfdf2>
100022ec:	1009883a 	mov	r4,r2
100022f0:	180b883a 	mov	r5,r3
100022f4:	200d883a 	mov	r6,r4
100022f8:	280f883a 	mov	r7,r5
100022fc:	9009883a 	mov	r4,r18
10002300:	980b883a 	mov	r5,r19
10002304:	00051580 	call	10005158 <__muldf3>
10002308:	1009883a 	mov	r4,r2
1000230c:	180b883a 	mov	r5,r3
10002310:	2005883a 	mov	r2,r4
10002314:	2807883a 	mov	r3,r5
10002318:	100d883a 	mov	r6,r2
1000231c:	180f883a 	mov	r7,r3
10002320:	8009883a 	mov	r4,r16
10002324:	880b883a 	mov	r5,r17
10002328:	00059c00 	call	100059c0 <__subdf3>
1000232c:	1009883a 	mov	r4,r2
10002330:	180b883a 	mov	r5,r3
10002334:	2005883a 	mov	r2,r4
10002338:	2807883a 	mov	r3,r5
1000233c:	1009883a 	mov	r4,r2
10002340:	180b883a 	mov	r5,r3
10002344:	00063cc0 	call	100063cc <__truncdfsf2>
10002348:	1007883a 	mov	r3,r2
1000234c:	a0c00015 	stw	r3,0(r20)
    return;
}

void backprop_layer_2(layer_2_t * l, float other) {
    for(int i = 0; i < l->num_nodes; i++) {
        for(int j = 0; j < l->input_num_nodes; j++) {
10002350:	e0bff817 	ldw	r2,-32(fp)
10002354:	10800044 	addi	r2,r2,1
10002358:	e0bff815 	stw	r2,-32(fp)
1000235c:	e13ff817 	ldw	r4,-32(fp)
10002360:	0003bd40 	call	10003bd4 <__floatsisf>
10002364:	1009883a 	mov	r4,r2
10002368:	e0bff917 	ldw	r2,-28(fp)
1000236c:	10c00417 	ldw	r3,16(r2)
10002370:	180b883a 	mov	r5,r3
10002374:	00031880 	call	10003188 <__lesf2>
10002378:	103f7716 	blt	r2,zero,10002158 <__alt_data_end+0xf8002158>

    return;
}

void backprop_layer_2(layer_2_t * l, float other) {
    for(int i = 0; i < l->num_nodes; i++) {
1000237c:	e0bff717 	ldw	r2,-36(fp)
10002380:	10800044 	addi	r2,r2,1
10002384:	e0bff715 	stw	r2,-36(fp)
10002388:	e13ff717 	ldw	r4,-36(fp)
1000238c:	0003bd40 	call	10003bd4 <__floatsisf>
10002390:	1009883a 	mov	r4,r2
10002394:	e0bff917 	ldw	r2,-28(fp)
10002398:	10c00217 	ldw	r3,8(r2)
1000239c:	180b883a 	mov	r5,r3
100023a0:	00031880 	call	10003188 <__lesf2>
100023a4:	103f6a16 	blt	r2,zero,10002150 <__alt_data_end+0xf8002150>
        for(int j = 0; j < l->input_num_nodes; j++) {
            l->weight_deltas[i][j] = inv_sigmoid(l->layer_out[i]) * inv_err(l->layer_out[i], other);
            l->weights[i][j] = l->weights[i][j] - (LEARNING_RATE * l->weight_deltas[i][j] * l->input_vals[j]);
        }
    }
    return;
100023a8:	0001883a 	nop
}
100023ac:	e6fffb04 	addi	sp,fp,-20
100023b0:	dfc00617 	ldw	ra,24(sp)
100023b4:	df000517 	ldw	fp,20(sp)
100023b8:	dd000417 	ldw	r20,16(sp)
100023bc:	dcc00317 	ldw	r19,12(sp)
100023c0:	dc800217 	ldw	r18,8(sp)
100023c4:	dc400117 	ldw	r17,4(sp)
100023c8:	dc000017 	ldw	r16,0(sp)
100023cc:	dec00704 	addi	sp,sp,28
100023d0:	f800283a 	ret

100023d4 <free_layer_2>:

void free_layer_2(layer_2_t * l) {
100023d4:	defffb04 	addi	sp,sp,-20
100023d8:	dfc00415 	stw	ra,16(sp)
100023dc:	df000315 	stw	fp,12(sp)
100023e0:	df000304 	addi	fp,sp,12
100023e4:	e13fff15 	stw	r4,-4(fp)
    l->input_vals = NULL;
100023e8:	e0bfff17 	ldw	r2,-4(fp)
100023ec:	10000015 	stw	zero,0(r2)

    for(int i = 0; i < l->num_nodes; i++) {
100023f0:	e03ffd15 	stw	zero,-12(fp)
100023f4:	00000c06 	br	10002428 <free_layer_2+0x54>
        free(l->weights[i]);
100023f8:	e0bfff17 	ldw	r2,-4(fp)
100023fc:	10c00517 	ldw	r3,20(r2)
10002400:	e0bffd17 	ldw	r2,-12(fp)
10002404:	1085883a 	add	r2,r2,r2
10002408:	1085883a 	add	r2,r2,r2
1000240c:	1885883a 	add	r2,r3,r2
10002410:	10800017 	ldw	r2,0(r2)
10002414:	1009883a 	mov	r4,r2
10002418:	0006be00 	call	10006be0 <free>
}

void free_layer_2(layer_2_t * l) {
    l->input_vals = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
1000241c:	e0bffd17 	ldw	r2,-12(fp)
10002420:	10800044 	addi	r2,r2,1
10002424:	e0bffd15 	stw	r2,-12(fp)
10002428:	e13ffd17 	ldw	r4,-12(fp)
1000242c:	0003bd40 	call	10003bd4 <__floatsisf>
10002430:	1009883a 	mov	r4,r2
10002434:	e0bfff17 	ldw	r2,-4(fp)
10002438:	10c00217 	ldw	r3,8(r2)
1000243c:	180b883a 	mov	r5,r3
10002440:	00031880 	call	10003188 <__lesf2>
10002444:	103fec16 	blt	r2,zero,100023f8 <__alt_data_end+0xf80023f8>
        free(l->weights[i]);
    }
    free(l->weights);
10002448:	e0bfff17 	ldw	r2,-4(fp)
1000244c:	10800517 	ldw	r2,20(r2)
10002450:	1009883a 	mov	r4,r2
10002454:	0006be00 	call	10006be0 <free>
    l->weights = NULL;
10002458:	e0bfff17 	ldw	r2,-4(fp)
1000245c:	10000515 	stw	zero,20(r2)

    for(int i = 0; i < l->num_nodes; i++) {
10002460:	e03ffe15 	stw	zero,-8(fp)
10002464:	00000c06 	br	10002498 <free_layer_2+0xc4>
        free(l->weight_deltas[i]);
10002468:	e0bfff17 	ldw	r2,-4(fp)
1000246c:	10c00617 	ldw	r3,24(r2)
10002470:	e0bffe17 	ldw	r2,-8(fp)
10002474:	1085883a 	add	r2,r2,r2
10002478:	1085883a 	add	r2,r2,r2
1000247c:	1885883a 	add	r2,r3,r2
10002480:	10800017 	ldw	r2,0(r2)
10002484:	1009883a 	mov	r4,r2
10002488:	0006be00 	call	10006be0 <free>
        free(l->weights[i]);
    }
    free(l->weights);
    l->weights = NULL;

    for(int i = 0; i < l->num_nodes; i++) {
1000248c:	e0bffe17 	ldw	r2,-8(fp)
10002490:	10800044 	addi	r2,r2,1
10002494:	e0bffe15 	stw	r2,-8(fp)
10002498:	e13ffe17 	ldw	r4,-8(fp)
1000249c:	0003bd40 	call	10003bd4 <__floatsisf>
100024a0:	1009883a 	mov	r4,r2
100024a4:	e0bfff17 	ldw	r2,-4(fp)
100024a8:	10c00217 	ldw	r3,8(r2)
100024ac:	180b883a 	mov	r5,r3
100024b0:	00031880 	call	10003188 <__lesf2>
100024b4:	103fec16 	blt	r2,zero,10002468 <__alt_data_end+0xf8002468>
        free(l->weight_deltas[i]);
    }
    free(l->weight_deltas);
100024b8:	e0bfff17 	ldw	r2,-4(fp)
100024bc:	10800617 	ldw	r2,24(r2)
100024c0:	1009883a 	mov	r4,r2
100024c4:	0006be00 	call	10006be0 <free>
    l->weight_deltas = NULL;
100024c8:	e0bfff17 	ldw	r2,-4(fp)
100024cc:	10000615 	stw	zero,24(r2)

    free(l->layer_net);
100024d0:	e0bfff17 	ldw	r2,-4(fp)
100024d4:	10800717 	ldw	r2,28(r2)
100024d8:	1009883a 	mov	r4,r2
100024dc:	0006be00 	call	10006be0 <free>
    l->layer_net = NULL;
100024e0:	e0bfff17 	ldw	r2,-4(fp)
100024e4:	10000715 	stw	zero,28(r2)

    free(l->layer_out);
100024e8:	e0bfff17 	ldw	r2,-4(fp)
100024ec:	10800817 	ldw	r2,32(r2)
100024f0:	1009883a 	mov	r4,r2
100024f4:	0006be00 	call	10006be0 <free>
    l->layer_out = NULL;
100024f8:	e0bfff17 	ldw	r2,-4(fp)
100024fc:	10000815 	stw	zero,32(r2)

    l->curr_point = 0;
10002500:	e0bfff17 	ldw	r2,-4(fp)
10002504:	10000115 	stw	zero,4(r2)
    l->num_nodes = 0;
10002508:	e0bfff17 	ldw	r2,-4(fp)
1000250c:	10000215 	stw	zero,8(r2)
    l->layer_num = 0;
10002510:	e0bfff17 	ldw	r2,-4(fp)
10002514:	10000315 	stw	zero,12(r2)
    l->bias = 0;
10002518:	e0bfff17 	ldw	r2,-4(fp)
1000251c:	10000915 	stw	zero,36(r2)
10002520:	0001883a 	nop
10002524:	e037883a 	mov	sp,fp
10002528:	dfc00117 	ldw	ra,4(sp)
1000252c:	df000017 	ldw	fp,0(sp)
10002530:	dec00204 	addi	sp,sp,8
10002534:	f800283a 	ret

10002538 <__fixunssfsi>:
10002538:	defffd04 	addi	sp,sp,-12
1000253c:	dc000015 	stw	r16,0(sp)
10002540:	0413c034 	movhi	r16,20224
10002544:	800b883a 	mov	r5,r16
10002548:	dc400115 	stw	r17,4(sp)
1000254c:	dfc00215 	stw	ra,8(sp)
10002550:	2023883a 	mov	r17,r4
10002554:	00030cc0 	call	100030cc <__gesf2>
10002558:	1000070e 	bge	r2,zero,10002578 <__fixunssfsi+0x40>
1000255c:	8809883a 	mov	r4,r17
10002560:	0003b640 	call	10003b64 <__fixsfsi>
10002564:	dfc00217 	ldw	ra,8(sp)
10002568:	dc400117 	ldw	r17,4(sp)
1000256c:	dc000017 	ldw	r16,0(sp)
10002570:	dec00304 	addi	sp,sp,12
10002574:	f800283a 	ret
10002578:	800b883a 	mov	r5,r16
1000257c:	8809883a 	mov	r4,r17
10002580:	00036800 	call	10003680 <__subsf3>
10002584:	1009883a 	mov	r4,r2
10002588:	0003b640 	call	10003b64 <__fixsfsi>
1000258c:	00e00034 	movhi	r3,32768
10002590:	10c5883a 	add	r2,r2,r3
10002594:	003ff306 	br	10002564 <__alt_data_end+0xf8002564>

10002598 <__divsi3>:
10002598:	20001b16 	blt	r4,zero,10002608 <__divsi3+0x70>
1000259c:	000f883a 	mov	r7,zero
100025a0:	28001616 	blt	r5,zero,100025fc <__divsi3+0x64>
100025a4:	200d883a 	mov	r6,r4
100025a8:	29001a2e 	bgeu	r5,r4,10002614 <__divsi3+0x7c>
100025ac:	00800804 	movi	r2,32
100025b0:	00c00044 	movi	r3,1
100025b4:	00000106 	br	100025bc <__divsi3+0x24>
100025b8:	10000d26 	beq	r2,zero,100025f0 <__divsi3+0x58>
100025bc:	294b883a 	add	r5,r5,r5
100025c0:	10bfffc4 	addi	r2,r2,-1
100025c4:	18c7883a 	add	r3,r3,r3
100025c8:	293ffb36 	bltu	r5,r4,100025b8 <__alt_data_end+0xf80025b8>
100025cc:	0005883a 	mov	r2,zero
100025d0:	18000726 	beq	r3,zero,100025f0 <__divsi3+0x58>
100025d4:	0005883a 	mov	r2,zero
100025d8:	31400236 	bltu	r6,r5,100025e4 <__divsi3+0x4c>
100025dc:	314dc83a 	sub	r6,r6,r5
100025e0:	10c4b03a 	or	r2,r2,r3
100025e4:	1806d07a 	srli	r3,r3,1
100025e8:	280ad07a 	srli	r5,r5,1
100025ec:	183ffa1e 	bne	r3,zero,100025d8 <__alt_data_end+0xf80025d8>
100025f0:	38000126 	beq	r7,zero,100025f8 <__divsi3+0x60>
100025f4:	0085c83a 	sub	r2,zero,r2
100025f8:	f800283a 	ret
100025fc:	014bc83a 	sub	r5,zero,r5
10002600:	39c0005c 	xori	r7,r7,1
10002604:	003fe706 	br	100025a4 <__alt_data_end+0xf80025a4>
10002608:	0109c83a 	sub	r4,zero,r4
1000260c:	01c00044 	movi	r7,1
10002610:	003fe306 	br	100025a0 <__alt_data_end+0xf80025a0>
10002614:	00c00044 	movi	r3,1
10002618:	003fee06 	br	100025d4 <__alt_data_end+0xf80025d4>

1000261c <__modsi3>:
1000261c:	20001716 	blt	r4,zero,1000267c <__modsi3+0x60>
10002620:	000f883a 	mov	r7,zero
10002624:	2005883a 	mov	r2,r4
10002628:	28001216 	blt	r5,zero,10002674 <__modsi3+0x58>
1000262c:	2900162e 	bgeu	r5,r4,10002688 <__modsi3+0x6c>
10002630:	01800804 	movi	r6,32
10002634:	00c00044 	movi	r3,1
10002638:	00000106 	br	10002640 <__modsi3+0x24>
1000263c:	30000a26 	beq	r6,zero,10002668 <__modsi3+0x4c>
10002640:	294b883a 	add	r5,r5,r5
10002644:	31bfffc4 	addi	r6,r6,-1
10002648:	18c7883a 	add	r3,r3,r3
1000264c:	293ffb36 	bltu	r5,r4,1000263c <__alt_data_end+0xf800263c>
10002650:	18000526 	beq	r3,zero,10002668 <__modsi3+0x4c>
10002654:	1806d07a 	srli	r3,r3,1
10002658:	11400136 	bltu	r2,r5,10002660 <__modsi3+0x44>
1000265c:	1145c83a 	sub	r2,r2,r5
10002660:	280ad07a 	srli	r5,r5,1
10002664:	183ffb1e 	bne	r3,zero,10002654 <__alt_data_end+0xf8002654>
10002668:	38000126 	beq	r7,zero,10002670 <__modsi3+0x54>
1000266c:	0085c83a 	sub	r2,zero,r2
10002670:	f800283a 	ret
10002674:	014bc83a 	sub	r5,zero,r5
10002678:	003fec06 	br	1000262c <__alt_data_end+0xf800262c>
1000267c:	0109c83a 	sub	r4,zero,r4
10002680:	01c00044 	movi	r7,1
10002684:	003fe706 	br	10002624 <__alt_data_end+0xf8002624>
10002688:	00c00044 	movi	r3,1
1000268c:	003ff106 	br	10002654 <__alt_data_end+0xf8002654>

10002690 <__udivsi3>:
10002690:	200d883a 	mov	r6,r4
10002694:	2900152e 	bgeu	r5,r4,100026ec <__udivsi3+0x5c>
10002698:	28001416 	blt	r5,zero,100026ec <__udivsi3+0x5c>
1000269c:	00800804 	movi	r2,32
100026a0:	00c00044 	movi	r3,1
100026a4:	00000206 	br	100026b0 <__udivsi3+0x20>
100026a8:	10000e26 	beq	r2,zero,100026e4 <__udivsi3+0x54>
100026ac:	28000516 	blt	r5,zero,100026c4 <__udivsi3+0x34>
100026b0:	294b883a 	add	r5,r5,r5
100026b4:	10bfffc4 	addi	r2,r2,-1
100026b8:	18c7883a 	add	r3,r3,r3
100026bc:	293ffa36 	bltu	r5,r4,100026a8 <__alt_data_end+0xf80026a8>
100026c0:	18000826 	beq	r3,zero,100026e4 <__udivsi3+0x54>
100026c4:	0005883a 	mov	r2,zero
100026c8:	31400236 	bltu	r6,r5,100026d4 <__udivsi3+0x44>
100026cc:	314dc83a 	sub	r6,r6,r5
100026d0:	10c4b03a 	or	r2,r2,r3
100026d4:	1806d07a 	srli	r3,r3,1
100026d8:	280ad07a 	srli	r5,r5,1
100026dc:	183ffa1e 	bne	r3,zero,100026c8 <__alt_data_end+0xf80026c8>
100026e0:	f800283a 	ret
100026e4:	0005883a 	mov	r2,zero
100026e8:	f800283a 	ret
100026ec:	00c00044 	movi	r3,1
100026f0:	003ff406 	br	100026c4 <__alt_data_end+0xf80026c4>

100026f4 <__umodsi3>:
100026f4:	2005883a 	mov	r2,r4
100026f8:	2900122e 	bgeu	r5,r4,10002744 <__umodsi3+0x50>
100026fc:	28001116 	blt	r5,zero,10002744 <__umodsi3+0x50>
10002700:	01800804 	movi	r6,32
10002704:	00c00044 	movi	r3,1
10002708:	00000206 	br	10002714 <__umodsi3+0x20>
1000270c:	30000c26 	beq	r6,zero,10002740 <__umodsi3+0x4c>
10002710:	28000516 	blt	r5,zero,10002728 <__umodsi3+0x34>
10002714:	294b883a 	add	r5,r5,r5
10002718:	31bfffc4 	addi	r6,r6,-1
1000271c:	18c7883a 	add	r3,r3,r3
10002720:	293ffa36 	bltu	r5,r4,1000270c <__alt_data_end+0xf800270c>
10002724:	18000626 	beq	r3,zero,10002740 <__umodsi3+0x4c>
10002728:	1806d07a 	srli	r3,r3,1
1000272c:	11400136 	bltu	r2,r5,10002734 <__umodsi3+0x40>
10002730:	1145c83a 	sub	r2,r2,r5
10002734:	280ad07a 	srli	r5,r5,1
10002738:	183ffb1e 	bne	r3,zero,10002728 <__alt_data_end+0xf8002728>
1000273c:	f800283a 	ret
10002740:	f800283a 	ret
10002744:	00c00044 	movi	r3,1
10002748:	003ff706 	br	10002728 <__alt_data_end+0xf8002728>

1000274c <__addsf3>:
1000274c:	defffc04 	addi	sp,sp,-16
10002750:	2004d7fa 	srli	r2,r4,31
10002754:	280cd5fa 	srli	r6,r5,23
10002758:	dc000015 	stw	r16,0(sp)
1000275c:	00c02034 	movhi	r3,128
10002760:	2020d5fa 	srli	r16,r4,23
10002764:	280ed7fa 	srli	r7,r5,31
10002768:	18ffffc4 	addi	r3,r3,-1
1000276c:	dc400115 	stw	r17,4(sp)
10002770:	1908703a 	and	r4,r3,r4
10002774:	194a703a 	and	r5,r3,r5
10002778:	dfc00315 	stw	ra,12(sp)
1000277c:	dc800215 	stw	r18,8(sp)
10002780:	14403fcc 	andi	r17,r2,255
10002784:	84003fcc 	andi	r16,r16,255
10002788:	200890fa 	slli	r4,r4,3
1000278c:	31803fcc 	andi	r6,r6,255
10002790:	280a90fa 	slli	r5,r5,3
10002794:	89c05026 	beq	r17,r7,100028d8 <__addsf3+0x18c>
10002798:	8185c83a 	sub	r2,r16,r6
1000279c:	00807a0e 	bge	zero,r2,10002988 <__addsf3+0x23c>
100027a0:	30001e1e 	bne	r6,zero,1000281c <__addsf3+0xd0>
100027a4:	28006d1e 	bne	r5,zero,1000295c <__addsf3+0x210>
100027a8:	208001cc 	andi	r2,r4,7
100027ac:	10000426 	beq	r2,zero,100027c0 <__addsf3+0x74>
100027b0:	208003cc 	andi	r2,r4,15
100027b4:	00c00104 	movi	r3,4
100027b8:	10c00126 	beq	r2,r3,100027c0 <__addsf3+0x74>
100027bc:	20c9883a 	add	r4,r4,r3
100027c0:	2081002c 	andhi	r2,r4,1024
100027c4:	10003926 	beq	r2,zero,100028ac <__addsf3+0x160>
100027c8:	84000044 	addi	r16,r16,1
100027cc:	00803fc4 	movi	r2,255
100027d0:	80807826 	beq	r16,r2,100029b4 <__addsf3+0x268>
100027d4:	200891ba 	slli	r4,r4,6
100027d8:	8805883a 	mov	r2,r17
100027dc:	2008d27a 	srli	r4,r4,9
100027e0:	84003fcc 	andi	r16,r16,255
100027e4:	800695fa 	slli	r3,r16,23
100027e8:	10803fcc 	andi	r2,r2,255
100027ec:	04002034 	movhi	r16,128
100027f0:	843fffc4 	addi	r16,r16,-1
100027f4:	100497fa 	slli	r2,r2,31
100027f8:	2408703a 	and	r4,r4,r16
100027fc:	20e0b03a 	or	r16,r4,r3
10002800:	8084b03a 	or	r2,r16,r2
10002804:	dfc00317 	ldw	ra,12(sp)
10002808:	dc800217 	ldw	r18,8(sp)
1000280c:	dc400117 	ldw	r17,4(sp)
10002810:	dc000017 	ldw	r16,0(sp)
10002814:	dec00404 	addi	sp,sp,16
10002818:	f800283a 	ret
1000281c:	00c03fc4 	movi	r3,255
10002820:	80ffe126 	beq	r16,r3,100027a8 <__alt_data_end+0xf80027a8>
10002824:	29410034 	orhi	r5,r5,1024
10002828:	00c006c4 	movi	r3,27
1000282c:	18807516 	blt	r3,r2,10002a04 <__addsf3+0x2b8>
10002830:	00c00804 	movi	r3,32
10002834:	1887c83a 	sub	r3,r3,r2
10002838:	28c6983a 	sll	r3,r5,r3
1000283c:	288ad83a 	srl	r5,r5,r2
10002840:	1804c03a 	cmpne	r2,r3,zero
10002844:	288ab03a 	or	r5,r5,r2
10002848:	2149c83a 	sub	r4,r4,r5
1000284c:	2081002c 	andhi	r2,r4,1024
10002850:	10001426 	beq	r2,zero,100028a4 <__addsf3+0x158>
10002854:	04810034 	movhi	r18,1024
10002858:	94bfffc4 	addi	r18,r18,-1
1000285c:	24a4703a 	and	r18,r4,r18
10002860:	9009883a 	mov	r4,r18
10002864:	00065740 	call	10006574 <__clzsi2>
10002868:	10bffec4 	addi	r2,r2,-5
1000286c:	90a4983a 	sll	r18,r18,r2
10002870:	14005416 	blt	r2,r16,100029c4 <__addsf3+0x278>
10002874:	1405c83a 	sub	r2,r2,r16
10002878:	11000044 	addi	r4,r2,1
1000287c:	00800804 	movi	r2,32
10002880:	1105c83a 	sub	r2,r2,r4
10002884:	9084983a 	sll	r2,r18,r2
10002888:	9124d83a 	srl	r18,r18,r4
1000288c:	0021883a 	mov	r16,zero
10002890:	1008c03a 	cmpne	r4,r2,zero
10002894:	9108b03a 	or	r4,r18,r4
10002898:	003fc306 	br	100027a8 <__alt_data_end+0xf80027a8>
1000289c:	1000db26 	beq	r2,zero,10002c0c <__addsf3+0x4c0>
100028a0:	1009883a 	mov	r4,r2
100028a4:	208001cc 	andi	r2,r4,7
100028a8:	103fc11e 	bne	r2,zero,100027b0 <__alt_data_end+0xf80027b0>
100028ac:	2006d0fa 	srli	r3,r4,3
100028b0:	01003fc4 	movi	r4,255
100028b4:	8805883a 	mov	r2,r17
100028b8:	8100241e 	bne	r16,r4,1000294c <__addsf3+0x200>
100028bc:	18006e26 	beq	r3,zero,10002a78 <__addsf3+0x32c>
100028c0:	19001034 	orhi	r4,r3,64
100028c4:	00c02034 	movhi	r3,128
100028c8:	18ffffc4 	addi	r3,r3,-1
100028cc:	043fffc4 	movi	r16,-1
100028d0:	20c8703a 	and	r4,r4,r3
100028d4:	003fc206 	br	100027e0 <__alt_data_end+0xf80027e0>
100028d8:	8187c83a 	sub	r3,r16,r6
100028dc:	00c03e0e 	bge	zero,r3,100029d8 <__addsf3+0x28c>
100028e0:	30002326 	beq	r6,zero,10002970 <__addsf3+0x224>
100028e4:	01803fc4 	movi	r6,255
100028e8:	81bfaf26 	beq	r16,r6,100027a8 <__alt_data_end+0xf80027a8>
100028ec:	29410034 	orhi	r5,r5,1024
100028f0:	018006c4 	movi	r6,27
100028f4:	30c07416 	blt	r6,r3,10002ac8 <__addsf3+0x37c>
100028f8:	01800804 	movi	r6,32
100028fc:	30cdc83a 	sub	r6,r6,r3
10002900:	298c983a 	sll	r6,r5,r6
10002904:	28cad83a 	srl	r5,r5,r3
10002908:	3006c03a 	cmpne	r3,r6,zero
1000290c:	28cab03a 	or	r5,r5,r3
10002910:	2149883a 	add	r4,r4,r5
10002914:	20c1002c 	andhi	r3,r4,1024
10002918:	183fe226 	beq	r3,zero,100028a4 <__alt_data_end+0xf80028a4>
1000291c:	84000044 	addi	r16,r16,1
10002920:	00c03fc4 	movi	r3,255
10002924:	80c05426 	beq	r16,r3,10002a78 <__addsf3+0x32c>
10002928:	00bf0034 	movhi	r2,64512
1000292c:	10bfffc4 	addi	r2,r2,-1
10002930:	20c0004c 	andi	r3,r4,1
10002934:	2088703a 	and	r4,r4,r2
10002938:	2008d07a 	srli	r4,r4,1
1000293c:	20c8b03a 	or	r4,r4,r3
10002940:	003f9906 	br	100027a8 <__alt_data_end+0xf80027a8>
10002944:	0007883a 	mov	r3,zero
10002948:	0005883a 	mov	r2,zero
1000294c:	01002034 	movhi	r4,128
10002950:	213fffc4 	addi	r4,r4,-1
10002954:	1908703a 	and	r4,r3,r4
10002958:	003fa106 	br	100027e0 <__alt_data_end+0xf80027e0>
1000295c:	10bfffc4 	addi	r2,r2,-1
10002960:	103fb926 	beq	r2,zero,10002848 <__alt_data_end+0xf8002848>
10002964:	00c03fc4 	movi	r3,255
10002968:	80ffaf1e 	bne	r16,r3,10002828 <__alt_data_end+0xf8002828>
1000296c:	003f8e06 	br	100027a8 <__alt_data_end+0xf80027a8>
10002970:	283f8d26 	beq	r5,zero,100027a8 <__alt_data_end+0xf80027a8>
10002974:	18ffffc4 	addi	r3,r3,-1
10002978:	183fe526 	beq	r3,zero,10002910 <__alt_data_end+0xf8002910>
1000297c:	01803fc4 	movi	r6,255
10002980:	81bfdb1e 	bne	r16,r6,100028f0 <__alt_data_end+0xf80028f0>
10002984:	003f8806 	br	100027a8 <__alt_data_end+0xf80027a8>
10002988:	1000201e 	bne	r2,zero,10002a0c <__addsf3+0x2c0>
1000298c:	80800044 	addi	r2,r16,1
10002990:	10803fcc 	andi	r2,r2,255
10002994:	01800044 	movi	r6,1
10002998:	3080450e 	bge	r6,r2,10002ab0 <__addsf3+0x364>
1000299c:	2165c83a 	sub	r18,r4,r5
100029a0:	90c1002c 	andhi	r3,r18,1024
100029a4:	18002b26 	beq	r3,zero,10002a54 <__addsf3+0x308>
100029a8:	2925c83a 	sub	r18,r5,r4
100029ac:	3823883a 	mov	r17,r7
100029b0:	003fab06 	br	10002860 <__alt_data_end+0xf8002860>
100029b4:	8805883a 	mov	r2,r17
100029b8:	043fffc4 	movi	r16,-1
100029bc:	0009883a 	mov	r4,zero
100029c0:	003f8706 	br	100027e0 <__alt_data_end+0xf80027e0>
100029c4:	013f0034 	movhi	r4,64512
100029c8:	213fffc4 	addi	r4,r4,-1
100029cc:	80a1c83a 	sub	r16,r16,r2
100029d0:	9108703a 	and	r4,r18,r4
100029d4:	003f7406 	br	100027a8 <__alt_data_end+0xf80027a8>
100029d8:	1800411e 	bne	r3,zero,10002ae0 <__addsf3+0x394>
100029dc:	80c00044 	addi	r3,r16,1
100029e0:	19c03fcc 	andi	r7,r3,255
100029e4:	01800044 	movi	r6,1
100029e8:	31c0260e 	bge	r6,r7,10002a84 <__addsf3+0x338>
100029ec:	01803fc4 	movi	r6,255
100029f0:	19802126 	beq	r3,r6,10002a78 <__addsf3+0x32c>
100029f4:	2149883a 	add	r4,r4,r5
100029f8:	2008d07a 	srli	r4,r4,1
100029fc:	1821883a 	mov	r16,r3
10002a00:	003f6906 	br	100027a8 <__alt_data_end+0xf80027a8>
10002a04:	01400044 	movi	r5,1
10002a08:	003f8f06 	br	10002848 <__alt_data_end+0xf8002848>
10002a0c:	8000151e 	bne	r16,zero,10002a64 <__addsf3+0x318>
10002a10:	20002f26 	beq	r4,zero,10002ad0 <__addsf3+0x384>
10002a14:	0084303a 	nor	r2,zero,r2
10002a18:	10000a26 	beq	r2,zero,10002a44 <__addsf3+0x2f8>
10002a1c:	00c03fc4 	movi	r3,255
10002a20:	30c02b26 	beq	r6,r3,10002ad0 <__addsf3+0x384>
10002a24:	00c006c4 	movi	r3,27
10002a28:	18806d16 	blt	r3,r2,10002be0 <__addsf3+0x494>
10002a2c:	00c00804 	movi	r3,32
10002a30:	1887c83a 	sub	r3,r3,r2
10002a34:	20c6983a 	sll	r3,r4,r3
10002a38:	2084d83a 	srl	r2,r4,r2
10002a3c:	1808c03a 	cmpne	r4,r3,zero
10002a40:	1108b03a 	or	r4,r2,r4
10002a44:	2909c83a 	sub	r4,r5,r4
10002a48:	3021883a 	mov	r16,r6
10002a4c:	3823883a 	mov	r17,r7
10002a50:	003f7e06 	br	1000284c <__alt_data_end+0xf800284c>
10002a54:	903f821e 	bne	r18,zero,10002860 <__alt_data_end+0xf8002860>
10002a58:	0005883a 	mov	r2,zero
10002a5c:	0021883a 	mov	r16,zero
10002a60:	003fba06 	br	1000294c <__alt_data_end+0xf800294c>
10002a64:	00c03fc4 	movi	r3,255
10002a68:	30c01926 	beq	r6,r3,10002ad0 <__addsf3+0x384>
10002a6c:	0085c83a 	sub	r2,zero,r2
10002a70:	21010034 	orhi	r4,r4,1024
10002a74:	003feb06 	br	10002a24 <__alt_data_end+0xf8002a24>
10002a78:	043fffc4 	movi	r16,-1
10002a7c:	0009883a 	mov	r4,zero
10002a80:	003f5706 	br	100027e0 <__alt_data_end+0xf80027e0>
10002a84:	80004a1e 	bne	r16,zero,10002bb0 <__addsf3+0x464>
10002a88:	20005926 	beq	r4,zero,10002bf0 <__addsf3+0x4a4>
10002a8c:	283f4626 	beq	r5,zero,100027a8 <__alt_data_end+0xf80027a8>
10002a90:	2149883a 	add	r4,r4,r5
10002a94:	2081002c 	andhi	r2,r4,1024
10002a98:	103f8226 	beq	r2,zero,100028a4 <__alt_data_end+0xf80028a4>
10002a9c:	00bf0034 	movhi	r2,64512
10002aa0:	10bfffc4 	addi	r2,r2,-1
10002aa4:	3021883a 	mov	r16,r6
10002aa8:	2088703a 	and	r4,r4,r2
10002aac:	003f3e06 	br	100027a8 <__alt_data_end+0xf80027a8>
10002ab0:	8000121e 	bne	r16,zero,10002afc <__addsf3+0x3b0>
10002ab4:	2000261e 	bne	r4,zero,10002b50 <__addsf3+0x404>
10002ab8:	283fa226 	beq	r5,zero,10002944 <__alt_data_end+0xf8002944>
10002abc:	2809883a 	mov	r4,r5
10002ac0:	3823883a 	mov	r17,r7
10002ac4:	003f3806 	br	100027a8 <__alt_data_end+0xf80027a8>
10002ac8:	01400044 	movi	r5,1
10002acc:	003f9006 	br	10002910 <__alt_data_end+0xf8002910>
10002ad0:	2809883a 	mov	r4,r5
10002ad4:	3021883a 	mov	r16,r6
10002ad8:	3823883a 	mov	r17,r7
10002adc:	003f3206 	br	100027a8 <__alt_data_end+0xf80027a8>
10002ae0:	80000c1e 	bne	r16,zero,10002b14 <__addsf3+0x3c8>
10002ae4:	20002f26 	beq	r4,zero,10002ba4 <__addsf3+0x458>
10002ae8:	00c6303a 	nor	r3,zero,r3
10002aec:	18002b1e 	bne	r3,zero,10002b9c <__addsf3+0x450>
10002af0:	2149883a 	add	r4,r4,r5
10002af4:	3021883a 	mov	r16,r6
10002af8:	003f8606 	br	10002914 <__alt_data_end+0xf8002914>
10002afc:	20001b1e 	bne	r4,zero,10002b6c <__addsf3+0x420>
10002b00:	28003926 	beq	r5,zero,10002be8 <__addsf3+0x49c>
10002b04:	2809883a 	mov	r4,r5
10002b08:	3823883a 	mov	r17,r7
10002b0c:	04003fc4 	movi	r16,255
10002b10:	003f2506 	br	100027a8 <__alt_data_end+0xf80027a8>
10002b14:	01c03fc4 	movi	r7,255
10002b18:	31c02226 	beq	r6,r7,10002ba4 <__addsf3+0x458>
10002b1c:	00c7c83a 	sub	r3,zero,r3
10002b20:	21010034 	orhi	r4,r4,1024
10002b24:	01c006c4 	movi	r7,27
10002b28:	38c03616 	blt	r7,r3,10002c04 <__addsf3+0x4b8>
10002b2c:	01c00804 	movi	r7,32
10002b30:	38cfc83a 	sub	r7,r7,r3
10002b34:	21ce983a 	sll	r7,r4,r7
10002b38:	20c6d83a 	srl	r3,r4,r3
10002b3c:	3808c03a 	cmpne	r4,r7,zero
10002b40:	1906b03a 	or	r3,r3,r4
10002b44:	1949883a 	add	r4,r3,r5
10002b48:	3021883a 	mov	r16,r6
10002b4c:	003f7106 	br	10002914 <__alt_data_end+0xf8002914>
10002b50:	283f1526 	beq	r5,zero,100027a8 <__alt_data_end+0xf80027a8>
10002b54:	2145c83a 	sub	r2,r4,r5
10002b58:	10c1002c 	andhi	r3,r2,1024
10002b5c:	183f4f26 	beq	r3,zero,1000289c <__alt_data_end+0xf800289c>
10002b60:	2909c83a 	sub	r4,r5,r4
10002b64:	3823883a 	mov	r17,r7
10002b68:	003f0f06 	br	100027a8 <__alt_data_end+0xf80027a8>
10002b6c:	28001a26 	beq	r5,zero,10002bd8 <__addsf3+0x48c>
10002b70:	2008d0fa 	srli	r4,r4,3
10002b74:	2080102c 	andhi	r2,r4,64
10002b78:	10000526 	beq	r2,zero,10002b90 <__addsf3+0x444>
10002b7c:	280ad0fa 	srli	r5,r5,3
10002b80:	2880102c 	andhi	r2,r5,64
10002b84:	1000021e 	bne	r2,zero,10002b90 <__addsf3+0x444>
10002b88:	2809883a 	mov	r4,r5
10002b8c:	3823883a 	mov	r17,r7
10002b90:	200890fa 	slli	r4,r4,3
10002b94:	04003fc4 	movi	r16,255
10002b98:	003f0306 	br	100027a8 <__alt_data_end+0xf80027a8>
10002b9c:	01c03fc4 	movi	r7,255
10002ba0:	31ffe01e 	bne	r6,r7,10002b24 <__alt_data_end+0xf8002b24>
10002ba4:	2809883a 	mov	r4,r5
10002ba8:	3021883a 	mov	r16,r6
10002bac:	003efe06 	br	100027a8 <__alt_data_end+0xf80027a8>
10002bb0:	20001126 	beq	r4,zero,10002bf8 <__addsf3+0x4ac>
10002bb4:	28000826 	beq	r5,zero,10002bd8 <__addsf3+0x48c>
10002bb8:	2008d0fa 	srli	r4,r4,3
10002bbc:	2080102c 	andhi	r2,r4,64
10002bc0:	103ff326 	beq	r2,zero,10002b90 <__alt_data_end+0xf8002b90>
10002bc4:	280ad0fa 	srli	r5,r5,3
10002bc8:	2880102c 	andhi	r2,r5,64
10002bcc:	103ff01e 	bne	r2,zero,10002b90 <__alt_data_end+0xf8002b90>
10002bd0:	2809883a 	mov	r4,r5
10002bd4:	003fee06 	br	10002b90 <__alt_data_end+0xf8002b90>
10002bd8:	04003fc4 	movi	r16,255
10002bdc:	003ef206 	br	100027a8 <__alt_data_end+0xf80027a8>
10002be0:	01000044 	movi	r4,1
10002be4:	003f9706 	br	10002a44 <__alt_data_end+0xf8002a44>
10002be8:	0005883a 	mov	r2,zero
10002bec:	003f3406 	br	100028c0 <__alt_data_end+0xf80028c0>
10002bf0:	2809883a 	mov	r4,r5
10002bf4:	003eec06 	br	100027a8 <__alt_data_end+0xf80027a8>
10002bf8:	2809883a 	mov	r4,r5
10002bfc:	04003fc4 	movi	r16,255
10002c00:	003ee906 	br	100027a8 <__alt_data_end+0xf80027a8>
10002c04:	00c00044 	movi	r3,1
10002c08:	003fce06 	br	10002b44 <__alt_data_end+0xf8002b44>
10002c0c:	0005883a 	mov	r2,zero
10002c10:	003f4e06 	br	1000294c <__alt_data_end+0xf800294c>

10002c14 <__divsf3>:
10002c14:	defff504 	addi	sp,sp,-44
10002c18:	2004d5fa 	srli	r2,r4,23
10002c1c:	dcc00415 	stw	r19,16(sp)
10002c20:	2026d7fa 	srli	r19,r4,31
10002c24:	01c02034 	movhi	r7,128
10002c28:	dd800715 	stw	r22,28(sp)
10002c2c:	dd000515 	stw	r20,20(sp)
10002c30:	dc800315 	stw	r18,12(sp)
10002c34:	39ffffc4 	addi	r7,r7,-1
10002c38:	dfc00a15 	stw	ra,40(sp)
10002c3c:	df000915 	stw	fp,36(sp)
10002c40:	ddc00815 	stw	r23,32(sp)
10002c44:	dd400615 	stw	r21,24(sp)
10002c48:	dc400215 	stw	r17,8(sp)
10002c4c:	dc000115 	stw	r16,4(sp)
10002c50:	15003fcc 	andi	r20,r2,255
10002c54:	3924703a 	and	r18,r7,r4
10002c58:	9d803fcc 	andi	r22,r19,255
10002c5c:	a0005226 	beq	r20,zero,10002da8 <__divsf3+0x194>
10002c60:	00803fc4 	movi	r2,255
10002c64:	a0802e26 	beq	r20,r2,10002d20 <__divsf3+0x10c>
10002c68:	91002034 	orhi	r4,r18,128
10002c6c:	202490fa 	slli	r18,r4,3
10002c70:	a53fe044 	addi	r20,r20,-127
10002c74:	0021883a 	mov	r16,zero
10002c78:	002f883a 	mov	r23,zero
10002c7c:	2804d5fa 	srli	r2,r5,23
10002c80:	282ad7fa 	srli	r21,r5,31
10002c84:	01c02034 	movhi	r7,128
10002c88:	39ffffc4 	addi	r7,r7,-1
10002c8c:	10803fcc 	andi	r2,r2,255
10002c90:	3962703a 	and	r17,r7,r5
10002c94:	af003fcc 	andi	fp,r21,255
10002c98:	10004a26 	beq	r2,zero,10002dc4 <__divsf3+0x1b0>
10002c9c:	00c03fc4 	movi	r3,255
10002ca0:	10c04526 	beq	r2,r3,10002db8 <__divsf3+0x1a4>
10002ca4:	89402034 	orhi	r5,r17,128
10002ca8:	282290fa 	slli	r17,r5,3
10002cac:	10bfe044 	addi	r2,r2,-127
10002cb0:	000b883a 	mov	r5,zero
10002cb4:	2c20b03a 	or	r16,r5,r16
10002cb8:	802090ba 	slli	r16,r16,2
10002cbc:	00c40034 	movhi	r3,4096
10002cc0:	18cb3804 	addi	r3,r3,11488
10002cc4:	80e1883a 	add	r16,r16,r3
10002cc8:	80c00017 	ldw	r3,0(r16)
10002ccc:	9d48f03a 	xor	r4,r19,r21
10002cd0:	200d883a 	mov	r6,r4
10002cd4:	22003fcc 	andi	r8,r4,255
10002cd8:	a085c83a 	sub	r2,r20,r2
10002cdc:	1800683a 	jmp	r3
10002ce0:	10002ec4 	addi	zero,r2,187
10002ce4:	10002d48 	cmpgei	zero,r2,181
10002ce8:	10002eb8 	rdprs	zero,r2,186
10002cec:	10002d34 	orhi	zero,r2,180
10002cf0:	10002eb8 	rdprs	zero,r2,186
10002cf4:	10002e90 	cmplti	zero,r2,186
10002cf8:	10002eb8 	rdprs	zero,r2,186
10002cfc:	10002d34 	orhi	zero,r2,180
10002d00:	10002d48 	cmpgei	zero,r2,181
10002d04:	10002d48 	cmpgei	zero,r2,181
10002d08:	10002e90 	cmplti	zero,r2,186
10002d0c:	10002d34 	orhi	zero,r2,180
10002d10:	10002fa4 	muli	zero,r2,190
10002d14:	10002fa4 	muli	zero,r2,190
10002d18:	10002fa4 	muli	zero,r2,190
10002d1c:	10002f58 	cmpnei	zero,r2,189
10002d20:	9000581e 	bne	r18,zero,10002e84 <__divsf3+0x270>
10002d24:	04000204 	movi	r16,8
10002d28:	05c00084 	movi	r23,2
10002d2c:	003fd306 	br	10002c7c <__alt_data_end+0xf8002c7c>
10002d30:	0023883a 	mov	r17,zero
10002d34:	e02d883a 	mov	r22,fp
10002d38:	282f883a 	mov	r23,r5
10002d3c:	00c00084 	movi	r3,2
10002d40:	b8c08f1e 	bne	r23,r3,10002f80 <__divsf3+0x36c>
10002d44:	b011883a 	mov	r8,r22
10002d48:	4180004c 	andi	r6,r8,1
10002d4c:	013fffc4 	movi	r4,-1
10002d50:	000f883a 	mov	r7,zero
10002d54:	21003fcc 	andi	r4,r4,255
10002d58:	200895fa 	slli	r4,r4,23
10002d5c:	30803fcc 	andi	r2,r6,255
10002d60:	00c02034 	movhi	r3,128
10002d64:	100497fa 	slli	r2,r2,31
10002d68:	18ffffc4 	addi	r3,r3,-1
10002d6c:	38c6703a 	and	r3,r7,r3
10002d70:	1906b03a 	or	r3,r3,r4
10002d74:	1884b03a 	or	r2,r3,r2
10002d78:	dfc00a17 	ldw	ra,40(sp)
10002d7c:	df000917 	ldw	fp,36(sp)
10002d80:	ddc00817 	ldw	r23,32(sp)
10002d84:	dd800717 	ldw	r22,28(sp)
10002d88:	dd400617 	ldw	r21,24(sp)
10002d8c:	dd000517 	ldw	r20,20(sp)
10002d90:	dcc00417 	ldw	r19,16(sp)
10002d94:	dc800317 	ldw	r18,12(sp)
10002d98:	dc400217 	ldw	r17,8(sp)
10002d9c:	dc000117 	ldw	r16,4(sp)
10002da0:	dec00b04 	addi	sp,sp,44
10002da4:	f800283a 	ret
10002da8:	90002b1e 	bne	r18,zero,10002e58 <__divsf3+0x244>
10002dac:	04000104 	movi	r16,4
10002db0:	05c00044 	movi	r23,1
10002db4:	003fb106 	br	10002c7c <__alt_data_end+0xf8002c7c>
10002db8:	8800251e 	bne	r17,zero,10002e50 <__divsf3+0x23c>
10002dbc:	01400084 	movi	r5,2
10002dc0:	00000206 	br	10002dcc <__divsf3+0x1b8>
10002dc4:	88001a1e 	bne	r17,zero,10002e30 <__divsf3+0x21c>
10002dc8:	01400044 	movi	r5,1
10002dcc:	8160b03a 	or	r16,r16,r5
10002dd0:	802090ba 	slli	r16,r16,2
10002dd4:	00c40034 	movhi	r3,4096
10002dd8:	18cb7c04 	addi	r3,r3,11760
10002ddc:	80e1883a 	add	r16,r16,r3
10002de0:	80c00017 	ldw	r3,0(r16)
10002de4:	9d50f03a 	xor	r8,r19,r21
10002de8:	a085c83a 	sub	r2,r20,r2
10002dec:	1800683a 	jmp	r3
10002df0:	10002d48 	cmpgei	zero,r2,181
10002df4:	10002d48 	cmpgei	zero,r2,181
10002df8:	10002f94 	ori	zero,r2,190
10002dfc:	10002d30 	cmpltui	zero,r2,180
10002e00:	10002f94 	ori	zero,r2,190
10002e04:	10002e90 	cmplti	zero,r2,186
10002e08:	10002f94 	ori	zero,r2,190
10002e0c:	10002d30 	cmpltui	zero,r2,180
10002e10:	10002d48 	cmpgei	zero,r2,181
10002e14:	10002d48 	cmpgei	zero,r2,181
10002e18:	10002e90 	cmplti	zero,r2,186
10002e1c:	10002d30 	cmpltui	zero,r2,180
10002e20:	10002fa4 	muli	zero,r2,190
10002e24:	10002fa4 	muli	zero,r2,190
10002e28:	10002fa4 	muli	zero,r2,190
10002e2c:	10002fbc 	xorhi	zero,r2,190
10002e30:	8809883a 	mov	r4,r17
10002e34:	00065740 	call	10006574 <__clzsi2>
10002e38:	10fffec4 	addi	r3,r2,-5
10002e3c:	88e2983a 	sll	r17,r17,r3
10002e40:	00ffe284 	movi	r3,-118
10002e44:	1885c83a 	sub	r2,r3,r2
10002e48:	000b883a 	mov	r5,zero
10002e4c:	003f9906 	br	10002cb4 <__alt_data_end+0xf8002cb4>
10002e50:	014000c4 	movi	r5,3
10002e54:	003f9706 	br	10002cb4 <__alt_data_end+0xf8002cb4>
10002e58:	9009883a 	mov	r4,r18
10002e5c:	d9400015 	stw	r5,0(sp)
10002e60:	00065740 	call	10006574 <__clzsi2>
10002e64:	10fffec4 	addi	r3,r2,-5
10002e68:	053fe284 	movi	r20,-118
10002e6c:	90e4983a 	sll	r18,r18,r3
10002e70:	a0a9c83a 	sub	r20,r20,r2
10002e74:	0021883a 	mov	r16,zero
10002e78:	002f883a 	mov	r23,zero
10002e7c:	d9400017 	ldw	r5,0(sp)
10002e80:	003f7e06 	br	10002c7c <__alt_data_end+0xf8002c7c>
10002e84:	04000304 	movi	r16,12
10002e88:	05c000c4 	movi	r23,3
10002e8c:	003f7b06 	br	10002c7c <__alt_data_end+0xf8002c7c>
10002e90:	01c02034 	movhi	r7,128
10002e94:	000d883a 	mov	r6,zero
10002e98:	39ffffc4 	addi	r7,r7,-1
10002e9c:	013fffc4 	movi	r4,-1
10002ea0:	003fac06 	br	10002d54 <__alt_data_end+0xf8002d54>
10002ea4:	01400044 	movi	r5,1
10002ea8:	2909c83a 	sub	r4,r5,r4
10002eac:	008006c4 	movi	r2,27
10002eb0:	11004b0e 	bge	r2,r4,10002fe0 <__divsf3+0x3cc>
10002eb4:	414c703a 	and	r6,r8,r5
10002eb8:	0009883a 	mov	r4,zero
10002ebc:	000f883a 	mov	r7,zero
10002ec0:	003fa406 	br	10002d54 <__alt_data_end+0xf8002d54>
10002ec4:	9006917a 	slli	r3,r18,5
10002ec8:	880e917a 	slli	r7,r17,5
10002ecc:	19c0372e 	bgeu	r3,r7,10002fac <__divsf3+0x398>
10002ed0:	10bfffc4 	addi	r2,r2,-1
10002ed4:	010006c4 	movi	r4,27
10002ed8:	000b883a 	mov	r5,zero
10002edc:	180d883a 	mov	r6,r3
10002ee0:	294b883a 	add	r5,r5,r5
10002ee4:	18c7883a 	add	r3,r3,r3
10002ee8:	30000116 	blt	r6,zero,10002ef0 <__divsf3+0x2dc>
10002eec:	19c00236 	bltu	r3,r7,10002ef8 <__divsf3+0x2e4>
10002ef0:	19c7c83a 	sub	r3,r3,r7
10002ef4:	29400054 	ori	r5,r5,1
10002ef8:	213fffc4 	addi	r4,r4,-1
10002efc:	203ff71e 	bne	r4,zero,10002edc <__alt_data_end+0xf8002edc>
10002f00:	1806c03a 	cmpne	r3,r3,zero
10002f04:	1962b03a 	or	r17,r3,r5
10002f08:	11001fc4 	addi	r4,r2,127
10002f0c:	013fe50e 	bge	zero,r4,10002ea4 <__alt_data_end+0xf8002ea4>
10002f10:	88c001cc 	andi	r3,r17,7
10002f14:	18000426 	beq	r3,zero,10002f28 <__divsf3+0x314>
10002f18:	88c003cc 	andi	r3,r17,15
10002f1c:	01400104 	movi	r5,4
10002f20:	19400126 	beq	r3,r5,10002f28 <__divsf3+0x314>
10002f24:	8963883a 	add	r17,r17,r5
10002f28:	88c2002c 	andhi	r3,r17,2048
10002f2c:	18000426 	beq	r3,zero,10002f40 <__divsf3+0x32c>
10002f30:	11002004 	addi	r4,r2,128
10002f34:	00be0034 	movhi	r2,63488
10002f38:	10bfffc4 	addi	r2,r2,-1
10002f3c:	88a2703a 	and	r17,r17,r2
10002f40:	00803f84 	movi	r2,254
10002f44:	113f8016 	blt	r2,r4,10002d48 <__alt_data_end+0xf8002d48>
10002f48:	880e91ba 	slli	r7,r17,6
10002f4c:	4180004c 	andi	r6,r8,1
10002f50:	380ed27a 	srli	r7,r7,9
10002f54:	003f7f06 	br	10002d54 <__alt_data_end+0xf8002d54>
10002f58:	9080102c 	andhi	r2,r18,64
10002f5c:	10000226 	beq	r2,zero,10002f68 <__divsf3+0x354>
10002f60:	8880102c 	andhi	r2,r17,64
10002f64:	10001826 	beq	r2,zero,10002fc8 <__divsf3+0x3b4>
10002f68:	00802034 	movhi	r2,128
10002f6c:	91c01034 	orhi	r7,r18,64
10002f70:	10bfffc4 	addi	r2,r2,-1
10002f74:	980d883a 	mov	r6,r19
10002f78:	388e703a 	and	r7,r7,r2
10002f7c:	003fc706 	br	10002e9c <__alt_data_end+0xf8002e9c>
10002f80:	00c000c4 	movi	r3,3
10002f84:	b8c02d26 	beq	r23,r3,1000303c <__divsf3+0x428>
10002f88:	00c00044 	movi	r3,1
10002f8c:	b011883a 	mov	r8,r22
10002f90:	b8ffdd1e 	bne	r23,r3,10002f08 <__alt_data_end+0xf8002f08>
10002f94:	4180004c 	andi	r6,r8,1
10002f98:	0009883a 	mov	r4,zero
10002f9c:	000f883a 	mov	r7,zero
10002fa0:	003f6c06 	br	10002d54 <__alt_data_end+0xf8002d54>
10002fa4:	9023883a 	mov	r17,r18
10002fa8:	003f6406 	br	10002d3c <__alt_data_end+0xf8002d3c>
10002fac:	19c7c83a 	sub	r3,r3,r7
10002fb0:	01000684 	movi	r4,26
10002fb4:	01400044 	movi	r5,1
10002fb8:	003fc806 	br	10002edc <__alt_data_end+0xf8002edc>
10002fbc:	9080102c 	andhi	r2,r18,64
10002fc0:	103fe926 	beq	r2,zero,10002f68 <__alt_data_end+0xf8002f68>
10002fc4:	0023883a 	mov	r17,zero
10002fc8:	00802034 	movhi	r2,128
10002fcc:	89c01034 	orhi	r7,r17,64
10002fd0:	10bfffc4 	addi	r2,r2,-1
10002fd4:	a80d883a 	mov	r6,r21
10002fd8:	388e703a 	and	r7,r7,r2
10002fdc:	003faf06 	br	10002e9c <__alt_data_end+0xf8002e9c>
10002fe0:	00800804 	movi	r2,32
10002fe4:	1105c83a 	sub	r2,r2,r4
10002fe8:	8884983a 	sll	r2,r17,r2
10002fec:	890ad83a 	srl	r5,r17,r4
10002ff0:	1004c03a 	cmpne	r2,r2,zero
10002ff4:	288ab03a 	or	r5,r5,r2
10002ff8:	288001cc 	andi	r2,r5,7
10002ffc:	10000426 	beq	r2,zero,10003010 <__divsf3+0x3fc>
10003000:	288003cc 	andi	r2,r5,15
10003004:	00c00104 	movi	r3,4
10003008:	10c00126 	beq	r2,r3,10003010 <__divsf3+0x3fc>
1000300c:	28cb883a 	add	r5,r5,r3
10003010:	2881002c 	andhi	r2,r5,1024
10003014:	10000426 	beq	r2,zero,10003028 <__divsf3+0x414>
10003018:	4180004c 	andi	r6,r8,1
1000301c:	01000044 	movi	r4,1
10003020:	000f883a 	mov	r7,zero
10003024:	003f4b06 	br	10002d54 <__alt_data_end+0xf8002d54>
10003028:	280a91ba 	slli	r5,r5,6
1000302c:	4180004c 	andi	r6,r8,1
10003030:	0009883a 	mov	r4,zero
10003034:	280ed27a 	srli	r7,r5,9
10003038:	003f4606 	br	10002d54 <__alt_data_end+0xf8002d54>
1000303c:	00802034 	movhi	r2,128
10003040:	89c01034 	orhi	r7,r17,64
10003044:	10bfffc4 	addi	r2,r2,-1
10003048:	b00d883a 	mov	r6,r22
1000304c:	388e703a 	and	r7,r7,r2
10003050:	003f9206 	br	10002e9c <__alt_data_end+0xf8002e9c>

10003054 <__eqsf2>:
10003054:	2006d5fa 	srli	r3,r4,23
10003058:	280cd5fa 	srli	r6,r5,23
1000305c:	01c02034 	movhi	r7,128
10003060:	39ffffc4 	addi	r7,r7,-1
10003064:	18c03fcc 	andi	r3,r3,255
10003068:	02003fc4 	movi	r8,255
1000306c:	3904703a 	and	r2,r7,r4
10003070:	31803fcc 	andi	r6,r6,255
10003074:	394e703a 	and	r7,r7,r5
10003078:	2008d7fa 	srli	r4,r4,31
1000307c:	280ad7fa 	srli	r5,r5,31
10003080:	1a000d26 	beq	r3,r8,100030b8 <__eqsf2+0x64>
10003084:	02003fc4 	movi	r8,255
10003088:	32000826 	beq	r6,r8,100030ac <__eqsf2+0x58>
1000308c:	19800226 	beq	r3,r6,10003098 <__eqsf2+0x44>
10003090:	00800044 	movi	r2,1
10003094:	f800283a 	ret
10003098:	11fffd1e 	bne	r2,r7,10003090 <__alt_data_end+0xf8003090>
1000309c:	21400926 	beq	r4,r5,100030c4 <__eqsf2+0x70>
100030a0:	183ffb1e 	bne	r3,zero,10003090 <__alt_data_end+0xf8003090>
100030a4:	1004c03a 	cmpne	r2,r2,zero
100030a8:	f800283a 	ret
100030ac:	383ff726 	beq	r7,zero,1000308c <__alt_data_end+0xf800308c>
100030b0:	00800044 	movi	r2,1
100030b4:	f800283a 	ret
100030b8:	103ff226 	beq	r2,zero,10003084 <__alt_data_end+0xf8003084>
100030bc:	00800044 	movi	r2,1
100030c0:	f800283a 	ret
100030c4:	0005883a 	mov	r2,zero
100030c8:	f800283a 	ret

100030cc <__gesf2>:
100030cc:	2004d5fa 	srli	r2,r4,23
100030d0:	2806d5fa 	srli	r3,r5,23
100030d4:	01802034 	movhi	r6,128
100030d8:	31bfffc4 	addi	r6,r6,-1
100030dc:	10803fcc 	andi	r2,r2,255
100030e0:	01c03fc4 	movi	r7,255
100030e4:	3110703a 	and	r8,r6,r4
100030e8:	18c03fcc 	andi	r3,r3,255
100030ec:	314c703a 	and	r6,r6,r5
100030f0:	2008d7fa 	srli	r4,r4,31
100030f4:	280ad7fa 	srli	r5,r5,31
100030f8:	11c01926 	beq	r2,r7,10003160 <__gesf2+0x94>
100030fc:	01c03fc4 	movi	r7,255
10003100:	19c00f26 	beq	r3,r7,10003140 <__gesf2+0x74>
10003104:	1000061e 	bne	r2,zero,10003120 <__gesf2+0x54>
10003108:	400f003a 	cmpeq	r7,r8,zero
1000310c:	1800071e 	bne	r3,zero,1000312c <__gesf2+0x60>
10003110:	3000061e 	bne	r6,zero,1000312c <__gesf2+0x60>
10003114:	0005883a 	mov	r2,zero
10003118:	40000e1e 	bne	r8,zero,10003154 <__gesf2+0x88>
1000311c:	f800283a 	ret
10003120:	18000a1e 	bne	r3,zero,1000314c <__gesf2+0x80>
10003124:	30000b26 	beq	r6,zero,10003154 <__gesf2+0x88>
10003128:	000f883a 	mov	r7,zero
1000312c:	29403fcc 	andi	r5,r5,255
10003130:	38000726 	beq	r7,zero,10003150 <__gesf2+0x84>
10003134:	28000826 	beq	r5,zero,10003158 <__gesf2+0x8c>
10003138:	00800044 	movi	r2,1
1000313c:	f800283a 	ret
10003140:	303ff026 	beq	r6,zero,10003104 <__alt_data_end+0xf8003104>
10003144:	00bfff84 	movi	r2,-2
10003148:	f800283a 	ret
1000314c:	29403fcc 	andi	r5,r5,255
10003150:	21400526 	beq	r4,r5,10003168 <__gesf2+0x9c>
10003154:	203ff826 	beq	r4,zero,10003138 <__alt_data_end+0xf8003138>
10003158:	00bfffc4 	movi	r2,-1
1000315c:	f800283a 	ret
10003160:	403fe626 	beq	r8,zero,100030fc <__alt_data_end+0xf80030fc>
10003164:	003ff706 	br	10003144 <__alt_data_end+0xf8003144>
10003168:	18bffa16 	blt	r3,r2,10003154 <__alt_data_end+0xf8003154>
1000316c:	10c00216 	blt	r2,r3,10003178 <__gesf2+0xac>
10003170:	323ff836 	bltu	r6,r8,10003154 <__alt_data_end+0xf8003154>
10003174:	4180022e 	bgeu	r8,r6,10003180 <__gesf2+0xb4>
10003178:	203fef1e 	bne	r4,zero,10003138 <__alt_data_end+0xf8003138>
1000317c:	003ff606 	br	10003158 <__alt_data_end+0xf8003158>
10003180:	0005883a 	mov	r2,zero
10003184:	f800283a 	ret

10003188 <__lesf2>:
10003188:	2004d5fa 	srli	r2,r4,23
1000318c:	280cd5fa 	srli	r6,r5,23
10003190:	00c02034 	movhi	r3,128
10003194:	18ffffc4 	addi	r3,r3,-1
10003198:	10803fcc 	andi	r2,r2,255
1000319c:	01c03fc4 	movi	r7,255
100031a0:	1910703a 	and	r8,r3,r4
100031a4:	31803fcc 	andi	r6,r6,255
100031a8:	1946703a 	and	r3,r3,r5
100031ac:	2008d7fa 	srli	r4,r4,31
100031b0:	280ad7fa 	srli	r5,r5,31
100031b4:	11c01b26 	beq	r2,r7,10003224 <__lesf2+0x9c>
100031b8:	01c03fc4 	movi	r7,255
100031bc:	31c01126 	beq	r6,r7,10003204 <__lesf2+0x7c>
100031c0:	1000071e 	bne	r2,zero,100031e0 <__lesf2+0x58>
100031c4:	400f003a 	cmpeq	r7,r8,zero
100031c8:	21003fcc 	andi	r4,r4,255
100031cc:	3000081e 	bne	r6,zero,100031f0 <__lesf2+0x68>
100031d0:	1800071e 	bne	r3,zero,100031f0 <__lesf2+0x68>
100031d4:	0005883a 	mov	r2,zero
100031d8:	40000f1e 	bne	r8,zero,10003218 <__lesf2+0x90>
100031dc:	f800283a 	ret
100031e0:	21003fcc 	andi	r4,r4,255
100031e4:	30000a1e 	bne	r6,zero,10003210 <__lesf2+0x88>
100031e8:	18000b26 	beq	r3,zero,10003218 <__lesf2+0x90>
100031ec:	000f883a 	mov	r7,zero
100031f0:	29403fcc 	andi	r5,r5,255
100031f4:	38000726 	beq	r7,zero,10003214 <__lesf2+0x8c>
100031f8:	28000826 	beq	r5,zero,1000321c <__lesf2+0x94>
100031fc:	00800044 	movi	r2,1
10003200:	f800283a 	ret
10003204:	183fee26 	beq	r3,zero,100031c0 <__alt_data_end+0xf80031c0>
10003208:	00800084 	movi	r2,2
1000320c:	f800283a 	ret
10003210:	29403fcc 	andi	r5,r5,255
10003214:	21400626 	beq	r4,r5,10003230 <__lesf2+0xa8>
10003218:	203ff826 	beq	r4,zero,100031fc <__alt_data_end+0xf80031fc>
1000321c:	00bfffc4 	movi	r2,-1
10003220:	f800283a 	ret
10003224:	403fe426 	beq	r8,zero,100031b8 <__alt_data_end+0xf80031b8>
10003228:	00800084 	movi	r2,2
1000322c:	f800283a 	ret
10003230:	30bff916 	blt	r6,r2,10003218 <__alt_data_end+0xf8003218>
10003234:	11800216 	blt	r2,r6,10003240 <__lesf2+0xb8>
10003238:	1a3ff736 	bltu	r3,r8,10003218 <__alt_data_end+0xf8003218>
1000323c:	40c0022e 	bgeu	r8,r3,10003248 <__lesf2+0xc0>
10003240:	203fee1e 	bne	r4,zero,100031fc <__alt_data_end+0xf80031fc>
10003244:	003ff506 	br	1000321c <__alt_data_end+0xf800321c>
10003248:	0005883a 	mov	r2,zero
1000324c:	f800283a 	ret

10003250 <__mulsf3>:
10003250:	defff504 	addi	sp,sp,-44
10003254:	dc000115 	stw	r16,4(sp)
10003258:	2020d5fa 	srli	r16,r4,23
1000325c:	dd400615 	stw	r21,24(sp)
10003260:	202ad7fa 	srli	r21,r4,31
10003264:	dc800315 	stw	r18,12(sp)
10003268:	04802034 	movhi	r18,128
1000326c:	df000915 	stw	fp,36(sp)
10003270:	dd000515 	stw	r20,20(sp)
10003274:	94bfffc4 	addi	r18,r18,-1
10003278:	dfc00a15 	stw	ra,40(sp)
1000327c:	ddc00815 	stw	r23,32(sp)
10003280:	dd800715 	stw	r22,28(sp)
10003284:	dcc00415 	stw	r19,16(sp)
10003288:	dc400215 	stw	r17,8(sp)
1000328c:	84003fcc 	andi	r16,r16,255
10003290:	9124703a 	and	r18,r18,r4
10003294:	a829883a 	mov	r20,r21
10003298:	af003fcc 	andi	fp,r21,255
1000329c:	80005426 	beq	r16,zero,100033f0 <__mulsf3+0x1a0>
100032a0:	00803fc4 	movi	r2,255
100032a4:	80802f26 	beq	r16,r2,10003364 <__mulsf3+0x114>
100032a8:	91002034 	orhi	r4,r18,128
100032ac:	202490fa 	slli	r18,r4,3
100032b0:	843fe044 	addi	r16,r16,-127
100032b4:	0023883a 	mov	r17,zero
100032b8:	002f883a 	mov	r23,zero
100032bc:	2804d5fa 	srli	r2,r5,23
100032c0:	282cd7fa 	srli	r22,r5,31
100032c4:	01002034 	movhi	r4,128
100032c8:	213fffc4 	addi	r4,r4,-1
100032cc:	10803fcc 	andi	r2,r2,255
100032d0:	2166703a 	and	r19,r4,r5
100032d4:	b1803fcc 	andi	r6,r22,255
100032d8:	10004c26 	beq	r2,zero,1000340c <__mulsf3+0x1bc>
100032dc:	00c03fc4 	movi	r3,255
100032e0:	10c04726 	beq	r2,r3,10003400 <__mulsf3+0x1b0>
100032e4:	99002034 	orhi	r4,r19,128
100032e8:	202690fa 	slli	r19,r4,3
100032ec:	10bfe044 	addi	r2,r2,-127
100032f0:	0007883a 	mov	r3,zero
100032f4:	80a1883a 	add	r16,r16,r2
100032f8:	010003c4 	movi	r4,15
100032fc:	1c44b03a 	or	r2,r3,r17
10003300:	b56af03a 	xor	r21,r22,r21
10003304:	81c00044 	addi	r7,r16,1
10003308:	20806b36 	bltu	r4,r2,100034b8 <__mulsf3+0x268>
1000330c:	100490ba 	slli	r2,r2,2
10003310:	01040034 	movhi	r4,4096
10003314:	210cc904 	addi	r4,r4,13092
10003318:	1105883a 	add	r2,r2,r4
1000331c:	10800017 	ldw	r2,0(r2)
10003320:	1000683a 	jmp	r2
10003324:	100034b8 	rdprs	zero,r2,210
10003328:	10003378 	rdprs	zero,r2,205
1000332c:	10003378 	rdprs	zero,r2,205
10003330:	10003374 	orhi	zero,r2,205
10003334:	1000349c 	xori	zero,r2,210
10003338:	1000349c 	xori	zero,r2,210
1000333c:	10003488 	cmpgei	zero,r2,210
10003340:	10003374 	orhi	zero,r2,205
10003344:	1000349c 	xori	zero,r2,210
10003348:	10003488 	cmpgei	zero,r2,210
1000334c:	1000349c 	xori	zero,r2,210
10003350:	10003374 	orhi	zero,r2,205
10003354:	100034a8 	cmpgeui	zero,r2,210
10003358:	100034a8 	cmpgeui	zero,r2,210
1000335c:	100034a8 	cmpgeui	zero,r2,210
10003360:	100035b8 	rdprs	zero,r2,214
10003364:	90003b1e 	bne	r18,zero,10003454 <__mulsf3+0x204>
10003368:	04400204 	movi	r17,8
1000336c:	05c00084 	movi	r23,2
10003370:	003fd206 	br	100032bc <__alt_data_end+0xf80032bc>
10003374:	302b883a 	mov	r21,r6
10003378:	00800084 	movi	r2,2
1000337c:	18802626 	beq	r3,r2,10003418 <__mulsf3+0x1c8>
10003380:	008000c4 	movi	r2,3
10003384:	1880b826 	beq	r3,r2,10003668 <__mulsf3+0x418>
10003388:	00800044 	movi	r2,1
1000338c:	1880af1e 	bne	r3,r2,1000364c <__mulsf3+0x3fc>
10003390:	a829883a 	mov	r20,r21
10003394:	0007883a 	mov	r3,zero
10003398:	0009883a 	mov	r4,zero
1000339c:	18803fcc 	andi	r2,r3,255
100033a0:	100695fa 	slli	r3,r2,23
100033a4:	a0803fcc 	andi	r2,r20,255
100033a8:	100a97fa 	slli	r5,r2,31
100033ac:	00802034 	movhi	r2,128
100033b0:	10bfffc4 	addi	r2,r2,-1
100033b4:	2084703a 	and	r2,r4,r2
100033b8:	10c4b03a 	or	r2,r2,r3
100033bc:	1144b03a 	or	r2,r2,r5
100033c0:	dfc00a17 	ldw	ra,40(sp)
100033c4:	df000917 	ldw	fp,36(sp)
100033c8:	ddc00817 	ldw	r23,32(sp)
100033cc:	dd800717 	ldw	r22,28(sp)
100033d0:	dd400617 	ldw	r21,24(sp)
100033d4:	dd000517 	ldw	r20,20(sp)
100033d8:	dcc00417 	ldw	r19,16(sp)
100033dc:	dc800317 	ldw	r18,12(sp)
100033e0:	dc400217 	ldw	r17,8(sp)
100033e4:	dc000117 	ldw	r16,4(sp)
100033e8:	dec00b04 	addi	sp,sp,44
100033ec:	f800283a 	ret
100033f0:	90000d1e 	bne	r18,zero,10003428 <__mulsf3+0x1d8>
100033f4:	04400104 	movi	r17,4
100033f8:	05c00044 	movi	r23,1
100033fc:	003faf06 	br	100032bc <__alt_data_end+0xf80032bc>
10003400:	9806c03a 	cmpne	r3,r19,zero
10003404:	18c00084 	addi	r3,r3,2
10003408:	003fba06 	br	100032f4 <__alt_data_end+0xf80032f4>
1000340c:	9800141e 	bne	r19,zero,10003460 <__mulsf3+0x210>
10003410:	00c00044 	movi	r3,1
10003414:	003fb706 	br	100032f4 <__alt_data_end+0xf80032f4>
10003418:	a829883a 	mov	r20,r21
1000341c:	00ffffc4 	movi	r3,-1
10003420:	0009883a 	mov	r4,zero
10003424:	003fdd06 	br	1000339c <__alt_data_end+0xf800339c>
10003428:	9009883a 	mov	r4,r18
1000342c:	d9400015 	stw	r5,0(sp)
10003430:	00065740 	call	10006574 <__clzsi2>
10003434:	10fffec4 	addi	r3,r2,-5
10003438:	043fe284 	movi	r16,-118
1000343c:	90e4983a 	sll	r18,r18,r3
10003440:	80a1c83a 	sub	r16,r16,r2
10003444:	0023883a 	mov	r17,zero
10003448:	002f883a 	mov	r23,zero
1000344c:	d9400017 	ldw	r5,0(sp)
10003450:	003f9a06 	br	100032bc <__alt_data_end+0xf80032bc>
10003454:	04400304 	movi	r17,12
10003458:	05c000c4 	movi	r23,3
1000345c:	003f9706 	br	100032bc <__alt_data_end+0xf80032bc>
10003460:	9809883a 	mov	r4,r19
10003464:	d9800015 	stw	r6,0(sp)
10003468:	00065740 	call	10006574 <__clzsi2>
1000346c:	10fffec4 	addi	r3,r2,-5
10003470:	98e6983a 	sll	r19,r19,r3
10003474:	00ffe284 	movi	r3,-118
10003478:	1885c83a 	sub	r2,r3,r2
1000347c:	d9800017 	ldw	r6,0(sp)
10003480:	0007883a 	mov	r3,zero
10003484:	003f9b06 	br	100032f4 <__alt_data_end+0xf80032f4>
10003488:	01002034 	movhi	r4,128
1000348c:	0029883a 	mov	r20,zero
10003490:	213fffc4 	addi	r4,r4,-1
10003494:	00ffffc4 	movi	r3,-1
10003498:	003fc006 	br	1000339c <__alt_data_end+0xf800339c>
1000349c:	9027883a 	mov	r19,r18
100034a0:	b807883a 	mov	r3,r23
100034a4:	003fb406 	br	10003378 <__alt_data_end+0xf8003378>
100034a8:	9027883a 	mov	r19,r18
100034ac:	e02b883a 	mov	r21,fp
100034b0:	b807883a 	mov	r3,r23
100034b4:	003fb006 	br	10003378 <__alt_data_end+0xf8003378>
100034b8:	9028d43a 	srli	r20,r18,16
100034bc:	982cd43a 	srli	r22,r19,16
100034c0:	94bfffcc 	andi	r18,r18,65535
100034c4:	9cffffcc 	andi	r19,r19,65535
100034c8:	980b883a 	mov	r5,r19
100034cc:	9009883a 	mov	r4,r18
100034d0:	d9c00015 	stw	r7,0(sp)
100034d4:	00065d80 	call	100065d8 <__mulsi3>
100034d8:	a00b883a 	mov	r5,r20
100034dc:	9809883a 	mov	r4,r19
100034e0:	1023883a 	mov	r17,r2
100034e4:	00065d80 	call	100065d8 <__mulsi3>
100034e8:	a009883a 	mov	r4,r20
100034ec:	b00b883a 	mov	r5,r22
100034f0:	1027883a 	mov	r19,r2
100034f4:	00065d80 	call	100065d8 <__mulsi3>
100034f8:	b00b883a 	mov	r5,r22
100034fc:	9009883a 	mov	r4,r18
10003500:	1029883a 	mov	r20,r2
10003504:	00065d80 	call	100065d8 <__mulsi3>
10003508:	8806d43a 	srli	r3,r17,16
1000350c:	14c5883a 	add	r2,r2,r19
10003510:	d9c00017 	ldw	r7,0(sp)
10003514:	1885883a 	add	r2,r3,r2
10003518:	14c0022e 	bgeu	r2,r19,10003524 <__mulsf3+0x2d4>
1000351c:	00c00074 	movhi	r3,1
10003520:	a0e9883a 	add	r20,r20,r3
10003524:	1026943a 	slli	r19,r2,16
10003528:	8c7fffcc 	andi	r17,r17,65535
1000352c:	1004d43a 	srli	r2,r2,16
10003530:	9c63883a 	add	r17,r19,r17
10003534:	882691ba 	slli	r19,r17,6
10003538:	1505883a 	add	r2,r2,r20
1000353c:	8822d6ba 	srli	r17,r17,26
10003540:	100891ba 	slli	r4,r2,6
10003544:	9826c03a 	cmpne	r19,r19,zero
10003548:	9c62b03a 	or	r17,r19,r17
1000354c:	8926b03a 	or	r19,r17,r4
10003550:	9882002c 	andhi	r2,r19,2048
10003554:	10000426 	beq	r2,zero,10003568 <__mulsf3+0x318>
10003558:	9804d07a 	srli	r2,r19,1
1000355c:	9900004c 	andi	r4,r19,1
10003560:	3821883a 	mov	r16,r7
10003564:	1126b03a 	or	r19,r2,r4
10003568:	80c01fc4 	addi	r3,r16,127
1000356c:	00c0210e 	bge	zero,r3,100035f4 <__mulsf3+0x3a4>
10003570:	988001cc 	andi	r2,r19,7
10003574:	10000426 	beq	r2,zero,10003588 <__mulsf3+0x338>
10003578:	988003cc 	andi	r2,r19,15
1000357c:	01000104 	movi	r4,4
10003580:	11000126 	beq	r2,r4,10003588 <__mulsf3+0x338>
10003584:	9927883a 	add	r19,r19,r4
10003588:	9882002c 	andhi	r2,r19,2048
1000358c:	10000426 	beq	r2,zero,100035a0 <__mulsf3+0x350>
10003590:	00be0034 	movhi	r2,63488
10003594:	10bfffc4 	addi	r2,r2,-1
10003598:	80c02004 	addi	r3,r16,128
1000359c:	98a6703a 	and	r19,r19,r2
100035a0:	00803f84 	movi	r2,254
100035a4:	10ff9c16 	blt	r2,r3,10003418 <__alt_data_end+0xf8003418>
100035a8:	980891ba 	slli	r4,r19,6
100035ac:	a829883a 	mov	r20,r21
100035b0:	2008d27a 	srli	r4,r4,9
100035b4:	003f7906 	br	1000339c <__alt_data_end+0xf800339c>
100035b8:	9080102c 	andhi	r2,r18,64
100035bc:	10000826 	beq	r2,zero,100035e0 <__mulsf3+0x390>
100035c0:	9880102c 	andhi	r2,r19,64
100035c4:	1000061e 	bne	r2,zero,100035e0 <__mulsf3+0x390>
100035c8:	00802034 	movhi	r2,128
100035cc:	99001034 	orhi	r4,r19,64
100035d0:	10bfffc4 	addi	r2,r2,-1
100035d4:	b029883a 	mov	r20,r22
100035d8:	2088703a 	and	r4,r4,r2
100035dc:	003fad06 	br	10003494 <__alt_data_end+0xf8003494>
100035e0:	00802034 	movhi	r2,128
100035e4:	91001034 	orhi	r4,r18,64
100035e8:	10bfffc4 	addi	r2,r2,-1
100035ec:	2088703a 	and	r4,r4,r2
100035f0:	003fa806 	br	10003494 <__alt_data_end+0xf8003494>
100035f4:	00800044 	movi	r2,1
100035f8:	10c7c83a 	sub	r3,r2,r3
100035fc:	008006c4 	movi	r2,27
10003600:	10ff6316 	blt	r2,r3,10003390 <__alt_data_end+0xf8003390>
10003604:	00800804 	movi	r2,32
10003608:	10c5c83a 	sub	r2,r2,r3
1000360c:	9884983a 	sll	r2,r19,r2
10003610:	98c6d83a 	srl	r3,r19,r3
10003614:	1004c03a 	cmpne	r2,r2,zero
10003618:	1884b03a 	or	r2,r3,r2
1000361c:	10c001cc 	andi	r3,r2,7
10003620:	18000426 	beq	r3,zero,10003634 <__mulsf3+0x3e4>
10003624:	10c003cc 	andi	r3,r2,15
10003628:	01000104 	movi	r4,4
1000362c:	19000126 	beq	r3,r4,10003634 <__mulsf3+0x3e4>
10003630:	1105883a 	add	r2,r2,r4
10003634:	10c1002c 	andhi	r3,r2,1024
10003638:	18000626 	beq	r3,zero,10003654 <__mulsf3+0x404>
1000363c:	a829883a 	mov	r20,r21
10003640:	00c00044 	movi	r3,1
10003644:	0009883a 	mov	r4,zero
10003648:	003f5406 	br	1000339c <__alt_data_end+0xf800339c>
1000364c:	3821883a 	mov	r16,r7
10003650:	003fc506 	br	10003568 <__alt_data_end+0xf8003568>
10003654:	100491ba 	slli	r2,r2,6
10003658:	a829883a 	mov	r20,r21
1000365c:	0007883a 	mov	r3,zero
10003660:	1008d27a 	srli	r4,r2,9
10003664:	003f4d06 	br	1000339c <__alt_data_end+0xf800339c>
10003668:	00802034 	movhi	r2,128
1000366c:	99001034 	orhi	r4,r19,64
10003670:	10bfffc4 	addi	r2,r2,-1
10003674:	a829883a 	mov	r20,r21
10003678:	2088703a 	and	r4,r4,r2
1000367c:	003f8506 	br	10003494 <__alt_data_end+0xf8003494>

10003680 <__subsf3>:
10003680:	defffc04 	addi	sp,sp,-16
10003684:	280cd5fa 	srli	r6,r5,23
10003688:	dc000015 	stw	r16,0(sp)
1000368c:	01c02034 	movhi	r7,128
10003690:	2020d5fa 	srli	r16,r4,23
10003694:	39ffffc4 	addi	r7,r7,-1
10003698:	3906703a 	and	r3,r7,r4
1000369c:	dc400115 	stw	r17,4(sp)
100036a0:	394e703a 	and	r7,r7,r5
100036a4:	2022d7fa 	srli	r17,r4,31
100036a8:	dfc00315 	stw	ra,12(sp)
100036ac:	dc800215 	stw	r18,8(sp)
100036b0:	31803fcc 	andi	r6,r6,255
100036b4:	01003fc4 	movi	r4,255
100036b8:	84003fcc 	andi	r16,r16,255
100036bc:	180690fa 	slli	r3,r3,3
100036c0:	2804d7fa 	srli	r2,r5,31
100036c4:	380e90fa 	slli	r7,r7,3
100036c8:	31006d26 	beq	r6,r4,10003880 <__subsf3+0x200>
100036cc:	1080005c 	xori	r2,r2,1
100036d0:	8189c83a 	sub	r4,r16,r6
100036d4:	14404f26 	beq	r2,r17,10003814 <__subsf3+0x194>
100036d8:	0100770e 	bge	zero,r4,100038b8 <__subsf3+0x238>
100036dc:	30001e1e 	bne	r6,zero,10003758 <__subsf3+0xd8>
100036e0:	38006a1e 	bne	r7,zero,1000388c <__subsf3+0x20c>
100036e4:	188001cc 	andi	r2,r3,7
100036e8:	10000426 	beq	r2,zero,100036fc <__subsf3+0x7c>
100036ec:	188003cc 	andi	r2,r3,15
100036f0:	01000104 	movi	r4,4
100036f4:	11000126 	beq	r2,r4,100036fc <__subsf3+0x7c>
100036f8:	1907883a 	add	r3,r3,r4
100036fc:	1881002c 	andhi	r2,r3,1024
10003700:	10003926 	beq	r2,zero,100037e8 <__subsf3+0x168>
10003704:	84000044 	addi	r16,r16,1
10003708:	00803fc4 	movi	r2,255
1000370c:	80807526 	beq	r16,r2,100038e4 <__subsf3+0x264>
10003710:	180691ba 	slli	r3,r3,6
10003714:	8880004c 	andi	r2,r17,1
10003718:	180ad27a 	srli	r5,r3,9
1000371c:	84003fcc 	andi	r16,r16,255
10003720:	800695fa 	slli	r3,r16,23
10003724:	10803fcc 	andi	r2,r2,255
10003728:	01002034 	movhi	r4,128
1000372c:	213fffc4 	addi	r4,r4,-1
10003730:	100497fa 	slli	r2,r2,31
10003734:	2920703a 	and	r16,r5,r4
10003738:	80e0b03a 	or	r16,r16,r3
1000373c:	8084b03a 	or	r2,r16,r2
10003740:	dfc00317 	ldw	ra,12(sp)
10003744:	dc800217 	ldw	r18,8(sp)
10003748:	dc400117 	ldw	r17,4(sp)
1000374c:	dc000017 	ldw	r16,0(sp)
10003750:	dec00404 	addi	sp,sp,16
10003754:	f800283a 	ret
10003758:	00803fc4 	movi	r2,255
1000375c:	80bfe126 	beq	r16,r2,100036e4 <__alt_data_end+0xf80036e4>
10003760:	39c10034 	orhi	r7,r7,1024
10003764:	008006c4 	movi	r2,27
10003768:	11007416 	blt	r2,r4,1000393c <__subsf3+0x2bc>
1000376c:	00800804 	movi	r2,32
10003770:	1105c83a 	sub	r2,r2,r4
10003774:	3884983a 	sll	r2,r7,r2
10003778:	390ed83a 	srl	r7,r7,r4
1000377c:	1008c03a 	cmpne	r4,r2,zero
10003780:	390eb03a 	or	r7,r7,r4
10003784:	19c7c83a 	sub	r3,r3,r7
10003788:	1881002c 	andhi	r2,r3,1024
1000378c:	10001426 	beq	r2,zero,100037e0 <__subsf3+0x160>
10003790:	04810034 	movhi	r18,1024
10003794:	94bfffc4 	addi	r18,r18,-1
10003798:	1ca4703a 	and	r18,r3,r18
1000379c:	9009883a 	mov	r4,r18
100037a0:	00065740 	call	10006574 <__clzsi2>
100037a4:	10bffec4 	addi	r2,r2,-5
100037a8:	90a4983a 	sll	r18,r18,r2
100037ac:	14005116 	blt	r2,r16,100038f4 <__subsf3+0x274>
100037b0:	1405c83a 	sub	r2,r2,r16
100037b4:	10c00044 	addi	r3,r2,1
100037b8:	00800804 	movi	r2,32
100037bc:	10c5c83a 	sub	r2,r2,r3
100037c0:	9084983a 	sll	r2,r18,r2
100037c4:	90e4d83a 	srl	r18,r18,r3
100037c8:	0021883a 	mov	r16,zero
100037cc:	1006c03a 	cmpne	r3,r2,zero
100037d0:	90c6b03a 	or	r3,r18,r3
100037d4:	003fc306 	br	100036e4 <__alt_data_end+0xf80036e4>
100037d8:	2000e026 	beq	r4,zero,10003b5c <__subsf3+0x4dc>
100037dc:	2007883a 	mov	r3,r4
100037e0:	188001cc 	andi	r2,r3,7
100037e4:	103fc11e 	bne	r2,zero,100036ec <__alt_data_end+0xf80036ec>
100037e8:	180ad0fa 	srli	r5,r3,3
100037ec:	00c03fc4 	movi	r3,255
100037f0:	8880004c 	andi	r2,r17,1
100037f4:	80c0031e 	bne	r16,r3,10003804 <__subsf3+0x184>
100037f8:	28006d26 	beq	r5,zero,100039b0 <__subsf3+0x330>
100037fc:	29401034 	orhi	r5,r5,64
10003800:	043fffc4 	movi	r16,-1
10003804:	00c02034 	movhi	r3,128
10003808:	18ffffc4 	addi	r3,r3,-1
1000380c:	28ca703a 	and	r5,r5,r3
10003810:	003fc206 	br	1000371c <__alt_data_end+0xf800371c>
10003814:	01003c0e 	bge	zero,r4,10003908 <__subsf3+0x288>
10003818:	30002126 	beq	r6,zero,100038a0 <__subsf3+0x220>
1000381c:	01403fc4 	movi	r5,255
10003820:	817fb026 	beq	r16,r5,100036e4 <__alt_data_end+0xf80036e4>
10003824:	39c10034 	orhi	r7,r7,1024
10003828:	014006c4 	movi	r5,27
1000382c:	29007416 	blt	r5,r4,10003a00 <__subsf3+0x380>
10003830:	01400804 	movi	r5,32
10003834:	290bc83a 	sub	r5,r5,r4
10003838:	394a983a 	sll	r5,r7,r5
1000383c:	390ed83a 	srl	r7,r7,r4
10003840:	2808c03a 	cmpne	r4,r5,zero
10003844:	390eb03a 	or	r7,r7,r4
10003848:	19c7883a 	add	r3,r3,r7
1000384c:	1901002c 	andhi	r4,r3,1024
10003850:	20003826 	beq	r4,zero,10003934 <__subsf3+0x2b4>
10003854:	84000044 	addi	r16,r16,1
10003858:	01003fc4 	movi	r4,255
1000385c:	81005426 	beq	r16,r4,100039b0 <__subsf3+0x330>
10003860:	1023883a 	mov	r17,r2
10003864:	00bf0034 	movhi	r2,64512
10003868:	10bfffc4 	addi	r2,r2,-1
1000386c:	1900004c 	andi	r4,r3,1
10003870:	1886703a 	and	r3,r3,r2
10003874:	1806d07a 	srli	r3,r3,1
10003878:	1906b03a 	or	r3,r3,r4
1000387c:	003f9906 	br	100036e4 <__alt_data_end+0xf80036e4>
10003880:	383f9226 	beq	r7,zero,100036cc <__alt_data_end+0xf80036cc>
10003884:	10803fcc 	andi	r2,r2,255
10003888:	003f9106 	br	100036d0 <__alt_data_end+0xf80036d0>
1000388c:	213fffc4 	addi	r4,r4,-1
10003890:	203fbc26 	beq	r4,zero,10003784 <__alt_data_end+0xf8003784>
10003894:	00803fc4 	movi	r2,255
10003898:	80bfb21e 	bne	r16,r2,10003764 <__alt_data_end+0xf8003764>
1000389c:	003f9106 	br	100036e4 <__alt_data_end+0xf80036e4>
100038a0:	383f9026 	beq	r7,zero,100036e4 <__alt_data_end+0xf80036e4>
100038a4:	213fffc4 	addi	r4,r4,-1
100038a8:	203fe726 	beq	r4,zero,10003848 <__alt_data_end+0xf8003848>
100038ac:	01403fc4 	movi	r5,255
100038b0:	817fdd1e 	bne	r16,r5,10003828 <__alt_data_end+0xf8003828>
100038b4:	003f8b06 	br	100036e4 <__alt_data_end+0xf80036e4>
100038b8:	2000221e 	bne	r4,zero,10003944 <__subsf3+0x2c4>
100038bc:	81000044 	addi	r4,r16,1
100038c0:	21003fcc 	andi	r4,r4,255
100038c4:	01400044 	movi	r5,1
100038c8:	2900470e 	bge	r5,r4,100039e8 <__subsf3+0x368>
100038cc:	19e5c83a 	sub	r18,r3,r7
100038d0:	9141002c 	andhi	r5,r18,1024
100038d4:	28002d26 	beq	r5,zero,1000398c <__subsf3+0x30c>
100038d8:	38e5c83a 	sub	r18,r7,r3
100038dc:	1023883a 	mov	r17,r2
100038e0:	003fae06 	br	1000379c <__alt_data_end+0xf800379c>
100038e4:	8880004c 	andi	r2,r17,1
100038e8:	043fffc4 	movi	r16,-1
100038ec:	000b883a 	mov	r5,zero
100038f0:	003f8a06 	br	1000371c <__alt_data_end+0xf800371c>
100038f4:	00ff0034 	movhi	r3,64512
100038f8:	18ffffc4 	addi	r3,r3,-1
100038fc:	80a1c83a 	sub	r16,r16,r2
10003900:	90c6703a 	and	r3,r18,r3
10003904:	003f7706 	br	100036e4 <__alt_data_end+0xf80036e4>
10003908:	2000431e 	bne	r4,zero,10003a18 <__subsf3+0x398>
1000390c:	81000044 	addi	r4,r16,1
10003910:	21803fcc 	andi	r6,r4,255
10003914:	01400044 	movi	r5,1
10003918:	2980280e 	bge	r5,r6,100039bc <__subsf3+0x33c>
1000391c:	01403fc4 	movi	r5,255
10003920:	21402326 	beq	r4,r5,100039b0 <__subsf3+0x330>
10003924:	19c7883a 	add	r3,r3,r7
10003928:	1806d07a 	srli	r3,r3,1
1000392c:	2021883a 	mov	r16,r4
10003930:	003f6c06 	br	100036e4 <__alt_data_end+0xf80036e4>
10003934:	1023883a 	mov	r17,r2
10003938:	003fa906 	br	100037e0 <__alt_data_end+0xf80037e0>
1000393c:	01c00044 	movi	r7,1
10003940:	003f9006 	br	10003784 <__alt_data_end+0xf8003784>
10003944:	8000151e 	bne	r16,zero,1000399c <__subsf3+0x31c>
10003948:	18002f26 	beq	r3,zero,10003a08 <__subsf3+0x388>
1000394c:	0108303a 	nor	r4,zero,r4
10003950:	20000a26 	beq	r4,zero,1000397c <__subsf3+0x2fc>
10003954:	01403fc4 	movi	r5,255
10003958:	31402b26 	beq	r6,r5,10003a08 <__subsf3+0x388>
1000395c:	014006c4 	movi	r5,27
10003960:	29006e16 	blt	r5,r4,10003b1c <__subsf3+0x49c>
10003964:	01400804 	movi	r5,32
10003968:	290bc83a 	sub	r5,r5,r4
1000396c:	194a983a 	sll	r5,r3,r5
10003970:	1908d83a 	srl	r4,r3,r4
10003974:	2806c03a 	cmpne	r3,r5,zero
10003978:	20c6b03a 	or	r3,r4,r3
1000397c:	38c7c83a 	sub	r3,r7,r3
10003980:	3021883a 	mov	r16,r6
10003984:	1023883a 	mov	r17,r2
10003988:	003f7f06 	br	10003788 <__alt_data_end+0xf8003788>
1000398c:	903f831e 	bne	r18,zero,1000379c <__alt_data_end+0xf800379c>
10003990:	0005883a 	mov	r2,zero
10003994:	0021883a 	mov	r16,zero
10003998:	003f9a06 	br	10003804 <__alt_data_end+0xf8003804>
1000399c:	01403fc4 	movi	r5,255
100039a0:	31401926 	beq	r6,r5,10003a08 <__subsf3+0x388>
100039a4:	0109c83a 	sub	r4,zero,r4
100039a8:	18c10034 	orhi	r3,r3,1024
100039ac:	003feb06 	br	1000395c <__alt_data_end+0xf800395c>
100039b0:	043fffc4 	movi	r16,-1
100039b4:	000b883a 	mov	r5,zero
100039b8:	003f5806 	br	1000371c <__alt_data_end+0xf800371c>
100039bc:	8000481e 	bne	r16,zero,10003ae0 <__subsf3+0x460>
100039c0:	18006226 	beq	r3,zero,10003b4c <__subsf3+0x4cc>
100039c4:	383f4726 	beq	r7,zero,100036e4 <__alt_data_end+0xf80036e4>
100039c8:	19c7883a 	add	r3,r3,r7
100039cc:	1881002c 	andhi	r2,r3,1024
100039d0:	103f8326 	beq	r2,zero,100037e0 <__alt_data_end+0xf80037e0>
100039d4:	00bf0034 	movhi	r2,64512
100039d8:	10bfffc4 	addi	r2,r2,-1
100039dc:	2821883a 	mov	r16,r5
100039e0:	1886703a 	and	r3,r3,r2
100039e4:	003f3f06 	br	100036e4 <__alt_data_end+0xf80036e4>
100039e8:	80001c1e 	bne	r16,zero,10003a5c <__subsf3+0x3dc>
100039ec:	1800261e 	bne	r3,zero,10003a88 <__subsf3+0x408>
100039f0:	38004c26 	beq	r7,zero,10003b24 <__subsf3+0x4a4>
100039f4:	3807883a 	mov	r3,r7
100039f8:	1023883a 	mov	r17,r2
100039fc:	003f3906 	br	100036e4 <__alt_data_end+0xf80036e4>
10003a00:	01c00044 	movi	r7,1
10003a04:	003f9006 	br	10003848 <__alt_data_end+0xf8003848>
10003a08:	3807883a 	mov	r3,r7
10003a0c:	3021883a 	mov	r16,r6
10003a10:	1023883a 	mov	r17,r2
10003a14:	003f3306 	br	100036e4 <__alt_data_end+0xf80036e4>
10003a18:	8000161e 	bne	r16,zero,10003a74 <__subsf3+0x3f4>
10003a1c:	18002d26 	beq	r3,zero,10003ad4 <__subsf3+0x454>
10003a20:	0108303a 	nor	r4,zero,r4
10003a24:	20000a26 	beq	r4,zero,10003a50 <__subsf3+0x3d0>
10003a28:	01403fc4 	movi	r5,255
10003a2c:	31402926 	beq	r6,r5,10003ad4 <__subsf3+0x454>
10003a30:	014006c4 	movi	r5,27
10003a34:	29004716 	blt	r5,r4,10003b54 <__subsf3+0x4d4>
10003a38:	01400804 	movi	r5,32
10003a3c:	290bc83a 	sub	r5,r5,r4
10003a40:	194a983a 	sll	r5,r3,r5
10003a44:	1908d83a 	srl	r4,r3,r4
10003a48:	2806c03a 	cmpne	r3,r5,zero
10003a4c:	20c6b03a 	or	r3,r4,r3
10003a50:	19c7883a 	add	r3,r3,r7
10003a54:	3021883a 	mov	r16,r6
10003a58:	003f7c06 	br	1000384c <__alt_data_end+0xf800384c>
10003a5c:	1800111e 	bne	r3,zero,10003aa4 <__subsf3+0x424>
10003a60:	38003326 	beq	r7,zero,10003b30 <__subsf3+0x4b0>
10003a64:	3807883a 	mov	r3,r7
10003a68:	1023883a 	mov	r17,r2
10003a6c:	04003fc4 	movi	r16,255
10003a70:	003f1c06 	br	100036e4 <__alt_data_end+0xf80036e4>
10003a74:	01403fc4 	movi	r5,255
10003a78:	31401626 	beq	r6,r5,10003ad4 <__subsf3+0x454>
10003a7c:	0109c83a 	sub	r4,zero,r4
10003a80:	18c10034 	orhi	r3,r3,1024
10003a84:	003fea06 	br	10003a30 <__alt_data_end+0xf8003a30>
10003a88:	383f1626 	beq	r7,zero,100036e4 <__alt_data_end+0xf80036e4>
10003a8c:	19c9c83a 	sub	r4,r3,r7
10003a90:	2141002c 	andhi	r5,r4,1024
10003a94:	283f5026 	beq	r5,zero,100037d8 <__alt_data_end+0xf80037d8>
10003a98:	38c7c83a 	sub	r3,r7,r3
10003a9c:	1023883a 	mov	r17,r2
10003aa0:	003f1006 	br	100036e4 <__alt_data_end+0xf80036e4>
10003aa4:	38001b26 	beq	r7,zero,10003b14 <__subsf3+0x494>
10003aa8:	1806d0fa 	srli	r3,r3,3
10003aac:	1900102c 	andhi	r4,r3,64
10003ab0:	20000526 	beq	r4,zero,10003ac8 <__subsf3+0x448>
10003ab4:	380ed0fa 	srli	r7,r7,3
10003ab8:	3900102c 	andhi	r4,r7,64
10003abc:	2000021e 	bne	r4,zero,10003ac8 <__subsf3+0x448>
10003ac0:	3807883a 	mov	r3,r7
10003ac4:	1023883a 	mov	r17,r2
10003ac8:	180690fa 	slli	r3,r3,3
10003acc:	04003fc4 	movi	r16,255
10003ad0:	003f0406 	br	100036e4 <__alt_data_end+0xf80036e4>
10003ad4:	3807883a 	mov	r3,r7
10003ad8:	3021883a 	mov	r16,r6
10003adc:	003f0106 	br	100036e4 <__alt_data_end+0xf80036e4>
10003ae0:	18001726 	beq	r3,zero,10003b40 <__subsf3+0x4c0>
10003ae4:	38000b26 	beq	r7,zero,10003b14 <__subsf3+0x494>
10003ae8:	1806d0fa 	srli	r3,r3,3
10003aec:	1900102c 	andhi	r4,r3,64
10003af0:	20000426 	beq	r4,zero,10003b04 <__subsf3+0x484>
10003af4:	380ed0fa 	srli	r7,r7,3
10003af8:	3900102c 	andhi	r4,r7,64
10003afc:	2000011e 	bne	r4,zero,10003b04 <__subsf3+0x484>
10003b00:	3807883a 	mov	r3,r7
10003b04:	180690fa 	slli	r3,r3,3
10003b08:	1023883a 	mov	r17,r2
10003b0c:	04003fc4 	movi	r16,255
10003b10:	003ef406 	br	100036e4 <__alt_data_end+0xf80036e4>
10003b14:	04003fc4 	movi	r16,255
10003b18:	003ef206 	br	100036e4 <__alt_data_end+0xf80036e4>
10003b1c:	00c00044 	movi	r3,1
10003b20:	003f9606 	br	1000397c <__alt_data_end+0xf800397c>
10003b24:	000b883a 	mov	r5,zero
10003b28:	0005883a 	mov	r2,zero
10003b2c:	003f3506 	br	10003804 <__alt_data_end+0xf8003804>
10003b30:	01402034 	movhi	r5,128
10003b34:	297fffc4 	addi	r5,r5,-1
10003b38:	0005883a 	mov	r2,zero
10003b3c:	003f2f06 	br	100037fc <__alt_data_end+0xf80037fc>
10003b40:	3807883a 	mov	r3,r7
10003b44:	04003fc4 	movi	r16,255
10003b48:	003ee606 	br	100036e4 <__alt_data_end+0xf80036e4>
10003b4c:	3807883a 	mov	r3,r7
10003b50:	003ee406 	br	100036e4 <__alt_data_end+0xf80036e4>
10003b54:	00c00044 	movi	r3,1
10003b58:	003fbd06 	br	10003a50 <__alt_data_end+0xf8003a50>
10003b5c:	0005883a 	mov	r2,zero
10003b60:	003f2806 	br	10003804 <__alt_data_end+0xf8003804>

10003b64 <__fixsfsi>:
10003b64:	200ad5fa 	srli	r5,r4,23
10003b68:	00c02034 	movhi	r3,128
10003b6c:	18ffffc4 	addi	r3,r3,-1
10003b70:	29403fcc 	andi	r5,r5,255
10003b74:	00801f84 	movi	r2,126
10003b78:	1906703a 	and	r3,r3,r4
10003b7c:	2008d7fa 	srli	r4,r4,31
10003b80:	11400e0e 	bge	r2,r5,10003bbc <__fixsfsi+0x58>
10003b84:	00802744 	movi	r2,157
10003b88:	11400816 	blt	r2,r5,10003bac <__fixsfsi+0x48>
10003b8c:	00802544 	movi	r2,149
10003b90:	18c02034 	orhi	r3,r3,128
10003b94:	11400b0e 	bge	r2,r5,10003bc4 <__fixsfsi+0x60>
10003b98:	28bfda84 	addi	r2,r5,-150
10003b9c:	1884983a 	sll	r2,r3,r2
10003ba0:	20000726 	beq	r4,zero,10003bc0 <__fixsfsi+0x5c>
10003ba4:	0085c83a 	sub	r2,zero,r2
10003ba8:	f800283a 	ret
10003bac:	00a00034 	movhi	r2,32768
10003bb0:	10bfffc4 	addi	r2,r2,-1
10003bb4:	2085883a 	add	r2,r4,r2
10003bb8:	f800283a 	ret
10003bbc:	0005883a 	mov	r2,zero
10003bc0:	f800283a 	ret
10003bc4:	00802584 	movi	r2,150
10003bc8:	1145c83a 	sub	r2,r2,r5
10003bcc:	1884d83a 	srl	r2,r3,r2
10003bd0:	003ff306 	br	10003ba0 <__alt_data_end+0xf8003ba0>

10003bd4 <__floatsisf>:
10003bd4:	defffd04 	addi	sp,sp,-12
10003bd8:	dfc00215 	stw	ra,8(sp)
10003bdc:	dc400115 	stw	r17,4(sp)
10003be0:	dc000015 	stw	r16,0(sp)
10003be4:	20003526 	beq	r4,zero,10003cbc <__floatsisf+0xe8>
10003be8:	2021883a 	mov	r16,r4
10003bec:	2022d7fa 	srli	r17,r4,31
10003bf0:	20003616 	blt	r4,zero,10003ccc <__floatsisf+0xf8>
10003bf4:	8009883a 	mov	r4,r16
10003bf8:	00065740 	call	10006574 <__clzsi2>
10003bfc:	00c02784 	movi	r3,158
10003c00:	1887c83a 	sub	r3,r3,r2
10003c04:	01002584 	movi	r4,150
10003c08:	20c01416 	blt	r4,r3,10003c5c <__floatsisf+0x88>
10003c0c:	20c9c83a 	sub	r4,r4,r3
10003c10:	8120983a 	sll	r16,r16,r4
10003c14:	00802034 	movhi	r2,128
10003c18:	10bfffc4 	addi	r2,r2,-1
10003c1c:	8809883a 	mov	r4,r17
10003c20:	80a0703a 	and	r16,r16,r2
10003c24:	18803fcc 	andi	r2,r3,255
10003c28:	100695fa 	slli	r3,r2,23
10003c2c:	20803fcc 	andi	r2,r4,255
10003c30:	100897fa 	slli	r4,r2,31
10003c34:	00802034 	movhi	r2,128
10003c38:	10bfffc4 	addi	r2,r2,-1
10003c3c:	8084703a 	and	r2,r16,r2
10003c40:	10c4b03a 	or	r2,r2,r3
10003c44:	1104b03a 	or	r2,r2,r4
10003c48:	dfc00217 	ldw	ra,8(sp)
10003c4c:	dc400117 	ldw	r17,4(sp)
10003c50:	dc000017 	ldw	r16,0(sp)
10003c54:	dec00304 	addi	sp,sp,12
10003c58:	f800283a 	ret
10003c5c:	01002644 	movi	r4,153
10003c60:	20c01c16 	blt	r4,r3,10003cd4 <__floatsisf+0x100>
10003c64:	20c9c83a 	sub	r4,r4,r3
10003c68:	8120983a 	sll	r16,r16,r4
10003c6c:	013f0034 	movhi	r4,64512
10003c70:	213fffc4 	addi	r4,r4,-1
10003c74:	814001cc 	andi	r5,r16,7
10003c78:	8108703a 	and	r4,r16,r4
10003c7c:	28000426 	beq	r5,zero,10003c90 <__floatsisf+0xbc>
10003c80:	840003cc 	andi	r16,r16,15
10003c84:	01400104 	movi	r5,4
10003c88:	81400126 	beq	r16,r5,10003c90 <__floatsisf+0xbc>
10003c8c:	2149883a 	add	r4,r4,r5
10003c90:	2141002c 	andhi	r5,r4,1024
10003c94:	28000526 	beq	r5,zero,10003cac <__floatsisf+0xd8>
10003c98:	00c027c4 	movi	r3,159
10003c9c:	1887c83a 	sub	r3,r3,r2
10003ca0:	00bf0034 	movhi	r2,64512
10003ca4:	10bfffc4 	addi	r2,r2,-1
10003ca8:	2088703a 	and	r4,r4,r2
10003cac:	202091ba 	slli	r16,r4,6
10003cb0:	8809883a 	mov	r4,r17
10003cb4:	8020d27a 	srli	r16,r16,9
10003cb8:	003fda06 	br	10003c24 <__alt_data_end+0xf8003c24>
10003cbc:	0009883a 	mov	r4,zero
10003cc0:	0007883a 	mov	r3,zero
10003cc4:	0021883a 	mov	r16,zero
10003cc8:	003fd606 	br	10003c24 <__alt_data_end+0xf8003c24>
10003ccc:	0121c83a 	sub	r16,zero,r4
10003cd0:	003fc806 	br	10003bf4 <__alt_data_end+0xf8003bf4>
10003cd4:	01002e44 	movi	r4,185
10003cd8:	20c9c83a 	sub	r4,r4,r3
10003cdc:	01400144 	movi	r5,5
10003ce0:	8108983a 	sll	r4,r16,r4
10003ce4:	288bc83a 	sub	r5,r5,r2
10003ce8:	8160d83a 	srl	r16,r16,r5
10003cec:	2008c03a 	cmpne	r4,r4,zero
10003cf0:	8120b03a 	or	r16,r16,r4
10003cf4:	003fdd06 	br	10003c6c <__alt_data_end+0xf8003c6c>

10003cf8 <__floatunsisf>:
10003cf8:	defffe04 	addi	sp,sp,-8
10003cfc:	dfc00115 	stw	ra,4(sp)
10003d00:	dc000015 	stw	r16,0(sp)
10003d04:	20002c26 	beq	r4,zero,10003db8 <__floatunsisf+0xc0>
10003d08:	2021883a 	mov	r16,r4
10003d0c:	00065740 	call	10006574 <__clzsi2>
10003d10:	00c02784 	movi	r3,158
10003d14:	1887c83a 	sub	r3,r3,r2
10003d18:	01002584 	movi	r4,150
10003d1c:	20c00f16 	blt	r4,r3,10003d5c <__floatunsisf+0x64>
10003d20:	20c9c83a 	sub	r4,r4,r3
10003d24:	8108983a 	sll	r4,r16,r4
10003d28:	00802034 	movhi	r2,128
10003d2c:	10bfffc4 	addi	r2,r2,-1
10003d30:	2088703a 	and	r4,r4,r2
10003d34:	18803fcc 	andi	r2,r3,255
10003d38:	100695fa 	slli	r3,r2,23
10003d3c:	00802034 	movhi	r2,128
10003d40:	10bfffc4 	addi	r2,r2,-1
10003d44:	2084703a 	and	r2,r4,r2
10003d48:	10c4b03a 	or	r2,r2,r3
10003d4c:	dfc00117 	ldw	ra,4(sp)
10003d50:	dc000017 	ldw	r16,0(sp)
10003d54:	dec00204 	addi	sp,sp,8
10003d58:	f800283a 	ret
10003d5c:	01002644 	movi	r4,153
10003d60:	20c01816 	blt	r4,r3,10003dc4 <__floatunsisf+0xcc>
10003d64:	20c9c83a 	sub	r4,r4,r3
10003d68:	8108983a 	sll	r4,r16,r4
10003d6c:	017f0034 	movhi	r5,64512
10003d70:	297fffc4 	addi	r5,r5,-1
10003d74:	218001cc 	andi	r6,r4,7
10003d78:	214a703a 	and	r5,r4,r5
10003d7c:	30000426 	beq	r6,zero,10003d90 <__floatunsisf+0x98>
10003d80:	210003cc 	andi	r4,r4,15
10003d84:	01800104 	movi	r6,4
10003d88:	21800126 	beq	r4,r6,10003d90 <__floatunsisf+0x98>
10003d8c:	298b883a 	add	r5,r5,r6
10003d90:	2901002c 	andhi	r4,r5,1024
10003d94:	20000526 	beq	r4,zero,10003dac <__floatunsisf+0xb4>
10003d98:	00c027c4 	movi	r3,159
10003d9c:	1887c83a 	sub	r3,r3,r2
10003da0:	00bf0034 	movhi	r2,64512
10003da4:	10bfffc4 	addi	r2,r2,-1
10003da8:	288a703a 	and	r5,r5,r2
10003dac:	280891ba 	slli	r4,r5,6
10003db0:	2008d27a 	srli	r4,r4,9
10003db4:	003fdf06 	br	10003d34 <__alt_data_end+0xf8003d34>
10003db8:	0007883a 	mov	r3,zero
10003dbc:	0009883a 	mov	r4,zero
10003dc0:	003fdc06 	br	10003d34 <__alt_data_end+0xf8003d34>
10003dc4:	01402e44 	movi	r5,185
10003dc8:	28cbc83a 	sub	r5,r5,r3
10003dcc:	01000144 	movi	r4,5
10003dd0:	2089c83a 	sub	r4,r4,r2
10003dd4:	814a983a 	sll	r5,r16,r5
10003dd8:	8108d83a 	srl	r4,r16,r4
10003ddc:	2820c03a 	cmpne	r16,r5,zero
10003de0:	2408b03a 	or	r4,r4,r16
10003de4:	003fe106 	br	10003d6c <__alt_data_end+0xf8003d6c>

10003de8 <__adddf3>:
10003de8:	02c00434 	movhi	r11,16
10003dec:	5affffc4 	addi	r11,r11,-1
10003df0:	2806d7fa 	srli	r3,r5,31
10003df4:	2ad4703a 	and	r10,r5,r11
10003df8:	3ad2703a 	and	r9,r7,r11
10003dfc:	3804d53a 	srli	r2,r7,20
10003e00:	3018d77a 	srli	r12,r6,29
10003e04:	280ad53a 	srli	r5,r5,20
10003e08:	501490fa 	slli	r10,r10,3
10003e0c:	2010d77a 	srli	r8,r4,29
10003e10:	481290fa 	slli	r9,r9,3
10003e14:	380ed7fa 	srli	r7,r7,31
10003e18:	defffb04 	addi	sp,sp,-20
10003e1c:	dc800215 	stw	r18,8(sp)
10003e20:	dc400115 	stw	r17,4(sp)
10003e24:	dc000015 	stw	r16,0(sp)
10003e28:	dfc00415 	stw	ra,16(sp)
10003e2c:	dcc00315 	stw	r19,12(sp)
10003e30:	1c803fcc 	andi	r18,r3,255
10003e34:	2c01ffcc 	andi	r16,r5,2047
10003e38:	5210b03a 	or	r8,r10,r8
10003e3c:	202290fa 	slli	r17,r4,3
10003e40:	1081ffcc 	andi	r2,r2,2047
10003e44:	4b12b03a 	or	r9,r9,r12
10003e48:	300c90fa 	slli	r6,r6,3
10003e4c:	91c07526 	beq	r18,r7,10004024 <__adddf3+0x23c>
10003e50:	8087c83a 	sub	r3,r16,r2
10003e54:	00c0ab0e 	bge	zero,r3,10004104 <__adddf3+0x31c>
10003e58:	10002a1e 	bne	r2,zero,10003f04 <__adddf3+0x11c>
10003e5c:	4984b03a 	or	r2,r9,r6
10003e60:	1000961e 	bne	r2,zero,100040bc <__adddf3+0x2d4>
10003e64:	888001cc 	andi	r2,r17,7
10003e68:	10000726 	beq	r2,zero,10003e88 <__adddf3+0xa0>
10003e6c:	888003cc 	andi	r2,r17,15
10003e70:	00c00104 	movi	r3,4
10003e74:	10c00426 	beq	r2,r3,10003e88 <__adddf3+0xa0>
10003e78:	88c7883a 	add	r3,r17,r3
10003e7c:	1c63803a 	cmpltu	r17,r3,r17
10003e80:	4451883a 	add	r8,r8,r17
10003e84:	1823883a 	mov	r17,r3
10003e88:	4080202c 	andhi	r2,r8,128
10003e8c:	10005926 	beq	r2,zero,10003ff4 <__adddf3+0x20c>
10003e90:	84000044 	addi	r16,r16,1
10003e94:	0081ffc4 	movi	r2,2047
10003e98:	8080ba26 	beq	r16,r2,10004184 <__adddf3+0x39c>
10003e9c:	00bfe034 	movhi	r2,65408
10003ea0:	10bfffc4 	addi	r2,r2,-1
10003ea4:	4090703a 	and	r8,r8,r2
10003ea8:	4004977a 	slli	r2,r8,29
10003eac:	4010927a 	slli	r8,r8,9
10003eb0:	8822d0fa 	srli	r17,r17,3
10003eb4:	8401ffcc 	andi	r16,r16,2047
10003eb8:	4010d33a 	srli	r8,r8,12
10003ebc:	9007883a 	mov	r3,r18
10003ec0:	1444b03a 	or	r2,r2,r17
10003ec4:	8401ffcc 	andi	r16,r16,2047
10003ec8:	8020953a 	slli	r16,r16,20
10003ecc:	18c03fcc 	andi	r3,r3,255
10003ed0:	01000434 	movhi	r4,16
10003ed4:	213fffc4 	addi	r4,r4,-1
10003ed8:	180697fa 	slli	r3,r3,31
10003edc:	4110703a 	and	r8,r8,r4
10003ee0:	4410b03a 	or	r8,r8,r16
10003ee4:	40c6b03a 	or	r3,r8,r3
10003ee8:	dfc00417 	ldw	ra,16(sp)
10003eec:	dcc00317 	ldw	r19,12(sp)
10003ef0:	dc800217 	ldw	r18,8(sp)
10003ef4:	dc400117 	ldw	r17,4(sp)
10003ef8:	dc000017 	ldw	r16,0(sp)
10003efc:	dec00504 	addi	sp,sp,20
10003f00:	f800283a 	ret
10003f04:	0081ffc4 	movi	r2,2047
10003f08:	80bfd626 	beq	r16,r2,10003e64 <__alt_data_end+0xf8003e64>
10003f0c:	4a402034 	orhi	r9,r9,128
10003f10:	00800e04 	movi	r2,56
10003f14:	10c09f16 	blt	r2,r3,10004194 <__adddf3+0x3ac>
10003f18:	008007c4 	movi	r2,31
10003f1c:	10c0c216 	blt	r2,r3,10004228 <__adddf3+0x440>
10003f20:	00800804 	movi	r2,32
10003f24:	10c5c83a 	sub	r2,r2,r3
10003f28:	488a983a 	sll	r5,r9,r2
10003f2c:	30c8d83a 	srl	r4,r6,r3
10003f30:	3084983a 	sll	r2,r6,r2
10003f34:	48c6d83a 	srl	r3,r9,r3
10003f38:	290cb03a 	or	r6,r5,r4
10003f3c:	1004c03a 	cmpne	r2,r2,zero
10003f40:	308cb03a 	or	r6,r6,r2
10003f44:	898dc83a 	sub	r6,r17,r6
10003f48:	89a3803a 	cmpltu	r17,r17,r6
10003f4c:	40d1c83a 	sub	r8,r8,r3
10003f50:	4451c83a 	sub	r8,r8,r17
10003f54:	3023883a 	mov	r17,r6
10003f58:	4080202c 	andhi	r2,r8,128
10003f5c:	10002326 	beq	r2,zero,10003fec <__adddf3+0x204>
10003f60:	04c02034 	movhi	r19,128
10003f64:	9cffffc4 	addi	r19,r19,-1
10003f68:	44e6703a 	and	r19,r8,r19
10003f6c:	98007626 	beq	r19,zero,10004148 <__adddf3+0x360>
10003f70:	9809883a 	mov	r4,r19
10003f74:	00065740 	call	10006574 <__clzsi2>
10003f78:	10fffe04 	addi	r3,r2,-8
10003f7c:	010007c4 	movi	r4,31
10003f80:	20c07716 	blt	r4,r3,10004160 <__adddf3+0x378>
10003f84:	00800804 	movi	r2,32
10003f88:	10c5c83a 	sub	r2,r2,r3
10003f8c:	8884d83a 	srl	r2,r17,r2
10003f90:	98d0983a 	sll	r8,r19,r3
10003f94:	88e2983a 	sll	r17,r17,r3
10003f98:	1204b03a 	or	r2,r2,r8
10003f9c:	1c007416 	blt	r3,r16,10004170 <__adddf3+0x388>
10003fa0:	1c21c83a 	sub	r16,r3,r16
10003fa4:	82000044 	addi	r8,r16,1
10003fa8:	00c007c4 	movi	r3,31
10003fac:	1a009116 	blt	r3,r8,100041f4 <__adddf3+0x40c>
10003fb0:	00c00804 	movi	r3,32
10003fb4:	1a07c83a 	sub	r3,r3,r8
10003fb8:	8a08d83a 	srl	r4,r17,r8
10003fbc:	88e2983a 	sll	r17,r17,r3
10003fc0:	10c6983a 	sll	r3,r2,r3
10003fc4:	1210d83a 	srl	r8,r2,r8
10003fc8:	8804c03a 	cmpne	r2,r17,zero
10003fcc:	1906b03a 	or	r3,r3,r4
10003fd0:	18a2b03a 	or	r17,r3,r2
10003fd4:	0021883a 	mov	r16,zero
10003fd8:	003fa206 	br	10003e64 <__alt_data_end+0xf8003e64>
10003fdc:	1890b03a 	or	r8,r3,r2
10003fe0:	40017d26 	beq	r8,zero,100045d8 <__adddf3+0x7f0>
10003fe4:	1011883a 	mov	r8,r2
10003fe8:	1823883a 	mov	r17,r3
10003fec:	888001cc 	andi	r2,r17,7
10003ff0:	103f9e1e 	bne	r2,zero,10003e6c <__alt_data_end+0xf8003e6c>
10003ff4:	4004977a 	slli	r2,r8,29
10003ff8:	8822d0fa 	srli	r17,r17,3
10003ffc:	4010d0fa 	srli	r8,r8,3
10004000:	9007883a 	mov	r3,r18
10004004:	1444b03a 	or	r2,r2,r17
10004008:	0101ffc4 	movi	r4,2047
1000400c:	81002426 	beq	r16,r4,100040a0 <__adddf3+0x2b8>
10004010:	8120703a 	and	r16,r16,r4
10004014:	01000434 	movhi	r4,16
10004018:	213fffc4 	addi	r4,r4,-1
1000401c:	4110703a 	and	r8,r8,r4
10004020:	003fa806 	br	10003ec4 <__alt_data_end+0xf8003ec4>
10004024:	8089c83a 	sub	r4,r16,r2
10004028:	01005e0e 	bge	zero,r4,100041a4 <__adddf3+0x3bc>
1000402c:	10002b26 	beq	r2,zero,100040dc <__adddf3+0x2f4>
10004030:	0081ffc4 	movi	r2,2047
10004034:	80bf8b26 	beq	r16,r2,10003e64 <__alt_data_end+0xf8003e64>
10004038:	4a402034 	orhi	r9,r9,128
1000403c:	00800e04 	movi	r2,56
10004040:	1100a40e 	bge	r2,r4,100042d4 <__adddf3+0x4ec>
10004044:	498cb03a 	or	r6,r9,r6
10004048:	300ac03a 	cmpne	r5,r6,zero
1000404c:	0013883a 	mov	r9,zero
10004050:	2c4b883a 	add	r5,r5,r17
10004054:	2c63803a 	cmpltu	r17,r5,r17
10004058:	4a11883a 	add	r8,r9,r8
1000405c:	8a11883a 	add	r8,r17,r8
10004060:	2823883a 	mov	r17,r5
10004064:	4080202c 	andhi	r2,r8,128
10004068:	103fe026 	beq	r2,zero,10003fec <__alt_data_end+0xf8003fec>
1000406c:	84000044 	addi	r16,r16,1
10004070:	0081ffc4 	movi	r2,2047
10004074:	8080d226 	beq	r16,r2,100043c0 <__adddf3+0x5d8>
10004078:	00bfe034 	movhi	r2,65408
1000407c:	10bfffc4 	addi	r2,r2,-1
10004080:	4090703a 	and	r8,r8,r2
10004084:	880ad07a 	srli	r5,r17,1
10004088:	400897fa 	slli	r4,r8,31
1000408c:	88c0004c 	andi	r3,r17,1
10004090:	28e2b03a 	or	r17,r5,r3
10004094:	4010d07a 	srli	r8,r8,1
10004098:	2462b03a 	or	r17,r4,r17
1000409c:	003f7106 	br	10003e64 <__alt_data_end+0xf8003e64>
100040a0:	4088b03a 	or	r4,r8,r2
100040a4:	20014526 	beq	r4,zero,100045bc <__adddf3+0x7d4>
100040a8:	01000434 	movhi	r4,16
100040ac:	42000234 	orhi	r8,r8,8
100040b0:	213fffc4 	addi	r4,r4,-1
100040b4:	4110703a 	and	r8,r8,r4
100040b8:	003f8206 	br	10003ec4 <__alt_data_end+0xf8003ec4>
100040bc:	18ffffc4 	addi	r3,r3,-1
100040c0:	1800491e 	bne	r3,zero,100041e8 <__adddf3+0x400>
100040c4:	898bc83a 	sub	r5,r17,r6
100040c8:	8963803a 	cmpltu	r17,r17,r5
100040cc:	4251c83a 	sub	r8,r8,r9
100040d0:	4451c83a 	sub	r8,r8,r17
100040d4:	2823883a 	mov	r17,r5
100040d8:	003f9f06 	br	10003f58 <__alt_data_end+0xf8003f58>
100040dc:	4984b03a 	or	r2,r9,r6
100040e0:	103f6026 	beq	r2,zero,10003e64 <__alt_data_end+0xf8003e64>
100040e4:	213fffc4 	addi	r4,r4,-1
100040e8:	2000931e 	bne	r4,zero,10004338 <__adddf3+0x550>
100040ec:	898d883a 	add	r6,r17,r6
100040f0:	3463803a 	cmpltu	r17,r6,r17
100040f4:	4251883a 	add	r8,r8,r9
100040f8:	8a11883a 	add	r8,r17,r8
100040fc:	3023883a 	mov	r17,r6
10004100:	003fd806 	br	10004064 <__alt_data_end+0xf8004064>
10004104:	1800541e 	bne	r3,zero,10004258 <__adddf3+0x470>
10004108:	80800044 	addi	r2,r16,1
1000410c:	1081ffcc 	andi	r2,r2,2047
10004110:	00c00044 	movi	r3,1
10004114:	1880a00e 	bge	r3,r2,10004398 <__adddf3+0x5b0>
10004118:	8989c83a 	sub	r4,r17,r6
1000411c:	8905803a 	cmpltu	r2,r17,r4
10004120:	4267c83a 	sub	r19,r8,r9
10004124:	98a7c83a 	sub	r19,r19,r2
10004128:	9880202c 	andhi	r2,r19,128
1000412c:	10006326 	beq	r2,zero,100042bc <__adddf3+0x4d4>
10004130:	3463c83a 	sub	r17,r6,r17
10004134:	4a07c83a 	sub	r3,r9,r8
10004138:	344d803a 	cmpltu	r6,r6,r17
1000413c:	19a7c83a 	sub	r19,r3,r6
10004140:	3825883a 	mov	r18,r7
10004144:	983f8a1e 	bne	r19,zero,10003f70 <__alt_data_end+0xf8003f70>
10004148:	8809883a 	mov	r4,r17
1000414c:	00065740 	call	10006574 <__clzsi2>
10004150:	10800804 	addi	r2,r2,32
10004154:	10fffe04 	addi	r3,r2,-8
10004158:	010007c4 	movi	r4,31
1000415c:	20ff890e 	bge	r4,r3,10003f84 <__alt_data_end+0xf8003f84>
10004160:	10bff604 	addi	r2,r2,-40
10004164:	8884983a 	sll	r2,r17,r2
10004168:	0023883a 	mov	r17,zero
1000416c:	1c3f8c0e 	bge	r3,r16,10003fa0 <__alt_data_end+0xf8003fa0>
10004170:	023fe034 	movhi	r8,65408
10004174:	423fffc4 	addi	r8,r8,-1
10004178:	80e1c83a 	sub	r16,r16,r3
1000417c:	1210703a 	and	r8,r2,r8
10004180:	003f3806 	br	10003e64 <__alt_data_end+0xf8003e64>
10004184:	9007883a 	mov	r3,r18
10004188:	0011883a 	mov	r8,zero
1000418c:	0005883a 	mov	r2,zero
10004190:	003f4c06 	br	10003ec4 <__alt_data_end+0xf8003ec4>
10004194:	498cb03a 	or	r6,r9,r6
10004198:	300cc03a 	cmpne	r6,r6,zero
1000419c:	0007883a 	mov	r3,zero
100041a0:	003f6806 	br	10003f44 <__alt_data_end+0xf8003f44>
100041a4:	20009c1e 	bne	r4,zero,10004418 <__adddf3+0x630>
100041a8:	80800044 	addi	r2,r16,1
100041ac:	1141ffcc 	andi	r5,r2,2047
100041b0:	01000044 	movi	r4,1
100041b4:	2140670e 	bge	r4,r5,10004354 <__adddf3+0x56c>
100041b8:	0101ffc4 	movi	r4,2047
100041bc:	11007f26 	beq	r2,r4,100043bc <__adddf3+0x5d4>
100041c0:	898d883a 	add	r6,r17,r6
100041c4:	4247883a 	add	r3,r8,r9
100041c8:	3451803a 	cmpltu	r8,r6,r17
100041cc:	40d1883a 	add	r8,r8,r3
100041d0:	402297fa 	slli	r17,r8,31
100041d4:	300cd07a 	srli	r6,r6,1
100041d8:	4010d07a 	srli	r8,r8,1
100041dc:	1021883a 	mov	r16,r2
100041e0:	89a2b03a 	or	r17,r17,r6
100041e4:	003f1f06 	br	10003e64 <__alt_data_end+0xf8003e64>
100041e8:	0081ffc4 	movi	r2,2047
100041ec:	80bf481e 	bne	r16,r2,10003f10 <__alt_data_end+0xf8003f10>
100041f0:	003f1c06 	br	10003e64 <__alt_data_end+0xf8003e64>
100041f4:	843ff844 	addi	r16,r16,-31
100041f8:	01000804 	movi	r4,32
100041fc:	1406d83a 	srl	r3,r2,r16
10004200:	41005026 	beq	r8,r4,10004344 <__adddf3+0x55c>
10004204:	01001004 	movi	r4,64
10004208:	2211c83a 	sub	r8,r4,r8
1000420c:	1204983a 	sll	r2,r2,r8
10004210:	88a2b03a 	or	r17,r17,r2
10004214:	8822c03a 	cmpne	r17,r17,zero
10004218:	1c62b03a 	or	r17,r3,r17
1000421c:	0011883a 	mov	r8,zero
10004220:	0021883a 	mov	r16,zero
10004224:	003f7106 	br	10003fec <__alt_data_end+0xf8003fec>
10004228:	193ff804 	addi	r4,r3,-32
1000422c:	00800804 	movi	r2,32
10004230:	4908d83a 	srl	r4,r9,r4
10004234:	18804526 	beq	r3,r2,1000434c <__adddf3+0x564>
10004238:	00801004 	movi	r2,64
1000423c:	10c5c83a 	sub	r2,r2,r3
10004240:	4886983a 	sll	r3,r9,r2
10004244:	198cb03a 	or	r6,r3,r6
10004248:	300cc03a 	cmpne	r6,r6,zero
1000424c:	218cb03a 	or	r6,r4,r6
10004250:	0007883a 	mov	r3,zero
10004254:	003f3b06 	br	10003f44 <__alt_data_end+0xf8003f44>
10004258:	80002a26 	beq	r16,zero,10004304 <__adddf3+0x51c>
1000425c:	0101ffc4 	movi	r4,2047
10004260:	11006826 	beq	r2,r4,10004404 <__adddf3+0x61c>
10004264:	00c7c83a 	sub	r3,zero,r3
10004268:	42002034 	orhi	r8,r8,128
1000426c:	01000e04 	movi	r4,56
10004270:	20c07c16 	blt	r4,r3,10004464 <__adddf3+0x67c>
10004274:	010007c4 	movi	r4,31
10004278:	20c0da16 	blt	r4,r3,100045e4 <__adddf3+0x7fc>
1000427c:	01000804 	movi	r4,32
10004280:	20c9c83a 	sub	r4,r4,r3
10004284:	4114983a 	sll	r10,r8,r4
10004288:	88cad83a 	srl	r5,r17,r3
1000428c:	8908983a 	sll	r4,r17,r4
10004290:	40c6d83a 	srl	r3,r8,r3
10004294:	5162b03a 	or	r17,r10,r5
10004298:	2008c03a 	cmpne	r4,r4,zero
1000429c:	8922b03a 	or	r17,r17,r4
100042a0:	3463c83a 	sub	r17,r6,r17
100042a4:	48c7c83a 	sub	r3,r9,r3
100042a8:	344d803a 	cmpltu	r6,r6,r17
100042ac:	1991c83a 	sub	r8,r3,r6
100042b0:	1021883a 	mov	r16,r2
100042b4:	3825883a 	mov	r18,r7
100042b8:	003f2706 	br	10003f58 <__alt_data_end+0xf8003f58>
100042bc:	24d0b03a 	or	r8,r4,r19
100042c0:	40001b1e 	bne	r8,zero,10004330 <__adddf3+0x548>
100042c4:	0005883a 	mov	r2,zero
100042c8:	0007883a 	mov	r3,zero
100042cc:	0021883a 	mov	r16,zero
100042d0:	003f4d06 	br	10004008 <__alt_data_end+0xf8004008>
100042d4:	008007c4 	movi	r2,31
100042d8:	11003c16 	blt	r2,r4,100043cc <__adddf3+0x5e4>
100042dc:	00800804 	movi	r2,32
100042e0:	1105c83a 	sub	r2,r2,r4
100042e4:	488e983a 	sll	r7,r9,r2
100042e8:	310ad83a 	srl	r5,r6,r4
100042ec:	3084983a 	sll	r2,r6,r2
100042f0:	4912d83a 	srl	r9,r9,r4
100042f4:	394ab03a 	or	r5,r7,r5
100042f8:	1004c03a 	cmpne	r2,r2,zero
100042fc:	288ab03a 	or	r5,r5,r2
10004300:	003f5306 	br	10004050 <__alt_data_end+0xf8004050>
10004304:	4448b03a 	or	r4,r8,r17
10004308:	20003e26 	beq	r4,zero,10004404 <__adddf3+0x61c>
1000430c:	00c6303a 	nor	r3,zero,r3
10004310:	18003a1e 	bne	r3,zero,100043fc <__adddf3+0x614>
10004314:	3463c83a 	sub	r17,r6,r17
10004318:	4a07c83a 	sub	r3,r9,r8
1000431c:	344d803a 	cmpltu	r6,r6,r17
10004320:	1991c83a 	sub	r8,r3,r6
10004324:	1021883a 	mov	r16,r2
10004328:	3825883a 	mov	r18,r7
1000432c:	003f0a06 	br	10003f58 <__alt_data_end+0xf8003f58>
10004330:	2023883a 	mov	r17,r4
10004334:	003f0d06 	br	10003f6c <__alt_data_end+0xf8003f6c>
10004338:	0081ffc4 	movi	r2,2047
1000433c:	80bf3f1e 	bne	r16,r2,1000403c <__alt_data_end+0xf800403c>
10004340:	003ec806 	br	10003e64 <__alt_data_end+0xf8003e64>
10004344:	0005883a 	mov	r2,zero
10004348:	003fb106 	br	10004210 <__alt_data_end+0xf8004210>
1000434c:	0007883a 	mov	r3,zero
10004350:	003fbc06 	br	10004244 <__alt_data_end+0xf8004244>
10004354:	4444b03a 	or	r2,r8,r17
10004358:	8000871e 	bne	r16,zero,10004578 <__adddf3+0x790>
1000435c:	1000ba26 	beq	r2,zero,10004648 <__adddf3+0x860>
10004360:	4984b03a 	or	r2,r9,r6
10004364:	103ebf26 	beq	r2,zero,10003e64 <__alt_data_end+0xf8003e64>
10004368:	8985883a 	add	r2,r17,r6
1000436c:	4247883a 	add	r3,r8,r9
10004370:	1451803a 	cmpltu	r8,r2,r17
10004374:	40d1883a 	add	r8,r8,r3
10004378:	40c0202c 	andhi	r3,r8,128
1000437c:	1023883a 	mov	r17,r2
10004380:	183f1a26 	beq	r3,zero,10003fec <__alt_data_end+0xf8003fec>
10004384:	00bfe034 	movhi	r2,65408
10004388:	10bfffc4 	addi	r2,r2,-1
1000438c:	2021883a 	mov	r16,r4
10004390:	4090703a 	and	r8,r8,r2
10004394:	003eb306 	br	10003e64 <__alt_data_end+0xf8003e64>
10004398:	4444b03a 	or	r2,r8,r17
1000439c:	8000291e 	bne	r16,zero,10004444 <__adddf3+0x65c>
100043a0:	10004b1e 	bne	r2,zero,100044d0 <__adddf3+0x6e8>
100043a4:	4990b03a 	or	r8,r9,r6
100043a8:	40008b26 	beq	r8,zero,100045d8 <__adddf3+0x7f0>
100043ac:	4811883a 	mov	r8,r9
100043b0:	3023883a 	mov	r17,r6
100043b4:	3825883a 	mov	r18,r7
100043b8:	003eaa06 	br	10003e64 <__alt_data_end+0xf8003e64>
100043bc:	1021883a 	mov	r16,r2
100043c0:	0011883a 	mov	r8,zero
100043c4:	0005883a 	mov	r2,zero
100043c8:	003f0f06 	br	10004008 <__alt_data_end+0xf8004008>
100043cc:	217ff804 	addi	r5,r4,-32
100043d0:	00800804 	movi	r2,32
100043d4:	494ad83a 	srl	r5,r9,r5
100043d8:	20807d26 	beq	r4,r2,100045d0 <__adddf3+0x7e8>
100043dc:	00801004 	movi	r2,64
100043e0:	1109c83a 	sub	r4,r2,r4
100043e4:	4912983a 	sll	r9,r9,r4
100043e8:	498cb03a 	or	r6,r9,r6
100043ec:	300cc03a 	cmpne	r6,r6,zero
100043f0:	298ab03a 	or	r5,r5,r6
100043f4:	0013883a 	mov	r9,zero
100043f8:	003f1506 	br	10004050 <__alt_data_end+0xf8004050>
100043fc:	0101ffc4 	movi	r4,2047
10004400:	113f9a1e 	bne	r2,r4,1000426c <__alt_data_end+0xf800426c>
10004404:	4811883a 	mov	r8,r9
10004408:	3023883a 	mov	r17,r6
1000440c:	1021883a 	mov	r16,r2
10004410:	3825883a 	mov	r18,r7
10004414:	003e9306 	br	10003e64 <__alt_data_end+0xf8003e64>
10004418:	8000161e 	bne	r16,zero,10004474 <__adddf3+0x68c>
1000441c:	444ab03a 	or	r5,r8,r17
10004420:	28005126 	beq	r5,zero,10004568 <__adddf3+0x780>
10004424:	0108303a 	nor	r4,zero,r4
10004428:	20004d1e 	bne	r4,zero,10004560 <__adddf3+0x778>
1000442c:	89a3883a 	add	r17,r17,r6
10004430:	4253883a 	add	r9,r8,r9
10004434:	898d803a 	cmpltu	r6,r17,r6
10004438:	3251883a 	add	r8,r6,r9
1000443c:	1021883a 	mov	r16,r2
10004440:	003f0806 	br	10004064 <__alt_data_end+0xf8004064>
10004444:	1000301e 	bne	r2,zero,10004508 <__adddf3+0x720>
10004448:	4984b03a 	or	r2,r9,r6
1000444c:	10007126 	beq	r2,zero,10004614 <__adddf3+0x82c>
10004450:	4811883a 	mov	r8,r9
10004454:	3023883a 	mov	r17,r6
10004458:	3825883a 	mov	r18,r7
1000445c:	0401ffc4 	movi	r16,2047
10004460:	003e8006 	br	10003e64 <__alt_data_end+0xf8003e64>
10004464:	4462b03a 	or	r17,r8,r17
10004468:	8822c03a 	cmpne	r17,r17,zero
1000446c:	0007883a 	mov	r3,zero
10004470:	003f8b06 	br	100042a0 <__alt_data_end+0xf80042a0>
10004474:	0141ffc4 	movi	r5,2047
10004478:	11403b26 	beq	r2,r5,10004568 <__adddf3+0x780>
1000447c:	0109c83a 	sub	r4,zero,r4
10004480:	42002034 	orhi	r8,r8,128
10004484:	01400e04 	movi	r5,56
10004488:	29006716 	blt	r5,r4,10004628 <__adddf3+0x840>
1000448c:	014007c4 	movi	r5,31
10004490:	29007016 	blt	r5,r4,10004654 <__adddf3+0x86c>
10004494:	01400804 	movi	r5,32
10004498:	290bc83a 	sub	r5,r5,r4
1000449c:	4154983a 	sll	r10,r8,r5
100044a0:	890ed83a 	srl	r7,r17,r4
100044a4:	894a983a 	sll	r5,r17,r5
100044a8:	4108d83a 	srl	r4,r8,r4
100044ac:	51e2b03a 	or	r17,r10,r7
100044b0:	280ac03a 	cmpne	r5,r5,zero
100044b4:	8962b03a 	or	r17,r17,r5
100044b8:	89a3883a 	add	r17,r17,r6
100044bc:	2253883a 	add	r9,r4,r9
100044c0:	898d803a 	cmpltu	r6,r17,r6
100044c4:	3251883a 	add	r8,r6,r9
100044c8:	1021883a 	mov	r16,r2
100044cc:	003ee506 	br	10004064 <__alt_data_end+0xf8004064>
100044d0:	4984b03a 	or	r2,r9,r6
100044d4:	103e6326 	beq	r2,zero,10003e64 <__alt_data_end+0xf8003e64>
100044d8:	8987c83a 	sub	r3,r17,r6
100044dc:	88c9803a 	cmpltu	r4,r17,r3
100044e0:	4245c83a 	sub	r2,r8,r9
100044e4:	1105c83a 	sub	r2,r2,r4
100044e8:	1100202c 	andhi	r4,r2,128
100044ec:	203ebb26 	beq	r4,zero,10003fdc <__alt_data_end+0xf8003fdc>
100044f0:	3463c83a 	sub	r17,r6,r17
100044f4:	4a07c83a 	sub	r3,r9,r8
100044f8:	344d803a 	cmpltu	r6,r6,r17
100044fc:	1991c83a 	sub	r8,r3,r6
10004500:	3825883a 	mov	r18,r7
10004504:	003e5706 	br	10003e64 <__alt_data_end+0xf8003e64>
10004508:	4984b03a 	or	r2,r9,r6
1000450c:	10002e26 	beq	r2,zero,100045c8 <__adddf3+0x7e0>
10004510:	4004d0fa 	srli	r2,r8,3
10004514:	8822d0fa 	srli	r17,r17,3
10004518:	4010977a 	slli	r8,r8,29
1000451c:	10c0022c 	andhi	r3,r2,8
10004520:	4462b03a 	or	r17,r8,r17
10004524:	18000826 	beq	r3,zero,10004548 <__adddf3+0x760>
10004528:	4808d0fa 	srli	r4,r9,3
1000452c:	20c0022c 	andhi	r3,r4,8
10004530:	1800051e 	bne	r3,zero,10004548 <__adddf3+0x760>
10004534:	300cd0fa 	srli	r6,r6,3
10004538:	4806977a 	slli	r3,r9,29
1000453c:	2005883a 	mov	r2,r4
10004540:	3825883a 	mov	r18,r7
10004544:	19a2b03a 	or	r17,r3,r6
10004548:	8810d77a 	srli	r8,r17,29
1000454c:	100490fa 	slli	r2,r2,3
10004550:	882290fa 	slli	r17,r17,3
10004554:	0401ffc4 	movi	r16,2047
10004558:	4090b03a 	or	r8,r8,r2
1000455c:	003e4106 	br	10003e64 <__alt_data_end+0xf8003e64>
10004560:	0141ffc4 	movi	r5,2047
10004564:	117fc71e 	bne	r2,r5,10004484 <__alt_data_end+0xf8004484>
10004568:	4811883a 	mov	r8,r9
1000456c:	3023883a 	mov	r17,r6
10004570:	1021883a 	mov	r16,r2
10004574:	003e3b06 	br	10003e64 <__alt_data_end+0xf8003e64>
10004578:	10002f26 	beq	r2,zero,10004638 <__adddf3+0x850>
1000457c:	4984b03a 	or	r2,r9,r6
10004580:	10001126 	beq	r2,zero,100045c8 <__adddf3+0x7e0>
10004584:	4004d0fa 	srli	r2,r8,3
10004588:	8822d0fa 	srli	r17,r17,3
1000458c:	4010977a 	slli	r8,r8,29
10004590:	10c0022c 	andhi	r3,r2,8
10004594:	4462b03a 	or	r17,r8,r17
10004598:	183feb26 	beq	r3,zero,10004548 <__alt_data_end+0xf8004548>
1000459c:	4808d0fa 	srli	r4,r9,3
100045a0:	20c0022c 	andhi	r3,r4,8
100045a4:	183fe81e 	bne	r3,zero,10004548 <__alt_data_end+0xf8004548>
100045a8:	300cd0fa 	srli	r6,r6,3
100045ac:	4806977a 	slli	r3,r9,29
100045b0:	2005883a 	mov	r2,r4
100045b4:	19a2b03a 	or	r17,r3,r6
100045b8:	003fe306 	br	10004548 <__alt_data_end+0xf8004548>
100045bc:	0011883a 	mov	r8,zero
100045c0:	0005883a 	mov	r2,zero
100045c4:	003e3f06 	br	10003ec4 <__alt_data_end+0xf8003ec4>
100045c8:	0401ffc4 	movi	r16,2047
100045cc:	003e2506 	br	10003e64 <__alt_data_end+0xf8003e64>
100045d0:	0013883a 	mov	r9,zero
100045d4:	003f8406 	br	100043e8 <__alt_data_end+0xf80043e8>
100045d8:	0005883a 	mov	r2,zero
100045dc:	0007883a 	mov	r3,zero
100045e0:	003e8906 	br	10004008 <__alt_data_end+0xf8004008>
100045e4:	197ff804 	addi	r5,r3,-32
100045e8:	01000804 	movi	r4,32
100045ec:	414ad83a 	srl	r5,r8,r5
100045f0:	19002426 	beq	r3,r4,10004684 <__adddf3+0x89c>
100045f4:	01001004 	movi	r4,64
100045f8:	20c7c83a 	sub	r3,r4,r3
100045fc:	40c6983a 	sll	r3,r8,r3
10004600:	1c46b03a 	or	r3,r3,r17
10004604:	1806c03a 	cmpne	r3,r3,zero
10004608:	28e2b03a 	or	r17,r5,r3
1000460c:	0007883a 	mov	r3,zero
10004610:	003f2306 	br	100042a0 <__alt_data_end+0xf80042a0>
10004614:	0007883a 	mov	r3,zero
10004618:	5811883a 	mov	r8,r11
1000461c:	00bfffc4 	movi	r2,-1
10004620:	0401ffc4 	movi	r16,2047
10004624:	003e7806 	br	10004008 <__alt_data_end+0xf8004008>
10004628:	4462b03a 	or	r17,r8,r17
1000462c:	8822c03a 	cmpne	r17,r17,zero
10004630:	0009883a 	mov	r4,zero
10004634:	003fa006 	br	100044b8 <__alt_data_end+0xf80044b8>
10004638:	4811883a 	mov	r8,r9
1000463c:	3023883a 	mov	r17,r6
10004640:	0401ffc4 	movi	r16,2047
10004644:	003e0706 	br	10003e64 <__alt_data_end+0xf8003e64>
10004648:	4811883a 	mov	r8,r9
1000464c:	3023883a 	mov	r17,r6
10004650:	003e0406 	br	10003e64 <__alt_data_end+0xf8003e64>
10004654:	21fff804 	addi	r7,r4,-32
10004658:	01400804 	movi	r5,32
1000465c:	41ced83a 	srl	r7,r8,r7
10004660:	21400a26 	beq	r4,r5,1000468c <__adddf3+0x8a4>
10004664:	01401004 	movi	r5,64
10004668:	2909c83a 	sub	r4,r5,r4
1000466c:	4108983a 	sll	r4,r8,r4
10004670:	2448b03a 	or	r4,r4,r17
10004674:	2008c03a 	cmpne	r4,r4,zero
10004678:	3922b03a 	or	r17,r7,r4
1000467c:	0009883a 	mov	r4,zero
10004680:	003f8d06 	br	100044b8 <__alt_data_end+0xf80044b8>
10004684:	0007883a 	mov	r3,zero
10004688:	003fdd06 	br	10004600 <__alt_data_end+0xf8004600>
1000468c:	0009883a 	mov	r4,zero
10004690:	003ff706 	br	10004670 <__alt_data_end+0xf8004670>

10004694 <__divdf3>:
10004694:	defff004 	addi	sp,sp,-64
10004698:	dc800815 	stw	r18,32(sp)
1000469c:	2824d53a 	srli	r18,r5,20
100046a0:	dd800c15 	stw	r22,48(sp)
100046a4:	282cd7fa 	srli	r22,r5,31
100046a8:	dc000615 	stw	r16,24(sp)
100046ac:	04000434 	movhi	r16,16
100046b0:	843fffc4 	addi	r16,r16,-1
100046b4:	dfc00f15 	stw	ra,60(sp)
100046b8:	df000e15 	stw	fp,56(sp)
100046bc:	ddc00d15 	stw	r23,52(sp)
100046c0:	dd400b15 	stw	r21,44(sp)
100046c4:	dd000a15 	stw	r20,40(sp)
100046c8:	dcc00915 	stw	r19,36(sp)
100046cc:	dc400715 	stw	r17,28(sp)
100046d0:	9481ffcc 	andi	r18,r18,2047
100046d4:	2c20703a 	and	r16,r5,r16
100046d8:	b2003fcc 	andi	r8,r22,255
100046dc:	90006126 	beq	r18,zero,10004864 <__divdf3+0x1d0>
100046e0:	0081ffc4 	movi	r2,2047
100046e4:	202b883a 	mov	r21,r4
100046e8:	90803726 	beq	r18,r2,100047c8 <__divdf3+0x134>
100046ec:	80c00434 	orhi	r3,r16,16
100046f0:	180690fa 	slli	r3,r3,3
100046f4:	2020d77a 	srli	r16,r4,29
100046f8:	202a90fa 	slli	r21,r4,3
100046fc:	94bf0044 	addi	r18,r18,-1023
10004700:	80e0b03a 	or	r16,r16,r3
10004704:	0013883a 	mov	r9,zero
10004708:	000b883a 	mov	r5,zero
1000470c:	3806d53a 	srli	r3,r7,20
10004710:	382ed7fa 	srli	r23,r7,31
10004714:	04400434 	movhi	r17,16
10004718:	8c7fffc4 	addi	r17,r17,-1
1000471c:	18c1ffcc 	andi	r3,r3,2047
10004720:	3029883a 	mov	r20,r6
10004724:	3c62703a 	and	r17,r7,r17
10004728:	bf003fcc 	andi	fp,r23,255
1000472c:	18006e26 	beq	r3,zero,100048e8 <__divdf3+0x254>
10004730:	0081ffc4 	movi	r2,2047
10004734:	18806626 	beq	r3,r2,100048d0 <__divdf3+0x23c>
10004738:	89000434 	orhi	r4,r17,16
1000473c:	200890fa 	slli	r4,r4,3
10004740:	3022d77a 	srli	r17,r6,29
10004744:	302890fa 	slli	r20,r6,3
10004748:	18ff0044 	addi	r3,r3,-1023
1000474c:	8922b03a 	or	r17,r17,r4
10004750:	000f883a 	mov	r7,zero
10004754:	b5e6f03a 	xor	r19,r22,r23
10004758:	3a4cb03a 	or	r6,r7,r9
1000475c:	008003c4 	movi	r2,15
10004760:	9809883a 	mov	r4,r19
10004764:	90c7c83a 	sub	r3,r18,r3
10004768:	9cc03fcc 	andi	r19,r19,255
1000476c:	11809636 	bltu	r2,r6,100049c8 <__divdf3+0x334>
10004770:	300c90ba 	slli	r6,r6,2
10004774:	00840034 	movhi	r2,4096
10004778:	1091e204 	addi	r2,r2,18312
1000477c:	308d883a 	add	r6,r6,r2
10004780:	30800017 	ldw	r2,0(r6)
10004784:	1000683a 	jmp	r2
10004788:	100049c8 	cmpgei	zero,r2,295
1000478c:	10004800 	call	11000480 <__alt_heap_start+0xf1d62c>
10004790:	100049b8 	rdprs	zero,r2,294
10004794:	100047f4 	orhi	zero,r2,287
10004798:	100049b8 	rdprs	zero,r2,294
1000479c:	1000498c 	andi	zero,r2,294
100047a0:	100049b8 	rdprs	zero,r2,294
100047a4:	100047f4 	orhi	zero,r2,287
100047a8:	10004800 	call	11000480 <__alt_heap_start+0xf1d62c>
100047ac:	10004800 	call	11000480 <__alt_heap_start+0xf1d62c>
100047b0:	1000498c 	andi	zero,r2,294
100047b4:	100047f4 	orhi	zero,r2,287
100047b8:	100047e4 	muli	zero,r2,287
100047bc:	100047e4 	muli	zero,r2,287
100047c0:	100047e4 	muli	zero,r2,287
100047c4:	10004d50 	cmplti	zero,r2,309
100047c8:	2404b03a 	or	r2,r4,r16
100047cc:	10006c1e 	bne	r2,zero,10004980 <__divdf3+0x2ec>
100047d0:	02400204 	movi	r9,8
100047d4:	0021883a 	mov	r16,zero
100047d8:	002b883a 	mov	r21,zero
100047dc:	01400084 	movi	r5,2
100047e0:	003fca06 	br	1000470c <__alt_data_end+0xf800470c>
100047e4:	8023883a 	mov	r17,r16
100047e8:	a829883a 	mov	r20,r21
100047ec:	4039883a 	mov	fp,r8
100047f0:	280f883a 	mov	r7,r5
100047f4:	00800084 	movi	r2,2
100047f8:	3881601e 	bne	r7,r2,10004d7c <__divdf3+0x6e8>
100047fc:	e027883a 	mov	r19,fp
10004800:	9900004c 	andi	r4,r19,1
10004804:	0081ffc4 	movi	r2,2047
10004808:	0021883a 	mov	r16,zero
1000480c:	002b883a 	mov	r21,zero
10004810:	1004953a 	slli	r2,r2,20
10004814:	20c03fcc 	andi	r3,r4,255
10004818:	01400434 	movhi	r5,16
1000481c:	297fffc4 	addi	r5,r5,-1
10004820:	180697fa 	slli	r3,r3,31
10004824:	8160703a 	and	r16,r16,r5
10004828:	80a0b03a 	or	r16,r16,r2
1000482c:	80c6b03a 	or	r3,r16,r3
10004830:	a805883a 	mov	r2,r21
10004834:	dfc00f17 	ldw	ra,60(sp)
10004838:	df000e17 	ldw	fp,56(sp)
1000483c:	ddc00d17 	ldw	r23,52(sp)
10004840:	dd800c17 	ldw	r22,48(sp)
10004844:	dd400b17 	ldw	r21,44(sp)
10004848:	dd000a17 	ldw	r20,40(sp)
1000484c:	dcc00917 	ldw	r19,36(sp)
10004850:	dc800817 	ldw	r18,32(sp)
10004854:	dc400717 	ldw	r17,28(sp)
10004858:	dc000617 	ldw	r16,24(sp)
1000485c:	dec01004 	addi	sp,sp,64
10004860:	f800283a 	ret
10004864:	2404b03a 	or	r2,r4,r16
10004868:	2023883a 	mov	r17,r4
1000486c:	10003f26 	beq	r2,zero,1000496c <__divdf3+0x2d8>
10004870:	80015e26 	beq	r16,zero,10004dec <__divdf3+0x758>
10004874:	8009883a 	mov	r4,r16
10004878:	d9800215 	stw	r6,8(sp)
1000487c:	d9c00515 	stw	r7,20(sp)
10004880:	da000415 	stw	r8,16(sp)
10004884:	00065740 	call	10006574 <__clzsi2>
10004888:	d9800217 	ldw	r6,8(sp)
1000488c:	d9c00517 	ldw	r7,20(sp)
10004890:	da000417 	ldw	r8,16(sp)
10004894:	10fffd44 	addi	r3,r2,-11
10004898:	01000704 	movi	r4,28
1000489c:	20c14f16 	blt	r4,r3,10004ddc <__divdf3+0x748>
100048a0:	01000744 	movi	r4,29
100048a4:	157ffe04 	addi	r21,r2,-8
100048a8:	20c9c83a 	sub	r4,r4,r3
100048ac:	8560983a 	sll	r16,r16,r21
100048b0:	8908d83a 	srl	r4,r17,r4
100048b4:	8d6a983a 	sll	r21,r17,r21
100048b8:	2420b03a 	or	r16,r4,r16
100048bc:	04bf0084 	movi	r18,-1022
100048c0:	90e5c83a 	sub	r18,r18,r3
100048c4:	0013883a 	mov	r9,zero
100048c8:	000b883a 	mov	r5,zero
100048cc:	003f8f06 	br	1000470c <__alt_data_end+0xf800470c>
100048d0:	3444b03a 	or	r2,r6,r17
100048d4:	1000231e 	bne	r2,zero,10004964 <__divdf3+0x2d0>
100048d8:	0023883a 	mov	r17,zero
100048dc:	0029883a 	mov	r20,zero
100048e0:	01c00084 	movi	r7,2
100048e4:	003f9b06 	br	10004754 <__alt_data_end+0xf8004754>
100048e8:	3444b03a 	or	r2,r6,r17
100048ec:	10001926 	beq	r2,zero,10004954 <__divdf3+0x2c0>
100048f0:	88014b26 	beq	r17,zero,10004e20 <__divdf3+0x78c>
100048f4:	8809883a 	mov	r4,r17
100048f8:	d9400115 	stw	r5,4(sp)
100048fc:	d9800215 	stw	r6,8(sp)
10004900:	da000415 	stw	r8,16(sp)
10004904:	da400315 	stw	r9,12(sp)
10004908:	00065740 	call	10006574 <__clzsi2>
1000490c:	d9400117 	ldw	r5,4(sp)
10004910:	d9800217 	ldw	r6,8(sp)
10004914:	da000417 	ldw	r8,16(sp)
10004918:	da400317 	ldw	r9,12(sp)
1000491c:	10fffd44 	addi	r3,r2,-11
10004920:	01000704 	movi	r4,28
10004924:	20c13a16 	blt	r4,r3,10004e10 <__divdf3+0x77c>
10004928:	01000744 	movi	r4,29
1000492c:	153ffe04 	addi	r20,r2,-8
10004930:	20c9c83a 	sub	r4,r4,r3
10004934:	8d22983a 	sll	r17,r17,r20
10004938:	3108d83a 	srl	r4,r6,r4
1000493c:	3528983a 	sll	r20,r6,r20
10004940:	2462b03a 	or	r17,r4,r17
10004944:	00bf0084 	movi	r2,-1022
10004948:	10c7c83a 	sub	r3,r2,r3
1000494c:	000f883a 	mov	r7,zero
10004950:	003f8006 	br	10004754 <__alt_data_end+0xf8004754>
10004954:	0023883a 	mov	r17,zero
10004958:	0029883a 	mov	r20,zero
1000495c:	01c00044 	movi	r7,1
10004960:	003f7c06 	br	10004754 <__alt_data_end+0xf8004754>
10004964:	01c000c4 	movi	r7,3
10004968:	003f7a06 	br	10004754 <__alt_data_end+0xf8004754>
1000496c:	02400104 	movi	r9,4
10004970:	0021883a 	mov	r16,zero
10004974:	002b883a 	mov	r21,zero
10004978:	01400044 	movi	r5,1
1000497c:	003f6306 	br	1000470c <__alt_data_end+0xf800470c>
10004980:	02400304 	movi	r9,12
10004984:	014000c4 	movi	r5,3
10004988:	003f6006 	br	1000470c <__alt_data_end+0xf800470c>
1000498c:	04000434 	movhi	r16,16
10004990:	0009883a 	mov	r4,zero
10004994:	843fffc4 	addi	r16,r16,-1
10004998:	057fffc4 	movi	r21,-1
1000499c:	0081ffc4 	movi	r2,2047
100049a0:	003f9b06 	br	10004810 <__alt_data_end+0xf8004810>
100049a4:	00c00044 	movi	r3,1
100049a8:	1887c83a 	sub	r3,r3,r2
100049ac:	01000e04 	movi	r4,56
100049b0:	20c1530e 	bge	r4,r3,10004f00 <__divdf3+0x86c>
100049b4:	9900004c 	andi	r4,r19,1
100049b8:	0005883a 	mov	r2,zero
100049bc:	0021883a 	mov	r16,zero
100049c0:	002b883a 	mov	r21,zero
100049c4:	003f9206 	br	10004810 <__alt_data_end+0xf8004810>
100049c8:	8c012e36 	bltu	r17,r16,10004e84 <__divdf3+0x7f0>
100049cc:	84412c26 	beq	r16,r17,10004e80 <__divdf3+0x7ec>
100049d0:	a82f883a 	mov	r23,r21
100049d4:	18ffffc4 	addi	r3,r3,-1
100049d8:	002b883a 	mov	r21,zero
100049dc:	a00ad63a 	srli	r5,r20,24
100049e0:	8822923a 	slli	r17,r17,8
100049e4:	a028923a 	slli	r20,r20,8
100049e8:	8009883a 	mov	r4,r16
100049ec:	896cb03a 	or	r22,r17,r5
100049f0:	dd000015 	stw	r20,0(sp)
100049f4:	b028d43a 	srli	r20,r22,16
100049f8:	d8c00215 	stw	r3,8(sp)
100049fc:	b4bfffcc 	andi	r18,r22,65535
10004a00:	a00b883a 	mov	r5,r20
10004a04:	00026900 	call	10002690 <__udivsi3>
10004a08:	100b883a 	mov	r5,r2
10004a0c:	9009883a 	mov	r4,r18
10004a10:	1023883a 	mov	r17,r2
10004a14:	00065d80 	call	100065d8 <__mulsi3>
10004a18:	8009883a 	mov	r4,r16
10004a1c:	a00b883a 	mov	r5,r20
10004a20:	1039883a 	mov	fp,r2
10004a24:	00026f40 	call	100026f4 <__umodsi3>
10004a28:	1004943a 	slli	r2,r2,16
10004a2c:	b808d43a 	srli	r4,r23,16
10004a30:	d8c00217 	ldw	r3,8(sp)
10004a34:	2084b03a 	or	r2,r4,r2
10004a38:	1700062e 	bgeu	r2,fp,10004a54 <__divdf3+0x3c0>
10004a3c:	1585883a 	add	r2,r2,r22
10004a40:	893fffc4 	addi	r4,r17,-1
10004a44:	15811d36 	bltu	r2,r22,10004ebc <__divdf3+0x828>
10004a48:	17011c2e 	bgeu	r2,fp,10004ebc <__divdf3+0x828>
10004a4c:	8c7fff84 	addi	r17,r17,-2
10004a50:	1585883a 	add	r2,r2,r22
10004a54:	1739c83a 	sub	fp,r2,fp
10004a58:	a00b883a 	mov	r5,r20
10004a5c:	e009883a 	mov	r4,fp
10004a60:	d8c00215 	stw	r3,8(sp)
10004a64:	00026900 	call	10002690 <__udivsi3>
10004a68:	100b883a 	mov	r5,r2
10004a6c:	9009883a 	mov	r4,r18
10004a70:	1021883a 	mov	r16,r2
10004a74:	00065d80 	call	100065d8 <__mulsi3>
10004a78:	a00b883a 	mov	r5,r20
10004a7c:	e009883a 	mov	r4,fp
10004a80:	d8800415 	stw	r2,16(sp)
10004a84:	00026f40 	call	100026f4 <__umodsi3>
10004a88:	1004943a 	slli	r2,r2,16
10004a8c:	da000417 	ldw	r8,16(sp)
10004a90:	bdffffcc 	andi	r23,r23,65535
10004a94:	b884b03a 	or	r2,r23,r2
10004a98:	d8c00217 	ldw	r3,8(sp)
10004a9c:	1200062e 	bgeu	r2,r8,10004ab8 <__divdf3+0x424>
10004aa0:	1585883a 	add	r2,r2,r22
10004aa4:	813fffc4 	addi	r4,r16,-1
10004aa8:	15810236 	bltu	r2,r22,10004eb4 <__divdf3+0x820>
10004aac:	1201012e 	bgeu	r2,r8,10004eb4 <__divdf3+0x820>
10004ab0:	843fff84 	addi	r16,r16,-2
10004ab4:	1585883a 	add	r2,r2,r22
10004ab8:	8822943a 	slli	r17,r17,16
10004abc:	d9800017 	ldw	r6,0(sp)
10004ac0:	1211c83a 	sub	r8,r2,r8
10004ac4:	8c22b03a 	or	r17,r17,r16
10004ac8:	373fffcc 	andi	fp,r6,65535
10004acc:	8abfffcc 	andi	r10,r17,65535
10004ad0:	8820d43a 	srli	r16,r17,16
10004ad4:	5009883a 	mov	r4,r10
10004ad8:	e00b883a 	mov	r5,fp
10004adc:	302ed43a 	srli	r23,r6,16
10004ae0:	d8c00215 	stw	r3,8(sp)
10004ae4:	da000415 	stw	r8,16(sp)
10004ae8:	da800115 	stw	r10,4(sp)
10004aec:	00065d80 	call	100065d8 <__mulsi3>
10004af0:	800b883a 	mov	r5,r16
10004af4:	e009883a 	mov	r4,fp
10004af8:	d8800515 	stw	r2,20(sp)
10004afc:	00065d80 	call	100065d8 <__mulsi3>
10004b00:	8009883a 	mov	r4,r16
10004b04:	b80b883a 	mov	r5,r23
10004b08:	d8800315 	stw	r2,12(sp)
10004b0c:	00065d80 	call	100065d8 <__mulsi3>
10004b10:	da800117 	ldw	r10,4(sp)
10004b14:	b80b883a 	mov	r5,r23
10004b18:	1021883a 	mov	r16,r2
10004b1c:	5009883a 	mov	r4,r10
10004b20:	00065d80 	call	100065d8 <__mulsi3>
10004b24:	d9c00517 	ldw	r7,20(sp)
10004b28:	da400317 	ldw	r9,12(sp)
10004b2c:	d8c00217 	ldw	r3,8(sp)
10004b30:	3808d43a 	srli	r4,r7,16
10004b34:	1245883a 	add	r2,r2,r9
10004b38:	da000417 	ldw	r8,16(sp)
10004b3c:	2085883a 	add	r2,r4,r2
10004b40:	1240022e 	bgeu	r2,r9,10004b4c <__divdf3+0x4b8>
10004b44:	01000074 	movhi	r4,1
10004b48:	8121883a 	add	r16,r16,r4
10004b4c:	1008d43a 	srli	r4,r2,16
10004b50:	1004943a 	slli	r2,r2,16
10004b54:	39ffffcc 	andi	r7,r7,65535
10004b58:	2409883a 	add	r4,r4,r16
10004b5c:	11c5883a 	add	r2,r2,r7
10004b60:	4100bb36 	bltu	r8,r4,10004e50 <__divdf3+0x7bc>
10004b64:	4100d726 	beq	r8,r4,10004ec4 <__divdf3+0x830>
10004b68:	4109c83a 	sub	r4,r8,r4
10004b6c:	a8a1c83a 	sub	r16,r21,r2
10004b70:	ac2b803a 	cmpltu	r21,r21,r16
10004b74:	256bc83a 	sub	r21,r4,r21
10004b78:	b540d926 	beq	r22,r21,10004ee0 <__divdf3+0x84c>
10004b7c:	a00b883a 	mov	r5,r20
10004b80:	a809883a 	mov	r4,r21
10004b84:	d8c00215 	stw	r3,8(sp)
10004b88:	00026900 	call	10002690 <__udivsi3>
10004b8c:	100b883a 	mov	r5,r2
10004b90:	9009883a 	mov	r4,r18
10004b94:	d8800515 	stw	r2,20(sp)
10004b98:	00065d80 	call	100065d8 <__mulsi3>
10004b9c:	a809883a 	mov	r4,r21
10004ba0:	a00b883a 	mov	r5,r20
10004ba4:	d8800415 	stw	r2,16(sp)
10004ba8:	00026f40 	call	100026f4 <__umodsi3>
10004bac:	1004943a 	slli	r2,r2,16
10004bb0:	8008d43a 	srli	r4,r16,16
10004bb4:	da000417 	ldw	r8,16(sp)
10004bb8:	d8c00217 	ldw	r3,8(sp)
10004bbc:	2084b03a 	or	r2,r4,r2
10004bc0:	d9c00517 	ldw	r7,20(sp)
10004bc4:	1200062e 	bgeu	r2,r8,10004be0 <__divdf3+0x54c>
10004bc8:	1585883a 	add	r2,r2,r22
10004bcc:	393fffc4 	addi	r4,r7,-1
10004bd0:	1580c536 	bltu	r2,r22,10004ee8 <__divdf3+0x854>
10004bd4:	1200c42e 	bgeu	r2,r8,10004ee8 <__divdf3+0x854>
10004bd8:	39ffff84 	addi	r7,r7,-2
10004bdc:	1585883a 	add	r2,r2,r22
10004be0:	122bc83a 	sub	r21,r2,r8
10004be4:	a00b883a 	mov	r5,r20
10004be8:	a809883a 	mov	r4,r21
10004bec:	d8c00215 	stw	r3,8(sp)
10004bf0:	d9c00515 	stw	r7,20(sp)
10004bf4:	00026900 	call	10002690 <__udivsi3>
10004bf8:	9009883a 	mov	r4,r18
10004bfc:	100b883a 	mov	r5,r2
10004c00:	d8800415 	stw	r2,16(sp)
10004c04:	00065d80 	call	100065d8 <__mulsi3>
10004c08:	a809883a 	mov	r4,r21
10004c0c:	a00b883a 	mov	r5,r20
10004c10:	1025883a 	mov	r18,r2
10004c14:	00026f40 	call	100026f4 <__umodsi3>
10004c18:	1004943a 	slli	r2,r2,16
10004c1c:	813fffcc 	andi	r4,r16,65535
10004c20:	d8c00217 	ldw	r3,8(sp)
10004c24:	20a0b03a 	or	r16,r4,r2
10004c28:	d9c00517 	ldw	r7,20(sp)
10004c2c:	da000417 	ldw	r8,16(sp)
10004c30:	8480062e 	bgeu	r16,r18,10004c4c <__divdf3+0x5b8>
10004c34:	85a1883a 	add	r16,r16,r22
10004c38:	40bfffc4 	addi	r2,r8,-1
10004c3c:	8580ac36 	bltu	r16,r22,10004ef0 <__divdf3+0x85c>
10004c40:	8480ab2e 	bgeu	r16,r18,10004ef0 <__divdf3+0x85c>
10004c44:	423fff84 	addi	r8,r8,-2
10004c48:	85a1883a 	add	r16,r16,r22
10004c4c:	3804943a 	slli	r2,r7,16
10004c50:	84a1c83a 	sub	r16,r16,r18
10004c54:	e009883a 	mov	r4,fp
10004c58:	1228b03a 	or	r20,r2,r8
10004c5c:	a1ffffcc 	andi	r7,r20,65535
10004c60:	a024d43a 	srli	r18,r20,16
10004c64:	380b883a 	mov	r5,r7
10004c68:	d8c00215 	stw	r3,8(sp)
10004c6c:	d9c00515 	stw	r7,20(sp)
10004c70:	00065d80 	call	100065d8 <__mulsi3>
10004c74:	900b883a 	mov	r5,r18
10004c78:	e009883a 	mov	r4,fp
10004c7c:	102b883a 	mov	r21,r2
10004c80:	00065d80 	call	100065d8 <__mulsi3>
10004c84:	900b883a 	mov	r5,r18
10004c88:	b809883a 	mov	r4,r23
10004c8c:	1039883a 	mov	fp,r2
10004c90:	00065d80 	call	100065d8 <__mulsi3>
10004c94:	d9c00517 	ldw	r7,20(sp)
10004c98:	b80b883a 	mov	r5,r23
10004c9c:	1025883a 	mov	r18,r2
10004ca0:	3809883a 	mov	r4,r7
10004ca4:	00065d80 	call	100065d8 <__mulsi3>
10004ca8:	a808d43a 	srli	r4,r21,16
10004cac:	1705883a 	add	r2,r2,fp
10004cb0:	d8c00217 	ldw	r3,8(sp)
10004cb4:	2085883a 	add	r2,r4,r2
10004cb8:	1700022e 	bgeu	r2,fp,10004cc4 <__divdf3+0x630>
10004cbc:	01000074 	movhi	r4,1
10004cc0:	9125883a 	add	r18,r18,r4
10004cc4:	1008d43a 	srli	r4,r2,16
10004cc8:	1004943a 	slli	r2,r2,16
10004ccc:	ad7fffcc 	andi	r21,r21,65535
10004cd0:	2489883a 	add	r4,r4,r18
10004cd4:	1545883a 	add	r2,r2,r21
10004cd8:	81003836 	bltu	r16,r4,10004dbc <__divdf3+0x728>
10004cdc:	81003626 	beq	r16,r4,10004db8 <__divdf3+0x724>
10004ce0:	a5000054 	ori	r20,r20,1
10004ce4:	1880ffc4 	addi	r2,r3,1023
10004ce8:	00bf2e0e 	bge	zero,r2,100049a4 <__alt_data_end+0xf80049a4>
10004cec:	a10001cc 	andi	r4,r20,7
10004cf0:	20000726 	beq	r4,zero,10004d10 <__divdf3+0x67c>
10004cf4:	a10003cc 	andi	r4,r20,15
10004cf8:	01400104 	movi	r5,4
10004cfc:	21400426 	beq	r4,r5,10004d10 <__divdf3+0x67c>
10004d00:	a149883a 	add	r4,r20,r5
10004d04:	2529803a 	cmpltu	r20,r4,r20
10004d08:	8d23883a 	add	r17,r17,r20
10004d0c:	2029883a 	mov	r20,r4
10004d10:	8900402c 	andhi	r4,r17,256
10004d14:	20000426 	beq	r4,zero,10004d28 <__divdf3+0x694>
10004d18:	18810004 	addi	r2,r3,1024
10004d1c:	00ffc034 	movhi	r3,65280
10004d20:	18ffffc4 	addi	r3,r3,-1
10004d24:	88e2703a 	and	r17,r17,r3
10004d28:	00c1ff84 	movi	r3,2046
10004d2c:	18beb416 	blt	r3,r2,10004800 <__alt_data_end+0xf8004800>
10004d30:	a028d0fa 	srli	r20,r20,3
10004d34:	882a977a 	slli	r21,r17,29
10004d38:	8820927a 	slli	r16,r17,9
10004d3c:	1081ffcc 	andi	r2,r2,2047
10004d40:	ad2ab03a 	or	r21,r21,r20
10004d44:	8020d33a 	srli	r16,r16,12
10004d48:	9900004c 	andi	r4,r19,1
10004d4c:	003eb006 	br	10004810 <__alt_data_end+0xf8004810>
10004d50:	8080022c 	andhi	r2,r16,8
10004d54:	10001226 	beq	r2,zero,10004da0 <__divdf3+0x70c>
10004d58:	8880022c 	andhi	r2,r17,8
10004d5c:	1000101e 	bne	r2,zero,10004da0 <__divdf3+0x70c>
10004d60:	00800434 	movhi	r2,16
10004d64:	8c000234 	orhi	r16,r17,8
10004d68:	10bfffc4 	addi	r2,r2,-1
10004d6c:	b809883a 	mov	r4,r23
10004d70:	80a0703a 	and	r16,r16,r2
10004d74:	a02b883a 	mov	r21,r20
10004d78:	003f0806 	br	1000499c <__alt_data_end+0xf800499c>
10004d7c:	008000c4 	movi	r2,3
10004d80:	3880b126 	beq	r7,r2,10005048 <__divdf3+0x9b4>
10004d84:	00800044 	movi	r2,1
10004d88:	38805b1e 	bne	r7,r2,10004ef8 <__divdf3+0x864>
10004d8c:	e009883a 	mov	r4,fp
10004d90:	0005883a 	mov	r2,zero
10004d94:	0021883a 	mov	r16,zero
10004d98:	002b883a 	mov	r21,zero
10004d9c:	003e9c06 	br	10004810 <__alt_data_end+0xf8004810>
10004da0:	00800434 	movhi	r2,16
10004da4:	84000234 	orhi	r16,r16,8
10004da8:	10bfffc4 	addi	r2,r2,-1
10004dac:	b009883a 	mov	r4,r22
10004db0:	80a0703a 	and	r16,r16,r2
10004db4:	003ef906 	br	1000499c <__alt_data_end+0xf800499c>
10004db8:	103fca26 	beq	r2,zero,10004ce4 <__alt_data_end+0xf8004ce4>
10004dbc:	b421883a 	add	r16,r22,r16
10004dc0:	a17fffc4 	addi	r5,r20,-1
10004dc4:	8580422e 	bgeu	r16,r22,10004ed0 <__divdf3+0x83c>
10004dc8:	2829883a 	mov	r20,r5
10004dcc:	813fc41e 	bne	r16,r4,10004ce0 <__alt_data_end+0xf8004ce0>
10004dd0:	d9800017 	ldw	r6,0(sp)
10004dd4:	30bfc21e 	bne	r6,r2,10004ce0 <__alt_data_end+0xf8004ce0>
10004dd8:	003fc206 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10004ddc:	10bff604 	addi	r2,r2,-40
10004de0:	88a0983a 	sll	r16,r17,r2
10004de4:	002b883a 	mov	r21,zero
10004de8:	003eb406 	br	100048bc <__alt_data_end+0xf80048bc>
10004dec:	d9800215 	stw	r6,8(sp)
10004df0:	d9c00515 	stw	r7,20(sp)
10004df4:	da000415 	stw	r8,16(sp)
10004df8:	00065740 	call	10006574 <__clzsi2>
10004dfc:	10800804 	addi	r2,r2,32
10004e00:	da000417 	ldw	r8,16(sp)
10004e04:	d9c00517 	ldw	r7,20(sp)
10004e08:	d9800217 	ldw	r6,8(sp)
10004e0c:	003ea106 	br	10004894 <__alt_data_end+0xf8004894>
10004e10:	10bff604 	addi	r2,r2,-40
10004e14:	30a2983a 	sll	r17,r6,r2
10004e18:	0029883a 	mov	r20,zero
10004e1c:	003ec906 	br	10004944 <__alt_data_end+0xf8004944>
10004e20:	3009883a 	mov	r4,r6
10004e24:	d9400115 	stw	r5,4(sp)
10004e28:	d9800215 	stw	r6,8(sp)
10004e2c:	da000415 	stw	r8,16(sp)
10004e30:	da400315 	stw	r9,12(sp)
10004e34:	00065740 	call	10006574 <__clzsi2>
10004e38:	10800804 	addi	r2,r2,32
10004e3c:	da400317 	ldw	r9,12(sp)
10004e40:	da000417 	ldw	r8,16(sp)
10004e44:	d9800217 	ldw	r6,8(sp)
10004e48:	d9400117 	ldw	r5,4(sp)
10004e4c:	003eb306 	br	1000491c <__alt_data_end+0xf800491c>
10004e50:	d9800017 	ldw	r6,0(sp)
10004e54:	a9ab883a 	add	r21,r21,r6
10004e58:	a98b803a 	cmpltu	r5,r21,r6
10004e5c:	2d8b883a 	add	r5,r5,r22
10004e60:	2a11883a 	add	r8,r5,r8
10004e64:	897fffc4 	addi	r5,r17,-1
10004e68:	b2000c2e 	bgeu	r22,r8,10004e9c <__divdf3+0x808>
10004e6c:	41003f36 	bltu	r8,r4,10004f6c <__divdf3+0x8d8>
10004e70:	22006c26 	beq	r4,r8,10005024 <__divdf3+0x990>
10004e74:	4109c83a 	sub	r4,r8,r4
10004e78:	2823883a 	mov	r17,r5
10004e7c:	003f3b06 	br	10004b6c <__alt_data_end+0xf8004b6c>
10004e80:	ad3ed336 	bltu	r21,r20,100049d0 <__alt_data_end+0xf80049d0>
10004e84:	a804d07a 	srli	r2,r21,1
10004e88:	802e97fa 	slli	r23,r16,31
10004e8c:	a82a97fa 	slli	r21,r21,31
10004e90:	8020d07a 	srli	r16,r16,1
10004e94:	b8aeb03a 	or	r23,r23,r2
10004e98:	003ed006 	br	100049dc <__alt_data_end+0xf80049dc>
10004e9c:	b23ff51e 	bne	r22,r8,10004e74 <__alt_data_end+0xf8004e74>
10004ea0:	d9800017 	ldw	r6,0(sp)
10004ea4:	a9bff12e 	bgeu	r21,r6,10004e6c <__alt_data_end+0xf8004e6c>
10004ea8:	b109c83a 	sub	r4,r22,r4
10004eac:	2823883a 	mov	r17,r5
10004eb0:	003f2e06 	br	10004b6c <__alt_data_end+0xf8004b6c>
10004eb4:	2021883a 	mov	r16,r4
10004eb8:	003eff06 	br	10004ab8 <__alt_data_end+0xf8004ab8>
10004ebc:	2023883a 	mov	r17,r4
10004ec0:	003ee406 	br	10004a54 <__alt_data_end+0xf8004a54>
10004ec4:	a8bfe236 	bltu	r21,r2,10004e50 <__alt_data_end+0xf8004e50>
10004ec8:	0009883a 	mov	r4,zero
10004ecc:	003f2706 	br	10004b6c <__alt_data_end+0xf8004b6c>
10004ed0:	81002d36 	bltu	r16,r4,10004f88 <__divdf3+0x8f4>
10004ed4:	24005626 	beq	r4,r16,10005030 <__divdf3+0x99c>
10004ed8:	2829883a 	mov	r20,r5
10004edc:	003f8006 	br	10004ce0 <__alt_data_end+0xf8004ce0>
10004ee0:	053fffc4 	movi	r20,-1
10004ee4:	003f7f06 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10004ee8:	200f883a 	mov	r7,r4
10004eec:	003f3c06 	br	10004be0 <__alt_data_end+0xf8004be0>
10004ef0:	1011883a 	mov	r8,r2
10004ef4:	003f5506 	br	10004c4c <__alt_data_end+0xf8004c4c>
10004ef8:	e027883a 	mov	r19,fp
10004efc:	003f7906 	br	10004ce4 <__alt_data_end+0xf8004ce4>
10004f00:	010007c4 	movi	r4,31
10004f04:	20c02816 	blt	r4,r3,10004fa8 <__divdf3+0x914>
10004f08:	00800804 	movi	r2,32
10004f0c:	10c5c83a 	sub	r2,r2,r3
10004f10:	888a983a 	sll	r5,r17,r2
10004f14:	a0c8d83a 	srl	r4,r20,r3
10004f18:	a084983a 	sll	r2,r20,r2
10004f1c:	88e2d83a 	srl	r17,r17,r3
10004f20:	2906b03a 	or	r3,r5,r4
10004f24:	1004c03a 	cmpne	r2,r2,zero
10004f28:	1886b03a 	or	r3,r3,r2
10004f2c:	188001cc 	andi	r2,r3,7
10004f30:	10000726 	beq	r2,zero,10004f50 <__divdf3+0x8bc>
10004f34:	188003cc 	andi	r2,r3,15
10004f38:	01000104 	movi	r4,4
10004f3c:	11000426 	beq	r2,r4,10004f50 <__divdf3+0x8bc>
10004f40:	1805883a 	mov	r2,r3
10004f44:	10c00104 	addi	r3,r2,4
10004f48:	1885803a 	cmpltu	r2,r3,r2
10004f4c:	88a3883a 	add	r17,r17,r2
10004f50:	8880202c 	andhi	r2,r17,128
10004f54:	10002926 	beq	r2,zero,10004ffc <__divdf3+0x968>
10004f58:	9900004c 	andi	r4,r19,1
10004f5c:	00800044 	movi	r2,1
10004f60:	0021883a 	mov	r16,zero
10004f64:	002b883a 	mov	r21,zero
10004f68:	003e2906 	br	10004810 <__alt_data_end+0xf8004810>
10004f6c:	d9800017 	ldw	r6,0(sp)
10004f70:	8c7fff84 	addi	r17,r17,-2
10004f74:	a9ab883a 	add	r21,r21,r6
10004f78:	a98b803a 	cmpltu	r5,r21,r6
10004f7c:	2d8b883a 	add	r5,r5,r22
10004f80:	2a11883a 	add	r8,r5,r8
10004f84:	003ef806 	br	10004b68 <__alt_data_end+0xf8004b68>
10004f88:	d9800017 	ldw	r6,0(sp)
10004f8c:	318f883a 	add	r7,r6,r6
10004f90:	398b803a 	cmpltu	r5,r7,r6
10004f94:	2d8d883a 	add	r6,r5,r22
10004f98:	81a1883a 	add	r16,r16,r6
10004f9c:	a17fff84 	addi	r5,r20,-2
10004fa0:	d9c00015 	stw	r7,0(sp)
10004fa4:	003f8806 	br	10004dc8 <__alt_data_end+0xf8004dc8>
10004fa8:	013ff844 	movi	r4,-31
10004fac:	2085c83a 	sub	r2,r4,r2
10004fb0:	8888d83a 	srl	r4,r17,r2
10004fb4:	00800804 	movi	r2,32
10004fb8:	18802126 	beq	r3,r2,10005040 <__divdf3+0x9ac>
10004fbc:	04001004 	movi	r16,64
10004fc0:	80c7c83a 	sub	r3,r16,r3
10004fc4:	88e0983a 	sll	r16,r17,r3
10004fc8:	8504b03a 	or	r2,r16,r20
10004fcc:	1004c03a 	cmpne	r2,r2,zero
10004fd0:	2084b03a 	or	r2,r4,r2
10004fd4:	144001cc 	andi	r17,r2,7
10004fd8:	88000d1e 	bne	r17,zero,10005010 <__divdf3+0x97c>
10004fdc:	0021883a 	mov	r16,zero
10004fe0:	102ad0fa 	srli	r21,r2,3
10004fe4:	9900004c 	andi	r4,r19,1
10004fe8:	0005883a 	mov	r2,zero
10004fec:	ac6ab03a 	or	r21,r21,r17
10004ff0:	003e0706 	br	10004810 <__alt_data_end+0xf8004810>
10004ff4:	1007883a 	mov	r3,r2
10004ff8:	0023883a 	mov	r17,zero
10004ffc:	8820927a 	slli	r16,r17,9
10005000:	1805883a 	mov	r2,r3
10005004:	8822977a 	slli	r17,r17,29
10005008:	8020d33a 	srli	r16,r16,12
1000500c:	003ff406 	br	10004fe0 <__alt_data_end+0xf8004fe0>
10005010:	10c003cc 	andi	r3,r2,15
10005014:	01000104 	movi	r4,4
10005018:	193ff626 	beq	r3,r4,10004ff4 <__alt_data_end+0xf8004ff4>
1000501c:	0023883a 	mov	r17,zero
10005020:	003fc806 	br	10004f44 <__alt_data_end+0xf8004f44>
10005024:	a8bfd136 	bltu	r21,r2,10004f6c <__alt_data_end+0xf8004f6c>
10005028:	2823883a 	mov	r17,r5
1000502c:	003fa606 	br	10004ec8 <__alt_data_end+0xf8004ec8>
10005030:	d9800017 	ldw	r6,0(sp)
10005034:	30bfd436 	bltu	r6,r2,10004f88 <__alt_data_end+0xf8004f88>
10005038:	2829883a 	mov	r20,r5
1000503c:	003f6406 	br	10004dd0 <__alt_data_end+0xf8004dd0>
10005040:	0021883a 	mov	r16,zero
10005044:	003fe006 	br	10004fc8 <__alt_data_end+0xf8004fc8>
10005048:	00800434 	movhi	r2,16
1000504c:	8c000234 	orhi	r16,r17,8
10005050:	10bfffc4 	addi	r2,r2,-1
10005054:	e009883a 	mov	r4,fp
10005058:	80a0703a 	and	r16,r16,r2
1000505c:	a02b883a 	mov	r21,r20
10005060:	003e4e06 	br	1000499c <__alt_data_end+0xf800499c>

10005064 <__ledf2>:
10005064:	2804d53a 	srli	r2,r5,20
10005068:	3810d53a 	srli	r8,r7,20
1000506c:	00c00434 	movhi	r3,16
10005070:	18ffffc4 	addi	r3,r3,-1
10005074:	1081ffcc 	andi	r2,r2,2047
10005078:	0241ffc4 	movi	r9,2047
1000507c:	28d4703a 	and	r10,r5,r3
10005080:	4201ffcc 	andi	r8,r8,2047
10005084:	38c6703a 	and	r3,r7,r3
10005088:	280ad7fa 	srli	r5,r5,31
1000508c:	380ed7fa 	srli	r7,r7,31
10005090:	12401f26 	beq	r2,r9,10005110 <__ledf2+0xac>
10005094:	0241ffc4 	movi	r9,2047
10005098:	42401426 	beq	r8,r9,100050ec <__ledf2+0x88>
1000509c:	1000091e 	bne	r2,zero,100050c4 <__ledf2+0x60>
100050a0:	2296b03a 	or	r11,r4,r10
100050a4:	5813003a 	cmpeq	r9,r11,zero
100050a8:	29403fcc 	andi	r5,r5,255
100050ac:	40000a1e 	bne	r8,zero,100050d8 <__ledf2+0x74>
100050b0:	30d8b03a 	or	r12,r6,r3
100050b4:	6000081e 	bne	r12,zero,100050d8 <__ledf2+0x74>
100050b8:	0005883a 	mov	r2,zero
100050bc:	5800111e 	bne	r11,zero,10005104 <__ledf2+0xa0>
100050c0:	f800283a 	ret
100050c4:	29403fcc 	andi	r5,r5,255
100050c8:	40000c1e 	bne	r8,zero,100050fc <__ledf2+0x98>
100050cc:	30d2b03a 	or	r9,r6,r3
100050d0:	48000c26 	beq	r9,zero,10005104 <__ledf2+0xa0>
100050d4:	0013883a 	mov	r9,zero
100050d8:	39c03fcc 	andi	r7,r7,255
100050dc:	48000826 	beq	r9,zero,10005100 <__ledf2+0x9c>
100050e0:	38001126 	beq	r7,zero,10005128 <__ledf2+0xc4>
100050e4:	00800044 	movi	r2,1
100050e8:	f800283a 	ret
100050ec:	30d2b03a 	or	r9,r6,r3
100050f0:	483fea26 	beq	r9,zero,1000509c <__alt_data_end+0xf800509c>
100050f4:	00800084 	movi	r2,2
100050f8:	f800283a 	ret
100050fc:	39c03fcc 	andi	r7,r7,255
10005100:	39400726 	beq	r7,r5,10005120 <__ledf2+0xbc>
10005104:	2800081e 	bne	r5,zero,10005128 <__ledf2+0xc4>
10005108:	00800044 	movi	r2,1
1000510c:	f800283a 	ret
10005110:	2292b03a 	or	r9,r4,r10
10005114:	483fdf26 	beq	r9,zero,10005094 <__alt_data_end+0xf8005094>
10005118:	00800084 	movi	r2,2
1000511c:	f800283a 	ret
10005120:	4080030e 	bge	r8,r2,10005130 <__ledf2+0xcc>
10005124:	383fef26 	beq	r7,zero,100050e4 <__alt_data_end+0xf80050e4>
10005128:	00bfffc4 	movi	r2,-1
1000512c:	f800283a 	ret
10005130:	123feb16 	blt	r2,r8,100050e0 <__alt_data_end+0xf80050e0>
10005134:	1abff336 	bltu	r3,r10,10005104 <__alt_data_end+0xf8005104>
10005138:	50c00326 	beq	r10,r3,10005148 <__ledf2+0xe4>
1000513c:	50c0042e 	bgeu	r10,r3,10005150 <__ledf2+0xec>
10005140:	283fe81e 	bne	r5,zero,100050e4 <__alt_data_end+0xf80050e4>
10005144:	003ff806 	br	10005128 <__alt_data_end+0xf8005128>
10005148:	313fee36 	bltu	r6,r4,10005104 <__alt_data_end+0xf8005104>
1000514c:	21bffc36 	bltu	r4,r6,10005140 <__alt_data_end+0xf8005140>
10005150:	0005883a 	mov	r2,zero
10005154:	f800283a 	ret

10005158 <__muldf3>:
10005158:	deffee04 	addi	sp,sp,-72
1000515c:	dd000c15 	stw	r20,48(sp)
10005160:	2828d53a 	srli	r20,r5,20
10005164:	ddc00f15 	stw	r23,60(sp)
10005168:	282ed7fa 	srli	r23,r5,31
1000516c:	dc000815 	stw	r16,32(sp)
10005170:	04000434 	movhi	r16,16
10005174:	dcc00b15 	stw	r19,44(sp)
10005178:	843fffc4 	addi	r16,r16,-1
1000517c:	dfc01115 	stw	ra,68(sp)
10005180:	df001015 	stw	fp,64(sp)
10005184:	dd800e15 	stw	r22,56(sp)
10005188:	dd400d15 	stw	r21,52(sp)
1000518c:	dc800a15 	stw	r18,40(sp)
10005190:	dc400915 	stw	r17,36(sp)
10005194:	a501ffcc 	andi	r20,r20,2047
10005198:	2c20703a 	and	r16,r5,r16
1000519c:	b827883a 	mov	r19,r23
100051a0:	ba403fcc 	andi	r9,r23,255
100051a4:	a0006026 	beq	r20,zero,10005328 <__muldf3+0x1d0>
100051a8:	0081ffc4 	movi	r2,2047
100051ac:	202d883a 	mov	r22,r4
100051b0:	a0803626 	beq	r20,r2,1000528c <__muldf3+0x134>
100051b4:	84000434 	orhi	r16,r16,16
100051b8:	200ad77a 	srli	r5,r4,29
100051bc:	800690fa 	slli	r3,r16,3
100051c0:	202c90fa 	slli	r22,r4,3
100051c4:	a53f0044 	addi	r20,r20,-1023
100051c8:	28e0b03a 	or	r16,r5,r3
100051cc:	002b883a 	mov	r21,zero
100051d0:	000b883a 	mov	r5,zero
100051d4:	3806d53a 	srli	r3,r7,20
100051d8:	3838d7fa 	srli	fp,r7,31
100051dc:	04400434 	movhi	r17,16
100051e0:	8c7fffc4 	addi	r17,r17,-1
100051e4:	18c1ffcc 	andi	r3,r3,2047
100051e8:	3025883a 	mov	r18,r6
100051ec:	3c62703a 	and	r17,r7,r17
100051f0:	e2803fcc 	andi	r10,fp,255
100051f4:	18006d26 	beq	r3,zero,100053ac <__muldf3+0x254>
100051f8:	0081ffc4 	movi	r2,2047
100051fc:	18806526 	beq	r3,r2,10005394 <__muldf3+0x23c>
10005200:	8c400434 	orhi	r17,r17,16
10005204:	300ed77a 	srli	r7,r6,29
10005208:	880890fa 	slli	r4,r17,3
1000520c:	302490fa 	slli	r18,r6,3
10005210:	18ff0044 	addi	r3,r3,-1023
10005214:	3922b03a 	or	r17,r7,r4
10005218:	000f883a 	mov	r7,zero
1000521c:	a0c7883a 	add	r3,r20,r3
10005220:	3d48b03a 	or	r4,r7,r21
10005224:	008003c4 	movi	r2,15
10005228:	e5ccf03a 	xor	r6,fp,r23
1000522c:	1a000044 	addi	r8,r3,1
10005230:	11009b36 	bltu	r2,r4,100054a0 <__muldf3+0x348>
10005234:	200890ba 	slli	r4,r4,2
10005238:	00840034 	movhi	r2,4096
1000523c:	10949304 	addi	r2,r2,21068
10005240:	2089883a 	add	r4,r4,r2
10005244:	20800017 	ldw	r2,0(r4)
10005248:	1000683a 	jmp	r2
1000524c:	100054a0 	cmpeqi	zero,r2,338
10005250:	100052ac 	andhi	zero,r2,330
10005254:	100052ac 	andhi	zero,r2,330
10005258:	100052a8 	cmpgeui	zero,r2,330
1000525c:	1000547c 	xorhi	zero,r2,337
10005260:	1000547c 	xorhi	zero,r2,337
10005264:	10005464 	muli	zero,r2,337
10005268:	100052a8 	cmpgeui	zero,r2,330
1000526c:	1000547c 	xorhi	zero,r2,337
10005270:	10005464 	muli	zero,r2,337
10005274:	1000547c 	xorhi	zero,r2,337
10005278:	100052a8 	cmpgeui	zero,r2,330
1000527c:	1000548c 	andi	zero,r2,338
10005280:	1000548c 	andi	zero,r2,338
10005284:	1000548c 	andi	zero,r2,338
10005288:	100057e8 	cmpgeui	zero,r2,351
1000528c:	2404b03a 	or	r2,r4,r16
10005290:	1000711e 	bne	r2,zero,10005458 <__muldf3+0x300>
10005294:	05400204 	movi	r21,8
10005298:	0021883a 	mov	r16,zero
1000529c:	002d883a 	mov	r22,zero
100052a0:	01400084 	movi	r5,2
100052a4:	003fcb06 	br	100051d4 <__alt_data_end+0xf80051d4>
100052a8:	500d883a 	mov	r6,r10
100052ac:	00800084 	movi	r2,2
100052b0:	38805926 	beq	r7,r2,10005418 <__muldf3+0x2c0>
100052b4:	008000c4 	movi	r2,3
100052b8:	3881ba26 	beq	r7,r2,100059a4 <__muldf3+0x84c>
100052bc:	00800044 	movi	r2,1
100052c0:	3881951e 	bne	r7,r2,10005918 <__muldf3+0x7c0>
100052c4:	3027883a 	mov	r19,r6
100052c8:	0005883a 	mov	r2,zero
100052cc:	0021883a 	mov	r16,zero
100052d0:	002d883a 	mov	r22,zero
100052d4:	1004953a 	slli	r2,r2,20
100052d8:	98c03fcc 	andi	r3,r19,255
100052dc:	04400434 	movhi	r17,16
100052e0:	8c7fffc4 	addi	r17,r17,-1
100052e4:	180697fa 	slli	r3,r3,31
100052e8:	8460703a 	and	r16,r16,r17
100052ec:	80a0b03a 	or	r16,r16,r2
100052f0:	80c6b03a 	or	r3,r16,r3
100052f4:	b005883a 	mov	r2,r22
100052f8:	dfc01117 	ldw	ra,68(sp)
100052fc:	df001017 	ldw	fp,64(sp)
10005300:	ddc00f17 	ldw	r23,60(sp)
10005304:	dd800e17 	ldw	r22,56(sp)
10005308:	dd400d17 	ldw	r21,52(sp)
1000530c:	dd000c17 	ldw	r20,48(sp)
10005310:	dcc00b17 	ldw	r19,44(sp)
10005314:	dc800a17 	ldw	r18,40(sp)
10005318:	dc400917 	ldw	r17,36(sp)
1000531c:	dc000817 	ldw	r16,32(sp)
10005320:	dec01204 	addi	sp,sp,72
10005324:	f800283a 	ret
10005328:	2404b03a 	or	r2,r4,r16
1000532c:	202b883a 	mov	r21,r4
10005330:	10004426 	beq	r2,zero,10005444 <__muldf3+0x2ec>
10005334:	80015026 	beq	r16,zero,10005878 <__muldf3+0x720>
10005338:	8009883a 	mov	r4,r16
1000533c:	d9800715 	stw	r6,28(sp)
10005340:	d9c00215 	stw	r7,8(sp)
10005344:	da400415 	stw	r9,16(sp)
10005348:	00065740 	call	10006574 <__clzsi2>
1000534c:	d9800717 	ldw	r6,28(sp)
10005350:	d9c00217 	ldw	r7,8(sp)
10005354:	da400417 	ldw	r9,16(sp)
10005358:	10fffd44 	addi	r3,r2,-11
1000535c:	01000704 	movi	r4,28
10005360:	20c14116 	blt	r4,r3,10005868 <__muldf3+0x710>
10005364:	01000744 	movi	r4,29
10005368:	15bffe04 	addi	r22,r2,-8
1000536c:	20c9c83a 	sub	r4,r4,r3
10005370:	85a0983a 	sll	r16,r16,r22
10005374:	a908d83a 	srl	r4,r21,r4
10005378:	adac983a 	sll	r22,r21,r22
1000537c:	2420b03a 	or	r16,r4,r16
10005380:	053f0084 	movi	r20,-1022
10005384:	a0e9c83a 	sub	r20,r20,r3
10005388:	002b883a 	mov	r21,zero
1000538c:	000b883a 	mov	r5,zero
10005390:	003f9006 	br	100051d4 <__alt_data_end+0xf80051d4>
10005394:	3444b03a 	or	r2,r6,r17
10005398:	1000281e 	bne	r2,zero,1000543c <__muldf3+0x2e4>
1000539c:	0023883a 	mov	r17,zero
100053a0:	0025883a 	mov	r18,zero
100053a4:	01c00084 	movi	r7,2
100053a8:	003f9c06 	br	1000521c <__alt_data_end+0xf800521c>
100053ac:	3444b03a 	or	r2,r6,r17
100053b0:	10001e26 	beq	r2,zero,1000542c <__muldf3+0x2d4>
100053b4:	88012026 	beq	r17,zero,10005838 <__muldf3+0x6e0>
100053b8:	8809883a 	mov	r4,r17
100053bc:	d9400215 	stw	r5,8(sp)
100053c0:	d9800715 	stw	r6,28(sp)
100053c4:	da400415 	stw	r9,16(sp)
100053c8:	da800315 	stw	r10,12(sp)
100053cc:	00065740 	call	10006574 <__clzsi2>
100053d0:	d9400217 	ldw	r5,8(sp)
100053d4:	d9800717 	ldw	r6,28(sp)
100053d8:	da400417 	ldw	r9,16(sp)
100053dc:	da800317 	ldw	r10,12(sp)
100053e0:	113ffd44 	addi	r4,r2,-11
100053e4:	00c00704 	movi	r3,28
100053e8:	19010f16 	blt	r3,r4,10005828 <__muldf3+0x6d0>
100053ec:	00c00744 	movi	r3,29
100053f0:	14bffe04 	addi	r18,r2,-8
100053f4:	1907c83a 	sub	r3,r3,r4
100053f8:	8ca2983a 	sll	r17,r17,r18
100053fc:	30c6d83a 	srl	r3,r6,r3
10005400:	34a4983a 	sll	r18,r6,r18
10005404:	1c62b03a 	or	r17,r3,r17
10005408:	00ff0084 	movi	r3,-1022
1000540c:	1907c83a 	sub	r3,r3,r4
10005410:	000f883a 	mov	r7,zero
10005414:	003f8106 	br	1000521c <__alt_data_end+0xf800521c>
10005418:	3027883a 	mov	r19,r6
1000541c:	0081ffc4 	movi	r2,2047
10005420:	0021883a 	mov	r16,zero
10005424:	002d883a 	mov	r22,zero
10005428:	003faa06 	br	100052d4 <__alt_data_end+0xf80052d4>
1000542c:	0023883a 	mov	r17,zero
10005430:	0025883a 	mov	r18,zero
10005434:	01c00044 	movi	r7,1
10005438:	003f7806 	br	1000521c <__alt_data_end+0xf800521c>
1000543c:	01c000c4 	movi	r7,3
10005440:	003f7606 	br	1000521c <__alt_data_end+0xf800521c>
10005444:	05400104 	movi	r21,4
10005448:	0021883a 	mov	r16,zero
1000544c:	002d883a 	mov	r22,zero
10005450:	01400044 	movi	r5,1
10005454:	003f5f06 	br	100051d4 <__alt_data_end+0xf80051d4>
10005458:	05400304 	movi	r21,12
1000545c:	014000c4 	movi	r5,3
10005460:	003f5c06 	br	100051d4 <__alt_data_end+0xf80051d4>
10005464:	04000434 	movhi	r16,16
10005468:	0027883a 	mov	r19,zero
1000546c:	843fffc4 	addi	r16,r16,-1
10005470:	05bfffc4 	movi	r22,-1
10005474:	0081ffc4 	movi	r2,2047
10005478:	003f9606 	br	100052d4 <__alt_data_end+0xf80052d4>
1000547c:	8023883a 	mov	r17,r16
10005480:	b025883a 	mov	r18,r22
10005484:	280f883a 	mov	r7,r5
10005488:	003f8806 	br	100052ac <__alt_data_end+0xf80052ac>
1000548c:	8023883a 	mov	r17,r16
10005490:	b025883a 	mov	r18,r22
10005494:	480d883a 	mov	r6,r9
10005498:	280f883a 	mov	r7,r5
1000549c:	003f8306 	br	100052ac <__alt_data_end+0xf80052ac>
100054a0:	b028d43a 	srli	r20,r22,16
100054a4:	902ed43a 	srli	r23,r18,16
100054a8:	b5bfffcc 	andi	r22,r22,65535
100054ac:	94bfffcc 	andi	r18,r18,65535
100054b0:	b00b883a 	mov	r5,r22
100054b4:	9009883a 	mov	r4,r18
100054b8:	d8c00515 	stw	r3,20(sp)
100054bc:	d9800715 	stw	r6,28(sp)
100054c0:	da000615 	stw	r8,24(sp)
100054c4:	00065d80 	call	100065d8 <__mulsi3>
100054c8:	a00b883a 	mov	r5,r20
100054cc:	9009883a 	mov	r4,r18
100054d0:	1027883a 	mov	r19,r2
100054d4:	00065d80 	call	100065d8 <__mulsi3>
100054d8:	b80b883a 	mov	r5,r23
100054dc:	a009883a 	mov	r4,r20
100054e0:	102b883a 	mov	r21,r2
100054e4:	00065d80 	call	100065d8 <__mulsi3>
100054e8:	b809883a 	mov	r4,r23
100054ec:	b00b883a 	mov	r5,r22
100054f0:	1039883a 	mov	fp,r2
100054f4:	00065d80 	call	100065d8 <__mulsi3>
100054f8:	9808d43a 	srli	r4,r19,16
100054fc:	1545883a 	add	r2,r2,r21
10005500:	d8c00517 	ldw	r3,20(sp)
10005504:	2085883a 	add	r2,r4,r2
10005508:	d9800717 	ldw	r6,28(sp)
1000550c:	da000617 	ldw	r8,24(sp)
10005510:	1540022e 	bgeu	r2,r21,1000551c <__muldf3+0x3c4>
10005514:	01000074 	movhi	r4,1
10005518:	e139883a 	add	fp,fp,r4
1000551c:	100e943a 	slli	r7,r2,16
10005520:	1004d43a 	srli	r2,r2,16
10005524:	882ad43a 	srli	r21,r17,16
10005528:	9cffffcc 	andi	r19,r19,65535
1000552c:	8c7fffcc 	andi	r17,r17,65535
10005530:	3ce7883a 	add	r19,r7,r19
10005534:	b00b883a 	mov	r5,r22
10005538:	8809883a 	mov	r4,r17
1000553c:	d8c00515 	stw	r3,20(sp)
10005540:	d9800715 	stw	r6,28(sp)
10005544:	da000615 	stw	r8,24(sp)
10005548:	dcc00115 	stw	r19,4(sp)
1000554c:	d8800015 	stw	r2,0(sp)
10005550:	00065d80 	call	100065d8 <__mulsi3>
10005554:	a00b883a 	mov	r5,r20
10005558:	8809883a 	mov	r4,r17
1000555c:	d8800215 	stw	r2,8(sp)
10005560:	00065d80 	call	100065d8 <__mulsi3>
10005564:	a009883a 	mov	r4,r20
10005568:	a80b883a 	mov	r5,r21
1000556c:	1027883a 	mov	r19,r2
10005570:	00065d80 	call	100065d8 <__mulsi3>
10005574:	a809883a 	mov	r4,r21
10005578:	b00b883a 	mov	r5,r22
1000557c:	1029883a 	mov	r20,r2
10005580:	00065d80 	call	100065d8 <__mulsi3>
10005584:	d9c00217 	ldw	r7,8(sp)
10005588:	14c5883a 	add	r2,r2,r19
1000558c:	d8c00517 	ldw	r3,20(sp)
10005590:	3808d43a 	srli	r4,r7,16
10005594:	d9800717 	ldw	r6,28(sp)
10005598:	da000617 	ldw	r8,24(sp)
1000559c:	2085883a 	add	r2,r4,r2
100055a0:	14c0022e 	bgeu	r2,r19,100055ac <__muldf3+0x454>
100055a4:	01000074 	movhi	r4,1
100055a8:	a129883a 	add	r20,r20,r4
100055ac:	1012d43a 	srli	r9,r2,16
100055b0:	1004943a 	slli	r2,r2,16
100055b4:	802cd43a 	srli	r22,r16,16
100055b8:	843fffcc 	andi	r16,r16,65535
100055bc:	3cffffcc 	andi	r19,r7,65535
100055c0:	9009883a 	mov	r4,r18
100055c4:	800b883a 	mov	r5,r16
100055c8:	4d29883a 	add	r20,r9,r20
100055cc:	d8c00515 	stw	r3,20(sp)
100055d0:	d9800715 	stw	r6,28(sp)
100055d4:	da000615 	stw	r8,24(sp)
100055d8:	14e7883a 	add	r19,r2,r19
100055dc:	00065d80 	call	100065d8 <__mulsi3>
100055e0:	9009883a 	mov	r4,r18
100055e4:	b00b883a 	mov	r5,r22
100055e8:	d8800315 	stw	r2,12(sp)
100055ec:	00065d80 	call	100065d8 <__mulsi3>
100055f0:	b809883a 	mov	r4,r23
100055f4:	b00b883a 	mov	r5,r22
100055f8:	d8800215 	stw	r2,8(sp)
100055fc:	00065d80 	call	100065d8 <__mulsi3>
10005600:	b80b883a 	mov	r5,r23
10005604:	8009883a 	mov	r4,r16
10005608:	d8800415 	stw	r2,16(sp)
1000560c:	00065d80 	call	100065d8 <__mulsi3>
10005610:	da800317 	ldw	r10,12(sp)
10005614:	d9c00217 	ldw	r7,8(sp)
10005618:	d9000017 	ldw	r4,0(sp)
1000561c:	502ed43a 	srli	r23,r10,16
10005620:	11c5883a 	add	r2,r2,r7
10005624:	24e5883a 	add	r18,r4,r19
10005628:	b885883a 	add	r2,r23,r2
1000562c:	d8c00517 	ldw	r3,20(sp)
10005630:	d9800717 	ldw	r6,28(sp)
10005634:	da000617 	ldw	r8,24(sp)
10005638:	da400417 	ldw	r9,16(sp)
1000563c:	11c0022e 	bgeu	r2,r7,10005648 <__muldf3+0x4f0>
10005640:	01000074 	movhi	r4,1
10005644:	4913883a 	add	r9,r9,r4
10005648:	100ed43a 	srli	r7,r2,16
1000564c:	1004943a 	slli	r2,r2,16
10005650:	55ffffcc 	andi	r23,r10,65535
10005654:	3a53883a 	add	r9,r7,r9
10005658:	8809883a 	mov	r4,r17
1000565c:	800b883a 	mov	r5,r16
10005660:	d8c00515 	stw	r3,20(sp)
10005664:	d9800715 	stw	r6,28(sp)
10005668:	da000615 	stw	r8,24(sp)
1000566c:	da400415 	stw	r9,16(sp)
10005670:	15ef883a 	add	r23,r2,r23
10005674:	00065d80 	call	100065d8 <__mulsi3>
10005678:	8809883a 	mov	r4,r17
1000567c:	b00b883a 	mov	r5,r22
10005680:	d8800215 	stw	r2,8(sp)
10005684:	00065d80 	call	100065d8 <__mulsi3>
10005688:	b00b883a 	mov	r5,r22
1000568c:	a809883a 	mov	r4,r21
10005690:	d8800315 	stw	r2,12(sp)
10005694:	00065d80 	call	100065d8 <__mulsi3>
10005698:	8009883a 	mov	r4,r16
1000569c:	a80b883a 	mov	r5,r21
100056a0:	1023883a 	mov	r17,r2
100056a4:	00065d80 	call	100065d8 <__mulsi3>
100056a8:	d9c00217 	ldw	r7,8(sp)
100056ac:	da800317 	ldw	r10,12(sp)
100056b0:	d8c00517 	ldw	r3,20(sp)
100056b4:	3808d43a 	srli	r4,r7,16
100056b8:	1285883a 	add	r2,r2,r10
100056bc:	d9800717 	ldw	r6,28(sp)
100056c0:	2085883a 	add	r2,r4,r2
100056c4:	da000617 	ldw	r8,24(sp)
100056c8:	da400417 	ldw	r9,16(sp)
100056cc:	1280022e 	bgeu	r2,r10,100056d8 <__muldf3+0x580>
100056d0:	01000074 	movhi	r4,1
100056d4:	8923883a 	add	r17,r17,r4
100056d8:	1008943a 	slli	r4,r2,16
100056dc:	39ffffcc 	andi	r7,r7,65535
100056e0:	e4b9883a 	add	fp,fp,r18
100056e4:	21cf883a 	add	r7,r4,r7
100056e8:	e4e7803a 	cmpltu	r19,fp,r19
100056ec:	3d0f883a 	add	r7,r7,r20
100056f0:	bf39883a 	add	fp,r23,fp
100056f4:	99c9883a 	add	r4,r19,r7
100056f8:	e5ef803a 	cmpltu	r23,fp,r23
100056fc:	490b883a 	add	r5,r9,r4
10005700:	1004d43a 	srli	r2,r2,16
10005704:	b965883a 	add	r18,r23,r5
10005708:	24c9803a 	cmpltu	r4,r4,r19
1000570c:	3d29803a 	cmpltu	r20,r7,r20
10005710:	a128b03a 	or	r20,r20,r4
10005714:	95ef803a 	cmpltu	r23,r18,r23
10005718:	2a53803a 	cmpltu	r9,r5,r9
1000571c:	a0a9883a 	add	r20,r20,r2
10005720:	4deeb03a 	or	r23,r9,r23
10005724:	a5ef883a 	add	r23,r20,r23
10005728:	bc63883a 	add	r17,r23,r17
1000572c:	e004927a 	slli	r2,fp,9
10005730:	d9000117 	ldw	r4,4(sp)
10005734:	882e927a 	slli	r23,r17,9
10005738:	9022d5fa 	srli	r17,r18,23
1000573c:	e038d5fa 	srli	fp,fp,23
10005740:	1104b03a 	or	r2,r2,r4
10005744:	9024927a 	slli	r18,r18,9
10005748:	1004c03a 	cmpne	r2,r2,zero
1000574c:	bc62b03a 	or	r17,r23,r17
10005750:	1738b03a 	or	fp,r2,fp
10005754:	8880402c 	andhi	r2,r17,256
10005758:	e4a4b03a 	or	r18,fp,r18
1000575c:	10000726 	beq	r2,zero,1000577c <__muldf3+0x624>
10005760:	9006d07a 	srli	r3,r18,1
10005764:	880497fa 	slli	r2,r17,31
10005768:	9480004c 	andi	r18,r18,1
1000576c:	8822d07a 	srli	r17,r17,1
10005770:	1ca4b03a 	or	r18,r3,r18
10005774:	14a4b03a 	or	r18,r2,r18
10005778:	4007883a 	mov	r3,r8
1000577c:	1880ffc4 	addi	r2,r3,1023
10005780:	0080460e 	bge	zero,r2,1000589c <__muldf3+0x744>
10005784:	910001cc 	andi	r4,r18,7
10005788:	20000726 	beq	r4,zero,100057a8 <__muldf3+0x650>
1000578c:	910003cc 	andi	r4,r18,15
10005790:	01400104 	movi	r5,4
10005794:	21400426 	beq	r4,r5,100057a8 <__muldf3+0x650>
10005798:	9149883a 	add	r4,r18,r5
1000579c:	24a5803a 	cmpltu	r18,r4,r18
100057a0:	8ca3883a 	add	r17,r17,r18
100057a4:	2025883a 	mov	r18,r4
100057a8:	8900402c 	andhi	r4,r17,256
100057ac:	20000426 	beq	r4,zero,100057c0 <__muldf3+0x668>
100057b0:	18810004 	addi	r2,r3,1024
100057b4:	00ffc034 	movhi	r3,65280
100057b8:	18ffffc4 	addi	r3,r3,-1
100057bc:	88e2703a 	and	r17,r17,r3
100057c0:	00c1ff84 	movi	r3,2046
100057c4:	18bf1416 	blt	r3,r2,10005418 <__alt_data_end+0xf8005418>
100057c8:	882c977a 	slli	r22,r17,29
100057cc:	9024d0fa 	srli	r18,r18,3
100057d0:	8822927a 	slli	r17,r17,9
100057d4:	1081ffcc 	andi	r2,r2,2047
100057d8:	b4acb03a 	or	r22,r22,r18
100057dc:	8820d33a 	srli	r16,r17,12
100057e0:	3027883a 	mov	r19,r6
100057e4:	003ebb06 	br	100052d4 <__alt_data_end+0xf80052d4>
100057e8:	8080022c 	andhi	r2,r16,8
100057ec:	10000926 	beq	r2,zero,10005814 <__muldf3+0x6bc>
100057f0:	8880022c 	andhi	r2,r17,8
100057f4:	1000071e 	bne	r2,zero,10005814 <__muldf3+0x6bc>
100057f8:	00800434 	movhi	r2,16
100057fc:	8c000234 	orhi	r16,r17,8
10005800:	10bfffc4 	addi	r2,r2,-1
10005804:	e027883a 	mov	r19,fp
10005808:	80a0703a 	and	r16,r16,r2
1000580c:	902d883a 	mov	r22,r18
10005810:	003f1806 	br	10005474 <__alt_data_end+0xf8005474>
10005814:	00800434 	movhi	r2,16
10005818:	84000234 	orhi	r16,r16,8
1000581c:	10bfffc4 	addi	r2,r2,-1
10005820:	80a0703a 	and	r16,r16,r2
10005824:	003f1306 	br	10005474 <__alt_data_end+0xf8005474>
10005828:	147ff604 	addi	r17,r2,-40
1000582c:	3462983a 	sll	r17,r6,r17
10005830:	0025883a 	mov	r18,zero
10005834:	003ef406 	br	10005408 <__alt_data_end+0xf8005408>
10005838:	3009883a 	mov	r4,r6
1000583c:	d9400215 	stw	r5,8(sp)
10005840:	d9800715 	stw	r6,28(sp)
10005844:	da400415 	stw	r9,16(sp)
10005848:	da800315 	stw	r10,12(sp)
1000584c:	00065740 	call	10006574 <__clzsi2>
10005850:	10800804 	addi	r2,r2,32
10005854:	da800317 	ldw	r10,12(sp)
10005858:	da400417 	ldw	r9,16(sp)
1000585c:	d9800717 	ldw	r6,28(sp)
10005860:	d9400217 	ldw	r5,8(sp)
10005864:	003ede06 	br	100053e0 <__alt_data_end+0xf80053e0>
10005868:	143ff604 	addi	r16,r2,-40
1000586c:	ac20983a 	sll	r16,r21,r16
10005870:	002d883a 	mov	r22,zero
10005874:	003ec206 	br	10005380 <__alt_data_end+0xf8005380>
10005878:	d9800715 	stw	r6,28(sp)
1000587c:	d9c00215 	stw	r7,8(sp)
10005880:	da400415 	stw	r9,16(sp)
10005884:	00065740 	call	10006574 <__clzsi2>
10005888:	10800804 	addi	r2,r2,32
1000588c:	da400417 	ldw	r9,16(sp)
10005890:	d9c00217 	ldw	r7,8(sp)
10005894:	d9800717 	ldw	r6,28(sp)
10005898:	003eaf06 	br	10005358 <__alt_data_end+0xf8005358>
1000589c:	00c00044 	movi	r3,1
100058a0:	1887c83a 	sub	r3,r3,r2
100058a4:	01000e04 	movi	r4,56
100058a8:	20fe8616 	blt	r4,r3,100052c4 <__alt_data_end+0xf80052c4>
100058ac:	010007c4 	movi	r4,31
100058b0:	20c01b16 	blt	r4,r3,10005920 <__muldf3+0x7c8>
100058b4:	00800804 	movi	r2,32
100058b8:	10c5c83a 	sub	r2,r2,r3
100058bc:	888a983a 	sll	r5,r17,r2
100058c0:	90c8d83a 	srl	r4,r18,r3
100058c4:	9084983a 	sll	r2,r18,r2
100058c8:	88e2d83a 	srl	r17,r17,r3
100058cc:	2906b03a 	or	r3,r5,r4
100058d0:	1004c03a 	cmpne	r2,r2,zero
100058d4:	1886b03a 	or	r3,r3,r2
100058d8:	188001cc 	andi	r2,r3,7
100058dc:	10000726 	beq	r2,zero,100058fc <__muldf3+0x7a4>
100058e0:	188003cc 	andi	r2,r3,15
100058e4:	01000104 	movi	r4,4
100058e8:	11000426 	beq	r2,r4,100058fc <__muldf3+0x7a4>
100058ec:	1805883a 	mov	r2,r3
100058f0:	10c00104 	addi	r3,r2,4
100058f4:	1885803a 	cmpltu	r2,r3,r2
100058f8:	88a3883a 	add	r17,r17,r2
100058fc:	8880202c 	andhi	r2,r17,128
10005900:	10001c26 	beq	r2,zero,10005974 <__muldf3+0x81c>
10005904:	3027883a 	mov	r19,r6
10005908:	00800044 	movi	r2,1
1000590c:	0021883a 	mov	r16,zero
10005910:	002d883a 	mov	r22,zero
10005914:	003e6f06 	br	100052d4 <__alt_data_end+0xf80052d4>
10005918:	4007883a 	mov	r3,r8
1000591c:	003f9706 	br	1000577c <__alt_data_end+0xf800577c>
10005920:	017ff844 	movi	r5,-31
10005924:	2885c83a 	sub	r2,r5,r2
10005928:	888ad83a 	srl	r5,r17,r2
1000592c:	00800804 	movi	r2,32
10005930:	18801a26 	beq	r3,r2,1000599c <__muldf3+0x844>
10005934:	01001004 	movi	r4,64
10005938:	20c7c83a 	sub	r3,r4,r3
1000593c:	88e2983a 	sll	r17,r17,r3
10005940:	8ca4b03a 	or	r18,r17,r18
10005944:	9004c03a 	cmpne	r2,r18,zero
10005948:	2884b03a 	or	r2,r5,r2
1000594c:	144001cc 	andi	r17,r2,7
10005950:	88000d1e 	bne	r17,zero,10005988 <__muldf3+0x830>
10005954:	0021883a 	mov	r16,zero
10005958:	102cd0fa 	srli	r22,r2,3
1000595c:	3027883a 	mov	r19,r6
10005960:	0005883a 	mov	r2,zero
10005964:	b46cb03a 	or	r22,r22,r17
10005968:	003e5a06 	br	100052d4 <__alt_data_end+0xf80052d4>
1000596c:	1007883a 	mov	r3,r2
10005970:	0023883a 	mov	r17,zero
10005974:	8820927a 	slli	r16,r17,9
10005978:	1805883a 	mov	r2,r3
1000597c:	8822977a 	slli	r17,r17,29
10005980:	8020d33a 	srli	r16,r16,12
10005984:	003ff406 	br	10005958 <__alt_data_end+0xf8005958>
10005988:	10c003cc 	andi	r3,r2,15
1000598c:	01000104 	movi	r4,4
10005990:	193ff626 	beq	r3,r4,1000596c <__alt_data_end+0xf800596c>
10005994:	0023883a 	mov	r17,zero
10005998:	003fd506 	br	100058f0 <__alt_data_end+0xf80058f0>
1000599c:	0023883a 	mov	r17,zero
100059a0:	003fe706 	br	10005940 <__alt_data_end+0xf8005940>
100059a4:	00800434 	movhi	r2,16
100059a8:	8c000234 	orhi	r16,r17,8
100059ac:	10bfffc4 	addi	r2,r2,-1
100059b0:	3027883a 	mov	r19,r6
100059b4:	80a0703a 	and	r16,r16,r2
100059b8:	902d883a 	mov	r22,r18
100059bc:	003ead06 	br	10005474 <__alt_data_end+0xf8005474>

100059c0 <__subdf3>:
100059c0:	02000434 	movhi	r8,16
100059c4:	423fffc4 	addi	r8,r8,-1
100059c8:	defffb04 	addi	sp,sp,-20
100059cc:	2a14703a 	and	r10,r5,r8
100059d0:	3812d53a 	srli	r9,r7,20
100059d4:	3a10703a 	and	r8,r7,r8
100059d8:	2006d77a 	srli	r3,r4,29
100059dc:	3004d77a 	srli	r2,r6,29
100059e0:	dc000015 	stw	r16,0(sp)
100059e4:	501490fa 	slli	r10,r10,3
100059e8:	2820d53a 	srli	r16,r5,20
100059ec:	401090fa 	slli	r8,r8,3
100059f0:	dc800215 	stw	r18,8(sp)
100059f4:	dc400115 	stw	r17,4(sp)
100059f8:	dfc00415 	stw	ra,16(sp)
100059fc:	202290fa 	slli	r17,r4,3
10005a00:	dcc00315 	stw	r19,12(sp)
10005a04:	4a41ffcc 	andi	r9,r9,2047
10005a08:	0101ffc4 	movi	r4,2047
10005a0c:	2824d7fa 	srli	r18,r5,31
10005a10:	8401ffcc 	andi	r16,r16,2047
10005a14:	50c6b03a 	or	r3,r10,r3
10005a18:	380ed7fa 	srli	r7,r7,31
10005a1c:	408ab03a 	or	r5,r8,r2
10005a20:	300c90fa 	slli	r6,r6,3
10005a24:	49009626 	beq	r9,r4,10005c80 <__subdf3+0x2c0>
10005a28:	39c0005c 	xori	r7,r7,1
10005a2c:	8245c83a 	sub	r2,r16,r9
10005a30:	3c807426 	beq	r7,r18,10005c04 <__subdf3+0x244>
10005a34:	0080af0e 	bge	zero,r2,10005cf4 <__subdf3+0x334>
10005a38:	48002a1e 	bne	r9,zero,10005ae4 <__subdf3+0x124>
10005a3c:	2988b03a 	or	r4,r5,r6
10005a40:	20009a1e 	bne	r4,zero,10005cac <__subdf3+0x2ec>
10005a44:	888001cc 	andi	r2,r17,7
10005a48:	10000726 	beq	r2,zero,10005a68 <__subdf3+0xa8>
10005a4c:	888003cc 	andi	r2,r17,15
10005a50:	01000104 	movi	r4,4
10005a54:	11000426 	beq	r2,r4,10005a68 <__subdf3+0xa8>
10005a58:	890b883a 	add	r5,r17,r4
10005a5c:	2c63803a 	cmpltu	r17,r5,r17
10005a60:	1c47883a 	add	r3,r3,r17
10005a64:	2823883a 	mov	r17,r5
10005a68:	1880202c 	andhi	r2,r3,128
10005a6c:	10005926 	beq	r2,zero,10005bd4 <__subdf3+0x214>
10005a70:	84000044 	addi	r16,r16,1
10005a74:	0081ffc4 	movi	r2,2047
10005a78:	8080be26 	beq	r16,r2,10005d74 <__subdf3+0x3b4>
10005a7c:	017fe034 	movhi	r5,65408
10005a80:	297fffc4 	addi	r5,r5,-1
10005a84:	1946703a 	and	r3,r3,r5
10005a88:	1804977a 	slli	r2,r3,29
10005a8c:	1806927a 	slli	r3,r3,9
10005a90:	8822d0fa 	srli	r17,r17,3
10005a94:	8401ffcc 	andi	r16,r16,2047
10005a98:	180ad33a 	srli	r5,r3,12
10005a9c:	9100004c 	andi	r4,r18,1
10005aa0:	1444b03a 	or	r2,r2,r17
10005aa4:	80c1ffcc 	andi	r3,r16,2047
10005aa8:	1820953a 	slli	r16,r3,20
10005aac:	20c03fcc 	andi	r3,r4,255
10005ab0:	180897fa 	slli	r4,r3,31
10005ab4:	00c00434 	movhi	r3,16
10005ab8:	18ffffc4 	addi	r3,r3,-1
10005abc:	28c6703a 	and	r3,r5,r3
10005ac0:	1c06b03a 	or	r3,r3,r16
10005ac4:	1906b03a 	or	r3,r3,r4
10005ac8:	dfc00417 	ldw	ra,16(sp)
10005acc:	dcc00317 	ldw	r19,12(sp)
10005ad0:	dc800217 	ldw	r18,8(sp)
10005ad4:	dc400117 	ldw	r17,4(sp)
10005ad8:	dc000017 	ldw	r16,0(sp)
10005adc:	dec00504 	addi	sp,sp,20
10005ae0:	f800283a 	ret
10005ae4:	0101ffc4 	movi	r4,2047
10005ae8:	813fd626 	beq	r16,r4,10005a44 <__alt_data_end+0xf8005a44>
10005aec:	29402034 	orhi	r5,r5,128
10005af0:	01000e04 	movi	r4,56
10005af4:	2080a316 	blt	r4,r2,10005d84 <__subdf3+0x3c4>
10005af8:	010007c4 	movi	r4,31
10005afc:	2080c616 	blt	r4,r2,10005e18 <__subdf3+0x458>
10005b00:	01000804 	movi	r4,32
10005b04:	2089c83a 	sub	r4,r4,r2
10005b08:	2910983a 	sll	r8,r5,r4
10005b0c:	308ed83a 	srl	r7,r6,r2
10005b10:	3108983a 	sll	r4,r6,r4
10005b14:	2884d83a 	srl	r2,r5,r2
10005b18:	41ccb03a 	or	r6,r8,r7
10005b1c:	2008c03a 	cmpne	r4,r4,zero
10005b20:	310cb03a 	or	r6,r6,r4
10005b24:	898dc83a 	sub	r6,r17,r6
10005b28:	89a3803a 	cmpltu	r17,r17,r6
10005b2c:	1887c83a 	sub	r3,r3,r2
10005b30:	1c47c83a 	sub	r3,r3,r17
10005b34:	3023883a 	mov	r17,r6
10005b38:	1880202c 	andhi	r2,r3,128
10005b3c:	10002326 	beq	r2,zero,10005bcc <__subdf3+0x20c>
10005b40:	04c02034 	movhi	r19,128
10005b44:	9cffffc4 	addi	r19,r19,-1
10005b48:	1ce6703a 	and	r19,r3,r19
10005b4c:	98007a26 	beq	r19,zero,10005d38 <__subdf3+0x378>
10005b50:	9809883a 	mov	r4,r19
10005b54:	00065740 	call	10006574 <__clzsi2>
10005b58:	113ffe04 	addi	r4,r2,-8
10005b5c:	00c007c4 	movi	r3,31
10005b60:	19007b16 	blt	r3,r4,10005d50 <__subdf3+0x390>
10005b64:	00800804 	movi	r2,32
10005b68:	1105c83a 	sub	r2,r2,r4
10005b6c:	8884d83a 	srl	r2,r17,r2
10005b70:	9906983a 	sll	r3,r19,r4
10005b74:	8922983a 	sll	r17,r17,r4
10005b78:	10c4b03a 	or	r2,r2,r3
10005b7c:	24007816 	blt	r4,r16,10005d60 <__subdf3+0x3a0>
10005b80:	2421c83a 	sub	r16,r4,r16
10005b84:	80c00044 	addi	r3,r16,1
10005b88:	010007c4 	movi	r4,31
10005b8c:	20c09516 	blt	r4,r3,10005de4 <__subdf3+0x424>
10005b90:	01400804 	movi	r5,32
10005b94:	28cbc83a 	sub	r5,r5,r3
10005b98:	88c8d83a 	srl	r4,r17,r3
10005b9c:	8962983a 	sll	r17,r17,r5
10005ba0:	114a983a 	sll	r5,r2,r5
10005ba4:	10c6d83a 	srl	r3,r2,r3
10005ba8:	8804c03a 	cmpne	r2,r17,zero
10005bac:	290ab03a 	or	r5,r5,r4
10005bb0:	28a2b03a 	or	r17,r5,r2
10005bb4:	0021883a 	mov	r16,zero
10005bb8:	003fa206 	br	10005a44 <__alt_data_end+0xf8005a44>
10005bbc:	2090b03a 	or	r8,r4,r2
10005bc0:	40018e26 	beq	r8,zero,100061fc <__subdf3+0x83c>
10005bc4:	1007883a 	mov	r3,r2
10005bc8:	2023883a 	mov	r17,r4
10005bcc:	888001cc 	andi	r2,r17,7
10005bd0:	103f9e1e 	bne	r2,zero,10005a4c <__alt_data_end+0xf8005a4c>
10005bd4:	1804977a 	slli	r2,r3,29
10005bd8:	8822d0fa 	srli	r17,r17,3
10005bdc:	1810d0fa 	srli	r8,r3,3
10005be0:	9100004c 	andi	r4,r18,1
10005be4:	1444b03a 	or	r2,r2,r17
10005be8:	00c1ffc4 	movi	r3,2047
10005bec:	80c02826 	beq	r16,r3,10005c90 <__subdf3+0x2d0>
10005bf0:	01400434 	movhi	r5,16
10005bf4:	297fffc4 	addi	r5,r5,-1
10005bf8:	80e0703a 	and	r16,r16,r3
10005bfc:	414a703a 	and	r5,r8,r5
10005c00:	003fa806 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005c04:	0080630e 	bge	zero,r2,10005d94 <__subdf3+0x3d4>
10005c08:	48003026 	beq	r9,zero,10005ccc <__subdf3+0x30c>
10005c0c:	0101ffc4 	movi	r4,2047
10005c10:	813f8c26 	beq	r16,r4,10005a44 <__alt_data_end+0xf8005a44>
10005c14:	29402034 	orhi	r5,r5,128
10005c18:	01000e04 	movi	r4,56
10005c1c:	2080a90e 	bge	r4,r2,10005ec4 <__subdf3+0x504>
10005c20:	298cb03a 	or	r6,r5,r6
10005c24:	3012c03a 	cmpne	r9,r6,zero
10005c28:	0005883a 	mov	r2,zero
10005c2c:	4c53883a 	add	r9,r9,r17
10005c30:	4c63803a 	cmpltu	r17,r9,r17
10005c34:	10c7883a 	add	r3,r2,r3
10005c38:	88c7883a 	add	r3,r17,r3
10005c3c:	4823883a 	mov	r17,r9
10005c40:	1880202c 	andhi	r2,r3,128
10005c44:	1000d026 	beq	r2,zero,10005f88 <__subdf3+0x5c8>
10005c48:	84000044 	addi	r16,r16,1
10005c4c:	0081ffc4 	movi	r2,2047
10005c50:	8080fe26 	beq	r16,r2,1000604c <__subdf3+0x68c>
10005c54:	00bfe034 	movhi	r2,65408
10005c58:	10bfffc4 	addi	r2,r2,-1
10005c5c:	1886703a 	and	r3,r3,r2
10005c60:	880ad07a 	srli	r5,r17,1
10005c64:	180497fa 	slli	r2,r3,31
10005c68:	8900004c 	andi	r4,r17,1
10005c6c:	2922b03a 	or	r17,r5,r4
10005c70:	1806d07a 	srli	r3,r3,1
10005c74:	1462b03a 	or	r17,r2,r17
10005c78:	3825883a 	mov	r18,r7
10005c7c:	003f7106 	br	10005a44 <__alt_data_end+0xf8005a44>
10005c80:	2984b03a 	or	r2,r5,r6
10005c84:	103f6826 	beq	r2,zero,10005a28 <__alt_data_end+0xf8005a28>
10005c88:	39c03fcc 	andi	r7,r7,255
10005c8c:	003f6706 	br	10005a2c <__alt_data_end+0xf8005a2c>
10005c90:	4086b03a 	or	r3,r8,r2
10005c94:	18015226 	beq	r3,zero,100061e0 <__subdf3+0x820>
10005c98:	00c00434 	movhi	r3,16
10005c9c:	41400234 	orhi	r5,r8,8
10005ca0:	18ffffc4 	addi	r3,r3,-1
10005ca4:	28ca703a 	and	r5,r5,r3
10005ca8:	003f7e06 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005cac:	10bfffc4 	addi	r2,r2,-1
10005cb0:	1000491e 	bne	r2,zero,10005dd8 <__subdf3+0x418>
10005cb4:	898fc83a 	sub	r7,r17,r6
10005cb8:	89e3803a 	cmpltu	r17,r17,r7
10005cbc:	1947c83a 	sub	r3,r3,r5
10005cc0:	1c47c83a 	sub	r3,r3,r17
10005cc4:	3823883a 	mov	r17,r7
10005cc8:	003f9b06 	br	10005b38 <__alt_data_end+0xf8005b38>
10005ccc:	2988b03a 	or	r4,r5,r6
10005cd0:	203f5c26 	beq	r4,zero,10005a44 <__alt_data_end+0xf8005a44>
10005cd4:	10bfffc4 	addi	r2,r2,-1
10005cd8:	1000931e 	bne	r2,zero,10005f28 <__subdf3+0x568>
10005cdc:	898d883a 	add	r6,r17,r6
10005ce0:	3463803a 	cmpltu	r17,r6,r17
10005ce4:	1947883a 	add	r3,r3,r5
10005ce8:	88c7883a 	add	r3,r17,r3
10005cec:	3023883a 	mov	r17,r6
10005cf0:	003fd306 	br	10005c40 <__alt_data_end+0xf8005c40>
10005cf4:	1000541e 	bne	r2,zero,10005e48 <__subdf3+0x488>
10005cf8:	80800044 	addi	r2,r16,1
10005cfc:	1081ffcc 	andi	r2,r2,2047
10005d00:	01000044 	movi	r4,1
10005d04:	2080a20e 	bge	r4,r2,10005f90 <__subdf3+0x5d0>
10005d08:	8989c83a 	sub	r4,r17,r6
10005d0c:	8905803a 	cmpltu	r2,r17,r4
10005d10:	1967c83a 	sub	r19,r3,r5
10005d14:	98a7c83a 	sub	r19,r19,r2
10005d18:	9880202c 	andhi	r2,r19,128
10005d1c:	10006326 	beq	r2,zero,10005eac <__subdf3+0x4ec>
10005d20:	3463c83a 	sub	r17,r6,r17
10005d24:	28c7c83a 	sub	r3,r5,r3
10005d28:	344d803a 	cmpltu	r6,r6,r17
10005d2c:	19a7c83a 	sub	r19,r3,r6
10005d30:	3825883a 	mov	r18,r7
10005d34:	983f861e 	bne	r19,zero,10005b50 <__alt_data_end+0xf8005b50>
10005d38:	8809883a 	mov	r4,r17
10005d3c:	00065740 	call	10006574 <__clzsi2>
10005d40:	10800804 	addi	r2,r2,32
10005d44:	113ffe04 	addi	r4,r2,-8
10005d48:	00c007c4 	movi	r3,31
10005d4c:	193f850e 	bge	r3,r4,10005b64 <__alt_data_end+0xf8005b64>
10005d50:	10bff604 	addi	r2,r2,-40
10005d54:	8884983a 	sll	r2,r17,r2
10005d58:	0023883a 	mov	r17,zero
10005d5c:	243f880e 	bge	r4,r16,10005b80 <__alt_data_end+0xf8005b80>
10005d60:	00ffe034 	movhi	r3,65408
10005d64:	18ffffc4 	addi	r3,r3,-1
10005d68:	8121c83a 	sub	r16,r16,r4
10005d6c:	10c6703a 	and	r3,r2,r3
10005d70:	003f3406 	br	10005a44 <__alt_data_end+0xf8005a44>
10005d74:	9100004c 	andi	r4,r18,1
10005d78:	000b883a 	mov	r5,zero
10005d7c:	0005883a 	mov	r2,zero
10005d80:	003f4806 	br	10005aa4 <__alt_data_end+0xf8005aa4>
10005d84:	298cb03a 	or	r6,r5,r6
10005d88:	300cc03a 	cmpne	r6,r6,zero
10005d8c:	0005883a 	mov	r2,zero
10005d90:	003f6406 	br	10005b24 <__alt_data_end+0xf8005b24>
10005d94:	10009a1e 	bne	r2,zero,10006000 <__subdf3+0x640>
10005d98:	82400044 	addi	r9,r16,1
10005d9c:	4881ffcc 	andi	r2,r9,2047
10005da0:	02800044 	movi	r10,1
10005da4:	5080670e 	bge	r10,r2,10005f44 <__subdf3+0x584>
10005da8:	0081ffc4 	movi	r2,2047
10005dac:	4880af26 	beq	r9,r2,1000606c <__subdf3+0x6ac>
10005db0:	898d883a 	add	r6,r17,r6
10005db4:	1945883a 	add	r2,r3,r5
10005db8:	3447803a 	cmpltu	r3,r6,r17
10005dbc:	1887883a 	add	r3,r3,r2
10005dc0:	182297fa 	slli	r17,r3,31
10005dc4:	300cd07a 	srli	r6,r6,1
10005dc8:	1806d07a 	srli	r3,r3,1
10005dcc:	4821883a 	mov	r16,r9
10005dd0:	89a2b03a 	or	r17,r17,r6
10005dd4:	003f1b06 	br	10005a44 <__alt_data_end+0xf8005a44>
10005dd8:	0101ffc4 	movi	r4,2047
10005ddc:	813f441e 	bne	r16,r4,10005af0 <__alt_data_end+0xf8005af0>
10005de0:	003f1806 	br	10005a44 <__alt_data_end+0xf8005a44>
10005de4:	843ff844 	addi	r16,r16,-31
10005de8:	01400804 	movi	r5,32
10005dec:	1408d83a 	srl	r4,r2,r16
10005df0:	19405026 	beq	r3,r5,10005f34 <__subdf3+0x574>
10005df4:	01401004 	movi	r5,64
10005df8:	28c7c83a 	sub	r3,r5,r3
10005dfc:	10c4983a 	sll	r2,r2,r3
10005e00:	88a2b03a 	or	r17,r17,r2
10005e04:	8822c03a 	cmpne	r17,r17,zero
10005e08:	2462b03a 	or	r17,r4,r17
10005e0c:	0007883a 	mov	r3,zero
10005e10:	0021883a 	mov	r16,zero
10005e14:	003f6d06 	br	10005bcc <__alt_data_end+0xf8005bcc>
10005e18:	11fff804 	addi	r7,r2,-32
10005e1c:	01000804 	movi	r4,32
10005e20:	29ced83a 	srl	r7,r5,r7
10005e24:	11004526 	beq	r2,r4,10005f3c <__subdf3+0x57c>
10005e28:	01001004 	movi	r4,64
10005e2c:	2089c83a 	sub	r4,r4,r2
10005e30:	2904983a 	sll	r2,r5,r4
10005e34:	118cb03a 	or	r6,r2,r6
10005e38:	300cc03a 	cmpne	r6,r6,zero
10005e3c:	398cb03a 	or	r6,r7,r6
10005e40:	0005883a 	mov	r2,zero
10005e44:	003f3706 	br	10005b24 <__alt_data_end+0xf8005b24>
10005e48:	80002a26 	beq	r16,zero,10005ef4 <__subdf3+0x534>
10005e4c:	0101ffc4 	movi	r4,2047
10005e50:	49006626 	beq	r9,r4,10005fec <__subdf3+0x62c>
10005e54:	0085c83a 	sub	r2,zero,r2
10005e58:	18c02034 	orhi	r3,r3,128
10005e5c:	01000e04 	movi	r4,56
10005e60:	20807e16 	blt	r4,r2,1000605c <__subdf3+0x69c>
10005e64:	010007c4 	movi	r4,31
10005e68:	2080e716 	blt	r4,r2,10006208 <__subdf3+0x848>
10005e6c:	01000804 	movi	r4,32
10005e70:	2089c83a 	sub	r4,r4,r2
10005e74:	1914983a 	sll	r10,r3,r4
10005e78:	8890d83a 	srl	r8,r17,r2
10005e7c:	8908983a 	sll	r4,r17,r4
10005e80:	1884d83a 	srl	r2,r3,r2
10005e84:	5222b03a 	or	r17,r10,r8
10005e88:	2006c03a 	cmpne	r3,r4,zero
10005e8c:	88e2b03a 	or	r17,r17,r3
10005e90:	3463c83a 	sub	r17,r6,r17
10005e94:	2885c83a 	sub	r2,r5,r2
10005e98:	344d803a 	cmpltu	r6,r6,r17
10005e9c:	1187c83a 	sub	r3,r2,r6
10005ea0:	4821883a 	mov	r16,r9
10005ea4:	3825883a 	mov	r18,r7
10005ea8:	003f2306 	br	10005b38 <__alt_data_end+0xf8005b38>
10005eac:	24d0b03a 	or	r8,r4,r19
10005eb0:	40001b1e 	bne	r8,zero,10005f20 <__subdf3+0x560>
10005eb4:	0005883a 	mov	r2,zero
10005eb8:	0009883a 	mov	r4,zero
10005ebc:	0021883a 	mov	r16,zero
10005ec0:	003f4906 	br	10005be8 <__alt_data_end+0xf8005be8>
10005ec4:	010007c4 	movi	r4,31
10005ec8:	20803a16 	blt	r4,r2,10005fb4 <__subdf3+0x5f4>
10005ecc:	01000804 	movi	r4,32
10005ed0:	2089c83a 	sub	r4,r4,r2
10005ed4:	2912983a 	sll	r9,r5,r4
10005ed8:	3090d83a 	srl	r8,r6,r2
10005edc:	3108983a 	sll	r4,r6,r4
10005ee0:	2884d83a 	srl	r2,r5,r2
10005ee4:	4a12b03a 	or	r9,r9,r8
10005ee8:	2008c03a 	cmpne	r4,r4,zero
10005eec:	4912b03a 	or	r9,r9,r4
10005ef0:	003f4e06 	br	10005c2c <__alt_data_end+0xf8005c2c>
10005ef4:	1c48b03a 	or	r4,r3,r17
10005ef8:	20003c26 	beq	r4,zero,10005fec <__subdf3+0x62c>
10005efc:	0084303a 	nor	r2,zero,r2
10005f00:	1000381e 	bne	r2,zero,10005fe4 <__subdf3+0x624>
10005f04:	3463c83a 	sub	r17,r6,r17
10005f08:	28c5c83a 	sub	r2,r5,r3
10005f0c:	344d803a 	cmpltu	r6,r6,r17
10005f10:	1187c83a 	sub	r3,r2,r6
10005f14:	4821883a 	mov	r16,r9
10005f18:	3825883a 	mov	r18,r7
10005f1c:	003f0606 	br	10005b38 <__alt_data_end+0xf8005b38>
10005f20:	2023883a 	mov	r17,r4
10005f24:	003f0906 	br	10005b4c <__alt_data_end+0xf8005b4c>
10005f28:	0101ffc4 	movi	r4,2047
10005f2c:	813f3a1e 	bne	r16,r4,10005c18 <__alt_data_end+0xf8005c18>
10005f30:	003ec406 	br	10005a44 <__alt_data_end+0xf8005a44>
10005f34:	0005883a 	mov	r2,zero
10005f38:	003fb106 	br	10005e00 <__alt_data_end+0xf8005e00>
10005f3c:	0005883a 	mov	r2,zero
10005f40:	003fbc06 	br	10005e34 <__alt_data_end+0xf8005e34>
10005f44:	1c44b03a 	or	r2,r3,r17
10005f48:	80008e1e 	bne	r16,zero,10006184 <__subdf3+0x7c4>
10005f4c:	1000c826 	beq	r2,zero,10006270 <__subdf3+0x8b0>
10005f50:	2984b03a 	or	r2,r5,r6
10005f54:	103ebb26 	beq	r2,zero,10005a44 <__alt_data_end+0xf8005a44>
10005f58:	8989883a 	add	r4,r17,r6
10005f5c:	1945883a 	add	r2,r3,r5
10005f60:	2447803a 	cmpltu	r3,r4,r17
10005f64:	1887883a 	add	r3,r3,r2
10005f68:	1880202c 	andhi	r2,r3,128
10005f6c:	2023883a 	mov	r17,r4
10005f70:	103f1626 	beq	r2,zero,10005bcc <__alt_data_end+0xf8005bcc>
10005f74:	00bfe034 	movhi	r2,65408
10005f78:	10bfffc4 	addi	r2,r2,-1
10005f7c:	5021883a 	mov	r16,r10
10005f80:	1886703a 	and	r3,r3,r2
10005f84:	003eaf06 	br	10005a44 <__alt_data_end+0xf8005a44>
10005f88:	3825883a 	mov	r18,r7
10005f8c:	003f0f06 	br	10005bcc <__alt_data_end+0xf8005bcc>
10005f90:	1c44b03a 	or	r2,r3,r17
10005f94:	8000251e 	bne	r16,zero,1000602c <__subdf3+0x66c>
10005f98:	1000661e 	bne	r2,zero,10006134 <__subdf3+0x774>
10005f9c:	2990b03a 	or	r8,r5,r6
10005fa0:	40009626 	beq	r8,zero,100061fc <__subdf3+0x83c>
10005fa4:	2807883a 	mov	r3,r5
10005fa8:	3023883a 	mov	r17,r6
10005fac:	3825883a 	mov	r18,r7
10005fb0:	003ea406 	br	10005a44 <__alt_data_end+0xf8005a44>
10005fb4:	127ff804 	addi	r9,r2,-32
10005fb8:	01000804 	movi	r4,32
10005fbc:	2a52d83a 	srl	r9,r5,r9
10005fc0:	11008c26 	beq	r2,r4,100061f4 <__subdf3+0x834>
10005fc4:	01001004 	movi	r4,64
10005fc8:	2085c83a 	sub	r2,r4,r2
10005fcc:	2884983a 	sll	r2,r5,r2
10005fd0:	118cb03a 	or	r6,r2,r6
10005fd4:	300cc03a 	cmpne	r6,r6,zero
10005fd8:	4992b03a 	or	r9,r9,r6
10005fdc:	0005883a 	mov	r2,zero
10005fe0:	003f1206 	br	10005c2c <__alt_data_end+0xf8005c2c>
10005fe4:	0101ffc4 	movi	r4,2047
10005fe8:	493f9c1e 	bne	r9,r4,10005e5c <__alt_data_end+0xf8005e5c>
10005fec:	2807883a 	mov	r3,r5
10005ff0:	3023883a 	mov	r17,r6
10005ff4:	4821883a 	mov	r16,r9
10005ff8:	3825883a 	mov	r18,r7
10005ffc:	003e9106 	br	10005a44 <__alt_data_end+0xf8005a44>
10006000:	80001f1e 	bne	r16,zero,10006080 <__subdf3+0x6c0>
10006004:	1c48b03a 	or	r4,r3,r17
10006008:	20005a26 	beq	r4,zero,10006174 <__subdf3+0x7b4>
1000600c:	0084303a 	nor	r2,zero,r2
10006010:	1000561e 	bne	r2,zero,1000616c <__subdf3+0x7ac>
10006014:	89a3883a 	add	r17,r17,r6
10006018:	1945883a 	add	r2,r3,r5
1000601c:	898d803a 	cmpltu	r6,r17,r6
10006020:	3087883a 	add	r3,r6,r2
10006024:	4821883a 	mov	r16,r9
10006028:	003f0506 	br	10005c40 <__alt_data_end+0xf8005c40>
1000602c:	10002b1e 	bne	r2,zero,100060dc <__subdf3+0x71c>
10006030:	2984b03a 	or	r2,r5,r6
10006034:	10008026 	beq	r2,zero,10006238 <__subdf3+0x878>
10006038:	2807883a 	mov	r3,r5
1000603c:	3023883a 	mov	r17,r6
10006040:	3825883a 	mov	r18,r7
10006044:	0401ffc4 	movi	r16,2047
10006048:	003e7e06 	br	10005a44 <__alt_data_end+0xf8005a44>
1000604c:	3809883a 	mov	r4,r7
10006050:	0011883a 	mov	r8,zero
10006054:	0005883a 	mov	r2,zero
10006058:	003ee306 	br	10005be8 <__alt_data_end+0xf8005be8>
1000605c:	1c62b03a 	or	r17,r3,r17
10006060:	8822c03a 	cmpne	r17,r17,zero
10006064:	0005883a 	mov	r2,zero
10006068:	003f8906 	br	10005e90 <__alt_data_end+0xf8005e90>
1000606c:	3809883a 	mov	r4,r7
10006070:	4821883a 	mov	r16,r9
10006074:	0011883a 	mov	r8,zero
10006078:	0005883a 	mov	r2,zero
1000607c:	003eda06 	br	10005be8 <__alt_data_end+0xf8005be8>
10006080:	0101ffc4 	movi	r4,2047
10006084:	49003b26 	beq	r9,r4,10006174 <__subdf3+0x7b4>
10006088:	0085c83a 	sub	r2,zero,r2
1000608c:	18c02034 	orhi	r3,r3,128
10006090:	01000e04 	movi	r4,56
10006094:	20806e16 	blt	r4,r2,10006250 <__subdf3+0x890>
10006098:	010007c4 	movi	r4,31
1000609c:	20807716 	blt	r4,r2,1000627c <__subdf3+0x8bc>
100060a0:	01000804 	movi	r4,32
100060a4:	2089c83a 	sub	r4,r4,r2
100060a8:	1914983a 	sll	r10,r3,r4
100060ac:	8890d83a 	srl	r8,r17,r2
100060b0:	8908983a 	sll	r4,r17,r4
100060b4:	1884d83a 	srl	r2,r3,r2
100060b8:	5222b03a 	or	r17,r10,r8
100060bc:	2006c03a 	cmpne	r3,r4,zero
100060c0:	88e2b03a 	or	r17,r17,r3
100060c4:	89a3883a 	add	r17,r17,r6
100060c8:	1145883a 	add	r2,r2,r5
100060cc:	898d803a 	cmpltu	r6,r17,r6
100060d0:	3087883a 	add	r3,r6,r2
100060d4:	4821883a 	mov	r16,r9
100060d8:	003ed906 	br	10005c40 <__alt_data_end+0xf8005c40>
100060dc:	2984b03a 	or	r2,r5,r6
100060e0:	10004226 	beq	r2,zero,100061ec <__subdf3+0x82c>
100060e4:	1808d0fa 	srli	r4,r3,3
100060e8:	8822d0fa 	srli	r17,r17,3
100060ec:	1806977a 	slli	r3,r3,29
100060f0:	2080022c 	andhi	r2,r4,8
100060f4:	1c62b03a 	or	r17,r3,r17
100060f8:	10000826 	beq	r2,zero,1000611c <__subdf3+0x75c>
100060fc:	2812d0fa 	srli	r9,r5,3
10006100:	4880022c 	andhi	r2,r9,8
10006104:	1000051e 	bne	r2,zero,1000611c <__subdf3+0x75c>
10006108:	300cd0fa 	srli	r6,r6,3
1000610c:	2804977a 	slli	r2,r5,29
10006110:	4809883a 	mov	r4,r9
10006114:	3825883a 	mov	r18,r7
10006118:	11a2b03a 	or	r17,r2,r6
1000611c:	8806d77a 	srli	r3,r17,29
10006120:	200890fa 	slli	r4,r4,3
10006124:	882290fa 	slli	r17,r17,3
10006128:	0401ffc4 	movi	r16,2047
1000612c:	1906b03a 	or	r3,r3,r4
10006130:	003e4406 	br	10005a44 <__alt_data_end+0xf8005a44>
10006134:	2984b03a 	or	r2,r5,r6
10006138:	103e4226 	beq	r2,zero,10005a44 <__alt_data_end+0xf8005a44>
1000613c:	8989c83a 	sub	r4,r17,r6
10006140:	8911803a 	cmpltu	r8,r17,r4
10006144:	1945c83a 	sub	r2,r3,r5
10006148:	1205c83a 	sub	r2,r2,r8
1000614c:	1200202c 	andhi	r8,r2,128
10006150:	403e9a26 	beq	r8,zero,10005bbc <__alt_data_end+0xf8005bbc>
10006154:	3463c83a 	sub	r17,r6,r17
10006158:	28c5c83a 	sub	r2,r5,r3
1000615c:	344d803a 	cmpltu	r6,r6,r17
10006160:	1187c83a 	sub	r3,r2,r6
10006164:	3825883a 	mov	r18,r7
10006168:	003e3606 	br	10005a44 <__alt_data_end+0xf8005a44>
1000616c:	0101ffc4 	movi	r4,2047
10006170:	493fc71e 	bne	r9,r4,10006090 <__alt_data_end+0xf8006090>
10006174:	2807883a 	mov	r3,r5
10006178:	3023883a 	mov	r17,r6
1000617c:	4821883a 	mov	r16,r9
10006180:	003e3006 	br	10005a44 <__alt_data_end+0xf8005a44>
10006184:	10003626 	beq	r2,zero,10006260 <__subdf3+0x8a0>
10006188:	2984b03a 	or	r2,r5,r6
1000618c:	10001726 	beq	r2,zero,100061ec <__subdf3+0x82c>
10006190:	1808d0fa 	srli	r4,r3,3
10006194:	8822d0fa 	srli	r17,r17,3
10006198:	1806977a 	slli	r3,r3,29
1000619c:	2080022c 	andhi	r2,r4,8
100061a0:	1c62b03a 	or	r17,r3,r17
100061a4:	10000726 	beq	r2,zero,100061c4 <__subdf3+0x804>
100061a8:	2812d0fa 	srli	r9,r5,3
100061ac:	4880022c 	andhi	r2,r9,8
100061b0:	1000041e 	bne	r2,zero,100061c4 <__subdf3+0x804>
100061b4:	300cd0fa 	srli	r6,r6,3
100061b8:	2804977a 	slli	r2,r5,29
100061bc:	4809883a 	mov	r4,r9
100061c0:	11a2b03a 	or	r17,r2,r6
100061c4:	8806d77a 	srli	r3,r17,29
100061c8:	200890fa 	slli	r4,r4,3
100061cc:	882290fa 	slli	r17,r17,3
100061d0:	3825883a 	mov	r18,r7
100061d4:	1906b03a 	or	r3,r3,r4
100061d8:	0401ffc4 	movi	r16,2047
100061dc:	003e1906 	br	10005a44 <__alt_data_end+0xf8005a44>
100061e0:	000b883a 	mov	r5,zero
100061e4:	0005883a 	mov	r2,zero
100061e8:	003e2e06 	br	10005aa4 <__alt_data_end+0xf8005aa4>
100061ec:	0401ffc4 	movi	r16,2047
100061f0:	003e1406 	br	10005a44 <__alt_data_end+0xf8005a44>
100061f4:	0005883a 	mov	r2,zero
100061f8:	003f7506 	br	10005fd0 <__alt_data_end+0xf8005fd0>
100061fc:	0005883a 	mov	r2,zero
10006200:	0009883a 	mov	r4,zero
10006204:	003e7806 	br	10005be8 <__alt_data_end+0xf8005be8>
10006208:	123ff804 	addi	r8,r2,-32
1000620c:	01000804 	movi	r4,32
10006210:	1a10d83a 	srl	r8,r3,r8
10006214:	11002526 	beq	r2,r4,100062ac <__subdf3+0x8ec>
10006218:	01001004 	movi	r4,64
1000621c:	2085c83a 	sub	r2,r4,r2
10006220:	1884983a 	sll	r2,r3,r2
10006224:	1444b03a 	or	r2,r2,r17
10006228:	1004c03a 	cmpne	r2,r2,zero
1000622c:	40a2b03a 	or	r17,r8,r2
10006230:	0005883a 	mov	r2,zero
10006234:	003f1606 	br	10005e90 <__alt_data_end+0xf8005e90>
10006238:	02000434 	movhi	r8,16
1000623c:	0009883a 	mov	r4,zero
10006240:	423fffc4 	addi	r8,r8,-1
10006244:	00bfffc4 	movi	r2,-1
10006248:	0401ffc4 	movi	r16,2047
1000624c:	003e6606 	br	10005be8 <__alt_data_end+0xf8005be8>
10006250:	1c62b03a 	or	r17,r3,r17
10006254:	8822c03a 	cmpne	r17,r17,zero
10006258:	0005883a 	mov	r2,zero
1000625c:	003f9906 	br	100060c4 <__alt_data_end+0xf80060c4>
10006260:	2807883a 	mov	r3,r5
10006264:	3023883a 	mov	r17,r6
10006268:	0401ffc4 	movi	r16,2047
1000626c:	003df506 	br	10005a44 <__alt_data_end+0xf8005a44>
10006270:	2807883a 	mov	r3,r5
10006274:	3023883a 	mov	r17,r6
10006278:	003df206 	br	10005a44 <__alt_data_end+0xf8005a44>
1000627c:	123ff804 	addi	r8,r2,-32
10006280:	01000804 	movi	r4,32
10006284:	1a10d83a 	srl	r8,r3,r8
10006288:	11000a26 	beq	r2,r4,100062b4 <__subdf3+0x8f4>
1000628c:	01001004 	movi	r4,64
10006290:	2085c83a 	sub	r2,r4,r2
10006294:	1884983a 	sll	r2,r3,r2
10006298:	1444b03a 	or	r2,r2,r17
1000629c:	1004c03a 	cmpne	r2,r2,zero
100062a0:	40a2b03a 	or	r17,r8,r2
100062a4:	0005883a 	mov	r2,zero
100062a8:	003f8606 	br	100060c4 <__alt_data_end+0xf80060c4>
100062ac:	0005883a 	mov	r2,zero
100062b0:	003fdc06 	br	10006224 <__alt_data_end+0xf8006224>
100062b4:	0005883a 	mov	r2,zero
100062b8:	003ff706 	br	10006298 <__alt_data_end+0xf8006298>

100062bc <__extendsfdf2>:
100062bc:	200ad5fa 	srli	r5,r4,23
100062c0:	defffd04 	addi	sp,sp,-12
100062c4:	dc400115 	stw	r17,4(sp)
100062c8:	29403fcc 	andi	r5,r5,255
100062cc:	29800044 	addi	r6,r5,1
100062d0:	04402034 	movhi	r17,128
100062d4:	dc000015 	stw	r16,0(sp)
100062d8:	8c7fffc4 	addi	r17,r17,-1
100062dc:	dfc00215 	stw	ra,8(sp)
100062e0:	31803fcc 	andi	r6,r6,255
100062e4:	00800044 	movi	r2,1
100062e8:	8922703a 	and	r17,r17,r4
100062ec:	2020d7fa 	srli	r16,r4,31
100062f0:	1180110e 	bge	r2,r6,10006338 <__extendsfdf2+0x7c>
100062f4:	880cd0fa 	srli	r6,r17,3
100062f8:	8822977a 	slli	r17,r17,29
100062fc:	2940e004 	addi	r5,r5,896
10006300:	2941ffcc 	andi	r5,r5,2047
10006304:	2804953a 	slli	r2,r5,20
10006308:	01400434 	movhi	r5,16
1000630c:	800697fa 	slli	r3,r16,31
10006310:	297fffc4 	addi	r5,r5,-1
10006314:	314a703a 	and	r5,r6,r5
10006318:	288ab03a 	or	r5,r5,r2
1000631c:	28c6b03a 	or	r3,r5,r3
10006320:	8805883a 	mov	r2,r17
10006324:	dfc00217 	ldw	ra,8(sp)
10006328:	dc400117 	ldw	r17,4(sp)
1000632c:	dc000017 	ldw	r16,0(sp)
10006330:	dec00304 	addi	sp,sp,12
10006334:	f800283a 	ret
10006338:	2800111e 	bne	r5,zero,10006380 <__extendsfdf2+0xc4>
1000633c:	88001c26 	beq	r17,zero,100063b0 <__extendsfdf2+0xf4>
10006340:	8809883a 	mov	r4,r17
10006344:	00065740 	call	10006574 <__clzsi2>
10006348:	00c00284 	movi	r3,10
1000634c:	18801b16 	blt	r3,r2,100063bc <__extendsfdf2+0x100>
10006350:	018002c4 	movi	r6,11
10006354:	308dc83a 	sub	r6,r6,r2
10006358:	11000544 	addi	r4,r2,21
1000635c:	8986d83a 	srl	r3,r17,r6
10006360:	8922983a 	sll	r17,r17,r4
10006364:	0180e244 	movi	r6,905
10006368:	01400434 	movhi	r5,16
1000636c:	3085c83a 	sub	r2,r6,r2
10006370:	297fffc4 	addi	r5,r5,-1
10006374:	194c703a 	and	r6,r3,r5
10006378:	1141ffcc 	andi	r5,r2,2047
1000637c:	003fe006 	br	10006300 <__alt_data_end+0xf8006300>
10006380:	88000826 	beq	r17,zero,100063a4 <__extendsfdf2+0xe8>
10006384:	880cd0fa 	srli	r6,r17,3
10006388:	00800434 	movhi	r2,16
1000638c:	10bfffc4 	addi	r2,r2,-1
10006390:	31800234 	orhi	r6,r6,8
10006394:	8822977a 	slli	r17,r17,29
10006398:	308c703a 	and	r6,r6,r2
1000639c:	0141ffc4 	movi	r5,2047
100063a0:	003fd706 	br	10006300 <__alt_data_end+0xf8006300>
100063a4:	0141ffc4 	movi	r5,2047
100063a8:	000d883a 	mov	r6,zero
100063ac:	003fd406 	br	10006300 <__alt_data_end+0xf8006300>
100063b0:	000b883a 	mov	r5,zero
100063b4:	000d883a 	mov	r6,zero
100063b8:	003fd106 	br	10006300 <__alt_data_end+0xf8006300>
100063bc:	11bffd44 	addi	r6,r2,-11
100063c0:	8986983a 	sll	r3,r17,r6
100063c4:	0023883a 	mov	r17,zero
100063c8:	003fe606 	br	10006364 <__alt_data_end+0xf8006364>

100063cc <__truncdfsf2>:
100063cc:	2810d53a 	srli	r8,r5,20
100063d0:	01c00434 	movhi	r7,16
100063d4:	39ffffc4 	addi	r7,r7,-1
100063d8:	29ce703a 	and	r7,r5,r7
100063dc:	4201ffcc 	andi	r8,r8,2047
100063e0:	380e90fa 	slli	r7,r7,3
100063e4:	200cd77a 	srli	r6,r4,29
100063e8:	42400044 	addi	r9,r8,1
100063ec:	4a41ffcc 	andi	r9,r9,2047
100063f0:	00c00044 	movi	r3,1
100063f4:	280ad7fa 	srli	r5,r5,31
100063f8:	31ceb03a 	or	r7,r6,r7
100063fc:	200490fa 	slli	r2,r4,3
10006400:	1a40230e 	bge	r3,r9,10006490 <__truncdfsf2+0xc4>
10006404:	40ff2004 	addi	r3,r8,-896
10006408:	01803f84 	movi	r6,254
1000640c:	30c01516 	blt	r6,r3,10006464 <__truncdfsf2+0x98>
10006410:	00c0380e 	bge	zero,r3,100064f4 <__truncdfsf2+0x128>
10006414:	200c91ba 	slli	r6,r4,6
10006418:	380e90fa 	slli	r7,r7,3
1000641c:	1004d77a 	srli	r2,r2,29
10006420:	300cc03a 	cmpne	r6,r6,zero
10006424:	31ccb03a 	or	r6,r6,r7
10006428:	308cb03a 	or	r6,r6,r2
1000642c:	308001cc 	andi	r2,r6,7
10006430:	10000426 	beq	r2,zero,10006444 <__truncdfsf2+0x78>
10006434:	308003cc 	andi	r2,r6,15
10006438:	01000104 	movi	r4,4
1000643c:	11000126 	beq	r2,r4,10006444 <__truncdfsf2+0x78>
10006440:	31800104 	addi	r6,r6,4
10006444:	3081002c 	andhi	r2,r6,1024
10006448:	10001626 	beq	r2,zero,100064a4 <__truncdfsf2+0xd8>
1000644c:	18c00044 	addi	r3,r3,1
10006450:	00803fc4 	movi	r2,255
10006454:	18800326 	beq	r3,r2,10006464 <__truncdfsf2+0x98>
10006458:	300c91ba 	slli	r6,r6,6
1000645c:	300cd27a 	srli	r6,r6,9
10006460:	00000206 	br	1000646c <__truncdfsf2+0xa0>
10006464:	00ffffc4 	movi	r3,-1
10006468:	000d883a 	mov	r6,zero
1000646c:	18c03fcc 	andi	r3,r3,255
10006470:	180895fa 	slli	r4,r3,23
10006474:	00c02034 	movhi	r3,128
10006478:	280a97fa 	slli	r5,r5,31
1000647c:	18ffffc4 	addi	r3,r3,-1
10006480:	30c6703a 	and	r3,r6,r3
10006484:	1906b03a 	or	r3,r3,r4
10006488:	1944b03a 	or	r2,r3,r5
1000648c:	f800283a 	ret
10006490:	40000b1e 	bne	r8,zero,100064c0 <__truncdfsf2+0xf4>
10006494:	388cb03a 	or	r6,r7,r2
10006498:	0007883a 	mov	r3,zero
1000649c:	30000426 	beq	r6,zero,100064b0 <__truncdfsf2+0xe4>
100064a0:	01800144 	movi	r6,5
100064a4:	00803fc4 	movi	r2,255
100064a8:	300cd0fa 	srli	r6,r6,3
100064ac:	18800a26 	beq	r3,r2,100064d8 <__truncdfsf2+0x10c>
100064b0:	00802034 	movhi	r2,128
100064b4:	10bfffc4 	addi	r2,r2,-1
100064b8:	308c703a 	and	r6,r6,r2
100064bc:	003feb06 	br	1000646c <__alt_data_end+0xf800646c>
100064c0:	3888b03a 	or	r4,r7,r2
100064c4:	203fe726 	beq	r4,zero,10006464 <__alt_data_end+0xf8006464>
100064c8:	380c90fa 	slli	r6,r7,3
100064cc:	00c03fc4 	movi	r3,255
100064d0:	31808034 	orhi	r6,r6,512
100064d4:	003fd506 	br	1000642c <__alt_data_end+0xf800642c>
100064d8:	303fe226 	beq	r6,zero,10006464 <__alt_data_end+0xf8006464>
100064dc:	00802034 	movhi	r2,128
100064e0:	31801034 	orhi	r6,r6,64
100064e4:	10bfffc4 	addi	r2,r2,-1
100064e8:	00ffffc4 	movi	r3,-1
100064ec:	308c703a 	and	r6,r6,r2
100064f0:	003fde06 	br	1000646c <__alt_data_end+0xf800646c>
100064f4:	013ffa44 	movi	r4,-23
100064f8:	19000e16 	blt	r3,r4,10006534 <__truncdfsf2+0x168>
100064fc:	01000784 	movi	r4,30
10006500:	20c9c83a 	sub	r4,r4,r3
10006504:	018007c4 	movi	r6,31
10006508:	39c02034 	orhi	r7,r7,128
1000650c:	31000b16 	blt	r6,r4,1000653c <__truncdfsf2+0x170>
10006510:	423f2084 	addi	r8,r8,-894
10006514:	120c983a 	sll	r6,r2,r8
10006518:	3a0e983a 	sll	r7,r7,r8
1000651c:	1104d83a 	srl	r2,r2,r4
10006520:	300cc03a 	cmpne	r6,r6,zero
10006524:	31ceb03a 	or	r7,r6,r7
10006528:	388cb03a 	or	r6,r7,r2
1000652c:	0007883a 	mov	r3,zero
10006530:	003fbe06 	br	1000642c <__alt_data_end+0xf800642c>
10006534:	0007883a 	mov	r3,zero
10006538:	003fd906 	br	100064a0 <__alt_data_end+0xf80064a0>
1000653c:	01bfff84 	movi	r6,-2
10006540:	30cdc83a 	sub	r6,r6,r3
10006544:	00c00804 	movi	r3,32
10006548:	398cd83a 	srl	r6,r7,r6
1000654c:	20c00726 	beq	r4,r3,1000656c <__truncdfsf2+0x1a0>
10006550:	423f2884 	addi	r8,r8,-862
10006554:	3a0e983a 	sll	r7,r7,r8
10006558:	3884b03a 	or	r2,r7,r2
1000655c:	1004c03a 	cmpne	r2,r2,zero
10006560:	118cb03a 	or	r6,r2,r6
10006564:	0007883a 	mov	r3,zero
10006568:	003fb006 	br	1000642c <__alt_data_end+0xf800642c>
1000656c:	000f883a 	mov	r7,zero
10006570:	003ff906 	br	10006558 <__alt_data_end+0xf8006558>

10006574 <__clzsi2>:
10006574:	00bfffd4 	movui	r2,65535
10006578:	11000536 	bltu	r2,r4,10006590 <__clzsi2+0x1c>
1000657c:	00803fc4 	movi	r2,255
10006580:	11000f36 	bltu	r2,r4,100065c0 <__clzsi2+0x4c>
10006584:	00800804 	movi	r2,32
10006588:	0007883a 	mov	r3,zero
1000658c:	00000506 	br	100065a4 <__clzsi2+0x30>
10006590:	00804034 	movhi	r2,256
10006594:	10bfffc4 	addi	r2,r2,-1
10006598:	11000c2e 	bgeu	r2,r4,100065cc <__clzsi2+0x58>
1000659c:	00800204 	movi	r2,8
100065a0:	00c00604 	movi	r3,24
100065a4:	20c8d83a 	srl	r4,r4,r3
100065a8:	00c40374 	movhi	r3,4109
100065ac:	18fd5504 	addi	r3,r3,-2732
100065b0:	1909883a 	add	r4,r3,r4
100065b4:	20c00003 	ldbu	r3,0(r4)
100065b8:	10c5c83a 	sub	r2,r2,r3
100065bc:	f800283a 	ret
100065c0:	00800604 	movi	r2,24
100065c4:	00c00204 	movi	r3,8
100065c8:	003ff606 	br	100065a4 <__alt_data_end+0xf80065a4>
100065cc:	00800404 	movi	r2,16
100065d0:	1007883a 	mov	r3,r2
100065d4:	003ff306 	br	100065a4 <__alt_data_end+0xf80065a4>

100065d8 <__mulsi3>:
100065d8:	0005883a 	mov	r2,zero
100065dc:	20000726 	beq	r4,zero,100065fc <__mulsi3+0x24>
100065e0:	20c0004c 	andi	r3,r4,1
100065e4:	2008d07a 	srli	r4,r4,1
100065e8:	18000126 	beq	r3,zero,100065f0 <__mulsi3+0x18>
100065ec:	1145883a 	add	r2,r2,r5
100065f0:	294b883a 	add	r5,r5,r5
100065f4:	203ffa1e 	bne	r4,zero,100065e0 <__alt_data_end+0xf80065e0>
100065f8:	f800283a 	ret
100065fc:	f800283a 	ret

10006600 <atoi>:

#ifndef _REENT_ONLY
int
_DEFUN (atoi, (s),
	_CONST char *s)
{
10006600:	defffd04 	addi	sp,sp,-12
10006604:	dfc00215 	stw	ra,8(sp)
10006608:	df000115 	stw	fp,4(sp)
1000660c:	df000104 	addi	fp,sp,4
10006610:	e13fff15 	stw	r4,-4(fp)
  return (int) strtol (s, NULL, 10);
10006614:	01800284 	movi	r6,10
10006618:	000b883a 	mov	r5,zero
1000661c:	e13fff17 	ldw	r4,-4(fp)
10006620:	00098380 	call	10009838 <strtol>
}
10006624:	e037883a 	mov	sp,fp
10006628:	dfc00117 	ldw	ra,4(sp)
1000662c:	df000017 	ldw	fp,0(sp)
10006630:	dec00204 	addi	sp,sp,8
10006634:	f800283a 	ret

10006638 <_atoi_r>:

int
_DEFUN (_atoi_r, (s),
	struct _reent *ptr _AND
	_CONST char *s)
{
10006638:	defffc04 	addi	sp,sp,-16
1000663c:	dfc00315 	stw	ra,12(sp)
10006640:	df000215 	stw	fp,8(sp)
10006644:	df000204 	addi	fp,sp,8
10006648:	e13ffe15 	stw	r4,-8(fp)
1000664c:	e17fff15 	stw	r5,-4(fp)
  return (int) _strtol_r (ptr, s, NULL, 10);
10006650:	01c00284 	movi	r7,10
10006654:	000d883a 	mov	r6,zero
10006658:	e17fff17 	ldw	r5,-4(fp)
1000665c:	e13ffe17 	ldw	r4,-8(fp)
10006660:	000954c0 	call	1000954c <_strtol_r>
}
10006664:	e037883a 	mov	sp,fp
10006668:	dfc00117 	ldw	ra,4(sp)
1000666c:	df000017 	ldw	fp,0(sp)
10006670:	dec00204 	addi	sp,sp,8
10006674:	f800283a 	ret

10006678 <calloc>:

_PTR
_DEFUN (calloc, (n, size),
	size_t n _AND
	size_t size)
{
10006678:	defffc04 	addi	sp,sp,-16
1000667c:	dfc00315 	stw	ra,12(sp)
10006680:	df000215 	stw	fp,8(sp)
10006684:	df000204 	addi	fp,sp,8
10006688:	e13ffe15 	stw	r4,-8(fp)
1000668c:	e17fff15 	stw	r5,-4(fp)
  return _calloc_r (_REENT, n, size);
10006690:	008403b4 	movhi	r2,4110
10006694:	10a4cc04 	addi	r2,r2,-27856
10006698:	10800017 	ldw	r2,0(r2)
1000669c:	e1bfff17 	ldw	r6,-4(fp)
100066a0:	e17ffe17 	ldw	r5,-8(fp)
100066a4:	1009883a 	mov	r4,r2
100066a8:	00066c00 	call	100066c0 <_calloc_r>
}
100066ac:	e037883a 	mov	sp,fp
100066b0:	dfc00117 	ldw	ra,4(sp)
100066b4:	df000017 	ldw	fp,0(sp)
100066b8:	dec00204 	addi	sp,sp,8
100066bc:	f800283a 	ret

100066c0 <_calloc_r>:
#if __STD_C
Void_t* cALLOc(RARG size_t n, size_t elem_size)
#else
Void_t* cALLOc(RARG n, elem_size) RDECL size_t n; size_t elem_size;
#endif
{
100066c0:	defff504 	addi	sp,sp,-44
100066c4:	dfc00a15 	stw	ra,40(sp)
100066c8:	df000915 	stw	fp,36(sp)
100066cc:	df000904 	addi	fp,sp,36
100066d0:	e13ffd15 	stw	r4,-12(fp)
100066d4:	e17ffe15 	stw	r5,-8(fp)
100066d8:	e1bfff15 	stw	r6,-4(fp)
  mchunkptr p;
  INTERNAL_SIZE_T csz;

  INTERNAL_SIZE_T sz = n * elem_size;
100066dc:	e17fff17 	ldw	r5,-4(fp)
100066e0:	e13ffe17 	ldw	r4,-8(fp)
100066e4:	00065d80 	call	100065d8 <__mulsi3>
100066e8:	e0bff815 	stw	r2,-32(fp)
  MALLOC_LOCK;
  oldtop = top;
  oldtopsize = chunksize(top);
#endif

  mem = mALLOc (RCALL sz);
100066ec:	e17ff817 	ldw	r5,-32(fp)
100066f0:	e13ffd17 	ldw	r4,-12(fp)
100066f4:	0006fd80 	call	10006fd8 <_malloc_r>
100066f8:	e0bff915 	stw	r2,-28(fp)

  if (mem == 0) 
100066fc:	e0bff917 	ldw	r2,-28(fp)
10006700:	1000021e 	bne	r2,zero,1000670c <_calloc_r+0x4c>
  {
#if MORECORE_CLEARS
    MALLOC_UNLOCK;
#endif
    return 0;
10006704:	0005883a 	mov	r2,zero
10006708:	00004106 	br	10006810 <_calloc_r+0x150>
  }
  else
  {
    p = mem2chunk(mem);
1000670c:	e0bff917 	ldw	r2,-28(fp)
10006710:	10bffe04 	addi	r2,r2,-8
10006714:	e0bffa15 	stw	r2,-24(fp)
#endif
      return mem;
    }
#endif

    csz = chunksize(p);
10006718:	e0bffa17 	ldw	r2,-24(fp)
1000671c:	10c00117 	ldw	r3,4(r2)
10006720:	00bfff04 	movi	r2,-4
10006724:	1884703a 	and	r2,r3,r2
10006728:	e0bffb15 	stw	r2,-20(fp)
      csz = oldtopsize;
    }
    MALLOC_UNLOCK;
#endif

    MALLOC_ZERO(mem, csz - SIZE_SZ);
1000672c:	e0bffb17 	ldw	r2,-20(fp)
10006730:	10bfff04 	addi	r2,r2,-4
10006734:	e0bffc15 	stw	r2,-16(fp)
10006738:	e0bffc17 	ldw	r2,-16(fp)
1000673c:	10800968 	cmpgeui	r2,r2,37
10006740:	10002e1e 	bne	r2,zero,100067fc <_calloc_r+0x13c>
10006744:	e0bff917 	ldw	r2,-28(fp)
10006748:	e0bff715 	stw	r2,-36(fp)
1000674c:	e0bffc17 	ldw	r2,-16(fp)
10006750:	10800530 	cmpltui	r2,r2,20
10006754:	10001e1e 	bne	r2,zero,100067d0 <_calloc_r+0x110>
10006758:	e0bff717 	ldw	r2,-36(fp)
1000675c:	10c00104 	addi	r3,r2,4
10006760:	e0fff715 	stw	r3,-36(fp)
10006764:	10000015 	stw	zero,0(r2)
10006768:	e0bff717 	ldw	r2,-36(fp)
1000676c:	10c00104 	addi	r3,r2,4
10006770:	e0fff715 	stw	r3,-36(fp)
10006774:	10000015 	stw	zero,0(r2)
10006778:	e0bffc17 	ldw	r2,-16(fp)
1000677c:	10800730 	cmpltui	r2,r2,28
10006780:	1000131e 	bne	r2,zero,100067d0 <_calloc_r+0x110>
10006784:	e0bff717 	ldw	r2,-36(fp)
10006788:	10c00104 	addi	r3,r2,4
1000678c:	e0fff715 	stw	r3,-36(fp)
10006790:	10000015 	stw	zero,0(r2)
10006794:	e0bff717 	ldw	r2,-36(fp)
10006798:	10c00104 	addi	r3,r2,4
1000679c:	e0fff715 	stw	r3,-36(fp)
100067a0:	10000015 	stw	zero,0(r2)
100067a4:	e0bffc17 	ldw	r2,-16(fp)
100067a8:	10800930 	cmpltui	r2,r2,36
100067ac:	1000081e 	bne	r2,zero,100067d0 <_calloc_r+0x110>
100067b0:	e0bff717 	ldw	r2,-36(fp)
100067b4:	10c00104 	addi	r3,r2,4
100067b8:	e0fff715 	stw	r3,-36(fp)
100067bc:	10000015 	stw	zero,0(r2)
100067c0:	e0bff717 	ldw	r2,-36(fp)
100067c4:	10c00104 	addi	r3,r2,4
100067c8:	e0fff715 	stw	r3,-36(fp)
100067cc:	10000015 	stw	zero,0(r2)
100067d0:	e0bff717 	ldw	r2,-36(fp)
100067d4:	10c00104 	addi	r3,r2,4
100067d8:	e0fff715 	stw	r3,-36(fp)
100067dc:	10000015 	stw	zero,0(r2)
100067e0:	e0bff717 	ldw	r2,-36(fp)
100067e4:	10c00104 	addi	r3,r2,4
100067e8:	e0fff715 	stw	r3,-36(fp)
100067ec:	10000015 	stw	zero,0(r2)
100067f0:	e0bff717 	ldw	r2,-36(fp)
100067f4:	10000015 	stw	zero,0(r2)
100067f8:	00000406 	br	1000680c <_calloc_r+0x14c>
100067fc:	e1bffc17 	ldw	r6,-16(fp)
10006800:	000b883a 	mov	r5,zero
10006804:	e13ff917 	ldw	r4,-28(fp)
10006808:	0007b540 	call	10007b54 <memset>
    return mem;
1000680c:	e0bff917 	ldw	r2,-28(fp)
  }
}
10006810:	e037883a 	mov	sp,fp
10006814:	dfc00117 	ldw	ra,4(sp)
10006818:	df000017 	ldw	fp,0(sp)
1000681c:	dec00204 	addi	sp,sp,8
10006820:	f800283a 	ret

10006824 <_drand48_r>:
#include "rand48.h"

double
_DEFUN (_drand48_r, (r),
       struct _reent *r)
{
10006824:	defffd04 	addi	sp,sp,-12
10006828:	dfc00215 	stw	ra,8(sp)
1000682c:	df000115 	stw	fp,4(sp)
10006830:	df000104 	addi	fp,sp,4
10006834:	e13fff15 	stw	r4,-4(fp)
  _REENT_CHECK_RAND48(r);
  return _erand48_r(r, __rand48_seed);
10006838:	e0bfff17 	ldw	r2,-4(fp)
1000683c:	10802b04 	addi	r2,r2,172
10006840:	100b883a 	mov	r5,r2
10006844:	e13fff17 	ldw	r4,-4(fp)
10006848:	00068c80 	call	100068c8 <_erand48_r>
1000684c:	100b883a 	mov	r5,r2
10006850:	180d883a 	mov	r6,r3
10006854:	2807883a 	mov	r3,r5
10006858:	3009883a 	mov	r4,r6
}
1000685c:	1805883a 	mov	r2,r3
10006860:	2007883a 	mov	r3,r4
10006864:	e037883a 	mov	sp,fp
10006868:	dfc00117 	ldw	ra,4(sp)
1000686c:	df000017 	ldw	fp,0(sp)
10006870:	dec00204 	addi	sp,sp,8
10006874:	f800283a 	ret

10006878 <drand48>:

#ifndef _REENT_ONLY
double
_DEFUN_VOID (drand48)
{
10006878:	defffe04 	addi	sp,sp,-8
1000687c:	dfc00115 	stw	ra,4(sp)
10006880:	df000015 	stw	fp,0(sp)
10006884:	d839883a 	mov	fp,sp
  return _drand48_r (_REENT);
10006888:	008403b4 	movhi	r2,4110
1000688c:	10a4cc04 	addi	r2,r2,-27856
10006890:	10800017 	ldw	r2,0(r2)
10006894:	1009883a 	mov	r4,r2
10006898:	00068240 	call	10006824 <_drand48_r>
1000689c:	100b883a 	mov	r5,r2
100068a0:	180d883a 	mov	r6,r3
100068a4:	2807883a 	mov	r3,r5
100068a8:	3009883a 	mov	r4,r6
}
100068ac:	1805883a 	mov	r2,r3
100068b0:	2007883a 	mov	r3,r4
100068b4:	e037883a 	mov	sp,fp
100068b8:	dfc00117 	ldw	ra,4(sp)
100068bc:	df000017 	ldw	fp,0(sp)
100068c0:	dec00204 	addi	sp,sp,8
100068c4:	f800283a 	ret

100068c8 <_erand48_r>:

double
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
100068c8:	defffa04 	addi	sp,sp,-24
100068cc:	dfc00515 	stw	ra,20(sp)
100068d0:	df000415 	stw	fp,16(sp)
100068d4:	dc400315 	stw	r17,12(sp)
100068d8:	dc000215 	stw	r16,8(sp)
100068dc:	df000404 	addi	fp,sp,16
100068e0:	e13ffc15 	stw	r4,-16(fp)
100068e4:	e17ffd15 	stw	r5,-12(fp)
  __dorand48(r, xseed);
100068e8:	e17ffd17 	ldw	r5,-12(fp)
100068ec:	e13ffc17 	ldw	r4,-16(fp)
100068f0:	0007fe00 	call	10007fe0 <__dorand48>
  return ldexp((double) xseed[0], -48) +
100068f4:	e0bffd17 	ldw	r2,-12(fp)
100068f8:	1080000b 	ldhu	r2,0(r2)
100068fc:	10bfffcc 	andi	r2,r2,65535
10006900:	1009883a 	mov	r4,r2
10006904:	00156d80 	call	100156d8 <__floatunsidf>
10006908:	100f883a 	mov	r7,r2
1000690c:	1811883a 	mov	r8,r3
10006910:	01bff404 	movi	r6,-48
10006914:	3809883a 	mov	r4,r7
10006918:	400b883a 	mov	r5,r8
1000691c:	0008ea00 	call	10008ea0 <ldexp>
10006920:	1021883a 	mov	r16,r2
10006924:	1823883a 	mov	r17,r3
    ldexp((double) xseed[1], -32) +
10006928:	e0bffd17 	ldw	r2,-12(fp)
1000692c:	10800084 	addi	r2,r2,2
10006930:	1080000b 	ldhu	r2,0(r2)
10006934:	10bfffcc 	andi	r2,r2,65535
10006938:	1009883a 	mov	r4,r2
1000693c:	00156d80 	call	100156d8 <__floatunsidf>
10006940:	100f883a 	mov	r7,r2
10006944:	1811883a 	mov	r8,r3
10006948:	01bff804 	movi	r6,-32
1000694c:	3809883a 	mov	r4,r7
10006950:	400b883a 	mov	r5,r8
10006954:	0008ea00 	call	10008ea0 <ldexp>
10006958:	1009883a 	mov	r4,r2
1000695c:	180b883a 	mov	r5,r3
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
  __dorand48(r, xseed);
  return ldexp((double) xseed[0], -48) +
10006960:	200d883a 	mov	r6,r4
10006964:	280f883a 	mov	r7,r5
10006968:	8009883a 	mov	r4,r16
1000696c:	880b883a 	mov	r5,r17
10006970:	0003de80 	call	10003de8 <__adddf3>
10006974:	1009883a 	mov	r4,r2
10006978:	180b883a 	mov	r5,r3
1000697c:	2021883a 	mov	r16,r4
10006980:	2823883a 	mov	r17,r5
    ldexp((double) xseed[1], -32) +
    ldexp((double) xseed[2], -16);
10006984:	e0bffd17 	ldw	r2,-12(fp)
10006988:	10800104 	addi	r2,r2,4
1000698c:	1080000b 	ldhu	r2,0(r2)
10006990:	10bfffcc 	andi	r2,r2,65535
10006994:	1009883a 	mov	r4,r2
10006998:	00156d80 	call	100156d8 <__floatunsidf>
1000699c:	100f883a 	mov	r7,r2
100069a0:	1811883a 	mov	r8,r3
100069a4:	01bffc04 	movi	r6,-16
100069a8:	3809883a 	mov	r4,r7
100069ac:	400b883a 	mov	r5,r8
100069b0:	0008ea00 	call	10008ea0 <ldexp>
100069b4:	1009883a 	mov	r4,r2
100069b8:	180b883a 	mov	r5,r3
_DEFUN (_erand48_r, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
  __dorand48(r, xseed);
  return ldexp((double) xseed[0], -48) +
100069bc:	200d883a 	mov	r6,r4
100069c0:	280f883a 	mov	r7,r5
100069c4:	8009883a 	mov	r4,r16
100069c8:	880b883a 	mov	r5,r17
100069cc:	0003de80 	call	10003de8 <__adddf3>
100069d0:	100f883a 	mov	r7,r2
100069d4:	1811883a 	mov	r8,r3
100069d8:	380b883a 	mov	r5,r7
100069dc:	400d883a 	mov	r6,r8
100069e0:	2807883a 	mov	r3,r5
100069e4:	3009883a 	mov	r4,r6
    ldexp((double) xseed[1], -32) +
    ldexp((double) xseed[2], -16);
}
100069e8:	1805883a 	mov	r2,r3
100069ec:	2007883a 	mov	r3,r4
100069f0:	e6fffe04 	addi	sp,fp,-8
100069f4:	dfc00317 	ldw	ra,12(sp)
100069f8:	df000217 	ldw	fp,8(sp)
100069fc:	dc400117 	ldw	r17,4(sp)
10006a00:	dc000017 	ldw	r16,0(sp)
10006a04:	dec00404 	addi	sp,sp,16
10006a08:	f800283a 	ret

10006a0c <erand48>:

#ifndef _REENT_ONLY
double
_DEFUN (erand48, (xseed),
       unsigned short xseed[3])
{
10006a0c:	defffd04 	addi	sp,sp,-12
10006a10:	dfc00215 	stw	ra,8(sp)
10006a14:	df000115 	stw	fp,4(sp)
10006a18:	df000104 	addi	fp,sp,4
10006a1c:	e13fff15 	stw	r4,-4(fp)
  return _erand48_r (_REENT, xseed);
10006a20:	008403b4 	movhi	r2,4110
10006a24:	10a4cc04 	addi	r2,r2,-27856
10006a28:	10800017 	ldw	r2,0(r2)
10006a2c:	e17fff17 	ldw	r5,-4(fp)
10006a30:	1009883a 	mov	r4,r2
10006a34:	00068c80 	call	100068c8 <_erand48_r>
10006a38:	100b883a 	mov	r5,r2
10006a3c:	180d883a 	mov	r6,r3
10006a40:	2807883a 	mov	r3,r5
10006a44:	3009883a 	mov	r4,r6
}
10006a48:	1805883a 	mov	r2,r3
10006a4c:	2007883a 	mov	r3,r4
10006a50:	e037883a 	mov	sp,fp
10006a54:	dfc00117 	ldw	ra,4(sp)
10006a58:	df000017 	ldw	fp,0(sp)
10006a5c:	dec00204 	addi	sp,sp,8
10006a60:	f800283a 	ret

10006a64 <_getc_r>:

int
_DEFUN(_getc_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
10006a64:	defffa04 	addi	sp,sp,-24
10006a68:	dfc00515 	stw	ra,20(sp)
10006a6c:	df000415 	stw	fp,16(sp)
10006a70:	dc000315 	stw	r16,12(sp)
10006a74:	df000404 	addi	fp,sp,16
10006a78:	e13ffe15 	stw	r4,-8(fp)
10006a7c:	2821883a 	mov	r16,r5
  int result;
  CHECK_INIT (ptr, fp);
10006a80:	e0bffe17 	ldw	r2,-8(fp)
10006a84:	e0bffc15 	stw	r2,-16(fp)
10006a88:	e0bffc17 	ldw	r2,-16(fp)
10006a8c:	10000526 	beq	r2,zero,10006aa4 <_getc_r+0x40>
10006a90:	e0bffc17 	ldw	r2,-16(fp)
10006a94:	10800e17 	ldw	r2,56(r2)
10006a98:	1000021e 	bne	r2,zero,10006aa4 <_getc_r+0x40>
10006a9c:	e13ffc17 	ldw	r4,-16(fp)
10006aa0:	000e7440 	call	1000e744 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sgetc_r (ptr, fp);
10006aa4:	80800117 	ldw	r2,4(r16)
10006aa8:	10bfffc4 	addi	r2,r2,-1
10006aac:	80800115 	stw	r2,4(r16)
10006ab0:	80800117 	ldw	r2,4(r16)
10006ab4:	1000040e 	bge	r2,zero,10006ac8 <_getc_r+0x64>
10006ab8:	800b883a 	mov	r5,r16
10006abc:	e13ffe17 	ldw	r4,-8(fp)
10006ac0:	0008dd00 	call	10008dd0 <__srget_r>
10006ac4:	00000506 	br	10006adc <_getc_r+0x78>
10006ac8:	80800017 	ldw	r2,0(r16)
10006acc:	10c00044 	addi	r3,r2,1
10006ad0:	80c00015 	stw	r3,0(r16)
10006ad4:	10800003 	ldbu	r2,0(r2)
10006ad8:	10803fcc 	andi	r2,r2,255
10006adc:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
10006ae0:	e0bffd17 	ldw	r2,-12(fp)
}
10006ae4:	e6ffff04 	addi	sp,fp,-4
10006ae8:	dfc00217 	ldw	ra,8(sp)
10006aec:	df000117 	ldw	fp,4(sp)
10006af0:	dc000017 	ldw	r16,0(sp)
10006af4:	dec00304 	addi	sp,sp,12
10006af8:	f800283a 	ret

10006afc <getc>:
#ifndef _REENT_ONLY

int
_DEFUN(getc, (fp),
       register FILE *fp)
{
10006afc:	defffa04 	addi	sp,sp,-24
10006b00:	dfc00515 	stw	ra,20(sp)
10006b04:	df000415 	stw	fp,16(sp)
10006b08:	dc000315 	stw	r16,12(sp)
10006b0c:	df000404 	addi	fp,sp,16
10006b10:	2021883a 	mov	r16,r4
  int result;
  struct _reent *reent = _REENT;
10006b14:	008403b4 	movhi	r2,4110
10006b18:	10a4cc04 	addi	r2,r2,-27856
10006b1c:	10800017 	ldw	r2,0(r2)
10006b20:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT (reent, fp);
10006b24:	e0bffc17 	ldw	r2,-16(fp)
10006b28:	e0bffd15 	stw	r2,-12(fp)
10006b2c:	e0bffd17 	ldw	r2,-12(fp)
10006b30:	10000526 	beq	r2,zero,10006b48 <getc+0x4c>
10006b34:	e0bffd17 	ldw	r2,-12(fp)
10006b38:	10800e17 	ldw	r2,56(r2)
10006b3c:	1000021e 	bne	r2,zero,10006b48 <getc+0x4c>
10006b40:	e13ffd17 	ldw	r4,-12(fp)
10006b44:	000e7440 	call	1000e744 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sgetc_r (reent, fp);
10006b48:	80800117 	ldw	r2,4(r16)
10006b4c:	10bfffc4 	addi	r2,r2,-1
10006b50:	80800115 	stw	r2,4(r16)
10006b54:	80800117 	ldw	r2,4(r16)
10006b58:	1000040e 	bge	r2,zero,10006b6c <getc+0x70>
10006b5c:	800b883a 	mov	r5,r16
10006b60:	e13ffc17 	ldw	r4,-16(fp)
10006b64:	0008dd00 	call	10008dd0 <__srget_r>
10006b68:	00000506 	br	10006b80 <getc+0x84>
10006b6c:	80800017 	ldw	r2,0(r16)
10006b70:	10c00044 	addi	r3,r2,1
10006b74:	80c00015 	stw	r3,0(r16)
10006b78:	10800003 	ldbu	r2,0(r2)
10006b7c:	10803fcc 	andi	r2,r2,255
10006b80:	e0bffe15 	stw	r2,-8(fp)
  _newlib_flockfile_end (fp);
  return result;
10006b84:	e0bffe17 	ldw	r2,-8(fp)
}
10006b88:	e6ffff04 	addi	sp,fp,-4
10006b8c:	dfc00217 	ldw	ra,8(sp)
10006b90:	df000117 	ldw	fp,4(sp)
10006b94:	dc000017 	ldw	r16,0(sp)
10006b98:	dec00304 	addi	sp,sp,12
10006b9c:	f800283a 	ret

10006ba0 <malloc>:
#ifndef _REENT_ONLY

_PTR
_DEFUN (malloc, (nbytes),
	size_t nbytes)		/* get a block */
{
10006ba0:	defffd04 	addi	sp,sp,-12
10006ba4:	dfc00215 	stw	ra,8(sp)
10006ba8:	df000115 	stw	fp,4(sp)
10006bac:	df000104 	addi	fp,sp,4
10006bb0:	e13fff15 	stw	r4,-4(fp)
  return _malloc_r (_REENT, nbytes);
10006bb4:	008403b4 	movhi	r2,4110
10006bb8:	10a4cc04 	addi	r2,r2,-27856
10006bbc:	10800017 	ldw	r2,0(r2)
10006bc0:	e17fff17 	ldw	r5,-4(fp)
10006bc4:	1009883a 	mov	r4,r2
10006bc8:	0006fd80 	call	10006fd8 <_malloc_r>
}
10006bcc:	e037883a 	mov	sp,fp
10006bd0:	dfc00117 	ldw	ra,4(sp)
10006bd4:	df000017 	ldw	fp,0(sp)
10006bd8:	dec00204 	addi	sp,sp,8
10006bdc:	f800283a 	ret

10006be0 <free>:

void
_DEFUN (free, (aptr),
	_PTR aptr)
{
10006be0:	defffd04 	addi	sp,sp,-12
10006be4:	dfc00215 	stw	ra,8(sp)
10006be8:	df000115 	stw	fp,4(sp)
10006bec:	df000104 	addi	fp,sp,4
10006bf0:	e13fff15 	stw	r4,-4(fp)
  _free_r (_REENT, aptr);
10006bf4:	008403b4 	movhi	r2,4110
10006bf8:	10a4cc04 	addi	r2,r2,-27856
10006bfc:	10800017 	ldw	r2,0(r2)
10006c00:	e17fff17 	ldw	r5,-4(fp)
10006c04:	1009883a 	mov	r4,r2
10006c08:	000e9740 	call	1000e974 <_free_r>
}
10006c0c:	0001883a 	nop
10006c10:	e037883a 	mov	sp,fp
10006c14:	dfc00117 	ldw	ra,4(sp)
10006c18:	df000017 	ldw	fp,0(sp)
10006c1c:	dec00204 	addi	sp,sp,8
10006c20:	f800283a 	ret

10006c24 <malloc_extend_top>:
#if __STD_C
static void malloc_extend_top(RARG INTERNAL_SIZE_T nb)
#else
static void malloc_extend_top(RARG nb) RDECL INTERNAL_SIZE_T nb;
#endif
{
10006c24:	defff104 	addi	sp,sp,-60
10006c28:	dfc00e15 	stw	ra,56(sp)
10006c2c:	df000d15 	stw	fp,52(sp)
10006c30:	df000d04 	addi	fp,sp,52
10006c34:	e13ffe15 	stw	r4,-8(fp)
10006c38:	e17fff15 	stw	r5,-4(fp)
  char*     brk;                  /* return value from sbrk */
  INTERNAL_SIZE_T front_misalign; /* unusable bytes at front of sbrked space */
  INTERNAL_SIZE_T correction;     /* bytes for 2nd sbrk call */
  int correction_failed = 0;      /* whether we should relax the assertion */
10006c3c:	e03ff715 	stw	zero,-36(fp)
  char*     new_brk;              /* return of 2nd sbrk call */
  INTERNAL_SIZE_T top_size;       /* new size of top chunk */

  mchunkptr old_top     = top;  /* Record state of old top */
10006c40:	00840374 	movhi	r2,4109
10006c44:	109f1e04 	addi	r2,r2,31864
10006c48:	10800217 	ldw	r2,8(r2)
10006c4c:	e0bff815 	stw	r2,-32(fp)
  INTERNAL_SIZE_T old_top_size = chunksize(old_top);
10006c50:	e0bff817 	ldw	r2,-32(fp)
10006c54:	10c00117 	ldw	r3,4(r2)
10006c58:	00bfff04 	movi	r2,-4
10006c5c:	1884703a 	and	r2,r3,r2
10006c60:	e0bff915 	stw	r2,-28(fp)
  char*     old_end      = (char*)(chunk_at_offset(old_top, old_top_size));
10006c64:	e0fff817 	ldw	r3,-32(fp)
10006c68:	e0bff917 	ldw	r2,-28(fp)
10006c6c:	1885883a 	add	r2,r3,r2
10006c70:	e0bffa15 	stw	r2,-24(fp)

  /* Pad request with top_pad plus minimal overhead */
  
  INTERNAL_SIZE_T    sbrk_size     = nb + top_pad + MINSIZE;
10006c74:	d0c65217 	ldw	r3,6472(gp)
10006c78:	e0bfff17 	ldw	r2,-4(fp)
10006c7c:	1885883a 	add	r2,r3,r2
10006c80:	10800404 	addi	r2,r2,16
10006c84:	e0bff615 	stw	r2,-40(fp)
  unsigned long pagesz    = malloc_getpagesize;
10006c88:	00840004 	movi	r2,4096
10006c8c:	e0bffb15 	stw	r2,-20(fp)

  /* If not the first time through, round to preserve page boundary */
  /* Otherwise, we need to correct to a page size below anyway. */
  /* (We also correct below if an intervening foreign sbrk call.) */

  if (sbrk_base != (char*)(-1))
10006c90:	d0a00517 	ldw	r2,-32748(gp)
10006c94:	10bfffe0 	cmpeqi	r2,r2,-1
10006c98:	1000081e 	bne	r2,zero,10006cbc <malloc_extend_top+0x98>
    sbrk_size = (sbrk_size + (pagesz - 1)) & ~(pagesz - 1);
10006c9c:	e0fffb17 	ldw	r3,-20(fp)
10006ca0:	e0bff617 	ldw	r2,-40(fp)
10006ca4:	1885883a 	add	r2,r3,r2
10006ca8:	10ffffc4 	addi	r3,r2,-1
10006cac:	e0bffb17 	ldw	r2,-20(fp)
10006cb0:	0085c83a 	sub	r2,zero,r2
10006cb4:	1884703a 	and	r2,r3,r2
10006cb8:	e0bff615 	stw	r2,-40(fp)

  brk = (char*)(MORECORE (sbrk_size));
10006cbc:	e0bff617 	ldw	r2,-40(fp)
10006cc0:	100b883a 	mov	r5,r2
10006cc4:	e13ffe17 	ldw	r4,-8(fp)
10006cc8:	00093140 	call	10009314 <_sbrk_r>
10006ccc:	e0bff315 	stw	r2,-52(fp)

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
10006cd0:	e0bff317 	ldw	r2,-52(fp)
10006cd4:	10bfffe0 	cmpeqi	r2,r2,-1
10006cd8:	1000b91e 	bne	r2,zero,10006fc0 <malloc_extend_top+0x39c>
10006cdc:	e0fff317 	ldw	r3,-52(fp)
10006ce0:	e0bffa17 	ldw	r2,-24(fp)
10006ce4:	1880042e 	bgeu	r3,r2,10006cf8 <malloc_extend_top+0xd4>
      (brk < old_end && old_top != initial_top))
10006ce8:	00840374 	movhi	r2,4109
10006cec:	109f1e04 	addi	r2,r2,31864
10006cf0:	e0fff817 	ldw	r3,-32(fp)
10006cf4:	1880b21e 	bne	r3,r2,10006fc0 <malloc_extend_top+0x39c>
    return;

  sbrked_mem += sbrk_size;
10006cf8:	008403b4 	movhi	r2,4110
10006cfc:	108b3204 	addi	r2,r2,11464
10006d00:	10800017 	ldw	r2,0(r2)
10006d04:	1007883a 	mov	r3,r2
10006d08:	e0bff617 	ldw	r2,-40(fp)
10006d0c:	1885883a 	add	r2,r3,r2
10006d10:	1007883a 	mov	r3,r2
10006d14:	008403b4 	movhi	r2,4110
10006d18:	108b3204 	addi	r2,r2,11464
10006d1c:	10c00015 	stw	r3,0(r2)

  if (brk == old_end /* can just add bytes to current top, unless
10006d20:	e0fff317 	ldw	r3,-52(fp)
10006d24:	e0bffa17 	ldw	r2,-24(fp)
10006d28:	1880101e 	bne	r3,r2,10006d6c <malloc_extend_top+0x148>
			previous correction failed */
      && ((POINTER_UINT)old_end & (pagesz - 1)) == 0)
10006d2c:	e0bffb17 	ldw	r2,-20(fp)
10006d30:	10ffffc4 	addi	r3,r2,-1
10006d34:	e0bffa17 	ldw	r2,-24(fp)
10006d38:	1884703a 	and	r2,r3,r2
10006d3c:	10000b1e 	bne	r2,zero,10006d6c <malloc_extend_top+0x148>
  {
    top_size = sbrk_size + old_top_size;
10006d40:	e0fff617 	ldw	r3,-40(fp)
10006d44:	e0bff917 	ldw	r2,-28(fp)
10006d48:	1885883a 	add	r2,r3,r2
10006d4c:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
10006d50:	00840374 	movhi	r2,4109
10006d54:	109f1e04 	addi	r2,r2,31864
10006d58:	10800217 	ldw	r2,8(r2)
10006d5c:	e0fffc17 	ldw	r3,-16(fp)
10006d60:	18c00054 	ori	r3,r3,1
10006d64:	10c00115 	stw	r3,4(r2)
10006d68:	00008006 	br	10006f6c <malloc_extend_top+0x348>
  }
  else
  {
    if (sbrk_base == (char*)(-1))  /* First time through. Record base */
10006d6c:	d0a00517 	ldw	r2,-32748(gp)
10006d70:	10bfffd8 	cmpnei	r2,r2,-1
10006d74:	1000031e 	bne	r2,zero,10006d84 <malloc_extend_top+0x160>
      sbrk_base = brk;
10006d78:	e0bff317 	ldw	r2,-52(fp)
10006d7c:	d0a00515 	stw	r2,-32748(gp)
10006d80:	00000a06 	br	10006dac <malloc_extend_top+0x188>
    else  /* Someone else called sbrk().  Count those bytes as sbrked_mem. */
      sbrked_mem += brk - (char*)old_end;
10006d84:	008403b4 	movhi	r2,4110
10006d88:	108b3204 	addi	r2,r2,11464
10006d8c:	10c00017 	ldw	r3,0(r2)
10006d90:	e13ff317 	ldw	r4,-52(fp)
10006d94:	e0bffa17 	ldw	r2,-24(fp)
10006d98:	2085c83a 	sub	r2,r4,r2
10006d9c:	1887883a 	add	r3,r3,r2
10006da0:	008403b4 	movhi	r2,4110
10006da4:	108b3204 	addi	r2,r2,11464
10006da8:	10c00015 	stw	r3,0(r2)

    /* Guarantee alignment of first new chunk made from this space */
    front_misalign = (POINTER_UINT)chunk2mem(brk) & MALLOC_ALIGN_MASK;
10006dac:	e0bff317 	ldw	r2,-52(fp)
10006db0:	10800204 	addi	r2,r2,8
10006db4:	108001cc 	andi	r2,r2,7
10006db8:	e0bffd15 	stw	r2,-12(fp)
    if (front_misalign > 0) 
10006dbc:	e0bffd17 	ldw	r2,-12(fp)
10006dc0:	10000926 	beq	r2,zero,10006de8 <malloc_extend_top+0x1c4>
    {
      correction = (MALLOC_ALIGNMENT) - front_misalign;
10006dc4:	00c00204 	movi	r3,8
10006dc8:	e0bffd17 	ldw	r2,-12(fp)
10006dcc:	1885c83a 	sub	r2,r3,r2
10006dd0:	e0bff415 	stw	r2,-48(fp)
      brk += correction;
10006dd4:	e0fff317 	ldw	r3,-52(fp)
10006dd8:	e0bff417 	ldw	r2,-48(fp)
10006ddc:	1885883a 	add	r2,r3,r2
10006de0:	e0bff315 	stw	r2,-52(fp)
10006de4:	00000106 	br	10006dec <malloc_extend_top+0x1c8>
    }
    else
      correction = 0;
10006de8:	e03ff415 	stw	zero,-48(fp)

    /* Guarantee the next brk will be at a page boundary */
    correction += pagesz - ((POINTER_UINT)(brk + sbrk_size) & (pagesz - 1));
10006dec:	e0fff317 	ldw	r3,-52(fp)
10006df0:	e0bff617 	ldw	r2,-40(fp)
10006df4:	1885883a 	add	r2,r3,r2
10006df8:	1007883a 	mov	r3,r2
10006dfc:	e0bffb17 	ldw	r2,-20(fp)
10006e00:	10bfffc4 	addi	r2,r2,-1
10006e04:	1884703a 	and	r2,r3,r2
10006e08:	e0fffb17 	ldw	r3,-20(fp)
10006e0c:	1885c83a 	sub	r2,r3,r2
10006e10:	e0fff417 	ldw	r3,-48(fp)
10006e14:	1885883a 	add	r2,r3,r2
10006e18:	e0bff415 	stw	r2,-48(fp)

    /* Allocate correction */
    new_brk = (char*)(MORECORE (correction));
10006e1c:	e0bff417 	ldw	r2,-48(fp)
10006e20:	100b883a 	mov	r5,r2
10006e24:	e13ffe17 	ldw	r4,-8(fp)
10006e28:	00093140 	call	10009314 <_sbrk_r>
10006e2c:	e0bff515 	stw	r2,-44(fp)
    if (new_brk == (char*)(MORECORE_FAILURE))
10006e30:	e0bff517 	ldw	r2,-44(fp)
10006e34:	10bfffd8 	cmpnei	r2,r2,-1
10006e38:	1000051e 	bne	r2,zero,10006e50 <malloc_extend_top+0x22c>
      {
	correction = 0;
10006e3c:	e03ff415 	stw	zero,-48(fp)
	correction_failed = 1;
10006e40:	00800044 	movi	r2,1
10006e44:	e0bff715 	stw	r2,-36(fp)
	new_brk = brk;
10006e48:	e0bff317 	ldw	r2,-52(fp)
10006e4c:	e0bff515 	stw	r2,-44(fp)
      }

    sbrked_mem += correction;
10006e50:	008403b4 	movhi	r2,4110
10006e54:	108b3204 	addi	r2,r2,11464
10006e58:	10800017 	ldw	r2,0(r2)
10006e5c:	1007883a 	mov	r3,r2
10006e60:	e0bff417 	ldw	r2,-48(fp)
10006e64:	1885883a 	add	r2,r3,r2
10006e68:	1007883a 	mov	r3,r2
10006e6c:	008403b4 	movhi	r2,4110
10006e70:	108b3204 	addi	r2,r2,11464
10006e74:	10c00015 	stw	r3,0(r2)

    top = (mchunkptr)brk;
10006e78:	00840374 	movhi	r2,4109
10006e7c:	109f1e04 	addi	r2,r2,31864
10006e80:	e0fff317 	ldw	r3,-52(fp)
10006e84:	10c00215 	stw	r3,8(r2)
    top_size = new_brk - brk + correction;
10006e88:	e0fff517 	ldw	r3,-44(fp)
10006e8c:	e0bff317 	ldw	r2,-52(fp)
10006e90:	1885c83a 	sub	r2,r3,r2
10006e94:	1007883a 	mov	r3,r2
10006e98:	e0bff417 	ldw	r2,-48(fp)
10006e9c:	1885883a 	add	r2,r3,r2
10006ea0:	e0bffc15 	stw	r2,-16(fp)
    set_head(top, top_size | PREV_INUSE);
10006ea4:	00840374 	movhi	r2,4109
10006ea8:	109f1e04 	addi	r2,r2,31864
10006eac:	10800217 	ldw	r2,8(r2)
10006eb0:	e0fffc17 	ldw	r3,-16(fp)
10006eb4:	18c00054 	ori	r3,r3,1
10006eb8:	10c00115 	stw	r3,4(r2)

    if (old_top != initial_top)
10006ebc:	00840374 	movhi	r2,4109
10006ec0:	109f1e04 	addi	r2,r2,31864
10006ec4:	e0fff817 	ldw	r3,-32(fp)
10006ec8:	18802826 	beq	r3,r2,10006f6c <malloc_extend_top+0x348>

      /* There must have been an intervening foreign sbrk call. */
      /* A double fencepost is necessary to prevent consolidation */

      /* If not enough space to do this, then user did something very wrong */
      if (old_top_size < MINSIZE) 
10006ecc:	e0bff917 	ldw	r2,-28(fp)
10006ed0:	10800428 	cmpgeui	r2,r2,16
10006ed4:	1000061e 	bne	r2,zero,10006ef0 <malloc_extend_top+0x2cc>
      {
        set_head(top, PREV_INUSE); /* will force null return from malloc */
10006ed8:	00840374 	movhi	r2,4109
10006edc:	109f1e04 	addi	r2,r2,31864
10006ee0:	10800217 	ldw	r2,8(r2)
10006ee4:	00c00044 	movi	r3,1
10006ee8:	10c00115 	stw	r3,4(r2)
        return;
10006eec:	00003506 	br	10006fc4 <malloc_extend_top+0x3a0>
      }

      /* Also keep size a multiple of MALLOC_ALIGNMENT */
      old_top_size = (old_top_size - 3*SIZE_SZ) & ~MALLOC_ALIGN_MASK;
10006ef0:	e0bff917 	ldw	r2,-28(fp)
10006ef4:	10fffd04 	addi	r3,r2,-12
10006ef8:	00bffe04 	movi	r2,-8
10006efc:	1884703a 	and	r2,r3,r2
10006f00:	e0bff915 	stw	r2,-28(fp)
      set_head_size(old_top, old_top_size);
10006f04:	e0bff817 	ldw	r2,-32(fp)
10006f08:	10800117 	ldw	r2,4(r2)
10006f0c:	10c0004c 	andi	r3,r2,1
10006f10:	e0bff917 	ldw	r2,-28(fp)
10006f14:	1886b03a 	or	r3,r3,r2
10006f18:	e0bff817 	ldw	r2,-32(fp)
10006f1c:	10c00115 	stw	r3,4(r2)
      chunk_at_offset(old_top, old_top_size          )->size =
10006f20:	e0fff817 	ldw	r3,-32(fp)
10006f24:	e0bff917 	ldw	r2,-28(fp)
10006f28:	1885883a 	add	r2,r3,r2
10006f2c:	00c00144 	movi	r3,5
10006f30:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      chunk_at_offset(old_top, old_top_size + SIZE_SZ)->size =
10006f34:	e0bff917 	ldw	r2,-28(fp)
10006f38:	10800104 	addi	r2,r2,4
10006f3c:	e0fff817 	ldw	r3,-32(fp)
10006f40:	1885883a 	add	r2,r3,r2
10006f44:	00c00144 	movi	r3,5
10006f48:	10c00115 	stw	r3,4(r2)
        SIZE_SZ|PREV_INUSE;
      /* If possible, release the rest. */
      if (old_top_size >= MINSIZE) 
10006f4c:	e0bff917 	ldw	r2,-28(fp)
10006f50:	10800430 	cmpltui	r2,r2,16
10006f54:	1000051e 	bne	r2,zero,10006f6c <malloc_extend_top+0x348>
        fREe(RCALL chunk2mem(old_top));
10006f58:	e0bff817 	ldw	r2,-32(fp)
10006f5c:	10800204 	addi	r2,r2,8
10006f60:	100b883a 	mov	r5,r2
10006f64:	e13ffe17 	ldw	r4,-8(fp)
10006f68:	000e9740 	call	1000e974 <_free_r>
    }
  }

  if ((unsigned long)sbrked_mem > (unsigned long)max_sbrked_mem) 
10006f6c:	008403b4 	movhi	r2,4110
10006f70:	108b3204 	addi	r2,r2,11464
10006f74:	10800017 	ldw	r2,0(r2)
10006f78:	1007883a 	mov	r3,r2
10006f7c:	d0865317 	ldw	r2,6476(gp)
10006f80:	10c0042e 	bgeu	r2,r3,10006f94 <malloc_extend_top+0x370>
    max_sbrked_mem = sbrked_mem;
10006f84:	008403b4 	movhi	r2,4110
10006f88:	108b3204 	addi	r2,r2,11464
10006f8c:	10800017 	ldw	r2,0(r2)
10006f90:	d0865315 	stw	r2,6476(gp)
#if HAVE_MMAP
  if ((unsigned long)(mmapped_mem + sbrked_mem) > (unsigned long)max_total_mem) 
    max_total_mem = mmapped_mem + sbrked_mem;
#else
  if ((unsigned long)(sbrked_mem) > (unsigned long)max_total_mem) 
10006f94:	008403b4 	movhi	r2,4110
10006f98:	108b3204 	addi	r2,r2,11464
10006f9c:	10800017 	ldw	r2,0(r2)
10006fa0:	1007883a 	mov	r3,r2
10006fa4:	d0865417 	ldw	r2,6480(gp)
10006fa8:	10c0062e 	bgeu	r2,r3,10006fc4 <malloc_extend_top+0x3a0>
    max_total_mem = sbrked_mem;
10006fac:	008403b4 	movhi	r2,4110
10006fb0:	108b3204 	addi	r2,r2,11464
10006fb4:	10800017 	ldw	r2,0(r2)
10006fb8:	d0865415 	stw	r2,6480(gp)
10006fbc:	00000106 	br	10006fc4 <malloc_extend_top+0x3a0>
  brk = (char*)(MORECORE (sbrk_size));

  /* Fail if sbrk failed or if a foreign sbrk call killed our space */
  if (brk == (char*)(MORECORE_FAILURE) || 
      (brk < old_end && old_top != initial_top))
    return;
10006fc0:	0001883a 	nop
#endif

  /* We always land on a page boundary */
  assert(((unsigned long)((char*)top + top_size) & (pagesz - 1)) == 0
	 || correction_failed);
}
10006fc4:	e037883a 	mov	sp,fp
10006fc8:	dfc00117 	ldw	ra,4(sp)
10006fcc:	df000017 	ldw	fp,0(sp)
10006fd0:	dec00204 	addi	sp,sp,8
10006fd4:	f800283a 	ret

10006fd8 <_malloc_r>:
#if __STD_C
Void_t* mALLOc(RARG size_t bytes)
#else
Void_t* mALLOc(RARG bytes) RDECL size_t bytes;
#endif
{
10006fd8:	deffef04 	addi	sp,sp,-68
10006fdc:	dfc01015 	stw	ra,64(sp)
10006fe0:	df000f15 	stw	fp,60(sp)
10006fe4:	df000f04 	addi	fp,sp,60
10006fe8:	e13ffe15 	stw	r4,-8(fp)
10006fec:	e17fff15 	stw	r5,-4(fp)
  int       startidx;                /* first bin of a traversed block */
  mchunkptr fwd;                     /* misc temp for linking */
  mchunkptr bck;                     /* misc temp for linking */
  mbinptr q;                         /* misc temp */

  INTERNAL_SIZE_T nb  = request2size(bytes);  /* padded request size; */
10006ff0:	e0bfff17 	ldw	r2,-4(fp)
10006ff4:	108002c4 	addi	r2,r2,11
10006ff8:	108005f0 	cmpltui	r2,r2,23
10006ffc:	1000051e 	bne	r2,zero,10007014 <_malloc_r+0x3c>
10007000:	e0bfff17 	ldw	r2,-4(fp)
10007004:	10c002c4 	addi	r3,r2,11
10007008:	00bffe04 	movi	r2,-8
1000700c:	1884703a 	and	r2,r3,r2
10007010:	00000106 	br	10007018 <_malloc_r+0x40>
10007014:	00800404 	movi	r2,16
10007018:	e0bffa15 	stw	r2,-24(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
1000701c:	e0bffa17 	ldw	r2,-24(fp)
10007020:	10000316 	blt	r2,zero,10007030 <_malloc_r+0x58>
10007024:	e0fffa17 	ldw	r3,-24(fp)
10007028:	e0bfff17 	ldw	r2,-4(fp)
1000702c:	1880052e 	bgeu	r3,r2,10007044 <_malloc_r+0x6c>
  {
    RERRNO = ENOMEM;
10007030:	e0bffe17 	ldw	r2,-8(fp)
10007034:	00c00304 	movi	r3,12
10007038:	10c00015 	stw	r3,0(r2)
    return 0;
1000703c:	0005883a 	mov	r2,zero
10007040:	0002bf06 	br	10007b40 <_malloc_r+0xb68>
  }

  MALLOC_LOCK;
10007044:	e13ffe17 	ldw	r4,-8(fp)
10007048:	0015f700 	call	10015f70 <__malloc_lock>

  /* Check for exact match in a bin */

  if (is_small_request(nb))  /* Faster version for small requests */
1000704c:	e0bffa17 	ldw	r2,-24(fp)
10007050:	10807e28 	cmpgeui	r2,r2,504
10007054:	10003f1e 	bne	r2,zero,10007154 <_malloc_r+0x17c>
  {
    idx = smallbin_index(nb); 
10007058:	e0bffa17 	ldw	r2,-24(fp)
1000705c:	1004d0fa 	srli	r2,r2,3
10007060:	e0bff215 	stw	r2,-56(fp)

    /* No traversal or size check necessary for small bins.  */

    q = bin_at(idx);
10007064:	e0bff217 	ldw	r2,-56(fp)
10007068:	10800044 	addi	r2,r2,1
1000706c:	1085883a 	add	r2,r2,r2
10007070:	1085883a 	add	r2,r2,r2
10007074:	1087883a 	add	r3,r2,r2
10007078:	00840374 	movhi	r2,4109
1000707c:	109f1e04 	addi	r2,r2,31864
10007080:	1885883a 	add	r2,r3,r2
10007084:	10bffe04 	addi	r2,r2,-8
10007088:	e0bff915 	stw	r2,-28(fp)
    victim = last(q);
1000708c:	e0bff917 	ldw	r2,-28(fp)
10007090:	10800317 	ldw	r2,12(r2)
10007094:	e0bff115 	stw	r2,-60(fp)

#if MALLOC_ALIGN != 16
    /* Also scan the next one, since it would have a remainder < MINSIZE */
    if (victim == q)
10007098:	e0fff117 	ldw	r3,-60(fp)
1000709c:	e0bff917 	ldw	r2,-28(fp)
100070a0:	1880061e 	bne	r3,r2,100070bc <_malloc_r+0xe4>
    {
      q = next_bin(q);
100070a4:	e0bff917 	ldw	r2,-28(fp)
100070a8:	10800204 	addi	r2,r2,8
100070ac:	e0bff915 	stw	r2,-28(fp)
      victim = last(q);
100070b0:	e0bff917 	ldw	r2,-28(fp)
100070b4:	10800317 	ldw	r2,12(r2)
100070b8:	e0bff115 	stw	r2,-60(fp)
    }
#endif
    if (victim != q)
100070bc:	e0fff117 	ldw	r3,-60(fp)
100070c0:	e0bff917 	ldw	r2,-28(fp)
100070c4:	18801f26 	beq	r3,r2,10007144 <_malloc_r+0x16c>
    {
      victim_size = chunksize(victim);
100070c8:	e0bff117 	ldw	r2,-60(fp)
100070cc:	10c00117 	ldw	r3,4(r2)
100070d0:	00bfff04 	movi	r2,-4
100070d4:	1884703a 	and	r2,r3,r2
100070d8:	e0bffb15 	stw	r2,-20(fp)
      unlink(victim, bck, fwd);
100070dc:	e0bff117 	ldw	r2,-60(fp)
100070e0:	10800317 	ldw	r2,12(r2)
100070e4:	e0bff815 	stw	r2,-32(fp)
100070e8:	e0bff117 	ldw	r2,-60(fp)
100070ec:	10800217 	ldw	r2,8(r2)
100070f0:	e0bff715 	stw	r2,-36(fp)
100070f4:	e0bff717 	ldw	r2,-36(fp)
100070f8:	e0fff817 	ldw	r3,-32(fp)
100070fc:	10c00315 	stw	r3,12(r2)
10007100:	e0bff817 	ldw	r2,-32(fp)
10007104:	e0fff717 	ldw	r3,-36(fp)
10007108:	10c00215 	stw	r3,8(r2)
      set_inuse_bit_at_offset(victim, victim_size);
1000710c:	e0fff117 	ldw	r3,-60(fp)
10007110:	e0bffb17 	ldw	r2,-20(fp)
10007114:	1885883a 	add	r2,r3,r2
10007118:	e13ff117 	ldw	r4,-60(fp)
1000711c:	e0fffb17 	ldw	r3,-20(fp)
10007120:	20c7883a 	add	r3,r4,r3
10007124:	18c00117 	ldw	r3,4(r3)
10007128:	18c00054 	ori	r3,r3,1
1000712c:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
10007130:	e13ffe17 	ldw	r4,-8(fp)
10007134:	0015f940 	call	10015f94 <__malloc_unlock>
      return chunk2mem(victim);
10007138:	e0bff117 	ldw	r2,-60(fp)
1000713c:	10800204 	addi	r2,r2,8
10007140:	00027f06 	br	10007b40 <_malloc_r+0xb68>
    }

    idx += 2; /* Set for bin scan below. We've already scanned 2 bins. */
10007144:	e0bff217 	ldw	r2,-56(fp)
10007148:	10800084 	addi	r2,r2,2
1000714c:	e0bff215 	stw	r2,-56(fp)
10007150:	00007306 	br	10007320 <_malloc_r+0x348>

  }
  else
  {
    idx = bin_index(nb);
10007154:	e0bffa17 	ldw	r2,-24(fp)
10007158:	1004d27a 	srli	r2,r2,9
1000715c:	1000031e 	bne	r2,zero,1000716c <_malloc_r+0x194>
10007160:	e0bffa17 	ldw	r2,-24(fp)
10007164:	1004d0fa 	srli	r2,r2,3
10007168:	00002906 	br	10007210 <_malloc_r+0x238>
1000716c:	e0bffa17 	ldw	r2,-24(fp)
10007170:	1004d27a 	srli	r2,r2,9
10007174:	10800168 	cmpgeui	r2,r2,5
10007178:	1000041e 	bne	r2,zero,1000718c <_malloc_r+0x1b4>
1000717c:	e0bffa17 	ldw	r2,-24(fp)
10007180:	1004d1ba 	srli	r2,r2,6
10007184:	10800e04 	addi	r2,r2,56
10007188:	00002106 	br	10007210 <_malloc_r+0x238>
1000718c:	e0bffa17 	ldw	r2,-24(fp)
10007190:	1004d27a 	srli	r2,r2,9
10007194:	10800568 	cmpgeui	r2,r2,21
10007198:	1000041e 	bne	r2,zero,100071ac <_malloc_r+0x1d4>
1000719c:	e0bffa17 	ldw	r2,-24(fp)
100071a0:	1004d27a 	srli	r2,r2,9
100071a4:	108016c4 	addi	r2,r2,91
100071a8:	00001906 	br	10007210 <_malloc_r+0x238>
100071ac:	e0bffa17 	ldw	r2,-24(fp)
100071b0:	1004d27a 	srli	r2,r2,9
100071b4:	10801568 	cmpgeui	r2,r2,85
100071b8:	1000041e 	bne	r2,zero,100071cc <_malloc_r+0x1f4>
100071bc:	e0bffa17 	ldw	r2,-24(fp)
100071c0:	1004d33a 	srli	r2,r2,12
100071c4:	10801b84 	addi	r2,r2,110
100071c8:	00001106 	br	10007210 <_malloc_r+0x238>
100071cc:	e0bffa17 	ldw	r2,-24(fp)
100071d0:	1004d27a 	srli	r2,r2,9
100071d4:	10805568 	cmpgeui	r2,r2,341
100071d8:	1000041e 	bne	r2,zero,100071ec <_malloc_r+0x214>
100071dc:	e0bffa17 	ldw	r2,-24(fp)
100071e0:	1004d3fa 	srli	r2,r2,15
100071e4:	10801dc4 	addi	r2,r2,119
100071e8:	00000906 	br	10007210 <_malloc_r+0x238>
100071ec:	e0bffa17 	ldw	r2,-24(fp)
100071f0:	1004d27a 	srli	r2,r2,9
100071f4:	10815568 	cmpgeui	r2,r2,1365
100071f8:	1000041e 	bne	r2,zero,1000720c <_malloc_r+0x234>
100071fc:	e0bffa17 	ldw	r2,-24(fp)
10007200:	1004d4ba 	srli	r2,r2,18
10007204:	10801f04 	addi	r2,r2,124
10007208:	00000106 	br	10007210 <_malloc_r+0x238>
1000720c:	00801f84 	movi	r2,126
10007210:	e0bff215 	stw	r2,-56(fp)
    bin = bin_at(idx);
10007214:	e0bff217 	ldw	r2,-56(fp)
10007218:	10800044 	addi	r2,r2,1
1000721c:	1085883a 	add	r2,r2,r2
10007220:	1085883a 	add	r2,r2,r2
10007224:	1087883a 	add	r3,r2,r2
10007228:	00840374 	movhi	r2,4109
1000722c:	109f1e04 	addi	r2,r2,31864
10007230:	1885883a 	add	r2,r3,r2
10007234:	10bffe04 	addi	r2,r2,-8
10007238:	e0bff315 	stw	r2,-52(fp)

    for (victim = last(bin); victim != bin; victim = victim->bk)
1000723c:	e0bff317 	ldw	r2,-52(fp)
10007240:	10800317 	ldw	r2,12(r2)
10007244:	e0bff115 	stw	r2,-60(fp)
10007248:	00002f06 	br	10007308 <_malloc_r+0x330>
    {
      victim_size = chunksize(victim);
1000724c:	e0bff117 	ldw	r2,-60(fp)
10007250:	10c00117 	ldw	r3,4(r2)
10007254:	00bfff04 	movi	r2,-4
10007258:	1884703a 	and	r2,r3,r2
1000725c:	e0bffb15 	stw	r2,-20(fp)
      remainder_size = long_sub_size_t(victim_size, nb);
10007260:	e0fffb17 	ldw	r3,-20(fp)
10007264:	e0bffa17 	ldw	r2,-24(fp)
10007268:	1885c83a 	sub	r2,r3,r2
1000726c:	e0bff415 	stw	r2,-48(fp)
      
      if (remainder_size >= (long)MINSIZE) /* too big */
10007270:	e0bff417 	ldw	r2,-48(fp)
10007274:	10800410 	cmplti	r2,r2,16
10007278:	1000041e 	bne	r2,zero,1000728c <_malloc_r+0x2b4>
      {
        --idx; /* adjust to rescan below after checking last remainder */
1000727c:	e0bff217 	ldw	r2,-56(fp)
10007280:	10bfffc4 	addi	r2,r2,-1
10007284:	e0bff215 	stw	r2,-56(fp)
        break;   
10007288:	00002206 	br	10007314 <_malloc_r+0x33c>
      }

      else if (remainder_size >= 0) /* exact fit */
1000728c:	e0bff417 	ldw	r2,-48(fp)
10007290:	10001a16 	blt	r2,zero,100072fc <_malloc_r+0x324>
      {
        unlink(victim, bck, fwd);
10007294:	e0bff117 	ldw	r2,-60(fp)
10007298:	10800317 	ldw	r2,12(r2)
1000729c:	e0bff815 	stw	r2,-32(fp)
100072a0:	e0bff117 	ldw	r2,-60(fp)
100072a4:	10800217 	ldw	r2,8(r2)
100072a8:	e0bff715 	stw	r2,-36(fp)
100072ac:	e0bff717 	ldw	r2,-36(fp)
100072b0:	e0fff817 	ldw	r3,-32(fp)
100072b4:	10c00315 	stw	r3,12(r2)
100072b8:	e0bff817 	ldw	r2,-32(fp)
100072bc:	e0fff717 	ldw	r3,-36(fp)
100072c0:	10c00215 	stw	r3,8(r2)
        set_inuse_bit_at_offset(victim, victim_size);
100072c4:	e0fff117 	ldw	r3,-60(fp)
100072c8:	e0bffb17 	ldw	r2,-20(fp)
100072cc:	1885883a 	add	r2,r3,r2
100072d0:	e13ff117 	ldw	r4,-60(fp)
100072d4:	e0fffb17 	ldw	r3,-20(fp)
100072d8:	20c7883a 	add	r3,r4,r3
100072dc:	18c00117 	ldw	r3,4(r3)
100072e0:	18c00054 	ori	r3,r3,1
100072e4:	10c00115 	stw	r3,4(r2)
        check_malloced_chunk(victim, nb);
	MALLOC_UNLOCK;
100072e8:	e13ffe17 	ldw	r4,-8(fp)
100072ec:	0015f940 	call	10015f94 <__malloc_unlock>
        return chunk2mem(victim);
100072f0:	e0bff117 	ldw	r2,-60(fp)
100072f4:	10800204 	addi	r2,r2,8
100072f8:	00021106 	br	10007b40 <_malloc_r+0xb68>
  else
  {
    idx = bin_index(nb);
    bin = bin_at(idx);

    for (victim = last(bin); victim != bin; victim = victim->bk)
100072fc:	e0bff117 	ldw	r2,-60(fp)
10007300:	10800317 	ldw	r2,12(r2)
10007304:	e0bff115 	stw	r2,-60(fp)
10007308:	e0fff117 	ldw	r3,-60(fp)
1000730c:	e0bff317 	ldw	r2,-52(fp)
10007310:	18bfce1e 	bne	r3,r2,1000724c <__alt_data_end+0xf800724c>
	MALLOC_UNLOCK;
        return chunk2mem(victim);
      }
    }

    ++idx; 
10007314:	e0bff217 	ldw	r2,-56(fp)
10007318:	10800044 	addi	r2,r2,1
1000731c:	e0bff215 	stw	r2,-56(fp)

  }

  /* Try to use the last split-off remainder */

  if ( (victim = last_remainder->fd) != last_remainder)
10007320:	00840374 	movhi	r2,4109
10007324:	109f2004 	addi	r2,r2,31872
10007328:	10800217 	ldw	r2,8(r2)
1000732c:	e0bff115 	stw	r2,-60(fp)
10007330:	00840374 	movhi	r2,4109
10007334:	109f2004 	addi	r2,r2,31872
10007338:	e0fff117 	ldw	r3,-60(fp)
1000733c:	1880e626 	beq	r3,r2,100076d8 <_malloc_r+0x700>
  {
    victim_size = chunksize(victim);
10007340:	e0bff117 	ldw	r2,-60(fp)
10007344:	10c00117 	ldw	r3,4(r2)
10007348:	00bfff04 	movi	r2,-4
1000734c:	1884703a 	and	r2,r3,r2
10007350:	e0bffb15 	stw	r2,-20(fp)
    remainder_size = long_sub_size_t(victim_size, nb);
10007354:	e0fffb17 	ldw	r3,-20(fp)
10007358:	e0bffa17 	ldw	r2,-24(fp)
1000735c:	1885c83a 	sub	r2,r3,r2
10007360:	e0bff415 	stw	r2,-48(fp)

    if (remainder_size >= (long)MINSIZE) /* re-split */
10007364:	e0bff417 	ldw	r2,-48(fp)
10007368:	10800410 	cmplti	r2,r2,16
1000736c:	1000271e 	bne	r2,zero,1000740c <_malloc_r+0x434>
    {
      remainder = chunk_at_offset(victim, nb);
10007370:	e0fff117 	ldw	r3,-60(fp)
10007374:	e0bffa17 	ldw	r2,-24(fp)
10007378:	1885883a 	add	r2,r3,r2
1000737c:	e0bffc15 	stw	r2,-16(fp)
      set_head(victim, nb | PREV_INUSE);
10007380:	e0bffa17 	ldw	r2,-24(fp)
10007384:	10c00054 	ori	r3,r2,1
10007388:	e0bff117 	ldw	r2,-60(fp)
1000738c:	10c00115 	stw	r3,4(r2)
      link_last_remainder(remainder);
10007390:	00c40374 	movhi	r3,4109
10007394:	18df2004 	addi	r3,r3,31872
10007398:	00840374 	movhi	r2,4109
1000739c:	109f2004 	addi	r2,r2,31872
100073a0:	e13ffc17 	ldw	r4,-16(fp)
100073a4:	11000315 	stw	r4,12(r2)
100073a8:	10800317 	ldw	r2,12(r2)
100073ac:	18800215 	stw	r2,8(r3)
100073b0:	00840374 	movhi	r2,4109
100073b4:	109f2004 	addi	r2,r2,31872
100073b8:	e0fffc17 	ldw	r3,-16(fp)
100073bc:	18800315 	stw	r2,12(r3)
100073c0:	e0bffc17 	ldw	r2,-16(fp)
100073c4:	10c00317 	ldw	r3,12(r2)
100073c8:	e0bffc17 	ldw	r2,-16(fp)
100073cc:	10c00215 	stw	r3,8(r2)
      set_head(remainder, remainder_size | PREV_INUSE);
100073d0:	e0bff417 	ldw	r2,-48(fp)
100073d4:	10800054 	ori	r2,r2,1
100073d8:	1007883a 	mov	r3,r2
100073dc:	e0bffc17 	ldw	r2,-16(fp)
100073e0:	10c00115 	stw	r3,4(r2)
      set_foot(remainder, remainder_size);
100073e4:	e0bff417 	ldw	r2,-48(fp)
100073e8:	e0fffc17 	ldw	r3,-16(fp)
100073ec:	1885883a 	add	r2,r3,r2
100073f0:	e0fff417 	ldw	r3,-48(fp)
100073f4:	10c00015 	stw	r3,0(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
100073f8:	e13ffe17 	ldw	r4,-8(fp)
100073fc:	0015f940 	call	10015f94 <__malloc_unlock>
      return chunk2mem(victim);
10007400:	e0bff117 	ldw	r2,-60(fp)
10007404:	10800204 	addi	r2,r2,8
10007408:	0001cd06 	br	10007b40 <_malloc_r+0xb68>
    }

    clear_last_remainder;
1000740c:	00c40374 	movhi	r3,4109
10007410:	18df2004 	addi	r3,r3,31872
10007414:	00840374 	movhi	r2,4109
10007418:	109f2004 	addi	r2,r2,31872
1000741c:	01040374 	movhi	r4,4109
10007420:	211f2004 	addi	r4,r4,31872
10007424:	11000315 	stw	r4,12(r2)
10007428:	10800317 	ldw	r2,12(r2)
1000742c:	18800215 	stw	r2,8(r3)

    if (remainder_size >= 0)  /* exhaust */
10007430:	e0bff417 	ldw	r2,-48(fp)
10007434:	10000e16 	blt	r2,zero,10007470 <_malloc_r+0x498>
    {
      set_inuse_bit_at_offset(victim, victim_size);
10007438:	e0fff117 	ldw	r3,-60(fp)
1000743c:	e0bffb17 	ldw	r2,-20(fp)
10007440:	1885883a 	add	r2,r3,r2
10007444:	e13ff117 	ldw	r4,-60(fp)
10007448:	e0fffb17 	ldw	r3,-20(fp)
1000744c:	20c7883a 	add	r3,r4,r3
10007450:	18c00117 	ldw	r3,4(r3)
10007454:	18c00054 	ori	r3,r3,1
10007458:	10c00115 	stw	r3,4(r2)
      check_malloced_chunk(victim, nb);
      MALLOC_UNLOCK;
1000745c:	e13ffe17 	ldw	r4,-8(fp)
10007460:	0015f940 	call	10015f94 <__malloc_unlock>
      return chunk2mem(victim);
10007464:	e0bff117 	ldw	r2,-60(fp)
10007468:	10800204 	addi	r2,r2,8
1000746c:	0001b406 	br	10007b40 <_malloc_r+0xb68>
    }

    /* Else place in bin */

    frontlink(victim, victim_size, remainder_index, bck, fwd);
10007470:	e0bffb17 	ldw	r2,-20(fp)
10007474:	10808028 	cmpgeui	r2,r2,512
10007478:	10002c1e 	bne	r2,zero,1000752c <_malloc_r+0x554>
1000747c:	e0bffb17 	ldw	r2,-20(fp)
10007480:	1004d0fa 	srli	r2,r2,3
10007484:	e0bffd15 	stw	r2,-12(fp)
10007488:	00c40374 	movhi	r3,4109
1000748c:	18df1e04 	addi	r3,r3,31864
10007490:	00840374 	movhi	r2,4109
10007494:	109f1e04 	addi	r2,r2,31864
10007498:	11000117 	ldw	r4,4(r2)
1000749c:	e0bffd17 	ldw	r2,-12(fp)
100074a0:	1000010e 	bge	r2,zero,100074a8 <_malloc_r+0x4d0>
100074a4:	108000c4 	addi	r2,r2,3
100074a8:	1005d0ba 	srai	r2,r2,2
100074ac:	100b883a 	mov	r5,r2
100074b0:	00800044 	movi	r2,1
100074b4:	1144983a 	sll	r2,r2,r5
100074b8:	2084b03a 	or	r2,r4,r2
100074bc:	18800115 	stw	r2,4(r3)
100074c0:	e0bffd17 	ldw	r2,-12(fp)
100074c4:	10800044 	addi	r2,r2,1
100074c8:	1085883a 	add	r2,r2,r2
100074cc:	1085883a 	add	r2,r2,r2
100074d0:	1087883a 	add	r3,r2,r2
100074d4:	00840374 	movhi	r2,4109
100074d8:	109f1e04 	addi	r2,r2,31864
100074dc:	1885883a 	add	r2,r3,r2
100074e0:	10bffe04 	addi	r2,r2,-8
100074e4:	e0bff815 	stw	r2,-32(fp)
100074e8:	e0bff817 	ldw	r2,-32(fp)
100074ec:	10800217 	ldw	r2,8(r2)
100074f0:	e0bff715 	stw	r2,-36(fp)
100074f4:	e0bff117 	ldw	r2,-60(fp)
100074f8:	e0fff817 	ldw	r3,-32(fp)
100074fc:	10c00315 	stw	r3,12(r2)
10007500:	e0bff117 	ldw	r2,-60(fp)
10007504:	e0fff717 	ldw	r3,-36(fp)
10007508:	10c00215 	stw	r3,8(r2)
1000750c:	e0bff817 	ldw	r2,-32(fp)
10007510:	e0fff117 	ldw	r3,-60(fp)
10007514:	10c00215 	stw	r3,8(r2)
10007518:	e0bff817 	ldw	r2,-32(fp)
1000751c:	10c00217 	ldw	r3,8(r2)
10007520:	e0bff717 	ldw	r2,-36(fp)
10007524:	10c00315 	stw	r3,12(r2)
10007528:	00006b06 	br	100076d8 <_malloc_r+0x700>
1000752c:	e0bffb17 	ldw	r2,-20(fp)
10007530:	1004d27a 	srli	r2,r2,9
10007534:	1000031e 	bne	r2,zero,10007544 <_malloc_r+0x56c>
10007538:	e0bffb17 	ldw	r2,-20(fp)
1000753c:	1004d0fa 	srli	r2,r2,3
10007540:	00002906 	br	100075e8 <_malloc_r+0x610>
10007544:	e0bffb17 	ldw	r2,-20(fp)
10007548:	1004d27a 	srli	r2,r2,9
1000754c:	10800168 	cmpgeui	r2,r2,5
10007550:	1000041e 	bne	r2,zero,10007564 <_malloc_r+0x58c>
10007554:	e0bffb17 	ldw	r2,-20(fp)
10007558:	1004d1ba 	srli	r2,r2,6
1000755c:	10800e04 	addi	r2,r2,56
10007560:	00002106 	br	100075e8 <_malloc_r+0x610>
10007564:	e0bffb17 	ldw	r2,-20(fp)
10007568:	1004d27a 	srli	r2,r2,9
1000756c:	10800568 	cmpgeui	r2,r2,21
10007570:	1000041e 	bne	r2,zero,10007584 <_malloc_r+0x5ac>
10007574:	e0bffb17 	ldw	r2,-20(fp)
10007578:	1004d27a 	srli	r2,r2,9
1000757c:	108016c4 	addi	r2,r2,91
10007580:	00001906 	br	100075e8 <_malloc_r+0x610>
10007584:	e0bffb17 	ldw	r2,-20(fp)
10007588:	1004d27a 	srli	r2,r2,9
1000758c:	10801568 	cmpgeui	r2,r2,85
10007590:	1000041e 	bne	r2,zero,100075a4 <_malloc_r+0x5cc>
10007594:	e0bffb17 	ldw	r2,-20(fp)
10007598:	1004d33a 	srli	r2,r2,12
1000759c:	10801b84 	addi	r2,r2,110
100075a0:	00001106 	br	100075e8 <_malloc_r+0x610>
100075a4:	e0bffb17 	ldw	r2,-20(fp)
100075a8:	1004d27a 	srli	r2,r2,9
100075ac:	10805568 	cmpgeui	r2,r2,341
100075b0:	1000041e 	bne	r2,zero,100075c4 <_malloc_r+0x5ec>
100075b4:	e0bffb17 	ldw	r2,-20(fp)
100075b8:	1004d3fa 	srli	r2,r2,15
100075bc:	10801dc4 	addi	r2,r2,119
100075c0:	00000906 	br	100075e8 <_malloc_r+0x610>
100075c4:	e0bffb17 	ldw	r2,-20(fp)
100075c8:	1004d27a 	srli	r2,r2,9
100075cc:	10815568 	cmpgeui	r2,r2,1365
100075d0:	1000041e 	bne	r2,zero,100075e4 <_malloc_r+0x60c>
100075d4:	e0bffb17 	ldw	r2,-20(fp)
100075d8:	1004d4ba 	srli	r2,r2,18
100075dc:	10801f04 	addi	r2,r2,124
100075e0:	00000106 	br	100075e8 <_malloc_r+0x610>
100075e4:	00801f84 	movi	r2,126
100075e8:	e0bffd15 	stw	r2,-12(fp)
100075ec:	e0bffd17 	ldw	r2,-12(fp)
100075f0:	10800044 	addi	r2,r2,1
100075f4:	1085883a 	add	r2,r2,r2
100075f8:	1085883a 	add	r2,r2,r2
100075fc:	1087883a 	add	r3,r2,r2
10007600:	00840374 	movhi	r2,4109
10007604:	109f1e04 	addi	r2,r2,31864
10007608:	1885883a 	add	r2,r3,r2
1000760c:	10bffe04 	addi	r2,r2,-8
10007610:	e0bff815 	stw	r2,-32(fp)
10007614:	e0bff817 	ldw	r2,-32(fp)
10007618:	10800217 	ldw	r2,8(r2)
1000761c:	e0bff715 	stw	r2,-36(fp)
10007620:	e0fff717 	ldw	r3,-36(fp)
10007624:	e0bff817 	ldw	r2,-32(fp)
10007628:	1880121e 	bne	r3,r2,10007674 <_malloc_r+0x69c>
1000762c:	00c40374 	movhi	r3,4109
10007630:	18df1e04 	addi	r3,r3,31864
10007634:	00840374 	movhi	r2,4109
10007638:	109f1e04 	addi	r2,r2,31864
1000763c:	11000117 	ldw	r4,4(r2)
10007640:	e0bffd17 	ldw	r2,-12(fp)
10007644:	1000010e 	bge	r2,zero,1000764c <_malloc_r+0x674>
10007648:	108000c4 	addi	r2,r2,3
1000764c:	1005d0ba 	srai	r2,r2,2
10007650:	100b883a 	mov	r5,r2
10007654:	00800044 	movi	r2,1
10007658:	1144983a 	sll	r2,r2,r5
1000765c:	2084b03a 	or	r2,r4,r2
10007660:	18800115 	stw	r2,4(r3)
10007664:	00000f06 	br	100076a4 <_malloc_r+0x6cc>
10007668:	e0bff717 	ldw	r2,-36(fp)
1000766c:	10800217 	ldw	r2,8(r2)
10007670:	e0bff715 	stw	r2,-36(fp)
10007674:	e0fff717 	ldw	r3,-36(fp)
10007678:	e0bff817 	ldw	r2,-32(fp)
1000767c:	18800626 	beq	r3,r2,10007698 <_malloc_r+0x6c0>
10007680:	e0bff717 	ldw	r2,-36(fp)
10007684:	10c00117 	ldw	r3,4(r2)
10007688:	00bfff04 	movi	r2,-4
1000768c:	1884703a 	and	r2,r3,r2
10007690:	e0fffb17 	ldw	r3,-20(fp)
10007694:	18bff436 	bltu	r3,r2,10007668 <__alt_data_end+0xf8007668>
10007698:	e0bff717 	ldw	r2,-36(fp)
1000769c:	10800317 	ldw	r2,12(r2)
100076a0:	e0bff815 	stw	r2,-32(fp)
100076a4:	e0bff117 	ldw	r2,-60(fp)
100076a8:	e0fff817 	ldw	r3,-32(fp)
100076ac:	10c00315 	stw	r3,12(r2)
100076b0:	e0bff117 	ldw	r2,-60(fp)
100076b4:	e0fff717 	ldw	r3,-36(fp)
100076b8:	10c00215 	stw	r3,8(r2)
100076bc:	e0bff817 	ldw	r2,-32(fp)
100076c0:	e0fff117 	ldw	r3,-60(fp)
100076c4:	10c00215 	stw	r3,8(r2)
100076c8:	e0bff817 	ldw	r2,-32(fp)
100076cc:	10c00217 	ldw	r3,8(r2)
100076d0:	e0bff717 	ldw	r2,-36(fp)
100076d4:	10c00315 	stw	r3,12(r2)
  /* 
     If there are any possibly nonempty big-enough blocks, 
     search for best fitting chunk by scanning bins in blockwidth units.
  */

  if ( (block = idx2binblock(idx)) <= binblocks)  
100076d8:	e0bff217 	ldw	r2,-56(fp)
100076dc:	1000010e 	bge	r2,zero,100076e4 <_malloc_r+0x70c>
100076e0:	108000c4 	addi	r2,r2,3
100076e4:	1005d0ba 	srai	r2,r2,2
100076e8:	1007883a 	mov	r3,r2
100076ec:	00800044 	movi	r2,1
100076f0:	10c4983a 	sll	r2,r2,r3
100076f4:	e0bff515 	stw	r2,-44(fp)
100076f8:	00840374 	movhi	r2,4109
100076fc:	109f1e04 	addi	r2,r2,31864
10007700:	10c00117 	ldw	r3,4(r2)
10007704:	e0bff517 	ldw	r2,-44(fp)
10007708:	1880c636 	bltu	r3,r2,10007a24 <_malloc_r+0xa4c>
  {

    /* Get to the first marked block */

    if ( (block & binblocks) == 0) 
1000770c:	00840374 	movhi	r2,4109
10007710:	109f1e04 	addi	r2,r2,31864
10007714:	10c00117 	ldw	r3,4(r2)
10007718:	e0bff517 	ldw	r2,-44(fp)
1000771c:	1884703a 	and	r2,r3,r2
10007720:	1000151e 	bne	r2,zero,10007778 <_malloc_r+0x7a0>
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
10007724:	e0fff217 	ldw	r3,-56(fp)
10007728:	00bfff04 	movi	r2,-4
1000772c:	1884703a 	and	r2,r3,r2
10007730:	10800104 	addi	r2,r2,4
10007734:	e0bff215 	stw	r2,-56(fp)
      block <<= 1;
10007738:	e0bff517 	ldw	r2,-44(fp)
1000773c:	1085883a 	add	r2,r2,r2
10007740:	e0bff515 	stw	r2,-44(fp)
      while ((block & binblocks) == 0)
10007744:	00000606 	br	10007760 <_malloc_r+0x788>
      {
        idx += BINBLOCKWIDTH;
10007748:	e0bff217 	ldw	r2,-56(fp)
1000774c:	10800104 	addi	r2,r2,4
10007750:	e0bff215 	stw	r2,-56(fp)
        block <<= 1;
10007754:	e0bff517 	ldw	r2,-44(fp)
10007758:	1085883a 	add	r2,r2,r2
1000775c:	e0bff515 	stw	r2,-44(fp)
    if ( (block & binblocks) == 0) 
    {
      /* force to an even block boundary */
      idx = (idx & ~(BINBLOCKWIDTH - 1)) + BINBLOCKWIDTH;
      block <<= 1;
      while ((block & binblocks) == 0)
10007760:	00840374 	movhi	r2,4109
10007764:	109f1e04 	addi	r2,r2,31864
10007768:	10c00117 	ldw	r3,4(r2)
1000776c:	e0bff517 	ldw	r2,-44(fp)
10007770:	1884703a 	and	r2,r3,r2
10007774:	103ff426 	beq	r2,zero,10007748 <__alt_data_end+0xf8007748>
    }
      
    /* For each possibly nonempty block ... */
    for (;;)  
    {
      startidx = idx;          /* (track incomplete blocks) */
10007778:	e0bff217 	ldw	r2,-56(fp)
1000777c:	e0bff615 	stw	r2,-40(fp)
      q = bin = bin_at(idx);
10007780:	e0bff217 	ldw	r2,-56(fp)
10007784:	10800044 	addi	r2,r2,1
10007788:	1085883a 	add	r2,r2,r2
1000778c:	1085883a 	add	r2,r2,r2
10007790:	1087883a 	add	r3,r2,r2
10007794:	00840374 	movhi	r2,4109
10007798:	109f1e04 	addi	r2,r2,31864
1000779c:	1885883a 	add	r2,r3,r2
100077a0:	10bffe04 	addi	r2,r2,-8
100077a4:	e0bff315 	stw	r2,-52(fp)
100077a8:	e0bff317 	ldw	r2,-52(fp)
100077ac:	e0bff915 	stw	r2,-28(fp)
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
100077b0:	e0bff317 	ldw	r2,-52(fp)
100077b4:	10800317 	ldw	r2,12(r2)
100077b8:	e0bff115 	stw	r2,-60(fp)
100077bc:	00005e06 	br	10007938 <_malloc_r+0x960>
        {
          victim_size = chunksize(victim);
100077c0:	e0bff117 	ldw	r2,-60(fp)
100077c4:	10c00117 	ldw	r3,4(r2)
100077c8:	00bfff04 	movi	r2,-4
100077cc:	1884703a 	and	r2,r3,r2
100077d0:	e0bffb15 	stw	r2,-20(fp)
          remainder_size = long_sub_size_t(victim_size, nb);
100077d4:	e0fffb17 	ldw	r3,-20(fp)
100077d8:	e0bffa17 	ldw	r2,-24(fp)
100077dc:	1885c83a 	sub	r2,r3,r2
100077e0:	e0bff415 	stw	r2,-48(fp)

          if (remainder_size >= (long)MINSIZE) /* split */
100077e4:	e0bff417 	ldw	r2,-48(fp)
100077e8:	10800410 	cmplti	r2,r2,16
100077ec:	1000331e 	bne	r2,zero,100078bc <_malloc_r+0x8e4>
          {
            remainder = chunk_at_offset(victim, nb);
100077f0:	e0fff117 	ldw	r3,-60(fp)
100077f4:	e0bffa17 	ldw	r2,-24(fp)
100077f8:	1885883a 	add	r2,r3,r2
100077fc:	e0bffc15 	stw	r2,-16(fp)
            set_head(victim, nb | PREV_INUSE);
10007800:	e0bffa17 	ldw	r2,-24(fp)
10007804:	10c00054 	ori	r3,r2,1
10007808:	e0bff117 	ldw	r2,-60(fp)
1000780c:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
10007810:	e0bff117 	ldw	r2,-60(fp)
10007814:	10800317 	ldw	r2,12(r2)
10007818:	e0bff815 	stw	r2,-32(fp)
1000781c:	e0bff117 	ldw	r2,-60(fp)
10007820:	10800217 	ldw	r2,8(r2)
10007824:	e0bff715 	stw	r2,-36(fp)
10007828:	e0bff717 	ldw	r2,-36(fp)
1000782c:	e0fff817 	ldw	r3,-32(fp)
10007830:	10c00315 	stw	r3,12(r2)
10007834:	e0bff817 	ldw	r2,-32(fp)
10007838:	e0fff717 	ldw	r3,-36(fp)
1000783c:	10c00215 	stw	r3,8(r2)
            link_last_remainder(remainder);
10007840:	00c40374 	movhi	r3,4109
10007844:	18df2004 	addi	r3,r3,31872
10007848:	00840374 	movhi	r2,4109
1000784c:	109f2004 	addi	r2,r2,31872
10007850:	e13ffc17 	ldw	r4,-16(fp)
10007854:	11000315 	stw	r4,12(r2)
10007858:	10800317 	ldw	r2,12(r2)
1000785c:	18800215 	stw	r2,8(r3)
10007860:	00840374 	movhi	r2,4109
10007864:	109f2004 	addi	r2,r2,31872
10007868:	e0fffc17 	ldw	r3,-16(fp)
1000786c:	18800315 	stw	r2,12(r3)
10007870:	e0bffc17 	ldw	r2,-16(fp)
10007874:	10c00317 	ldw	r3,12(r2)
10007878:	e0bffc17 	ldw	r2,-16(fp)
1000787c:	10c00215 	stw	r3,8(r2)
            set_head(remainder, remainder_size | PREV_INUSE);
10007880:	e0bff417 	ldw	r2,-48(fp)
10007884:	10800054 	ori	r2,r2,1
10007888:	1007883a 	mov	r3,r2
1000788c:	e0bffc17 	ldw	r2,-16(fp)
10007890:	10c00115 	stw	r3,4(r2)
            set_foot(remainder, remainder_size);
10007894:	e0bff417 	ldw	r2,-48(fp)
10007898:	e0fffc17 	ldw	r3,-16(fp)
1000789c:	1885883a 	add	r2,r3,r2
100078a0:	e0fff417 	ldw	r3,-48(fp)
100078a4:	10c00015 	stw	r3,0(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
100078a8:	e13ffe17 	ldw	r4,-8(fp)
100078ac:	0015f940 	call	10015f94 <__malloc_unlock>
            return chunk2mem(victim);
100078b0:	e0bff117 	ldw	r2,-60(fp)
100078b4:	10800204 	addi	r2,r2,8
100078b8:	0000a106 	br	10007b40 <_malloc_r+0xb68>
          }

          else if (remainder_size >= 0)  /* take */
100078bc:	e0bff417 	ldw	r2,-48(fp)
100078c0:	10001a16 	blt	r2,zero,1000792c <_malloc_r+0x954>
          {
            set_inuse_bit_at_offset(victim, victim_size);
100078c4:	e0fff117 	ldw	r3,-60(fp)
100078c8:	e0bffb17 	ldw	r2,-20(fp)
100078cc:	1885883a 	add	r2,r3,r2
100078d0:	e13ff117 	ldw	r4,-60(fp)
100078d4:	e0fffb17 	ldw	r3,-20(fp)
100078d8:	20c7883a 	add	r3,r4,r3
100078dc:	18c00117 	ldw	r3,4(r3)
100078e0:	18c00054 	ori	r3,r3,1
100078e4:	10c00115 	stw	r3,4(r2)
            unlink(victim, bck, fwd);
100078e8:	e0bff117 	ldw	r2,-60(fp)
100078ec:	10800317 	ldw	r2,12(r2)
100078f0:	e0bff815 	stw	r2,-32(fp)
100078f4:	e0bff117 	ldw	r2,-60(fp)
100078f8:	10800217 	ldw	r2,8(r2)
100078fc:	e0bff715 	stw	r2,-36(fp)
10007900:	e0bff717 	ldw	r2,-36(fp)
10007904:	e0fff817 	ldw	r3,-32(fp)
10007908:	10c00315 	stw	r3,12(r2)
1000790c:	e0bff817 	ldw	r2,-32(fp)
10007910:	e0fff717 	ldw	r3,-36(fp)
10007914:	10c00215 	stw	r3,8(r2)
            check_malloced_chunk(victim, nb);
	    MALLOC_UNLOCK;
10007918:	e13ffe17 	ldw	r4,-8(fp)
1000791c:	0015f940 	call	10015f94 <__malloc_unlock>
            return chunk2mem(victim);
10007920:	e0bff117 	ldw	r2,-60(fp)
10007924:	10800204 	addi	r2,r2,8
10007928:	00008506 	br	10007b40 <_malloc_r+0xb68>
      /* For each bin in this block ... */
      do
      {
        /* Find and use first big enough chunk ... */

        for (victim = last(bin); victim != bin; victim = victim->bk)
1000792c:	e0bff117 	ldw	r2,-60(fp)
10007930:	10800317 	ldw	r2,12(r2)
10007934:	e0bff115 	stw	r2,-60(fp)
10007938:	e0fff117 	ldw	r3,-60(fp)
1000793c:	e0bff317 	ldw	r2,-52(fp)
10007940:	18bf9f1e 	bne	r3,r2,100077c0 <__alt_data_end+0xf80077c0>
            return chunk2mem(victim);
          }

        }

       bin = next_bin(bin);
10007944:	e0bff317 	ldw	r2,-52(fp)
10007948:	10800204 	addi	r2,r2,8
1000794c:	e0bff315 	stw	r2,-52(fp)
         {
           bin = next_bin(bin);
           ++idx;
         }
#endif
      } while ((++idx & (BINBLOCKWIDTH - 1)) != 0);
10007950:	e0bff217 	ldw	r2,-56(fp)
10007954:	10800044 	addi	r2,r2,1
10007958:	e0bff215 	stw	r2,-56(fp)
1000795c:	e0bff217 	ldw	r2,-56(fp)
10007960:	108000cc 	andi	r2,r2,3
10007964:	103f921e 	bne	r2,zero,100077b0 <__alt_data_end+0xf80077b0>

      /* Clear out the block bit. */

      do   /* Possibly backtrack to try to clear a partial block */
      {
        if ((startidx & (BINBLOCKWIDTH - 1)) == 0)
10007968:	e0bff617 	ldw	r2,-40(fp)
1000796c:	108000cc 	andi	r2,r2,3
10007970:	10000a1e 	bne	r2,zero,1000799c <_malloc_r+0x9c4>
        {
          binblocks &= ~block;
10007974:	00840374 	movhi	r2,4109
10007978:	109f1e04 	addi	r2,r2,31864
1000797c:	00c40374 	movhi	r3,4109
10007980:	18df1e04 	addi	r3,r3,31864
10007984:	19000117 	ldw	r4,4(r3)
10007988:	e0fff517 	ldw	r3,-44(fp)
1000798c:	00c6303a 	nor	r3,zero,r3
10007990:	20c6703a 	and	r3,r4,r3
10007994:	10c00115 	stw	r3,4(r2)
          break;
10007998:	00000a06 	br	100079c4 <_malloc_r+0x9ec>
        }
        --startidx;
1000799c:	e0bff617 	ldw	r2,-40(fp)
100079a0:	10bfffc4 	addi	r2,r2,-1
100079a4:	e0bff615 	stw	r2,-40(fp)
       q = prev_bin(q);
100079a8:	e0bff917 	ldw	r2,-28(fp)
100079ac:	10bffe04 	addi	r2,r2,-8
100079b0:	e0bff915 	stw	r2,-28(fp)
      } while (first(q) == q);
100079b4:	e0bff917 	ldw	r2,-28(fp)
100079b8:	10c00217 	ldw	r3,8(r2)
100079bc:	e0bff917 	ldw	r2,-28(fp)
100079c0:	18bfe926 	beq	r3,r2,10007968 <__alt_data_end+0xf8007968>

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
100079c4:	e0bff517 	ldw	r2,-44(fp)
100079c8:	1085883a 	add	r2,r2,r2
100079cc:	e0bff515 	stw	r2,-44(fp)
100079d0:	00840374 	movhi	r2,4109
100079d4:	109f1e04 	addi	r2,r2,31864
100079d8:	10c00117 	ldw	r3,4(r2)
100079dc:	e0bff517 	ldw	r2,-44(fp)
100079e0:	18801036 	bltu	r3,r2,10007a24 <_malloc_r+0xa4c>
100079e4:	e0bff517 	ldw	r2,-44(fp)
100079e8:	10000e26 	beq	r2,zero,10007a24 <_malloc_r+0xa4c>
      {
        while ((block & binblocks) == 0)
100079ec:	00000606 	br	10007a08 <_malloc_r+0xa30>
        {
          idx += BINBLOCKWIDTH;
100079f0:	e0bff217 	ldw	r2,-56(fp)
100079f4:	10800104 	addi	r2,r2,4
100079f8:	e0bff215 	stw	r2,-56(fp)
          block <<= 1;
100079fc:	e0bff517 	ldw	r2,-44(fp)
10007a00:	1085883a 	add	r2,r2,r2
10007a04:	e0bff515 	stw	r2,-44(fp)

      /* Get to the next possibly nonempty block */

      if ( (block <<= 1) <= binblocks && (block != 0) ) 
      {
        while ((block & binblocks) == 0)
10007a08:	00840374 	movhi	r2,4109
10007a0c:	109f1e04 	addi	r2,r2,31864
10007a10:	10c00117 	ldw	r3,4(r2)
10007a14:	e0bff517 	ldw	r2,-44(fp)
10007a18:	1884703a 	and	r2,r3,r2
10007a1c:	103ff426 	beq	r2,zero,100079f0 <__alt_data_end+0xf80079f0>
          block <<= 1;
        }
      }
      else
        break;
    }
10007a20:	003f5506 	br	10007778 <__alt_data_end+0xf8007778>


  /* Try to use top chunk */

  /* Require that there be a remainder, ensuring top always exists  */
  remainder_size = long_sub_size_t(chunksize(top), nb);
10007a24:	00840374 	movhi	r2,4109
10007a28:	109f1e04 	addi	r2,r2,31864
10007a2c:	10800217 	ldw	r2,8(r2)
10007a30:	10c00117 	ldw	r3,4(r2)
10007a34:	00bfff04 	movi	r2,-4
10007a38:	1886703a 	and	r3,r3,r2
10007a3c:	e0bffa17 	ldw	r2,-24(fp)
10007a40:	1885c83a 	sub	r2,r3,r2
10007a44:	e0bff415 	stw	r2,-48(fp)
  if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
10007a48:	00840374 	movhi	r2,4109
10007a4c:	109f1e04 	addi	r2,r2,31864
10007a50:	10800217 	ldw	r2,8(r2)
10007a54:	10c00117 	ldw	r3,4(r2)
10007a58:	00bfff04 	movi	r2,-4
10007a5c:	1886703a 	and	r3,r3,r2
10007a60:	e0bffa17 	ldw	r2,-24(fp)
10007a64:	18800336 	bltu	r3,r2,10007a74 <_malloc_r+0xa9c>
10007a68:	e0bff417 	ldw	r2,-48(fp)
10007a6c:	10800408 	cmpgei	r2,r2,16
10007a70:	10001b1e 	bne	r2,zero,10007ae0 <_malloc_r+0xb08>
      return chunk2mem(victim);
    }
#endif

    /* Try to extend */
    malloc_extend_top(RCALL nb);
10007a74:	e17ffa17 	ldw	r5,-24(fp)
10007a78:	e13ffe17 	ldw	r4,-8(fp)
10007a7c:	0006c240 	call	10006c24 <malloc_extend_top>
    remainder_size = long_sub_size_t(chunksize(top), nb);
10007a80:	00840374 	movhi	r2,4109
10007a84:	109f1e04 	addi	r2,r2,31864
10007a88:	10800217 	ldw	r2,8(r2)
10007a8c:	10c00117 	ldw	r3,4(r2)
10007a90:	00bfff04 	movi	r2,-4
10007a94:	1886703a 	and	r3,r3,r2
10007a98:	e0bffa17 	ldw	r2,-24(fp)
10007a9c:	1885c83a 	sub	r2,r3,r2
10007aa0:	e0bff415 	stw	r2,-48(fp)
    if (chunksize(top) < nb || remainder_size < (long)MINSIZE)
10007aa4:	00840374 	movhi	r2,4109
10007aa8:	109f1e04 	addi	r2,r2,31864
10007aac:	10800217 	ldw	r2,8(r2)
10007ab0:	10c00117 	ldw	r3,4(r2)
10007ab4:	00bfff04 	movi	r2,-4
10007ab8:	1886703a 	and	r3,r3,r2
10007abc:	e0bffa17 	ldw	r2,-24(fp)
10007ac0:	18800336 	bltu	r3,r2,10007ad0 <_malloc_r+0xaf8>
10007ac4:	e0bff417 	ldw	r2,-48(fp)
10007ac8:	10800408 	cmpgei	r2,r2,16
10007acc:	1000041e 	bne	r2,zero,10007ae0 <_malloc_r+0xb08>
    {
      MALLOC_UNLOCK;
10007ad0:	e13ffe17 	ldw	r4,-8(fp)
10007ad4:	0015f940 	call	10015f94 <__malloc_unlock>
      return 0; /* propagate failure */
10007ad8:	0005883a 	mov	r2,zero
10007adc:	00001806 	br	10007b40 <_malloc_r+0xb68>
    }
  }

  victim = top;
10007ae0:	00840374 	movhi	r2,4109
10007ae4:	109f1e04 	addi	r2,r2,31864
10007ae8:	10800217 	ldw	r2,8(r2)
10007aec:	e0bff115 	stw	r2,-60(fp)
  set_head(victim, nb | PREV_INUSE);
10007af0:	e0bffa17 	ldw	r2,-24(fp)
10007af4:	10c00054 	ori	r3,r2,1
10007af8:	e0bff117 	ldw	r2,-60(fp)
10007afc:	10c00115 	stw	r3,4(r2)
  top = chunk_at_offset(victim, nb);
10007b00:	00840374 	movhi	r2,4109
10007b04:	109f1e04 	addi	r2,r2,31864
10007b08:	e13ff117 	ldw	r4,-60(fp)
10007b0c:	e0fffa17 	ldw	r3,-24(fp)
10007b10:	20c7883a 	add	r3,r4,r3
10007b14:	10c00215 	stw	r3,8(r2)
  set_head(top, remainder_size | PREV_INUSE);
10007b18:	00840374 	movhi	r2,4109
10007b1c:	109f1e04 	addi	r2,r2,31864
10007b20:	10800217 	ldw	r2,8(r2)
10007b24:	e0fff417 	ldw	r3,-48(fp)
10007b28:	18c00054 	ori	r3,r3,1
10007b2c:	10c00115 	stw	r3,4(r2)
  check_malloced_chunk(victim, nb);
  MALLOC_UNLOCK;
10007b30:	e13ffe17 	ldw	r4,-8(fp)
10007b34:	0015f940 	call	10015f94 <__malloc_unlock>
  return chunk2mem(victim);
10007b38:	e0bff117 	ldw	r2,-60(fp)
10007b3c:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
10007b40:	e037883a 	mov	sp,fp
10007b44:	dfc00117 	ldw	ra,4(sp)
10007b48:	df000017 	ldw	fp,0(sp)
10007b4c:	dec00204 	addi	sp,sp,8
10007b50:	f800283a 	ret

10007b54 <memset>:
__inhibit_loop_to_libcall
_DEFUN (memset, (m, c, n),
	_PTR m _AND
	int c _AND
	size_t n)
{
10007b54:	defff704 	addi	sp,sp,-36
10007b58:	df000815 	stw	fp,32(sp)
10007b5c:	df000804 	addi	fp,sp,32
10007b60:	e13ffd15 	stw	r4,-12(fp)
10007b64:	e17ffe15 	stw	r5,-8(fp)
10007b68:	e1bfff15 	stw	r6,-4(fp)
  char *s = (char *) m;
10007b6c:	e0bffd17 	ldw	r2,-12(fp)
10007b70:	e0bff815 	stw	r2,-32(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned int i;
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
10007b74:	e0bffe17 	ldw	r2,-8(fp)
10007b78:	10803fcc 	andi	r2,r2,255
10007b7c:	e0bffc15 	stw	r2,-16(fp)
				   unsigned variable.  */

  while (UNALIGNED (s))
10007b80:	00000c06 	br	10007bb4 <memset+0x60>
    {
      if (n--)
10007b84:	e0bfff17 	ldw	r2,-4(fp)
10007b88:	10ffffc4 	addi	r3,r2,-1
10007b8c:	e0ffff15 	stw	r3,-4(fp)
10007b90:	10000626 	beq	r2,zero,10007bac <memset+0x58>
        *s++ = (char) c;
10007b94:	e0bff817 	ldw	r2,-32(fp)
10007b98:	10c00044 	addi	r3,r2,1
10007b9c:	e0fff815 	stw	r3,-32(fp)
10007ba0:	e0fffe17 	ldw	r3,-8(fp)
10007ba4:	10c00005 	stb	r3,0(r2)
10007ba8:	00000206 	br	10007bb4 <memset+0x60>
      else
        return m;
10007bac:	e0bffd17 	ldw	r2,-12(fp)
10007bb0:	00005506 	br	10007d08 <memset+0x1b4>
  unsigned long buffer;
  unsigned long *aligned_addr;
  unsigned int d = c & 0xff;	/* To avoid sign extension, copy C to an
				   unsigned variable.  */

  while (UNALIGNED (s))
10007bb4:	e0bff817 	ldw	r2,-32(fp)
10007bb8:	108000cc 	andi	r2,r2,3
10007bbc:	103ff11e 	bne	r2,zero,10007b84 <__alt_data_end+0xf8007b84>
        *s++ = (char) c;
      else
        return m;
    }

  if (!TOO_SMALL (n))
10007bc0:	e0bfff17 	ldw	r2,-4(fp)
10007bc4:	10800130 	cmpltui	r2,r2,4
10007bc8:	10004a1e 	bne	r2,zero,10007cf4 <memset+0x1a0>
    {
      /* If we get this far, we know that n is large and s is word-aligned. */
      aligned_addr = (unsigned long *) s;
10007bcc:	e0bff817 	ldw	r2,-32(fp)
10007bd0:	e0bffb15 	stw	r2,-20(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
10007bd4:	e0bffc17 	ldw	r2,-16(fp)
10007bd8:	1006923a 	slli	r3,r2,8
10007bdc:	e0bffc17 	ldw	r2,-16(fp)
10007be0:	1884b03a 	or	r2,r3,r2
10007be4:	e0bffa15 	stw	r2,-24(fp)
      buffer |= (buffer << 16);
10007be8:	e0bffa17 	ldw	r2,-24(fp)
10007bec:	1004943a 	slli	r2,r2,16
10007bf0:	e0fffa17 	ldw	r3,-24(fp)
10007bf4:	1884b03a 	or	r2,r3,r2
10007bf8:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
10007bfc:	00800804 	movi	r2,32
10007c00:	e0bff915 	stw	r2,-28(fp)
10007c04:	00000906 	br	10007c2c <memset+0xd8>
        buffer = (buffer << i) | buffer;
10007c08:	e0fffa17 	ldw	r3,-24(fp)
10007c0c:	e0bff917 	ldw	r2,-28(fp)
10007c10:	1884983a 	sll	r2,r3,r2
10007c14:	e0fffa17 	ldw	r3,-24(fp)
10007c18:	1884b03a 	or	r2,r3,r2
10007c1c:	e0bffa15 	stw	r2,-24(fp)

      /* Store D into each char sized location in BUFFER so that
         we can set large blocks quickly.  */
      buffer = (d << 8) | d;
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
10007c20:	e0bff917 	ldw	r2,-28(fp)
10007c24:	1085883a 	add	r2,r2,r2
10007c28:	e0bff915 	stw	r2,-28(fp)
10007c2c:	e0bff917 	ldw	r2,-28(fp)
10007c30:	10800830 	cmpltui	r2,r2,32
10007c34:	103ff41e 	bne	r2,zero,10007c08 <__alt_data_end+0xf8007c08>
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
10007c38:	00001706 	br	10007c98 <memset+0x144>
        {
          *aligned_addr++ = buffer;
10007c3c:	e0bffb17 	ldw	r2,-20(fp)
10007c40:	10c00104 	addi	r3,r2,4
10007c44:	e0fffb15 	stw	r3,-20(fp)
10007c48:	e0fffa17 	ldw	r3,-24(fp)
10007c4c:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007c50:	e0bffb17 	ldw	r2,-20(fp)
10007c54:	10c00104 	addi	r3,r2,4
10007c58:	e0fffb15 	stw	r3,-20(fp)
10007c5c:	e0fffa17 	ldw	r3,-24(fp)
10007c60:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007c64:	e0bffb17 	ldw	r2,-20(fp)
10007c68:	10c00104 	addi	r3,r2,4
10007c6c:	e0fffb15 	stw	r3,-20(fp)
10007c70:	e0fffa17 	ldw	r3,-24(fp)
10007c74:	10c00015 	stw	r3,0(r2)
          *aligned_addr++ = buffer;
10007c78:	e0bffb17 	ldw	r2,-20(fp)
10007c7c:	10c00104 	addi	r3,r2,4
10007c80:	e0fffb15 	stw	r3,-20(fp)
10007c84:	e0fffa17 	ldw	r3,-24(fp)
10007c88:	10c00015 	stw	r3,0(r2)
          n -= 4*LBLOCKSIZE;
10007c8c:	e0bfff17 	ldw	r2,-4(fp)
10007c90:	10bffc04 	addi	r2,r2,-16
10007c94:	e0bfff15 	stw	r2,-4(fp)
      buffer |= (buffer << 16);
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        buffer = (buffer << i) | buffer;

      /* Unroll the loop.  */
      while (n >= LBLOCKSIZE*4)
10007c98:	e0bfff17 	ldw	r2,-4(fp)
10007c9c:	10800428 	cmpgeui	r2,r2,16
10007ca0:	103fe61e 	bne	r2,zero,10007c3c <__alt_data_end+0xf8007c3c>
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
10007ca4:	00000806 	br	10007cc8 <memset+0x174>
        {
          *aligned_addr++ = buffer;
10007ca8:	e0bffb17 	ldw	r2,-20(fp)
10007cac:	10c00104 	addi	r3,r2,4
10007cb0:	e0fffb15 	stw	r3,-20(fp)
10007cb4:	e0fffa17 	ldw	r3,-24(fp)
10007cb8:	10c00015 	stw	r3,0(r2)
          n -= LBLOCKSIZE;
10007cbc:	e0bfff17 	ldw	r2,-4(fp)
10007cc0:	10bfff04 	addi	r2,r2,-4
10007cc4:	e0bfff15 	stw	r2,-4(fp)
          *aligned_addr++ = buffer;
          *aligned_addr++ = buffer;
          n -= 4*LBLOCKSIZE;
        }

      while (n >= LBLOCKSIZE)
10007cc8:	e0bfff17 	ldw	r2,-4(fp)
10007ccc:	10800128 	cmpgeui	r2,r2,4
10007cd0:	103ff51e 	bne	r2,zero,10007ca8 <__alt_data_end+0xf8007ca8>
        {
          *aligned_addr++ = buffer;
          n -= LBLOCKSIZE;
        }
      /* Pick up the remainder with a bytewise loop.  */
      s = (char*)aligned_addr;
10007cd4:	e0bffb17 	ldw	r2,-20(fp)
10007cd8:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
10007cdc:	00000506 	br	10007cf4 <memset+0x1a0>
    *s++ = (char) c;
10007ce0:	e0bff817 	ldw	r2,-32(fp)
10007ce4:	10c00044 	addi	r3,r2,1
10007ce8:	e0fff815 	stw	r3,-32(fp)
10007cec:	e0fffe17 	ldw	r3,-8(fp)
10007cf0:	10c00005 	stb	r3,0(r2)
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
10007cf4:	e0bfff17 	ldw	r2,-4(fp)
10007cf8:	10ffffc4 	addi	r3,r2,-1
10007cfc:	e0ffff15 	stw	r3,-4(fp)
10007d00:	103ff71e 	bne	r2,zero,10007ce0 <__alt_data_end+0xf8007ce0>
    *s++ = (char) c;

  return m;
10007d04:	e0bffd17 	ldw	r2,-12(fp)
}
10007d08:	e037883a 	mov	sp,fp
10007d0c:	df000017 	ldw	fp,0(sp)
10007d10:	dec00104 	addi	sp,sp,4
10007d14:	f800283a 	ret

10007d18 <_printf_r>:

int
_DEFUN(_printf_r, (ptr, fmt),
       struct _reent *ptr _AND
       const char *__restrict fmt _DOTS)
{
10007d18:	defff804 	addi	sp,sp,-32
10007d1c:	dfc00515 	stw	ra,20(sp)
10007d20:	df000415 	stw	fp,16(sp)
10007d24:	df000404 	addi	fp,sp,16
10007d28:	e13ffe15 	stw	r4,-8(fp)
10007d2c:	e17fff15 	stw	r5,-4(fp)
10007d30:	e1800215 	stw	r6,8(fp)
10007d34:	e1c00315 	stw	r7,12(fp)
  int ret;
  va_list ap;

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (ptr));						/* AlteraSpecific */
  va_start (ap, fmt);
10007d38:	e0800204 	addi	r2,fp,8
10007d3c:	e0bffd15 	stw	r2,-12(fp)
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16.0*/	/* AlteraSpecific */
/*ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.16  */	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/*1.18.0*/	/* AlteraSpecific */
/*ret =   _vfprintf_r          (ptr, _stdout_r (ptr), fmt, ap);	*/	/* try1 */	/* AlteraSpecific */
  ret = ___vfprintf_internal_r (ptr, _stdout_r (ptr), fmt, ap);		/* try2 */	/* AlteraSpecific */
10007d40:	e0bffe17 	ldw	r2,-8(fp)
10007d44:	10800217 	ldw	r2,8(r2)
10007d48:	e0fffd17 	ldw	r3,-12(fp)
10007d4c:	180f883a 	mov	r7,r3
10007d50:	e1bfff17 	ldw	r6,-4(fp)
10007d54:	100b883a 	mov	r5,r2
10007d58:	e13ffe17 	ldw	r4,-8(fp)
10007d5c:	0009a380 	call	10009a38 <___vfprintf_internal_r>
10007d60:	e0bffc15 	stw	r2,-16(fp)
  va_end (ap);
  return ret;
10007d64:	e0bffc17 	ldw	r2,-16(fp)
}
10007d68:	e037883a 	mov	sp,fp
10007d6c:	dfc00117 	ldw	ra,4(sp)
10007d70:	df000017 	ldw	fp,0(sp)
10007d74:	dec00404 	addi	sp,sp,16
10007d78:	f800283a 	ret

10007d7c <printf>:
#ifndef _REENT_ONLY

int
_DEFUN(printf, (fmt),
       const char *__restrict fmt _DOTS)
{
10007d7c:	defff704 	addi	sp,sp,-36
10007d80:	dfc00515 	stw	ra,20(sp)
10007d84:	df000415 	stw	fp,16(sp)
10007d88:	df000404 	addi	fp,sp,16
10007d8c:	e13fff15 	stw	r4,-4(fp)
10007d90:	e1400215 	stw	r5,8(fp)
10007d94:	e1800315 	stw	r6,12(fp)
10007d98:	e1c00415 	stw	r7,16(fp)
  int ret;
  va_list ap;
  struct _reent *ptr = _REENT;
10007d9c:	008403b4 	movhi	r2,4110
10007da0:	10a4cc04 	addi	r2,r2,-27856
10007da4:	10800017 	ldw	r2,0(r2)
10007da8:	e0bffc15 	stw	r2,-16(fp)

  _REENT_SMALL_CHECK_INIT (ptr);
  _FILE_INIT_DEV_WRITE (_stdout_r (_REENT));					/* AlteraSpecific. Mirror changes here in iprintf.c */
  va_start (ap, fmt);
10007dac:	e0800204 	addi	r2,fp,8
10007db0:	e0bffe15 	stw	r2,-8(fp)
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.16.0*/	/* AlteraSpecific */
/*ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);	*/ /*1.16  */	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap);	*/ /*1.18.0*/	/* AlteraSpecific */
/*ret =  _vfprintf_r        (ptr, _stdout_r    (ptr), fmt, ap); */ /* try1 */	/* AlteraSpecific */
  ret = __vfprintf_internal (     _stdout_r (_REENT), fmt, ap);    /* try2 */	/* AlteraSpecific */
10007db4:	008403b4 	movhi	r2,4110
10007db8:	10a4cc04 	addi	r2,r2,-27856
10007dbc:	10800017 	ldw	r2,0(r2)
10007dc0:	10800217 	ldw	r2,8(r2)
10007dc4:	e0fffe17 	ldw	r3,-8(fp)
10007dc8:	180d883a 	mov	r6,r3
10007dcc:	e17fff17 	ldw	r5,-4(fp)
10007dd0:	1009883a 	mov	r4,r2
10007dd4:	00099e00 	call	100099e0 <__vfprintf_internal>
10007dd8:	e0bffd15 	stw	r2,-12(fp)
  va_end (ap);
  return ret;
10007ddc:	e0bffd17 	ldw	r2,-12(fp)
}
10007de0:	e037883a 	mov	sp,fp
10007de4:	dfc00117 	ldw	ra,4(sp)
10007de8:	df000017 	ldw	fp,0(sp)
10007dec:	dec00504 	addi	sp,sp,20
10007df0:	f800283a 	ret

10007df4 <_putchar_r>:

int
_DEFUN(_putchar_r, (ptr, c),
       struct _reent *ptr _AND
       int c)
{
10007df4:	defffc04 	addi	sp,sp,-16
10007df8:	dfc00315 	stw	ra,12(sp)
10007dfc:	df000215 	stw	fp,8(sp)
10007e00:	df000204 	addi	fp,sp,8
10007e04:	e13ffe15 	stw	r4,-8(fp)
10007e08:	e17fff15 	stw	r5,-4(fp)
  _REENT_SMALL_CHECK_INIT (ptr);
  return _putc_r (ptr, c, _stdout_r (ptr));
10007e0c:	e0bffe17 	ldw	r2,-8(fp)
10007e10:	10800217 	ldw	r2,8(r2)
10007e14:	100d883a 	mov	r6,r2
10007e18:	e17fff17 	ldw	r5,-4(fp)
10007e1c:	e13ffe17 	ldw	r4,-8(fp)
10007e20:	0011cb40 	call	10011cb4 <_putc_r>
}
10007e24:	e037883a 	mov	sp,fp
10007e28:	dfc00117 	ldw	ra,4(sp)
10007e2c:	df000017 	ldw	fp,0(sp)
10007e30:	dec00204 	addi	sp,sp,8
10007e34:	f800283a 	ret

10007e38 <putchar>:
#ifndef _REENT_ONLY

int
_DEFUN(putchar, (c),
       int c)
{
10007e38:	defffc04 	addi	sp,sp,-16
10007e3c:	dfc00315 	stw	ra,12(sp)
10007e40:	df000215 	stw	fp,8(sp)
10007e44:	df000204 	addi	fp,sp,8
10007e48:	e13fff15 	stw	r4,-4(fp)
  struct _reent *reent = _REENT;
10007e4c:	008403b4 	movhi	r2,4110
10007e50:	10a4cc04 	addi	r2,r2,-27856
10007e54:	10800017 	ldw	r2,0(r2)
10007e58:	e0bffe15 	stw	r2,-8(fp)

  _REENT_SMALL_CHECK_INIT (reent);
  return _putc_r (reent, c, _stdout_r (reent));
10007e5c:	e0bffe17 	ldw	r2,-8(fp)
10007e60:	10800217 	ldw	r2,8(r2)
10007e64:	100d883a 	mov	r6,r2
10007e68:	e17fff17 	ldw	r5,-4(fp)
10007e6c:	e13ffe17 	ldw	r4,-8(fp)
10007e70:	0011cb40 	call	10011cb4 <_putc_r>
}
10007e74:	e037883a 	mov	sp,fp
10007e78:	dfc00117 	ldw	ra,4(sp)
10007e7c:	df000017 	ldw	fp,0(sp)
10007e80:	dec00204 	addi	sp,sp,8
10007e84:	f800283a 	ret

10007e88 <_puts_r>:

int
_DEFUN(_puts_r, (ptr, s),
       struct _reent *ptr _AND
       _CONST char * s)
{
10007e88:	defff104 	addi	sp,sp,-60
10007e8c:	dfc00e15 	stw	ra,56(sp)
10007e90:	df000d15 	stw	fp,52(sp)
10007e94:	df000d04 	addi	fp,sp,52
10007e98:	e13ffe15 	stw	r4,-8(fp)
10007e9c:	e17fff15 	stw	r5,-4(fp)
#ifdef _FVWRITE_IN_STREAMIO
  int result;
  size_t c = strlen (s);
10007ea0:	e13fff17 	ldw	r4,-4(fp)
10007ea4:	00094580 	call	10009458 <strlen>
10007ea8:	e0bff315 	stw	r2,-52(fp)
  struct __suio uio;
  struct __siov iov[2];
  FILE *fp;

  iov[0].iov_base = s;
10007eac:	e0bfff17 	ldw	r2,-4(fp)
10007eb0:	e0bffa15 	stw	r2,-24(fp)
  iov[0].iov_len = c;
10007eb4:	e0bff317 	ldw	r2,-52(fp)
10007eb8:	e0bffb15 	stw	r2,-20(fp)
  iov[1].iov_base = "\n";
10007ebc:	00840374 	movhi	r2,4109
10007ec0:	10bd9604 	addi	r2,r2,-2472
10007ec4:	e0bffc15 	stw	r2,-16(fp)
  iov[1].iov_len = 1;
10007ec8:	00800044 	movi	r2,1
10007ecc:	e0bffd15 	stw	r2,-12(fp)
  uio.uio_resid = c + 1;
10007ed0:	e0bff317 	ldw	r2,-52(fp)
10007ed4:	10800044 	addi	r2,r2,1
10007ed8:	e0bff915 	stw	r2,-28(fp)
  uio.uio_iov = &iov[0];
10007edc:	e0bffa04 	addi	r2,fp,-24
10007ee0:	e0bff715 	stw	r2,-36(fp)
  uio.uio_iovcnt = 2;
10007ee4:	00800084 	movi	r2,2
10007ee8:	e0bff815 	stw	r2,-32(fp)

  CHECK_STD_INIT (ptr);
10007eec:	e0bffe17 	ldw	r2,-8(fp)
10007ef0:	e0bff415 	stw	r2,-48(fp)
10007ef4:	e0bff417 	ldw	r2,-48(fp)
10007ef8:	10000526 	beq	r2,zero,10007f10 <_puts_r+0x88>
10007efc:	e0bff417 	ldw	r2,-48(fp)
10007f00:	10800e17 	ldw	r2,56(r2)
10007f04:	1000021e 	bne	r2,zero,10007f10 <_puts_r+0x88>
10007f08:	e13ff417 	ldw	r4,-48(fp)
10007f0c:	000e7440 	call	1000e744 <__sinit>
  fp = _stdout_r (ptr);
10007f10:	e0bffe17 	ldw	r2,-8(fp)
10007f14:	10800217 	ldw	r2,8(r2)
10007f18:	e0bff515 	stw	r2,-44(fp)
  _newlib_flockfile_start (fp);
  ORIENT (fp, -1);
10007f1c:	e0bff517 	ldw	r2,-44(fp)
10007f20:	1080030b 	ldhu	r2,12(r2)
10007f24:	10bfffcc 	andi	r2,r2,65535
10007f28:	1088000c 	andi	r2,r2,8192
10007f2c:	10000c1e 	bne	r2,zero,10007f60 <_puts_r+0xd8>
10007f30:	e0bff517 	ldw	r2,-44(fp)
10007f34:	1080030b 	ldhu	r2,12(r2)
10007f38:	10880014 	ori	r2,r2,8192
10007f3c:	1007883a 	mov	r3,r2
10007f40:	e0bff517 	ldw	r2,-44(fp)
10007f44:	10c0030d 	sth	r3,12(r2)
10007f48:	e0bff517 	ldw	r2,-44(fp)
10007f4c:	10c01917 	ldw	r3,100(r2)
10007f50:	00b7ffc4 	movi	r2,-8193
10007f54:	1886703a 	and	r3,r3,r2
10007f58:	e0bff517 	ldw	r2,-44(fp)
10007f5c:	10c01915 	stw	r3,100(r2)
  result = (__sfvwrite_r (ptr, fp, &uio) ? EOF : '\n');
10007f60:	e0bff704 	addi	r2,fp,-36
10007f64:	100d883a 	mov	r6,r2
10007f68:	e17ff517 	ldw	r5,-44(fp)
10007f6c:	e13ffe17 	ldw	r4,-8(fp)
10007f70:	000f0bc0 	call	1000f0bc <__sfvwrite_r>
10007f74:	10000226 	beq	r2,zero,10007f80 <_puts_r+0xf8>
10007f78:	00bfffc4 	movi	r2,-1
10007f7c:	00000106 	br	10007f84 <_puts_r+0xfc>
10007f80:	00800284 	movi	r2,10
10007f84:	e0bff615 	stw	r2,-40(fp)
  _newlib_flockfile_end (fp);
  return result;
10007f88:	e0bff617 	ldw	r2,-40(fp)

err:
  _newlib_flockfile_end (fp);
  return result;
#endif
}
10007f8c:	e037883a 	mov	sp,fp
10007f90:	dfc00117 	ldw	ra,4(sp)
10007f94:	df000017 	ldw	fp,0(sp)
10007f98:	dec00204 	addi	sp,sp,8
10007f9c:	f800283a 	ret

10007fa0 <puts>:
#ifndef _REENT_ONLY

int
_DEFUN(puts, (s),
       char _CONST * s)
{
10007fa0:	defffd04 	addi	sp,sp,-12
10007fa4:	dfc00215 	stw	ra,8(sp)
10007fa8:	df000115 	stw	fp,4(sp)
10007fac:	df000104 	addi	fp,sp,4
10007fb0:	e13fff15 	stw	r4,-4(fp)
  return _puts_r (_REENT, s);
10007fb4:	008403b4 	movhi	r2,4110
10007fb8:	10a4cc04 	addi	r2,r2,-27856
10007fbc:	10800017 	ldw	r2,0(r2)
10007fc0:	e17fff17 	ldw	r5,-4(fp)
10007fc4:	1009883a 	mov	r4,r2
10007fc8:	0007e880 	call	10007e88 <_puts_r>
}
10007fcc:	e037883a 	mov	sp,fp
10007fd0:	dfc00117 	ldw	ra,4(sp)
10007fd4:	df000017 	ldw	fp,0(sp)
10007fd8:	dec00204 	addi	sp,sp,8
10007fdc:	f800283a 	ret

10007fe0 <__dorand48>:

void
_DEFUN (__dorand48, (r, xseed),
       struct _reent *r _AND
       unsigned short xseed[3])
{
10007fe0:	defff904 	addi	sp,sp,-28
10007fe4:	dfc00615 	stw	ra,24(sp)
10007fe8:	df000515 	stw	fp,20(sp)
10007fec:	dc000415 	stw	r16,16(sp)
10007ff0:	df000504 	addi	fp,sp,20
10007ff4:	e13ffd15 	stw	r4,-12(fp)
10007ff8:	e17ffe15 	stw	r5,-8(fp)
  unsigned long accu;
  unsigned short temp[2];

  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
10007ffc:	e0bffd17 	ldw	r2,-12(fp)
10008000:	10802c8b 	ldhu	r2,178(r2)
10008004:	10ffffcc 	andi	r3,r2,65535
10008008:	e0bffe17 	ldw	r2,-8(fp)
1000800c:	1080000b 	ldhu	r2,0(r2)
10008010:	10bfffcc 	andi	r2,r2,65535
10008014:	100b883a 	mov	r5,r2
10008018:	1809883a 	mov	r4,r3
1000801c:	00065d80 	call	100065d8 <__mulsi3>
10008020:	1007883a 	mov	r3,r2
    (unsigned long) __rand48_add;
10008024:	e0bffd17 	ldw	r2,-12(fp)
10008028:	10802e0b 	ldhu	r2,184(r2)
1000802c:	10bfffcc 	andi	r2,r2,65535
{
  unsigned long accu;
  unsigned short temp[2];

  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
10008030:	1885883a 	add	r2,r3,r2
10008034:	e0bffb15 	stw	r2,-20(fp)
    (unsigned long) __rand48_add;
  temp[0] = (unsigned short) accu;     /* lower 16 bits */
10008038:	e0bffb17 	ldw	r2,-20(fp)
1000803c:	e0bffc0d 	sth	r2,-16(fp)
  accu >>= sizeof(unsigned short) * 8;
10008040:	e0bffb17 	ldw	r2,-20(fp)
10008044:	1004d43a 	srli	r2,r2,16
10008048:	e0bffb15 	stw	r2,-20(fp)
  accu += (unsigned long) __rand48_mult[0] * (unsigned long) xseed[1] +
1000804c:	e0bffd17 	ldw	r2,-12(fp)
10008050:	10802c8b 	ldhu	r2,178(r2)
10008054:	10ffffcc 	andi	r3,r2,65535
10008058:	e0bffe17 	ldw	r2,-8(fp)
1000805c:	10800084 	addi	r2,r2,2
10008060:	1080000b 	ldhu	r2,0(r2)
10008064:	10bfffcc 	andi	r2,r2,65535
10008068:	100b883a 	mov	r5,r2
1000806c:	1809883a 	mov	r4,r3
10008070:	00065d80 	call	100065d8 <__mulsi3>
10008074:	1021883a 	mov	r16,r2
    (unsigned long) __rand48_mult[1] * (unsigned long) xseed[0];
10008078:	e0bffd17 	ldw	r2,-12(fp)
1000807c:	10802d0b 	ldhu	r2,180(r2)
10008080:	10ffffcc 	andi	r3,r2,65535
10008084:	e0bffe17 	ldw	r2,-8(fp)
10008088:	1080000b 	ldhu	r2,0(r2)
1000808c:	10bfffcc 	andi	r2,r2,65535
10008090:	100b883a 	mov	r5,r2
10008094:	1809883a 	mov	r4,r3
10008098:	00065d80 	call	100065d8 <__mulsi3>
  _REENT_CHECK_RAND48(r);
  accu = (unsigned long) __rand48_mult[0] * (unsigned long) xseed[0] +
    (unsigned long) __rand48_add;
  temp[0] = (unsigned short) accu;     /* lower 16 bits */
  accu >>= sizeof(unsigned short) * 8;
  accu += (unsigned long) __rand48_mult[0] * (unsigned long) xseed[1] +
1000809c:	8085883a 	add	r2,r16,r2
100080a0:	e0fffb17 	ldw	r3,-20(fp)
100080a4:	1885883a 	add	r2,r3,r2
100080a8:	e0bffb15 	stw	r2,-20(fp)
    (unsigned long) __rand48_mult[1] * (unsigned long) xseed[0];
  temp[1] = (unsigned short) accu;     /* middle 16 bits */
100080ac:	e0bffb17 	ldw	r2,-20(fp)
100080b0:	e0bffc8d 	sth	r2,-14(fp)
  accu >>= sizeof(unsigned short) * 8;
100080b4:	e0bffb17 	ldw	r2,-20(fp)
100080b8:	1004d43a 	srli	r2,r2,16
100080bc:	e0bffb15 	stw	r2,-20(fp)
  accu += __rand48_mult[0] * xseed[2] + __rand48_mult[1] * xseed[1] + __rand48_mult[2] * xseed[0];
100080c0:	e0bffd17 	ldw	r2,-12(fp)
100080c4:	10802c8b 	ldhu	r2,178(r2)
100080c8:	10ffffcc 	andi	r3,r2,65535
100080cc:	e0bffe17 	ldw	r2,-8(fp)
100080d0:	10800104 	addi	r2,r2,4
100080d4:	1080000b 	ldhu	r2,0(r2)
100080d8:	10bfffcc 	andi	r2,r2,65535
100080dc:	100b883a 	mov	r5,r2
100080e0:	1809883a 	mov	r4,r3
100080e4:	00065d80 	call	100065d8 <__mulsi3>
100080e8:	1021883a 	mov	r16,r2
100080ec:	e0bffd17 	ldw	r2,-12(fp)
100080f0:	10802d0b 	ldhu	r2,180(r2)
100080f4:	10ffffcc 	andi	r3,r2,65535
100080f8:	e0bffe17 	ldw	r2,-8(fp)
100080fc:	10800084 	addi	r2,r2,2
10008100:	1080000b 	ldhu	r2,0(r2)
10008104:	10bfffcc 	andi	r2,r2,65535
10008108:	100b883a 	mov	r5,r2
1000810c:	1809883a 	mov	r4,r3
10008110:	00065d80 	call	100065d8 <__mulsi3>
10008114:	80a1883a 	add	r16,r16,r2
10008118:	e0bffd17 	ldw	r2,-12(fp)
1000811c:	10802d8b 	ldhu	r2,182(r2)
10008120:	10ffffcc 	andi	r3,r2,65535
10008124:	e0bffe17 	ldw	r2,-8(fp)
10008128:	1080000b 	ldhu	r2,0(r2)
1000812c:	10bfffcc 	andi	r2,r2,65535
10008130:	100b883a 	mov	r5,r2
10008134:	1809883a 	mov	r4,r3
10008138:	00065d80 	call	100065d8 <__mulsi3>
1000813c:	8085883a 	add	r2,r16,r2
10008140:	1007883a 	mov	r3,r2
10008144:	e0bffb17 	ldw	r2,-20(fp)
10008148:	10c5883a 	add	r2,r2,r3
1000814c:	e0bffb15 	stw	r2,-20(fp)
  xseed[0] = temp[0];
10008150:	e0fffc0b 	ldhu	r3,-16(fp)
10008154:	e0bffe17 	ldw	r2,-8(fp)
10008158:	10c0000d 	sth	r3,0(r2)
  xseed[1] = temp[1];
1000815c:	e0bffe17 	ldw	r2,-8(fp)
10008160:	10800084 	addi	r2,r2,2
10008164:	e0fffc8b 	ldhu	r3,-14(fp)
10008168:	10c0000d 	sth	r3,0(r2)
  xseed[2] = (unsigned short) accu;
1000816c:	e0bffe17 	ldw	r2,-8(fp)
10008170:	10800104 	addi	r2,r2,4
10008174:	e0fffb17 	ldw	r3,-20(fp)
10008178:	10c0000d 	sth	r3,0(r2)
}
1000817c:	0001883a 	nop
10008180:	e6ffff04 	addi	sp,fp,-4
10008184:	dfc00217 	ldw	ra,8(sp)
10008188:	df000117 	ldw	fp,4(sp)
1000818c:	dc000017 	ldw	r16,0(sp)
10008190:	dec00304 	addi	sp,sp,12
10008194:	f800283a 	ret

10008198 <realloc>:

_PTR
_DEFUN (realloc, (ap, nbytes),
	_PTR ap _AND
	size_t nbytes)
{
10008198:	defffc04 	addi	sp,sp,-16
1000819c:	dfc00315 	stw	ra,12(sp)
100081a0:	df000215 	stw	fp,8(sp)
100081a4:	df000204 	addi	fp,sp,8
100081a8:	e13ffe15 	stw	r4,-8(fp)
100081ac:	e17fff15 	stw	r5,-4(fp)
  return _realloc_r (_REENT, ap, nbytes);
100081b0:	008403b4 	movhi	r2,4110
100081b4:	10a4cc04 	addi	r2,r2,-27856
100081b8:	10800017 	ldw	r2,0(r2)
100081bc:	e1bfff17 	ldw	r6,-4(fp)
100081c0:	e17ffe17 	ldw	r5,-8(fp)
100081c4:	1009883a 	mov	r4,r2
100081c8:	00081e00 	call	100081e0 <_realloc_r>
}
100081cc:	e037883a 	mov	sp,fp
100081d0:	dfc00117 	ldw	ra,4(sp)
100081d4:	df000017 	ldw	fp,0(sp)
100081d8:	dec00204 	addi	sp,sp,8
100081dc:	f800283a 	ret

100081e0 <_realloc_r>:
#if __STD_C
Void_t* rEALLOc(RARG Void_t* oldmem, size_t bytes)
#else
Void_t* rEALLOc(RARG oldmem, bytes) RDECL Void_t* oldmem; size_t bytes;
#endif
{
100081e0:	deffe104 	addi	sp,sp,-124
100081e4:	dfc01e15 	stw	ra,120(sp)
100081e8:	df001d15 	stw	fp,116(sp)
100081ec:	df001d04 	addi	fp,sp,116
100081f0:	e13ffd15 	stw	r4,-12(fp)
100081f4:	e17ffe15 	stw	r5,-8(fp)
100081f8:	e1bfff15 	stw	r6,-4(fp)
  if (bytes == 0) { fREe(RCALL oldmem); return 0; }
#endif


  /* realloc of null is supposed to be same as malloc */
  if (oldmem == 0) return mALLOc(RCALL bytes);
100081fc:	e0bffe17 	ldw	r2,-8(fp)
10008200:	1000041e 	bne	r2,zero,10008214 <_realloc_r+0x34>
10008204:	e17fff17 	ldw	r5,-4(fp)
10008208:	e13ffd17 	ldw	r4,-12(fp)
1000820c:	0006fd80 	call	10006fd8 <_malloc_r>
10008210:	0002ea06 	br	10008dbc <_realloc_r+0xbdc>

  MALLOC_LOCK;
10008214:	e13ffd17 	ldw	r4,-12(fp)
10008218:	0015f700 	call	10015f70 <__malloc_lock>

  newp    = oldp    = mem2chunk(oldmem);
1000821c:	e0bffe17 	ldw	r2,-8(fp)
10008220:	10bffe04 	addi	r2,r2,-8
10008224:	e0bfef15 	stw	r2,-68(fp)
10008228:	e0bfef17 	ldw	r2,-68(fp)
1000822c:	e0bfe315 	stw	r2,-116(fp)
  newsize = oldsize = chunksize(oldp);
10008230:	e0bfef17 	ldw	r2,-68(fp)
10008234:	10c00117 	ldw	r3,4(r2)
10008238:	00bfff04 	movi	r2,-4
1000823c:	1884703a 	and	r2,r3,r2
10008240:	e0bff015 	stw	r2,-64(fp)
10008244:	e0bff017 	ldw	r2,-64(fp)
10008248:	e0bfe415 	stw	r2,-112(fp)


  nb = request2size(bytes);
1000824c:	e0bfff17 	ldw	r2,-4(fp)
10008250:	108002c4 	addi	r2,r2,11
10008254:	108005f0 	cmpltui	r2,r2,23
10008258:	1000051e 	bne	r2,zero,10008270 <_realloc_r+0x90>
1000825c:	e0bfff17 	ldw	r2,-4(fp)
10008260:	10c002c4 	addi	r3,r2,11
10008264:	00bffe04 	movi	r2,-8
10008268:	1884703a 	and	r2,r3,r2
1000826c:	00000106 	br	10008274 <_realloc_r+0x94>
10008270:	00800404 	movi	r2,16
10008274:	e0bff115 	stw	r2,-60(fp)

  /* Check for overflow and just fail, if so. */
  if (nb > INT_MAX || nb < bytes)
10008278:	e0bff117 	ldw	r2,-60(fp)
1000827c:	10000316 	blt	r2,zero,1000828c <_realloc_r+0xac>
10008280:	e0fff117 	ldw	r3,-60(fp)
10008284:	e0bfff17 	ldw	r2,-4(fp)
10008288:	1880052e 	bgeu	r3,r2,100082a0 <_realloc_r+0xc0>
  {
    RERRNO = ENOMEM;
1000828c:	e0bffd17 	ldw	r2,-12(fp)
10008290:	00c00304 	movi	r3,12
10008294:	10c00015 	stw	r3,0(r2)
    return 0;
10008298:	0005883a 	mov	r2,zero
1000829c:	0002c706 	br	10008dbc <_realloc_r+0xbdc>
  }
#endif

  check_inuse_chunk(oldp);

  if ((long)(oldsize) < (long)(nb))  
100082a0:	e0fff017 	ldw	r3,-64(fp)
100082a4:	e0bff117 	ldw	r2,-60(fp)
100082a8:	18828b0e 	bge	r3,r2,10008cd8 <_realloc_r+0xaf8>
  {

    /* Try expanding forward */

    next = chunk_at_offset(oldp, oldsize);
100082ac:	e0ffef17 	ldw	r3,-68(fp)
100082b0:	e0bff017 	ldw	r2,-64(fp)
100082b4:	1885883a 	add	r2,r3,r2
100082b8:	e0bfe515 	stw	r2,-108(fp)
    if (next == top || !inuse(next)) 
100082bc:	00840374 	movhi	r2,4109
100082c0:	109f1e04 	addi	r2,r2,31864
100082c4:	10c00217 	ldw	r3,8(r2)
100082c8:	e0bfe517 	ldw	r2,-108(fp)
100082cc:	18800926 	beq	r3,r2,100082f4 <_realloc_r+0x114>
100082d0:	e0bfe517 	ldw	r2,-108(fp)
100082d4:	10c00117 	ldw	r3,4(r2)
100082d8:	00bfff84 	movi	r2,-2
100082dc:	1884703a 	and	r2,r3,r2
100082e0:	e0ffe517 	ldw	r3,-108(fp)
100082e4:	1885883a 	add	r2,r3,r2
100082e8:	10800117 	ldw	r2,4(r2)
100082ec:	1080004c 	andi	r2,r2,1
100082f0:	1000461e 	bne	r2,zero,1000840c <_realloc_r+0x22c>
    {
      nextsize = chunksize(next);
100082f4:	e0bfe517 	ldw	r2,-108(fp)
100082f8:	10c00117 	ldw	r3,4(r2)
100082fc:	00bfff04 	movi	r2,-4
10008300:	1884703a 	and	r2,r3,r2
10008304:	e0bfe615 	stw	r2,-104(fp)

      /* Forward into top only if a remainder */
      if (next == top)
10008308:	00840374 	movhi	r2,4109
1000830c:	109f1e04 	addi	r2,r2,31864
10008310:	10c00217 	ldw	r3,8(r2)
10008314:	e0bfe517 	ldw	r2,-108(fp)
10008318:	1880251e 	bne	r3,r2,100083b0 <_realloc_r+0x1d0>
      {
        if ((long)(nextsize + newsize) >= (long)(nb + MINSIZE))
1000831c:	e0ffe617 	ldw	r3,-104(fp)
10008320:	e0bfe417 	ldw	r2,-112(fp)
10008324:	1885883a 	add	r2,r3,r2
10008328:	1007883a 	mov	r3,r2
1000832c:	e0bff117 	ldw	r2,-60(fp)
10008330:	10800404 	addi	r2,r2,16
10008334:	18803816 	blt	r3,r2,10008418 <_realloc_r+0x238>
        {
          newsize += nextsize;
10008338:	e0ffe417 	ldw	r3,-112(fp)
1000833c:	e0bfe617 	ldw	r2,-104(fp)
10008340:	1885883a 	add	r2,r3,r2
10008344:	e0bfe415 	stw	r2,-112(fp)
          top = chunk_at_offset(oldp, nb);
10008348:	00840374 	movhi	r2,4109
1000834c:	109f1e04 	addi	r2,r2,31864
10008350:	e13fef17 	ldw	r4,-68(fp)
10008354:	e0fff117 	ldw	r3,-60(fp)
10008358:	20c7883a 	add	r3,r4,r3
1000835c:	10c00215 	stw	r3,8(r2)
          set_head(top, (newsize - nb) | PREV_INUSE);
10008360:	00840374 	movhi	r2,4109
10008364:	109f1e04 	addi	r2,r2,31864
10008368:	10800217 	ldw	r2,8(r2)
1000836c:	e13fe417 	ldw	r4,-112(fp)
10008370:	e0fff117 	ldw	r3,-60(fp)
10008374:	20c7c83a 	sub	r3,r4,r3
10008378:	18c00054 	ori	r3,r3,1
1000837c:	10c00115 	stw	r3,4(r2)
          set_head_size(oldp, nb);
10008380:	e0bfef17 	ldw	r2,-68(fp)
10008384:	10800117 	ldw	r2,4(r2)
10008388:	10c0004c 	andi	r3,r2,1
1000838c:	e0bff117 	ldw	r2,-60(fp)
10008390:	1886b03a 	or	r3,r3,r2
10008394:	e0bfef17 	ldw	r2,-68(fp)
10008398:	10c00115 	stw	r3,4(r2)
	  MALLOC_UNLOCK;
1000839c:	e13ffd17 	ldw	r4,-12(fp)
100083a0:	0015f940 	call	10015f94 <__malloc_unlock>
          return chunk2mem(oldp);
100083a4:	e0bfef17 	ldw	r2,-68(fp)
100083a8:	10800204 	addi	r2,r2,8
100083ac:	00028306 	br	10008dbc <_realloc_r+0xbdc>
        }
      }

      /* Forward into next chunk */
      else if (((long)(nextsize + newsize) >= (long)(nb)))
100083b0:	e0ffe617 	ldw	r3,-104(fp)
100083b4:	e0bfe417 	ldw	r2,-112(fp)
100083b8:	1885883a 	add	r2,r3,r2
100083bc:	1007883a 	mov	r3,r2
100083c0:	e0bff117 	ldw	r2,-60(fp)
100083c4:	18801416 	blt	r3,r2,10008418 <_realloc_r+0x238>
      { 
        unlink(next, bck, fwd);
100083c8:	e0bfe517 	ldw	r2,-108(fp)
100083cc:	10800317 	ldw	r2,12(r2)
100083d0:	e0bff215 	stw	r2,-56(fp)
100083d4:	e0bfe517 	ldw	r2,-108(fp)
100083d8:	10800217 	ldw	r2,8(r2)
100083dc:	e0bff315 	stw	r2,-52(fp)
100083e0:	e0bff317 	ldw	r2,-52(fp)
100083e4:	e0fff217 	ldw	r3,-56(fp)
100083e8:	10c00315 	stw	r3,12(r2)
100083ec:	e0bff217 	ldw	r2,-56(fp)
100083f0:	e0fff317 	ldw	r3,-52(fp)
100083f4:	10c00215 	stw	r3,8(r2)
        newsize  += nextsize;
100083f8:	e0ffe417 	ldw	r3,-112(fp)
100083fc:	e0bfe617 	ldw	r2,-104(fp)
10008400:	1885883a 	add	r2,r3,r2
10008404:	e0bfe415 	stw	r2,-112(fp)
        goto split;
10008408:	00023306 	br	10008cd8 <_realloc_r+0xaf8>
      }
    }
    else
    {
      next = 0;
1000840c:	e03fe515 	stw	zero,-108(fp)
      nextsize = 0;
10008410:	e03fe615 	stw	zero,-104(fp)
10008414:	00000106 	br	1000841c <_realloc_r+0x23c>
    if (next == top || !inuse(next)) 
    {
      nextsize = chunksize(next);

      /* Forward into top only if a remainder */
      if (next == top)
10008418:	0001883a 	nop
      nextsize = 0;
    }

    /* Try shifting backwards. */

    if (!prev_inuse(oldp))
1000841c:	e0bfef17 	ldw	r2,-68(fp)
10008420:	10800117 	ldw	r2,4(r2)
10008424:	1080004c 	andi	r2,r2,1
10008428:	1001a91e 	bne	r2,zero,10008ad0 <_realloc_r+0x8f0>
    {
      prev = prev_chunk(oldp);
1000842c:	e0bfef17 	ldw	r2,-68(fp)
10008430:	10800017 	ldw	r2,0(r2)
10008434:	0085c83a 	sub	r2,zero,r2
10008438:	e0ffef17 	ldw	r3,-68(fp)
1000843c:	1885883a 	add	r2,r3,r2
10008440:	e0bff415 	stw	r2,-48(fp)
      prevsize = chunksize(prev);
10008444:	e0bff417 	ldw	r2,-48(fp)
10008448:	10c00117 	ldw	r3,4(r2)
1000844c:	00bfff04 	movi	r2,-4
10008450:	1884703a 	and	r2,r3,r2
10008454:	e0bff515 	stw	r2,-44(fp)

      /* try forward + backward first to save a later consolidation */

      if (next != 0)
10008458:	e0bfe517 	ldw	r2,-108(fp)
1000845c:	10012226 	beq	r2,zero,100088e8 <_realloc_r+0x708>
      {
        /* into top */
        if (next == top)
10008460:	00840374 	movhi	r2,4109
10008464:	109f1e04 	addi	r2,r2,31864
10008468:	10c00217 	ldw	r3,8(r2)
1000846c:	e0bfe517 	ldw	r2,-108(fp)
10008470:	1880951e 	bne	r3,r2,100086c8 <_realloc_r+0x4e8>
        {
          if ((long)(nextsize + prevsize + newsize) >= (long)(nb + MINSIZE))
10008474:	e0ffe617 	ldw	r3,-104(fp)
10008478:	e0bff517 	ldw	r2,-44(fp)
1000847c:	1887883a 	add	r3,r3,r2
10008480:	e0bfe417 	ldw	r2,-112(fp)
10008484:	1885883a 	add	r2,r3,r2
10008488:	1007883a 	mov	r3,r2
1000848c:	e0bff117 	ldw	r2,-60(fp)
10008490:	10800404 	addi	r2,r2,16
10008494:	18811416 	blt	r3,r2,100088e8 <_realloc_r+0x708>
          {
            unlink(prev, bck, fwd);
10008498:	e0bff417 	ldw	r2,-48(fp)
1000849c:	10800317 	ldw	r2,12(r2)
100084a0:	e0bff215 	stw	r2,-56(fp)
100084a4:	e0bff417 	ldw	r2,-48(fp)
100084a8:	10800217 	ldw	r2,8(r2)
100084ac:	e0bff315 	stw	r2,-52(fp)
100084b0:	e0bff317 	ldw	r2,-52(fp)
100084b4:	e0fff217 	ldw	r3,-56(fp)
100084b8:	10c00315 	stw	r3,12(r2)
100084bc:	e0bff217 	ldw	r2,-56(fp)
100084c0:	e0fff317 	ldw	r3,-52(fp)
100084c4:	10c00215 	stw	r3,8(r2)
            newp = prev;
100084c8:	e0bff417 	ldw	r2,-48(fp)
100084cc:	e0bfe315 	stw	r2,-116(fp)
            newsize += prevsize + nextsize;
100084d0:	e0fff517 	ldw	r3,-44(fp)
100084d4:	e0bfe617 	ldw	r2,-104(fp)
100084d8:	1885883a 	add	r2,r3,r2
100084dc:	e0ffe417 	ldw	r3,-112(fp)
100084e0:	1885883a 	add	r2,r3,r2
100084e4:	e0bfe415 	stw	r2,-112(fp)
            newmem = chunk2mem(newp);
100084e8:	e0bfe317 	ldw	r2,-116(fp)
100084ec:	10800204 	addi	r2,r2,8
100084f0:	e0bff615 	stw	r2,-40(fp)
            MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
100084f4:	e0bff017 	ldw	r2,-64(fp)
100084f8:	10bfff04 	addi	r2,r2,-4
100084fc:	e0bff715 	stw	r2,-36(fp)
10008500:	e0bff717 	ldw	r2,-36(fp)
10008504:	10800968 	cmpgeui	r2,r2,37
10008508:	1000521e 	bne	r2,zero,10008654 <_realloc_r+0x474>
1000850c:	e0bffe17 	ldw	r2,-8(fp)
10008510:	e0bfe715 	stw	r2,-100(fp)
10008514:	e0bff617 	ldw	r2,-40(fp)
10008518:	e0bfe815 	stw	r2,-96(fp)
1000851c:	e0bff717 	ldw	r2,-36(fp)
10008520:	10800530 	cmpltui	r2,r2,20
10008524:	1000361e 	bne	r2,zero,10008600 <_realloc_r+0x420>
10008528:	e0bfe817 	ldw	r2,-96(fp)
1000852c:	10c00104 	addi	r3,r2,4
10008530:	e0ffe815 	stw	r3,-96(fp)
10008534:	e0ffe717 	ldw	r3,-100(fp)
10008538:	19000104 	addi	r4,r3,4
1000853c:	e13fe715 	stw	r4,-100(fp)
10008540:	18c00017 	ldw	r3,0(r3)
10008544:	10c00015 	stw	r3,0(r2)
10008548:	e0bfe817 	ldw	r2,-96(fp)
1000854c:	10c00104 	addi	r3,r2,4
10008550:	e0ffe815 	stw	r3,-96(fp)
10008554:	e0ffe717 	ldw	r3,-100(fp)
10008558:	19000104 	addi	r4,r3,4
1000855c:	e13fe715 	stw	r4,-100(fp)
10008560:	18c00017 	ldw	r3,0(r3)
10008564:	10c00015 	stw	r3,0(r2)
10008568:	e0bff717 	ldw	r2,-36(fp)
1000856c:	10800730 	cmpltui	r2,r2,28
10008570:	1000231e 	bne	r2,zero,10008600 <_realloc_r+0x420>
10008574:	e0bfe817 	ldw	r2,-96(fp)
10008578:	10c00104 	addi	r3,r2,4
1000857c:	e0ffe815 	stw	r3,-96(fp)
10008580:	e0ffe717 	ldw	r3,-100(fp)
10008584:	19000104 	addi	r4,r3,4
10008588:	e13fe715 	stw	r4,-100(fp)
1000858c:	18c00017 	ldw	r3,0(r3)
10008590:	10c00015 	stw	r3,0(r2)
10008594:	e0bfe817 	ldw	r2,-96(fp)
10008598:	10c00104 	addi	r3,r2,4
1000859c:	e0ffe815 	stw	r3,-96(fp)
100085a0:	e0ffe717 	ldw	r3,-100(fp)
100085a4:	19000104 	addi	r4,r3,4
100085a8:	e13fe715 	stw	r4,-100(fp)
100085ac:	18c00017 	ldw	r3,0(r3)
100085b0:	10c00015 	stw	r3,0(r2)
100085b4:	e0bff717 	ldw	r2,-36(fp)
100085b8:	10800930 	cmpltui	r2,r2,36
100085bc:	1000101e 	bne	r2,zero,10008600 <_realloc_r+0x420>
100085c0:	e0bfe817 	ldw	r2,-96(fp)
100085c4:	10c00104 	addi	r3,r2,4
100085c8:	e0ffe815 	stw	r3,-96(fp)
100085cc:	e0ffe717 	ldw	r3,-100(fp)
100085d0:	19000104 	addi	r4,r3,4
100085d4:	e13fe715 	stw	r4,-100(fp)
100085d8:	18c00017 	ldw	r3,0(r3)
100085dc:	10c00015 	stw	r3,0(r2)
100085e0:	e0bfe817 	ldw	r2,-96(fp)
100085e4:	10c00104 	addi	r3,r2,4
100085e8:	e0ffe815 	stw	r3,-96(fp)
100085ec:	e0ffe717 	ldw	r3,-100(fp)
100085f0:	19000104 	addi	r4,r3,4
100085f4:	e13fe715 	stw	r4,-100(fp)
100085f8:	18c00017 	ldw	r3,0(r3)
100085fc:	10c00015 	stw	r3,0(r2)
10008600:	e0bfe817 	ldw	r2,-96(fp)
10008604:	10c00104 	addi	r3,r2,4
10008608:	e0ffe815 	stw	r3,-96(fp)
1000860c:	e0ffe717 	ldw	r3,-100(fp)
10008610:	19000104 	addi	r4,r3,4
10008614:	e13fe715 	stw	r4,-100(fp)
10008618:	18c00017 	ldw	r3,0(r3)
1000861c:	10c00015 	stw	r3,0(r2)
10008620:	e0bfe817 	ldw	r2,-96(fp)
10008624:	10c00104 	addi	r3,r2,4
10008628:	e0ffe815 	stw	r3,-96(fp)
1000862c:	e0ffe717 	ldw	r3,-100(fp)
10008630:	19000104 	addi	r4,r3,4
10008634:	e13fe715 	stw	r4,-100(fp)
10008638:	18c00017 	ldw	r3,0(r3)
1000863c:	10c00015 	stw	r3,0(r2)
10008640:	e0bfe717 	ldw	r2,-100(fp)
10008644:	10c00017 	ldw	r3,0(r2)
10008648:	e0bfe817 	ldw	r2,-96(fp)
1000864c:	10c00015 	stw	r3,0(r2)
10008650:	00000406 	br	10008664 <_realloc_r+0x484>
10008654:	e1bff717 	ldw	r6,-36(fp)
10008658:	e17ffe17 	ldw	r5,-8(fp)
1000865c:	e13ff617 	ldw	r4,-40(fp)
10008660:	000fffc0 	call	1000fffc <memmove>
            top = chunk_at_offset(newp, nb);
10008664:	00840374 	movhi	r2,4109
10008668:	109f1e04 	addi	r2,r2,31864
1000866c:	e13fe317 	ldw	r4,-116(fp)
10008670:	e0fff117 	ldw	r3,-60(fp)
10008674:	20c7883a 	add	r3,r4,r3
10008678:	10c00215 	stw	r3,8(r2)
            set_head(top, (newsize - nb) | PREV_INUSE);
1000867c:	00840374 	movhi	r2,4109
10008680:	109f1e04 	addi	r2,r2,31864
10008684:	10800217 	ldw	r2,8(r2)
10008688:	e13fe417 	ldw	r4,-112(fp)
1000868c:	e0fff117 	ldw	r3,-60(fp)
10008690:	20c7c83a 	sub	r3,r4,r3
10008694:	18c00054 	ori	r3,r3,1
10008698:	10c00115 	stw	r3,4(r2)
            set_head_size(newp, nb);
1000869c:	e0bfe317 	ldw	r2,-116(fp)
100086a0:	10800117 	ldw	r2,4(r2)
100086a4:	10c0004c 	andi	r3,r2,1
100086a8:	e0bff117 	ldw	r2,-60(fp)
100086ac:	1886b03a 	or	r3,r3,r2
100086b0:	e0bfe317 	ldw	r2,-116(fp)
100086b4:	10c00115 	stw	r3,4(r2)
	    MALLOC_UNLOCK;
100086b8:	e13ffd17 	ldw	r4,-12(fp)
100086bc:	0015f940 	call	10015f94 <__malloc_unlock>
            return newmem;
100086c0:	e0bff617 	ldw	r2,-40(fp)
100086c4:	0001bd06 	br	10008dbc <_realloc_r+0xbdc>
          }
        }

        /* into next chunk */
        else if (((long)(nextsize + prevsize + newsize) >= (long)(nb)))
100086c8:	e0ffe617 	ldw	r3,-104(fp)
100086cc:	e0bff517 	ldw	r2,-44(fp)
100086d0:	1887883a 	add	r3,r3,r2
100086d4:	e0bfe417 	ldw	r2,-112(fp)
100086d8:	1885883a 	add	r2,r3,r2
100086dc:	1007883a 	mov	r3,r2
100086e0:	e0bff117 	ldw	r2,-60(fp)
100086e4:	18808016 	blt	r3,r2,100088e8 <_realloc_r+0x708>
        {
          unlink(next, bck, fwd);
100086e8:	e0bfe517 	ldw	r2,-108(fp)
100086ec:	10800317 	ldw	r2,12(r2)
100086f0:	e0bff215 	stw	r2,-56(fp)
100086f4:	e0bfe517 	ldw	r2,-108(fp)
100086f8:	10800217 	ldw	r2,8(r2)
100086fc:	e0bff315 	stw	r2,-52(fp)
10008700:	e0bff317 	ldw	r2,-52(fp)
10008704:	e0fff217 	ldw	r3,-56(fp)
10008708:	10c00315 	stw	r3,12(r2)
1000870c:	e0bff217 	ldw	r2,-56(fp)
10008710:	e0fff317 	ldw	r3,-52(fp)
10008714:	10c00215 	stw	r3,8(r2)
          unlink(prev, bck, fwd);
10008718:	e0bff417 	ldw	r2,-48(fp)
1000871c:	10800317 	ldw	r2,12(r2)
10008720:	e0bff215 	stw	r2,-56(fp)
10008724:	e0bff417 	ldw	r2,-48(fp)
10008728:	10800217 	ldw	r2,8(r2)
1000872c:	e0bff315 	stw	r2,-52(fp)
10008730:	e0bff317 	ldw	r2,-52(fp)
10008734:	e0fff217 	ldw	r3,-56(fp)
10008738:	10c00315 	stw	r3,12(r2)
1000873c:	e0bff217 	ldw	r2,-56(fp)
10008740:	e0fff317 	ldw	r3,-52(fp)
10008744:	10c00215 	stw	r3,8(r2)
          newp = prev;
10008748:	e0bff417 	ldw	r2,-48(fp)
1000874c:	e0bfe315 	stw	r2,-116(fp)
          newsize += nextsize + prevsize;
10008750:	e0ffe617 	ldw	r3,-104(fp)
10008754:	e0bff517 	ldw	r2,-44(fp)
10008758:	1885883a 	add	r2,r3,r2
1000875c:	e0ffe417 	ldw	r3,-112(fp)
10008760:	1885883a 	add	r2,r3,r2
10008764:	e0bfe415 	stw	r2,-112(fp)
          newmem = chunk2mem(newp);
10008768:	e0bfe317 	ldw	r2,-116(fp)
1000876c:	10800204 	addi	r2,r2,8
10008770:	e0bff615 	stw	r2,-40(fp)
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10008774:	e0bff017 	ldw	r2,-64(fp)
10008778:	10bfff04 	addi	r2,r2,-4
1000877c:	e0bff815 	stw	r2,-32(fp)
10008780:	e0bff817 	ldw	r2,-32(fp)
10008784:	10800968 	cmpgeui	r2,r2,37
10008788:	1000521e 	bne	r2,zero,100088d4 <_realloc_r+0x6f4>
1000878c:	e0bffe17 	ldw	r2,-8(fp)
10008790:	e0bfe915 	stw	r2,-92(fp)
10008794:	e0bff617 	ldw	r2,-40(fp)
10008798:	e0bfea15 	stw	r2,-88(fp)
1000879c:	e0bff817 	ldw	r2,-32(fp)
100087a0:	10800530 	cmpltui	r2,r2,20
100087a4:	1000361e 	bne	r2,zero,10008880 <_realloc_r+0x6a0>
100087a8:	e0bfea17 	ldw	r2,-88(fp)
100087ac:	10c00104 	addi	r3,r2,4
100087b0:	e0ffea15 	stw	r3,-88(fp)
100087b4:	e0ffe917 	ldw	r3,-92(fp)
100087b8:	19000104 	addi	r4,r3,4
100087bc:	e13fe915 	stw	r4,-92(fp)
100087c0:	18c00017 	ldw	r3,0(r3)
100087c4:	10c00015 	stw	r3,0(r2)
100087c8:	e0bfea17 	ldw	r2,-88(fp)
100087cc:	10c00104 	addi	r3,r2,4
100087d0:	e0ffea15 	stw	r3,-88(fp)
100087d4:	e0ffe917 	ldw	r3,-92(fp)
100087d8:	19000104 	addi	r4,r3,4
100087dc:	e13fe915 	stw	r4,-92(fp)
100087e0:	18c00017 	ldw	r3,0(r3)
100087e4:	10c00015 	stw	r3,0(r2)
100087e8:	e0bff817 	ldw	r2,-32(fp)
100087ec:	10800730 	cmpltui	r2,r2,28
100087f0:	1000231e 	bne	r2,zero,10008880 <_realloc_r+0x6a0>
100087f4:	e0bfea17 	ldw	r2,-88(fp)
100087f8:	10c00104 	addi	r3,r2,4
100087fc:	e0ffea15 	stw	r3,-88(fp)
10008800:	e0ffe917 	ldw	r3,-92(fp)
10008804:	19000104 	addi	r4,r3,4
10008808:	e13fe915 	stw	r4,-92(fp)
1000880c:	18c00017 	ldw	r3,0(r3)
10008810:	10c00015 	stw	r3,0(r2)
10008814:	e0bfea17 	ldw	r2,-88(fp)
10008818:	10c00104 	addi	r3,r2,4
1000881c:	e0ffea15 	stw	r3,-88(fp)
10008820:	e0ffe917 	ldw	r3,-92(fp)
10008824:	19000104 	addi	r4,r3,4
10008828:	e13fe915 	stw	r4,-92(fp)
1000882c:	18c00017 	ldw	r3,0(r3)
10008830:	10c00015 	stw	r3,0(r2)
10008834:	e0bff817 	ldw	r2,-32(fp)
10008838:	10800930 	cmpltui	r2,r2,36
1000883c:	1000101e 	bne	r2,zero,10008880 <_realloc_r+0x6a0>
10008840:	e0bfea17 	ldw	r2,-88(fp)
10008844:	10c00104 	addi	r3,r2,4
10008848:	e0ffea15 	stw	r3,-88(fp)
1000884c:	e0ffe917 	ldw	r3,-92(fp)
10008850:	19000104 	addi	r4,r3,4
10008854:	e13fe915 	stw	r4,-92(fp)
10008858:	18c00017 	ldw	r3,0(r3)
1000885c:	10c00015 	stw	r3,0(r2)
10008860:	e0bfea17 	ldw	r2,-88(fp)
10008864:	10c00104 	addi	r3,r2,4
10008868:	e0ffea15 	stw	r3,-88(fp)
1000886c:	e0ffe917 	ldw	r3,-92(fp)
10008870:	19000104 	addi	r4,r3,4
10008874:	e13fe915 	stw	r4,-92(fp)
10008878:	18c00017 	ldw	r3,0(r3)
1000887c:	10c00015 	stw	r3,0(r2)
10008880:	e0bfea17 	ldw	r2,-88(fp)
10008884:	10c00104 	addi	r3,r2,4
10008888:	e0ffea15 	stw	r3,-88(fp)
1000888c:	e0ffe917 	ldw	r3,-92(fp)
10008890:	19000104 	addi	r4,r3,4
10008894:	e13fe915 	stw	r4,-92(fp)
10008898:	18c00017 	ldw	r3,0(r3)
1000889c:	10c00015 	stw	r3,0(r2)
100088a0:	e0bfea17 	ldw	r2,-88(fp)
100088a4:	10c00104 	addi	r3,r2,4
100088a8:	e0ffea15 	stw	r3,-88(fp)
100088ac:	e0ffe917 	ldw	r3,-92(fp)
100088b0:	19000104 	addi	r4,r3,4
100088b4:	e13fe915 	stw	r4,-92(fp)
100088b8:	18c00017 	ldw	r3,0(r3)
100088bc:	10c00015 	stw	r3,0(r2)
100088c0:	e0bfe917 	ldw	r2,-92(fp)
100088c4:	10c00017 	ldw	r3,0(r2)
100088c8:	e0bfea17 	ldw	r2,-88(fp)
100088cc:	10c00015 	stw	r3,0(r2)
          goto split;
100088d0:	00010106 	br	10008cd8 <_realloc_r+0xaf8>
          unlink(next, bck, fwd);
          unlink(prev, bck, fwd);
          newp = prev;
          newsize += nextsize + prevsize;
          newmem = chunk2mem(newp);
          MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
100088d4:	e1bff817 	ldw	r6,-32(fp)
100088d8:	e17ffe17 	ldw	r5,-8(fp)
100088dc:	e13ff617 	ldw	r4,-40(fp)
100088e0:	000fffc0 	call	1000fffc <memmove>
          goto split;
100088e4:	0000fc06 	br	10008cd8 <_realloc_r+0xaf8>
        }
      }
      
      /* backward only */
      if (prev != 0 && (long)(prevsize + newsize) >= (long)nb)  
100088e8:	e0bff417 	ldw	r2,-48(fp)
100088ec:	10007826 	beq	r2,zero,10008ad0 <_realloc_r+0x8f0>
100088f0:	e0fff517 	ldw	r3,-44(fp)
100088f4:	e0bfe417 	ldw	r2,-112(fp)
100088f8:	1885883a 	add	r2,r3,r2
100088fc:	1007883a 	mov	r3,r2
10008900:	e0bff117 	ldw	r2,-60(fp)
10008904:	18807216 	blt	r3,r2,10008ad0 <_realloc_r+0x8f0>
      {
        unlink(prev, bck, fwd);
10008908:	e0bff417 	ldw	r2,-48(fp)
1000890c:	10800317 	ldw	r2,12(r2)
10008910:	e0bff215 	stw	r2,-56(fp)
10008914:	e0bff417 	ldw	r2,-48(fp)
10008918:	10800217 	ldw	r2,8(r2)
1000891c:	e0bff315 	stw	r2,-52(fp)
10008920:	e0bff317 	ldw	r2,-52(fp)
10008924:	e0fff217 	ldw	r3,-56(fp)
10008928:	10c00315 	stw	r3,12(r2)
1000892c:	e0bff217 	ldw	r2,-56(fp)
10008930:	e0fff317 	ldw	r3,-52(fp)
10008934:	10c00215 	stw	r3,8(r2)
        newp = prev;
10008938:	e0bff417 	ldw	r2,-48(fp)
1000893c:	e0bfe315 	stw	r2,-116(fp)
        newsize += prevsize;
10008940:	e0ffe417 	ldw	r3,-112(fp)
10008944:	e0bff517 	ldw	r2,-44(fp)
10008948:	1885883a 	add	r2,r3,r2
1000894c:	e0bfe415 	stw	r2,-112(fp)
        newmem = chunk2mem(newp);
10008950:	e0bfe317 	ldw	r2,-116(fp)
10008954:	10800204 	addi	r2,r2,8
10008958:	e0bff615 	stw	r2,-40(fp)
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
1000895c:	e0bff017 	ldw	r2,-64(fp)
10008960:	10bfff04 	addi	r2,r2,-4
10008964:	e0bff915 	stw	r2,-28(fp)
10008968:	e0bff917 	ldw	r2,-28(fp)
1000896c:	10800968 	cmpgeui	r2,r2,37
10008970:	1000521e 	bne	r2,zero,10008abc <_realloc_r+0x8dc>
10008974:	e0bffe17 	ldw	r2,-8(fp)
10008978:	e0bfeb15 	stw	r2,-84(fp)
1000897c:	e0bff617 	ldw	r2,-40(fp)
10008980:	e0bfec15 	stw	r2,-80(fp)
10008984:	e0bff917 	ldw	r2,-28(fp)
10008988:	10800530 	cmpltui	r2,r2,20
1000898c:	1000361e 	bne	r2,zero,10008a68 <_realloc_r+0x888>
10008990:	e0bfec17 	ldw	r2,-80(fp)
10008994:	10c00104 	addi	r3,r2,4
10008998:	e0ffec15 	stw	r3,-80(fp)
1000899c:	e0ffeb17 	ldw	r3,-84(fp)
100089a0:	19000104 	addi	r4,r3,4
100089a4:	e13feb15 	stw	r4,-84(fp)
100089a8:	18c00017 	ldw	r3,0(r3)
100089ac:	10c00015 	stw	r3,0(r2)
100089b0:	e0bfec17 	ldw	r2,-80(fp)
100089b4:	10c00104 	addi	r3,r2,4
100089b8:	e0ffec15 	stw	r3,-80(fp)
100089bc:	e0ffeb17 	ldw	r3,-84(fp)
100089c0:	19000104 	addi	r4,r3,4
100089c4:	e13feb15 	stw	r4,-84(fp)
100089c8:	18c00017 	ldw	r3,0(r3)
100089cc:	10c00015 	stw	r3,0(r2)
100089d0:	e0bff917 	ldw	r2,-28(fp)
100089d4:	10800730 	cmpltui	r2,r2,28
100089d8:	1000231e 	bne	r2,zero,10008a68 <_realloc_r+0x888>
100089dc:	e0bfec17 	ldw	r2,-80(fp)
100089e0:	10c00104 	addi	r3,r2,4
100089e4:	e0ffec15 	stw	r3,-80(fp)
100089e8:	e0ffeb17 	ldw	r3,-84(fp)
100089ec:	19000104 	addi	r4,r3,4
100089f0:	e13feb15 	stw	r4,-84(fp)
100089f4:	18c00017 	ldw	r3,0(r3)
100089f8:	10c00015 	stw	r3,0(r2)
100089fc:	e0bfec17 	ldw	r2,-80(fp)
10008a00:	10c00104 	addi	r3,r2,4
10008a04:	e0ffec15 	stw	r3,-80(fp)
10008a08:	e0ffeb17 	ldw	r3,-84(fp)
10008a0c:	19000104 	addi	r4,r3,4
10008a10:	e13feb15 	stw	r4,-84(fp)
10008a14:	18c00017 	ldw	r3,0(r3)
10008a18:	10c00015 	stw	r3,0(r2)
10008a1c:	e0bff917 	ldw	r2,-28(fp)
10008a20:	10800930 	cmpltui	r2,r2,36
10008a24:	1000101e 	bne	r2,zero,10008a68 <_realloc_r+0x888>
10008a28:	e0bfec17 	ldw	r2,-80(fp)
10008a2c:	10c00104 	addi	r3,r2,4
10008a30:	e0ffec15 	stw	r3,-80(fp)
10008a34:	e0ffeb17 	ldw	r3,-84(fp)
10008a38:	19000104 	addi	r4,r3,4
10008a3c:	e13feb15 	stw	r4,-84(fp)
10008a40:	18c00017 	ldw	r3,0(r3)
10008a44:	10c00015 	stw	r3,0(r2)
10008a48:	e0bfec17 	ldw	r2,-80(fp)
10008a4c:	10c00104 	addi	r3,r2,4
10008a50:	e0ffec15 	stw	r3,-80(fp)
10008a54:	e0ffeb17 	ldw	r3,-84(fp)
10008a58:	19000104 	addi	r4,r3,4
10008a5c:	e13feb15 	stw	r4,-84(fp)
10008a60:	18c00017 	ldw	r3,0(r3)
10008a64:	10c00015 	stw	r3,0(r2)
10008a68:	e0bfec17 	ldw	r2,-80(fp)
10008a6c:	10c00104 	addi	r3,r2,4
10008a70:	e0ffec15 	stw	r3,-80(fp)
10008a74:	e0ffeb17 	ldw	r3,-84(fp)
10008a78:	19000104 	addi	r4,r3,4
10008a7c:	e13feb15 	stw	r4,-84(fp)
10008a80:	18c00017 	ldw	r3,0(r3)
10008a84:	10c00015 	stw	r3,0(r2)
10008a88:	e0bfec17 	ldw	r2,-80(fp)
10008a8c:	10c00104 	addi	r3,r2,4
10008a90:	e0ffec15 	stw	r3,-80(fp)
10008a94:	e0ffeb17 	ldw	r3,-84(fp)
10008a98:	19000104 	addi	r4,r3,4
10008a9c:	e13feb15 	stw	r4,-84(fp)
10008aa0:	18c00017 	ldw	r3,0(r3)
10008aa4:	10c00015 	stw	r3,0(r2)
10008aa8:	e0bfeb17 	ldw	r2,-84(fp)
10008aac:	10c00017 	ldw	r3,0(r2)
10008ab0:	e0bfec17 	ldw	r2,-80(fp)
10008ab4:	10c00015 	stw	r3,0(r2)
        goto split;
10008ab8:	00008706 	br	10008cd8 <_realloc_r+0xaf8>
      {
        unlink(prev, bck, fwd);
        newp = prev;
        newsize += prevsize;
        newmem = chunk2mem(newp);
        MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10008abc:	e1bff917 	ldw	r6,-28(fp)
10008ac0:	e17ffe17 	ldw	r5,-8(fp)
10008ac4:	e13ff617 	ldw	r4,-40(fp)
10008ac8:	000fffc0 	call	1000fffc <memmove>
        goto split;
10008acc:	00008206 	br	10008cd8 <_realloc_r+0xaf8>
      }
    }

    /* Must allocate */

    newmem = mALLOc (RCALL bytes);
10008ad0:	e17fff17 	ldw	r5,-4(fp)
10008ad4:	e13ffd17 	ldw	r4,-12(fp)
10008ad8:	0006fd80 	call	10006fd8 <_malloc_r>
10008adc:	e0bff615 	stw	r2,-40(fp)

    if (newmem == 0)  /* propagate failure */
10008ae0:	e0bff617 	ldw	r2,-40(fp)
10008ae4:	1000041e 	bne	r2,zero,10008af8 <_realloc_r+0x918>
    {
      MALLOC_UNLOCK;
10008ae8:	e13ffd17 	ldw	r4,-12(fp)
10008aec:	0015f940 	call	10015f94 <__malloc_unlock>
      return 0;
10008af0:	0005883a 	mov	r2,zero
10008af4:	0000b106 	br	10008dbc <_realloc_r+0xbdc>
    }

    /* Avoid copy if newp is next chunk after oldp. */
    /* (This can only happen when new chunk is sbrk'ed.) */

    if ( (newp = mem2chunk(newmem)) == next_chunk(oldp)) 
10008af8:	e0bff617 	ldw	r2,-40(fp)
10008afc:	10bffe04 	addi	r2,r2,-8
10008b00:	e0bfe315 	stw	r2,-116(fp)
10008b04:	e0bfef17 	ldw	r2,-68(fp)
10008b08:	10c00117 	ldw	r3,4(r2)
10008b0c:	00bfff84 	movi	r2,-2
10008b10:	1884703a 	and	r2,r3,r2
10008b14:	e0ffef17 	ldw	r3,-68(fp)
10008b18:	1885883a 	add	r2,r3,r2
10008b1c:	e0ffe317 	ldw	r3,-116(fp)
10008b20:	18800a1e 	bne	r3,r2,10008b4c <_realloc_r+0x96c>
    {
      newsize += chunksize(newp);
10008b24:	e0bfe317 	ldw	r2,-116(fp)
10008b28:	10c00117 	ldw	r3,4(r2)
10008b2c:	00bfff04 	movi	r2,-4
10008b30:	1884703a 	and	r2,r3,r2
10008b34:	e0ffe417 	ldw	r3,-112(fp)
10008b38:	1885883a 	add	r2,r3,r2
10008b3c:	e0bfe415 	stw	r2,-112(fp)
      newp = oldp;
10008b40:	e0bfef17 	ldw	r2,-68(fp)
10008b44:	e0bfe315 	stw	r2,-116(fp)
      goto split;
10008b48:	00006306 	br	10008cd8 <_realloc_r+0xaf8>
    }

    /* Otherwise copy, free, and exit */
    MALLOC_COPY(newmem, oldmem, oldsize - SIZE_SZ);
10008b4c:	e0bff017 	ldw	r2,-64(fp)
10008b50:	10bfff04 	addi	r2,r2,-4
10008b54:	e0bffa15 	stw	r2,-24(fp)
10008b58:	e0bffa17 	ldw	r2,-24(fp)
10008b5c:	10800968 	cmpgeui	r2,r2,37
10008b60:	1000521e 	bne	r2,zero,10008cac <_realloc_r+0xacc>
10008b64:	e0bffe17 	ldw	r2,-8(fp)
10008b68:	e0bfed15 	stw	r2,-76(fp)
10008b6c:	e0bff617 	ldw	r2,-40(fp)
10008b70:	e0bfee15 	stw	r2,-72(fp)
10008b74:	e0bffa17 	ldw	r2,-24(fp)
10008b78:	10800530 	cmpltui	r2,r2,20
10008b7c:	1000361e 	bne	r2,zero,10008c58 <_realloc_r+0xa78>
10008b80:	e0bfee17 	ldw	r2,-72(fp)
10008b84:	10c00104 	addi	r3,r2,4
10008b88:	e0ffee15 	stw	r3,-72(fp)
10008b8c:	e0ffed17 	ldw	r3,-76(fp)
10008b90:	19000104 	addi	r4,r3,4
10008b94:	e13fed15 	stw	r4,-76(fp)
10008b98:	18c00017 	ldw	r3,0(r3)
10008b9c:	10c00015 	stw	r3,0(r2)
10008ba0:	e0bfee17 	ldw	r2,-72(fp)
10008ba4:	10c00104 	addi	r3,r2,4
10008ba8:	e0ffee15 	stw	r3,-72(fp)
10008bac:	e0ffed17 	ldw	r3,-76(fp)
10008bb0:	19000104 	addi	r4,r3,4
10008bb4:	e13fed15 	stw	r4,-76(fp)
10008bb8:	18c00017 	ldw	r3,0(r3)
10008bbc:	10c00015 	stw	r3,0(r2)
10008bc0:	e0bffa17 	ldw	r2,-24(fp)
10008bc4:	10800730 	cmpltui	r2,r2,28
10008bc8:	1000231e 	bne	r2,zero,10008c58 <_realloc_r+0xa78>
10008bcc:	e0bfee17 	ldw	r2,-72(fp)
10008bd0:	10c00104 	addi	r3,r2,4
10008bd4:	e0ffee15 	stw	r3,-72(fp)
10008bd8:	e0ffed17 	ldw	r3,-76(fp)
10008bdc:	19000104 	addi	r4,r3,4
10008be0:	e13fed15 	stw	r4,-76(fp)
10008be4:	18c00017 	ldw	r3,0(r3)
10008be8:	10c00015 	stw	r3,0(r2)
10008bec:	e0bfee17 	ldw	r2,-72(fp)
10008bf0:	10c00104 	addi	r3,r2,4
10008bf4:	e0ffee15 	stw	r3,-72(fp)
10008bf8:	e0ffed17 	ldw	r3,-76(fp)
10008bfc:	19000104 	addi	r4,r3,4
10008c00:	e13fed15 	stw	r4,-76(fp)
10008c04:	18c00017 	ldw	r3,0(r3)
10008c08:	10c00015 	stw	r3,0(r2)
10008c0c:	e0bffa17 	ldw	r2,-24(fp)
10008c10:	10800930 	cmpltui	r2,r2,36
10008c14:	1000101e 	bne	r2,zero,10008c58 <_realloc_r+0xa78>
10008c18:	e0bfee17 	ldw	r2,-72(fp)
10008c1c:	10c00104 	addi	r3,r2,4
10008c20:	e0ffee15 	stw	r3,-72(fp)
10008c24:	e0ffed17 	ldw	r3,-76(fp)
10008c28:	19000104 	addi	r4,r3,4
10008c2c:	e13fed15 	stw	r4,-76(fp)
10008c30:	18c00017 	ldw	r3,0(r3)
10008c34:	10c00015 	stw	r3,0(r2)
10008c38:	e0bfee17 	ldw	r2,-72(fp)
10008c3c:	10c00104 	addi	r3,r2,4
10008c40:	e0ffee15 	stw	r3,-72(fp)
10008c44:	e0ffed17 	ldw	r3,-76(fp)
10008c48:	19000104 	addi	r4,r3,4
10008c4c:	e13fed15 	stw	r4,-76(fp)
10008c50:	18c00017 	ldw	r3,0(r3)
10008c54:	10c00015 	stw	r3,0(r2)
10008c58:	e0bfee17 	ldw	r2,-72(fp)
10008c5c:	10c00104 	addi	r3,r2,4
10008c60:	e0ffee15 	stw	r3,-72(fp)
10008c64:	e0ffed17 	ldw	r3,-76(fp)
10008c68:	19000104 	addi	r4,r3,4
10008c6c:	e13fed15 	stw	r4,-76(fp)
10008c70:	18c00017 	ldw	r3,0(r3)
10008c74:	10c00015 	stw	r3,0(r2)
10008c78:	e0bfee17 	ldw	r2,-72(fp)
10008c7c:	10c00104 	addi	r3,r2,4
10008c80:	e0ffee15 	stw	r3,-72(fp)
10008c84:	e0ffed17 	ldw	r3,-76(fp)
10008c88:	19000104 	addi	r4,r3,4
10008c8c:	e13fed15 	stw	r4,-76(fp)
10008c90:	18c00017 	ldw	r3,0(r3)
10008c94:	10c00015 	stw	r3,0(r2)
10008c98:	e0bfed17 	ldw	r2,-76(fp)
10008c9c:	10c00017 	ldw	r3,0(r2)
10008ca0:	e0bfee17 	ldw	r2,-72(fp)
10008ca4:	10c00015 	stw	r3,0(r2)
10008ca8:	00000406 	br	10008cbc <_realloc_r+0xadc>
10008cac:	e1bffa17 	ldw	r6,-24(fp)
10008cb0:	e17ffe17 	ldw	r5,-8(fp)
10008cb4:	e13ff617 	ldw	r4,-40(fp)
10008cb8:	000fffc0 	call	1000fffc <memmove>
    fREe(RCALL oldmem);
10008cbc:	e17ffe17 	ldw	r5,-8(fp)
10008cc0:	e13ffd17 	ldw	r4,-12(fp)
10008cc4:	000e9740 	call	1000e974 <_free_r>
    MALLOC_UNLOCK;
10008cc8:	e13ffd17 	ldw	r4,-12(fp)
10008ccc:	0015f940 	call	10015f94 <__malloc_unlock>
    return newmem;
10008cd0:	e0bff617 	ldw	r2,-40(fp)
10008cd4:	00003906 	br	10008dbc <_realloc_r+0xbdc>
  }


 split:  /* split off extra room in old or expanded chunk */

  remainder_size = long_sub_size_t(newsize, nb);
10008cd8:	e0ffe417 	ldw	r3,-112(fp)
10008cdc:	e0bff117 	ldw	r2,-60(fp)
10008ce0:	1885c83a 	sub	r2,r3,r2
10008ce4:	e0bffb15 	stw	r2,-20(fp)

  if (remainder_size >= (long)MINSIZE) /* split off remainder */
10008ce8:	e0bffb17 	ldw	r2,-20(fp)
10008cec:	10800430 	cmpltui	r2,r2,16
10008cf0:	10001e1e 	bne	r2,zero,10008d6c <_realloc_r+0xb8c>
  {
    remainder = chunk_at_offset(newp, nb);
10008cf4:	e0ffe317 	ldw	r3,-116(fp)
10008cf8:	e0bff117 	ldw	r2,-60(fp)
10008cfc:	1885883a 	add	r2,r3,r2
10008d00:	e0bffc15 	stw	r2,-16(fp)
    set_head_size(newp, nb);
10008d04:	e0bfe317 	ldw	r2,-116(fp)
10008d08:	10800117 	ldw	r2,4(r2)
10008d0c:	10c0004c 	andi	r3,r2,1
10008d10:	e0bff117 	ldw	r2,-60(fp)
10008d14:	1886b03a 	or	r3,r3,r2
10008d18:	e0bfe317 	ldw	r2,-116(fp)
10008d1c:	10c00115 	stw	r3,4(r2)
    set_head(remainder, remainder_size | PREV_INUSE);
10008d20:	e0bffb17 	ldw	r2,-20(fp)
10008d24:	10c00054 	ori	r3,r2,1
10008d28:	e0bffc17 	ldw	r2,-16(fp)
10008d2c:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(remainder, remainder_size);
10008d30:	e0fffc17 	ldw	r3,-16(fp)
10008d34:	e0bffb17 	ldw	r2,-20(fp)
10008d38:	1885883a 	add	r2,r3,r2
10008d3c:	e13ffc17 	ldw	r4,-16(fp)
10008d40:	e0fffb17 	ldw	r3,-20(fp)
10008d44:	20c7883a 	add	r3,r4,r3
10008d48:	18c00117 	ldw	r3,4(r3)
10008d4c:	18c00054 	ori	r3,r3,1
10008d50:	10c00115 	stw	r3,4(r2)
    fREe(RCALL chunk2mem(remainder)); /* let free() deal with it */
10008d54:	e0bffc17 	ldw	r2,-16(fp)
10008d58:	10800204 	addi	r2,r2,8
10008d5c:	100b883a 	mov	r5,r2
10008d60:	e13ffd17 	ldw	r4,-12(fp)
10008d64:	000e9740 	call	1000e974 <_free_r>
10008d68:	00001006 	br	10008dac <_realloc_r+0xbcc>
  }
  else
  {
    set_head_size(newp, newsize);
10008d6c:	e0bfe317 	ldw	r2,-116(fp)
10008d70:	10800117 	ldw	r2,4(r2)
10008d74:	10c0004c 	andi	r3,r2,1
10008d78:	e0bfe417 	ldw	r2,-112(fp)
10008d7c:	1886b03a 	or	r3,r3,r2
10008d80:	e0bfe317 	ldw	r2,-116(fp)
10008d84:	10c00115 	stw	r3,4(r2)
    set_inuse_bit_at_offset(newp, newsize);
10008d88:	e0ffe317 	ldw	r3,-116(fp)
10008d8c:	e0bfe417 	ldw	r2,-112(fp)
10008d90:	1885883a 	add	r2,r3,r2
10008d94:	e13fe317 	ldw	r4,-116(fp)
10008d98:	e0ffe417 	ldw	r3,-112(fp)
10008d9c:	20c7883a 	add	r3,r4,r3
10008da0:	18c00117 	ldw	r3,4(r3)
10008da4:	18c00054 	ori	r3,r3,1
10008da8:	10c00115 	stw	r3,4(r2)
  }

  check_inuse_chunk(newp);
  MALLOC_UNLOCK;
10008dac:	e13ffd17 	ldw	r4,-12(fp)
10008db0:	0015f940 	call	10015f94 <__malloc_unlock>
  return chunk2mem(newp);
10008db4:	e0bfe317 	ldw	r2,-116(fp)
10008db8:	10800204 	addi	r2,r2,8

#endif /* MALLOC_PROVIDED */
}
10008dbc:	e037883a 	mov	sp,fp
10008dc0:	dfc00117 	ldw	ra,4(sp)
10008dc4:	df000017 	ldw	fp,0(sp)
10008dc8:	dec00204 	addi	sp,sp,8
10008dcc:	f800283a 	ret

10008dd0 <__srget_r>:

int
_DEFUN(__srget_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
10008dd0:	defffb04 	addi	sp,sp,-20
10008dd4:	dfc00415 	stw	ra,16(sp)
10008dd8:	df000315 	stw	fp,12(sp)
10008ddc:	dc000215 	stw	r16,8(sp)
10008de0:	df000304 	addi	fp,sp,12
10008de4:	e13ffe15 	stw	r4,-8(fp)
10008de8:	2821883a 	mov	r16,r5
  /* Ensure that any fake std stream is resolved before
     we call __srefill_r so we may access the true read buffer. */
  CHECK_INIT(ptr, fp);
10008dec:	e0bffe17 	ldw	r2,-8(fp)
10008df0:	e0bffd15 	stw	r2,-12(fp)
10008df4:	e0bffd17 	ldw	r2,-12(fp)
10008df8:	10000526 	beq	r2,zero,10008e10 <__srget_r+0x40>
10008dfc:	e0bffd17 	ldw	r2,-12(fp)
10008e00:	10800e17 	ldw	r2,56(r2)
10008e04:	1000021e 	bne	r2,zero,10008e10 <__srget_r+0x40>
10008e08:	e13ffd17 	ldw	r4,-12(fp)
10008e0c:	000e7440 	call	1000e744 <__sinit>

  if (__srefill_r (ptr, fp) == 0)
10008e10:	800b883a 	mov	r5,r16
10008e14:	e13ffe17 	ldw	r4,-8(fp)
10008e18:	0011f180 	call	10011f18 <__srefill_r>
10008e1c:	1000091e 	bne	r2,zero,10008e44 <__srget_r+0x74>
    {
      fp->_r--;
10008e20:	80800117 	ldw	r2,4(r16)
10008e24:	10bfffc4 	addi	r2,r2,-1
10008e28:	80800115 	stw	r2,4(r16)
      return *fp->_p++;
10008e2c:	80800017 	ldw	r2,0(r16)
10008e30:	10c00044 	addi	r3,r2,1
10008e34:	80c00015 	stw	r3,0(r16)
10008e38:	10800003 	ldbu	r2,0(r2)
10008e3c:	10803fcc 	andi	r2,r2,255
10008e40:	00000106 	br	10008e48 <__srget_r+0x78>
    }
  return EOF;
10008e44:	00bfffc4 	movi	r2,-1
}
10008e48:	e6ffff04 	addi	sp,fp,-4
10008e4c:	dfc00217 	ldw	ra,8(sp)
10008e50:	df000117 	ldw	fp,4(sp)
10008e54:	dc000017 	ldw	r16,0(sp)
10008e58:	dec00304 	addi	sp,sp,12
10008e5c:	f800283a 	ret

10008e60 <__srget>:
   required for backward compatibility with applications built against
   earlier dynamically built newlib libraries. */
int
_DEFUN(__srget, (fp),
       register FILE *fp)
{
10008e60:	defffe04 	addi	sp,sp,-8
10008e64:	dfc00115 	stw	ra,4(sp)
10008e68:	df000015 	stw	fp,0(sp)
10008e6c:	d839883a 	mov	fp,sp
10008e70:	2007883a 	mov	r3,r4
  return __srget_r (_REENT, fp);
10008e74:	008403b4 	movhi	r2,4110
10008e78:	10a4cc04 	addi	r2,r2,-27856
10008e7c:	10800017 	ldw	r2,0(r2)
10008e80:	180b883a 	mov	r5,r3
10008e84:	1009883a 	mov	r4,r2
10008e88:	0008dd00 	call	10008dd0 <__srget_r>
}
10008e8c:	e037883a 	mov	sp,fp
10008e90:	dfc00117 	ldw	ra,4(sp)
10008e94:	df000017 	ldw	fp,0(sp)
10008e98:	dec00204 	addi	sp,sp,8
10008e9c:	f800283a 	ret

10008ea0 <ldexp>:
	double ldexp(double value, int exp)
#else
	double ldexp(value, exp)
	double value; int exp;
#endif
{
10008ea0:	defffb04 	addi	sp,sp,-20
10008ea4:	dfc00415 	stw	ra,16(sp)
10008ea8:	df000315 	stw	fp,12(sp)
10008eac:	df000304 	addi	fp,sp,12
10008eb0:	e13ffd15 	stw	r4,-12(fp)
10008eb4:	e17ffe15 	stw	r5,-8(fp)
10008eb8:	e1bfff15 	stw	r6,-4(fp)
	if(!finite(value)||value==0.0) return value;
10008ebc:	e13ffd17 	ldw	r4,-12(fp)
10008ec0:	e17ffe17 	ldw	r5,-8(fp)
10008ec4:	00122280 	call	10012228 <finite>
10008ec8:	10000626 	beq	r2,zero,10008ee4 <ldexp+0x44>
10008ecc:	000d883a 	mov	r6,zero
10008ed0:	000f883a 	mov	r7,zero
10008ed4:	e13ffd17 	ldw	r4,-12(fp)
10008ed8:	e17ffe17 	ldw	r5,-8(fp)
10008edc:	00154180 	call	10015418 <__eqdf2>
10008ee0:	1000031e 	bne	r2,zero,10008ef0 <ldexp+0x50>
10008ee4:	e0bffd17 	ldw	r2,-12(fp)
10008ee8:	e0fffe17 	ldw	r3,-8(fp)
10008eec:	00001606 	br	10008f48 <ldexp+0xa8>
	value = scalbn(value,exp);
10008ef0:	e1bfff17 	ldw	r6,-4(fp)
10008ef4:	e13ffd17 	ldw	r4,-12(fp)
10008ef8:	e17ffe17 	ldw	r5,-8(fp)
10008efc:	0008f6c0 	call	10008f6c <scalbn>
10008f00:	e0bffd15 	stw	r2,-12(fp)
10008f04:	e0fffe15 	stw	r3,-8(fp)
	if(!finite(value)||value==0.0) errno = ERANGE;
10008f08:	e13ffd17 	ldw	r4,-12(fp)
10008f0c:	e17ffe17 	ldw	r5,-8(fp)
10008f10:	00122280 	call	10012228 <finite>
10008f14:	10000626 	beq	r2,zero,10008f30 <ldexp+0x90>
10008f18:	000d883a 	mov	r6,zero
10008f1c:	000f883a 	mov	r7,zero
10008f20:	e13ffd17 	ldw	r4,-12(fp)
10008f24:	e17ffe17 	ldw	r5,-8(fp)
10008f28:	00154180 	call	10015418 <__eqdf2>
10008f2c:	1000041e 	bne	r2,zero,10008f40 <ldexp+0xa0>
10008f30:	000df500 	call	1000df50 <__errno>
10008f34:	1007883a 	mov	r3,r2
10008f38:	00800884 	movi	r2,34
10008f3c:	18800015 	stw	r2,0(r3)
	return value;
10008f40:	e0bffd17 	ldw	r2,-12(fp)
10008f44:	e0fffe17 	ldw	r3,-8(fp)
10008f48:	1009883a 	mov	r4,r2
10008f4c:	180b883a 	mov	r5,r3
}
10008f50:	2005883a 	mov	r2,r4
10008f54:	2807883a 	mov	r3,r5
10008f58:	e037883a 	mov	sp,fp
10008f5c:	dfc00117 	ldw	ra,4(sp)
10008f60:	df000017 	ldw	fp,0(sp)
10008f64:	dec00204 	addi	sp,sp,8
10008f68:	f800283a 	ret

10008f6c <scalbn>:
	double scalbn (double x, int n)
#else
	double scalbn (x,n)
	double x; int n;
#endif
{
10008f6c:	defff004 	addi	sp,sp,-64
10008f70:	dfc00f15 	stw	ra,60(sp)
10008f74:	df000e15 	stw	fp,56(sp)
10008f78:	df000e04 	addi	fp,sp,56
10008f7c:	e13ffd15 	stw	r4,-12(fp)
10008f80:	e17ffe15 	stw	r5,-8(fp)
10008f84:	e1bfff15 	stw	r6,-4(fp)
	__int32_t  k,hx,lx;
	EXTRACT_WORDS(hx,lx,x);
10008f88:	e0bffd17 	ldw	r2,-12(fp)
10008f8c:	e0bff515 	stw	r2,-44(fp)
10008f90:	e0bffe17 	ldw	r2,-8(fp)
10008f94:	e0bff615 	stw	r2,-40(fp)
10008f98:	e0bff617 	ldw	r2,-40(fp)
10008f9c:	e0bff315 	stw	r2,-52(fp)
10008fa0:	e0bff517 	ldw	r2,-44(fp)
10008fa4:	e0bff415 	stw	r2,-48(fp)
        k = (hx&0x7ff00000)>>20;		/* extract exponent */
10008fa8:	e0bff317 	ldw	r2,-52(fp)
10008fac:	109ffc2c 	andhi	r2,r2,32752
10008fb0:	1005d53a 	srai	r2,r2,20
10008fb4:	e0bff215 	stw	r2,-56(fp)
        if (k==0) {				/* 0 or subnormal x */
10008fb8:	e0bff217 	ldw	r2,-56(fp)
10008fbc:	1000321e 	bne	r2,zero,10009088 <scalbn+0x11c>
            if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
10008fc0:	e0fff317 	ldw	r3,-52(fp)
10008fc4:	00a00034 	movhi	r2,32768
10008fc8:	10bfffc4 	addi	r2,r2,-1
10008fcc:	1886703a 	and	r3,r3,r2
10008fd0:	e0bff417 	ldw	r2,-48(fp)
10008fd4:	1884b03a 	or	r2,r3,r2
10008fd8:	1000031e 	bne	r2,zero,10008fe8 <scalbn+0x7c>
10008fdc:	e0bffd17 	ldw	r2,-12(fp)
10008fe0:	e0fffe17 	ldw	r3,-8(fp)
10008fe4:	0000c206 	br	100092f0 <scalbn+0x384>
	    x *= two54; 
10008fe8:	0005883a 	mov	r2,zero
10008fec:	00d0d434 	movhi	r3,17232
10008ff0:	100d883a 	mov	r6,r2
10008ff4:	180f883a 	mov	r7,r3
10008ff8:	e13ffd17 	ldw	r4,-12(fp)
10008ffc:	e17ffe17 	ldw	r5,-8(fp)
10009000:	00051580 	call	10005158 <__muldf3>
10009004:	1009883a 	mov	r4,r2
10009008:	180b883a 	mov	r5,r3
1000900c:	e13ffd15 	stw	r4,-12(fp)
10009010:	e17ffe15 	stw	r5,-8(fp)
	    GET_HIGH_WORD(hx,x);
10009014:	e0bffd17 	ldw	r2,-12(fp)
10009018:	e0bff715 	stw	r2,-36(fp)
1000901c:	e0bffe17 	ldw	r2,-8(fp)
10009020:	e0bff815 	stw	r2,-32(fp)
10009024:	e0bff817 	ldw	r2,-32(fp)
10009028:	e0bff315 	stw	r2,-52(fp)
	    k = ((hx&0x7ff00000)>>20) - 54; 
1000902c:	e0bff317 	ldw	r2,-52(fp)
10009030:	109ffc2c 	andhi	r2,r2,32752
10009034:	1005d53a 	srai	r2,r2,20
10009038:	10bff284 	addi	r2,r2,-54
1000903c:	e0bff215 	stw	r2,-56(fp)
            if (n< -50000) return tiny*x; 	/*underflow*/
10009040:	e0ffff17 	ldw	r3,-4(fp)
10009044:	00bffff4 	movhi	r2,65535
10009048:	108f2c04 	addi	r2,r2,15536
1000904c:	18800e0e 	bge	r3,r2,10009088 <scalbn+0x11c>
10009050:	00b0be74 	movhi	r2,49913
10009054:	10bcd644 	addi	r2,r2,-3239
10009058:	00c06974 	movhi	r3,421
1000905c:	18db87c4 	addi	r3,r3,28191
10009060:	e1bffd17 	ldw	r6,-12(fp)
10009064:	e1fffe17 	ldw	r7,-8(fp)
10009068:	1009883a 	mov	r4,r2
1000906c:	180b883a 	mov	r5,r3
10009070:	00051580 	call	10005158 <__muldf3>
10009074:	1009883a 	mov	r4,r2
10009078:	180b883a 	mov	r5,r3
1000907c:	2005883a 	mov	r2,r4
10009080:	2807883a 	mov	r3,r5
10009084:	00009a06 	br	100092f0 <scalbn+0x384>
	    }
        if (k==0x7ff) return x+x;		/* NaN or Inf */
10009088:	e0bff217 	ldw	r2,-56(fp)
1000908c:	1081ffd8 	cmpnei	r2,r2,2047
10009090:	10000c1e 	bne	r2,zero,100090c4 <scalbn+0x158>
10009094:	e0bffd17 	ldw	r2,-12(fp)
10009098:	e0fffe17 	ldw	r3,-8(fp)
1000909c:	100d883a 	mov	r6,r2
100090a0:	180f883a 	mov	r7,r3
100090a4:	1009883a 	mov	r4,r2
100090a8:	180b883a 	mov	r5,r3
100090ac:	0003de80 	call	10003de8 <__adddf3>
100090b0:	1009883a 	mov	r4,r2
100090b4:	180b883a 	mov	r5,r3
100090b8:	2005883a 	mov	r2,r4
100090bc:	2807883a 	mov	r3,r5
100090c0:	00008b06 	br	100092f0 <scalbn+0x384>
        k = k+n; 
100090c4:	e0fff217 	ldw	r3,-56(fp)
100090c8:	e0bfff17 	ldw	r2,-4(fp)
100090cc:	1885883a 	add	r2,r3,r2
100090d0:	e0bff215 	stw	r2,-56(fp)
        if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
100090d4:	e0bff217 	ldw	r2,-56(fp)
100090d8:	1081ffd0 	cmplti	r2,r2,2047
100090dc:	1000191e 	bne	r2,zero,10009144 <scalbn+0x1d8>
100090e0:	00a20034 	movhi	r2,34816
100090e4:	109d6704 	addi	r2,r2,30108
100090e8:	00df8e34 	movhi	r3,32312
100090ec:	18f90f04 	addi	r3,r3,-7108
100090f0:	e1bffd17 	ldw	r6,-12(fp)
100090f4:	e1fffe17 	ldw	r7,-8(fp)
100090f8:	1009883a 	mov	r4,r2
100090fc:	180b883a 	mov	r5,r3
10009100:	00121740 	call	10012174 <copysign>
10009104:	1011883a 	mov	r8,r2
10009108:	1813883a 	mov	r9,r3
1000910c:	00a20034 	movhi	r2,34816
10009110:	109d6704 	addi	r2,r2,30108
10009114:	00df8e34 	movhi	r3,32312
10009118:	18f90f04 	addi	r3,r3,-7108
1000911c:	100d883a 	mov	r6,r2
10009120:	180f883a 	mov	r7,r3
10009124:	4009883a 	mov	r4,r8
10009128:	480b883a 	mov	r5,r9
1000912c:	00051580 	call	10005158 <__muldf3>
10009130:	1009883a 	mov	r4,r2
10009134:	180b883a 	mov	r5,r3
10009138:	2005883a 	mov	r2,r4
1000913c:	2807883a 	mov	r3,r5
10009140:	00006b06 	br	100092f0 <scalbn+0x384>
        if (k > 0) 				/* normal result */
10009144:	e0bff217 	ldw	r2,-56(fp)
10009148:	0080130e 	bge	zero,r2,10009198 <scalbn+0x22c>
	    {SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20)); return x;}
1000914c:	e0bffd17 	ldw	r2,-12(fp)
10009150:	e0bff915 	stw	r2,-28(fp)
10009154:	e0bffe17 	ldw	r2,-8(fp)
10009158:	e0bffa15 	stw	r2,-24(fp)
1000915c:	e0fff317 	ldw	r3,-52(fp)
10009160:	00a00434 	movhi	r2,32784
10009164:	10bfffc4 	addi	r2,r2,-1
10009168:	1884703a 	and	r2,r3,r2
1000916c:	e0fff217 	ldw	r3,-56(fp)
10009170:	1806953a 	slli	r3,r3,20
10009174:	10c4b03a 	or	r2,r2,r3
10009178:	e0bffa15 	stw	r2,-24(fp)
1000917c:	e0bff917 	ldw	r2,-28(fp)
10009180:	e0bffd15 	stw	r2,-12(fp)
10009184:	e0bffa17 	ldw	r2,-24(fp)
10009188:	e0bffe15 	stw	r2,-8(fp)
1000918c:	e0bffd17 	ldw	r2,-12(fp)
10009190:	e0fffe17 	ldw	r3,-8(fp)
10009194:	00005606 	br	100092f0 <scalbn+0x384>
        if (k <= -54) {
10009198:	e0bff217 	ldw	r2,-56(fp)
1000919c:	10bff2c8 	cmpgei	r2,r2,-53
100091a0:	1000351e 	bne	r2,zero,10009278 <scalbn+0x30c>
            if (n > 50000) 	/* in case integer overflow in n+k */
100091a4:	e0bfff17 	ldw	r2,-4(fp)
100091a8:	00f0d414 	movui	r3,50000
100091ac:	1880190e 	bge	r3,r2,10009214 <scalbn+0x2a8>
		return huge*copysign(huge,x);	/*overflow*/
100091b0:	00a20034 	movhi	r2,34816
100091b4:	109d6704 	addi	r2,r2,30108
100091b8:	00df8e34 	movhi	r3,32312
100091bc:	18f90f04 	addi	r3,r3,-7108
100091c0:	e1bffd17 	ldw	r6,-12(fp)
100091c4:	e1fffe17 	ldw	r7,-8(fp)
100091c8:	1009883a 	mov	r4,r2
100091cc:	180b883a 	mov	r5,r3
100091d0:	00121740 	call	10012174 <copysign>
100091d4:	1011883a 	mov	r8,r2
100091d8:	1813883a 	mov	r9,r3
100091dc:	00a20034 	movhi	r2,34816
100091e0:	109d6704 	addi	r2,r2,30108
100091e4:	00df8e34 	movhi	r3,32312
100091e8:	18f90f04 	addi	r3,r3,-7108
100091ec:	100d883a 	mov	r6,r2
100091f0:	180f883a 	mov	r7,r3
100091f4:	4009883a 	mov	r4,r8
100091f8:	480b883a 	mov	r5,r9
100091fc:	00051580 	call	10005158 <__muldf3>
10009200:	1009883a 	mov	r4,r2
10009204:	180b883a 	mov	r5,r3
10009208:	2005883a 	mov	r2,r4
1000920c:	2807883a 	mov	r3,r5
10009210:	00003706 	br	100092f0 <scalbn+0x384>
	    else return tiny*copysign(tiny,x); 	/*underflow*/
10009214:	00b0be74 	movhi	r2,49913
10009218:	10bcd644 	addi	r2,r2,-3239
1000921c:	00c06974 	movhi	r3,421
10009220:	18db87c4 	addi	r3,r3,28191
10009224:	e1bffd17 	ldw	r6,-12(fp)
10009228:	e1fffe17 	ldw	r7,-8(fp)
1000922c:	1009883a 	mov	r4,r2
10009230:	180b883a 	mov	r5,r3
10009234:	00121740 	call	10012174 <copysign>
10009238:	1011883a 	mov	r8,r2
1000923c:	1813883a 	mov	r9,r3
10009240:	00b0be74 	movhi	r2,49913
10009244:	10bcd644 	addi	r2,r2,-3239
10009248:	00c06974 	movhi	r3,421
1000924c:	18db87c4 	addi	r3,r3,28191
10009250:	100d883a 	mov	r6,r2
10009254:	180f883a 	mov	r7,r3
10009258:	4009883a 	mov	r4,r8
1000925c:	480b883a 	mov	r5,r9
10009260:	00051580 	call	10005158 <__muldf3>
10009264:	1009883a 	mov	r4,r2
10009268:	180b883a 	mov	r5,r3
1000926c:	2005883a 	mov	r2,r4
10009270:	2807883a 	mov	r3,r5
10009274:	00001e06 	br	100092f0 <scalbn+0x384>
      }
        k += 54;				/* subnormal result */
10009278:	e0bff217 	ldw	r2,-56(fp)
1000927c:	10800d84 	addi	r2,r2,54
10009280:	e0bff215 	stw	r2,-56(fp)
	SET_HIGH_WORD(x,(hx&0x800fffff)|(k<<20));
10009284:	e0bffd17 	ldw	r2,-12(fp)
10009288:	e0bffb15 	stw	r2,-20(fp)
1000928c:	e0bffe17 	ldw	r2,-8(fp)
10009290:	e0bffc15 	stw	r2,-16(fp)
10009294:	e0fff317 	ldw	r3,-52(fp)
10009298:	00a00434 	movhi	r2,32784
1000929c:	10bfffc4 	addi	r2,r2,-1
100092a0:	1884703a 	and	r2,r3,r2
100092a4:	e0fff217 	ldw	r3,-56(fp)
100092a8:	1806953a 	slli	r3,r3,20
100092ac:	10c4b03a 	or	r2,r2,r3
100092b0:	e0bffc15 	stw	r2,-16(fp)
100092b4:	e0bffb17 	ldw	r2,-20(fp)
100092b8:	e0bffd15 	stw	r2,-12(fp)
100092bc:	e0bffc17 	ldw	r2,-16(fp)
100092c0:	e0bffe15 	stw	r2,-8(fp)
        return x*twom54;
100092c4:	0005883a 	mov	r2,zero
100092c8:	00cf2434 	movhi	r3,15504
100092cc:	e1bffd17 	ldw	r6,-12(fp)
100092d0:	e1fffe17 	ldw	r7,-8(fp)
100092d4:	1009883a 	mov	r4,r2
100092d8:	180b883a 	mov	r5,r3
100092dc:	00051580 	call	10005158 <__muldf3>
100092e0:	1009883a 	mov	r4,r2
100092e4:	180b883a 	mov	r5,r3
100092e8:	2005883a 	mov	r2,r4
100092ec:	2807883a 	mov	r3,r5
100092f0:	1009883a 	mov	r4,r2
100092f4:	180b883a 	mov	r5,r3
}
100092f8:	2005883a 	mov	r2,r4
100092fc:	2807883a 	mov	r3,r5
10009300:	e037883a 	mov	sp,fp
10009304:	dfc00117 	ldw	ra,4(sp)
10009308:	df000017 	ldw	fp,0(sp)
1000930c:	dec00204 	addi	sp,sp,8
10009310:	f800283a 	ret

10009314 <_sbrk_r>:

void *
_DEFUN (_sbrk_r, (ptr, incr),
     struct _reent *ptr _AND
     ptrdiff_t incr)
{
10009314:	defffb04 	addi	sp,sp,-20
10009318:	dfc00415 	stw	ra,16(sp)
1000931c:	df000315 	stw	fp,12(sp)
10009320:	df000304 	addi	fp,sp,12
10009324:	e13ffe15 	stw	r4,-8(fp)
10009328:	e17fff15 	stw	r5,-4(fp)
  char *ret;
  void *_sbrk(ptrdiff_t);

  errno = 0;
1000932c:	008403b4 	movhi	r2,4110
10009330:	108b2104 	addi	r2,r2,11396
10009334:	10000015 	stw	zero,0(r2)
  if ((ret = (char *)(_sbrk (incr))) == (void *) -1 && errno != 0)
10009338:	e13fff17 	ldw	r4,-4(fp)
1000933c:	00161900 	call	10016190 <sbrk>
10009340:	e0bffd15 	stw	r2,-12(fp)
10009344:	e0bffd17 	ldw	r2,-12(fp)
10009348:	10bfffd8 	cmpnei	r2,r2,-1
1000934c:	1000091e 	bne	r2,zero,10009374 <_sbrk_r+0x60>
10009350:	008403b4 	movhi	r2,4110
10009354:	108b2104 	addi	r2,r2,11396
10009358:	10800017 	ldw	r2,0(r2)
1000935c:	10000526 	beq	r2,zero,10009374 <_sbrk_r+0x60>
    ptr->_errno = errno;
10009360:	008403b4 	movhi	r2,4110
10009364:	108b2104 	addi	r2,r2,11396
10009368:	10c00017 	ldw	r3,0(r2)
1000936c:	e0bffe17 	ldw	r2,-8(fp)
10009370:	10c00015 	stw	r3,0(r2)
  return ret;
10009374:	e0bffd17 	ldw	r2,-12(fp)
}
10009378:	e037883a 	mov	sp,fp
1000937c:	dfc00117 	ldw	ra,4(sp)
10009380:	df000017 	ldw	fp,0(sp)
10009384:	dec00204 	addi	sp,sp,8
10009388:	f800283a 	ret

1000938c <_srand48_r>:

_VOID
_DEFUN (_srand48_r, (r, seed),
       struct _reent *r _AND
       long seed)
{
1000938c:	defffd04 	addi	sp,sp,-12
10009390:	df000215 	stw	fp,8(sp)
10009394:	df000204 	addi	fp,sp,8
10009398:	e13ffe15 	stw	r4,-8(fp)
1000939c:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_RAND48(r);
  __rand48_seed[0] = _RAND48_SEED_0;
100093a0:	e0bffe17 	ldw	r2,-8(fp)
100093a4:	00ccc384 	movi	r3,13070
100093a8:	10c02b0d 	sth	r3,172(r2)
  __rand48_seed[1] = (unsigned short) seed;
100093ac:	e0bfff17 	ldw	r2,-4(fp)
100093b0:	1007883a 	mov	r3,r2
100093b4:	e0bffe17 	ldw	r2,-8(fp)
100093b8:	10c02b8d 	sth	r3,174(r2)
  __rand48_seed[2] = (unsigned short) ((unsigned long)seed >> 16);
100093bc:	e0bfff17 	ldw	r2,-4(fp)
100093c0:	1004d43a 	srli	r2,r2,16
100093c4:	1007883a 	mov	r3,r2
100093c8:	e0bffe17 	ldw	r2,-8(fp)
100093cc:	10c02c0d 	sth	r3,176(r2)
  __rand48_mult[0] = _RAND48_MULT_0;
100093d0:	e0bffe17 	ldw	r2,-8(fp)
100093d4:	00f99b44 	movi	r3,-6547
100093d8:	10c02c8d 	sth	r3,178(r2)
  __rand48_mult[1] = _RAND48_MULT_1;
100093dc:	e0bffe17 	ldw	r2,-8(fp)
100093e0:	00f7bb04 	movi	r3,-8468
100093e4:	10c02d0d 	sth	r3,180(r2)
  __rand48_mult[2] = _RAND48_MULT_2;
100093e8:	e0bffe17 	ldw	r2,-8(fp)
100093ec:	00c00144 	movi	r3,5
100093f0:	10c02d8d 	sth	r3,182(r2)
  __rand48_add = _RAND48_ADD;
100093f4:	e0bffe17 	ldw	r2,-8(fp)
100093f8:	00c002c4 	movi	r3,11
100093fc:	10c02e0d 	sth	r3,184(r2)
}
10009400:	0001883a 	nop
10009404:	e037883a 	mov	sp,fp
10009408:	df000017 	ldw	fp,0(sp)
1000940c:	dec00104 	addi	sp,sp,4
10009410:	f800283a 	ret

10009414 <srand48>:

#ifndef _REENT_ONLY
_VOID
_DEFUN (srand48, (seed),
       long seed)
{
10009414:	defffd04 	addi	sp,sp,-12
10009418:	dfc00215 	stw	ra,8(sp)
1000941c:	df000115 	stw	fp,4(sp)
10009420:	df000104 	addi	fp,sp,4
10009424:	e13fff15 	stw	r4,-4(fp)
  _srand48_r (_REENT, seed);
10009428:	008403b4 	movhi	r2,4110
1000942c:	10a4cc04 	addi	r2,r2,-27856
10009430:	10800017 	ldw	r2,0(r2)
10009434:	e17fff17 	ldw	r5,-4(fp)
10009438:	1009883a 	mov	r4,r2
1000943c:	000938c0 	call	1000938c <_srand48_r>
}
10009440:	0001883a 	nop
10009444:	e037883a 	mov	sp,fp
10009448:	dfc00117 	ldw	ra,4(sp)
1000944c:	df000017 	ldw	fp,0(sp)
10009450:	dec00204 	addi	sp,sp,8
10009454:	f800283a 	ret

10009458 <strlen>:
#endif

size_t
_DEFUN (strlen, (str),
	_CONST char *str)
{
10009458:	defffc04 	addi	sp,sp,-16
1000945c:	df000315 	stw	fp,12(sp)
10009460:	df000304 	addi	fp,sp,12
10009464:	e13fff15 	stw	r4,-4(fp)
  _CONST char *start = str;
10009468:	e0bfff17 	ldw	r2,-4(fp)
1000946c:	e0bffe15 	stw	r2,-8(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
10009470:	00000d06 	br	100094a8 <strlen+0x50>
    {
      if (!*str)
10009474:	e0bfff17 	ldw	r2,-4(fp)
10009478:	10800003 	ldbu	r2,0(r2)
1000947c:	10803fcc 	andi	r2,r2,255
10009480:	1080201c 	xori	r2,r2,128
10009484:	10bfe004 	addi	r2,r2,-128
10009488:	1000041e 	bne	r2,zero,1000949c <strlen+0x44>
	return str - start;
1000948c:	e0ffff17 	ldw	r3,-4(fp)
10009490:	e0bffe17 	ldw	r2,-8(fp)
10009494:	1885c83a 	sub	r2,r3,r2
10009498:	00002806 	br	1000953c <strlen+0xe4>
      str++;
1000949c:	e0bfff17 	ldw	r2,-4(fp)
100094a0:	10800044 	addi	r2,r2,1
100094a4:	e0bfff15 	stw	r2,-4(fp)

#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *aligned_addr;

  /* Align the pointer, so we can search a word at a time.  */
  while (UNALIGNED (str))
100094a8:	e0bfff17 	ldw	r2,-4(fp)
100094ac:	108000cc 	andi	r2,r2,3
100094b0:	103ff01e 	bne	r2,zero,10009474 <__alt_data_end+0xf8009474>
      str++;
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
100094b4:	e0bfff17 	ldw	r2,-4(fp)
100094b8:	e0bffd15 	stw	r2,-12(fp)
  while (!DETECTNULL (*aligned_addr))
100094bc:	00000306 	br	100094cc <strlen+0x74>
    aligned_addr++;
100094c0:	e0bffd17 	ldw	r2,-12(fp)
100094c4:	10800104 	addi	r2,r2,4
100094c8:	e0bffd15 	stw	r2,-12(fp)
    }

  /* If the string is word-aligned, we can check for the presence of
     a null in each word-sized block.  */
  aligned_addr = (unsigned long *)str;
  while (!DETECTNULL (*aligned_addr))
100094cc:	e0bffd17 	ldw	r2,-12(fp)
100094d0:	10c00017 	ldw	r3,0(r2)
100094d4:	00bfbff4 	movhi	r2,65279
100094d8:	10bfbfc4 	addi	r2,r2,-257
100094dc:	1887883a 	add	r3,r3,r2
100094e0:	e0bffd17 	ldw	r2,-12(fp)
100094e4:	10800017 	ldw	r2,0(r2)
100094e8:	0084303a 	nor	r2,zero,r2
100094ec:	1886703a 	and	r3,r3,r2
100094f0:	00a02074 	movhi	r2,32897
100094f4:	10a02004 	addi	r2,r2,-32640
100094f8:	1884703a 	and	r2,r3,r2
100094fc:	103ff026 	beq	r2,zero,100094c0 <__alt_data_end+0xf80094c0>
    aligned_addr++;

  /* Once a null is detected, we check each byte in that block for a
     precise position of the null.  */
  str = (char *) aligned_addr;
10009500:	e0bffd17 	ldw	r2,-12(fp)
10009504:	e0bfff15 	stw	r2,-4(fp)

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
10009508:	00000306 	br	10009518 <strlen+0xc0>
    str++;
1000950c:	e0bfff17 	ldw	r2,-4(fp)
10009510:	10800044 	addi	r2,r2,1
10009514:	e0bfff15 	stw	r2,-4(fp)
     precise position of the null.  */
  str = (char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*str)
10009518:	e0bfff17 	ldw	r2,-4(fp)
1000951c:	10800003 	ldbu	r2,0(r2)
10009520:	10803fcc 	andi	r2,r2,255
10009524:	1080201c 	xori	r2,r2,128
10009528:	10bfe004 	addi	r2,r2,-128
1000952c:	103ff71e 	bne	r2,zero,1000950c <__alt_data_end+0xf800950c>
    str++;
  return str - start;
10009530:	e0ffff17 	ldw	r3,-4(fp)
10009534:	e0bffe17 	ldw	r2,-8(fp)
10009538:	1885c83a 	sub	r2,r3,r2
}
1000953c:	e037883a 	mov	sp,fp
10009540:	df000017 	ldw	fp,0(sp)
10009544:	dec00104 	addi	sp,sp,4
10009548:	f800283a 	ret

1000954c <_strtol_r>:
_DEFUN (_strtol_r, (rptr, nptr, endptr, base),
	struct _reent *rptr _AND
	_CONST char *__restrict nptr _AND
	char **__restrict endptr _AND
	int base)
{
1000954c:	defff304 	addi	sp,sp,-52
10009550:	dfc00c15 	stw	ra,48(sp)
10009554:	df000b15 	stw	fp,44(sp)
10009558:	dd800a15 	stw	r22,40(sp)
1000955c:	dd400915 	stw	r21,36(sp)
10009560:	dd000815 	stw	r20,32(sp)
10009564:	dcc00715 	stw	r19,28(sp)
10009568:	dc800615 	stw	r18,24(sp)
1000956c:	dc400515 	stw	r17,20(sp)
10009570:	dc000415 	stw	r16,16(sp)
10009574:	df000b04 	addi	fp,sp,44
10009578:	e13ff515 	stw	r4,-44(fp)
1000957c:	e17ff615 	stw	r5,-40(fp)
10009580:	e1bff715 	stw	r6,-36(fp)
10009584:	e1fff815 	stw	r7,-32(fp)
	register const unsigned char *s = (const unsigned char *)nptr;
10009588:	e47ff617 	ldw	r17,-40(fp)
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
1000958c:	0029883a 	mov	r20,zero
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
10009590:	8805883a 	mov	r2,r17
10009594:	14400044 	addi	r17,r2,1
10009598:	10800003 	ldbu	r2,0(r2)
1000959c:	14003fcc 	andi	r16,r2,255
	} while (isspace(c));
100095a0:	008403b4 	movhi	r2,4110
100095a4:	10a4d804 	addi	r2,r2,-27808
100095a8:	10c00017 	ldw	r3,0(r2)
100095ac:	8005883a 	mov	r2,r16
100095b0:	10800044 	addi	r2,r2,1
100095b4:	1885883a 	add	r2,r3,r2
100095b8:	10800003 	ldbu	r2,0(r2)
100095bc:	10803fcc 	andi	r2,r2,255
100095c0:	1080020c 	andi	r2,r2,8
100095c4:	103ff21e 	bne	r2,zero,10009590 <__alt_data_end+0xf8009590>
	if (c == '-') {
100095c8:	80800b58 	cmpnei	r2,r16,45
100095cc:	1000061e 	bne	r2,zero,100095e8 <_strtol_r+0x9c>
		neg = 1;
100095d0:	05000044 	movi	r20,1
		c = *s++;
100095d4:	8805883a 	mov	r2,r17
100095d8:	14400044 	addi	r17,r2,1
100095dc:	10800003 	ldbu	r2,0(r2)
100095e0:	14003fcc 	andi	r16,r2,255
100095e4:	00000606 	br	10009600 <_strtol_r+0xb4>
	} else if (c == '+')
100095e8:	80800ad8 	cmpnei	r2,r16,43
100095ec:	1000041e 	bne	r2,zero,10009600 <_strtol_r+0xb4>
		c = *s++;
100095f0:	8805883a 	mov	r2,r17
100095f4:	14400044 	addi	r17,r2,1
100095f8:	10800003 	ldbu	r2,0(r2)
100095fc:	14003fcc 	andi	r16,r2,255
	if ((base == 0 || base == 16) &&
10009600:	e0bff817 	ldw	r2,-32(fp)
10009604:	10000326 	beq	r2,zero,10009614 <_strtol_r+0xc8>
10009608:	e0bff817 	ldw	r2,-32(fp)
1000960c:	10800418 	cmpnei	r2,r2,16
10009610:	1000101e 	bne	r2,zero,10009654 <_strtol_r+0x108>
10009614:	80800c18 	cmpnei	r2,r16,48
10009618:	10000e1e 	bne	r2,zero,10009654 <_strtol_r+0x108>
	    c == '0' && (*s == 'x' || *s == 'X')) {
1000961c:	88800003 	ldbu	r2,0(r17)
10009620:	10803fcc 	andi	r2,r2,255
10009624:	10801e20 	cmpeqi	r2,r2,120
10009628:	1000041e 	bne	r2,zero,1000963c <_strtol_r+0xf0>
1000962c:	88800003 	ldbu	r2,0(r17)
10009630:	10803fcc 	andi	r2,r2,255
10009634:	10801618 	cmpnei	r2,r2,88
10009638:	1000061e 	bne	r2,zero,10009654 <_strtol_r+0x108>
		c = s[1];
1000963c:	88800044 	addi	r2,r17,1
10009640:	10800003 	ldbu	r2,0(r2)
10009644:	14003fcc 	andi	r16,r2,255
		s += 2;
10009648:	8c400084 	addi	r17,r17,2
		base = 16;
1000964c:	00800404 	movi	r2,16
10009650:	e0bff815 	stw	r2,-32(fp)
	}
	if (base == 0)
10009654:	e0bff817 	ldw	r2,-32(fp)
10009658:	1000061e 	bne	r2,zero,10009674 <_strtol_r+0x128>
		base = c == '0' ? 8 : 10;
1000965c:	80800c18 	cmpnei	r2,r16,48
10009660:	1000021e 	bne	r2,zero,1000966c <_strtol_r+0x120>
10009664:	00800204 	movi	r2,8
10009668:	00000106 	br	10009670 <_strtol_r+0x124>
1000966c:	00800284 	movi	r2,10
10009670:	e0bff815 	stw	r2,-32(fp)
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
10009674:	a0000226 	beq	r20,zero,10009680 <_strtol_r+0x134>
10009678:	00a00034 	movhi	r2,32768
1000967c:	00000206 	br	10009688 <_strtol_r+0x13c>
10009680:	00a00034 	movhi	r2,32768
10009684:	10bfffc4 	addi	r2,r2,-1
10009688:	102b883a 	mov	r21,r2
	cutlim = cutoff % (unsigned long)base;
1000968c:	e0bff817 	ldw	r2,-32(fp)
10009690:	100b883a 	mov	r5,r2
10009694:	a809883a 	mov	r4,r21
10009698:	00026f40 	call	100026f4 <__umodsi3>
1000969c:	102d883a 	mov	r22,r2
	cutoff /= (unsigned long)base;
100096a0:	e0bff817 	ldw	r2,-32(fp)
100096a4:	100b883a 	mov	r5,r2
100096a8:	a809883a 	mov	r4,r21
100096ac:	00026900 	call	10002690 <__udivsi3>
100096b0:	102b883a 	mov	r21,r2
	for (acc = 0, any = 0;; c = *s++) {
100096b4:	0025883a 	mov	r18,zero
100096b8:	0027883a 	mov	r19,zero
		if (isdigit(c))
100096bc:	008403b4 	movhi	r2,4110
100096c0:	10a4d804 	addi	r2,r2,-27808
100096c4:	10c00017 	ldw	r3,0(r2)
100096c8:	8005883a 	mov	r2,r16
100096cc:	10800044 	addi	r2,r2,1
100096d0:	1885883a 	add	r2,r3,r2
100096d4:	10800003 	ldbu	r2,0(r2)
100096d8:	10803fcc 	andi	r2,r2,255
100096dc:	1080010c 	andi	r2,r2,4
100096e0:	10000226 	beq	r2,zero,100096ec <_strtol_r+0x1a0>
			c -= '0';
100096e4:	843ff404 	addi	r16,r16,-48
100096e8:	00001906 	br	10009750 <_strtol_r+0x204>
		else if (isalpha(c))
100096ec:	008403b4 	movhi	r2,4110
100096f0:	10a4d804 	addi	r2,r2,-27808
100096f4:	10c00017 	ldw	r3,0(r2)
100096f8:	8005883a 	mov	r2,r16
100096fc:	10800044 	addi	r2,r2,1
10009700:	1885883a 	add	r2,r3,r2
10009704:	10800003 	ldbu	r2,0(r2)
10009708:	10803fcc 	andi	r2,r2,255
1000970c:	108000cc 	andi	r2,r2,3
10009710:	10002426 	beq	r2,zero,100097a4 <_strtol_r+0x258>
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
10009714:	008403b4 	movhi	r2,4110
10009718:	10a4d804 	addi	r2,r2,-27808
1000971c:	10c00017 	ldw	r3,0(r2)
10009720:	8005883a 	mov	r2,r16
10009724:	10800044 	addi	r2,r2,1
10009728:	1885883a 	add	r2,r3,r2
1000972c:	10800003 	ldbu	r2,0(r2)
10009730:	10803fcc 	andi	r2,r2,255
10009734:	108000cc 	andi	r2,r2,3
10009738:	10800058 	cmpnei	r2,r2,1
1000973c:	1000021e 	bne	r2,zero,10009748 <_strtol_r+0x1fc>
10009740:	00800dc4 	movi	r2,55
10009744:	00000106 	br	1000974c <_strtol_r+0x200>
10009748:	008015c4 	movi	r2,87
1000974c:	80a1c83a 	sub	r16,r16,r2
		else
			break;
		if (c >= base)
10009750:	e0bff817 	ldw	r2,-32(fp)
10009754:	8080150e 	bge	r16,r2,100097ac <_strtol_r+0x260>
			break;
               if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
10009758:	98000316 	blt	r19,zero,10009768 <_strtol_r+0x21c>
1000975c:	ac800236 	bltu	r21,r18,10009768 <_strtol_r+0x21c>
10009760:	9540031e 	bne	r18,r21,10009770 <_strtol_r+0x224>
10009764:	b400020e 	bge	r22,r16,10009770 <_strtol_r+0x224>
			any = -1;
10009768:	04ffffc4 	movi	r19,-1
1000976c:	00000806 	br	10009790 <_strtol_r+0x244>
		else {
			any = 1;
10009770:	04c00044 	movi	r19,1
			acc *= base;
10009774:	e0bff817 	ldw	r2,-32(fp)
10009778:	100b883a 	mov	r5,r2
1000977c:	9009883a 	mov	r4,r18
10009780:	00065d80 	call	100065d8 <__mulsi3>
10009784:	1025883a 	mov	r18,r2
			acc += c;
10009788:	8005883a 	mov	r2,r16
1000978c:	90a5883a 	add	r18,r18,r2
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
10009790:	8805883a 	mov	r2,r17
10009794:	14400044 	addi	r17,r2,1
10009798:	10800003 	ldbu	r2,0(r2)
1000979c:	14003fcc 	andi	r16,r2,255
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
100097a0:	003fc606 	br	100096bc <__alt_data_end+0xf80096bc>
		if (isdigit(c))
			c -= '0';
		else if (isalpha(c))
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
100097a4:	0001883a 	nop
100097a8:	00000106 	br	100097b0 <_strtol_r+0x264>
		if (c >= base)
			break;
100097ac:	0001883a 	nop
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
100097b0:	98000a0e 	bge	r19,zero,100097dc <_strtol_r+0x290>
		acc = neg ? LONG_MIN : LONG_MAX;
100097b4:	a0000226 	beq	r20,zero,100097c0 <_strtol_r+0x274>
100097b8:	00a00034 	movhi	r2,32768
100097bc:	00000206 	br	100097c8 <_strtol_r+0x27c>
100097c0:	00a00034 	movhi	r2,32768
100097c4:	10bfffc4 	addi	r2,r2,-1
100097c8:	1025883a 	mov	r18,r2
		rptr->_errno = ERANGE;
100097cc:	e0bff517 	ldw	r2,-44(fp)
100097d0:	00c00884 	movi	r3,34
100097d4:	10c00015 	stw	r3,0(r2)
100097d8:	00000206 	br	100097e4 <_strtol_r+0x298>
	} else if (neg)
100097dc:	a0000126 	beq	r20,zero,100097e4 <_strtol_r+0x298>
		acc = -acc;
100097e0:	04a5c83a 	sub	r18,zero,r18
	if (endptr != 0)
100097e4:	e0bff717 	ldw	r2,-36(fp)
100097e8:	10000626 	beq	r2,zero,10009804 <_strtol_r+0x2b8>
		*endptr = (char *) (any ? (char *)s - 1 : nptr);
100097ec:	98000226 	beq	r19,zero,100097f8 <_strtol_r+0x2ac>
100097f0:	88bfffc4 	addi	r2,r17,-1
100097f4:	00000106 	br	100097fc <_strtol_r+0x2b0>
100097f8:	e0bff617 	ldw	r2,-40(fp)
100097fc:	e0fff717 	ldw	r3,-36(fp)
10009800:	18800015 	stw	r2,0(r3)
	return (acc);
10009804:	9005883a 	mov	r2,r18
}
10009808:	e6fff904 	addi	sp,fp,-28
1000980c:	dfc00817 	ldw	ra,32(sp)
10009810:	df000717 	ldw	fp,28(sp)
10009814:	dd800617 	ldw	r22,24(sp)
10009818:	dd400517 	ldw	r21,20(sp)
1000981c:	dd000417 	ldw	r20,16(sp)
10009820:	dcc00317 	ldw	r19,12(sp)
10009824:	dc800217 	ldw	r18,8(sp)
10009828:	dc400117 	ldw	r17,4(sp)
1000982c:	dc000017 	ldw	r16,0(sp)
10009830:	dec00904 	addi	sp,sp,36
10009834:	f800283a 	ret

10009838 <strtol>:
long
_DEFUN (strtol, (s, ptr, base),
	_CONST char *__restrict s _AND
	char **__restrict ptr _AND
	int base)
{
10009838:	defffb04 	addi	sp,sp,-20
1000983c:	dfc00415 	stw	ra,16(sp)
10009840:	df000315 	stw	fp,12(sp)
10009844:	df000304 	addi	fp,sp,12
10009848:	e13ffd15 	stw	r4,-12(fp)
1000984c:	e17ffe15 	stw	r5,-8(fp)
10009850:	e1bfff15 	stw	r6,-4(fp)
	return _strtol_r (_REENT, s, ptr, base);
10009854:	008403b4 	movhi	r2,4110
10009858:	10a4cc04 	addi	r2,r2,-27856
1000985c:	10800017 	ldw	r2,0(r2)
10009860:	e1ffff17 	ldw	r7,-4(fp)
10009864:	e1bffe17 	ldw	r6,-8(fp)
10009868:	e17ffd17 	ldw	r5,-12(fp)
1000986c:	1009883a 	mov	r4,r2
10009870:	000954c0 	call	1000954c <_strtol_r>
}
10009874:	e037883a 	mov	sp,fp
10009878:	dfc00117 	ldw	ra,4(sp)
1000987c:	df000017 	ldw	fp,0(sp)
10009880:	dec00204 	addi	sp,sp,8
10009884:	f800283a 	ret

10009888 <time>:
#include <sys/time.h>

time_t
_DEFUN (time, (t),
	time_t * t)
{
10009888:	defffb04 	addi	sp,sp,-20
1000988c:	dfc00415 	stw	ra,16(sp)
10009890:	df000315 	stw	fp,12(sp)
10009894:	df000304 	addi	fp,sp,12
10009898:	e13fff15 	stw	r4,-4(fp)
  struct timeval now;

  if (_gettimeofday_r (_REENT, &now, NULL) >= 0)
1000989c:	008403b4 	movhi	r2,4110
100098a0:	10a4cc04 	addi	r2,r2,-27856
100098a4:	10800017 	ldw	r2,0(r2)
100098a8:	000d883a 	mov	r6,zero
100098ac:	e17ffd04 	addi	r5,fp,-12
100098b0:	1009883a 	mov	r4,r2
100098b4:	000f8580 	call	1000f858 <_gettimeofday_r>
100098b8:	10000716 	blt	r2,zero,100098d8 <time+0x50>
    {
      if (t)
100098bc:	e0bfff17 	ldw	r2,-4(fp)
100098c0:	10000326 	beq	r2,zero,100098d0 <time+0x48>
	*t = now.tv_sec;
100098c4:	e0fffd17 	ldw	r3,-12(fp)
100098c8:	e0bfff17 	ldw	r2,-4(fp)
100098cc:	10c00015 	stw	r3,0(r2)
      return now.tv_sec;
100098d0:	e0bffd17 	ldw	r2,-12(fp)
100098d4:	00000106 	br	100098dc <time+0x54>
    }
  return -1;
100098d8:	00bfffc4 	movi	r2,-1
}
100098dc:	e037883a 	mov	sp,fp
100098e0:	dfc00117 	ldw	ra,4(sp)
100098e4:	df000017 	ldw	fp,0(sp)
100098e8:	dec00204 	addi	sp,sp,8
100098ec:	f800283a 	ret

100098f0 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
100098f0:	defedf04 	addi	sp,sp,-1156
100098f4:	dfc12015 	stw	ra,1152(sp)
100098f8:	df011f15 	stw	fp,1148(sp)
100098fc:	dc011e15 	stw	r16,1144(sp)
10009900:	df011f04 	addi	fp,sp,1148
10009904:	e13ffc15 	stw	r4,-16(fp)
10009908:	2821883a 	mov	r16,r5
1000990c:	e1bffd15 	stw	r6,-12(fp)
10009910:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
10009914:	80c0030b 	ldhu	r3,12(r16)
10009918:	00bfff44 	movi	r2,-3
1000991c:	1884703a 	and	r2,r3,r2
10009920:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
10009924:	80801917 	ldw	r2,100(r16)
10009928:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
1000992c:	8080038b 	ldhu	r2,14(r16)
10009930:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
10009934:	80800717 	ldw	r2,28(r16)
10009938:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
1000993c:	80800917 	ldw	r2,36(r16)
10009940:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
10009944:	e0befc04 	addi	r2,fp,-1040
10009948:	e0bee215 	stw	r2,-1144(fp)
1000994c:	e0bee217 	ldw	r2,-1144(fp)
10009950:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
10009954:	00810004 	movi	r2,1024
10009958:	e0bee415 	stw	r2,-1136(fp)
1000995c:	e0bee417 	ldw	r2,-1136(fp)
10009960:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
10009964:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
10009968:	e0bee204 	addi	r2,fp,-1144
1000996c:	e1fffe17 	ldw	r7,-8(fp)
10009970:	e1bffd17 	ldw	r6,-12(fp)
10009974:	100b883a 	mov	r5,r2
10009978:	e13ffc17 	ldw	r4,-16(fp)
1000997c:	0009a380 	call	10009a38 <___vfprintf_internal_r>
10009980:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
10009984:	e0bee117 	ldw	r2,-1148(fp)
10009988:	10000716 	blt	r2,zero,100099a8 <__sbprintf+0xb8>
1000998c:	e0bee204 	addi	r2,fp,-1144
10009990:	100b883a 	mov	r5,r2
10009994:	e13ffc17 	ldw	r4,-16(fp)
10009998:	000e27c0 	call	1000e27c <_fflush_r>
1000999c:	10000226 	beq	r2,zero,100099a8 <__sbprintf+0xb8>
		ret = EOF;
100099a0:	00bfffc4 	movi	r2,-1
100099a4:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
100099a8:	e0bee50b 	ldhu	r2,-1132(fp)
100099ac:	10bfffcc 	andi	r2,r2,65535
100099b0:	1080100c 	andi	r2,r2,64
100099b4:	10000326 	beq	r2,zero,100099c4 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
100099b8:	8080030b 	ldhu	r2,12(r16)
100099bc:	10801014 	ori	r2,r2,64
100099c0:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
100099c4:	e0bee117 	ldw	r2,-1148(fp)
}
100099c8:	e6ffff04 	addi	sp,fp,-4
100099cc:	dfc00217 	ldw	ra,8(sp)
100099d0:	df000117 	ldw	fp,4(sp)
100099d4:	dc000017 	ldw	r16,0(sp)
100099d8:	dec00304 	addi	sp,sp,12
100099dc:	f800283a 	ret

100099e0 <__vfprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
100099e0:	defffa04 	addi	sp,sp,-24
100099e4:	dfc00515 	stw	ra,20(sp)
100099e8:	df000415 	stw	fp,16(sp)
100099ec:	df000404 	addi	fp,sp,16
100099f0:	e13ffd15 	stw	r4,-12(fp)
100099f4:	e17ffe15 	stw	r5,-8(fp)
100099f8:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
100099fc:	008403b4 	movhi	r2,4110
10009a00:	10a4cc04 	addi	r2,r2,-27856
10009a04:	10800017 	ldw	r2,0(r2)
10009a08:	e1ffff17 	ldw	r7,-4(fp)
10009a0c:	e1bffe17 	ldw	r6,-8(fp)
10009a10:	e17ffd17 	ldw	r5,-12(fp)
10009a14:	1009883a 	mov	r4,r2
10009a18:	0009a380 	call	10009a38 <___vfprintf_internal_r>
10009a1c:	e0bffc15 	stw	r2,-16(fp)
  return result;
10009a20:	e0bffc17 	ldw	r2,-16(fp)
}
10009a24:	e037883a 	mov	sp,fp
10009a28:	dfc00117 	ldw	ra,4(sp)
10009a2c:	df000017 	ldw	fp,0(sp)
10009a30:	dec00204 	addi	sp,sp,8
10009a34:	f800283a 	ret

10009a38 <___vfprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
10009a38:	deffa404 	addi	sp,sp,-368
10009a3c:	dfc05b15 	stw	ra,364(sp)
10009a40:	df005a15 	stw	fp,360(sp)
10009a44:	ddc05915 	stw	r23,356(sp)
10009a48:	dd805815 	stw	r22,352(sp)
10009a4c:	dd405715 	stw	r21,348(sp)
10009a50:	dd005615 	stw	r20,344(sp)
10009a54:	dcc05515 	stw	r19,340(sp)
10009a58:	dc805415 	stw	r18,336(sp)
10009a5c:	dc405315 	stw	r17,332(sp)
10009a60:	dc005215 	stw	r16,328(sp)
10009a64:	df005a04 	addi	fp,sp,360
10009a68:	e13fe615 	stw	r4,-104(fp)
10009a6c:	e17fe715 	stw	r5,-100(fp)
10009a70:	e1bfe815 	stw	r6,-96(fp)
10009a74:	e1ffe915 	stw	r7,-92(fp)
	char *thousands_sep = NULL;
	size_t thsnd_len = 0;
	const char *grouping = NULL;
#endif
#ifdef FLOATING_POINT
	char *decimal_point = _localeconv_r (data)->decimal_point;
10009a78:	e13fe617 	ldw	r4,-104(fp)
10009a7c:	000f9e40 	call	1000f9e4 <_localeconv_r>
10009a80:	10800017 	ldw	r2,0(r2)
10009a84:	e0bfbb15 	stw	r2,-276(fp)
	size_t decp_len = strlen (decimal_point);
10009a88:	e13fbb17 	ldw	r4,-276(fp)
10009a8c:	00094580 	call	10009458 <strlen>
10009a90:	e0bfbc15 	stw	r2,-272(fp)
	char softsign;		/* temporary negative sign for floats */
	union { int i; _PRINTF_FLOAT_TYPE fp; } _double_ = {0};
10009a94:	e03fc215 	stw	zero,-248(fp)
10009a98:	e03fc315 	stw	zero,-244(fp)
# define _fpvalue (_double_.fp)
	int expt;		/* integer value of exponent */
	int expsize = 0;	/* character count for expstr */
10009a9c:	e03faf15 	stw	zero,-324(fp)
	char expstr[MAXEXPLEN];	/* buffer for exponent string */
	int lead;		/* sig figs before decimal or group sep */
#endif /* FLOATING_POINT */
#if defined (FLOATING_POINT) || defined (_WANT_IO_C99_FORMATS)
	int ndig = 0;		/* actual number of digits returned by cvt */
10009aa0:	e03fc715 	stw	zero,-228(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
10009aa4:	e03fb715 	stw	zero,-292(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
10009aa8:	e03fb815 	stw	zero,-288(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
10009aac:	e0bfe617 	ldw	r2,-104(fp)
10009ab0:	e0bfbd15 	stw	r2,-268(fp)
10009ab4:	e0bfbd17 	ldw	r2,-268(fp)
10009ab8:	10000526 	beq	r2,zero,10009ad0 <___vfprintf_internal_r+0x98>
10009abc:	e0bfbd17 	ldw	r2,-268(fp)
10009ac0:	10800e17 	ldw	r2,56(r2)
10009ac4:	1000021e 	bne	r2,zero,10009ad0 <___vfprintf_internal_r+0x98>
10009ac8:	e13fbd17 	ldw	r4,-268(fp)
10009acc:	000e7440 	call	1000e744 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
10009ad0:	e0bfe717 	ldw	r2,-100(fp)
10009ad4:	1080030b 	ldhu	r2,12(r2)
10009ad8:	10bfffcc 	andi	r2,r2,65535
10009adc:	1088000c 	andi	r2,r2,8192
10009ae0:	10000c1e 	bne	r2,zero,10009b14 <___vfprintf_internal_r+0xdc>
10009ae4:	e0bfe717 	ldw	r2,-100(fp)
10009ae8:	1080030b 	ldhu	r2,12(r2)
10009aec:	10880014 	ori	r2,r2,8192
10009af0:	1007883a 	mov	r3,r2
10009af4:	e0bfe717 	ldw	r2,-100(fp)
10009af8:	10c0030d 	sth	r3,12(r2)
10009afc:	e0bfe717 	ldw	r2,-100(fp)
10009b00:	10c01917 	ldw	r3,100(r2)
10009b04:	00b7ffc4 	movi	r2,-8193
10009b08:	1886703a 	and	r3,r3,r2
10009b0c:	e0bfe717 	ldw	r2,-100(fp)
10009b10:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
10009b14:	e0bfe717 	ldw	r2,-100(fp)
10009b18:	1080030b 	ldhu	r2,12(r2)
10009b1c:	10bfffcc 	andi	r2,r2,65535
10009b20:	1080020c 	andi	r2,r2,8
10009b24:	10000326 	beq	r2,zero,10009b34 <___vfprintf_internal_r+0xfc>
10009b28:	e0bfe717 	ldw	r2,-100(fp)
10009b2c:	10800417 	ldw	r2,16(r2)
10009b30:	1000061e 	bne	r2,zero,10009b4c <___vfprintf_internal_r+0x114>
10009b34:	e17fe717 	ldw	r5,-100(fp)
10009b38:	e13fe617 	ldw	r4,-104(fp)
10009b3c:	000be6c0 	call	1000be6c <__swsetup_r>
10009b40:	10000226 	beq	r2,zero,10009b4c <___vfprintf_internal_r+0x114>
		_newlib_flockfile_exit (fp);
		return (EOF);
10009b44:	00bfffc4 	movi	r2,-1
10009b48:	0007e806 	br	1000baec <___vfprintf_internal_r+0x20b4>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10009b4c:	e0bfe717 	ldw	r2,-100(fp)
10009b50:	1080030b 	ldhu	r2,12(r2)
10009b54:	10bfffcc 	andi	r2,r2,65535
10009b58:	1080068c 	andi	r2,r2,26
10009b5c:	10800298 	cmpnei	r2,r2,10
10009b60:	10000c1e 	bne	r2,zero,10009b94 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
10009b64:	e0bfe717 	ldw	r2,-100(fp)
10009b68:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10009b6c:	10bfffcc 	andi	r2,r2,65535
10009b70:	10a0001c 	xori	r2,r2,32768
10009b74:	10a00004 	addi	r2,r2,-32768
10009b78:	10000616 	blt	r2,zero,10009b94 <___vfprintf_internal_r+0x15c>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
10009b7c:	e1ffe917 	ldw	r7,-92(fp)
10009b80:	e1bfe817 	ldw	r6,-96(fp)
10009b84:	e17fe717 	ldw	r5,-100(fp)
10009b88:	e13fe617 	ldw	r4,-104(fp)
10009b8c:	00098f00 	call	100098f0 <__sbprintf>
10009b90:	0007d606 	br	1000baec <___vfprintf_internal_r+0x20b4>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
10009b94:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
10009b98:	e47fcb04 	addi	r17,fp,-212
10009b9c:	e47fc815 	stw	r17,-224(fp)
	uio.uio_resid = 0;
10009ba0:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
10009ba4:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
10009ba8:	e03fac15 	stw	zero,-336(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
10009bac:	a825883a 	mov	r18,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10009bb0:	00000106 	br	10009bb8 <___vfprintf_internal_r+0x180>
                    fmt += 1;
10009bb4:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10009bb8:	a8800003 	ldbu	r2,0(r21)
10009bbc:	10803fcc 	andi	r2,r2,255
10009bc0:	1080201c 	xori	r2,r2,128
10009bc4:	10bfe004 	addi	r2,r2,-128
10009bc8:	10000626 	beq	r2,zero,10009be4 <___vfprintf_internal_r+0x1ac>
10009bcc:	a8800003 	ldbu	r2,0(r21)
10009bd0:	10803fcc 	andi	r2,r2,255
10009bd4:	1080201c 	xori	r2,r2,128
10009bd8:	10bfe004 	addi	r2,r2,-128
10009bdc:	10800958 	cmpnei	r2,r2,37
10009be0:	103ff41e 	bne	r2,zero,10009bb4 <__alt_data_end+0xf8009bb4>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
10009be4:	a807883a 	mov	r3,r21
10009be8:	9005883a 	mov	r2,r18
10009bec:	18a1c83a 	sub	r16,r3,r2
10009bf0:	80001826 	beq	r16,zero,10009c54 <___vfprintf_internal_r+0x21c>
			PRINT (cp, m);
10009bf4:	8c800015 	stw	r18,0(r17)
10009bf8:	8005883a 	mov	r2,r16
10009bfc:	88800115 	stw	r2,4(r17)
10009c00:	e0bfca17 	ldw	r2,-216(fp)
10009c04:	8007883a 	mov	r3,r16
10009c08:	10c5883a 	add	r2,r2,r3
10009c0c:	e0bfca15 	stw	r2,-216(fp)
10009c10:	8c400204 	addi	r17,r17,8
10009c14:	e0bfc917 	ldw	r2,-220(fp)
10009c18:	10800044 	addi	r2,r2,1
10009c1c:	e0bfc915 	stw	r2,-220(fp)
10009c20:	e0bfc917 	ldw	r2,-220(fp)
10009c24:	10800210 	cmplti	r2,r2,8
10009c28:	1000071e 	bne	r2,zero,10009c48 <___vfprintf_internal_r+0x210>
10009c2c:	e0bfc804 	addi	r2,fp,-224
10009c30:	100d883a 	mov	r6,r2
10009c34:	e17fe717 	ldw	r5,-100(fp)
10009c38:	e13fe617 	ldw	r4,-104(fp)
10009c3c:	00127380 	call	10012738 <__sprint_r>
10009c40:	1007531e 	bne	r2,zero,1000b990 <___vfprintf_internal_r+0x1f58>
10009c44:	e47fcb04 	addi	r17,fp,-212
			ret += m;
10009c48:	e0bfac17 	ldw	r2,-336(fp)
10009c4c:	1405883a 	add	r2,r2,r16
10009c50:	e0bfac15 	stw	r2,-336(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
10009c54:	a8800003 	ldbu	r2,0(r21)
10009c58:	10803fcc 	andi	r2,r2,255
10009c5c:	1080201c 	xori	r2,r2,128
10009c60:	10bfe004 	addi	r2,r2,-128
10009c64:	10073c26 	beq	r2,zero,1000b958 <___vfprintf_internal_r+0x1f20>
                    goto done;
#endif
		fmt_anchor = fmt;
10009c68:	e57fbe15 	stw	r21,-264(fp)
		fmt++;		/* skip over '%' */
10009c6c:	ad400044 	addi	r21,r21,1

		flags = 0;
10009c70:	0027883a 	mov	r19,zero
		dprec = 0;
10009c74:	e03fb415 	stw	zero,-304(fp)
		width = 0;
10009c78:	e03fad15 	stw	zero,-332(fp)
		prec = -1;
10009c7c:	00bfffc4 	movi	r2,-1
10009c80:	e0bfae15 	stw	r2,-328(fp)
		sign = '\0';
10009c84:	e03fc105 	stb	zero,-252(fp)
#ifdef FLOATING_POINT
		lead = 0;
10009c88:	e03fb015 	stw	zero,-320(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
10009c8c:	a805883a 	mov	r2,r21
10009c90:	15400044 	addi	r21,r2,1
10009c94:	10800003 	ldbu	r2,0(r2)
10009c98:	15003fcc 	andi	r20,r2,255
10009c9c:	a500201c 	xori	r20,r20,128
10009ca0:	a53fe004 	addi	r20,r20,-128
reswitch:	switch (ch) {
10009ca4:	a0bff804 	addi	r2,r20,-32
10009ca8:	10c01668 	cmpgeui	r3,r2,89
10009cac:	18034f1e 	bne	r3,zero,1000a9ec <___vfprintf_internal_r+0xfb4>
10009cb0:	100690ba 	slli	r3,r2,2
10009cb4:	00840074 	movhi	r2,4097
10009cb8:	10a73204 	addi	r2,r2,-25400
10009cbc:	1885883a 	add	r2,r3,r2
10009cc0:	10800017 	ldw	r2,0(r2)
10009cc4:	1000683a 	jmp	r2
10009cc8:	10009e2c 	andhi	zero,r2,632
10009ccc:	1000a9ec 	andhi	zero,r2,679
10009cd0:	1000a9ec 	andhi	zero,r2,679
10009cd4:	10009e4c 	andi	zero,r2,633
10009cd8:	1000a9ec 	andhi	zero,r2,679
10009cdc:	1000a9ec 	andhi	zero,r2,679
10009ce0:	1000a9ec 	andhi	zero,r2,679
10009ce4:	1000a9ec 	andhi	zero,r2,679
10009ce8:	1000a9ec 	andhi	zero,r2,679
10009cec:	1000a9ec 	andhi	zero,r2,679
10009cf0:	10009e54 	ori	zero,r2,633
10009cf4:	10009e88 	cmpgei	zero,r2,634
10009cf8:	1000a9ec 	andhi	zero,r2,679
10009cfc:	10009e80 	call	110009e8 <__alt_heap_start+0xf1db94>
10009d00:	10009e94 	ori	zero,r2,634
10009d04:	1000a9ec 	andhi	zero,r2,679
10009d08:	10009f34 	orhi	zero,r2,636
10009d0c:	10009f3c 	xorhi	zero,r2,636
10009d10:	10009f3c 	xorhi	zero,r2,636
10009d14:	10009f3c 	xorhi	zero,r2,636
10009d18:	10009f3c 	xorhi	zero,r2,636
10009d1c:	10009f3c 	xorhi	zero,r2,636
10009d20:	10009f3c 	xorhi	zero,r2,636
10009d24:	10009f3c 	xorhi	zero,r2,636
10009d28:	10009f3c 	xorhi	zero,r2,636
10009d2c:	10009f3c 	xorhi	zero,r2,636
10009d30:	1000a9ec 	andhi	zero,r2,679
10009d34:	1000a9ec 	andhi	zero,r2,679
10009d38:	1000a9ec 	andhi	zero,r2,679
10009d3c:	1000a9ec 	andhi	zero,r2,679
10009d40:	1000a9ec 	andhi	zero,r2,679
10009d44:	1000a9ec 	andhi	zero,r2,679
10009d48:	1000a9ec 	andhi	zero,r2,679
10009d4c:	1000a9ec 	andhi	zero,r2,679
10009d50:	1000a9ec 	andhi	zero,r2,679
10009d54:	1000a9ec 	andhi	zero,r2,679
10009d58:	10009ff0 	cmpltui	zero,r2,639
10009d5c:	1000a0f0 	cmpltui	zero,r2,643
10009d60:	1000a9ec 	andhi	zero,r2,679
10009d64:	1000a0f0 	cmpltui	zero,r2,643
10009d68:	1000a9ec 	andhi	zero,r2,679
10009d6c:	1000a9ec 	andhi	zero,r2,679
10009d70:	1000a9ec 	andhi	zero,r2,679
10009d74:	1000a9ec 	andhi	zero,r2,679
10009d78:	10009f84 	addi	zero,r2,638
10009d7c:	1000a9ec 	andhi	zero,r2,679
10009d80:	1000a9ec 	andhi	zero,r2,679
10009d84:	1000a48c 	andi	zero,r2,658
10009d88:	1000a9ec 	andhi	zero,r2,679
10009d8c:	1000a9ec 	andhi	zero,r2,679
10009d90:	1000a9ec 	andhi	zero,r2,679
10009d94:	1000a9ec 	andhi	zero,r2,679
10009d98:	1000a9ec 	andhi	zero,r2,679
10009d9c:	1000a608 	cmpgei	zero,r2,664
10009da0:	1000a9ec 	andhi	zero,r2,679
10009da4:	1000a9ec 	andhi	zero,r2,679
10009da8:	1000a6c8 	cmpgei	zero,r2,667
10009dac:	1000a9ec 	andhi	zero,r2,679
10009db0:	1000a9ec 	andhi	zero,r2,679
10009db4:	1000a9ec 	andhi	zero,r2,679
10009db8:	1000a9ec 	andhi	zero,r2,679
10009dbc:	1000a9ec 	andhi	zero,r2,679
10009dc0:	1000a9ec 	andhi	zero,r2,679
10009dc4:	1000a9ec 	andhi	zero,r2,679
10009dc8:	1000a9ec 	andhi	zero,r2,679
10009dcc:	1000a9ec 	andhi	zero,r2,679
10009dd0:	1000a9ec 	andhi	zero,r2,679
10009dd4:	10009fc8 	cmpgei	zero,r2,639
10009dd8:	10009ff4 	orhi	zero,r2,639
10009ddc:	1000a0f0 	cmpltui	zero,r2,643
10009de0:	1000a0f0 	cmpltui	zero,r2,643
10009de4:	1000a0f0 	cmpltui	zero,r2,643
10009de8:	10009f8c 	andi	zero,r2,638
10009dec:	10009ff4 	orhi	zero,r2,639
10009df0:	1000a9ec 	andhi	zero,r2,679
10009df4:	1000a9ec 	andhi	zero,r2,679
10009df8:	10009f94 	ori	zero,r2,638
10009dfc:	1000a9ec 	andhi	zero,r2,679
10009e00:	1000a3ec 	andhi	zero,r2,655
10009e04:	1000a490 	cmplti	zero,r2,658
10009e08:	1000a530 	cmpltui	zero,r2,660
10009e0c:	10009fc0 	call	110009fc <__alt_heap_start+0xf1dba8>
10009e10:	1000a9ec 	andhi	zero,r2,679
10009e14:	1000a578 	rdprs	zero,r2,661
10009e18:	1000a9ec 	andhi	zero,r2,679
10009e1c:	1000a60c 	andi	zero,r2,664
10009e20:	1000a9ec 	andhi	zero,r2,679
10009e24:	1000a9ec 	andhi	zero,r2,679
10009e28:	1000a6d8 	cmpnei	zero,r2,667
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
10009e2c:	e0bfc103 	ldbu	r2,-252(fp)
10009e30:	10803fcc 	andi	r2,r2,255
10009e34:	1080201c 	xori	r2,r2,128
10009e38:	10bfe004 	addi	r2,r2,-128
10009e3c:	103f931e 	bne	r2,zero,10009c8c <__alt_data_end+0xf8009c8c>
				sign = ' ';
10009e40:	00800804 	movi	r2,32
10009e44:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
10009e48:	003f9006 	br	10009c8c <__alt_data_end+0xf8009c8c>
		case '#':
			flags |= ALT;
10009e4c:	9cc00054 	ori	r19,r19,1
			goto rflag;
10009e50:	003f8e06 	br	10009c8c <__alt_data_end+0xf8009c8c>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
10009e54:	e0bfe917 	ldw	r2,-92(fp)
10009e58:	10c00104 	addi	r3,r2,4
10009e5c:	e0ffe915 	stw	r3,-92(fp)
10009e60:	10800017 	ldw	r2,0(r2)
10009e64:	e0bfad15 	stw	r2,-332(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
10009e68:	e0bfad17 	ldw	r2,-332(fp)
10009e6c:	10000116 	blt	r2,zero,10009e74 <___vfprintf_internal_r+0x43c>
				goto rflag;
10009e70:	003f8606 	br	10009c8c <__alt_data_end+0xf8009c8c>
			width = -width;
10009e74:	e0bfad17 	ldw	r2,-332(fp)
10009e78:	0085c83a 	sub	r2,zero,r2
10009e7c:	e0bfad15 	stw	r2,-332(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
10009e80:	9cc00114 	ori	r19,r19,4
			goto rflag;
10009e84:	003f8106 	br	10009c8c <__alt_data_end+0xf8009c8c>
		case '+':
			sign = '+';
10009e88:	00800ac4 	movi	r2,43
10009e8c:	e0bfc105 	stb	r2,-252(fp)
			goto rflag;
10009e90:	003f7e06 	br	10009c8c <__alt_data_end+0xf8009c8c>
		case '.':
			if ((ch = *fmt++) == '*') {
10009e94:	a805883a 	mov	r2,r21
10009e98:	15400044 	addi	r21,r2,1
10009e9c:	10800003 	ldbu	r2,0(r2)
10009ea0:	15003fcc 	andi	r20,r2,255
10009ea4:	a500201c 	xori	r20,r20,128
10009ea8:	a53fe004 	addi	r20,r20,-128
10009eac:	a0800a98 	cmpnei	r2,r20,42
10009eb0:	10000a1e 	bne	r2,zero,10009edc <___vfprintf_internal_r+0x4a4>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
10009eb4:	e0bfe917 	ldw	r2,-92(fp)
10009eb8:	10c00104 	addi	r3,r2,4
10009ebc:	e0ffe915 	stw	r3,-92(fp)
10009ec0:	10800017 	ldw	r2,0(r2)
10009ec4:	e0bfae15 	stw	r2,-328(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
10009ec8:	e0bfae17 	ldw	r2,-328(fp)
10009ecc:	103f6f0e 	bge	r2,zero,10009c8c <__alt_data_end+0xf8009c8c>
					prec = -1;
10009ed0:	00bfffc4 	movi	r2,-1
10009ed4:	e0bfae15 	stw	r2,-328(fp)
				goto rflag;
10009ed8:	003f6c06 	br	10009c8c <__alt_data_end+0xf8009c8c>
			}
			n = 0;
10009edc:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
10009ee0:	00000c06 	br	10009f14 <___vfprintf_internal_r+0x4dc>
				n = 10 * n + to_digit (ch);
10009ee4:	01400284 	movi	r5,10
10009ee8:	8009883a 	mov	r4,r16
10009eec:	00065d80 	call	100065d8 <__mulsi3>
10009ef0:	1007883a 	mov	r3,r2
10009ef4:	a0bff404 	addi	r2,r20,-48
10009ef8:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10009efc:	a805883a 	mov	r2,r21
10009f00:	15400044 	addi	r21,r2,1
10009f04:	10800003 	ldbu	r2,0(r2)
10009f08:	15003fcc 	andi	r20,r2,255
10009f0c:	a500201c 	xori	r20,r20,128
10009f10:	a53fe004 	addi	r20,r20,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
10009f14:	a0bff404 	addi	r2,r20,-48
10009f18:	108002b0 	cmpltui	r2,r2,10
10009f1c:	103ff11e 	bne	r2,zero,10009ee4 <__alt_data_end+0xf8009ee4>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
10009f20:	8005883a 	mov	r2,r16
10009f24:	1000010e 	bge	r2,zero,10009f2c <___vfprintf_internal_r+0x4f4>
10009f28:	00bfffc4 	movi	r2,-1
10009f2c:	e0bfae15 	stw	r2,-328(fp)
			goto reswitch;
10009f30:	003f5c06 	br	10009ca4 <__alt_data_end+0xf8009ca4>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
10009f34:	9cc02014 	ori	r19,r19,128
			goto rflag;
10009f38:	003f5406 	br	10009c8c <__alt_data_end+0xf8009c8c>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
10009f3c:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
10009f40:	01400284 	movi	r5,10
10009f44:	8009883a 	mov	r4,r16
10009f48:	00065d80 	call	100065d8 <__mulsi3>
10009f4c:	1007883a 	mov	r3,r2
10009f50:	a0bff404 	addi	r2,r20,-48
10009f54:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10009f58:	a805883a 	mov	r2,r21
10009f5c:	15400044 	addi	r21,r2,1
10009f60:	10800003 	ldbu	r2,0(r2)
10009f64:	15003fcc 	andi	r20,r2,255
10009f68:	a500201c 	xori	r20,r20,128
10009f6c:	a53fe004 	addi	r20,r20,-128
			} while (is_digit (ch));
10009f70:	a0bff404 	addi	r2,r20,-48
10009f74:	108002b0 	cmpltui	r2,r2,10
10009f78:	103ff11e 	bne	r2,zero,10009f40 <__alt_data_end+0xf8009f40>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
10009f7c:	e43fad15 	stw	r16,-332(fp)
			goto reswitch;
10009f80:	003f4806 	br	10009ca4 <__alt_data_end+0xf8009ca4>
#ifdef FLOATING_POINT
		case 'L':
			flags |= LONGDBL;
10009f84:	9cc00214 	ori	r19,r19,8
			goto rflag;
10009f88:	003f4006 	br	10009c8c <__alt_data_end+0xf8009c8c>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
10009f8c:	9cc01014 	ori	r19,r19,64
			goto rflag;
10009f90:	003f3e06 	br	10009c8c <__alt_data_end+0xf8009c8c>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
10009f94:	a8800003 	ldbu	r2,0(r21)
10009f98:	10803fcc 	andi	r2,r2,255
10009f9c:	1080201c 	xori	r2,r2,128
10009fa0:	10bfe004 	addi	r2,r2,-128
10009fa4:	10801b18 	cmpnei	r2,r2,108
10009fa8:	1000031e 	bne	r2,zero,10009fb8 <___vfprintf_internal_r+0x580>
				fmt++;
10009fac:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
10009fb0:	9cc00814 	ori	r19,r19,32
10009fb4:	003f3506 	br	10009c8c <__alt_data_end+0xf8009c8c>
			} else
#endif
				flags |= LONGINT;
10009fb8:	9cc00414 	ori	r19,r19,16
			goto rflag;
10009fbc:	003f3306 	br	10009c8c <__alt_data_end+0xf8009c8c>
		case 'q': /* extension */
			flags |= QUADINT;
10009fc0:	9cc00814 	ori	r19,r19,32
			goto rflag;
10009fc4:	003f3106 	br	10009c8c <__alt_data_end+0xf8009c8c>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
10009fc8:	e4bfdb04 	addi	r18,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
10009fcc:	e0bfe917 	ldw	r2,-92(fp)
10009fd0:	10c00104 	addi	r3,r2,4
10009fd4:	e0ffe915 	stw	r3,-92(fp)
10009fd8:	10800017 	ldw	r2,0(r2)
10009fdc:	90800005 	stb	r2,0(r18)
				size = 1;
10009fe0:	00800044 	movi	r2,1
10009fe4:	e0bfb615 	stw	r2,-296(fp)
			}
			sign = '\0';
10009fe8:	e03fc105 	stb	zero,-252(fp)
			break;
10009fec:	00028806 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
		case 'D':  /* extension */
			flags |= LONGINT;
10009ff0:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
10009ff4:	9880080c 	andi	r2,r19,32
10009ff8:	10000826 	beq	r2,zero,1000a01c <___vfprintf_internal_r+0x5e4>
10009ffc:	e13fe917 	ldw	r4,-92(fp)
1000a000:	20800204 	addi	r2,r4,8
1000a004:	e0bfe915 	stw	r2,-92(fp)
1000a008:	20800017 	ldw	r2,0(r4)
1000a00c:	20c00117 	ldw	r3,4(r4)
1000a010:	e0bfea15 	stw	r2,-88(fp)
1000a014:	e0ffeb15 	stw	r3,-84(fp)
1000a018:	00001e06 	br	1000a094 <___vfprintf_internal_r+0x65c>
1000a01c:	9880040c 	andi	r2,r19,16
1000a020:	10000826 	beq	r2,zero,1000a044 <___vfprintf_internal_r+0x60c>
1000a024:	e0bfe917 	ldw	r2,-92(fp)
1000a028:	10c00104 	addi	r3,r2,4
1000a02c:	e0ffe915 	stw	r3,-92(fp)
1000a030:	10800017 	ldw	r2,0(r2)
1000a034:	e0bfea15 	stw	r2,-88(fp)
1000a038:	1005d7fa 	srai	r2,r2,31
1000a03c:	e0bfeb15 	stw	r2,-84(fp)
1000a040:	00001406 	br	1000a094 <___vfprintf_internal_r+0x65c>
1000a044:	9880100c 	andi	r2,r19,64
1000a048:	10000b26 	beq	r2,zero,1000a078 <___vfprintf_internal_r+0x640>
1000a04c:	e0bfe917 	ldw	r2,-92(fp)
1000a050:	10c00104 	addi	r3,r2,4
1000a054:	e0ffe915 	stw	r3,-92(fp)
1000a058:	10800017 	ldw	r2,0(r2)
1000a05c:	10bfffcc 	andi	r2,r2,65535
1000a060:	10a0001c 	xori	r2,r2,32768
1000a064:	10a00004 	addi	r2,r2,-32768
1000a068:	e0bfea15 	stw	r2,-88(fp)
1000a06c:	1005d7fa 	srai	r2,r2,31
1000a070:	e0bfeb15 	stw	r2,-84(fp)
1000a074:	00000706 	br	1000a094 <___vfprintf_internal_r+0x65c>
1000a078:	e0bfe917 	ldw	r2,-92(fp)
1000a07c:	10c00104 	addi	r3,r2,4
1000a080:	e0ffe915 	stw	r3,-92(fp)
1000a084:	10800017 	ldw	r2,0(r2)
1000a088:	e0bfea15 	stw	r2,-88(fp)
1000a08c:	1005d7fa 	srai	r2,r2,31
1000a090:	e0bfeb15 	stw	r2,-84(fp)
1000a094:	e0bfea17 	ldw	r2,-88(fp)
1000a098:	e0bfb115 	stw	r2,-316(fp)
1000a09c:	e0ffeb17 	ldw	r3,-84(fp)
1000a0a0:	e0ffb215 	stw	r3,-312(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
1000a0a4:	e0bfb117 	ldw	r2,-316(fp)
1000a0a8:	e0ffb217 	ldw	r3,-312(fp)
1000a0ac:	18000d0e 	bge	r3,zero,1000a0e4 <___vfprintf_internal_r+0x6ac>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
1000a0b0:	000f883a 	mov	r7,zero
1000a0b4:	0011883a 	mov	r8,zero
1000a0b8:	e13fb117 	ldw	r4,-316(fp)
1000a0bc:	e17fb217 	ldw	r5,-312(fp)
1000a0c0:	3905c83a 	sub	r2,r7,r4
1000a0c4:	388d803a 	cmpltu	r6,r7,r2
1000a0c8:	4147c83a 	sub	r3,r8,r5
1000a0cc:	1989c83a 	sub	r4,r3,r6
1000a0d0:	2007883a 	mov	r3,r4
1000a0d4:	e0bfb115 	stw	r2,-316(fp)
1000a0d8:	e0ffb215 	stw	r3,-312(fp)
				sign = '-';
1000a0dc:	00800b44 	movi	r2,45
1000a0e0:	e0bfc105 	stb	r2,-252(fp)
			}
			base = DEC;
1000a0e4:	00800044 	movi	r2,1
1000a0e8:	e0bfb305 	stb	r2,-308(fp)
			goto number;
1000a0ec:	0001b706 	br	1000a7cc <___vfprintf_internal_r+0xd94>
		case 'E':
		case 'f':
		case 'g':
		case 'G':
# ifdef _NO_LONGDBL
			if (flags & LONGDBL) {
1000a0f0:	9880020c 	andi	r2,r19,8
1000a0f4:	10000826 	beq	r2,zero,1000a118 <___vfprintf_internal_r+0x6e0>
				_fpvalue = (double) GET_ARG (N, ap, _LONG_DOUBLE);
1000a0f8:	e13fe917 	ldw	r4,-92(fp)
1000a0fc:	20800204 	addi	r2,r4,8
1000a100:	e0bfe915 	stw	r2,-92(fp)
1000a104:	20800017 	ldw	r2,0(r4)
1000a108:	20c00117 	ldw	r3,4(r4)
1000a10c:	e0bfc215 	stw	r2,-248(fp)
1000a110:	e0ffc315 	stw	r3,-244(fp)
1000a114:	00000706 	br	1000a134 <___vfprintf_internal_r+0x6fc>
			} else {
				_fpvalue = GET_ARG (N, ap, double);
1000a118:	e13fe917 	ldw	r4,-92(fp)
1000a11c:	20800204 	addi	r2,r4,8
1000a120:	e0bfe915 	stw	r2,-92(fp)
1000a124:	20800017 	ldw	r2,0(r4)
1000a128:	20c00117 	ldw	r3,4(r4)
1000a12c:	e0bfc215 	stw	r2,-248(fp)
1000a130:	e0ffc315 	stw	r3,-244(fp)

			   If the output is infinite or NaN, leading
			   zeros are not permitted.  Otherwise, scanf
			   could not read what printf wrote.
			 */
			if (isinf (_fpvalue)) {
1000a134:	e0bfc217 	ldw	r2,-248(fp)
1000a138:	e0ffc317 	ldw	r3,-244(fp)
1000a13c:	1009883a 	mov	r4,r2
1000a140:	180b883a 	mov	r5,r3
1000a144:	00122800 	call	10012280 <__fpclassifyd>
1000a148:	10800058 	cmpnei	r2,r2,1
1000a14c:	1000161e 	bne	r2,zero,1000a1a8 <___vfprintf_internal_r+0x770>
				if (_fpvalue < 0)
1000a150:	e0bfc217 	ldw	r2,-248(fp)
1000a154:	e0ffc317 	ldw	r3,-244(fp)
1000a158:	000d883a 	mov	r6,zero
1000a15c:	000f883a 	mov	r7,zero
1000a160:	1009883a 	mov	r4,r2
1000a164:	180b883a 	mov	r5,r3
1000a168:	00050640 	call	10005064 <__ledf2>
1000a16c:	1000020e 	bge	r2,zero,1000a178 <___vfprintf_internal_r+0x740>
					sign = '-';
1000a170:	00800b44 	movi	r2,45
1000a174:	e0bfc105 	stb	r2,-252(fp)
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
1000a178:	a0801208 	cmpgei	r2,r20,72
1000a17c:	1000031e 	bne	r2,zero,1000a18c <___vfprintf_internal_r+0x754>
					cp = "INF";
1000a180:	04840374 	movhi	r18,4109
1000a184:	94bd9704 	addi	r18,r18,-2468
1000a188:	00000206 	br	1000a194 <___vfprintf_internal_r+0x75c>
				else
					cp = "inf";
1000a18c:	04840374 	movhi	r18,4109
1000a190:	94bd9804 	addi	r18,r18,-2464
				size = 3;
1000a194:	008000c4 	movi	r2,3
1000a198:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
1000a19c:	00bfdfc4 	movi	r2,-129
1000a1a0:	98a6703a 	and	r19,r19,r2
				break;
1000a1a4:	00021a06 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
			}
			if (isnan (_fpvalue)) {
1000a1a8:	e0bfc217 	ldw	r2,-248(fp)
1000a1ac:	e0ffc317 	ldw	r3,-244(fp)
1000a1b0:	1009883a 	mov	r4,r2
1000a1b4:	180b883a 	mov	r5,r3
1000a1b8:	00122800 	call	10012280 <__fpclassifyd>
1000a1bc:	10000c1e 	bne	r2,zero,1000a1f0 <___vfprintf_internal_r+0x7b8>
				if (ch <= 'G') /* 'A', 'E', 'F', or 'G' */
1000a1c0:	a0801208 	cmpgei	r2,r20,72
1000a1c4:	1000031e 	bne	r2,zero,1000a1d4 <___vfprintf_internal_r+0x79c>
					cp = "NAN";
1000a1c8:	04840374 	movhi	r18,4109
1000a1cc:	94bd9904 	addi	r18,r18,-2460
1000a1d0:	00000206 	br	1000a1dc <___vfprintf_internal_r+0x7a4>
				else
					cp = "nan";
1000a1d4:	04840374 	movhi	r18,4109
1000a1d8:	94bd9a04 	addi	r18,r18,-2456
				size = 3;
1000a1dc:	008000c4 	movi	r2,3
1000a1e0:	e0bfb615 	stw	r2,-296(fp)
				flags &= ~ZEROPAD;
1000a1e4:	00bfdfc4 	movi	r2,-129
1000a1e8:	98a6703a 	and	r19,r19,r2
				break;
1000a1ec:	00020806 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
				  }
				else
				  cp = buf;
			} else
# endif /* _WANT_IO_C99_FORMATS */
			if (prec == -1) {
1000a1f0:	e0bfae17 	ldw	r2,-328(fp)
1000a1f4:	10bfffd8 	cmpnei	r2,r2,-1
1000a1f8:	1000031e 	bne	r2,zero,1000a208 <___vfprintf_internal_r+0x7d0>
				prec = DEFPREC;
1000a1fc:	00800184 	movi	r2,6
1000a200:	e0bfae15 	stw	r2,-328(fp)
1000a204:	00000806 	br	1000a228 <___vfprintf_internal_r+0x7f0>
			} else if ((ch == 'g' || ch == 'G') && prec == 0) {
1000a208:	a08019e0 	cmpeqi	r2,r20,103
1000a20c:	1000021e 	bne	r2,zero,1000a218 <___vfprintf_internal_r+0x7e0>
1000a210:	a08011d8 	cmpnei	r2,r20,71
1000a214:	1000041e 	bne	r2,zero,1000a228 <___vfprintf_internal_r+0x7f0>
1000a218:	e0bfae17 	ldw	r2,-328(fp)
1000a21c:	1000021e 	bne	r2,zero,1000a228 <___vfprintf_internal_r+0x7f0>
				prec = 1;
1000a220:	00800044 	movi	r2,1
1000a224:	e0bfae15 	stw	r2,-328(fp)
			}

			flags |= FPT;
1000a228:	9cc04014 	ori	r19,r19,256

			cp = cvt (data, _fpvalue, prec, flags, &softsign,
1000a22c:	e0bfc217 	ldw	r2,-248(fp)
1000a230:	e0ffc317 	ldw	r3,-244(fp)
1000a234:	dc800515 	stw	r18,20(sp)
1000a238:	e13fc704 	addi	r4,fp,-228
1000a23c:	d9000415 	stw	r4,16(sp)
1000a240:	dd000315 	stw	r20,12(sp)
1000a244:	e13fc404 	addi	r4,fp,-240
1000a248:	d9000215 	stw	r4,8(sp)
1000a24c:	e13fc144 	addi	r4,fp,-251
1000a250:	d9000115 	stw	r4,4(sp)
1000a254:	dcc00015 	stw	r19,0(sp)
1000a258:	e1ffae17 	ldw	r7,-328(fp)
1000a25c:	100b883a 	mov	r5,r2
1000a260:	180d883a 	mov	r6,r3
1000a264:	e13fe617 	ldw	r4,-104(fp)
1000a268:	000bb200 	call	1000bb20 <cvt>
1000a26c:	1025883a 	mov	r18,r2
				  &expt, ch, &ndig, cp);

			if (ch == 'g' || ch == 'G') {
1000a270:	a08019e0 	cmpeqi	r2,r20,103
1000a274:	1000021e 	bne	r2,zero,1000a280 <___vfprintf_internal_r+0x848>
1000a278:	a08011d8 	cmpnei	r2,r20,71
1000a27c:	1000091e 	bne	r2,zero,1000a2a4 <___vfprintf_internal_r+0x86c>
				if (expt <= -4 || expt > prec)
1000a280:	e0bfc417 	ldw	r2,-240(fp)
1000a284:	10bfff50 	cmplti	r2,r2,-3
1000a288:	1000031e 	bne	r2,zero,1000a298 <___vfprintf_internal_r+0x860>
1000a28c:	e0bfc417 	ldw	r2,-240(fp)
1000a290:	e0ffae17 	ldw	r3,-328(fp)
1000a294:	1880020e 	bge	r3,r2,1000a2a0 <___vfprintf_internal_r+0x868>
					ch -= 2; /* 'e' or 'E' */
1000a298:	a53fff84 	addi	r20,r20,-2
1000a29c:	00000106 	br	1000a2a4 <___vfprintf_internal_r+0x86c>
				else
					ch = 'g';
1000a2a0:	050019c4 	movi	r20,103
			}
# ifdef _WANT_IO_C99_FORMATS
			else if (ch == 'F')
				ch = 'f';
# endif
			if (ch <= 'e') {	/* 'a', 'A', 'e', or 'E' fmt */
1000a2a4:	a0801988 	cmpgei	r2,r20,102
1000a2a8:	1000171e 	bne	r2,zero,1000a308 <___vfprintf_internal_r+0x8d0>
				--expt;
1000a2ac:	e0bfc417 	ldw	r2,-240(fp)
1000a2b0:	10bfffc4 	addi	r2,r2,-1
1000a2b4:	e0bfc415 	stw	r2,-240(fp)
				expsize = exponent (expstr, expt, ch);
1000a2b8:	e0bfc417 	ldw	r2,-240(fp)
1000a2bc:	e0ffc504 	addi	r3,fp,-236
1000a2c0:	a00d883a 	mov	r6,r20
1000a2c4:	100b883a 	mov	r5,r2
1000a2c8:	1809883a 	mov	r4,r3
1000a2cc:	000bd2c0 	call	1000bd2c <exponent>
1000a2d0:	e0bfaf15 	stw	r2,-324(fp)
				size = expsize + ndig;
1000a2d4:	e0bfc717 	ldw	r2,-228(fp)
1000a2d8:	e0ffaf17 	ldw	r3,-324(fp)
1000a2dc:	1885883a 	add	r2,r3,r2
1000a2e0:	e0bfb615 	stw	r2,-296(fp)
				if (ndig > 1 || flags & ALT)
1000a2e4:	e0bfc717 	ldw	r2,-228(fp)
1000a2e8:	10800088 	cmpgei	r2,r2,2
1000a2ec:	1000021e 	bne	r2,zero,1000a2f8 <___vfprintf_internal_r+0x8c0>
1000a2f0:	9880004c 	andi	r2,r19,1
1000a2f4:	10003526 	beq	r2,zero,1000a3cc <___vfprintf_internal_r+0x994>
					++size;
1000a2f8:	e0bfb617 	ldw	r2,-296(fp)
1000a2fc:	10800044 	addi	r2,r2,1
1000a300:	e0bfb615 	stw	r2,-296(fp)
1000a304:	00003106 	br	1000a3cc <___vfprintf_internal_r+0x994>
# ifdef _WANT_IO_C99_FORMATS
				flags &= ~GROUPING;
# endif
			} else {
				if (ch == 'f') {		/* f fmt */
1000a308:	a0801998 	cmpnei	r2,r20,102
1000a30c:	1000181e 	bne	r2,zero,1000a370 <___vfprintf_internal_r+0x938>
					if (expt > 0) {
1000a310:	e0bfc417 	ldw	r2,-240(fp)
1000a314:	00800c0e 	bge	zero,r2,1000a348 <___vfprintf_internal_r+0x910>
						size = expt;
1000a318:	e0bfc417 	ldw	r2,-240(fp)
1000a31c:	e0bfb615 	stw	r2,-296(fp)
						if (prec || flags & ALT)
1000a320:	e0bfae17 	ldw	r2,-328(fp)
1000a324:	1000021e 	bne	r2,zero,1000a330 <___vfprintf_internal_r+0x8f8>
1000a328:	9880004c 	andi	r2,r19,1
1000a32c:	10002526 	beq	r2,zero,1000a3c4 <___vfprintf_internal_r+0x98c>
							size += prec + 1;
1000a330:	e0bfae17 	ldw	r2,-328(fp)
1000a334:	10800044 	addi	r2,r2,1
1000a338:	e0ffb617 	ldw	r3,-296(fp)
1000a33c:	1885883a 	add	r2,r3,r2
1000a340:	e0bfb615 	stw	r2,-296(fp)
1000a344:	00001f06 	br	1000a3c4 <___vfprintf_internal_r+0x98c>
					} else	/* "0.X" */
						size = (prec || flags & ALT)
							  ? prec + 2
							  : 1;
1000a348:	e0bfae17 	ldw	r2,-328(fp)
1000a34c:	1000021e 	bne	r2,zero,1000a358 <___vfprintf_internal_r+0x920>
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
1000a350:	9880004c 	andi	r2,r19,1
1000a354:	10000326 	beq	r2,zero,1000a364 <___vfprintf_internal_r+0x92c>
							  ? prec + 2
							  : 1;
1000a358:	e0bfae17 	ldw	r2,-328(fp)
1000a35c:	10800084 	addi	r2,r2,2
1000a360:	00000106 	br	1000a368 <___vfprintf_internal_r+0x930>
1000a364:	00800044 	movi	r2,1
					if (expt > 0) {
						size = expt;
						if (prec || flags & ALT)
							size += prec + 1;
					} else	/* "0.X" */
						size = (prec || flags & ALT)
1000a368:	e0bfb615 	stw	r2,-296(fp)
1000a36c:	00001506 	br	1000a3c4 <___vfprintf_internal_r+0x98c>
							  ? prec + 2
							  : 1;
				} else if (expt >= ndig) { /* fixed g fmt */
1000a370:	e0ffc417 	ldw	r3,-240(fp)
1000a374:	e0bfc717 	ldw	r2,-228(fp)
1000a378:	18800816 	blt	r3,r2,1000a39c <___vfprintf_internal_r+0x964>
					size = expt;
1000a37c:	e0bfc417 	ldw	r2,-240(fp)
1000a380:	e0bfb615 	stw	r2,-296(fp)
					if (flags & ALT)
1000a384:	9880004c 	andi	r2,r19,1
1000a388:	10000e26 	beq	r2,zero,1000a3c4 <___vfprintf_internal_r+0x98c>
						++size;
1000a38c:	e0bfb617 	ldw	r2,-296(fp)
1000a390:	10800044 	addi	r2,r2,1
1000a394:	e0bfb615 	stw	r2,-296(fp)
1000a398:	00000a06 	br	1000a3c4 <___vfprintf_internal_r+0x98c>
				} else
					size = ndig + (expt > 0 ?
1000a39c:	e0bfc417 	ldw	r2,-240(fp)
						1 : 2 - expt);
1000a3a0:	00800416 	blt	zero,r2,1000a3b4 <___vfprintf_internal_r+0x97c>
1000a3a4:	e0bfc417 	ldw	r2,-240(fp)
1000a3a8:	00c00084 	movi	r3,2
1000a3ac:	1885c83a 	sub	r2,r3,r2
1000a3b0:	00000106 	br	1000a3b8 <___vfprintf_internal_r+0x980>
1000a3b4:	00800044 	movi	r2,1
				} else if (expt >= ndig) { /* fixed g fmt */
					size = expt;
					if (flags & ALT)
						++size;
				} else
					size = ndig + (expt > 0 ?
1000a3b8:	e0ffc717 	ldw	r3,-228(fp)
1000a3bc:	10c5883a 	add	r2,r2,r3
1000a3c0:	e0bfb615 	stw	r2,-296(fp)
							nrepeats++;
					}
					size += (nseps + nrepeats) * thsnd_len;
				} else
# endif
					lead = expt;
1000a3c4:	e0bfc417 	ldw	r2,-240(fp)
1000a3c8:	e0bfb015 	stw	r2,-320(fp)
			}

			if (softsign)
1000a3cc:	e0bfc143 	ldbu	r2,-251(fp)
1000a3d0:	10803fcc 	andi	r2,r2,255
1000a3d4:	1080201c 	xori	r2,r2,128
1000a3d8:	10bfe004 	addi	r2,r2,-128
1000a3dc:	10018b26 	beq	r2,zero,1000aa0c <___vfprintf_internal_r+0xfd4>
				sign = '-';
1000a3e0:	00800b44 	movi	r2,45
1000a3e4:	e0bfc105 	stb	r2,-252(fp)
			break;
1000a3e8:	00018806 	br	1000aa0c <___vfprintf_internal_r+0xfd4>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
1000a3ec:	9880080c 	andi	r2,r19,32
1000a3f0:	10000d26 	beq	r2,zero,1000a428 <___vfprintf_internal_r+0x9f0>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
1000a3f4:	e0bfe917 	ldw	r2,-92(fp)
1000a3f8:	10c00104 	addi	r3,r2,4
1000a3fc:	e0ffe915 	stw	r3,-92(fp)
1000a400:	10800017 	ldw	r2,0(r2)
1000a404:	e0ffac17 	ldw	r3,-336(fp)
1000a408:	e0fff015 	stw	r3,-64(fp)
1000a40c:	1807d7fa 	srai	r3,r3,31
1000a410:	e0fff115 	stw	r3,-60(fp)
1000a414:	e0fff017 	ldw	r3,-64(fp)
1000a418:	10c00015 	stw	r3,0(r2)
1000a41c:	e0fff117 	ldw	r3,-60(fp)
1000a420:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
1000a424:	00054b06 	br	1000b954 <___vfprintf_internal_r+0x1f1c>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
1000a428:	9880040c 	andi	r2,r19,16
1000a42c:	10000726 	beq	r2,zero,1000a44c <___vfprintf_internal_r+0xa14>
				*GET_ARG (N, ap, long_ptr_t) = ret;
1000a430:	e0bfe917 	ldw	r2,-92(fp)
1000a434:	10c00104 	addi	r3,r2,4
1000a438:	e0ffe915 	stw	r3,-92(fp)
1000a43c:	10800017 	ldw	r2,0(r2)
1000a440:	e0ffac17 	ldw	r3,-336(fp)
1000a444:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
1000a448:	00054206 	br	1000b954 <___vfprintf_internal_r+0x1f1c>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
1000a44c:	9880100c 	andi	r2,r19,64
1000a450:	10000726 	beq	r2,zero,1000a470 <___vfprintf_internal_r+0xa38>
				*GET_ARG (N, ap, short_ptr_t) = ret;
1000a454:	e0bfe917 	ldw	r2,-92(fp)
1000a458:	10c00104 	addi	r3,r2,4
1000a45c:	e0ffe915 	stw	r3,-92(fp)
1000a460:	10800017 	ldw	r2,0(r2)
1000a464:	e0ffac17 	ldw	r3,-336(fp)
1000a468:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
1000a46c:	00053906 	br	1000b954 <___vfprintf_internal_r+0x1f1c>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
1000a470:	e0bfe917 	ldw	r2,-92(fp)
1000a474:	10c00104 	addi	r3,r2,4
1000a478:	e0ffe915 	stw	r3,-92(fp)
1000a47c:	10800017 	ldw	r2,0(r2)
1000a480:	e0ffac17 	ldw	r3,-336(fp)
1000a484:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
1000a488:	00053206 	br	1000b954 <___vfprintf_internal_r+0x1f1c>
		case 'O': /* extension */
			flags |= LONGINT;
1000a48c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
1000a490:	9880080c 	andi	r2,r19,32
1000a494:	10000626 	beq	r2,zero,1000a4b0 <___vfprintf_internal_r+0xa78>
1000a498:	e0bfe917 	ldw	r2,-92(fp)
1000a49c:	10c00204 	addi	r3,r2,8
1000a4a0:	e0ffe915 	stw	r3,-92(fp)
1000a4a4:	15800017 	ldw	r22,0(r2)
1000a4a8:	15c00117 	ldw	r23,4(r2)
1000a4ac:	00001c06 	br	1000a520 <___vfprintf_internal_r+0xae8>
1000a4b0:	9880040c 	andi	r2,r19,16
1000a4b4:	10000726 	beq	r2,zero,1000a4d4 <___vfprintf_internal_r+0xa9c>
1000a4b8:	e0bfe917 	ldw	r2,-92(fp)
1000a4bc:	10c00104 	addi	r3,r2,4
1000a4c0:	e0ffe915 	stw	r3,-92(fp)
1000a4c4:	10800017 	ldw	r2,0(r2)
1000a4c8:	102d883a 	mov	r22,r2
1000a4cc:	002f883a 	mov	r23,zero
1000a4d0:	00001306 	br	1000a520 <___vfprintf_internal_r+0xae8>
1000a4d4:	9880100c 	andi	r2,r19,64
1000a4d8:	10000b26 	beq	r2,zero,1000a508 <___vfprintf_internal_r+0xad0>
1000a4dc:	e0bfe917 	ldw	r2,-92(fp)
1000a4e0:	10c00104 	addi	r3,r2,4
1000a4e4:	e0ffe915 	stw	r3,-92(fp)
1000a4e8:	10800017 	ldw	r2,0(r2)
1000a4ec:	e0bff215 	stw	r2,-56(fp)
1000a4f0:	e03ff315 	stw	zero,-52(fp)
1000a4f4:	e0bff217 	ldw	r2,-56(fp)
1000a4f8:	15bfffcc 	andi	r22,r2,65535
1000a4fc:	e0fff317 	ldw	r3,-52(fp)
1000a500:	182e703a 	and	r23,r3,zero
1000a504:	00000606 	br	1000a520 <___vfprintf_internal_r+0xae8>
1000a508:	e0bfe917 	ldw	r2,-92(fp)
1000a50c:	10c00104 	addi	r3,r2,4
1000a510:	e0ffe915 	stw	r3,-92(fp)
1000a514:	10800017 	ldw	r2,0(r2)
1000a518:	102d883a 	mov	r22,r2
1000a51c:	002f883a 	mov	r23,zero
1000a520:	e5bfb115 	stw	r22,-316(fp)
1000a524:	e5ffb215 	stw	r23,-312(fp)
			base = OCT;
1000a528:	e03fb305 	stb	zero,-308(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
1000a52c:	0000a606 	br	1000a7c8 <___vfprintf_internal_r+0xd90>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
1000a530:	e0bfe917 	ldw	r2,-92(fp)
1000a534:	10c00104 	addi	r3,r2,4
1000a538:	e0ffe915 	stw	r3,-92(fp)
1000a53c:	10800017 	ldw	r2,0(r2)
1000a540:	e0bfb115 	stw	r2,-316(fp)
1000a544:	e03fb215 	stw	zero,-312(fp)
			base = HEX;
1000a548:	00800084 	movi	r2,2
1000a54c:	e0bfb305 	stb	r2,-308(fp)
			xdigs = "0123456789abcdef";
1000a550:	00840374 	movhi	r2,4109
1000a554:	10bd9b04 	addi	r2,r2,-2452
1000a558:	e0bfb715 	stw	r2,-292(fp)
			flags |= HEXPREFIX;
1000a55c:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
1000a560:	00800c04 	movi	r2,48
1000a564:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
1000a568:	05001e04 	movi	r20,120
1000a56c:	00801e04 	movi	r2,120
1000a570:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
1000a574:	00009406 	br	1000a7c8 <___vfprintf_internal_r+0xd90>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
1000a578:	e0bfe917 	ldw	r2,-92(fp)
1000a57c:	10c00104 	addi	r3,r2,4
1000a580:	e0ffe915 	stw	r3,-92(fp)
1000a584:	14800017 	ldw	r18,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
1000a588:	e03fc105 	stb	zero,-252(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
1000a58c:	9000081e 	bne	r18,zero,1000a5b0 <___vfprintf_internal_r+0xb78>
				cp = "(null)";
1000a590:	04840374 	movhi	r18,4109
1000a594:	94bda004 	addi	r18,r18,-2432
				size = ((unsigned) prec > 6U) ? 6 : prec;
1000a598:	e0bfae17 	ldw	r2,-328(fp)
1000a59c:	10c001f0 	cmpltui	r3,r2,7
1000a5a0:	1800011e 	bne	r3,zero,1000a5a8 <___vfprintf_internal_r+0xb70>
1000a5a4:	00800184 	movi	r2,6
1000a5a8:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
1000a5ac:	00011806 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
1000a5b0:	e0bfae17 	ldw	r2,-328(fp)
1000a5b4:	10001016 	blt	r2,zero,1000a5f8 <___vfprintf_internal_r+0xbc0>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
1000a5b8:	e0bfae17 	ldw	r2,-328(fp)
1000a5bc:	100d883a 	mov	r6,r2
1000a5c0:	000b883a 	mov	r5,zero
1000a5c4:	9009883a 	mov	r4,r18
1000a5c8:	000fcb80 	call	1000fcb8 <memchr>
1000a5cc:	e0bfbf15 	stw	r2,-260(fp)

				if (p != NULL)
1000a5d0:	e0bfbf17 	ldw	r2,-260(fp)
1000a5d4:	10000526 	beq	r2,zero,1000a5ec <___vfprintf_internal_r+0xbb4>
					size = p - cp;
1000a5d8:	e0bfbf17 	ldw	r2,-260(fp)
1000a5dc:	9007883a 	mov	r3,r18
1000a5e0:	10c5c83a 	sub	r2,r2,r3
1000a5e4:	e0bfb615 	stw	r2,-296(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
1000a5e8:	00010906 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
1000a5ec:	e0bfae17 	ldw	r2,-328(fp)
1000a5f0:	e0bfb615 	stw	r2,-296(fp)
			} else
				size = strlen (cp);

			break;
1000a5f4:	00010606 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
1000a5f8:	9009883a 	mov	r4,r18
1000a5fc:	00094580 	call	10009458 <strlen>
1000a600:	e0bfb615 	stw	r2,-296(fp)

			break;
1000a604:	00010206 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
		case 'U': /* extension */
			flags |= LONGINT;
1000a608:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
1000a60c:	9880080c 	andi	r2,r19,32
1000a610:	10000826 	beq	r2,zero,1000a634 <___vfprintf_internal_r+0xbfc>
1000a614:	e0bfe917 	ldw	r2,-92(fp)
1000a618:	10c00204 	addi	r3,r2,8
1000a61c:	e0ffe915 	stw	r3,-92(fp)
1000a620:	10c00017 	ldw	r3,0(r2)
1000a624:	e0ffec15 	stw	r3,-80(fp)
1000a628:	10c00117 	ldw	r3,4(r2)
1000a62c:	e0ffed15 	stw	r3,-76(fp)
1000a630:	00001e06 	br	1000a6ac <___vfprintf_internal_r+0xc74>
1000a634:	9880040c 	andi	r2,r19,16
1000a638:	10000726 	beq	r2,zero,1000a658 <___vfprintf_internal_r+0xc20>
1000a63c:	e0bfe917 	ldw	r2,-92(fp)
1000a640:	10c00104 	addi	r3,r2,4
1000a644:	e0ffe915 	stw	r3,-92(fp)
1000a648:	10800017 	ldw	r2,0(r2)
1000a64c:	e0bfec15 	stw	r2,-80(fp)
1000a650:	e03fed15 	stw	zero,-76(fp)
1000a654:	00001506 	br	1000a6ac <___vfprintf_internal_r+0xc74>
1000a658:	9880100c 	andi	r2,r19,64
1000a65c:	10000d26 	beq	r2,zero,1000a694 <___vfprintf_internal_r+0xc5c>
1000a660:	e0bfe917 	ldw	r2,-92(fp)
1000a664:	10c00104 	addi	r3,r2,4
1000a668:	e0ffe915 	stw	r3,-92(fp)
1000a66c:	10800017 	ldw	r2,0(r2)
1000a670:	e0bff415 	stw	r2,-48(fp)
1000a674:	e03ff515 	stw	zero,-44(fp)
1000a678:	e0bff417 	ldw	r2,-48(fp)
1000a67c:	10bfffcc 	andi	r2,r2,65535
1000a680:	e0bfec15 	stw	r2,-80(fp)
1000a684:	e0fff517 	ldw	r3,-44(fp)
1000a688:	1806703a 	and	r3,r3,zero
1000a68c:	e0ffed15 	stw	r3,-76(fp)
1000a690:	00000606 	br	1000a6ac <___vfprintf_internal_r+0xc74>
1000a694:	e0bfe917 	ldw	r2,-92(fp)
1000a698:	10c00104 	addi	r3,r2,4
1000a69c:	e0ffe915 	stw	r3,-92(fp)
1000a6a0:	10800017 	ldw	r2,0(r2)
1000a6a4:	e0bfec15 	stw	r2,-80(fp)
1000a6a8:	e03fed15 	stw	zero,-76(fp)
1000a6ac:	e0bfec17 	ldw	r2,-80(fp)
1000a6b0:	e0bfb115 	stw	r2,-316(fp)
1000a6b4:	e0ffed17 	ldw	r3,-76(fp)
1000a6b8:	e0ffb215 	stw	r3,-312(fp)
			base = DEC;
1000a6bc:	00800044 	movi	r2,1
1000a6c0:	e0bfb305 	stb	r2,-308(fp)
			goto nosign;
1000a6c4:	00004006 	br	1000a7c8 <___vfprintf_internal_r+0xd90>
		case 'X':
			xdigs = "0123456789ABCDEF";
1000a6c8:	00840374 	movhi	r2,4109
1000a6cc:	10bda204 	addi	r2,r2,-2424
1000a6d0:	e0bfb715 	stw	r2,-292(fp)
			goto hex;
1000a6d4:	00000306 	br	1000a6e4 <___vfprintf_internal_r+0xcac>
		case 'x':
			xdigs = "0123456789abcdef";
1000a6d8:	00840374 	movhi	r2,4109
1000a6dc:	10bd9b04 	addi	r2,r2,-2452
1000a6e0:	e0bfb715 	stw	r2,-292(fp)
hex:			_uquad = UARG ();
1000a6e4:	9880080c 	andi	r2,r19,32
1000a6e8:	10000826 	beq	r2,zero,1000a70c <___vfprintf_internal_r+0xcd4>
1000a6ec:	e0bfe917 	ldw	r2,-92(fp)
1000a6f0:	10c00204 	addi	r3,r2,8
1000a6f4:	e0ffe915 	stw	r3,-92(fp)
1000a6f8:	10c00017 	ldw	r3,0(r2)
1000a6fc:	e0ffee15 	stw	r3,-72(fp)
1000a700:	10c00117 	ldw	r3,4(r2)
1000a704:	e0ffef15 	stw	r3,-68(fp)
1000a708:	00001e06 	br	1000a784 <___vfprintf_internal_r+0xd4c>
1000a70c:	9880040c 	andi	r2,r19,16
1000a710:	10000726 	beq	r2,zero,1000a730 <___vfprintf_internal_r+0xcf8>
1000a714:	e0bfe917 	ldw	r2,-92(fp)
1000a718:	10c00104 	addi	r3,r2,4
1000a71c:	e0ffe915 	stw	r3,-92(fp)
1000a720:	10800017 	ldw	r2,0(r2)
1000a724:	e0bfee15 	stw	r2,-72(fp)
1000a728:	e03fef15 	stw	zero,-68(fp)
1000a72c:	00001506 	br	1000a784 <___vfprintf_internal_r+0xd4c>
1000a730:	9880100c 	andi	r2,r19,64
1000a734:	10000d26 	beq	r2,zero,1000a76c <___vfprintf_internal_r+0xd34>
1000a738:	e0bfe917 	ldw	r2,-92(fp)
1000a73c:	10c00104 	addi	r3,r2,4
1000a740:	e0ffe915 	stw	r3,-92(fp)
1000a744:	10800017 	ldw	r2,0(r2)
1000a748:	e0bff615 	stw	r2,-40(fp)
1000a74c:	e03ff715 	stw	zero,-36(fp)
1000a750:	e0bff617 	ldw	r2,-40(fp)
1000a754:	10bfffcc 	andi	r2,r2,65535
1000a758:	e0bfee15 	stw	r2,-72(fp)
1000a75c:	e0fff717 	ldw	r3,-36(fp)
1000a760:	1806703a 	and	r3,r3,zero
1000a764:	e0ffef15 	stw	r3,-68(fp)
1000a768:	00000606 	br	1000a784 <___vfprintf_internal_r+0xd4c>
1000a76c:	e0bfe917 	ldw	r2,-92(fp)
1000a770:	10c00104 	addi	r3,r2,4
1000a774:	e0ffe915 	stw	r3,-92(fp)
1000a778:	10800017 	ldw	r2,0(r2)
1000a77c:	e0bfee15 	stw	r2,-72(fp)
1000a780:	e03fef15 	stw	zero,-68(fp)
1000a784:	e0bfee17 	ldw	r2,-72(fp)
1000a788:	e0bfb115 	stw	r2,-316(fp)
1000a78c:	e0ffef17 	ldw	r3,-68(fp)
1000a790:	e0ffb215 	stw	r3,-312(fp)
			base = HEX;
1000a794:	00800084 	movi	r2,2
1000a798:	e0bfb305 	stb	r2,-308(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
1000a79c:	9880004c 	andi	r2,r19,1
1000a7a0:	10000926 	beq	r2,zero,1000a7c8 <___vfprintf_internal_r+0xd90>
1000a7a4:	e0bfb117 	ldw	r2,-316(fp)
1000a7a8:	e0ffb217 	ldw	r3,-312(fp)
1000a7ac:	10c4b03a 	or	r2,r2,r3
1000a7b0:	10000526 	beq	r2,zero,1000a7c8 <___vfprintf_internal_r+0xd90>
				ox[0] = '0';
1000a7b4:	00800c04 	movi	r2,48
1000a7b8:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
1000a7bc:	a005883a 	mov	r2,r20
1000a7c0:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
1000a7c4:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
1000a7c8:	e03fc105 	stb	zero,-252(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
1000a7cc:	e0bfae17 	ldw	r2,-328(fp)
1000a7d0:	e0bfb415 	stw	r2,-304(fp)
1000a7d4:	e0bfb417 	ldw	r2,-304(fp)
1000a7d8:	10000216 	blt	r2,zero,1000a7e4 <___vfprintf_internal_r+0xdac>
				flags &= ~ZEROPAD;
1000a7dc:	00bfdfc4 	movi	r2,-129
1000a7e0:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
1000a7e4:	e4bfdb04 	addi	r18,fp,-148
1000a7e8:	94800a04 	addi	r18,r18,40
			if (_uquad != 0 || prec != 0) {
1000a7ec:	e0bfb117 	ldw	r2,-316(fp)
1000a7f0:	e0ffb217 	ldw	r3,-312(fp)
1000a7f4:	10c4b03a 	or	r2,r2,r3
1000a7f8:	1000021e 	bne	r2,zero,1000a804 <___vfprintf_internal_r+0xdcc>
1000a7fc:	e0bfae17 	ldw	r2,-328(fp)
1000a800:	10006c26 	beq	r2,zero,1000a9b4 <___vfprintf_internal_r+0xf7c>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
1000a804:	e0bfb303 	ldbu	r2,-308(fp)
1000a808:	10c00060 	cmpeqi	r3,r2,1
1000a80c:	1800211e 	bne	r3,zero,1000a894 <___vfprintf_internal_r+0xe5c>
1000a810:	10c000a0 	cmpeqi	r3,r2,2
1000a814:	1800491e 	bne	r3,zero,1000a93c <___vfprintf_internal_r+0xf04>
1000a818:	10005d1e 	bne	r2,zero,1000a990 <___vfprintf_internal_r+0xf58>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
1000a81c:	94bfffc4 	addi	r18,r18,-1
1000a820:	e0bfb117 	ldw	r2,-316(fp)
1000a824:	108001cc 	andi	r2,r2,7
1000a828:	10800c04 	addi	r2,r2,48
1000a82c:	90800005 	stb	r2,0(r18)
						_uquad >>= 3;
1000a830:	e0bfb217 	ldw	r2,-312(fp)
1000a834:	1004977a 	slli	r2,r2,29
1000a838:	e0ffb117 	ldw	r3,-316(fp)
1000a83c:	1806d0fa 	srli	r3,r3,3
1000a840:	1884b03a 	or	r2,r3,r2
1000a844:	e0bfb115 	stw	r2,-316(fp)
1000a848:	e0bfb217 	ldw	r2,-312(fp)
1000a84c:	1004d0fa 	srli	r2,r2,3
1000a850:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
1000a854:	e0bfb117 	ldw	r2,-316(fp)
1000a858:	e0ffb217 	ldw	r3,-312(fp)
1000a85c:	10c4b03a 	or	r2,r2,r3
1000a860:	103fee1e 	bne	r2,zero,1000a81c <__alt_data_end+0xf800a81c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
1000a864:	9880004c 	andi	r2,r19,1
1000a868:	10005026 	beq	r2,zero,1000a9ac <___vfprintf_internal_r+0xf74>
1000a86c:	90800003 	ldbu	r2,0(r18)
1000a870:	10803fcc 	andi	r2,r2,255
1000a874:	1080201c 	xori	r2,r2,128
1000a878:	10bfe004 	addi	r2,r2,-128
1000a87c:	10800c20 	cmpeqi	r2,r2,48
1000a880:	10004a1e 	bne	r2,zero,1000a9ac <___vfprintf_internal_r+0xf74>
						*--cp = '0';
1000a884:	94bfffc4 	addi	r18,r18,-1
1000a888:	00800c04 	movi	r2,48
1000a88c:	90800005 	stb	r2,0(r18)
					break;
1000a890:	00004606 	br	1000a9ac <___vfprintf_internal_r+0xf74>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
1000a894:	e0bfb217 	ldw	r2,-312(fp)
1000a898:	10000a1e 	bne	r2,zero,1000a8c4 <___vfprintf_internal_r+0xe8c>
1000a89c:	e0bfb217 	ldw	r2,-312(fp)
1000a8a0:	1000031e 	bne	r2,zero,1000a8b0 <___vfprintf_internal_r+0xe78>
1000a8a4:	e0bfb117 	ldw	r2,-316(fp)
1000a8a8:	108002a8 	cmpgeui	r2,r2,10
1000a8ac:	1000051e 	bne	r2,zero,1000a8c4 <___vfprintf_internal_r+0xe8c>
						*--cp = to_char(_uquad);
1000a8b0:	94bfffc4 	addi	r18,r18,-1
1000a8b4:	e0bfb117 	ldw	r2,-316(fp)
1000a8b8:	10800c04 	addi	r2,r2,48
1000a8bc:	90800005 	stb	r2,0(r18)
						break;
1000a8c0:	00003b06 	br	1000a9b0 <___vfprintf_internal_r+0xf78>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
1000a8c4:	94bfffc4 	addi	r18,r18,-1
1000a8c8:	e0bfb117 	ldw	r2,-316(fp)
1000a8cc:	e0ffb217 	ldw	r3,-312(fp)
1000a8d0:	01800284 	movi	r6,10
1000a8d4:	000f883a 	mov	r7,zero
1000a8d8:	1009883a 	mov	r4,r2
1000a8dc:	180b883a 	mov	r5,r3
1000a8e0:	0014e540 	call	10014e54 <__umoddi3>
1000a8e4:	1009883a 	mov	r4,r2
1000a8e8:	180b883a 	mov	r5,r3
1000a8ec:	2005883a 	mov	r2,r4
1000a8f0:	2807883a 	mov	r3,r5
1000a8f4:	10800c04 	addi	r2,r2,48
1000a8f8:	90800005 	stb	r2,0(r18)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
1000a8fc:	e0bfb117 	ldw	r2,-316(fp)
1000a900:	e0ffb217 	ldw	r3,-312(fp)
1000a904:	01800284 	movi	r6,10
1000a908:	000f883a 	mov	r7,zero
1000a90c:	1009883a 	mov	r4,r2
1000a910:	180b883a 	mov	r5,r3
1000a914:	00148580 	call	10014858 <__udivdi3>
1000a918:	1009883a 	mov	r4,r2
1000a91c:	180b883a 	mov	r5,r3
1000a920:	e13fb115 	stw	r4,-316(fp)
1000a924:	e17fb215 	stw	r5,-312(fp)
					} while (_uquad != 0);
1000a928:	e0bfb117 	ldw	r2,-316(fp)
1000a92c:	e0ffb217 	ldw	r3,-312(fp)
1000a930:	10c4b03a 	or	r2,r2,r3
1000a934:	103fe31e 	bne	r2,zero,1000a8c4 <__alt_data_end+0xf800a8c4>
					break;
1000a938:	00001d06 	br	1000a9b0 <___vfprintf_internal_r+0xf78>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
1000a93c:	94bfffc4 	addi	r18,r18,-1
1000a940:	e0bfb117 	ldw	r2,-316(fp)
1000a944:	108003cc 	andi	r2,r2,15
1000a948:	e0ffb717 	ldw	r3,-292(fp)
1000a94c:	1885883a 	add	r2,r3,r2
1000a950:	10800003 	ldbu	r2,0(r2)
1000a954:	90800005 	stb	r2,0(r18)
						_uquad >>= 4;
1000a958:	e0bfb217 	ldw	r2,-312(fp)
1000a95c:	1004973a 	slli	r2,r2,28
1000a960:	e0ffb117 	ldw	r3,-316(fp)
1000a964:	1806d13a 	srli	r3,r3,4
1000a968:	1884b03a 	or	r2,r3,r2
1000a96c:	e0bfb115 	stw	r2,-316(fp)
1000a970:	e0bfb217 	ldw	r2,-312(fp)
1000a974:	1004d13a 	srli	r2,r2,4
1000a978:	e0bfb215 	stw	r2,-312(fp)
					} while (_uquad);
1000a97c:	e0bfb117 	ldw	r2,-316(fp)
1000a980:	e0ffb217 	ldw	r3,-312(fp)
1000a984:	10c4b03a 	or	r2,r2,r3
1000a988:	103fec1e 	bne	r2,zero,1000a93c <__alt_data_end+0xf800a93c>
					break;
1000a98c:	00000806 	br	1000a9b0 <___vfprintf_internal_r+0xf78>

				default:
					cp = "bug in vfprintf: bad base";
1000a990:	04840374 	movhi	r18,4109
1000a994:	94bda704 	addi	r18,r18,-2404
					size = strlen (cp);
1000a998:	9009883a 	mov	r4,r18
1000a99c:	00094580 	call	10009458 <strlen>
1000a9a0:	e0bfb615 	stw	r2,-296(fp)
					goto skipsize;
1000a9a4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
1000a9a8:	00001906 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
1000a9ac:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
1000a9b0:	00000706 	br	1000a9d0 <___vfprintf_internal_r+0xf98>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
1000a9b4:	e0bfb303 	ldbu	r2,-308(fp)
1000a9b8:	1000051e 	bne	r2,zero,1000a9d0 <___vfprintf_internal_r+0xf98>
1000a9bc:	9880004c 	andi	r2,r19,1
1000a9c0:	10000326 	beq	r2,zero,1000a9d0 <___vfprintf_internal_r+0xf98>
                         *--cp = '0';
1000a9c4:	94bfffc4 	addi	r18,r18,-1
1000a9c8:	00800c04 	movi	r2,48
1000a9cc:	90800005 	stb	r2,0(r18)

			size = buf + BUF - cp;
1000a9d0:	e0bfdb04 	addi	r2,fp,-148
1000a9d4:	10800a04 	addi	r2,r2,40
1000a9d8:	1007883a 	mov	r3,r2
1000a9dc:	9005883a 	mov	r2,r18
1000a9e0:	1885c83a 	sub	r2,r3,r2
1000a9e4:	e0bfb615 	stw	r2,-296(fp)
		skipsize:
			break;
1000a9e8:	00000906 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
1000a9ec:	a003dc26 	beq	r20,zero,1000b960 <___vfprintf_internal_r+0x1f28>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
1000a9f0:	e4bfdb04 	addi	r18,fp,-148
			*cp = ch;
1000a9f4:	a005883a 	mov	r2,r20
1000a9f8:	90800005 	stb	r2,0(r18)
			size = 1;
1000a9fc:	00800044 	movi	r2,1
1000aa00:	e0bfb615 	stw	r2,-296(fp)
			sign = '\0';
1000aa04:	e03fc105 	stb	zero,-252(fp)
			break;
1000aa08:	00000106 	br	1000aa10 <___vfprintf_internal_r+0xfd8>
					lead = expt;
			}

			if (softsign)
				sign = '-';
			break;
1000aa0c:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
1000aa10:	e0ffb417 	ldw	r3,-304(fp)
1000aa14:	e0bfb617 	ldw	r2,-296(fp)
1000aa18:	10c0010e 	bge	r2,r3,1000aa20 <___vfprintf_internal_r+0xfe8>
1000aa1c:	1805883a 	mov	r2,r3
1000aa20:	e0bfb515 	stw	r2,-300(fp)
		if (sign)
1000aa24:	e0bfc103 	ldbu	r2,-252(fp)
1000aa28:	10803fcc 	andi	r2,r2,255
1000aa2c:	1080201c 	xori	r2,r2,128
1000aa30:	10bfe004 	addi	r2,r2,-128
1000aa34:	10000326 	beq	r2,zero,1000aa44 <___vfprintf_internal_r+0x100c>
			realsz++;
1000aa38:	e0bfb517 	ldw	r2,-300(fp)
1000aa3c:	10800044 	addi	r2,r2,1
1000aa40:	e0bfb515 	stw	r2,-300(fp)
		if (flags & HEXPREFIX)
1000aa44:	9880008c 	andi	r2,r19,2
1000aa48:	10000326 	beq	r2,zero,1000aa58 <___vfprintf_internal_r+0x1020>
			realsz+= 2;
1000aa4c:	e0bfb517 	ldw	r2,-300(fp)
1000aa50:	10800084 	addi	r2,r2,2
1000aa54:	e0bfb515 	stw	r2,-300(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
1000aa58:	9880210c 	andi	r2,r19,132
1000aa5c:	1000351e 	bne	r2,zero,1000ab34 <___vfprintf_internal_r+0x10fc>
			PAD (width - realsz, blanks);
1000aa60:	e0ffad17 	ldw	r3,-332(fp)
1000aa64:	e0bfb517 	ldw	r2,-300(fp)
1000aa68:	18a1c83a 	sub	r16,r3,r2
1000aa6c:	0400310e 	bge	zero,r16,1000ab34 <___vfprintf_internal_r+0x10fc>
1000aa70:	00001706 	br	1000aad0 <___vfprintf_internal_r+0x1098>
1000aa74:	00840374 	movhi	r2,4109
1000aa78:	10bdae84 	addi	r2,r2,-2374
1000aa7c:	88800015 	stw	r2,0(r17)
1000aa80:	00800404 	movi	r2,16
1000aa84:	88800115 	stw	r2,4(r17)
1000aa88:	e0bfca17 	ldw	r2,-216(fp)
1000aa8c:	10800404 	addi	r2,r2,16
1000aa90:	e0bfca15 	stw	r2,-216(fp)
1000aa94:	8c400204 	addi	r17,r17,8
1000aa98:	e0bfc917 	ldw	r2,-220(fp)
1000aa9c:	10800044 	addi	r2,r2,1
1000aaa0:	e0bfc915 	stw	r2,-220(fp)
1000aaa4:	e0bfc917 	ldw	r2,-220(fp)
1000aaa8:	10800210 	cmplti	r2,r2,8
1000aaac:	1000071e 	bne	r2,zero,1000aacc <___vfprintf_internal_r+0x1094>
1000aab0:	e0bfc804 	addi	r2,fp,-224
1000aab4:	100d883a 	mov	r6,r2
1000aab8:	e17fe717 	ldw	r5,-100(fp)
1000aabc:	e13fe617 	ldw	r4,-104(fp)
1000aac0:	00127380 	call	10012738 <__sprint_r>
1000aac4:	1003b41e 	bne	r2,zero,1000b998 <___vfprintf_internal_r+0x1f60>
1000aac8:	e47fcb04 	addi	r17,fp,-212
1000aacc:	843ffc04 	addi	r16,r16,-16
1000aad0:	80800448 	cmpgei	r2,r16,17
1000aad4:	103fe71e 	bne	r2,zero,1000aa74 <__alt_data_end+0xf800aa74>
1000aad8:	00840374 	movhi	r2,4109
1000aadc:	10bdae84 	addi	r2,r2,-2374
1000aae0:	88800015 	stw	r2,0(r17)
1000aae4:	8005883a 	mov	r2,r16
1000aae8:	88800115 	stw	r2,4(r17)
1000aaec:	e0bfca17 	ldw	r2,-216(fp)
1000aaf0:	8007883a 	mov	r3,r16
1000aaf4:	10c5883a 	add	r2,r2,r3
1000aaf8:	e0bfca15 	stw	r2,-216(fp)
1000aafc:	8c400204 	addi	r17,r17,8
1000ab00:	e0bfc917 	ldw	r2,-220(fp)
1000ab04:	10800044 	addi	r2,r2,1
1000ab08:	e0bfc915 	stw	r2,-220(fp)
1000ab0c:	e0bfc917 	ldw	r2,-220(fp)
1000ab10:	10800210 	cmplti	r2,r2,8
1000ab14:	1000071e 	bne	r2,zero,1000ab34 <___vfprintf_internal_r+0x10fc>
1000ab18:	e0bfc804 	addi	r2,fp,-224
1000ab1c:	100d883a 	mov	r6,r2
1000ab20:	e17fe717 	ldw	r5,-100(fp)
1000ab24:	e13fe617 	ldw	r4,-104(fp)
1000ab28:	00127380 	call	10012738 <__sprint_r>
1000ab2c:	10039c1e 	bne	r2,zero,1000b9a0 <___vfprintf_internal_r+0x1f68>
1000ab30:	e47fcb04 	addi	r17,fp,-212

		/* prefix */
		if (sign)
1000ab34:	e0bfc103 	ldbu	r2,-252(fp)
1000ab38:	10803fcc 	andi	r2,r2,255
1000ab3c:	1080201c 	xori	r2,r2,128
1000ab40:	10bfe004 	addi	r2,r2,-128
1000ab44:	10001526 	beq	r2,zero,1000ab9c <___vfprintf_internal_r+0x1164>
			PRINT (&sign, 1);
1000ab48:	e0bfc104 	addi	r2,fp,-252
1000ab4c:	88800015 	stw	r2,0(r17)
1000ab50:	00800044 	movi	r2,1
1000ab54:	88800115 	stw	r2,4(r17)
1000ab58:	e0bfca17 	ldw	r2,-216(fp)
1000ab5c:	10800044 	addi	r2,r2,1
1000ab60:	e0bfca15 	stw	r2,-216(fp)
1000ab64:	8c400204 	addi	r17,r17,8
1000ab68:	e0bfc917 	ldw	r2,-220(fp)
1000ab6c:	10800044 	addi	r2,r2,1
1000ab70:	e0bfc915 	stw	r2,-220(fp)
1000ab74:	e0bfc917 	ldw	r2,-220(fp)
1000ab78:	10800210 	cmplti	r2,r2,8
1000ab7c:	1000071e 	bne	r2,zero,1000ab9c <___vfprintf_internal_r+0x1164>
1000ab80:	e0bfc804 	addi	r2,fp,-224
1000ab84:	100d883a 	mov	r6,r2
1000ab88:	e17fe717 	ldw	r5,-100(fp)
1000ab8c:	e13fe617 	ldw	r4,-104(fp)
1000ab90:	00127380 	call	10012738 <__sprint_r>
1000ab94:	1003841e 	bne	r2,zero,1000b9a8 <___vfprintf_internal_r+0x1f70>
1000ab98:	e47fcb04 	addi	r17,fp,-212
		if (flags & HEXPREFIX)
1000ab9c:	9880008c 	andi	r2,r19,2
1000aba0:	10001526 	beq	r2,zero,1000abf8 <___vfprintf_internal_r+0x11c0>
			PRINT (ox, 2);
1000aba4:	e0bfe504 	addi	r2,fp,-108
1000aba8:	88800015 	stw	r2,0(r17)
1000abac:	00800084 	movi	r2,2
1000abb0:	88800115 	stw	r2,4(r17)
1000abb4:	e0bfca17 	ldw	r2,-216(fp)
1000abb8:	10800084 	addi	r2,r2,2
1000abbc:	e0bfca15 	stw	r2,-216(fp)
1000abc0:	8c400204 	addi	r17,r17,8
1000abc4:	e0bfc917 	ldw	r2,-220(fp)
1000abc8:	10800044 	addi	r2,r2,1
1000abcc:	e0bfc915 	stw	r2,-220(fp)
1000abd0:	e0bfc917 	ldw	r2,-220(fp)
1000abd4:	10800210 	cmplti	r2,r2,8
1000abd8:	1000071e 	bne	r2,zero,1000abf8 <___vfprintf_internal_r+0x11c0>
1000abdc:	e0bfc804 	addi	r2,fp,-224
1000abe0:	100d883a 	mov	r6,r2
1000abe4:	e17fe717 	ldw	r5,-100(fp)
1000abe8:	e13fe617 	ldw	r4,-104(fp)
1000abec:	00127380 	call	10012738 <__sprint_r>
1000abf0:	10036f1e 	bne	r2,zero,1000b9b0 <___vfprintf_internal_r+0x1f78>
1000abf4:	e47fcb04 	addi	r17,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
1000abf8:	9880210c 	andi	r2,r19,132
1000abfc:	10802018 	cmpnei	r2,r2,128
1000ac00:	1000351e 	bne	r2,zero,1000acd8 <___vfprintf_internal_r+0x12a0>
			PAD (width - realsz, zeroes);
1000ac04:	e0ffad17 	ldw	r3,-332(fp)
1000ac08:	e0bfb517 	ldw	r2,-300(fp)
1000ac0c:	18a1c83a 	sub	r16,r3,r2
1000ac10:	0400310e 	bge	zero,r16,1000acd8 <___vfprintf_internal_r+0x12a0>
1000ac14:	00001706 	br	1000ac74 <___vfprintf_internal_r+0x123c>
1000ac18:	00840374 	movhi	r2,4109
1000ac1c:	10bdb284 	addi	r2,r2,-2358
1000ac20:	88800015 	stw	r2,0(r17)
1000ac24:	00800404 	movi	r2,16
1000ac28:	88800115 	stw	r2,4(r17)
1000ac2c:	e0bfca17 	ldw	r2,-216(fp)
1000ac30:	10800404 	addi	r2,r2,16
1000ac34:	e0bfca15 	stw	r2,-216(fp)
1000ac38:	8c400204 	addi	r17,r17,8
1000ac3c:	e0bfc917 	ldw	r2,-220(fp)
1000ac40:	10800044 	addi	r2,r2,1
1000ac44:	e0bfc915 	stw	r2,-220(fp)
1000ac48:	e0bfc917 	ldw	r2,-220(fp)
1000ac4c:	10800210 	cmplti	r2,r2,8
1000ac50:	1000071e 	bne	r2,zero,1000ac70 <___vfprintf_internal_r+0x1238>
1000ac54:	e0bfc804 	addi	r2,fp,-224
1000ac58:	100d883a 	mov	r6,r2
1000ac5c:	e17fe717 	ldw	r5,-100(fp)
1000ac60:	e13fe617 	ldw	r4,-104(fp)
1000ac64:	00127380 	call	10012738 <__sprint_r>
1000ac68:	1003531e 	bne	r2,zero,1000b9b8 <___vfprintf_internal_r+0x1f80>
1000ac6c:	e47fcb04 	addi	r17,fp,-212
1000ac70:	843ffc04 	addi	r16,r16,-16
1000ac74:	80800448 	cmpgei	r2,r16,17
1000ac78:	103fe71e 	bne	r2,zero,1000ac18 <__alt_data_end+0xf800ac18>
1000ac7c:	00840374 	movhi	r2,4109
1000ac80:	10bdb284 	addi	r2,r2,-2358
1000ac84:	88800015 	stw	r2,0(r17)
1000ac88:	8005883a 	mov	r2,r16
1000ac8c:	88800115 	stw	r2,4(r17)
1000ac90:	e0bfca17 	ldw	r2,-216(fp)
1000ac94:	8007883a 	mov	r3,r16
1000ac98:	10c5883a 	add	r2,r2,r3
1000ac9c:	e0bfca15 	stw	r2,-216(fp)
1000aca0:	8c400204 	addi	r17,r17,8
1000aca4:	e0bfc917 	ldw	r2,-220(fp)
1000aca8:	10800044 	addi	r2,r2,1
1000acac:	e0bfc915 	stw	r2,-220(fp)
1000acb0:	e0bfc917 	ldw	r2,-220(fp)
1000acb4:	10800210 	cmplti	r2,r2,8
1000acb8:	1000071e 	bne	r2,zero,1000acd8 <___vfprintf_internal_r+0x12a0>
1000acbc:	e0bfc804 	addi	r2,fp,-224
1000acc0:	100d883a 	mov	r6,r2
1000acc4:	e17fe717 	ldw	r5,-100(fp)
1000acc8:	e13fe617 	ldw	r4,-104(fp)
1000accc:	00127380 	call	10012738 <__sprint_r>
1000acd0:	10033b1e 	bne	r2,zero,1000b9c0 <___vfprintf_internal_r+0x1f88>
1000acd4:	e47fcb04 	addi	r17,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
1000acd8:	e0ffb417 	ldw	r3,-304(fp)
1000acdc:	e0bfb617 	ldw	r2,-296(fp)
1000ace0:	18a1c83a 	sub	r16,r3,r2
1000ace4:	0400310e 	bge	zero,r16,1000adac <___vfprintf_internal_r+0x1374>
1000ace8:	00001706 	br	1000ad48 <___vfprintf_internal_r+0x1310>
1000acec:	00840374 	movhi	r2,4109
1000acf0:	10bdb284 	addi	r2,r2,-2358
1000acf4:	88800015 	stw	r2,0(r17)
1000acf8:	00800404 	movi	r2,16
1000acfc:	88800115 	stw	r2,4(r17)
1000ad00:	e0bfca17 	ldw	r2,-216(fp)
1000ad04:	10800404 	addi	r2,r2,16
1000ad08:	e0bfca15 	stw	r2,-216(fp)
1000ad0c:	8c400204 	addi	r17,r17,8
1000ad10:	e0bfc917 	ldw	r2,-220(fp)
1000ad14:	10800044 	addi	r2,r2,1
1000ad18:	e0bfc915 	stw	r2,-220(fp)
1000ad1c:	e0bfc917 	ldw	r2,-220(fp)
1000ad20:	10800210 	cmplti	r2,r2,8
1000ad24:	1000071e 	bne	r2,zero,1000ad44 <___vfprintf_internal_r+0x130c>
1000ad28:	e0bfc804 	addi	r2,fp,-224
1000ad2c:	100d883a 	mov	r6,r2
1000ad30:	e17fe717 	ldw	r5,-100(fp)
1000ad34:	e13fe617 	ldw	r4,-104(fp)
1000ad38:	00127380 	call	10012738 <__sprint_r>
1000ad3c:	1003221e 	bne	r2,zero,1000b9c8 <___vfprintf_internal_r+0x1f90>
1000ad40:	e47fcb04 	addi	r17,fp,-212
1000ad44:	843ffc04 	addi	r16,r16,-16
1000ad48:	80800448 	cmpgei	r2,r16,17
1000ad4c:	103fe71e 	bne	r2,zero,1000acec <__alt_data_end+0xf800acec>
1000ad50:	00840374 	movhi	r2,4109
1000ad54:	10bdb284 	addi	r2,r2,-2358
1000ad58:	88800015 	stw	r2,0(r17)
1000ad5c:	8005883a 	mov	r2,r16
1000ad60:	88800115 	stw	r2,4(r17)
1000ad64:	e0bfca17 	ldw	r2,-216(fp)
1000ad68:	8007883a 	mov	r3,r16
1000ad6c:	10c5883a 	add	r2,r2,r3
1000ad70:	e0bfca15 	stw	r2,-216(fp)
1000ad74:	8c400204 	addi	r17,r17,8
1000ad78:	e0bfc917 	ldw	r2,-220(fp)
1000ad7c:	10800044 	addi	r2,r2,1
1000ad80:	e0bfc915 	stw	r2,-220(fp)
1000ad84:	e0bfc917 	ldw	r2,-220(fp)
1000ad88:	10800210 	cmplti	r2,r2,8
1000ad8c:	1000071e 	bne	r2,zero,1000adac <___vfprintf_internal_r+0x1374>
1000ad90:	e0bfc804 	addi	r2,fp,-224
1000ad94:	100d883a 	mov	r6,r2
1000ad98:	e17fe717 	ldw	r5,-100(fp)
1000ad9c:	e13fe617 	ldw	r4,-104(fp)
1000ada0:	00127380 	call	10012738 <__sprint_r>
1000ada4:	10030a1e 	bne	r2,zero,1000b9d0 <___vfprintf_internal_r+0x1f98>
1000ada8:	e47fcb04 	addi	r17,fp,-212

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
1000adac:	9880400c 	andi	r2,r19,256
1000adb0:	1000161e 	bne	r2,zero,1000ae0c <___vfprintf_internal_r+0x13d4>
			PRINT (cp, size);
1000adb4:	8c800015 	stw	r18,0(r17)
1000adb8:	e0bfb617 	ldw	r2,-296(fp)
1000adbc:	88800115 	stw	r2,4(r17)
1000adc0:	e0ffca17 	ldw	r3,-216(fp)
1000adc4:	e0bfb617 	ldw	r2,-296(fp)
1000adc8:	1885883a 	add	r2,r3,r2
1000adcc:	e0bfca15 	stw	r2,-216(fp)
1000add0:	8c400204 	addi	r17,r17,8
1000add4:	e0bfc917 	ldw	r2,-220(fp)
1000add8:	10800044 	addi	r2,r2,1
1000addc:	e0bfc915 	stw	r2,-220(fp)
1000ade0:	e0bfc917 	ldw	r2,-220(fp)
1000ade4:	10800210 	cmplti	r2,r2,8
1000ade8:	10028c1e 	bne	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
1000adec:	e0bfc804 	addi	r2,fp,-224
1000adf0:	100d883a 	mov	r6,r2
1000adf4:	e17fe717 	ldw	r5,-100(fp)
1000adf8:	e13fe617 	ldw	r4,-104(fp)
1000adfc:	00127380 	call	10012738 <__sprint_r>
1000ae00:	1002f51e 	bne	r2,zero,1000b9d8 <___vfprintf_internal_r+0x1fa0>
1000ae04:	e47fcb04 	addi	r17,fp,-212
1000ae08:	00028406 	br	1000b81c <___vfprintf_internal_r+0x1de4>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
1000ae0c:	a0801990 	cmplti	r2,r20,102
1000ae10:	1001d11e 	bne	r2,zero,1000b558 <___vfprintf_internal_r+0x1b20>
				if (_fpvalue == 0) {
1000ae14:	e0bfc217 	ldw	r2,-248(fp)
1000ae18:	e0ffc317 	ldw	r3,-244(fp)
1000ae1c:	000d883a 	mov	r6,zero
1000ae20:	000f883a 	mov	r7,zero
1000ae24:	1009883a 	mov	r4,r2
1000ae28:	180b883a 	mov	r5,r3
1000ae2c:	00154180 	call	10015418 <__eqdf2>
1000ae30:	1000661e 	bne	r2,zero,1000afcc <___vfprintf_internal_r+0x1594>
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
1000ae34:	00840374 	movhi	r2,4109
1000ae38:	10bdae04 	addi	r2,r2,-2376
1000ae3c:	88800015 	stw	r2,0(r17)
1000ae40:	00800044 	movi	r2,1
1000ae44:	88800115 	stw	r2,4(r17)
1000ae48:	e0bfca17 	ldw	r2,-216(fp)
1000ae4c:	10800044 	addi	r2,r2,1
1000ae50:	e0bfca15 	stw	r2,-216(fp)
1000ae54:	8c400204 	addi	r17,r17,8
1000ae58:	e0bfc917 	ldw	r2,-220(fp)
1000ae5c:	10800044 	addi	r2,r2,1
1000ae60:	e0bfc915 	stw	r2,-220(fp)
1000ae64:	e0bfc917 	ldw	r2,-220(fp)
1000ae68:	10800210 	cmplti	r2,r2,8
1000ae6c:	1000071e 	bne	r2,zero,1000ae8c <___vfprintf_internal_r+0x1454>
1000ae70:	e0bfc804 	addi	r2,fp,-224
1000ae74:	100d883a 	mov	r6,r2
1000ae78:	e17fe717 	ldw	r5,-100(fp)
1000ae7c:	e13fe617 	ldw	r4,-104(fp)
1000ae80:	00127380 	call	10012738 <__sprint_r>
1000ae84:	1002d61e 	bne	r2,zero,1000b9e0 <___vfprintf_internal_r+0x1fa8>
1000ae88:	e47fcb04 	addi	r17,fp,-212
					if (expt < ndig || flags & ALT) {
1000ae8c:	e0ffc417 	ldw	r3,-240(fp)
1000ae90:	e0bfc717 	ldw	r2,-228(fp)
1000ae94:	18800216 	blt	r3,r2,1000aea0 <___vfprintf_internal_r+0x1468>
1000ae98:	9880004c 	andi	r2,r19,1
1000ae9c:	10025f26 	beq	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
1000aea0:	e0bfbb17 	ldw	r2,-276(fp)
1000aea4:	88800015 	stw	r2,0(r17)
1000aea8:	e0bfbc17 	ldw	r2,-272(fp)
1000aeac:	88800115 	stw	r2,4(r17)
1000aeb0:	e0ffca17 	ldw	r3,-216(fp)
1000aeb4:	e0bfbc17 	ldw	r2,-272(fp)
1000aeb8:	1885883a 	add	r2,r3,r2
1000aebc:	e0bfca15 	stw	r2,-216(fp)
1000aec0:	8c400204 	addi	r17,r17,8
1000aec4:	e0bfc917 	ldw	r2,-220(fp)
1000aec8:	10800044 	addi	r2,r2,1
1000aecc:	e0bfc915 	stw	r2,-220(fp)
1000aed0:	e0bfc917 	ldw	r2,-220(fp)
1000aed4:	10800210 	cmplti	r2,r2,8
1000aed8:	1000071e 	bne	r2,zero,1000aef8 <___vfprintf_internal_r+0x14c0>
1000aedc:	e0bfc804 	addi	r2,fp,-224
1000aee0:	100d883a 	mov	r6,r2
1000aee4:	e17fe717 	ldw	r5,-100(fp)
1000aee8:	e13fe617 	ldw	r4,-104(fp)
1000aeec:	00127380 	call	10012738 <__sprint_r>
1000aef0:	1002bd1e 	bne	r2,zero,1000b9e8 <___vfprintf_internal_r+0x1fb0>
1000aef4:	e47fcb04 	addi	r17,fp,-212
						PAD (ndig - 1, zeroes);
1000aef8:	e0bfc717 	ldw	r2,-228(fp)
1000aefc:	143fffc4 	addi	r16,r2,-1
1000af00:	0402460e 	bge	zero,r16,1000b81c <___vfprintf_internal_r+0x1de4>
1000af04:	00001706 	br	1000af64 <___vfprintf_internal_r+0x152c>
1000af08:	00840374 	movhi	r2,4109
1000af0c:	10bdb284 	addi	r2,r2,-2358
1000af10:	88800015 	stw	r2,0(r17)
1000af14:	00800404 	movi	r2,16
1000af18:	88800115 	stw	r2,4(r17)
1000af1c:	e0bfca17 	ldw	r2,-216(fp)
1000af20:	10800404 	addi	r2,r2,16
1000af24:	e0bfca15 	stw	r2,-216(fp)
1000af28:	8c400204 	addi	r17,r17,8
1000af2c:	e0bfc917 	ldw	r2,-220(fp)
1000af30:	10800044 	addi	r2,r2,1
1000af34:	e0bfc915 	stw	r2,-220(fp)
1000af38:	e0bfc917 	ldw	r2,-220(fp)
1000af3c:	10800210 	cmplti	r2,r2,8
1000af40:	1000071e 	bne	r2,zero,1000af60 <___vfprintf_internal_r+0x1528>
1000af44:	e0bfc804 	addi	r2,fp,-224
1000af48:	100d883a 	mov	r6,r2
1000af4c:	e17fe717 	ldw	r5,-100(fp)
1000af50:	e13fe617 	ldw	r4,-104(fp)
1000af54:	00127380 	call	10012738 <__sprint_r>
1000af58:	1002a51e 	bne	r2,zero,1000b9f0 <___vfprintf_internal_r+0x1fb8>
1000af5c:	e47fcb04 	addi	r17,fp,-212
1000af60:	843ffc04 	addi	r16,r16,-16
1000af64:	80800448 	cmpgei	r2,r16,17
1000af68:	103fe71e 	bne	r2,zero,1000af08 <__alt_data_end+0xf800af08>
1000af6c:	00840374 	movhi	r2,4109
1000af70:	10bdb284 	addi	r2,r2,-2358
1000af74:	88800015 	stw	r2,0(r17)
1000af78:	8005883a 	mov	r2,r16
1000af7c:	88800115 	stw	r2,4(r17)
1000af80:	e0bfca17 	ldw	r2,-216(fp)
1000af84:	8007883a 	mov	r3,r16
1000af88:	10c5883a 	add	r2,r2,r3
1000af8c:	e0bfca15 	stw	r2,-216(fp)
1000af90:	8c400204 	addi	r17,r17,8
1000af94:	e0bfc917 	ldw	r2,-220(fp)
1000af98:	10800044 	addi	r2,r2,1
1000af9c:	e0bfc915 	stw	r2,-220(fp)
1000afa0:	e0bfc917 	ldw	r2,-220(fp)
1000afa4:	10800210 	cmplti	r2,r2,8
1000afa8:	10021c1e 	bne	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
1000afac:	e0bfc804 	addi	r2,fp,-224
1000afb0:	100d883a 	mov	r6,r2
1000afb4:	e17fe717 	ldw	r5,-100(fp)
1000afb8:	e13fe617 	ldw	r4,-104(fp)
1000afbc:	00127380 	call	10012738 <__sprint_r>
1000afc0:	10028d1e 	bne	r2,zero,1000b9f8 <___vfprintf_internal_r+0x1fc0>
1000afc4:	e47fcb04 	addi	r17,fp,-212
1000afc8:	00021406 	br	1000b81c <___vfprintf_internal_r+0x1de4>
					}
				} else if (expt <= 0) {
1000afcc:	e0bfc417 	ldw	r2,-240(fp)
1000afd0:	00807c16 	blt	zero,r2,1000b1c4 <___vfprintf_internal_r+0x178c>
					PRINT ("0", 1);
1000afd4:	00840374 	movhi	r2,4109
1000afd8:	10bdae04 	addi	r2,r2,-2376
1000afdc:	88800015 	stw	r2,0(r17)
1000afe0:	00800044 	movi	r2,1
1000afe4:	88800115 	stw	r2,4(r17)
1000afe8:	e0bfca17 	ldw	r2,-216(fp)
1000afec:	10800044 	addi	r2,r2,1
1000aff0:	e0bfca15 	stw	r2,-216(fp)
1000aff4:	8c400204 	addi	r17,r17,8
1000aff8:	e0bfc917 	ldw	r2,-220(fp)
1000affc:	10800044 	addi	r2,r2,1
1000b000:	e0bfc915 	stw	r2,-220(fp)
1000b004:	e0bfc917 	ldw	r2,-220(fp)
1000b008:	10800210 	cmplti	r2,r2,8
1000b00c:	1000071e 	bne	r2,zero,1000b02c <___vfprintf_internal_r+0x15f4>
1000b010:	e0bfc804 	addi	r2,fp,-224
1000b014:	100d883a 	mov	r6,r2
1000b018:	e17fe717 	ldw	r5,-100(fp)
1000b01c:	e13fe617 	ldw	r4,-104(fp)
1000b020:	00127380 	call	10012738 <__sprint_r>
1000b024:	1002761e 	bne	r2,zero,1000ba00 <___vfprintf_internal_r+0x1fc8>
1000b028:	e47fcb04 	addi	r17,fp,-212
					if (expt || ndig || flags & ALT) {
1000b02c:	e0bfc417 	ldw	r2,-240(fp)
1000b030:	1000041e 	bne	r2,zero,1000b044 <___vfprintf_internal_r+0x160c>
1000b034:	e0bfc717 	ldw	r2,-228(fp)
1000b038:	1000021e 	bne	r2,zero,1000b044 <___vfprintf_internal_r+0x160c>
1000b03c:	9880004c 	andi	r2,r19,1
1000b040:	1001f626 	beq	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
						PRINT (decimal_point, decp_len);
1000b044:	e0bfbb17 	ldw	r2,-276(fp)
1000b048:	88800015 	stw	r2,0(r17)
1000b04c:	e0bfbc17 	ldw	r2,-272(fp)
1000b050:	88800115 	stw	r2,4(r17)
1000b054:	e0ffca17 	ldw	r3,-216(fp)
1000b058:	e0bfbc17 	ldw	r2,-272(fp)
1000b05c:	1885883a 	add	r2,r3,r2
1000b060:	e0bfca15 	stw	r2,-216(fp)
1000b064:	8c400204 	addi	r17,r17,8
1000b068:	e0bfc917 	ldw	r2,-220(fp)
1000b06c:	10800044 	addi	r2,r2,1
1000b070:	e0bfc915 	stw	r2,-220(fp)
1000b074:	e0bfc917 	ldw	r2,-220(fp)
1000b078:	10800210 	cmplti	r2,r2,8
1000b07c:	1000071e 	bne	r2,zero,1000b09c <___vfprintf_internal_r+0x1664>
1000b080:	e0bfc804 	addi	r2,fp,-224
1000b084:	100d883a 	mov	r6,r2
1000b088:	e17fe717 	ldw	r5,-100(fp)
1000b08c:	e13fe617 	ldw	r4,-104(fp)
1000b090:	00127380 	call	10012738 <__sprint_r>
1000b094:	10025c1e 	bne	r2,zero,1000ba08 <___vfprintf_internal_r+0x1fd0>
1000b098:	e47fcb04 	addi	r17,fp,-212
						PAD (-expt, zeroes);
1000b09c:	e0bfc417 	ldw	r2,-240(fp)
1000b0a0:	00a1c83a 	sub	r16,zero,r2
1000b0a4:	0400310e 	bge	zero,r16,1000b16c <___vfprintf_internal_r+0x1734>
1000b0a8:	00001706 	br	1000b108 <___vfprintf_internal_r+0x16d0>
1000b0ac:	00840374 	movhi	r2,4109
1000b0b0:	10bdb284 	addi	r2,r2,-2358
1000b0b4:	88800015 	stw	r2,0(r17)
1000b0b8:	00800404 	movi	r2,16
1000b0bc:	88800115 	stw	r2,4(r17)
1000b0c0:	e0bfca17 	ldw	r2,-216(fp)
1000b0c4:	10800404 	addi	r2,r2,16
1000b0c8:	e0bfca15 	stw	r2,-216(fp)
1000b0cc:	8c400204 	addi	r17,r17,8
1000b0d0:	e0bfc917 	ldw	r2,-220(fp)
1000b0d4:	10800044 	addi	r2,r2,1
1000b0d8:	e0bfc915 	stw	r2,-220(fp)
1000b0dc:	e0bfc917 	ldw	r2,-220(fp)
1000b0e0:	10800210 	cmplti	r2,r2,8
1000b0e4:	1000071e 	bne	r2,zero,1000b104 <___vfprintf_internal_r+0x16cc>
1000b0e8:	e0bfc804 	addi	r2,fp,-224
1000b0ec:	100d883a 	mov	r6,r2
1000b0f0:	e17fe717 	ldw	r5,-100(fp)
1000b0f4:	e13fe617 	ldw	r4,-104(fp)
1000b0f8:	00127380 	call	10012738 <__sprint_r>
1000b0fc:	1002441e 	bne	r2,zero,1000ba10 <___vfprintf_internal_r+0x1fd8>
1000b100:	e47fcb04 	addi	r17,fp,-212
1000b104:	843ffc04 	addi	r16,r16,-16
1000b108:	80800448 	cmpgei	r2,r16,17
1000b10c:	103fe71e 	bne	r2,zero,1000b0ac <__alt_data_end+0xf800b0ac>
1000b110:	00840374 	movhi	r2,4109
1000b114:	10bdb284 	addi	r2,r2,-2358
1000b118:	88800015 	stw	r2,0(r17)
1000b11c:	8005883a 	mov	r2,r16
1000b120:	88800115 	stw	r2,4(r17)
1000b124:	e0bfca17 	ldw	r2,-216(fp)
1000b128:	8007883a 	mov	r3,r16
1000b12c:	10c5883a 	add	r2,r2,r3
1000b130:	e0bfca15 	stw	r2,-216(fp)
1000b134:	8c400204 	addi	r17,r17,8
1000b138:	e0bfc917 	ldw	r2,-220(fp)
1000b13c:	10800044 	addi	r2,r2,1
1000b140:	e0bfc915 	stw	r2,-220(fp)
1000b144:	e0bfc917 	ldw	r2,-220(fp)
1000b148:	10800210 	cmplti	r2,r2,8
1000b14c:	1000071e 	bne	r2,zero,1000b16c <___vfprintf_internal_r+0x1734>
1000b150:	e0bfc804 	addi	r2,fp,-224
1000b154:	100d883a 	mov	r6,r2
1000b158:	e17fe717 	ldw	r5,-100(fp)
1000b15c:	e13fe617 	ldw	r4,-104(fp)
1000b160:	00127380 	call	10012738 <__sprint_r>
1000b164:	10022c1e 	bne	r2,zero,1000ba18 <___vfprintf_internal_r+0x1fe0>
1000b168:	e47fcb04 	addi	r17,fp,-212
						PRINT (cp, ndig);
1000b16c:	8c800015 	stw	r18,0(r17)
1000b170:	e0bfc717 	ldw	r2,-228(fp)
1000b174:	88800115 	stw	r2,4(r17)
1000b178:	e0bfca17 	ldw	r2,-216(fp)
1000b17c:	e0ffc717 	ldw	r3,-228(fp)
1000b180:	10c5883a 	add	r2,r2,r3
1000b184:	e0bfca15 	stw	r2,-216(fp)
1000b188:	8c400204 	addi	r17,r17,8
1000b18c:	e0bfc917 	ldw	r2,-220(fp)
1000b190:	10800044 	addi	r2,r2,1
1000b194:	e0bfc915 	stw	r2,-220(fp)
1000b198:	e0bfc917 	ldw	r2,-220(fp)
1000b19c:	10800210 	cmplti	r2,r2,8
1000b1a0:	10019e1e 	bne	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
1000b1a4:	e0bfc804 	addi	r2,fp,-224
1000b1a8:	100d883a 	mov	r6,r2
1000b1ac:	e17fe717 	ldw	r5,-100(fp)
1000b1b0:	e13fe617 	ldw	r4,-104(fp)
1000b1b4:	00127380 	call	10012738 <__sprint_r>
1000b1b8:	1002191e 	bne	r2,zero,1000ba20 <___vfprintf_internal_r+0x1fe8>
1000b1bc:	e47fcb04 	addi	r17,fp,-212
1000b1c0:	00019606 	br	1000b81c <___vfprintf_internal_r+0x1de4>
					}
				} else {
					char *convbuf = cp;
1000b1c4:	e4bfc015 	stw	r18,-256(fp)
					PRINTANDPAD(cp, convbuf + ndig,
1000b1c8:	e0bfc717 	ldw	r2,-228(fp)
1000b1cc:	1007883a 	mov	r3,r2
1000b1d0:	e0bfc017 	ldw	r2,-256(fp)
1000b1d4:	10c5883a 	add	r2,r2,r3
1000b1d8:	1007883a 	mov	r3,r2
1000b1dc:	9005883a 	mov	r2,r18
1000b1e0:	1885c83a 	sub	r2,r3,r2
1000b1e4:	e0bfb915 	stw	r2,-284(fp)
1000b1e8:	e0bfb917 	ldw	r2,-284(fp)
1000b1ec:	e0ffb017 	ldw	r3,-320(fp)
1000b1f0:	1880020e 	bge	r3,r2,1000b1fc <___vfprintf_internal_r+0x17c4>
1000b1f4:	e0bfb017 	ldw	r2,-320(fp)
1000b1f8:	e0bfb915 	stw	r2,-284(fp)
1000b1fc:	e0bfb917 	ldw	r2,-284(fp)
1000b200:	0080150e 	bge	zero,r2,1000b258 <___vfprintf_internal_r+0x1820>
1000b204:	8c800015 	stw	r18,0(r17)
1000b208:	e0bfb917 	ldw	r2,-284(fp)
1000b20c:	88800115 	stw	r2,4(r17)
1000b210:	e0ffca17 	ldw	r3,-216(fp)
1000b214:	e0bfb917 	ldw	r2,-284(fp)
1000b218:	1885883a 	add	r2,r3,r2
1000b21c:	e0bfca15 	stw	r2,-216(fp)
1000b220:	8c400204 	addi	r17,r17,8
1000b224:	e0bfc917 	ldw	r2,-220(fp)
1000b228:	10800044 	addi	r2,r2,1
1000b22c:	e0bfc915 	stw	r2,-220(fp)
1000b230:	e0bfc917 	ldw	r2,-220(fp)
1000b234:	10800210 	cmplti	r2,r2,8
1000b238:	1000071e 	bne	r2,zero,1000b258 <___vfprintf_internal_r+0x1820>
1000b23c:	e0bfc804 	addi	r2,fp,-224
1000b240:	100d883a 	mov	r6,r2
1000b244:	e17fe717 	ldw	r5,-100(fp)
1000b248:	e13fe617 	ldw	r4,-104(fp)
1000b24c:	00127380 	call	10012738 <__sprint_r>
1000b250:	1001f51e 	bne	r2,zero,1000ba28 <___vfprintf_internal_r+0x1ff0>
1000b254:	e47fcb04 	addi	r17,fp,-212
1000b258:	e0bfb917 	ldw	r2,-284(fp)
1000b25c:	1000010e 	bge	r2,zero,1000b264 <___vfprintf_internal_r+0x182c>
1000b260:	0005883a 	mov	r2,zero
1000b264:	e0ffb017 	ldw	r3,-320(fp)
1000b268:	1885c83a 	sub	r2,r3,r2
1000b26c:	e0bfb915 	stw	r2,-284(fp)
1000b270:	e0bfb917 	ldw	r2,-284(fp)
1000b274:	0080340e 	bge	zero,r2,1000b348 <___vfprintf_internal_r+0x1910>
1000b278:	00001906 	br	1000b2e0 <___vfprintf_internal_r+0x18a8>
1000b27c:	00840374 	movhi	r2,4109
1000b280:	10bdb284 	addi	r2,r2,-2358
1000b284:	88800015 	stw	r2,0(r17)
1000b288:	00800404 	movi	r2,16
1000b28c:	88800115 	stw	r2,4(r17)
1000b290:	e0bfca17 	ldw	r2,-216(fp)
1000b294:	10800404 	addi	r2,r2,16
1000b298:	e0bfca15 	stw	r2,-216(fp)
1000b29c:	8c400204 	addi	r17,r17,8
1000b2a0:	e0bfc917 	ldw	r2,-220(fp)
1000b2a4:	10800044 	addi	r2,r2,1
1000b2a8:	e0bfc915 	stw	r2,-220(fp)
1000b2ac:	e0bfc917 	ldw	r2,-220(fp)
1000b2b0:	10800210 	cmplti	r2,r2,8
1000b2b4:	1000071e 	bne	r2,zero,1000b2d4 <___vfprintf_internal_r+0x189c>
1000b2b8:	e0bfc804 	addi	r2,fp,-224
1000b2bc:	100d883a 	mov	r6,r2
1000b2c0:	e17fe717 	ldw	r5,-100(fp)
1000b2c4:	e13fe617 	ldw	r4,-104(fp)
1000b2c8:	00127380 	call	10012738 <__sprint_r>
1000b2cc:	1001d81e 	bne	r2,zero,1000ba30 <___vfprintf_internal_r+0x1ff8>
1000b2d0:	e47fcb04 	addi	r17,fp,-212
1000b2d4:	e0bfb917 	ldw	r2,-284(fp)
1000b2d8:	10bffc04 	addi	r2,r2,-16
1000b2dc:	e0bfb915 	stw	r2,-284(fp)
1000b2e0:	e0bfb917 	ldw	r2,-284(fp)
1000b2e4:	10800448 	cmpgei	r2,r2,17
1000b2e8:	103fe41e 	bne	r2,zero,1000b27c <__alt_data_end+0xf800b27c>
1000b2ec:	00840374 	movhi	r2,4109
1000b2f0:	10bdb284 	addi	r2,r2,-2358
1000b2f4:	88800015 	stw	r2,0(r17)
1000b2f8:	e0bfb917 	ldw	r2,-284(fp)
1000b2fc:	88800115 	stw	r2,4(r17)
1000b300:	e0ffca17 	ldw	r3,-216(fp)
1000b304:	e0bfb917 	ldw	r2,-284(fp)
1000b308:	1885883a 	add	r2,r3,r2
1000b30c:	e0bfca15 	stw	r2,-216(fp)
1000b310:	8c400204 	addi	r17,r17,8
1000b314:	e0bfc917 	ldw	r2,-220(fp)
1000b318:	10800044 	addi	r2,r2,1
1000b31c:	e0bfc915 	stw	r2,-220(fp)
1000b320:	e0bfc917 	ldw	r2,-220(fp)
1000b324:	10800210 	cmplti	r2,r2,8
1000b328:	1000071e 	bne	r2,zero,1000b348 <___vfprintf_internal_r+0x1910>
1000b32c:	e0bfc804 	addi	r2,fp,-224
1000b330:	100d883a 	mov	r6,r2
1000b334:	e17fe717 	ldw	r5,-100(fp)
1000b338:	e13fe617 	ldw	r4,-104(fp)
1000b33c:	00127380 	call	10012738 <__sprint_r>
1000b340:	1001bd1e 	bne	r2,zero,1000ba38 <___vfprintf_internal_r+0x2000>
1000b344:	e47fcb04 	addi	r17,fp,-212
						    lead, zeroes);
					cp += lead;
1000b348:	e0bfb017 	ldw	r2,-320(fp)
1000b34c:	90a5883a 	add	r18,r18,r2
					    }
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
1000b350:	e0ffc417 	ldw	r3,-240(fp)
1000b354:	e0bfc717 	ldw	r2,-228(fp)
1000b358:	18800216 	blt	r3,r2,1000b364 <___vfprintf_internal_r+0x192c>
1000b35c:	9880004c 	andi	r2,r19,1
1000b360:	10001626 	beq	r2,zero,1000b3bc <___vfprintf_internal_r+0x1984>
					    PRINT (decimal_point, decp_len);
1000b364:	e0bfbb17 	ldw	r2,-276(fp)
1000b368:	88800015 	stw	r2,0(r17)
1000b36c:	e0bfbc17 	ldw	r2,-272(fp)
1000b370:	88800115 	stw	r2,4(r17)
1000b374:	e0ffca17 	ldw	r3,-216(fp)
1000b378:	e0bfbc17 	ldw	r2,-272(fp)
1000b37c:	1885883a 	add	r2,r3,r2
1000b380:	e0bfca15 	stw	r2,-216(fp)
1000b384:	8c400204 	addi	r17,r17,8
1000b388:	e0bfc917 	ldw	r2,-220(fp)
1000b38c:	10800044 	addi	r2,r2,1
1000b390:	e0bfc915 	stw	r2,-220(fp)
1000b394:	e0bfc917 	ldw	r2,-220(fp)
1000b398:	10800210 	cmplti	r2,r2,8
1000b39c:	1000071e 	bne	r2,zero,1000b3bc <___vfprintf_internal_r+0x1984>
1000b3a0:	e0bfc804 	addi	r2,fp,-224
1000b3a4:	100d883a 	mov	r6,r2
1000b3a8:	e17fe717 	ldw	r5,-100(fp)
1000b3ac:	e13fe617 	ldw	r4,-104(fp)
1000b3b0:	00127380 	call	10012738 <__sprint_r>
1000b3b4:	1001a21e 	bne	r2,zero,1000ba40 <___vfprintf_internal_r+0x2008>
1000b3b8:	e47fcb04 	addi	r17,fp,-212
					PRINTANDPAD (cp, convbuf + ndig,
1000b3bc:	e0bfc717 	ldw	r2,-228(fp)
1000b3c0:	1007883a 	mov	r3,r2
1000b3c4:	e0bfc017 	ldw	r2,-256(fp)
1000b3c8:	10c5883a 	add	r2,r2,r3
1000b3cc:	1007883a 	mov	r3,r2
1000b3d0:	9005883a 	mov	r2,r18
1000b3d4:	1885c83a 	sub	r2,r3,r2
1000b3d8:	e0bfba15 	stw	r2,-280(fp)
1000b3dc:	e0ffc717 	ldw	r3,-228(fp)
1000b3e0:	e0bfc417 	ldw	r2,-240(fp)
1000b3e4:	1887c83a 	sub	r3,r3,r2
1000b3e8:	e0bfba17 	ldw	r2,-280(fp)
1000b3ec:	1880040e 	bge	r3,r2,1000b400 <___vfprintf_internal_r+0x19c8>
1000b3f0:	e0ffc717 	ldw	r3,-228(fp)
1000b3f4:	e0bfc417 	ldw	r2,-240(fp)
1000b3f8:	1885c83a 	sub	r2,r3,r2
1000b3fc:	e0bfba15 	stw	r2,-280(fp)
1000b400:	e0bfba17 	ldw	r2,-280(fp)
1000b404:	0080150e 	bge	zero,r2,1000b45c <___vfprintf_internal_r+0x1a24>
1000b408:	8c800015 	stw	r18,0(r17)
1000b40c:	e0bfba17 	ldw	r2,-280(fp)
1000b410:	88800115 	stw	r2,4(r17)
1000b414:	e0ffca17 	ldw	r3,-216(fp)
1000b418:	e0bfba17 	ldw	r2,-280(fp)
1000b41c:	1885883a 	add	r2,r3,r2
1000b420:	e0bfca15 	stw	r2,-216(fp)
1000b424:	8c400204 	addi	r17,r17,8
1000b428:	e0bfc917 	ldw	r2,-220(fp)
1000b42c:	10800044 	addi	r2,r2,1
1000b430:	e0bfc915 	stw	r2,-220(fp)
1000b434:	e0bfc917 	ldw	r2,-220(fp)
1000b438:	10800210 	cmplti	r2,r2,8
1000b43c:	1000071e 	bne	r2,zero,1000b45c <___vfprintf_internal_r+0x1a24>
1000b440:	e0bfc804 	addi	r2,fp,-224
1000b444:	100d883a 	mov	r6,r2
1000b448:	e17fe717 	ldw	r5,-100(fp)
1000b44c:	e13fe617 	ldw	r4,-104(fp)
1000b450:	00127380 	call	10012738 <__sprint_r>
1000b454:	10017c1e 	bne	r2,zero,1000ba48 <___vfprintf_internal_r+0x2010>
1000b458:	e47fcb04 	addi	r17,fp,-212
1000b45c:	e0ffc717 	ldw	r3,-228(fp)
1000b460:	e0bfc417 	ldw	r2,-240(fp)
1000b464:	1887c83a 	sub	r3,r3,r2
1000b468:	e0bfba17 	ldw	r2,-280(fp)
1000b46c:	1000010e 	bge	r2,zero,1000b474 <___vfprintf_internal_r+0x1a3c>
1000b470:	0005883a 	mov	r2,zero
1000b474:	1885c83a 	sub	r2,r3,r2
1000b478:	e0bfba15 	stw	r2,-280(fp)
1000b47c:	e0bfba17 	ldw	r2,-280(fp)
1000b480:	0080e60e 	bge	zero,r2,1000b81c <___vfprintf_internal_r+0x1de4>
1000b484:	00001906 	br	1000b4ec <___vfprintf_internal_r+0x1ab4>
1000b488:	00840374 	movhi	r2,4109
1000b48c:	10bdb284 	addi	r2,r2,-2358
1000b490:	88800015 	stw	r2,0(r17)
1000b494:	00800404 	movi	r2,16
1000b498:	88800115 	stw	r2,4(r17)
1000b49c:	e0bfca17 	ldw	r2,-216(fp)
1000b4a0:	10800404 	addi	r2,r2,16
1000b4a4:	e0bfca15 	stw	r2,-216(fp)
1000b4a8:	8c400204 	addi	r17,r17,8
1000b4ac:	e0bfc917 	ldw	r2,-220(fp)
1000b4b0:	10800044 	addi	r2,r2,1
1000b4b4:	e0bfc915 	stw	r2,-220(fp)
1000b4b8:	e0bfc917 	ldw	r2,-220(fp)
1000b4bc:	10800210 	cmplti	r2,r2,8
1000b4c0:	1000071e 	bne	r2,zero,1000b4e0 <___vfprintf_internal_r+0x1aa8>
1000b4c4:	e0bfc804 	addi	r2,fp,-224
1000b4c8:	100d883a 	mov	r6,r2
1000b4cc:	e17fe717 	ldw	r5,-100(fp)
1000b4d0:	e13fe617 	ldw	r4,-104(fp)
1000b4d4:	00127380 	call	10012738 <__sprint_r>
1000b4d8:	10015d1e 	bne	r2,zero,1000ba50 <___vfprintf_internal_r+0x2018>
1000b4dc:	e47fcb04 	addi	r17,fp,-212
1000b4e0:	e0bfba17 	ldw	r2,-280(fp)
1000b4e4:	10bffc04 	addi	r2,r2,-16
1000b4e8:	e0bfba15 	stw	r2,-280(fp)
1000b4ec:	e0bfba17 	ldw	r2,-280(fp)
1000b4f0:	10800448 	cmpgei	r2,r2,17
1000b4f4:	103fe41e 	bne	r2,zero,1000b488 <__alt_data_end+0xf800b488>
1000b4f8:	00840374 	movhi	r2,4109
1000b4fc:	10bdb284 	addi	r2,r2,-2358
1000b500:	88800015 	stw	r2,0(r17)
1000b504:	e0bfba17 	ldw	r2,-280(fp)
1000b508:	88800115 	stw	r2,4(r17)
1000b50c:	e0ffca17 	ldw	r3,-216(fp)
1000b510:	e0bfba17 	ldw	r2,-280(fp)
1000b514:	1885883a 	add	r2,r3,r2
1000b518:	e0bfca15 	stw	r2,-216(fp)
1000b51c:	8c400204 	addi	r17,r17,8
1000b520:	e0bfc917 	ldw	r2,-220(fp)
1000b524:	10800044 	addi	r2,r2,1
1000b528:	e0bfc915 	stw	r2,-220(fp)
1000b52c:	e0bfc917 	ldw	r2,-220(fp)
1000b530:	10800210 	cmplti	r2,r2,8
1000b534:	1000b91e 	bne	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
1000b538:	e0bfc804 	addi	r2,fp,-224
1000b53c:	100d883a 	mov	r6,r2
1000b540:	e17fe717 	ldw	r5,-100(fp)
1000b544:	e13fe617 	ldw	r4,-104(fp)
1000b548:	00127380 	call	10012738 <__sprint_r>
1000b54c:	1001421e 	bne	r2,zero,1000ba58 <___vfprintf_internal_r+0x2020>
1000b550:	e47fcb04 	addi	r17,fp,-212
1000b554:	0000b106 	br	1000b81c <___vfprintf_internal_r+0x1de4>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
1000b558:	e0bfc717 	ldw	r2,-228(fp)
1000b55c:	10800088 	cmpgei	r2,r2,2
1000b560:	1000021e 	bne	r2,zero,1000b56c <___vfprintf_internal_r+0x1b34>
1000b564:	9880004c 	andi	r2,r19,1
1000b568:	10008026 	beq	r2,zero,1000b76c <___vfprintf_internal_r+0x1d34>
					PRINT (cp, 1);
1000b56c:	8c800015 	stw	r18,0(r17)
1000b570:	00800044 	movi	r2,1
1000b574:	88800115 	stw	r2,4(r17)
1000b578:	e0bfca17 	ldw	r2,-216(fp)
1000b57c:	10800044 	addi	r2,r2,1
1000b580:	e0bfca15 	stw	r2,-216(fp)
1000b584:	8c400204 	addi	r17,r17,8
1000b588:	e0bfc917 	ldw	r2,-220(fp)
1000b58c:	10800044 	addi	r2,r2,1
1000b590:	e0bfc915 	stw	r2,-220(fp)
1000b594:	e0bfc917 	ldw	r2,-220(fp)
1000b598:	10800210 	cmplti	r2,r2,8
1000b59c:	1000071e 	bne	r2,zero,1000b5bc <___vfprintf_internal_r+0x1b84>
1000b5a0:	e0bfc804 	addi	r2,fp,-224
1000b5a4:	100d883a 	mov	r6,r2
1000b5a8:	e17fe717 	ldw	r5,-100(fp)
1000b5ac:	e13fe617 	ldw	r4,-104(fp)
1000b5b0:	00127380 	call	10012738 <__sprint_r>
1000b5b4:	10012a1e 	bne	r2,zero,1000ba60 <___vfprintf_internal_r+0x2028>
1000b5b8:	e47fcb04 	addi	r17,fp,-212
					cp++;
1000b5bc:	94800044 	addi	r18,r18,1
					PRINT (decimal_point, decp_len);
1000b5c0:	e0bfbb17 	ldw	r2,-276(fp)
1000b5c4:	88800015 	stw	r2,0(r17)
1000b5c8:	e0bfbc17 	ldw	r2,-272(fp)
1000b5cc:	88800115 	stw	r2,4(r17)
1000b5d0:	e0ffca17 	ldw	r3,-216(fp)
1000b5d4:	e0bfbc17 	ldw	r2,-272(fp)
1000b5d8:	1885883a 	add	r2,r3,r2
1000b5dc:	e0bfca15 	stw	r2,-216(fp)
1000b5e0:	8c400204 	addi	r17,r17,8
1000b5e4:	e0bfc917 	ldw	r2,-220(fp)
1000b5e8:	10800044 	addi	r2,r2,1
1000b5ec:	e0bfc915 	stw	r2,-220(fp)
1000b5f0:	e0bfc917 	ldw	r2,-220(fp)
1000b5f4:	10800210 	cmplti	r2,r2,8
1000b5f8:	1000071e 	bne	r2,zero,1000b618 <___vfprintf_internal_r+0x1be0>
1000b5fc:	e0bfc804 	addi	r2,fp,-224
1000b600:	100d883a 	mov	r6,r2
1000b604:	e17fe717 	ldw	r5,-100(fp)
1000b608:	e13fe617 	ldw	r4,-104(fp)
1000b60c:	00127380 	call	10012738 <__sprint_r>
1000b610:	1001151e 	bne	r2,zero,1000ba68 <___vfprintf_internal_r+0x2030>
1000b614:	e47fcb04 	addi	r17,fp,-212
					if (_fpvalue) {
1000b618:	e0bfc217 	ldw	r2,-248(fp)
1000b61c:	e0ffc317 	ldw	r3,-244(fp)
1000b620:	000d883a 	mov	r6,zero
1000b624:	000f883a 	mov	r7,zero
1000b628:	1009883a 	mov	r4,r2
1000b62c:	180b883a 	mov	r5,r3
1000b630:	00154180 	call	10015418 <__eqdf2>
1000b634:	10001826 	beq	r2,zero,1000b698 <___vfprintf_internal_r+0x1c60>
						PRINT (cp, ndig - 1);
1000b638:	8c800015 	stw	r18,0(r17)
1000b63c:	e0bfc717 	ldw	r2,-228(fp)
1000b640:	10bfffc4 	addi	r2,r2,-1
1000b644:	88800115 	stw	r2,4(r17)
1000b648:	e0bfca17 	ldw	r2,-216(fp)
1000b64c:	e0ffc717 	ldw	r3,-228(fp)
1000b650:	10c5883a 	add	r2,r2,r3
1000b654:	10bfffc4 	addi	r2,r2,-1
1000b658:	e0bfca15 	stw	r2,-216(fp)
1000b65c:	8c400204 	addi	r17,r17,8
1000b660:	e0bfc917 	ldw	r2,-220(fp)
1000b664:	10800044 	addi	r2,r2,1
1000b668:	e0bfc915 	stw	r2,-220(fp)
1000b66c:	e0bfc917 	ldw	r2,-220(fp)
1000b670:	10800210 	cmplti	r2,r2,8
1000b674:	1000521e 	bne	r2,zero,1000b7c0 <___vfprintf_internal_r+0x1d88>
1000b678:	e0bfc804 	addi	r2,fp,-224
1000b67c:	100d883a 	mov	r6,r2
1000b680:	e17fe717 	ldw	r5,-100(fp)
1000b684:	e13fe617 	ldw	r4,-104(fp)
1000b688:	00127380 	call	10012738 <__sprint_r>
1000b68c:	1000f81e 	bne	r2,zero,1000ba70 <___vfprintf_internal_r+0x2038>
1000b690:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000b694:	00004a06 	br	1000b7c0 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
1000b698:	e0bfc717 	ldw	r2,-228(fp)
1000b69c:	143fffc4 	addi	r16,r2,-1
1000b6a0:	0400470e 	bge	zero,r16,1000b7c0 <___vfprintf_internal_r+0x1d88>
1000b6a4:	00001706 	br	1000b704 <___vfprintf_internal_r+0x1ccc>
1000b6a8:	00840374 	movhi	r2,4109
1000b6ac:	10bdb284 	addi	r2,r2,-2358
1000b6b0:	88800015 	stw	r2,0(r17)
1000b6b4:	00800404 	movi	r2,16
1000b6b8:	88800115 	stw	r2,4(r17)
1000b6bc:	e0bfca17 	ldw	r2,-216(fp)
1000b6c0:	10800404 	addi	r2,r2,16
1000b6c4:	e0bfca15 	stw	r2,-216(fp)
1000b6c8:	8c400204 	addi	r17,r17,8
1000b6cc:	e0bfc917 	ldw	r2,-220(fp)
1000b6d0:	10800044 	addi	r2,r2,1
1000b6d4:	e0bfc915 	stw	r2,-220(fp)
1000b6d8:	e0bfc917 	ldw	r2,-220(fp)
1000b6dc:	10800210 	cmplti	r2,r2,8
1000b6e0:	1000071e 	bne	r2,zero,1000b700 <___vfprintf_internal_r+0x1cc8>
1000b6e4:	e0bfc804 	addi	r2,fp,-224
1000b6e8:	100d883a 	mov	r6,r2
1000b6ec:	e17fe717 	ldw	r5,-100(fp)
1000b6f0:	e13fe617 	ldw	r4,-104(fp)
1000b6f4:	00127380 	call	10012738 <__sprint_r>
1000b6f8:	1000df1e 	bne	r2,zero,1000ba78 <___vfprintf_internal_r+0x2040>
1000b6fc:	e47fcb04 	addi	r17,fp,-212
1000b700:	843ffc04 	addi	r16,r16,-16
1000b704:	80800448 	cmpgei	r2,r16,17
1000b708:	103fe71e 	bne	r2,zero,1000b6a8 <__alt_data_end+0xf800b6a8>
1000b70c:	00840374 	movhi	r2,4109
1000b710:	10bdb284 	addi	r2,r2,-2358
1000b714:	88800015 	stw	r2,0(r17)
1000b718:	8005883a 	mov	r2,r16
1000b71c:	88800115 	stw	r2,4(r17)
1000b720:	e0bfca17 	ldw	r2,-216(fp)
1000b724:	8007883a 	mov	r3,r16
1000b728:	10c5883a 	add	r2,r2,r3
1000b72c:	e0bfca15 	stw	r2,-216(fp)
1000b730:	8c400204 	addi	r17,r17,8
1000b734:	e0bfc917 	ldw	r2,-220(fp)
1000b738:	10800044 	addi	r2,r2,1
1000b73c:	e0bfc915 	stw	r2,-220(fp)
1000b740:	e0bfc917 	ldw	r2,-220(fp)
1000b744:	10800210 	cmplti	r2,r2,8
1000b748:	10001d1e 	bne	r2,zero,1000b7c0 <___vfprintf_internal_r+0x1d88>
1000b74c:	e0bfc804 	addi	r2,fp,-224
1000b750:	100d883a 	mov	r6,r2
1000b754:	e17fe717 	ldw	r5,-100(fp)
1000b758:	e13fe617 	ldw	r4,-104(fp)
1000b75c:	00127380 	call	10012738 <__sprint_r>
1000b760:	1000c71e 	bne	r2,zero,1000ba80 <___vfprintf_internal_r+0x2048>
1000b764:	e47fcb04 	addi	r17,fp,-212
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000b768:	00001506 	br	1000b7c0 <___vfprintf_internal_r+0x1d88>
						PRINT (cp, ndig - 1);
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
1000b76c:	8c800015 	stw	r18,0(r17)
1000b770:	00800044 	movi	r2,1
1000b774:	88800115 	stw	r2,4(r17)
1000b778:	e0bfca17 	ldw	r2,-216(fp)
1000b77c:	10800044 	addi	r2,r2,1
1000b780:	e0bfca15 	stw	r2,-216(fp)
1000b784:	8c400204 	addi	r17,r17,8
1000b788:	e0bfc917 	ldw	r2,-220(fp)
1000b78c:	10800044 	addi	r2,r2,1
1000b790:	e0bfc915 	stw	r2,-220(fp)
1000b794:	e0bfc917 	ldw	r2,-220(fp)
1000b798:	10800210 	cmplti	r2,r2,8
1000b79c:	1000091e 	bne	r2,zero,1000b7c4 <___vfprintf_internal_r+0x1d8c>
1000b7a0:	e0bfc804 	addi	r2,fp,-224
1000b7a4:	100d883a 	mov	r6,r2
1000b7a8:	e17fe717 	ldw	r5,-100(fp)
1000b7ac:	e13fe617 	ldw	r4,-104(fp)
1000b7b0:	00127380 	call	10012738 <__sprint_r>
1000b7b4:	1000b41e 	bne	r2,zero,1000ba88 <___vfprintf_internal_r+0x2050>
1000b7b8:	e47fcb04 	addi	r17,fp,-212
1000b7bc:	00000106 	br	1000b7c4 <___vfprintf_internal_r+0x1d8c>
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
					cp++;
					PRINT (decimal_point, decp_len);
					if (_fpvalue) {
1000b7c0:	0001883a 	nop
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
				} else	/* XeYYY */
					PRINT (cp, 1);
				PRINT (expstr, expsize);
1000b7c4:	e0bfc504 	addi	r2,fp,-236
1000b7c8:	88800015 	stw	r2,0(r17)
1000b7cc:	e0bfaf17 	ldw	r2,-324(fp)
1000b7d0:	88800115 	stw	r2,4(r17)
1000b7d4:	e0ffca17 	ldw	r3,-216(fp)
1000b7d8:	e0bfaf17 	ldw	r2,-324(fp)
1000b7dc:	1885883a 	add	r2,r3,r2
1000b7e0:	e0bfca15 	stw	r2,-216(fp)
1000b7e4:	8c400204 	addi	r17,r17,8
1000b7e8:	e0bfc917 	ldw	r2,-220(fp)
1000b7ec:	10800044 	addi	r2,r2,1
1000b7f0:	e0bfc915 	stw	r2,-220(fp)
1000b7f4:	e0bfc917 	ldw	r2,-220(fp)
1000b7f8:	10800210 	cmplti	r2,r2,8
1000b7fc:	1000071e 	bne	r2,zero,1000b81c <___vfprintf_internal_r+0x1de4>
1000b800:	e0bfc804 	addi	r2,fp,-224
1000b804:	100d883a 	mov	r6,r2
1000b808:	e17fe717 	ldw	r5,-100(fp)
1000b80c:	e13fe617 	ldw	r4,-104(fp)
1000b810:	00127380 	call	10012738 <__sprint_r>
1000b814:	10009e1e 	bne	r2,zero,1000ba90 <___vfprintf_internal_r+0x2058>
1000b818:	e47fcb04 	addi	r17,fp,-212
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
1000b81c:	9880010c 	andi	r2,r19,4
1000b820:	10003526 	beq	r2,zero,1000b8f8 <___vfprintf_internal_r+0x1ec0>
			PAD (width - realsz, blanks);
1000b824:	e0ffad17 	ldw	r3,-332(fp)
1000b828:	e0bfb517 	ldw	r2,-300(fp)
1000b82c:	18a1c83a 	sub	r16,r3,r2
1000b830:	0400310e 	bge	zero,r16,1000b8f8 <___vfprintf_internal_r+0x1ec0>
1000b834:	00001706 	br	1000b894 <___vfprintf_internal_r+0x1e5c>
1000b838:	00840374 	movhi	r2,4109
1000b83c:	10bdae84 	addi	r2,r2,-2374
1000b840:	88800015 	stw	r2,0(r17)
1000b844:	00800404 	movi	r2,16
1000b848:	88800115 	stw	r2,4(r17)
1000b84c:	e0bfca17 	ldw	r2,-216(fp)
1000b850:	10800404 	addi	r2,r2,16
1000b854:	e0bfca15 	stw	r2,-216(fp)
1000b858:	8c400204 	addi	r17,r17,8
1000b85c:	e0bfc917 	ldw	r2,-220(fp)
1000b860:	10800044 	addi	r2,r2,1
1000b864:	e0bfc915 	stw	r2,-220(fp)
1000b868:	e0bfc917 	ldw	r2,-220(fp)
1000b86c:	10800210 	cmplti	r2,r2,8
1000b870:	1000071e 	bne	r2,zero,1000b890 <___vfprintf_internal_r+0x1e58>
1000b874:	e0bfc804 	addi	r2,fp,-224
1000b878:	100d883a 	mov	r6,r2
1000b87c:	e17fe717 	ldw	r5,-100(fp)
1000b880:	e13fe617 	ldw	r4,-104(fp)
1000b884:	00127380 	call	10012738 <__sprint_r>
1000b888:	1000831e 	bne	r2,zero,1000ba98 <___vfprintf_internal_r+0x2060>
1000b88c:	e47fcb04 	addi	r17,fp,-212
1000b890:	843ffc04 	addi	r16,r16,-16
1000b894:	80800448 	cmpgei	r2,r16,17
1000b898:	103fe71e 	bne	r2,zero,1000b838 <__alt_data_end+0xf800b838>
1000b89c:	00840374 	movhi	r2,4109
1000b8a0:	10bdae84 	addi	r2,r2,-2374
1000b8a4:	88800015 	stw	r2,0(r17)
1000b8a8:	8005883a 	mov	r2,r16
1000b8ac:	88800115 	stw	r2,4(r17)
1000b8b0:	e0bfca17 	ldw	r2,-216(fp)
1000b8b4:	8007883a 	mov	r3,r16
1000b8b8:	10c5883a 	add	r2,r2,r3
1000b8bc:	e0bfca15 	stw	r2,-216(fp)
1000b8c0:	8c400204 	addi	r17,r17,8
1000b8c4:	e0bfc917 	ldw	r2,-220(fp)
1000b8c8:	10800044 	addi	r2,r2,1
1000b8cc:	e0bfc915 	stw	r2,-220(fp)
1000b8d0:	e0bfc917 	ldw	r2,-220(fp)
1000b8d4:	10800210 	cmplti	r2,r2,8
1000b8d8:	1000071e 	bne	r2,zero,1000b8f8 <___vfprintf_internal_r+0x1ec0>
1000b8dc:	e0bfc804 	addi	r2,fp,-224
1000b8e0:	100d883a 	mov	r6,r2
1000b8e4:	e17fe717 	ldw	r5,-100(fp)
1000b8e8:	e13fe617 	ldw	r4,-104(fp)
1000b8ec:	00127380 	call	10012738 <__sprint_r>
1000b8f0:	10006b1e 	bne	r2,zero,1000baa0 <___vfprintf_internal_r+0x2068>
1000b8f4:	e47fcb04 	addi	r17,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
1000b8f8:	e0ffad17 	ldw	r3,-332(fp)
1000b8fc:	e0bfb517 	ldw	r2,-300(fp)
1000b900:	10c0010e 	bge	r2,r3,1000b908 <___vfprintf_internal_r+0x1ed0>
1000b904:	1805883a 	mov	r2,r3
1000b908:	e0ffac17 	ldw	r3,-336(fp)
1000b90c:	1885883a 	add	r2,r3,r2
1000b910:	e0bfac15 	stw	r2,-336(fp)

		FLUSH ();	/* copy out the I/O vectors */
1000b914:	e0bfca17 	ldw	r2,-216(fp)
1000b918:	10000626 	beq	r2,zero,1000b934 <___vfprintf_internal_r+0x1efc>
1000b91c:	e0bfc804 	addi	r2,fp,-224
1000b920:	100d883a 	mov	r6,r2
1000b924:	e17fe717 	ldw	r5,-100(fp)
1000b928:	e13fe617 	ldw	r4,-104(fp)
1000b92c:	00127380 	call	10012738 <__sprint_r>
1000b930:	10005d1e 	bne	r2,zero,1000baa8 <___vfprintf_internal_r+0x2070>
1000b934:	e03fc915 	stw	zero,-220(fp)
1000b938:	e47fcb04 	addi	r17,fp,-212

                if (malloc_buf != NULL) {
1000b93c:	e0bfb817 	ldw	r2,-288(fp)
1000b940:	10389a26 	beq	r2,zero,10009bac <__alt_data_end+0xf8009bac>
			_free_r (data, malloc_buf);
1000b944:	e17fb817 	ldw	r5,-288(fp)
1000b948:	e13fe617 	ldw	r4,-104(fp)
1000b94c:	000e9740 	call	1000e974 <_free_r>
			malloc_buf = NULL;
1000b950:	e03fb815 	stw	zero,-288(fp)
		}
	}
1000b954:	00389506 	br	10009bac <__alt_data_end+0xf8009bac>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
1000b958:	0001883a 	nop
1000b95c:	00000106 	br	1000b964 <___vfprintf_internal_r+0x1f2c>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
1000b960:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
1000b964:	e0bfca17 	ldw	r2,-216(fp)
1000b968:	10000626 	beq	r2,zero,1000b984 <___vfprintf_internal_r+0x1f4c>
1000b96c:	e0bfc804 	addi	r2,fp,-224
1000b970:	100d883a 	mov	r6,r2
1000b974:	e17fe717 	ldw	r5,-100(fp)
1000b978:	e13fe617 	ldw	r4,-104(fp)
1000b97c:	00127380 	call	10012738 <__sprint_r>
1000b980:	10004b1e 	bne	r2,zero,1000bab0 <___vfprintf_internal_r+0x2078>
1000b984:	e03fc915 	stw	zero,-220(fp)
1000b988:	e47fcb04 	addi	r17,fp,-212
1000b98c:	00004906 	br	1000bab4 <___vfprintf_internal_r+0x207c>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
1000b990:	0001883a 	nop
1000b994:	00004706 	br	1000bab4 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
1000b998:	0001883a 	nop
1000b99c:	00004506 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000b9a0:	0001883a 	nop
1000b9a4:	00004306 	br	1000bab4 <___vfprintf_internal_r+0x207c>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
1000b9a8:	0001883a 	nop
1000b9ac:	00004106 	br	1000bab4 <___vfprintf_internal_r+0x207c>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
1000b9b0:	0001883a 	nop
1000b9b4:	00003f06 	br	1000bab4 <___vfprintf_internal_r+0x207c>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
1000b9b8:	0001883a 	nop
1000b9bc:	00003d06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000b9c0:	0001883a 	nop
1000b9c4:	00003b06 	br	1000bab4 <___vfprintf_internal_r+0x207c>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
1000b9c8:	0001883a 	nop
1000b9cc:	00003906 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000b9d0:	0001883a 	nop
1000b9d4:	00003706 	br	1000bab4 <___vfprintf_internal_r+0x207c>

		/* the string or number proper */
#ifdef FLOATING_POINT
		if ((flags & FPT) == 0) {
			PRINT (cp, size);
1000b9d8:	0001883a 	nop
1000b9dc:	00003506 	br	1000bab4 <___vfprintf_internal_r+0x207c>
		} else {	/* glue together f_p fragments */
			if (ch >= 'f') {	/* 'f' or 'g' */
				if (_fpvalue == 0) {
					/* kludge for __dtoa irregularity */
					PRINT ("0", 1);
1000b9e0:	0001883a 	nop
1000b9e4:	00003306 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					if (expt < ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
1000b9e8:	0001883a 	nop
1000b9ec:	00003106 	br	1000bab4 <___vfprintf_internal_r+0x207c>
						PAD (ndig - 1, zeroes);
1000b9f0:	0001883a 	nop
1000b9f4:	00002f06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000b9f8:	0001883a 	nop
1000b9fc:	00002d06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					}
				} else if (expt <= 0) {
					PRINT ("0", 1);
1000ba00:	0001883a 	nop
1000ba04:	00002b06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					if (expt || ndig || flags & ALT) {
						PRINT (decimal_point, decp_len);
1000ba08:	0001883a 	nop
1000ba0c:	00002906 	br	1000bab4 <___vfprintf_internal_r+0x207c>
						PAD (-expt, zeroes);
1000ba10:	0001883a 	nop
1000ba14:	00002706 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000ba18:	0001883a 	nop
1000ba1c:	00002506 	br	1000bab4 <___vfprintf_internal_r+0x207c>
						PRINT (cp, ndig);
1000ba20:	0001883a 	nop
1000ba24:	00002306 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					}
				} else {
					char *convbuf = cp;
					PRINTANDPAD(cp, convbuf + ndig,
1000ba28:	0001883a 	nop
1000ba2c:	00002106 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000ba30:	0001883a 	nop
1000ba34:	00001f06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000ba38:	0001883a 	nop
1000ba3c:	00001d06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					    if (cp > convbuf + ndig)
						cp = convbuf + ndig;
					}
#endif
					if (expt < ndig || flags & ALT)
					    PRINT (decimal_point, decp_len);
1000ba40:	0001883a 	nop
1000ba44:	00001b06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					PRINTANDPAD (cp, convbuf + ndig,
1000ba48:	0001883a 	nop
1000ba4c:	00001906 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000ba50:	0001883a 	nop
1000ba54:	00001706 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000ba58:	0001883a 	nop
1000ba5c:	00001506 	br	1000bab4 <___vfprintf_internal_r+0x207c>
						     ndig - expt, zeroes);
				}
			} else {	/* 'a', 'A', 'e', or 'E' */
				if (ndig > 1 || flags & ALT) {
					PRINT (cp, 1);
1000ba60:	0001883a 	nop
1000ba64:	00001306 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					cp++;
					PRINT (decimal_point, decp_len);
1000ba68:	0001883a 	nop
1000ba6c:	00001106 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					if (_fpvalue) {
						PRINT (cp, ndig - 1);
1000ba70:	0001883a 	nop
1000ba74:	00000f06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
					} else	/* 0.[0..] */
						/* __dtoa irregularity */
						PAD (ndig - 1, zeroes);
1000ba78:	0001883a 	nop
1000ba7c:	00000d06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000ba80:	0001883a 	nop
1000ba84:	00000b06 	br	1000bab4 <___vfprintf_internal_r+0x207c>
				} else	/* XeYYY */
					PRINT (cp, 1);
1000ba88:	0001883a 	nop
1000ba8c:	00000906 	br	1000bab4 <___vfprintf_internal_r+0x207c>
				PRINT (expstr, expsize);
1000ba90:	0001883a 	nop
1000ba94:	00000706 	br	1000bab4 <___vfprintf_internal_r+0x207c>
#else /* !FLOATING_POINT */
		PRINT (cp, size);
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
1000ba98:	0001883a 	nop
1000ba9c:	00000506 	br	1000bab4 <___vfprintf_internal_r+0x207c>
1000baa0:	0001883a 	nop
1000baa4:	00000306 	br	1000bab4 <___vfprintf_internal_r+0x207c>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
1000baa8:	0001883a 	nop
1000baac:	00000106 	br	1000bab4 <___vfprintf_internal_r+0x207c>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
1000bab0:	0001883a 	nop
error:
	if (malloc_buf != NULL)
1000bab4:	e0bfb817 	ldw	r2,-288(fp)
1000bab8:	10000326 	beq	r2,zero,1000bac8 <___vfprintf_internal_r+0x2090>
		_free_r (data, malloc_buf);
1000babc:	e17fb817 	ldw	r5,-288(fp)
1000bac0:	e13fe617 	ldw	r4,-104(fp)
1000bac4:	000e9740 	call	1000e974 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
1000bac8:	e0bfe717 	ldw	r2,-100(fp)
1000bacc:	1080030b 	ldhu	r2,12(r2)
1000bad0:	10bfffcc 	andi	r2,r2,65535
1000bad4:	1080100c 	andi	r2,r2,64
1000bad8:	1000021e 	bne	r2,zero,1000bae4 <___vfprintf_internal_r+0x20ac>
1000badc:	e0bfac17 	ldw	r2,-336(fp)
1000bae0:	00000206 	br	1000baec <___vfprintf_internal_r+0x20b4>
1000bae4:	00bfffc4 	movi	r2,-1
1000bae8:	0001883a 	nop
	/* NOTREACHED */
}
1000baec:	e6fff804 	addi	sp,fp,-32
1000baf0:	dfc00917 	ldw	ra,36(sp)
1000baf4:	df000817 	ldw	fp,32(sp)
1000baf8:	ddc00717 	ldw	r23,28(sp)
1000bafc:	dd800617 	ldw	r22,24(sp)
1000bb00:	dd400517 	ldw	r21,20(sp)
1000bb04:	dd000417 	ldw	r20,16(sp)
1000bb08:	dcc00317 	ldw	r19,12(sp)
1000bb0c:	dc800217 	ldw	r18,8(sp)
1000bb10:	dc400117 	ldw	r17,4(sp)
1000bb14:	dc000017 	ldw	r16,0(sp)
1000bb18:	dec00a04 	addi	sp,sp,40
1000bb1c:	f800283a 	ret

1000bb20 <cvt>:
   [aAeEfFgG]; if it is [aA], then the return string lives in BUF,
   otherwise the return value shares the mprec reentrant storage.  */
static char *
cvt(struct _reent *data, _PRINTF_FLOAT_TYPE value, int ndigits, int flags,
    char *sign, int *decpt, int ch, int *length, char *buf)
{
1000bb20:	deffef04 	addi	sp,sp,-68
1000bb24:	dfc01015 	stw	ra,64(sp)
1000bb28:	df000f15 	stw	fp,60(sp)
1000bb2c:	df000f04 	addi	fp,sp,60
1000bb30:	e13ffc15 	stw	r4,-16(fp)
1000bb34:	e17ffd15 	stw	r5,-12(fp)
1000bb38:	e1bffe15 	stw	r6,-8(fp)
1000bb3c:	e1ffff15 	stw	r7,-4(fp)
	int mode, dsgn;
	char *digits, *bp, *rve;
# ifdef _NO_LONGDBL
	union double_union tmp;

	tmp.d = value;
1000bb40:	e0bffd17 	ldw	r2,-12(fp)
1000bb44:	e0bffa15 	stw	r2,-24(fp)
1000bb48:	e0bffe17 	ldw	r2,-8(fp)
1000bb4c:	e0bffb15 	stw	r2,-20(fp)
	if (word0 (tmp) & Sign_bit) { /* this will check for < 0 and -0.0 */
1000bb50:	e0bffb17 	ldw	r2,-20(fp)
1000bb54:	1000090e 	bge	r2,zero,1000bb7c <cvt+0x5c>
		value = -value;
1000bb58:	e0bffd17 	ldw	r2,-12(fp)
1000bb5c:	e0bffd15 	stw	r2,-12(fp)
1000bb60:	e0bffe17 	ldw	r2,-8(fp)
1000bb64:	10a0003c 	xorhi	r2,r2,32768
1000bb68:	e0bffe15 	stw	r2,-8(fp)
		*sign = '-';
1000bb6c:	e0800317 	ldw	r2,12(fp)
1000bb70:	00c00b44 	movi	r3,45
1000bb74:	10c00005 	stb	r3,0(r2)
1000bb78:	00000206 	br	1000bb84 <cvt+0x64>
	} else
		*sign = '\000';
1000bb7c:	e0800317 	ldw	r2,12(fp)
1000bb80:	10000005 	stb	zero,0(r2)
		}
		*length = bp - buf;
		return buf;
	}
# endif /* _WANT_IO_C99_FORMATS */
	if (ch == 'f' || ch == 'F') {
1000bb84:	e0800517 	ldw	r2,20(fp)
1000bb88:	108019a0 	cmpeqi	r2,r2,102
1000bb8c:	1000031e 	bne	r2,zero,1000bb9c <cvt+0x7c>
1000bb90:	e0800517 	ldw	r2,20(fp)
1000bb94:	10801198 	cmpnei	r2,r2,70
1000bb98:	1000031e 	bne	r2,zero,1000bba8 <cvt+0x88>
		mode = 3;		/* ndigits after the decimal point */
1000bb9c:	008000c4 	movi	r2,3
1000bba0:	e0bff515 	stw	r2,-44(fp)
1000bba4:	00000b06 	br	1000bbd4 <cvt+0xb4>
	} else {
		/* To obtain ndigits after the decimal point for the 'e'
		 * and 'E' formats, round to ndigits + 1 significant
		 * figures.
		 */
		if (ch == 'e' || ch == 'E') {
1000bba8:	e0800517 	ldw	r2,20(fp)
1000bbac:	10801960 	cmpeqi	r2,r2,101
1000bbb0:	1000031e 	bne	r2,zero,1000bbc0 <cvt+0xa0>
1000bbb4:	e0800517 	ldw	r2,20(fp)
1000bbb8:	10801158 	cmpnei	r2,r2,69
1000bbbc:	1000031e 	bne	r2,zero,1000bbcc <cvt+0xac>
			ndigits++;
1000bbc0:	e0bfff17 	ldw	r2,-4(fp)
1000bbc4:	10800044 	addi	r2,r2,1
1000bbc8:	e0bfff15 	stw	r2,-4(fp)
		}
		mode = 2;		/* ndigits significant digits */
1000bbcc:	00800084 	movi	r2,2
1000bbd0:	e0bff515 	stw	r2,-44(fp)
	}

	digits = _DTOA_R (data, value, mode, ndigits, decpt, &dsgn, &rve);
1000bbd4:	e0bff904 	addi	r2,fp,-28
1000bbd8:	d8800315 	stw	r2,12(sp)
1000bbdc:	e0bff804 	addi	r2,fp,-32
1000bbe0:	d8800215 	stw	r2,8(sp)
1000bbe4:	e0800417 	ldw	r2,16(fp)
1000bbe8:	d8800115 	stw	r2,4(sp)
1000bbec:	e0bfff17 	ldw	r2,-4(fp)
1000bbf0:	d8800015 	stw	r2,0(sp)
1000bbf4:	e1fff517 	ldw	r7,-44(fp)
1000bbf8:	e17ffd17 	ldw	r5,-12(fp)
1000bbfc:	e1bffe17 	ldw	r6,-8(fp)
1000bc00:	e13ffc17 	ldw	r4,-16(fp)
1000bc04:	000c3d80 	call	1000c3d8 <_dtoa_r>
1000bc08:	e0bff715 	stw	r2,-36(fp)

	if ((ch != 'g' && ch != 'G') || flags & ALT) {	/* Print trailing zeros */
1000bc0c:	e0800517 	ldw	r2,20(fp)
1000bc10:	108019e0 	cmpeqi	r2,r2,103
1000bc14:	1000031e 	bne	r2,zero,1000bc24 <cvt+0x104>
1000bc18:	e0800517 	ldw	r2,20(fp)
1000bc1c:	108011d8 	cmpnei	r2,r2,71
1000bc20:	1000031e 	bne	r2,zero,1000bc30 <cvt+0x110>
1000bc24:	e0800217 	ldw	r2,8(fp)
1000bc28:	1080004c 	andi	r2,r2,1
1000bc2c:	10003326 	beq	r2,zero,1000bcfc <cvt+0x1dc>
		bp = digits + ndigits;
1000bc30:	e0bfff17 	ldw	r2,-4(fp)
1000bc34:	e0fff717 	ldw	r3,-36(fp)
1000bc38:	1885883a 	add	r2,r3,r2
1000bc3c:	e0bff615 	stw	r2,-40(fp)
		if (ch == 'f' || ch == 'F') {
1000bc40:	e0800517 	ldw	r2,20(fp)
1000bc44:	108019a0 	cmpeqi	r2,r2,102
1000bc48:	1000031e 	bne	r2,zero,1000bc58 <cvt+0x138>
1000bc4c:	e0800517 	ldw	r2,20(fp)
1000bc50:	10801198 	cmpnei	r2,r2,70
1000bc54:	1000181e 	bne	r2,zero,1000bcb8 <cvt+0x198>
			if (*digits == '0' && value)
1000bc58:	e0bff717 	ldw	r2,-36(fp)
1000bc5c:	10800003 	ldbu	r2,0(r2)
1000bc60:	10803fcc 	andi	r2,r2,255
1000bc64:	1080201c 	xori	r2,r2,128
1000bc68:	10bfe004 	addi	r2,r2,-128
1000bc6c:	10800c18 	cmpnei	r2,r2,48
1000bc70:	10000b1e 	bne	r2,zero,1000bca0 <cvt+0x180>
1000bc74:	000d883a 	mov	r6,zero
1000bc78:	000f883a 	mov	r7,zero
1000bc7c:	e13ffd17 	ldw	r4,-12(fp)
1000bc80:	e17ffe17 	ldw	r5,-8(fp)
1000bc84:	00154180 	call	10015418 <__eqdf2>
1000bc88:	10000526 	beq	r2,zero,1000bca0 <cvt+0x180>
				*decpt = -ndigits + 1;
1000bc8c:	00c00044 	movi	r3,1
1000bc90:	e0bfff17 	ldw	r2,-4(fp)
1000bc94:	1887c83a 	sub	r3,r3,r2
1000bc98:	e0800417 	ldw	r2,16(fp)
1000bc9c:	10c00015 	stw	r3,0(r2)
			bp += *decpt;
1000bca0:	e0800417 	ldw	r2,16(fp)
1000bca4:	10800017 	ldw	r2,0(r2)
1000bca8:	1007883a 	mov	r3,r2
1000bcac:	e0bff617 	ldw	r2,-40(fp)
1000bcb0:	10c5883a 	add	r2,r2,r3
1000bcb4:	e0bff615 	stw	r2,-40(fp)
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
1000bcb8:	000d883a 	mov	r6,zero
1000bcbc:	000f883a 	mov	r7,zero
1000bcc0:	e13ffd17 	ldw	r4,-12(fp)
1000bcc4:	e17ffe17 	ldw	r5,-8(fp)
1000bcc8:	00154180 	call	10015418 <__eqdf2>
1000bccc:	1000081e 	bne	r2,zero,1000bcf0 <cvt+0x1d0>
			rve = bp;
1000bcd0:	e0bff617 	ldw	r2,-40(fp)
1000bcd4:	e0bff915 	stw	r2,-28(fp)
		while (rve < bp)
1000bcd8:	00000506 	br	1000bcf0 <cvt+0x1d0>
			*rve++ = '0';
1000bcdc:	e0bff917 	ldw	r2,-28(fp)
1000bce0:	10c00044 	addi	r3,r2,1
1000bce4:	e0fff915 	stw	r3,-28(fp)
1000bce8:	00c00c04 	movi	r3,48
1000bcec:	10c00005 	stb	r3,0(r2)
				*decpt = -ndigits + 1;
			bp += *decpt;
		}
		if (value == 0)	/* kludge for __dtoa irregularity */
			rve = bp;
		while (rve < bp)
1000bcf0:	e0fff917 	ldw	r3,-28(fp)
1000bcf4:	e0bff617 	ldw	r2,-40(fp)
1000bcf8:	18bff836 	bltu	r3,r2,1000bcdc <__alt_data_end+0xf800bcdc>
			*rve++ = '0';
	}
	*length = rve - digits;
1000bcfc:	e0bff917 	ldw	r2,-28(fp)
1000bd00:	1007883a 	mov	r3,r2
1000bd04:	e0bff717 	ldw	r2,-36(fp)
1000bd08:	1887c83a 	sub	r3,r3,r2
1000bd0c:	e0800617 	ldw	r2,24(fp)
1000bd10:	10c00015 	stw	r3,0(r2)
	return (digits);
1000bd14:	e0bff717 	ldw	r2,-36(fp)
}
1000bd18:	e037883a 	mov	sp,fp
1000bd1c:	dfc00117 	ldw	ra,4(sp)
1000bd20:	df000017 	ldw	fp,0(sp)
1000bd24:	dec00204 	addi	sp,sp,8
1000bd28:	f800283a 	ret

1000bd2c <exponent>:

static int
exponent(char *p0, int exp, int fmtch)
{
1000bd2c:	defff704 	addi	sp,sp,-36
1000bd30:	dfc00815 	stw	ra,32(sp)
1000bd34:	df000715 	stw	fp,28(sp)
1000bd38:	dc400615 	stw	r17,24(sp)
1000bd3c:	dc000515 	stw	r16,20(sp)
1000bd40:	df000704 	addi	fp,sp,28
1000bd44:	e13ffb15 	stw	r4,-20(fp)
1000bd48:	e17ffc15 	stw	r5,-16(fp)
1000bd4c:	e1bffd15 	stw	r6,-12(fp)
	int isa = fmtch == 'a' || fmtch == 'A';
# else
#  define isa 0
# endif

	p = p0;
1000bd50:	e47ffb17 	ldw	r17,-20(fp)
	*p++ = isa ? 'p' - 'a' + fmtch : fmtch;
1000bd54:	8805883a 	mov	r2,r17
1000bd58:	14400044 	addi	r17,r2,1
1000bd5c:	e0fffd17 	ldw	r3,-12(fp)
1000bd60:	10c00005 	stb	r3,0(r2)
	if (exp < 0) {
1000bd64:	e0bffc17 	ldw	r2,-16(fp)
1000bd68:	1000080e 	bge	r2,zero,1000bd8c <exponent+0x60>
		exp = -exp;
1000bd6c:	e0bffc17 	ldw	r2,-16(fp)
1000bd70:	0085c83a 	sub	r2,zero,r2
1000bd74:	e0bffc15 	stw	r2,-16(fp)
		*p++ = '-';
1000bd78:	8805883a 	mov	r2,r17
1000bd7c:	14400044 	addi	r17,r2,1
1000bd80:	00c00b44 	movi	r3,45
1000bd84:	10c00005 	stb	r3,0(r2)
1000bd88:	00000406 	br	1000bd9c <exponent+0x70>
	}
	else
		*p++ = '+';
1000bd8c:	8805883a 	mov	r2,r17
1000bd90:	14400044 	addi	r17,r2,1
1000bd94:	00c00ac4 	movi	r3,43
1000bd98:	10c00005 	stb	r3,0(r2)
	t = expbuf + MAXEXPLEN;
1000bd9c:	e43ffac4 	addi	r16,fp,-21
	if (exp > 9) {
1000bda0:	e0bffc17 	ldw	r2,-16(fp)
1000bda4:	10800290 	cmplti	r2,r2,10
1000bda8:	10001d1e 	bne	r2,zero,1000be20 <exponent+0xf4>
		do {
			*--t = to_char (exp % 10);
1000bdac:	843fffc4 	addi	r16,r16,-1
1000bdb0:	e0bffc17 	ldw	r2,-16(fp)
1000bdb4:	01400284 	movi	r5,10
1000bdb8:	1009883a 	mov	r4,r2
1000bdbc:	000261c0 	call	1000261c <__modsi3>
1000bdc0:	10800c04 	addi	r2,r2,48
1000bdc4:	80800005 	stb	r2,0(r16)
		} while ((exp /= 10) > 9);
1000bdc8:	e0bffc17 	ldw	r2,-16(fp)
1000bdcc:	01400284 	movi	r5,10
1000bdd0:	1009883a 	mov	r4,r2
1000bdd4:	00025980 	call	10002598 <__divsi3>
1000bdd8:	e0bffc15 	stw	r2,-16(fp)
1000bddc:	e0bffc17 	ldw	r2,-16(fp)
1000bde0:	10800288 	cmpgei	r2,r2,10
1000bde4:	103ff11e 	bne	r2,zero,1000bdac <__alt_data_end+0xf800bdac>
		*--t = to_char (exp);
1000bde8:	843fffc4 	addi	r16,r16,-1
1000bdec:	e0bffc17 	ldw	r2,-16(fp)
1000bdf0:	10800c04 	addi	r2,r2,48
1000bdf4:	80800005 	stb	r2,0(r16)
		for (; t < expbuf + MAXEXPLEN; *p++ = *t++);
1000bdf8:	00000606 	br	1000be14 <exponent+0xe8>
1000bdfc:	8805883a 	mov	r2,r17
1000be00:	14400044 	addi	r17,r2,1
1000be04:	8007883a 	mov	r3,r16
1000be08:	1c000044 	addi	r16,r3,1
1000be0c:	18c00003 	ldbu	r3,0(r3)
1000be10:	10c00005 	stb	r3,0(r2)
1000be14:	e0bffac4 	addi	r2,fp,-21
1000be18:	80bff836 	bltu	r16,r2,1000bdfc <__alt_data_end+0xf800bdfc>
1000be1c:	00000906 	br	1000be44 <exponent+0x118>
	}
	else {
		if (!isa)
			*p++ = '0';
1000be20:	8805883a 	mov	r2,r17
1000be24:	14400044 	addi	r17,r2,1
1000be28:	00c00c04 	movi	r3,48
1000be2c:	10c00005 	stb	r3,0(r2)
		*p++ = to_char (exp);
1000be30:	8805883a 	mov	r2,r17
1000be34:	14400044 	addi	r17,r2,1
1000be38:	e0fffc17 	ldw	r3,-16(fp)
1000be3c:	18c00c04 	addi	r3,r3,48
1000be40:	10c00005 	stb	r3,0(r2)
	}
	return (p - p0);
1000be44:	8807883a 	mov	r3,r17
1000be48:	e0bffb17 	ldw	r2,-20(fp)
1000be4c:	1885c83a 	sub	r2,r3,r2
}
1000be50:	e6fffe04 	addi	sp,fp,-8
1000be54:	dfc00317 	ldw	ra,12(sp)
1000be58:	df000217 	ldw	fp,8(sp)
1000be5c:	dc400117 	ldw	r17,4(sp)
1000be60:	dc000017 	ldw	r16,0(sp)
1000be64:	dec00404 	addi	sp,sp,16
1000be68:	f800283a 	ret

1000be6c <__swsetup_r>:

int
_DEFUN(__swsetup_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000be6c:	defffb04 	addi	sp,sp,-20
1000be70:	dfc00415 	stw	ra,16(sp)
1000be74:	df000315 	stw	fp,12(sp)
1000be78:	dc000215 	stw	r16,8(sp)
1000be7c:	df000304 	addi	fp,sp,12
1000be80:	e13ffe15 	stw	r4,-8(fp)
1000be84:	2821883a 	mov	r16,r5
  /* Make sure stdio is set up.  */

  CHECK_INIT (_REENT, fp);
1000be88:	008403b4 	movhi	r2,4110
1000be8c:	10a4cc04 	addi	r2,r2,-27856
1000be90:	10800017 	ldw	r2,0(r2)
1000be94:	e0bffd15 	stw	r2,-12(fp)
1000be98:	e0bffd17 	ldw	r2,-12(fp)
1000be9c:	10000526 	beq	r2,zero,1000beb4 <__swsetup_r+0x48>
1000bea0:	e0bffd17 	ldw	r2,-12(fp)
1000bea4:	10800e17 	ldw	r2,56(r2)
1000bea8:	1000021e 	bne	r2,zero,1000beb4 <__swsetup_r+0x48>
1000beac:	e13ffd17 	ldw	r4,-12(fp)
1000beb0:	000e7440 	call	1000e744 <__sinit>

  /*
   * If we are not writing, we had better be reading and writing.
   */

  if ((fp->_flags & __SWR) == 0)
1000beb4:	8080030b 	ldhu	r2,12(r16)
1000beb8:	10bfffcc 	andi	r2,r2,65535
1000bebc:	1080020c 	andi	r2,r2,8
1000bec0:	1000241e 	bne	r2,zero,1000bf54 <__swsetup_r+0xe8>
    {
      if ((fp->_flags & __SRW) == 0)
1000bec4:	8080030b 	ldhu	r2,12(r16)
1000bec8:	10bfffcc 	andi	r2,r2,65535
1000becc:	1080040c 	andi	r2,r2,16
1000bed0:	1000081e 	bne	r2,zero,1000bef4 <__swsetup_r+0x88>
        {
	  ptr->_errno = EBADF;
1000bed4:	e0bffe17 	ldw	r2,-8(fp)
1000bed8:	00c00244 	movi	r3,9
1000bedc:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
1000bee0:	8080030b 	ldhu	r2,12(r16)
1000bee4:	10801014 	ori	r2,r2,64
1000bee8:	8080030d 	sth	r2,12(r16)
	  return EOF;
1000beec:	00bfffc4 	movi	r2,-1
1000bef0:	00004206 	br	1000bffc <__swsetup_r+0x190>
        }
      if (fp->_flags & __SRD)
1000bef4:	8080030b 	ldhu	r2,12(r16)
1000bef8:	10bfffcc 	andi	r2,r2,65535
1000befc:	1080010c 	andi	r2,r2,4
1000bf00:	10001126 	beq	r2,zero,1000bf48 <__swsetup_r+0xdc>
	{
	  /* clobber any ungetc data */
	  if (HASUB (fp))
1000bf04:	80800c17 	ldw	r2,48(r16)
1000bf08:	10000826 	beq	r2,zero,1000bf2c <__swsetup_r+0xc0>
	    FREEUB (ptr, fp);
1000bf0c:	80c00c17 	ldw	r3,48(r16)
1000bf10:	80801004 	addi	r2,r16,64
1000bf14:	18800426 	beq	r3,r2,1000bf28 <__swsetup_r+0xbc>
1000bf18:	80800c17 	ldw	r2,48(r16)
1000bf1c:	100b883a 	mov	r5,r2
1000bf20:	e13ffe17 	ldw	r4,-8(fp)
1000bf24:	000e9740 	call	1000e974 <_free_r>
1000bf28:	80000c15 	stw	zero,48(r16)
	  fp->_flags &= ~(__SRD | __SEOF);
1000bf2c:	80c0030b 	ldhu	r3,12(r16)
1000bf30:	00bff6c4 	movi	r2,-37
1000bf34:	1884703a 	and	r2,r3,r2
1000bf38:	8080030d 	sth	r2,12(r16)
	  fp->_r = 0;
1000bf3c:	80000115 	stw	zero,4(r16)
	  fp->_p = fp->_bf._base;
1000bf40:	80800417 	ldw	r2,16(r16)
1000bf44:	80800015 	stw	r2,0(r16)
	}
      fp->_flags |= __SWR;
1000bf48:	8080030b 	ldhu	r2,12(r16)
1000bf4c:	10800214 	ori	r2,r2,8
1000bf50:	8080030d 	sth	r2,12(r16)
  /*
   * Make a buffer if necessary, then set _w.
   * A string I/O file should not explicitly allocate a buffer
   * unless asprintf is being used.
   */
  if (fp->_bf._base == NULL
1000bf54:	80800417 	ldw	r2,16(r16)
1000bf58:	10000b1e 	bne	r2,zero,1000bf88 <__swsetup_r+0x11c>
        && (!(fp->_flags & __SSTR) || (fp->_flags & __SMBF)))
1000bf5c:	8080030b 	ldhu	r2,12(r16)
1000bf60:	10bfffcc 	andi	r2,r2,65535
1000bf64:	1080800c 	andi	r2,r2,512
1000bf68:	10000426 	beq	r2,zero,1000bf7c <__swsetup_r+0x110>
1000bf6c:	8080030b 	ldhu	r2,12(r16)
1000bf70:	10bfffcc 	andi	r2,r2,65535
1000bf74:	1080200c 	andi	r2,r2,128
1000bf78:	10000326 	beq	r2,zero,1000bf88 <__swsetup_r+0x11c>
    __smakebuf_r (ptr, fp);
1000bf7c:	800b883a 	mov	r5,r16
1000bf80:	e13ffe17 	ldw	r4,-8(fp)
1000bf84:	000fa8c0 	call	1000fa8c <__smakebuf_r>

  if (fp->_flags & __SLBF)
1000bf88:	8080030b 	ldhu	r2,12(r16)
1000bf8c:	10bfffcc 	andi	r2,r2,65535
1000bf90:	1080004c 	andi	r2,r2,1
1000bf94:	10000526 	beq	r2,zero,1000bfac <__swsetup_r+0x140>
      /*
       * It is line buffered, so make _lbfsize be -_bufsize
       * for the putc() macro.  We will change _lbfsize back
       * to 0 whenever we turn off __SWR.
       */
      fp->_w = 0;
1000bf98:	80000215 	stw	zero,8(r16)
      fp->_lbfsize = -fp->_bf._size;
1000bf9c:	80800517 	ldw	r2,20(r16)
1000bfa0:	0085c83a 	sub	r2,zero,r2
1000bfa4:	80800615 	stw	r2,24(r16)
1000bfa8:	00000806 	br	1000bfcc <__swsetup_r+0x160>
    }
  else
    fp->_w = fp->_flags & __SNBF ? 0 : fp->_bf._size;
1000bfac:	8080030b 	ldhu	r2,12(r16)
1000bfb0:	10bfffcc 	andi	r2,r2,65535
1000bfb4:	1080008c 	andi	r2,r2,2
1000bfb8:	1000021e 	bne	r2,zero,1000bfc4 <__swsetup_r+0x158>
1000bfbc:	80800517 	ldw	r2,20(r16)
1000bfc0:	00000106 	br	1000bfc8 <__swsetup_r+0x15c>
1000bfc4:	0005883a 	mov	r2,zero
1000bfc8:	80800215 	stw	r2,8(r16)

  if (!fp->_bf._base && (fp->_flags & __SMBF))
1000bfcc:	80800417 	ldw	r2,16(r16)
1000bfd0:	1000091e 	bne	r2,zero,1000bff8 <__swsetup_r+0x18c>
1000bfd4:	8080030b 	ldhu	r2,12(r16)
1000bfd8:	10bfffcc 	andi	r2,r2,65535
1000bfdc:	1080200c 	andi	r2,r2,128
1000bfe0:	10000526 	beq	r2,zero,1000bff8 <__swsetup_r+0x18c>
    {
      /* __smakebuf_r set errno, but not flag */
      fp->_flags |= __SERR;
1000bfe4:	8080030b 	ldhu	r2,12(r16)
1000bfe8:	10801014 	ori	r2,r2,64
1000bfec:	8080030d 	sth	r2,12(r16)
      return EOF;
1000bff0:	00bfffc4 	movi	r2,-1
1000bff4:	00000106 	br	1000bffc <__swsetup_r+0x190>
    }
  return 0;
1000bff8:	0005883a 	mov	r2,zero
}
1000bffc:	e6ffff04 	addi	sp,fp,-4
1000c000:	dfc00217 	ldw	ra,8(sp)
1000c004:	df000117 	ldw	fp,4(sp)
1000c008:	dc000017 	ldw	r16,0(sp)
1000c00c:	dec00304 	addi	sp,sp,12
1000c010:	f800283a 	ret

1000c014 <quorem>:

static int
_DEFUN (quorem,
	(b, S),
	_Bigint * b _AND _Bigint * S)
{
1000c014:	deffef04 	addi	sp,sp,-68
1000c018:	dfc01015 	stw	ra,64(sp)
1000c01c:	df000f15 	stw	fp,60(sp)
1000c020:	df000f04 	addi	fp,sp,60
1000c024:	e13ffe15 	stw	r4,-8(fp)
1000c028:	e17fff15 	stw	r5,-4(fp)
#ifdef Pack_32
  __Long z;
  __ULong si, zs;
#endif

  n = S->_wds;
1000c02c:	e0bfff17 	ldw	r2,-4(fp)
1000c030:	10800417 	ldw	r2,16(r2)
1000c034:	e0bff115 	stw	r2,-60(fp)
#ifdef DEBUG
  /*debug*/ if (b->_wds > n)
    /*debug*/ Bug ("oversize b in quorem");
#endif
  if (b->_wds < n)
1000c038:	e0bffe17 	ldw	r2,-8(fp)
1000c03c:	10c00417 	ldw	r3,16(r2)
1000c040:	e0bff117 	ldw	r2,-60(fp)
1000c044:	1880020e 	bge	r3,r2,1000c050 <quorem+0x3c>
    return 0;
1000c048:	0005883a 	mov	r2,zero
1000c04c:	0000dd06 	br	1000c3c4 <quorem+0x3b0>
  sx = S->_x;
1000c050:	e0bfff17 	ldw	r2,-4(fp)
1000c054:	10800504 	addi	r2,r2,20
1000c058:	e0bff715 	stw	r2,-36(fp)
  sxe = sx + --n;
1000c05c:	e0bff117 	ldw	r2,-60(fp)
1000c060:	10bfffc4 	addi	r2,r2,-1
1000c064:	e0bff115 	stw	r2,-60(fp)
1000c068:	e0bff117 	ldw	r2,-60(fp)
1000c06c:	1085883a 	add	r2,r2,r2
1000c070:	1085883a 	add	r2,r2,r2
1000c074:	1007883a 	mov	r3,r2
1000c078:	e0bff717 	ldw	r2,-36(fp)
1000c07c:	10c5883a 	add	r2,r2,r3
1000c080:	e0bff815 	stw	r2,-32(fp)
  bx = b->_x;
1000c084:	e0bffe17 	ldw	r2,-8(fp)
1000c088:	10800504 	addi	r2,r2,20
1000c08c:	e0bff515 	stw	r2,-44(fp)
  bxe = bx + n;
1000c090:	e0bff117 	ldw	r2,-60(fp)
1000c094:	1085883a 	add	r2,r2,r2
1000c098:	1085883a 	add	r2,r2,r2
1000c09c:	1007883a 	mov	r3,r2
1000c0a0:	e0bff517 	ldw	r2,-44(fp)
1000c0a4:	10c5883a 	add	r2,r2,r3
1000c0a8:	e0bff615 	stw	r2,-40(fp)
  q = *bxe / (*sxe + 1);	/* ensure q <= true quotient */
1000c0ac:	e0bff617 	ldw	r2,-40(fp)
1000c0b0:	10c00017 	ldw	r3,0(r2)
1000c0b4:	e0bff817 	ldw	r2,-32(fp)
1000c0b8:	10800017 	ldw	r2,0(r2)
1000c0bc:	10800044 	addi	r2,r2,1
1000c0c0:	100b883a 	mov	r5,r2
1000c0c4:	1809883a 	mov	r4,r3
1000c0c8:	00026900 	call	10002690 <__udivsi3>
1000c0cc:	e0bff415 	stw	r2,-48(fp)
#ifdef DEBUG
  /*debug*/ if (q > 9)
    /*debug*/ Bug ("oversized quotient in quorem");
#endif
  if (q)
1000c0d0:	e0bff417 	ldw	r2,-48(fp)
1000c0d4:	10005726 	beq	r2,zero,1000c234 <quorem+0x220>
    {
      borrow = 0;
1000c0d8:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
1000c0dc:	e03ff315 	stw	zero,-52(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
1000c0e0:	e0bff717 	ldw	r2,-36(fp)
1000c0e4:	10c00104 	addi	r3,r2,4
1000c0e8:	e0fff715 	stw	r3,-36(fp)
1000c0ec:	10800017 	ldw	r2,0(r2)
1000c0f0:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) * q + carry;
1000c0f4:	e0bff917 	ldw	r2,-28(fp)
1000c0f8:	10bfffcc 	andi	r2,r2,65535
1000c0fc:	e17ff417 	ldw	r5,-48(fp)
1000c100:	1009883a 	mov	r4,r2
1000c104:	00065d80 	call	100065d8 <__mulsi3>
1000c108:	1007883a 	mov	r3,r2
1000c10c:	e0bff317 	ldw	r2,-52(fp)
1000c110:	1885883a 	add	r2,r3,r2
1000c114:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) * q + (ys >> 16);
1000c118:	e0bff917 	ldw	r2,-28(fp)
1000c11c:	1004d43a 	srli	r2,r2,16
1000c120:	e17ff417 	ldw	r5,-48(fp)
1000c124:	1009883a 	mov	r4,r2
1000c128:	00065d80 	call	100065d8 <__mulsi3>
1000c12c:	1007883a 	mov	r3,r2
1000c130:	e0bffa17 	ldw	r2,-24(fp)
1000c134:	1004d43a 	srli	r2,r2,16
1000c138:	1885883a 	add	r2,r3,r2
1000c13c:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
1000c140:	e0bffb17 	ldw	r2,-20(fp)
1000c144:	1004d43a 	srli	r2,r2,16
1000c148:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
1000c14c:	e0bff517 	ldw	r2,-44(fp)
1000c150:	10800017 	ldw	r2,0(r2)
1000c154:	10ffffcc 	andi	r3,r2,65535
1000c158:	e0bffa17 	ldw	r2,-24(fp)
1000c15c:	10bfffcc 	andi	r2,r2,65535
1000c160:	1887c83a 	sub	r3,r3,r2
1000c164:	e0bff217 	ldw	r2,-56(fp)
1000c168:	1885883a 	add	r2,r3,r2
1000c16c:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
1000c170:	e0bffc17 	ldw	r2,-16(fp)
1000c174:	1005d43a 	srai	r2,r2,16
1000c178:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
1000c17c:	e0bff517 	ldw	r2,-44(fp)
1000c180:	10800017 	ldw	r2,0(r2)
1000c184:	1006d43a 	srli	r3,r2,16
1000c188:	e0bffb17 	ldw	r2,-20(fp)
1000c18c:	10bfffcc 	andi	r2,r2,65535
1000c190:	1887c83a 	sub	r3,r3,r2
1000c194:	e0bff217 	ldw	r2,-56(fp)
1000c198:	1885883a 	add	r2,r3,r2
1000c19c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
1000c1a0:	e0bffd17 	ldw	r2,-12(fp)
1000c1a4:	1005d43a 	srai	r2,r2,16
1000c1a8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
1000c1ac:	e0bff517 	ldw	r2,-44(fp)
1000c1b0:	10c00104 	addi	r3,r2,4
1000c1b4:	e0fff515 	stw	r3,-44(fp)
1000c1b8:	e0fffd17 	ldw	r3,-12(fp)
1000c1bc:	1808943a 	slli	r4,r3,16
1000c1c0:	e0fffc17 	ldw	r3,-16(fp)
1000c1c4:	18ffffcc 	andi	r3,r3,65535
1000c1c8:	20c6b03a 	or	r3,r4,r3
1000c1cc:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
1000c1d0:	e0bff717 	ldw	r2,-36(fp)
1000c1d4:	e0fff817 	ldw	r3,-32(fp)
1000c1d8:	18bfc12e 	bgeu	r3,r2,1000c0e0 <__alt_data_end+0xf800c0e0>
      if (!*bxe)
1000c1dc:	e0bff617 	ldw	r2,-40(fp)
1000c1e0:	10800017 	ldw	r2,0(r2)
1000c1e4:	1000131e 	bne	r2,zero,1000c234 <quorem+0x220>
	{
	  bx = b->_x;
1000c1e8:	e0bffe17 	ldw	r2,-8(fp)
1000c1ec:	10800504 	addi	r2,r2,20
1000c1f0:	e0bff515 	stw	r2,-44(fp)
	  while (--bxe > bx && !*bxe)
1000c1f4:	00000306 	br	1000c204 <quorem+0x1f0>
	    --n;
1000c1f8:	e0bff117 	ldw	r2,-60(fp)
1000c1fc:	10bfffc4 	addi	r2,r2,-1
1000c200:	e0bff115 	stw	r2,-60(fp)
	}
      while (sx <= sxe);
      if (!*bxe)
	{
	  bx = b->_x;
	  while (--bxe > bx && !*bxe)
1000c204:	e0bff617 	ldw	r2,-40(fp)
1000c208:	10bfff04 	addi	r2,r2,-4
1000c20c:	e0bff615 	stw	r2,-40(fp)
1000c210:	e0bff617 	ldw	r2,-40(fp)
1000c214:	e0fff517 	ldw	r3,-44(fp)
1000c218:	1880032e 	bgeu	r3,r2,1000c228 <quorem+0x214>
1000c21c:	e0bff617 	ldw	r2,-40(fp)
1000c220:	10800017 	ldw	r2,0(r2)
1000c224:	103ff426 	beq	r2,zero,1000c1f8 <__alt_data_end+0xf800c1f8>
	    --n;
	  b->_wds = n;
1000c228:	e0bffe17 	ldw	r2,-8(fp)
1000c22c:	e0fff117 	ldw	r3,-60(fp)
1000c230:	10c00415 	stw	r3,16(r2)
	}
    }
  if (cmp (b, S) >= 0)
1000c234:	e17fff17 	ldw	r5,-4(fp)
1000c238:	e13ffe17 	ldw	r4,-8(fp)
1000c23c:	001101c0 	call	1001101c <__mcmp>
1000c240:	10005f16 	blt	r2,zero,1000c3c0 <quorem+0x3ac>
    {
      q++;
1000c244:	e0bff417 	ldw	r2,-48(fp)
1000c248:	10800044 	addi	r2,r2,1
1000c24c:	e0bff415 	stw	r2,-48(fp)
      borrow = 0;
1000c250:	e03ff215 	stw	zero,-56(fp)
      carry = 0;
1000c254:	e03ff315 	stw	zero,-52(fp)
      bx = b->_x;
1000c258:	e0bffe17 	ldw	r2,-8(fp)
1000c25c:	10800504 	addi	r2,r2,20
1000c260:	e0bff515 	stw	r2,-44(fp)
      sx = S->_x;
1000c264:	e0bfff17 	ldw	r2,-4(fp)
1000c268:	10800504 	addi	r2,r2,20
1000c26c:	e0bff715 	stw	r2,-36(fp)
      do
	{
#ifdef Pack_32
	  si = *sx++;
1000c270:	e0bff717 	ldw	r2,-36(fp)
1000c274:	10c00104 	addi	r3,r2,4
1000c278:	e0fff715 	stw	r3,-36(fp)
1000c27c:	10800017 	ldw	r2,0(r2)
1000c280:	e0bff915 	stw	r2,-28(fp)
	  ys = (si & 0xffff) + carry;
1000c284:	e0bff917 	ldw	r2,-28(fp)
1000c288:	10ffffcc 	andi	r3,r2,65535
1000c28c:	e0bff317 	ldw	r2,-52(fp)
1000c290:	1885883a 	add	r2,r3,r2
1000c294:	e0bffa15 	stw	r2,-24(fp)
	  zs = (si >> 16) + (ys >> 16);
1000c298:	e0bff917 	ldw	r2,-28(fp)
1000c29c:	1006d43a 	srli	r3,r2,16
1000c2a0:	e0bffa17 	ldw	r2,-24(fp)
1000c2a4:	1004d43a 	srli	r2,r2,16
1000c2a8:	1885883a 	add	r2,r3,r2
1000c2ac:	e0bffb15 	stw	r2,-20(fp)
	  carry = zs >> 16;
1000c2b0:	e0bffb17 	ldw	r2,-20(fp)
1000c2b4:	1004d43a 	srli	r2,r2,16
1000c2b8:	e0bff315 	stw	r2,-52(fp)
	  y = (*bx & 0xffff) - (ys & 0xffff) + borrow;
1000c2bc:	e0bff517 	ldw	r2,-44(fp)
1000c2c0:	10800017 	ldw	r2,0(r2)
1000c2c4:	10ffffcc 	andi	r3,r2,65535
1000c2c8:	e0bffa17 	ldw	r2,-24(fp)
1000c2cc:	10bfffcc 	andi	r2,r2,65535
1000c2d0:	1887c83a 	sub	r3,r3,r2
1000c2d4:	e0bff217 	ldw	r2,-56(fp)
1000c2d8:	1885883a 	add	r2,r3,r2
1000c2dc:	e0bffc15 	stw	r2,-16(fp)
	  borrow = y >> 16;
1000c2e0:	e0bffc17 	ldw	r2,-16(fp)
1000c2e4:	1005d43a 	srai	r2,r2,16
1000c2e8:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, y);
	  z = (*bx >> 16) - (zs & 0xffff) + borrow;
1000c2ec:	e0bff517 	ldw	r2,-44(fp)
1000c2f0:	10800017 	ldw	r2,0(r2)
1000c2f4:	1006d43a 	srli	r3,r2,16
1000c2f8:	e0bffb17 	ldw	r2,-20(fp)
1000c2fc:	10bfffcc 	andi	r2,r2,65535
1000c300:	1887c83a 	sub	r3,r3,r2
1000c304:	e0bff217 	ldw	r2,-56(fp)
1000c308:	1885883a 	add	r2,r3,r2
1000c30c:	e0bffd15 	stw	r2,-12(fp)
	  borrow = z >> 16;
1000c310:	e0bffd17 	ldw	r2,-12(fp)
1000c314:	1005d43a 	srai	r2,r2,16
1000c318:	e0bff215 	stw	r2,-56(fp)
	  Sign_Extend (borrow, z);
	  Storeinc (bx, z, y);
1000c31c:	e0bff517 	ldw	r2,-44(fp)
1000c320:	10c00104 	addi	r3,r2,4
1000c324:	e0fff515 	stw	r3,-44(fp)
1000c328:	e0fffd17 	ldw	r3,-12(fp)
1000c32c:	1808943a 	slli	r4,r3,16
1000c330:	e0fffc17 	ldw	r3,-16(fp)
1000c334:	18ffffcc 	andi	r3,r3,65535
1000c338:	20c6b03a 	or	r3,r4,r3
1000c33c:	10c00015 	stw	r3,0(r2)
	  borrow = y >> 16;
	  Sign_Extend (borrow, y);
	  *bx++ = y & 0xffff;
#endif
	}
      while (sx <= sxe);
1000c340:	e0bff717 	ldw	r2,-36(fp)
1000c344:	e0fff817 	ldw	r3,-32(fp)
1000c348:	18bfc92e 	bgeu	r3,r2,1000c270 <__alt_data_end+0xf800c270>
      bx = b->_x;
1000c34c:	e0bffe17 	ldw	r2,-8(fp)
1000c350:	10800504 	addi	r2,r2,20
1000c354:	e0bff515 	stw	r2,-44(fp)
      bxe = bx + n;
1000c358:	e0bff117 	ldw	r2,-60(fp)
1000c35c:	1085883a 	add	r2,r2,r2
1000c360:	1085883a 	add	r2,r2,r2
1000c364:	1007883a 	mov	r3,r2
1000c368:	e0bff517 	ldw	r2,-44(fp)
1000c36c:	10c5883a 	add	r2,r2,r3
1000c370:	e0bff615 	stw	r2,-40(fp)
      if (!*bxe)
1000c374:	e0bff617 	ldw	r2,-40(fp)
1000c378:	10800017 	ldw	r2,0(r2)
1000c37c:	1000101e 	bne	r2,zero,1000c3c0 <quorem+0x3ac>
	{
	  while (--bxe > bx && !*bxe)
1000c380:	00000306 	br	1000c390 <quorem+0x37c>
	    --n;
1000c384:	e0bff117 	ldw	r2,-60(fp)
1000c388:	10bfffc4 	addi	r2,r2,-1
1000c38c:	e0bff115 	stw	r2,-60(fp)
      while (sx <= sxe);
      bx = b->_x;
      bxe = bx + n;
      if (!*bxe)
	{
	  while (--bxe > bx && !*bxe)
1000c390:	e0bff617 	ldw	r2,-40(fp)
1000c394:	10bfff04 	addi	r2,r2,-4
1000c398:	e0bff615 	stw	r2,-40(fp)
1000c39c:	e0bff617 	ldw	r2,-40(fp)
1000c3a0:	e0fff517 	ldw	r3,-44(fp)
1000c3a4:	1880032e 	bgeu	r3,r2,1000c3b4 <quorem+0x3a0>
1000c3a8:	e0bff617 	ldw	r2,-40(fp)
1000c3ac:	10800017 	ldw	r2,0(r2)
1000c3b0:	103ff426 	beq	r2,zero,1000c384 <__alt_data_end+0xf800c384>
	    --n;
	  b->_wds = n;
1000c3b4:	e0bffe17 	ldw	r2,-8(fp)
1000c3b8:	e0fff117 	ldw	r3,-60(fp)
1000c3bc:	10c00415 	stw	r3,16(r2)
	}
    }
  return q;
1000c3c0:	e0bff417 	ldw	r2,-48(fp)
}
1000c3c4:	e037883a 	mov	sp,fp
1000c3c8:	dfc00117 	ldw	ra,4(sp)
1000c3cc:	df000017 	ldw	fp,0(sp)
1000c3d0:	dec00204 	addi	sp,sp,8
1000c3d4:	f800283a 	ret

1000c3d8 <_dtoa_r>:
	int mode _AND
	int ndigits _AND
	int *decpt _AND
	int *sign _AND
	char **rve)
{
1000c3d8:	deffcc04 	addi	sp,sp,-208
1000c3dc:	dfc03315 	stw	ra,204(sp)
1000c3e0:	df003215 	stw	fp,200(sp)
1000c3e4:	dcc03115 	stw	r19,196(sp)
1000c3e8:	dc803015 	stw	r18,192(sp)
1000c3ec:	dc402f15 	stw	r17,188(sp)
1000c3f0:	dc002e15 	stw	r16,184(sp)
1000c3f4:	df003204 	addi	fp,sp,200
1000c3f8:	e13ff815 	stw	r4,-32(fp)
1000c3fc:	e17ff915 	stw	r5,-28(fp)
1000c400:	e1bffa15 	stw	r6,-24(fp)
1000c404:	e1fffb15 	stw	r7,-20(fp)
  __Long L;
#ifndef Sudden_Underflow
  int denorm;
  __ULong x;
#endif
  _Bigint *b, *b1, *delta, *mlo = NULL, *mhi, *S;
1000c408:	e03fe215 	stw	zero,-120(fp)
  double ds;
  char *s, *s0;

  d.d = _d;
1000c40c:	e0bff917 	ldw	r2,-28(fp)
1000c410:	e0bff215 	stw	r2,-56(fp)
1000c414:	e0bffa17 	ldw	r2,-24(fp)
1000c418:	e0bff315 	stw	r2,-52(fp)

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_RESULT(ptr))
1000c41c:	e0bff817 	ldw	r2,-32(fp)
1000c420:	10801017 	ldw	r2,64(r2)
1000c424:	10001326 	beq	r2,zero,1000c474 <_dtoa_r+0x9c>
    {
      _REENT_MP_RESULT(ptr)->_k = _REENT_MP_RESULT_K(ptr);
1000c428:	e0bff817 	ldw	r2,-32(fp)
1000c42c:	10801017 	ldw	r2,64(r2)
1000c430:	e0fff817 	ldw	r3,-32(fp)
1000c434:	18c01117 	ldw	r3,68(r3)
1000c438:	10c00115 	stw	r3,4(r2)
      _REENT_MP_RESULT(ptr)->_maxwds = 1 << _REENT_MP_RESULT_K(ptr);
1000c43c:	e0bff817 	ldw	r2,-32(fp)
1000c440:	10801017 	ldw	r2,64(r2)
1000c444:	e0fff817 	ldw	r3,-32(fp)
1000c448:	18c01117 	ldw	r3,68(r3)
1000c44c:	01000044 	movi	r4,1
1000c450:	20c6983a 	sll	r3,r4,r3
1000c454:	10c00215 	stw	r3,8(r2)
      Bfree (ptr, _REENT_MP_RESULT(ptr));
1000c458:	e0bff817 	ldw	r2,-32(fp)
1000c45c:	10801017 	ldw	r2,64(r2)
1000c460:	100b883a 	mov	r5,r2
1000c464:	e13ff817 	ldw	r4,-32(fp)
1000c468:	00103340 	call	10010334 <_Bfree>
      _REENT_MP_RESULT(ptr) = 0;
1000c46c:	e0bff817 	ldw	r2,-32(fp)
1000c470:	10001015 	stw	zero,64(r2)
    }

  if (word0 (d) & Sign_bit)
1000c474:	e0bff317 	ldw	r2,-52(fp)
1000c478:	1000090e 	bge	r2,zero,1000c4a0 <_dtoa_r+0xc8>
    {
      /* set sign for everything, including 0's and NaNs */
      *sign = 1;
1000c47c:	e0800417 	ldw	r2,16(fp)
1000c480:	00c00044 	movi	r3,1
1000c484:	10c00015 	stw	r3,0(r2)
      word0 (d) &= ~Sign_bit;	/* clear sign bit */
1000c488:	e0fff317 	ldw	r3,-52(fp)
1000c48c:	00a00034 	movhi	r2,32768
1000c490:	10bfffc4 	addi	r2,r2,-1
1000c494:	1884703a 	and	r2,r3,r2
1000c498:	e0bff315 	stw	r2,-52(fp)
1000c49c:	00000206 	br	1000c4a8 <_dtoa_r+0xd0>
    }
  else
    *sign = 0;
1000c4a0:	e0800417 	ldw	r2,16(fp)
1000c4a4:	10000015 	stw	zero,0(r2)

#if defined(IEEE_Arith) + defined(VAX)
#ifdef IEEE_Arith
  if ((word0 (d) & Exp_mask) == Exp_mask)
1000c4a8:	e0bff317 	ldw	r2,-52(fp)
1000c4ac:	10dffc2c 	andhi	r3,r2,32752
1000c4b0:	009ffc34 	movhi	r2,32752
1000c4b4:	1880221e 	bne	r3,r2,1000c540 <_dtoa_r+0x168>
#else
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
1000c4b8:	e0800317 	ldw	r2,12(fp)
1000c4bc:	00c9c3c4 	movi	r3,9999
1000c4c0:	10c00015 	stw	r3,0(r2)
      s =
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
1000c4c4:	e0bff217 	ldw	r2,-56(fp)
1000c4c8:	1000081e 	bne	r2,zero,1000c4ec <_dtoa_r+0x114>
1000c4cc:	e0fff317 	ldw	r3,-52(fp)
1000c4d0:	00800434 	movhi	r2,16
1000c4d4:	10bfffc4 	addi	r2,r2,-1
1000c4d8:	1884703a 	and	r2,r3,r2
1000c4dc:	1000031e 	bne	r2,zero,1000c4ec <_dtoa_r+0x114>
1000c4e0:	00840374 	movhi	r2,4109
1000c4e4:	10be5704 	addi	r2,r2,-1700
1000c4e8:	00000206 	br	1000c4f4 <_dtoa_r+0x11c>
1000c4ec:	00840374 	movhi	r2,4109
1000c4f0:	10be5a04 	addi	r2,r2,-1688
  if (word0 (d) == 0x8000)
#endif
    {
      /* Infinity or NaN */
      *decpt = 9999;
      s =
1000c4f4:	e0bfe715 	stw	r2,-100(fp)
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
1000c4f8:	e0800517 	ldw	r2,20(fp)
1000c4fc:	10000e26 	beq	r2,zero,1000c538 <_dtoa_r+0x160>
	*rve =
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
1000c500:	e0bfe717 	ldw	r2,-100(fp)
1000c504:	108000c4 	addi	r2,r2,3
1000c508:	10800003 	ldbu	r2,0(r2)
1000c50c:	10803fcc 	andi	r2,r2,255
1000c510:	1080201c 	xori	r2,r2,128
1000c514:	10bfe004 	addi	r2,r2,-128
1000c518:	10000326 	beq	r2,zero,1000c528 <_dtoa_r+0x150>
1000c51c:	e0bfe717 	ldw	r2,-100(fp)
1000c520:	10800204 	addi	r2,r2,8
1000c524:	00000206 	br	1000c530 <_dtoa_r+0x158>
1000c528:	e0bfe717 	ldw	r2,-100(fp)
1000c52c:	108000c4 	addi	r2,r2,3
#ifdef IEEE_Arith
	!word1 (d) && !(word0 (d) & 0xfffff) ? "Infinity" :
#endif
	"NaN";
      if (rve)
	*rve =
1000c530:	e0c00517 	ldw	r3,20(fp)
1000c534:	18800015 	stw	r2,0(r3)
#ifdef IEEE_Arith
	  s[3] ? s + 8 :
#endif
	  s + 3;
      return s;
1000c538:	e0bfe717 	ldw	r2,-100(fp)
1000c53c:	00067b06 	br	1000df2c <_dtoa_r+0x1b54>
    }
#endif
#ifdef IBM
  d.d += 0;			/* normalize */
#endif
  if (!d.d)
1000c540:	e0bff217 	ldw	r2,-56(fp)
1000c544:	e0fff317 	ldw	r3,-52(fp)
1000c548:	000d883a 	mov	r6,zero
1000c54c:	000f883a 	mov	r7,zero
1000c550:	1009883a 	mov	r4,r2
1000c554:	180b883a 	mov	r5,r3
1000c558:	00154180 	call	10015418 <__eqdf2>
1000c55c:	10000e1e 	bne	r2,zero,1000c598 <_dtoa_r+0x1c0>
    {
      *decpt = 1;
1000c560:	e0800317 	ldw	r2,12(fp)
1000c564:	00c00044 	movi	r3,1
1000c568:	10c00015 	stw	r3,0(r2)
      s = "0";
1000c56c:	00840374 	movhi	r2,4109
1000c570:	10be5b04 	addi	r2,r2,-1684
1000c574:	e0bfe715 	stw	r2,-100(fp)
      if (rve)
1000c578:	e0800517 	ldw	r2,20(fp)
1000c57c:	10000426 	beq	r2,zero,1000c590 <_dtoa_r+0x1b8>
	*rve = s + 1;
1000c580:	e0bfe717 	ldw	r2,-100(fp)
1000c584:	10c00044 	addi	r3,r2,1
1000c588:	e0800517 	ldw	r2,20(fp)
1000c58c:	10c00015 	stw	r3,0(r2)
      return s;
1000c590:	e0bfe717 	ldw	r2,-100(fp)
1000c594:	00066506 	br	1000df2c <_dtoa_r+0x1b54>
    }

  b = d2b (ptr, d.d, &be, &bbits);
1000c598:	e0bff217 	ldw	r2,-56(fp)
1000c59c:	e0fff317 	ldw	r3,-52(fp)
1000c5a0:	e17ff104 	addi	r5,fp,-60
1000c5a4:	e13ff004 	addi	r4,fp,-64
1000c5a8:	d9000015 	stw	r4,0(sp)
1000c5ac:	280f883a 	mov	r7,r5
1000c5b0:	100b883a 	mov	r5,r2
1000c5b4:	180d883a 	mov	r6,r3
1000c5b8:	e13ff817 	ldw	r4,-32(fp)
1000c5bc:	00116a40 	call	100116a4 <__d2b>
1000c5c0:	e0bfe115 	stw	r2,-124(fp)
#ifdef Sudden_Underflow
  i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1));
#else
  if ((i = (int) (word0 (d) >> Exp_shift1 & (Exp_mask >> Exp_shift1))) != 0)
1000c5c4:	e0bff317 	ldw	r2,-52(fp)
1000c5c8:	1004d53a 	srli	r2,r2,20
1000c5cc:	1081ffcc 	andi	r2,r2,2047
1000c5d0:	e0bfd215 	stw	r2,-184(fp)
1000c5d4:	e0bfd217 	ldw	r2,-184(fp)
1000c5d8:	10001126 	beq	r2,zero,1000c620 <_dtoa_r+0x248>
    {
#endif
      d2.d = d.d;
1000c5dc:	e0bff217 	ldw	r2,-56(fp)
1000c5e0:	e0fff317 	ldw	r3,-52(fp)
1000c5e4:	e0bff415 	stw	r2,-48(fp)
1000c5e8:	e0fff515 	stw	r3,-44(fp)
      word0 (d2) &= Frac_mask1;
1000c5ec:	e0fff517 	ldw	r3,-44(fp)
1000c5f0:	00800434 	movhi	r2,16
1000c5f4:	10bfffc4 	addi	r2,r2,-1
1000c5f8:	1884703a 	and	r2,r3,r2
1000c5fc:	e0bff515 	stw	r2,-44(fp)
      word0 (d2) |= Exp_11;
1000c600:	e0bff517 	ldw	r2,-44(fp)
1000c604:	108ffc34 	orhi	r2,r2,16368
1000c608:	e0bff515 	stw	r2,-44(fp)
		 * Hence we adjust the constant term to 0.1760912590558.
		 * (We could get a more accurate k by invoking log10,
		 *  but this is probably not worthwhile.)
		 */

      i -= Bias;
1000c60c:	e0bfd217 	ldw	r2,-184(fp)
1000c610:	10bf0044 	addi	r2,r2,-1023
1000c614:	e0bfd215 	stw	r2,-184(fp)
#ifdef IBM
      i <<= 2;
      i += j;
#endif
#ifndef Sudden_Underflow
      denorm = 0;
1000c618:	e03fe015 	stw	zero,-128(fp)
1000c61c:	00002806 	br	1000c6c0 <_dtoa_r+0x2e8>
    }
  else
    {
      /* d is denormalized */

      i = bbits + be + (Bias + (P - 1) - 1);
1000c620:	e0fff017 	ldw	r3,-64(fp)
1000c624:	e0bff117 	ldw	r2,-60(fp)
1000c628:	1885883a 	add	r2,r3,r2
1000c62c:	10810c84 	addi	r2,r2,1074
1000c630:	e0bfd215 	stw	r2,-184(fp)
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
       : (word1 (d) << (32 - i));
1000c634:	e0bfd217 	ldw	r2,-184(fp)
1000c638:	10800850 	cmplti	r2,r2,33
1000c63c:	10000b1e 	bne	r2,zero,1000c66c <_dtoa_r+0x294>

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
1000c640:	e0fff317 	ldw	r3,-52(fp)
1000c644:	01001004 	movi	r4,64
1000c648:	e0bfd217 	ldw	r2,-184(fp)
1000c64c:	2085c83a 	sub	r2,r4,r2
1000c650:	1886983a 	sll	r3,r3,r2
1000c654:	e13ff217 	ldw	r4,-56(fp)
1000c658:	e0bfd217 	ldw	r2,-184(fp)
1000c65c:	10bff804 	addi	r2,r2,-32
1000c660:	2084d83a 	srl	r2,r4,r2
       : (word1 (d) << (32 - i));
1000c664:	1884b03a 	or	r2,r3,r2
1000c668:	00000506 	br	1000c680 <_dtoa_r+0x2a8>
1000c66c:	e0fff217 	ldw	r3,-56(fp)
1000c670:	01000804 	movi	r4,32
1000c674:	e0bfd217 	ldw	r2,-184(fp)
1000c678:	2085c83a 	sub	r2,r4,r2
1000c67c:	1884983a 	sll	r2,r3,r2

      i = bbits + be + (Bias + (P - 1) - 1);
#if defined (_DOUBLE_IS_32BITS)
      x = word0 (d) << (32 - i);
#else
      x = (i > 32) ? (word0 (d) << (64 - i)) | (word1 (d) >> (i - 32))
1000c680:	e0bfe815 	stw	r2,-96(fp)
       : (word1 (d) << (32 - i));
#endif
      d2.d = x;
1000c684:	e13fe817 	ldw	r4,-96(fp)
1000c688:	00156d80 	call	100156d8 <__floatunsidf>
1000c68c:	1009883a 	mov	r4,r2
1000c690:	180b883a 	mov	r5,r3
1000c694:	e13ff415 	stw	r4,-48(fp)
1000c698:	e17ff515 	stw	r5,-44(fp)
      word0 (d2) -= 31 * Exp_msk1;	/* adjust exponent */
1000c69c:	e0fff517 	ldw	r3,-44(fp)
1000c6a0:	00bf8434 	movhi	r2,65040
1000c6a4:	1885883a 	add	r2,r3,r2
1000c6a8:	e0bff515 	stw	r2,-44(fp)
      i -= (Bias + (P - 1) - 1) + 1;
1000c6ac:	e0bfd217 	ldw	r2,-184(fp)
1000c6b0:	10bef344 	addi	r2,r2,-1075
1000c6b4:	e0bfd215 	stw	r2,-184(fp)
      denorm = 1;
1000c6b8:	00800044 	movi	r2,1
1000c6bc:	e0bfe015 	stw	r2,-128(fp)
    }
#endif
#if defined (_DOUBLE_IS_32BITS)
  ds = (d2.d - 1.5) * 0.289529651 + 0.176091269 + i * 0.30103001;
#else
  ds = (d2.d - 1.5) * 0.289529654602168 + 0.1760912590558 + i * 0.301029995663981;
1000c6c0:	e0bff417 	ldw	r2,-48(fp)
1000c6c4:	e0fff517 	ldw	r3,-44(fp)
1000c6c8:	000d883a 	mov	r6,zero
1000c6cc:	01cffe34 	movhi	r7,16376
1000c6d0:	1009883a 	mov	r4,r2
1000c6d4:	180b883a 	mov	r5,r3
1000c6d8:	00059c00 	call	100059c0 <__subdf3>
1000c6dc:	1009883a 	mov	r4,r2
1000c6e0:	180b883a 	mov	r5,r3
1000c6e4:	2005883a 	mov	r2,r4
1000c6e8:	2807883a 	mov	r3,r5
1000c6ec:	0198dbf4 	movhi	r6,25455
1000c6f0:	3190d844 	addi	r6,r6,17249
1000c6f4:	01cff4f4 	movhi	r7,16339
1000c6f8:	39e1e9c4 	addi	r7,r7,-30809
1000c6fc:	1009883a 	mov	r4,r2
1000c700:	180b883a 	mov	r5,r3
1000c704:	00051580 	call	10005158 <__muldf3>
1000c708:	1009883a 	mov	r4,r2
1000c70c:	180b883a 	mov	r5,r3
1000c710:	2005883a 	mov	r2,r4
1000c714:	2807883a 	mov	r3,r5
1000c718:	01a2d874 	movhi	r6,35681
1000c71c:	31b22cc4 	addi	r6,r6,-14157
1000c720:	01cff1f4 	movhi	r7,16327
1000c724:	39e28a04 	addi	r7,r7,-30168
1000c728:	1009883a 	mov	r4,r2
1000c72c:	180b883a 	mov	r5,r3
1000c730:	0003de80 	call	10003de8 <__adddf3>
1000c734:	1009883a 	mov	r4,r2
1000c738:	180b883a 	mov	r5,r3
1000c73c:	2025883a 	mov	r18,r4
1000c740:	2827883a 	mov	r19,r5
1000c744:	e13fd217 	ldw	r4,-184(fp)
1000c748:	00155fc0 	call	100155fc <__floatsidf>
1000c74c:	1011883a 	mov	r8,r2
1000c750:	1813883a 	mov	r9,r3
1000c754:	019427f4 	movhi	r6,20639
1000c758:	319e7ec4 	addi	r6,r6,31227
1000c75c:	01cff4f4 	movhi	r7,16339
1000c760:	39d104c4 	addi	r7,r7,17427
1000c764:	4009883a 	mov	r4,r8
1000c768:	480b883a 	mov	r5,r9
1000c76c:	00051580 	call	10005158 <__muldf3>
1000c770:	1009883a 	mov	r4,r2
1000c774:	180b883a 	mov	r5,r3
1000c778:	2005883a 	mov	r2,r4
1000c77c:	2807883a 	mov	r3,r5
1000c780:	100d883a 	mov	r6,r2
1000c784:	180f883a 	mov	r7,r3
1000c788:	9009883a 	mov	r4,r18
1000c78c:	980b883a 	mov	r5,r19
1000c790:	0003de80 	call	10003de8 <__adddf3>
1000c794:	1009883a 	mov	r4,r2
1000c798:	180b883a 	mov	r5,r3
1000c79c:	e13fe515 	stw	r4,-108(fp)
1000c7a0:	e17fe615 	stw	r5,-104(fp)
#endif
  k = (int) ds;
1000c7a4:	e13fe517 	ldw	r4,-108(fp)
1000c7a8:	e17fe617 	ldw	r5,-104(fp)
1000c7ac:	001557c0 	call	1001557c <__fixdfsi>
1000c7b0:	e0bfd715 	stw	r2,-164(fp)
  if (ds < 0. && ds != k)
1000c7b4:	000d883a 	mov	r6,zero
1000c7b8:	000f883a 	mov	r7,zero
1000c7bc:	e13fe517 	ldw	r4,-108(fp)
1000c7c0:	e17fe617 	ldw	r5,-104(fp)
1000c7c4:	00050640 	call	10005064 <__ledf2>
1000c7c8:	10000d0e 	bge	r2,zero,1000c800 <_dtoa_r+0x428>
1000c7cc:	e13fd717 	ldw	r4,-164(fp)
1000c7d0:	00155fc0 	call	100155fc <__floatsidf>
1000c7d4:	1011883a 	mov	r8,r2
1000c7d8:	1813883a 	mov	r9,r3
1000c7dc:	e1bfe517 	ldw	r6,-108(fp)
1000c7e0:	e1ffe617 	ldw	r7,-104(fp)
1000c7e4:	4009883a 	mov	r4,r8
1000c7e8:	480b883a 	mov	r5,r9
1000c7ec:	00154180 	call	10015418 <__eqdf2>
1000c7f0:	10000326 	beq	r2,zero,1000c800 <_dtoa_r+0x428>
    k--;			/* want k = floor(ds) */
1000c7f4:	e0bfd717 	ldw	r2,-164(fp)
1000c7f8:	10bfffc4 	addi	r2,r2,-1
1000c7fc:	e0bfd715 	stw	r2,-164(fp)
  k_check = 1;
1000c800:	00800044 	movi	r2,1
1000c804:	e0bfd815 	stw	r2,-160(fp)
  if (k >= 0 && k <= Ten_pmax)
1000c808:	e0bfd717 	ldw	r2,-164(fp)
1000c80c:	10001616 	blt	r2,zero,1000c868 <_dtoa_r+0x490>
1000c810:	e0bfd717 	ldw	r2,-164(fp)
1000c814:	108005c8 	cmpgei	r2,r2,23
1000c818:	1000131e 	bne	r2,zero,1000c868 <_dtoa_r+0x490>
    {
      if (d.d < tens[k])
1000c81c:	e0bff217 	ldw	r2,-56(fp)
1000c820:	e0fff317 	ldw	r3,-52(fp)
1000c824:	01040374 	movhi	r4,4109
1000c828:	213e6104 	addi	r4,r4,-1660
1000c82c:	e17fd717 	ldw	r5,-164(fp)
1000c830:	280a90fa 	slli	r5,r5,3
1000c834:	214d883a 	add	r6,r4,r5
1000c838:	31000017 	ldw	r4,0(r6)
1000c83c:	31400117 	ldw	r5,4(r6)
1000c840:	200d883a 	mov	r6,r4
1000c844:	280f883a 	mov	r7,r5
1000c848:	1009883a 	mov	r4,r2
1000c84c:	180b883a 	mov	r5,r3
1000c850:	00050640 	call	10005064 <__ledf2>
1000c854:	1000030e 	bge	r2,zero,1000c864 <_dtoa_r+0x48c>
	k--;
1000c858:	e0bfd717 	ldw	r2,-164(fp)
1000c85c:	10bfffc4 	addi	r2,r2,-1
1000c860:	e0bfd715 	stw	r2,-164(fp)
      k_check = 0;
1000c864:	e03fd815 	stw	zero,-160(fp)
    }
  j = bbits - i - 1;
1000c868:	e0fff017 	ldw	r3,-64(fp)
1000c86c:	e0bfd217 	ldw	r2,-184(fp)
1000c870:	1885c83a 	sub	r2,r3,r2
1000c874:	10bfffc4 	addi	r2,r2,-1
1000c878:	e0bfd615 	stw	r2,-168(fp)
  if (j >= 0)
1000c87c:	e0bfd617 	ldw	r2,-168(fp)
1000c880:	10000416 	blt	r2,zero,1000c894 <_dtoa_r+0x4bc>
    {
      b2 = 0;
1000c884:	e03fcf15 	stw	zero,-196(fp)
      s2 = j;
1000c888:	e0bfd617 	ldw	r2,-168(fp)
1000c88c:	e0bfdc15 	stw	r2,-144(fp)
1000c890:	00000406 	br	1000c8a4 <_dtoa_r+0x4cc>
    }
  else
    {
      b2 = -j;
1000c894:	e0bfd617 	ldw	r2,-168(fp)
1000c898:	0085c83a 	sub	r2,zero,r2
1000c89c:	e0bfcf15 	stw	r2,-196(fp)
      s2 = 0;
1000c8a0:	e03fdc15 	stw	zero,-144(fp)
    }
  if (k >= 0)
1000c8a4:	e0bfd717 	ldw	r2,-164(fp)
1000c8a8:	10000816 	blt	r2,zero,1000c8cc <_dtoa_r+0x4f4>
    {
      b5 = 0;
1000c8ac:	e03fd015 	stw	zero,-192(fp)
      s5 = k;
1000c8b0:	e0bfd717 	ldw	r2,-164(fp)
1000c8b4:	e0bfdd15 	stw	r2,-140(fp)
      s2 += k;
1000c8b8:	e0ffdc17 	ldw	r3,-144(fp)
1000c8bc:	e0bfd717 	ldw	r2,-164(fp)
1000c8c0:	1885883a 	add	r2,r3,r2
1000c8c4:	e0bfdc15 	stw	r2,-144(fp)
1000c8c8:	00000806 	br	1000c8ec <_dtoa_r+0x514>
    }
  else
    {
      b2 -= k;
1000c8cc:	e0ffcf17 	ldw	r3,-196(fp)
1000c8d0:	e0bfd717 	ldw	r2,-164(fp)
1000c8d4:	1885c83a 	sub	r2,r3,r2
1000c8d8:	e0bfcf15 	stw	r2,-196(fp)
      b5 = -k;
1000c8dc:	e0bfd717 	ldw	r2,-164(fp)
1000c8e0:	0085c83a 	sub	r2,zero,r2
1000c8e4:	e0bfd015 	stw	r2,-192(fp)
      s5 = 0;
1000c8e8:	e03fdd15 	stw	zero,-140(fp)
    }
  if (mode < 0 || mode > 9)
1000c8ec:	e0bffb17 	ldw	r2,-20(fp)
1000c8f0:	10000316 	blt	r2,zero,1000c900 <_dtoa_r+0x528>
1000c8f4:	e0bffb17 	ldw	r2,-20(fp)
1000c8f8:	10800290 	cmplti	r2,r2,10
1000c8fc:	1000011e 	bne	r2,zero,1000c904 <_dtoa_r+0x52c>
    mode = 0;
1000c900:	e03ffb15 	stw	zero,-20(fp)
  try_quick = 1;
1000c904:	00800044 	movi	r2,1
1000c908:	e0bfdf15 	stw	r2,-132(fp)
  if (mode > 5)
1000c90c:	e0bffb17 	ldw	r2,-20(fp)
1000c910:	10800190 	cmplti	r2,r2,6
1000c914:	1000041e 	bne	r2,zero,1000c928 <_dtoa_r+0x550>
    {
      mode -= 4;
1000c918:	e0bffb17 	ldw	r2,-20(fp)
1000c91c:	10bfff04 	addi	r2,r2,-4
1000c920:	e0bffb15 	stw	r2,-20(fp)
      try_quick = 0;
1000c924:	e03fdf15 	stw	zero,-132(fp)
    }
  leftright = 1;
1000c928:	00800044 	movi	r2,1
1000c92c:	e0bfd915 	stw	r2,-156(fp)
  ilim = ilim1 = -1;
1000c930:	00bfffc4 	movi	r2,-1
1000c934:	e0bfd515 	stw	r2,-172(fp)
1000c938:	e0bfd517 	ldw	r2,-172(fp)
1000c93c:	e0bfd415 	stw	r2,-176(fp)
  switch (mode)
1000c940:	e0bffb17 	ldw	r2,-20(fp)
1000c944:	108001a8 	cmpgeui	r2,r2,6
1000c948:	10002c1e 	bne	r2,zero,1000c9fc <_dtoa_r+0x624>
1000c94c:	e0bffb17 	ldw	r2,-20(fp)
1000c950:	100690ba 	slli	r3,r2,2
1000c954:	00840074 	movhi	r2,4097
1000c958:	10b25a04 	addi	r2,r2,-13976
1000c95c:	1885883a 	add	r2,r3,r2
1000c960:	10800017 	ldw	r2,0(r2)
1000c964:	1000683a 	jmp	r2
1000c968:	1000c980 	call	11000c98 <__alt_heap_start+0xf1de44>
1000c96c:	1000c980 	call	11000c98 <__alt_heap_start+0xf1de44>
1000c970:	1000c990 	cmplti	zero,r2,806
1000c974:	1000c9c0 	call	11000c9c <__alt_heap_start+0xf1de48>
1000c978:	1000c994 	ori	zero,r2,806
1000c97c:	1000c9c4 	addi	zero,r2,807
    {
    case 0:
    case 1:
      i = 18;
1000c980:	00800484 	movi	r2,18
1000c984:	e0bfd215 	stw	r2,-184(fp)
      ndigits = 0;
1000c988:	e0000215 	stw	zero,8(fp)
      break;
1000c98c:	00001b06 	br	1000c9fc <_dtoa_r+0x624>
    case 2:
      leftright = 0;
1000c990:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 4:
      if (ndigits <= 0)
1000c994:	e0800217 	ldw	r2,8(fp)
1000c998:	00800216 	blt	zero,r2,1000c9a4 <_dtoa_r+0x5cc>
	ndigits = 1;
1000c99c:	00800044 	movi	r2,1
1000c9a0:	e0800215 	stw	r2,8(fp)
      ilim = ilim1 = i = ndigits;
1000c9a4:	e0800217 	ldw	r2,8(fp)
1000c9a8:	e0bfd215 	stw	r2,-184(fp)
1000c9ac:	e0bfd217 	ldw	r2,-184(fp)
1000c9b0:	e0bfd515 	stw	r2,-172(fp)
1000c9b4:	e0bfd517 	ldw	r2,-172(fp)
1000c9b8:	e0bfd415 	stw	r2,-176(fp)
      break;
1000c9bc:	00000f06 	br	1000c9fc <_dtoa_r+0x624>
    case 3:
      leftright = 0;
1000c9c0:	e03fd915 	stw	zero,-156(fp)
      /* no break */
    case 5:
      i = ndigits + k + 1;
1000c9c4:	e0c00217 	ldw	r3,8(fp)
1000c9c8:	e0bfd717 	ldw	r2,-164(fp)
1000c9cc:	1885883a 	add	r2,r3,r2
1000c9d0:	10800044 	addi	r2,r2,1
1000c9d4:	e0bfd215 	stw	r2,-184(fp)
      ilim = i;
1000c9d8:	e0bfd217 	ldw	r2,-184(fp)
1000c9dc:	e0bfd415 	stw	r2,-176(fp)
      ilim1 = i - 1;
1000c9e0:	e0bfd217 	ldw	r2,-184(fp)
1000c9e4:	10bfffc4 	addi	r2,r2,-1
1000c9e8:	e0bfd515 	stw	r2,-172(fp)
      if (i <= 0)
1000c9ec:	e0bfd217 	ldw	r2,-184(fp)
1000c9f0:	00800216 	blt	zero,r2,1000c9fc <_dtoa_r+0x624>
	i = 1;
1000c9f4:	00800044 	movi	r2,1
1000c9f8:	e0bfd215 	stw	r2,-184(fp)
    }
  j = sizeof (__ULong);
1000c9fc:	00800104 	movi	r2,4
1000ca00:	e0bfd615 	stw	r2,-168(fp)
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
1000ca04:	e0bff817 	ldw	r2,-32(fp)
1000ca08:	10001115 	stw	zero,68(r2)
1000ca0c:	00000806 	br	1000ca30 <_dtoa_r+0x658>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
1000ca10:	e0bff817 	ldw	r2,-32(fp)
1000ca14:	10801117 	ldw	r2,68(r2)
1000ca18:	10c00044 	addi	r3,r2,1
1000ca1c:	e0bff817 	ldw	r2,-32(fp)
1000ca20:	10c01115 	stw	r3,68(r2)
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
       j <<= 1)
1000ca24:	e0bfd617 	ldw	r2,-168(fp)
1000ca28:	1085883a 	add	r2,r2,r2
1000ca2c:	e0bfd615 	stw	r2,-168(fp)
      ilim1 = i - 1;
      if (i <= 0)
	i = 1;
    }
  j = sizeof (__ULong);
  for (_REENT_MP_RESULT_K(ptr) = 0; sizeof (_Bigint) - sizeof (__ULong) + j <= i;
1000ca30:	e0bfd617 	ldw	r2,-168(fp)
1000ca34:	10800504 	addi	r2,r2,20
1000ca38:	e0ffd217 	ldw	r3,-184(fp)
1000ca3c:	18bff42e 	bgeu	r3,r2,1000ca10 <__alt_data_end+0xf800ca10>
       j <<= 1)
    _REENT_MP_RESULT_K(ptr)++;
  _REENT_MP_RESULT(ptr) = Balloc (ptr, _REENT_MP_RESULT_K(ptr));
1000ca40:	e0bff817 	ldw	r2,-32(fp)
1000ca44:	10801117 	ldw	r2,68(r2)
1000ca48:	100b883a 	mov	r5,r2
1000ca4c:	e13ff817 	ldw	r4,-32(fp)
1000ca50:	00102040 	call	10010204 <_Balloc>
1000ca54:	1007883a 	mov	r3,r2
1000ca58:	e0bff817 	ldw	r2,-32(fp)
1000ca5c:	10c01015 	stw	r3,64(r2)
  s = s0 = (char *) _REENT_MP_RESULT(ptr);
1000ca60:	e0bff817 	ldw	r2,-32(fp)
1000ca64:	10801017 	ldw	r2,64(r2)
1000ca68:	e0bfe915 	stw	r2,-92(fp)
1000ca6c:	e0bfe917 	ldw	r2,-92(fp)
1000ca70:	e0bfe715 	stw	r2,-100(fp)

  if (ilim >= 0 && ilim <= Quick_max && try_quick)
1000ca74:	e0bfd417 	ldw	r2,-176(fp)
1000ca78:	10021616 	blt	r2,zero,1000d2d4 <_dtoa_r+0xefc>
1000ca7c:	e0bfd417 	ldw	r2,-176(fp)
1000ca80:	108003c8 	cmpgei	r2,r2,15
1000ca84:	1002131e 	bne	r2,zero,1000d2d4 <_dtoa_r+0xefc>
1000ca88:	e0bfdf17 	ldw	r2,-132(fp)
1000ca8c:	10021126 	beq	r2,zero,1000d2d4 <_dtoa_r+0xefc>
    {
      /* Try to get by with floating-point arithmetic. */

      i = 0;
1000ca90:	e03fd215 	stw	zero,-184(fp)
      d2.d = d.d;
1000ca94:	e0bff217 	ldw	r2,-56(fp)
1000ca98:	e0fff317 	ldw	r3,-52(fp)
1000ca9c:	e0bff415 	stw	r2,-48(fp)
1000caa0:	e0fff515 	stw	r3,-44(fp)
      k0 = k;
1000caa4:	e0bfd717 	ldw	r2,-164(fp)
1000caa8:	e0bfea15 	stw	r2,-88(fp)
      ilim0 = ilim;
1000caac:	e0bfd417 	ldw	r2,-176(fp)
1000cab0:	e0bfeb15 	stw	r2,-84(fp)
      ieps = 2;			/* conservative */
1000cab4:	00800084 	movi	r2,2
1000cab8:	e0bfd315 	stw	r2,-180(fp)
      if (k > 0)
1000cabc:	e0bfd717 	ldw	r2,-164(fp)
1000cac0:	0080540e 	bge	zero,r2,1000cc14 <_dtoa_r+0x83c>
	{
	  ds = tens[k & 0xf];
1000cac4:	e0bfd717 	ldw	r2,-164(fp)
1000cac8:	10c003cc 	andi	r3,r2,15
1000cacc:	00840374 	movhi	r2,4109
1000cad0:	10be6104 	addi	r2,r2,-1660
1000cad4:	180690fa 	slli	r3,r3,3
1000cad8:	10c5883a 	add	r2,r2,r3
1000cadc:	10c00017 	ldw	r3,0(r2)
1000cae0:	e0ffe515 	stw	r3,-108(fp)
1000cae4:	10800117 	ldw	r2,4(r2)
1000cae8:	e0bfe615 	stw	r2,-104(fp)
	  j = k >> 4;
1000caec:	e0bfd717 	ldw	r2,-164(fp)
1000caf0:	1005d13a 	srai	r2,r2,4
1000caf4:	e0bfd615 	stw	r2,-168(fp)
	  if (j & Bletch)
1000caf8:	e0bfd617 	ldw	r2,-168(fp)
1000cafc:	1080040c 	andi	r2,r2,16
1000cb00:	10003426 	beq	r2,zero,1000cbd4 <_dtoa_r+0x7fc>
	    {
	      /* prevent overflows */
	      j &= Bletch - 1;
1000cb04:	e0bfd617 	ldw	r2,-168(fp)
1000cb08:	108003cc 	andi	r2,r2,15
1000cb0c:	e0bfd615 	stw	r2,-168(fp)
	      d.d /= bigtens[n_bigtens - 1];
1000cb10:	e0bff217 	ldw	r2,-56(fp)
1000cb14:	e0fff317 	ldw	r3,-52(fp)
1000cb18:	01840374 	movhi	r6,4109
1000cb1c:	31be9304 	addi	r6,r6,-1460
1000cb20:	31000817 	ldw	r4,32(r6)
1000cb24:	31400917 	ldw	r5,36(r6)
1000cb28:	200d883a 	mov	r6,r4
1000cb2c:	280f883a 	mov	r7,r5
1000cb30:	1009883a 	mov	r4,r2
1000cb34:	180b883a 	mov	r5,r3
1000cb38:	00046940 	call	10004694 <__divdf3>
1000cb3c:	1009883a 	mov	r4,r2
1000cb40:	180b883a 	mov	r5,r3
1000cb44:	2005883a 	mov	r2,r4
1000cb48:	2807883a 	mov	r3,r5
1000cb4c:	e0bff215 	stw	r2,-56(fp)
1000cb50:	e0fff315 	stw	r3,-52(fp)
	      ieps++;
1000cb54:	e0bfd317 	ldw	r2,-180(fp)
1000cb58:	10800044 	addi	r2,r2,1
1000cb5c:	e0bfd315 	stw	r2,-180(fp)
	    }
	  for (; j; j >>= 1, i++)
1000cb60:	00001c06 	br	1000cbd4 <_dtoa_r+0x7fc>
	    if (j & 1)
1000cb64:	e0bfd617 	ldw	r2,-168(fp)
1000cb68:	1080004c 	andi	r2,r2,1
1000cb6c:	10001326 	beq	r2,zero,1000cbbc <_dtoa_r+0x7e4>
	      {
		ieps++;
1000cb70:	e0bfd317 	ldw	r2,-180(fp)
1000cb74:	10800044 	addi	r2,r2,1
1000cb78:	e0bfd315 	stw	r2,-180(fp)
		ds *= bigtens[i];
1000cb7c:	00840374 	movhi	r2,4109
1000cb80:	10be9304 	addi	r2,r2,-1460
1000cb84:	e0ffd217 	ldw	r3,-184(fp)
1000cb88:	180690fa 	slli	r3,r3,3
1000cb8c:	10c9883a 	add	r4,r2,r3
1000cb90:	20800017 	ldw	r2,0(r4)
1000cb94:	20c00117 	ldw	r3,4(r4)
1000cb98:	100d883a 	mov	r6,r2
1000cb9c:	180f883a 	mov	r7,r3
1000cba0:	e13fe517 	ldw	r4,-108(fp)
1000cba4:	e17fe617 	ldw	r5,-104(fp)
1000cba8:	00051580 	call	10005158 <__muldf3>
1000cbac:	1009883a 	mov	r4,r2
1000cbb0:	180b883a 	mov	r5,r3
1000cbb4:	e13fe515 	stw	r4,-108(fp)
1000cbb8:	e17fe615 	stw	r5,-104(fp)
	      /* prevent overflows */
	      j &= Bletch - 1;
	      d.d /= bigtens[n_bigtens - 1];
	      ieps++;
	    }
	  for (; j; j >>= 1, i++)
1000cbbc:	e0bfd617 	ldw	r2,-168(fp)
1000cbc0:	1005d07a 	srai	r2,r2,1
1000cbc4:	e0bfd615 	stw	r2,-168(fp)
1000cbc8:	e0bfd217 	ldw	r2,-184(fp)
1000cbcc:	10800044 	addi	r2,r2,1
1000cbd0:	e0bfd215 	stw	r2,-184(fp)
1000cbd4:	e0bfd617 	ldw	r2,-168(fp)
1000cbd8:	103fe21e 	bne	r2,zero,1000cb64 <__alt_data_end+0xf800cb64>
	    if (j & 1)
	      {
		ieps++;
		ds *= bigtens[i];
	      }
	  d.d /= ds;
1000cbdc:	e0bff217 	ldw	r2,-56(fp)
1000cbe0:	e0fff317 	ldw	r3,-52(fp)
1000cbe4:	e1bfe517 	ldw	r6,-108(fp)
1000cbe8:	e1ffe617 	ldw	r7,-104(fp)
1000cbec:	1009883a 	mov	r4,r2
1000cbf0:	180b883a 	mov	r5,r3
1000cbf4:	00046940 	call	10004694 <__divdf3>
1000cbf8:	1009883a 	mov	r4,r2
1000cbfc:	180b883a 	mov	r5,r3
1000cc00:	2005883a 	mov	r2,r4
1000cc04:	2807883a 	mov	r3,r5
1000cc08:	e0bff215 	stw	r2,-56(fp)
1000cc0c:	e0fff315 	stw	r3,-52(fp)
1000cc10:	00004006 	br	1000cd14 <_dtoa_r+0x93c>
	}
      else if ((j1 = -k) != 0)
1000cc14:	e0bfd717 	ldw	r2,-164(fp)
1000cc18:	0085c83a 	sub	r2,zero,r2
1000cc1c:	e0bfec15 	stw	r2,-80(fp)
1000cc20:	e0bfec17 	ldw	r2,-80(fp)
1000cc24:	10003b26 	beq	r2,zero,1000cd14 <_dtoa_r+0x93c>
	{
	  d.d *= tens[j1 & 0xf];
1000cc28:	e0bff217 	ldw	r2,-56(fp)
1000cc2c:	e0fff317 	ldw	r3,-52(fp)
1000cc30:	e13fec17 	ldw	r4,-80(fp)
1000cc34:	214003cc 	andi	r5,r4,15
1000cc38:	01040374 	movhi	r4,4109
1000cc3c:	213e6104 	addi	r4,r4,-1660
1000cc40:	280a90fa 	slli	r5,r5,3
1000cc44:	214d883a 	add	r6,r4,r5
1000cc48:	31000017 	ldw	r4,0(r6)
1000cc4c:	31400117 	ldw	r5,4(r6)
1000cc50:	200d883a 	mov	r6,r4
1000cc54:	280f883a 	mov	r7,r5
1000cc58:	1009883a 	mov	r4,r2
1000cc5c:	180b883a 	mov	r5,r3
1000cc60:	00051580 	call	10005158 <__muldf3>
1000cc64:	1009883a 	mov	r4,r2
1000cc68:	180b883a 	mov	r5,r3
1000cc6c:	2005883a 	mov	r2,r4
1000cc70:	2807883a 	mov	r3,r5
1000cc74:	e0bff215 	stw	r2,-56(fp)
1000cc78:	e0fff315 	stw	r3,-52(fp)
	  for (j = j1 >> 4; j; j >>= 1, i++)
1000cc7c:	e0bfec17 	ldw	r2,-80(fp)
1000cc80:	1005d13a 	srai	r2,r2,4
1000cc84:	e0bfd615 	stw	r2,-168(fp)
1000cc88:	00002006 	br	1000cd0c <_dtoa_r+0x934>
	    if (j & 1)
1000cc8c:	e0bfd617 	ldw	r2,-168(fp)
1000cc90:	1080004c 	andi	r2,r2,1
1000cc94:	10001726 	beq	r2,zero,1000ccf4 <_dtoa_r+0x91c>
	      {
		ieps++;
1000cc98:	e0bfd317 	ldw	r2,-180(fp)
1000cc9c:	10800044 	addi	r2,r2,1
1000cca0:	e0bfd315 	stw	r2,-180(fp)
		d.d *= bigtens[i];
1000cca4:	e0bff217 	ldw	r2,-56(fp)
1000cca8:	e0fff317 	ldw	r3,-52(fp)
1000ccac:	01040374 	movhi	r4,4109
1000ccb0:	213e9304 	addi	r4,r4,-1460
1000ccb4:	e17fd217 	ldw	r5,-184(fp)
1000ccb8:	280a90fa 	slli	r5,r5,3
1000ccbc:	214d883a 	add	r6,r4,r5
1000ccc0:	31000017 	ldw	r4,0(r6)
1000ccc4:	31400117 	ldw	r5,4(r6)
1000ccc8:	200d883a 	mov	r6,r4
1000cccc:	280f883a 	mov	r7,r5
1000ccd0:	1009883a 	mov	r4,r2
1000ccd4:	180b883a 	mov	r5,r3
1000ccd8:	00051580 	call	10005158 <__muldf3>
1000ccdc:	1009883a 	mov	r4,r2
1000cce0:	180b883a 	mov	r5,r3
1000cce4:	2005883a 	mov	r2,r4
1000cce8:	2807883a 	mov	r3,r5
1000ccec:	e0bff215 	stw	r2,-56(fp)
1000ccf0:	e0fff315 	stw	r3,-52(fp)
	  d.d /= ds;
	}
      else if ((j1 = -k) != 0)
	{
	  d.d *= tens[j1 & 0xf];
	  for (j = j1 >> 4; j; j >>= 1, i++)
1000ccf4:	e0bfd617 	ldw	r2,-168(fp)
1000ccf8:	1005d07a 	srai	r2,r2,1
1000ccfc:	e0bfd615 	stw	r2,-168(fp)
1000cd00:	e0bfd217 	ldw	r2,-184(fp)
1000cd04:	10800044 	addi	r2,r2,1
1000cd08:	e0bfd215 	stw	r2,-184(fp)
1000cd0c:	e0bfd617 	ldw	r2,-168(fp)
1000cd10:	103fde1e 	bne	r2,zero,1000cc8c <__alt_data_end+0xf800cc8c>
	      {
		ieps++;
		d.d *= bigtens[i];
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
1000cd14:	e0bfd817 	ldw	r2,-160(fp)
1000cd18:	10002126 	beq	r2,zero,1000cda0 <_dtoa_r+0x9c8>
1000cd1c:	e0bff217 	ldw	r2,-56(fp)
1000cd20:	e0fff317 	ldw	r3,-52(fp)
1000cd24:	000d883a 	mov	r6,zero
1000cd28:	01cffc34 	movhi	r7,16368
1000cd2c:	1009883a 	mov	r4,r2
1000cd30:	180b883a 	mov	r5,r3
1000cd34:	00050640 	call	10005064 <__ledf2>
1000cd38:	1000190e 	bge	r2,zero,1000cda0 <_dtoa_r+0x9c8>
1000cd3c:	e0bfd417 	ldw	r2,-176(fp)
1000cd40:	0080170e 	bge	zero,r2,1000cda0 <_dtoa_r+0x9c8>
	{
	  if (ilim1 <= 0)
1000cd44:	e0bfd517 	ldw	r2,-172(fp)
1000cd48:	0081550e 	bge	zero,r2,1000d2a0 <_dtoa_r+0xec8>
	    goto fast_failed;
	  ilim = ilim1;
1000cd4c:	e0bfd517 	ldw	r2,-172(fp)
1000cd50:	e0bfd415 	stw	r2,-176(fp)
	  k--;
1000cd54:	e0bfd717 	ldw	r2,-164(fp)
1000cd58:	10bfffc4 	addi	r2,r2,-1
1000cd5c:	e0bfd715 	stw	r2,-164(fp)
	  d.d *= 10.;
1000cd60:	e0bff217 	ldw	r2,-56(fp)
1000cd64:	e0fff317 	ldw	r3,-52(fp)
1000cd68:	000d883a 	mov	r6,zero
1000cd6c:	01d00934 	movhi	r7,16420
1000cd70:	1009883a 	mov	r4,r2
1000cd74:	180b883a 	mov	r5,r3
1000cd78:	00051580 	call	10005158 <__muldf3>
1000cd7c:	1009883a 	mov	r4,r2
1000cd80:	180b883a 	mov	r5,r3
1000cd84:	2005883a 	mov	r2,r4
1000cd88:	2807883a 	mov	r3,r5
1000cd8c:	e0bff215 	stw	r2,-56(fp)
1000cd90:	e0fff315 	stw	r3,-52(fp)
	  ieps++;
1000cd94:	e0bfd317 	ldw	r2,-180(fp)
1000cd98:	10800044 	addi	r2,r2,1
1000cd9c:	e0bfd315 	stw	r2,-180(fp)
	}
      eps.d = ieps * d.d + 7.;
1000cda0:	e13fd317 	ldw	r4,-180(fp)
1000cda4:	00155fc0 	call	100155fc <__floatsidf>
1000cda8:	1011883a 	mov	r8,r2
1000cdac:	1813883a 	mov	r9,r3
1000cdb0:	e0bff217 	ldw	r2,-56(fp)
1000cdb4:	e0fff317 	ldw	r3,-52(fp)
1000cdb8:	100d883a 	mov	r6,r2
1000cdbc:	180f883a 	mov	r7,r3
1000cdc0:	4009883a 	mov	r4,r8
1000cdc4:	480b883a 	mov	r5,r9
1000cdc8:	00051580 	call	10005158 <__muldf3>
1000cdcc:	1009883a 	mov	r4,r2
1000cdd0:	180b883a 	mov	r5,r3
1000cdd4:	2005883a 	mov	r2,r4
1000cdd8:	2807883a 	mov	r3,r5
1000cddc:	000d883a 	mov	r6,zero
1000cde0:	01d00734 	movhi	r7,16412
1000cde4:	1009883a 	mov	r4,r2
1000cde8:	180b883a 	mov	r5,r3
1000cdec:	0003de80 	call	10003de8 <__adddf3>
1000cdf0:	1009883a 	mov	r4,r2
1000cdf4:	180b883a 	mov	r5,r3
1000cdf8:	2005883a 	mov	r2,r4
1000cdfc:	2807883a 	mov	r3,r5
1000ce00:	e0bff615 	stw	r2,-40(fp)
1000ce04:	e0fff715 	stw	r3,-36(fp)
      word0 (eps) -= (P - 1) * Exp_msk1;
1000ce08:	e0fff717 	ldw	r3,-36(fp)
1000ce0c:	00bf3034 	movhi	r2,64704
1000ce10:	1885883a 	add	r2,r3,r2
1000ce14:	e0bff715 	stw	r2,-36(fp)
      if (ilim == 0)
1000ce18:	e0bfd417 	ldw	r2,-176(fp)
1000ce1c:	1000271e 	bne	r2,zero,1000cebc <_dtoa_r+0xae4>
	{
	  S = mhi = 0;
1000ce20:	e03fe315 	stw	zero,-116(fp)
1000ce24:	e0bfe317 	ldw	r2,-116(fp)
1000ce28:	e0bfe415 	stw	r2,-112(fp)
	  d.d -= 5.;
1000ce2c:	e0bff217 	ldw	r2,-56(fp)
1000ce30:	e0fff317 	ldw	r3,-52(fp)
1000ce34:	000d883a 	mov	r6,zero
1000ce38:	01d00534 	movhi	r7,16404
1000ce3c:	1009883a 	mov	r4,r2
1000ce40:	180b883a 	mov	r5,r3
1000ce44:	00059c00 	call	100059c0 <__subdf3>
1000ce48:	1009883a 	mov	r4,r2
1000ce4c:	180b883a 	mov	r5,r3
1000ce50:	2005883a 	mov	r2,r4
1000ce54:	2807883a 	mov	r3,r5
1000ce58:	e0bff215 	stw	r2,-56(fp)
1000ce5c:	e0fff315 	stw	r3,-52(fp)
	  if (d.d > eps.d)
1000ce60:	e0bff217 	ldw	r2,-56(fp)
1000ce64:	e0fff317 	ldw	r3,-52(fp)
1000ce68:	e13ff617 	ldw	r4,-40(fp)
1000ce6c:	e17ff717 	ldw	r5,-36(fp)
1000ce70:	200d883a 	mov	r6,r4
1000ce74:	280f883a 	mov	r7,r5
1000ce78:	1009883a 	mov	r4,r2
1000ce7c:	180b883a 	mov	r5,r3
1000ce80:	00154a00 	call	100154a0 <__gedf2>
1000ce84:	0082eb16 	blt	zero,r2,1000da34 <_dtoa_r+0x165c>
	    goto one_digit;
	  if (d.d < -eps.d)
1000ce88:	e23ff217 	ldw	r8,-56(fp)
1000ce8c:	e27ff317 	ldw	r9,-52(fp)
1000ce90:	e0bff617 	ldw	r2,-40(fp)
1000ce94:	e0fff717 	ldw	r3,-36(fp)
1000ce98:	1021883a 	mov	r16,r2
1000ce9c:	1c60003c 	xorhi	r17,r3,32768
1000cea0:	800d883a 	mov	r6,r16
1000cea4:	880f883a 	mov	r7,r17
1000cea8:	4009883a 	mov	r4,r8
1000ceac:	480b883a 	mov	r5,r9
1000ceb0:	00050640 	call	10005064 <__ledf2>
1000ceb4:	1002da16 	blt	r2,zero,1000da20 <_dtoa_r+0x1648>
	    goto no_digits;
	  goto fast_failed;
1000ceb8:	0000fc06 	br	1000d2ac <_dtoa_r+0xed4>
	}
#ifndef No_leftright
      if (leftright)
1000cebc:	e0bfd917 	ldw	r2,-156(fp)
1000cec0:	10007a26 	beq	r2,zero,1000d0ac <_dtoa_r+0xcd4>
	{
	  /* Use Steele & White method of only
	   * generating digits needed.
	   */
	  eps.d = 0.5 / tens[ilim - 1] - eps.d;
1000cec4:	e0bfd417 	ldw	r2,-176(fp)
1000cec8:	10ffffc4 	addi	r3,r2,-1
1000cecc:	00840374 	movhi	r2,4109
1000ced0:	10be6104 	addi	r2,r2,-1660
1000ced4:	180690fa 	slli	r3,r3,3
1000ced8:	10c9883a 	add	r4,r2,r3
1000cedc:	20800017 	ldw	r2,0(r4)
1000cee0:	20c00117 	ldw	r3,4(r4)
1000cee4:	100d883a 	mov	r6,r2
1000cee8:	180f883a 	mov	r7,r3
1000ceec:	0009883a 	mov	r4,zero
1000cef0:	014ff834 	movhi	r5,16352
1000cef4:	00046940 	call	10004694 <__divdf3>
1000cef8:	1009883a 	mov	r4,r2
1000cefc:	180b883a 	mov	r5,r3
1000cf00:	2011883a 	mov	r8,r4
1000cf04:	2813883a 	mov	r9,r5
1000cf08:	e0bff617 	ldw	r2,-40(fp)
1000cf0c:	e0fff717 	ldw	r3,-36(fp)
1000cf10:	100d883a 	mov	r6,r2
1000cf14:	180f883a 	mov	r7,r3
1000cf18:	4009883a 	mov	r4,r8
1000cf1c:	480b883a 	mov	r5,r9
1000cf20:	00059c00 	call	100059c0 <__subdf3>
1000cf24:	1009883a 	mov	r4,r2
1000cf28:	180b883a 	mov	r5,r3
1000cf2c:	2005883a 	mov	r2,r4
1000cf30:	2807883a 	mov	r3,r5
1000cf34:	e0bff615 	stw	r2,-40(fp)
1000cf38:	e0fff715 	stw	r3,-36(fp)
	  for (i = 0;;)
1000cf3c:	e03fd215 	stw	zero,-184(fp)
	    {
	      L = d.d;
1000cf40:	e0bff217 	ldw	r2,-56(fp)
1000cf44:	e0fff317 	ldw	r3,-52(fp)
1000cf48:	1009883a 	mov	r4,r2
1000cf4c:	180b883a 	mov	r5,r3
1000cf50:	001557c0 	call	1001557c <__fixdfsi>
1000cf54:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
1000cf58:	e43ff217 	ldw	r16,-56(fp)
1000cf5c:	e47ff317 	ldw	r17,-52(fp)
1000cf60:	e13fed17 	ldw	r4,-76(fp)
1000cf64:	00155fc0 	call	100155fc <__floatsidf>
1000cf68:	1009883a 	mov	r4,r2
1000cf6c:	180b883a 	mov	r5,r3
1000cf70:	200d883a 	mov	r6,r4
1000cf74:	280f883a 	mov	r7,r5
1000cf78:	8009883a 	mov	r4,r16
1000cf7c:	880b883a 	mov	r5,r17
1000cf80:	00059c00 	call	100059c0 <__subdf3>
1000cf84:	1009883a 	mov	r4,r2
1000cf88:	180b883a 	mov	r5,r3
1000cf8c:	2005883a 	mov	r2,r4
1000cf90:	2807883a 	mov	r3,r5
1000cf94:	e0bff215 	stw	r2,-56(fp)
1000cf98:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
1000cf9c:	e0bfe717 	ldw	r2,-100(fp)
1000cfa0:	10c00044 	addi	r3,r2,1
1000cfa4:	e0ffe715 	stw	r3,-100(fp)
1000cfa8:	e0ffed17 	ldw	r3,-76(fp)
1000cfac:	18c00c04 	addi	r3,r3,48
1000cfb0:	10c00005 	stb	r3,0(r2)
	      if (d.d < eps.d)
1000cfb4:	e0bff217 	ldw	r2,-56(fp)
1000cfb8:	e0fff317 	ldw	r3,-52(fp)
1000cfbc:	e13ff617 	ldw	r4,-40(fp)
1000cfc0:	e17ff717 	ldw	r5,-36(fp)
1000cfc4:	200d883a 	mov	r6,r4
1000cfc8:	280f883a 	mov	r7,r5
1000cfcc:	1009883a 	mov	r4,r2
1000cfd0:	180b883a 	mov	r5,r3
1000cfd4:	00050640 	call	10005064 <__ledf2>
1000cfd8:	1003c416 	blt	r2,zero,1000deec <_dtoa_r+0x1b14>
		goto ret1;
	      if (1. - d.d < eps.d)
1000cfdc:	e0bff217 	ldw	r2,-56(fp)
1000cfe0:	e0fff317 	ldw	r3,-52(fp)
1000cfe4:	100d883a 	mov	r6,r2
1000cfe8:	180f883a 	mov	r7,r3
1000cfec:	0009883a 	mov	r4,zero
1000cff0:	014ffc34 	movhi	r5,16368
1000cff4:	00059c00 	call	100059c0 <__subdf3>
1000cff8:	1009883a 	mov	r4,r2
1000cffc:	180b883a 	mov	r5,r3
1000d000:	2011883a 	mov	r8,r4
1000d004:	2813883a 	mov	r9,r5
1000d008:	e0bff617 	ldw	r2,-40(fp)
1000d00c:	e0fff717 	ldw	r3,-36(fp)
1000d010:	100d883a 	mov	r6,r2
1000d014:	180f883a 	mov	r7,r3
1000d018:	4009883a 	mov	r4,r8
1000d01c:	480b883a 	mov	r5,r9
1000d020:	00050640 	call	10005064 <__ledf2>
1000d024:	10012916 	blt	r2,zero,1000d4cc <_dtoa_r+0x10f4>
		goto bump_up;
	      if (++i >= ilim)
1000d028:	e0bfd217 	ldw	r2,-184(fp)
1000d02c:	10800044 	addi	r2,r2,1
1000d030:	e0bfd215 	stw	r2,-184(fp)
1000d034:	e0ffd217 	ldw	r3,-184(fp)
1000d038:	e0bfd417 	ldw	r2,-176(fp)
1000d03c:	18809a0e 	bge	r3,r2,1000d2a8 <_dtoa_r+0xed0>
		break;
	      eps.d *= 10.;
1000d040:	e0bff617 	ldw	r2,-40(fp)
1000d044:	e0fff717 	ldw	r3,-36(fp)
1000d048:	000d883a 	mov	r6,zero
1000d04c:	01d00934 	movhi	r7,16420
1000d050:	1009883a 	mov	r4,r2
1000d054:	180b883a 	mov	r5,r3
1000d058:	00051580 	call	10005158 <__muldf3>
1000d05c:	1009883a 	mov	r4,r2
1000d060:	180b883a 	mov	r5,r3
1000d064:	2005883a 	mov	r2,r4
1000d068:	2807883a 	mov	r3,r5
1000d06c:	e0bff615 	stw	r2,-40(fp)
1000d070:	e0fff715 	stw	r3,-36(fp)
	      d.d *= 10.;
1000d074:	e0bff217 	ldw	r2,-56(fp)
1000d078:	e0fff317 	ldw	r3,-52(fp)
1000d07c:	000d883a 	mov	r6,zero
1000d080:	01d00934 	movhi	r7,16420
1000d084:	1009883a 	mov	r4,r2
1000d088:	180b883a 	mov	r5,r3
1000d08c:	00051580 	call	10005158 <__muldf3>
1000d090:	1009883a 	mov	r4,r2
1000d094:	180b883a 	mov	r5,r3
1000d098:	2005883a 	mov	r2,r4
1000d09c:	2807883a 	mov	r3,r5
1000d0a0:	e0bff215 	stw	r2,-56(fp)
1000d0a4:	e0fff315 	stw	r3,-52(fp)
	    }
1000d0a8:	003fa506 	br	1000cf40 <__alt_data_end+0xf800cf40>
	}
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
1000d0ac:	e0bff617 	ldw	r2,-40(fp)
1000d0b0:	e0fff717 	ldw	r3,-36(fp)
1000d0b4:	e13fd417 	ldw	r4,-176(fp)
1000d0b8:	217fffc4 	addi	r5,r4,-1
1000d0bc:	01040374 	movhi	r4,4109
1000d0c0:	213e6104 	addi	r4,r4,-1660
1000d0c4:	280a90fa 	slli	r5,r5,3
1000d0c8:	214d883a 	add	r6,r4,r5
1000d0cc:	31000017 	ldw	r4,0(r6)
1000d0d0:	31400117 	ldw	r5,4(r6)
1000d0d4:	200d883a 	mov	r6,r4
1000d0d8:	280f883a 	mov	r7,r5
1000d0dc:	1009883a 	mov	r4,r2
1000d0e0:	180b883a 	mov	r5,r3
1000d0e4:	00051580 	call	10005158 <__muldf3>
1000d0e8:	1009883a 	mov	r4,r2
1000d0ec:	180b883a 	mov	r5,r3
1000d0f0:	2005883a 	mov	r2,r4
1000d0f4:	2807883a 	mov	r3,r5
1000d0f8:	e0bff615 	stw	r2,-40(fp)
1000d0fc:	e0fff715 	stw	r3,-36(fp)
	  for (i = 1;; i++, d.d *= 10.)
1000d100:	00800044 	movi	r2,1
1000d104:	e0bfd215 	stw	r2,-184(fp)
	    {
	      L = d.d;
1000d108:	e0bff217 	ldw	r2,-56(fp)
1000d10c:	e0fff317 	ldw	r3,-52(fp)
1000d110:	1009883a 	mov	r4,r2
1000d114:	180b883a 	mov	r5,r3
1000d118:	001557c0 	call	1001557c <__fixdfsi>
1000d11c:	e0bfed15 	stw	r2,-76(fp)
	      d.d -= L;
1000d120:	e43ff217 	ldw	r16,-56(fp)
1000d124:	e47ff317 	ldw	r17,-52(fp)
1000d128:	e13fed17 	ldw	r4,-76(fp)
1000d12c:	00155fc0 	call	100155fc <__floatsidf>
1000d130:	1009883a 	mov	r4,r2
1000d134:	180b883a 	mov	r5,r3
1000d138:	200d883a 	mov	r6,r4
1000d13c:	280f883a 	mov	r7,r5
1000d140:	8009883a 	mov	r4,r16
1000d144:	880b883a 	mov	r5,r17
1000d148:	00059c00 	call	100059c0 <__subdf3>
1000d14c:	1009883a 	mov	r4,r2
1000d150:	180b883a 	mov	r5,r3
1000d154:	2005883a 	mov	r2,r4
1000d158:	2807883a 	mov	r3,r5
1000d15c:	e0bff215 	stw	r2,-56(fp)
1000d160:	e0fff315 	stw	r3,-52(fp)
	      *s++ = '0' + (int) L;
1000d164:	e0bfe717 	ldw	r2,-100(fp)
1000d168:	10c00044 	addi	r3,r2,1
1000d16c:	e0ffe715 	stw	r3,-100(fp)
1000d170:	e0ffed17 	ldw	r3,-76(fp)
1000d174:	18c00c04 	addi	r3,r3,48
1000d178:	10c00005 	stb	r3,0(r2)
	      if (i == ilim)
1000d17c:	e0ffd217 	ldw	r3,-184(fp)
1000d180:	e0bfd417 	ldw	r2,-176(fp)
1000d184:	1880351e 	bne	r3,r2,1000d25c <_dtoa_r+0xe84>
		{
		  if (d.d > 0.5 + eps.d)
1000d188:	e43ff217 	ldw	r16,-56(fp)
1000d18c:	e47ff317 	ldw	r17,-52(fp)
1000d190:	e0bff617 	ldw	r2,-40(fp)
1000d194:	e0fff717 	ldw	r3,-36(fp)
1000d198:	000d883a 	mov	r6,zero
1000d19c:	01cff834 	movhi	r7,16352
1000d1a0:	1009883a 	mov	r4,r2
1000d1a4:	180b883a 	mov	r5,r3
1000d1a8:	0003de80 	call	10003de8 <__adddf3>
1000d1ac:	1009883a 	mov	r4,r2
1000d1b0:	180b883a 	mov	r5,r3
1000d1b4:	2005883a 	mov	r2,r4
1000d1b8:	2807883a 	mov	r3,r5
1000d1bc:	100d883a 	mov	r6,r2
1000d1c0:	180f883a 	mov	r7,r3
1000d1c4:	8009883a 	mov	r4,r16
1000d1c8:	880b883a 	mov	r5,r17
1000d1cc:	00154a00 	call	100154a0 <__gedf2>
1000d1d0:	0080c016 	blt	zero,r2,1000d4d4 <_dtoa_r+0x10fc>
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
1000d1d4:	e43ff217 	ldw	r16,-56(fp)
1000d1d8:	e47ff317 	ldw	r17,-52(fp)
1000d1dc:	e0bff617 	ldw	r2,-40(fp)
1000d1e0:	e0fff717 	ldw	r3,-36(fp)
1000d1e4:	100d883a 	mov	r6,r2
1000d1e8:	180f883a 	mov	r7,r3
1000d1ec:	0009883a 	mov	r4,zero
1000d1f0:	014ff834 	movhi	r5,16352
1000d1f4:	00059c00 	call	100059c0 <__subdf3>
1000d1f8:	1009883a 	mov	r4,r2
1000d1fc:	180b883a 	mov	r5,r3
1000d200:	2005883a 	mov	r2,r4
1000d204:	2807883a 	mov	r3,r5
1000d208:	100d883a 	mov	r6,r2
1000d20c:	180f883a 	mov	r7,r3
1000d210:	8009883a 	mov	r4,r16
1000d214:	880b883a 	mov	r5,r17
1000d218:	00050640 	call	10005064 <__ledf2>
1000d21c:	10000116 	blt	r2,zero,1000d224 <_dtoa_r+0xe4c>
		    {
		      while (*--s == '0');
		      s++;
		      goto ret1;
		    }
		  break;
1000d220:	00002206 	br	1000d2ac <_dtoa_r+0xed4>
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
		  else if (d.d < 0.5 - eps.d)
		    {
		      while (*--s == '0');
1000d224:	e0bfe717 	ldw	r2,-100(fp)
1000d228:	10bfffc4 	addi	r2,r2,-1
1000d22c:	e0bfe715 	stw	r2,-100(fp)
1000d230:	e0bfe717 	ldw	r2,-100(fp)
1000d234:	10800003 	ldbu	r2,0(r2)
1000d238:	10803fcc 	andi	r2,r2,255
1000d23c:	1080201c 	xori	r2,r2,128
1000d240:	10bfe004 	addi	r2,r2,-128
1000d244:	10800c20 	cmpeqi	r2,r2,48
1000d248:	103ff61e 	bne	r2,zero,1000d224 <__alt_data_end+0xf800d224>
		      s++;
1000d24c:	e0bfe717 	ldw	r2,-100(fp)
1000d250:	10800044 	addi	r2,r2,1
1000d254:	e0bfe715 	stw	r2,-100(fp)
		      goto ret1;
1000d258:	00032506 	br	1000def0 <_dtoa_r+0x1b18>
      else
	{
#endif
	  /* Generate ilim digits, then fix them up. */
	  eps.d *= tens[ilim - 1];
	  for (i = 1;; i++, d.d *= 10.)
1000d25c:	e0bfd217 	ldw	r2,-184(fp)
1000d260:	10800044 	addi	r2,r2,1
1000d264:	e0bfd215 	stw	r2,-184(fp)
1000d268:	e0bff217 	ldw	r2,-56(fp)
1000d26c:	e0fff317 	ldw	r3,-52(fp)
1000d270:	000d883a 	mov	r6,zero
1000d274:	01d00934 	movhi	r7,16420
1000d278:	1009883a 	mov	r4,r2
1000d27c:	180b883a 	mov	r5,r3
1000d280:	00051580 	call	10005158 <__muldf3>
1000d284:	1009883a 	mov	r4,r2
1000d288:	180b883a 	mov	r5,r3
1000d28c:	2005883a 	mov	r2,r4
1000d290:	2807883a 	mov	r3,r5
1000d294:	e0bff215 	stw	r2,-56(fp)
1000d298:	e0fff315 	stw	r3,-52(fp)
		      s++;
		      goto ret1;
		    }
		  break;
		}
	    }
1000d29c:	003f9a06 	br	1000d108 <__alt_data_end+0xf800d108>
	      }
	}
      if (k_check && d.d < 1. && ilim > 0)
	{
	  if (ilim1 <= 0)
	    goto fast_failed;
1000d2a0:	0001883a 	nop
1000d2a4:	00000106 	br	1000d2ac <_dtoa_r+0xed4>
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
	      if (++i >= ilim)
		break;
1000d2a8:	0001883a 	nop
	    }
#ifndef No_leftright
	}
#endif
    fast_failed:
      s = s0;
1000d2ac:	e0bfe917 	ldw	r2,-92(fp)
1000d2b0:	e0bfe715 	stw	r2,-100(fp)
      d.d = d2.d;
1000d2b4:	e0bff417 	ldw	r2,-48(fp)
1000d2b8:	e0fff517 	ldw	r3,-44(fp)
1000d2bc:	e0bff215 	stw	r2,-56(fp)
1000d2c0:	e0fff315 	stw	r3,-52(fp)
      k = k0;
1000d2c4:	e0bfea17 	ldw	r2,-88(fp)
1000d2c8:	e0bfd715 	stw	r2,-164(fp)
      ilim = ilim0;
1000d2cc:	e0bfeb17 	ldw	r2,-84(fp)
1000d2d0:	e0bfd415 	stw	r2,-176(fp)
    }

  /* Do we have a "small" integer? */

  if (be >= 0 && k <= Int_max)
1000d2d4:	e0bff117 	ldw	r2,-60(fp)
1000d2d8:	1000b816 	blt	r2,zero,1000d5bc <_dtoa_r+0x11e4>
1000d2dc:	e0bfd717 	ldw	r2,-164(fp)
1000d2e0:	108003c8 	cmpgei	r2,r2,15
1000d2e4:	1000b51e 	bne	r2,zero,1000d5bc <_dtoa_r+0x11e4>
    {
      /* Yes. */
      ds = tens[k];
1000d2e8:	00840374 	movhi	r2,4109
1000d2ec:	10be6104 	addi	r2,r2,-1660
1000d2f0:	e0ffd717 	ldw	r3,-164(fp)
1000d2f4:	180690fa 	slli	r3,r3,3
1000d2f8:	10c5883a 	add	r2,r2,r3
1000d2fc:	10c00017 	ldw	r3,0(r2)
1000d300:	e0ffe515 	stw	r3,-108(fp)
1000d304:	10800117 	ldw	r2,4(r2)
1000d308:	e0bfe615 	stw	r2,-104(fp)
      if (ndigits < 0 && ilim <= 0)
1000d30c:	e0800217 	ldw	r2,8(fp)
1000d310:	1000190e 	bge	r2,zero,1000d378 <_dtoa_r+0xfa0>
1000d314:	e0bfd417 	ldw	r2,-176(fp)
1000d318:	00801716 	blt	zero,r2,1000d378 <_dtoa_r+0xfa0>
	{
	  S = mhi = 0;
1000d31c:	e03fe315 	stw	zero,-116(fp)
1000d320:	e0bfe317 	ldw	r2,-116(fp)
1000d324:	e0bfe415 	stw	r2,-112(fp)
	  if (ilim < 0 || d.d <= 5 * ds)
1000d328:	e0bfd417 	ldw	r2,-176(fp)
1000d32c:	1001bd16 	blt	r2,zero,1000da24 <_dtoa_r+0x164c>
1000d330:	e43ff217 	ldw	r16,-56(fp)
1000d334:	e47ff317 	ldw	r17,-52(fp)
1000d338:	000d883a 	mov	r6,zero
1000d33c:	01d00534 	movhi	r7,16404
1000d340:	e13fe517 	ldw	r4,-108(fp)
1000d344:	e17fe617 	ldw	r5,-104(fp)
1000d348:	00051580 	call	10005158 <__muldf3>
1000d34c:	1009883a 	mov	r4,r2
1000d350:	180b883a 	mov	r5,r3
1000d354:	2005883a 	mov	r2,r4
1000d358:	2807883a 	mov	r3,r5
1000d35c:	100d883a 	mov	r6,r2
1000d360:	180f883a 	mov	r7,r3
1000d364:	8009883a 	mov	r4,r16
1000d368:	880b883a 	mov	r5,r17
1000d36c:	00050640 	call	10005064 <__ledf2>
1000d370:	0081ac0e 	bge	zero,r2,1000da24 <_dtoa_r+0x164c>
	    goto no_digits;
	  goto one_digit;
1000d374:	0001b006 	br	1000da38 <_dtoa_r+0x1660>
	}
      for (i = 1;; i++)
1000d378:	00800044 	movi	r2,1
1000d37c:	e0bfd215 	stw	r2,-184(fp)
	{
	  L = d.d / ds;
1000d380:	e0bff217 	ldw	r2,-56(fp)
1000d384:	e0fff317 	ldw	r3,-52(fp)
1000d388:	e1bfe517 	ldw	r6,-108(fp)
1000d38c:	e1ffe617 	ldw	r7,-104(fp)
1000d390:	1009883a 	mov	r4,r2
1000d394:	180b883a 	mov	r5,r3
1000d398:	00046940 	call	10004694 <__divdf3>
1000d39c:	1009883a 	mov	r4,r2
1000d3a0:	180b883a 	mov	r5,r3
1000d3a4:	2005883a 	mov	r2,r4
1000d3a8:	2807883a 	mov	r3,r5
1000d3ac:	1009883a 	mov	r4,r2
1000d3b0:	180b883a 	mov	r5,r3
1000d3b4:	001557c0 	call	1001557c <__fixdfsi>
1000d3b8:	e0bfed15 	stw	r2,-76(fp)
	  d.d -= L * ds;
1000d3bc:	e43ff217 	ldw	r16,-56(fp)
1000d3c0:	e47ff317 	ldw	r17,-52(fp)
1000d3c4:	e13fed17 	ldw	r4,-76(fp)
1000d3c8:	00155fc0 	call	100155fc <__floatsidf>
1000d3cc:	1011883a 	mov	r8,r2
1000d3d0:	1813883a 	mov	r9,r3
1000d3d4:	e1bfe517 	ldw	r6,-108(fp)
1000d3d8:	e1ffe617 	ldw	r7,-104(fp)
1000d3dc:	4009883a 	mov	r4,r8
1000d3e0:	480b883a 	mov	r5,r9
1000d3e4:	00051580 	call	10005158 <__muldf3>
1000d3e8:	1009883a 	mov	r4,r2
1000d3ec:	180b883a 	mov	r5,r3
1000d3f0:	2005883a 	mov	r2,r4
1000d3f4:	2807883a 	mov	r3,r5
1000d3f8:	100d883a 	mov	r6,r2
1000d3fc:	180f883a 	mov	r7,r3
1000d400:	8009883a 	mov	r4,r16
1000d404:	880b883a 	mov	r5,r17
1000d408:	00059c00 	call	100059c0 <__subdf3>
1000d40c:	1009883a 	mov	r4,r2
1000d410:	180b883a 	mov	r5,r3
1000d414:	2005883a 	mov	r2,r4
1000d418:	2807883a 	mov	r3,r5
1000d41c:	e0bff215 	stw	r2,-56(fp)
1000d420:	e0fff315 	stw	r3,-52(fp)
	    {
	      L--;
	      d.d += ds;
	    }
#endif
	  *s++ = '0' + (int) L;
1000d424:	e0bfe717 	ldw	r2,-100(fp)
1000d428:	10c00044 	addi	r3,r2,1
1000d42c:	e0ffe715 	stw	r3,-100(fp)
1000d430:	e0ffed17 	ldw	r3,-76(fp)
1000d434:	18c00c04 	addi	r3,r3,48
1000d438:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
1000d43c:	e0ffd217 	ldw	r3,-184(fp)
1000d440:	e0bfd417 	ldw	r2,-176(fp)
1000d444:	1880401e 	bne	r3,r2,1000d548 <_dtoa_r+0x1170>
	    {
	      d.d += d.d;
1000d448:	e0bff217 	ldw	r2,-56(fp)
1000d44c:	e0fff317 	ldw	r3,-52(fp)
1000d450:	100d883a 	mov	r6,r2
1000d454:	180f883a 	mov	r7,r3
1000d458:	1009883a 	mov	r4,r2
1000d45c:	180b883a 	mov	r5,r3
1000d460:	0003de80 	call	10003de8 <__adddf3>
1000d464:	1009883a 	mov	r4,r2
1000d468:	180b883a 	mov	r5,r3
1000d46c:	2005883a 	mov	r2,r4
1000d470:	2807883a 	mov	r3,r5
1000d474:	e0bff215 	stw	r2,-56(fp)
1000d478:	e0fff315 	stw	r3,-52(fp)
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
1000d47c:	e0bff217 	ldw	r2,-56(fp)
1000d480:	e0fff317 	ldw	r3,-52(fp)
1000d484:	e1bfe517 	ldw	r6,-108(fp)
1000d488:	e1ffe617 	ldw	r7,-104(fp)
1000d48c:	1009883a 	mov	r4,r2
1000d490:	180b883a 	mov	r5,r3
1000d494:	00154a00 	call	100154a0 <__gedf2>
1000d498:	00801a16 	blt	zero,r2,1000d504 <_dtoa_r+0x112c>
1000d49c:	e0bff217 	ldw	r2,-56(fp)
1000d4a0:	e0fff317 	ldw	r3,-52(fp)
1000d4a4:	e1bfe517 	ldw	r6,-108(fp)
1000d4a8:	e1ffe617 	ldw	r7,-104(fp)
1000d4ac:	1009883a 	mov	r4,r2
1000d4b0:	180b883a 	mov	r5,r3
1000d4b4:	00154180 	call	10015418 <__eqdf2>
1000d4b8:	10003c1e 	bne	r2,zero,1000d5ac <_dtoa_r+0x11d4>
1000d4bc:	e0bfed17 	ldw	r2,-76(fp)
1000d4c0:	1080004c 	andi	r2,r2,1
1000d4c4:	10003926 	beq	r2,zero,1000d5ac <_dtoa_r+0x11d4>
1000d4c8:	00000e06 	br	1000d504 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
	      if (1. - d.d < eps.d)
		goto bump_up;
1000d4cc:	0001883a 	nop
1000d4d0:	00000c06 	br	1000d504 <_dtoa_r+0x112c>
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (i == ilim)
		{
		  if (d.d > 0.5 + eps.d)
		    goto bump_up;
1000d4d4:	0001883a 	nop
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
1000d4d8:	00000a06 	br	1000d504 <_dtoa_r+0x112c>
		    if (s == s0)
1000d4dc:	e0ffe717 	ldw	r3,-100(fp)
1000d4e0:	e0bfe917 	ldw	r2,-92(fp)
1000d4e4:	1880071e 	bne	r3,r2,1000d504 <_dtoa_r+0x112c>
		      {
			k++;
1000d4e8:	e0bfd717 	ldw	r2,-164(fp)
1000d4ec:	10800044 	addi	r2,r2,1
1000d4f0:	e0bfd715 	stw	r2,-164(fp)
			*s = '0';
1000d4f4:	e0bfe717 	ldw	r2,-100(fp)
1000d4f8:	00c00c04 	movi	r3,48
1000d4fc:	10c00005 	stb	r3,0(r2)
			break;
1000d500:	00000a06 	br	1000d52c <_dtoa_r+0x1154>
	    {
	      d.d += d.d;
             if ((d.d > ds) || ((d.d == ds) && (L & 1)))
		{
		bump_up:
		  while (*--s == '9')
1000d504:	e0bfe717 	ldw	r2,-100(fp)
1000d508:	10bfffc4 	addi	r2,r2,-1
1000d50c:	e0bfe715 	stw	r2,-100(fp)
1000d510:	e0bfe717 	ldw	r2,-100(fp)
1000d514:	10800003 	ldbu	r2,0(r2)
1000d518:	10803fcc 	andi	r2,r2,255
1000d51c:	1080201c 	xori	r2,r2,128
1000d520:	10bfe004 	addi	r2,r2,-128
1000d524:	10800e60 	cmpeqi	r2,r2,57
1000d528:	103fec1e 	bne	r2,zero,1000d4dc <__alt_data_end+0xf800d4dc>
		      {
			k++;
			*s = '0';
			break;
		      }
		  ++*s++;
1000d52c:	e0bfe717 	ldw	r2,-100(fp)
1000d530:	10c00044 	addi	r3,r2,1
1000d534:	e0ffe715 	stw	r3,-100(fp)
1000d538:	10c00003 	ldbu	r3,0(r2)
1000d53c:	18c00044 	addi	r3,r3,1
1000d540:	10c00005 	stb	r3,0(r2)
		}
	      break;
1000d544:	00001906 	br	1000d5ac <_dtoa_r+0x11d4>
	    }
	  if (!(d.d *= 10.))
1000d548:	e0bff217 	ldw	r2,-56(fp)
1000d54c:	e0fff317 	ldw	r3,-52(fp)
1000d550:	000d883a 	mov	r6,zero
1000d554:	01d00934 	movhi	r7,16420
1000d558:	1009883a 	mov	r4,r2
1000d55c:	180b883a 	mov	r5,r3
1000d560:	00051580 	call	10005158 <__muldf3>
1000d564:	1009883a 	mov	r4,r2
1000d568:	180b883a 	mov	r5,r3
1000d56c:	2005883a 	mov	r2,r4
1000d570:	2807883a 	mov	r3,r5
1000d574:	e0bff215 	stw	r2,-56(fp)
1000d578:	e0fff315 	stw	r3,-52(fp)
1000d57c:	e0bff217 	ldw	r2,-56(fp)
1000d580:	e0fff317 	ldw	r3,-52(fp)
1000d584:	000d883a 	mov	r6,zero
1000d588:	000f883a 	mov	r7,zero
1000d58c:	1009883a 	mov	r4,r2
1000d590:	180b883a 	mov	r5,r3
1000d594:	00154180 	call	10015418 <__eqdf2>
1000d598:	10000626 	beq	r2,zero,1000d5b4 <_dtoa_r+0x11dc>
	  S = mhi = 0;
	  if (ilim < 0 || d.d <= 5 * ds)
	    goto no_digits;
	  goto one_digit;
	}
      for (i = 1;; i++)
1000d59c:	e0bfd217 	ldw	r2,-184(fp)
1000d5a0:	10800044 	addi	r2,r2,1
1000d5a4:	e0bfd215 	stw	r2,-184(fp)
		}
	      break;
	    }
	  if (!(d.d *= 10.))
	    break;
	}
1000d5a8:	003f7506 	br	1000d380 <__alt_data_end+0xf800d380>
			*s = '0';
			break;
		      }
		  ++*s++;
		}
	      break;
1000d5ac:	0001883a 	nop
1000d5b0:	00024f06 	br	1000def0 <_dtoa_r+0x1b18>
	    }
	  if (!(d.d *= 10.))
	    break;
1000d5b4:	0001883a 	nop
	}
      goto ret1;
1000d5b8:	00024d06 	br	1000def0 <_dtoa_r+0x1b18>
    }

  m2 = b2;
1000d5bc:	e0bfcf17 	ldw	r2,-196(fp)
1000d5c0:	e0bfda15 	stw	r2,-152(fp)
  m5 = b5;
1000d5c4:	e0bfd017 	ldw	r2,-192(fp)
1000d5c8:	e0bfdb15 	stw	r2,-148(fp)
  mhi = mlo = 0;
1000d5cc:	e03fe215 	stw	zero,-120(fp)
1000d5d0:	e0bfe217 	ldw	r2,-120(fp)
1000d5d4:	e0bfe315 	stw	r2,-116(fp)
  if (leftright)
1000d5d8:	e0bfd917 	ldw	r2,-156(fp)
1000d5dc:	10003a26 	beq	r2,zero,1000d6c8 <_dtoa_r+0x12f0>
    {
      if (mode < 2)
1000d5e0:	e0bffb17 	ldw	r2,-20(fp)
1000d5e4:	10800088 	cmpgei	r2,r2,2
1000d5e8:	10000a1e 	bne	r2,zero,1000d614 <_dtoa_r+0x123c>
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
1000d5ec:	e0bfe017 	ldw	r2,-128(fp)
1000d5f0:	10000326 	beq	r2,zero,1000d600 <_dtoa_r+0x1228>
1000d5f4:	e0bff117 	ldw	r2,-60(fp)
1000d5f8:	10810cc4 	addi	r2,r2,1075
1000d5fc:	00000306 	br	1000d60c <_dtoa_r+0x1234>
#endif
#ifdef IBM
	    1 + 4 * P - 3 - bbits + ((bbits + be - 1) & 3);
#else
	    1 + P - bbits;
1000d600:	e0bff017 	ldw	r2,-64(fp)
    {
      if (mode < 2)
	{
	  i =
#ifndef Sudden_Underflow
	    denorm ? be + (Bias + (P - 1) - 1 + 1) :
1000d604:	00c00d84 	movi	r3,54
1000d608:	1885c83a 	sub	r2,r3,r2
  mhi = mlo = 0;
  if (leftright)
    {
      if (mode < 2)
	{
	  i =
1000d60c:	e0bfd215 	stw	r2,-184(fp)
1000d610:	00002106 	br	1000d698 <_dtoa_r+0x12c0>
	    1 + P - bbits;
#endif
	}
      else
	{
	  j = ilim - 1;
1000d614:	e0bfd417 	ldw	r2,-176(fp)
1000d618:	10bfffc4 	addi	r2,r2,-1
1000d61c:	e0bfd615 	stw	r2,-168(fp)
	  if (m5 >= j)
1000d620:	e0ffdb17 	ldw	r3,-148(fp)
1000d624:	e0bfd617 	ldw	r2,-168(fp)
1000d628:	18800516 	blt	r3,r2,1000d640 <_dtoa_r+0x1268>
	    m5 -= j;
1000d62c:	e0ffdb17 	ldw	r3,-148(fp)
1000d630:	e0bfd617 	ldw	r2,-168(fp)
1000d634:	1885c83a 	sub	r2,r3,r2
1000d638:	e0bfdb15 	stw	r2,-148(fp)
1000d63c:	00000d06 	br	1000d674 <_dtoa_r+0x129c>
	  else
	    {
	      s5 += j -= m5;
1000d640:	e0ffd617 	ldw	r3,-168(fp)
1000d644:	e0bfdb17 	ldw	r2,-148(fp)
1000d648:	1885c83a 	sub	r2,r3,r2
1000d64c:	e0bfd615 	stw	r2,-168(fp)
1000d650:	e0bfd617 	ldw	r2,-168(fp)
1000d654:	e0ffdd17 	ldw	r3,-140(fp)
1000d658:	1885883a 	add	r2,r3,r2
1000d65c:	e0bfdd15 	stw	r2,-140(fp)
	      b5 += j;
1000d660:	e0ffd017 	ldw	r3,-192(fp)
1000d664:	e0bfd617 	ldw	r2,-168(fp)
1000d668:	1885883a 	add	r2,r3,r2
1000d66c:	e0bfd015 	stw	r2,-192(fp)
	      m5 = 0;
1000d670:	e03fdb15 	stw	zero,-148(fp)
	    }
	  if ((i = ilim) < 0)
1000d674:	e0bfd417 	ldw	r2,-176(fp)
1000d678:	e0bfd215 	stw	r2,-184(fp)
1000d67c:	e0bfd217 	ldw	r2,-184(fp)
1000d680:	1000050e 	bge	r2,zero,1000d698 <_dtoa_r+0x12c0>
	    {
	      m2 -= i;
1000d684:	e0ffda17 	ldw	r3,-152(fp)
1000d688:	e0bfd217 	ldw	r2,-184(fp)
1000d68c:	1885c83a 	sub	r2,r3,r2
1000d690:	e0bfda15 	stw	r2,-152(fp)
	      i = 0;
1000d694:	e03fd215 	stw	zero,-184(fp)
	    }
	}
      b2 += i;
1000d698:	e0ffcf17 	ldw	r3,-196(fp)
1000d69c:	e0bfd217 	ldw	r2,-184(fp)
1000d6a0:	1885883a 	add	r2,r3,r2
1000d6a4:	e0bfcf15 	stw	r2,-196(fp)
      s2 += i;
1000d6a8:	e0ffdc17 	ldw	r3,-144(fp)
1000d6ac:	e0bfd217 	ldw	r2,-184(fp)
1000d6b0:	1885883a 	add	r2,r3,r2
1000d6b4:	e0bfdc15 	stw	r2,-144(fp)
      mhi = i2b (ptr, 1);
1000d6b8:	01400044 	movi	r5,1
1000d6bc:	e13ff817 	ldw	r4,-32(fp)
1000d6c0:	00108640 	call	10010864 <__i2b>
1000d6c4:	e0bfe315 	stw	r2,-116(fp)
    }
  if (m2 > 0 && s2 > 0)
1000d6c8:	e0bfda17 	ldw	r2,-152(fp)
1000d6cc:	0080130e 	bge	zero,r2,1000d71c <_dtoa_r+0x1344>
1000d6d0:	e0bfdc17 	ldw	r2,-144(fp)
1000d6d4:	0080110e 	bge	zero,r2,1000d71c <_dtoa_r+0x1344>
    {
      i = m2 < s2 ? m2 : s2;
1000d6d8:	e0ffda17 	ldw	r3,-152(fp)
1000d6dc:	e0bfdc17 	ldw	r2,-144(fp)
1000d6e0:	1880010e 	bge	r3,r2,1000d6e8 <_dtoa_r+0x1310>
1000d6e4:	1805883a 	mov	r2,r3
1000d6e8:	e0bfd215 	stw	r2,-184(fp)
      b2 -= i;
1000d6ec:	e0ffcf17 	ldw	r3,-196(fp)
1000d6f0:	e0bfd217 	ldw	r2,-184(fp)
1000d6f4:	1885c83a 	sub	r2,r3,r2
1000d6f8:	e0bfcf15 	stw	r2,-196(fp)
      m2 -= i;
1000d6fc:	e0ffda17 	ldw	r3,-152(fp)
1000d700:	e0bfd217 	ldw	r2,-184(fp)
1000d704:	1885c83a 	sub	r2,r3,r2
1000d708:	e0bfda15 	stw	r2,-152(fp)
      s2 -= i;
1000d70c:	e0ffdc17 	ldw	r3,-144(fp)
1000d710:	e0bfd217 	ldw	r2,-184(fp)
1000d714:	1885c83a 	sub	r2,r3,r2
1000d718:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b5 > 0)
1000d71c:	e0bfd017 	ldw	r2,-192(fp)
1000d720:	0080240e 	bge	zero,r2,1000d7b4 <_dtoa_r+0x13dc>
    {
      if (leftright)
1000d724:	e0bfd917 	ldw	r2,-156(fp)
1000d728:	10001d26 	beq	r2,zero,1000d7a0 <_dtoa_r+0x13c8>
	{
	  if (m5 > 0)
1000d72c:	e0bfdb17 	ldw	r2,-148(fp)
1000d730:	00800f0e 	bge	zero,r2,1000d770 <_dtoa_r+0x1398>
	    {
	      mhi = pow5mult (ptr, mhi, m5);
1000d734:	e1bfdb17 	ldw	r6,-148(fp)
1000d738:	e17fe317 	ldw	r5,-116(fp)
1000d73c:	e13ff817 	ldw	r4,-32(fp)
1000d740:	0010cac0 	call	10010cac <__pow5mult>
1000d744:	e0bfe315 	stw	r2,-116(fp)
	      b1 = mult (ptr, mhi, b);
1000d748:	e1bfe117 	ldw	r6,-124(fp)
1000d74c:	e17fe317 	ldw	r5,-116(fp)
1000d750:	e13ff817 	ldw	r4,-32(fp)
1000d754:	00108bc0 	call	100108bc <__multiply>
1000d758:	e0bfee15 	stw	r2,-72(fp)
	      Bfree (ptr, b);
1000d75c:	e17fe117 	ldw	r5,-124(fp)
1000d760:	e13ff817 	ldw	r4,-32(fp)
1000d764:	00103340 	call	10010334 <_Bfree>
	      b = b1;
1000d768:	e0bfee17 	ldw	r2,-72(fp)
1000d76c:	e0bfe115 	stw	r2,-124(fp)
	    }
         if ((j = b5 - m5) != 0)
1000d770:	e0ffd017 	ldw	r3,-192(fp)
1000d774:	e0bfdb17 	ldw	r2,-148(fp)
1000d778:	1885c83a 	sub	r2,r3,r2
1000d77c:	e0bfd615 	stw	r2,-168(fp)
1000d780:	e0bfd617 	ldw	r2,-168(fp)
1000d784:	10000b26 	beq	r2,zero,1000d7b4 <_dtoa_r+0x13dc>
	    b = pow5mult (ptr, b, j);
1000d788:	e1bfd617 	ldw	r6,-168(fp)
1000d78c:	e17fe117 	ldw	r5,-124(fp)
1000d790:	e13ff817 	ldw	r4,-32(fp)
1000d794:	0010cac0 	call	10010cac <__pow5mult>
1000d798:	e0bfe115 	stw	r2,-124(fp)
1000d79c:	00000506 	br	1000d7b4 <_dtoa_r+0x13dc>
	}
      else
	b = pow5mult (ptr, b, b5);
1000d7a0:	e1bfd017 	ldw	r6,-192(fp)
1000d7a4:	e17fe117 	ldw	r5,-124(fp)
1000d7a8:	e13ff817 	ldw	r4,-32(fp)
1000d7ac:	0010cac0 	call	10010cac <__pow5mult>
1000d7b0:	e0bfe115 	stw	r2,-124(fp)
    }
  S = i2b (ptr, 1);
1000d7b4:	01400044 	movi	r5,1
1000d7b8:	e13ff817 	ldw	r4,-32(fp)
1000d7bc:	00108640 	call	10010864 <__i2b>
1000d7c0:	e0bfe415 	stw	r2,-112(fp)
  if (s5 > 0)
1000d7c4:	e0bfdd17 	ldw	r2,-140(fp)
1000d7c8:	0080050e 	bge	zero,r2,1000d7e0 <_dtoa_r+0x1408>
    S = pow5mult (ptr, S, s5);
1000d7cc:	e1bfdd17 	ldw	r6,-140(fp)
1000d7d0:	e17fe417 	ldw	r5,-112(fp)
1000d7d4:	e13ff817 	ldw	r4,-32(fp)
1000d7d8:	0010cac0 	call	10010cac <__pow5mult>
1000d7dc:	e0bfe415 	stw	r2,-112(fp)

  /* Check for special case that d is a normalized power of 2. */

  spec_case = 0;
1000d7e0:	e03fde15 	stw	zero,-136(fp)
  if (mode < 2)
1000d7e4:	e0bffb17 	ldw	r2,-20(fp)
1000d7e8:	10800088 	cmpgei	r2,r2,2
1000d7ec:	1000121e 	bne	r2,zero,1000d838 <_dtoa_r+0x1460>
    {
      if (!word1 (d) && !(word0 (d) & Bndry_mask)
1000d7f0:	e0bff217 	ldw	r2,-56(fp)
1000d7f4:	1000101e 	bne	r2,zero,1000d838 <_dtoa_r+0x1460>
1000d7f8:	e0fff317 	ldw	r3,-52(fp)
1000d7fc:	00800434 	movhi	r2,16
1000d800:	10bfffc4 	addi	r2,r2,-1
1000d804:	1884703a 	and	r2,r3,r2
1000d808:	10000b1e 	bne	r2,zero,1000d838 <_dtoa_r+0x1460>
#ifndef Sudden_Underflow
	  && word0 (d) & Exp_mask
1000d80c:	e0bff317 	ldw	r2,-52(fp)
1000d810:	109ffc2c 	andhi	r2,r2,32752
1000d814:	10000826 	beq	r2,zero,1000d838 <_dtoa_r+0x1460>
#endif
	)
	{
	  /* The special case */
	  b2 += Log2P;
1000d818:	e0bfcf17 	ldw	r2,-196(fp)
1000d81c:	10800044 	addi	r2,r2,1
1000d820:	e0bfcf15 	stw	r2,-196(fp)
	  s2 += Log2P;
1000d824:	e0bfdc17 	ldw	r2,-144(fp)
1000d828:	10800044 	addi	r2,r2,1
1000d82c:	e0bfdc15 	stw	r2,-144(fp)
	  spec_case = 1;
1000d830:	00800044 	movi	r2,1
1000d834:	e0bfde15 	stw	r2,-136(fp)
   * and for all and pass them and a shift to quorem, so it
   * can do shifts and ors to compute the numerator for q.
   */

#ifdef Pack_32
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0x1f) != 0)
1000d838:	e0bfdd17 	ldw	r2,-140(fp)
1000d83c:	10000f26 	beq	r2,zero,1000d87c <_dtoa_r+0x14a4>
1000d840:	e0bfe417 	ldw	r2,-112(fp)
1000d844:	10800417 	ldw	r2,16(r2)
1000d848:	10bfffc4 	addi	r2,r2,-1
1000d84c:	e0ffe417 	ldw	r3,-112(fp)
1000d850:	10800144 	addi	r2,r2,5
1000d854:	1085883a 	add	r2,r2,r2
1000d858:	1085883a 	add	r2,r2,r2
1000d85c:	1885883a 	add	r2,r3,r2
1000d860:	10800017 	ldw	r2,0(r2)
1000d864:	1009883a 	mov	r4,r2
1000d868:	00106e80 	call	100106e8 <__hi0bits>
1000d86c:	1007883a 	mov	r3,r2
1000d870:	00800804 	movi	r2,32
1000d874:	10c5c83a 	sub	r2,r2,r3
1000d878:	00000106 	br	1000d880 <_dtoa_r+0x14a8>
1000d87c:	00800044 	movi	r2,1
1000d880:	e0ffdc17 	ldw	r3,-144(fp)
1000d884:	10c5883a 	add	r2,r2,r3
1000d888:	108007cc 	andi	r2,r2,31
1000d88c:	e0bfd215 	stw	r2,-184(fp)
1000d890:	e0bfd217 	ldw	r2,-184(fp)
1000d894:	10000426 	beq	r2,zero,1000d8a8 <_dtoa_r+0x14d0>
    i = 32 - i;
1000d898:	00c00804 	movi	r3,32
1000d89c:	e0bfd217 	ldw	r2,-184(fp)
1000d8a0:	1885c83a 	sub	r2,r3,r2
1000d8a4:	e0bfd215 	stw	r2,-184(fp)
#else
  if ((i = ((s5 ? 32 - hi0bits (S->_x[S->_wds - 1]) : 1) + s2) & 0xf) != 0)
    i = 16 - i;
#endif
  if (i > 4)
1000d8a8:	e0bfd217 	ldw	r2,-184(fp)
1000d8ac:	10800150 	cmplti	r2,r2,5
1000d8b0:	1000101e 	bne	r2,zero,1000d8f4 <_dtoa_r+0x151c>
    {
      i -= 4;
1000d8b4:	e0bfd217 	ldw	r2,-184(fp)
1000d8b8:	10bfff04 	addi	r2,r2,-4
1000d8bc:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
1000d8c0:	e0ffcf17 	ldw	r3,-196(fp)
1000d8c4:	e0bfd217 	ldw	r2,-184(fp)
1000d8c8:	1885883a 	add	r2,r3,r2
1000d8cc:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
1000d8d0:	e0ffda17 	ldw	r3,-152(fp)
1000d8d4:	e0bfd217 	ldw	r2,-184(fp)
1000d8d8:	1885883a 	add	r2,r3,r2
1000d8dc:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
1000d8e0:	e0ffdc17 	ldw	r3,-144(fp)
1000d8e4:	e0bfd217 	ldw	r2,-184(fp)
1000d8e8:	1885883a 	add	r2,r3,r2
1000d8ec:	e0bfdc15 	stw	r2,-144(fp)
1000d8f0:	00001206 	br	1000d93c <_dtoa_r+0x1564>
    }
  else if (i < 4)
1000d8f4:	e0bfd217 	ldw	r2,-184(fp)
1000d8f8:	10800108 	cmpgei	r2,r2,4
1000d8fc:	10000f1e 	bne	r2,zero,1000d93c <_dtoa_r+0x1564>
    {
      i += 28;
1000d900:	e0bfd217 	ldw	r2,-184(fp)
1000d904:	10800704 	addi	r2,r2,28
1000d908:	e0bfd215 	stw	r2,-184(fp)
      b2 += i;
1000d90c:	e0ffcf17 	ldw	r3,-196(fp)
1000d910:	e0bfd217 	ldw	r2,-184(fp)
1000d914:	1885883a 	add	r2,r3,r2
1000d918:	e0bfcf15 	stw	r2,-196(fp)
      m2 += i;
1000d91c:	e0ffda17 	ldw	r3,-152(fp)
1000d920:	e0bfd217 	ldw	r2,-184(fp)
1000d924:	1885883a 	add	r2,r3,r2
1000d928:	e0bfda15 	stw	r2,-152(fp)
      s2 += i;
1000d92c:	e0ffdc17 	ldw	r3,-144(fp)
1000d930:	e0bfd217 	ldw	r2,-184(fp)
1000d934:	1885883a 	add	r2,r3,r2
1000d938:	e0bfdc15 	stw	r2,-144(fp)
    }
  if (b2 > 0)
1000d93c:	e0bfcf17 	ldw	r2,-196(fp)
1000d940:	0080050e 	bge	zero,r2,1000d958 <_dtoa_r+0x1580>
    b = lshift (ptr, b, b2);
1000d944:	e1bfcf17 	ldw	r6,-196(fp)
1000d948:	e17fe117 	ldw	r5,-124(fp)
1000d94c:	e13ff817 	ldw	r4,-32(fp)
1000d950:	0010e240 	call	10010e24 <__lshift>
1000d954:	e0bfe115 	stw	r2,-124(fp)
  if (s2 > 0)
1000d958:	e0bfdc17 	ldw	r2,-144(fp)
1000d95c:	0080050e 	bge	zero,r2,1000d974 <_dtoa_r+0x159c>
    S = lshift (ptr, S, s2);
1000d960:	e1bfdc17 	ldw	r6,-144(fp)
1000d964:	e17fe417 	ldw	r5,-112(fp)
1000d968:	e13ff817 	ldw	r4,-32(fp)
1000d96c:	0010e240 	call	10010e24 <__lshift>
1000d970:	e0bfe415 	stw	r2,-112(fp)
  if (k_check)
1000d974:	e0bfd817 	ldw	r2,-160(fp)
1000d978:	10001726 	beq	r2,zero,1000d9d8 <_dtoa_r+0x1600>
    {
      if (cmp (b, S) < 0)
1000d97c:	e17fe417 	ldw	r5,-112(fp)
1000d980:	e13fe117 	ldw	r4,-124(fp)
1000d984:	001101c0 	call	1001101c <__mcmp>
1000d988:	1000130e 	bge	r2,zero,1000d9d8 <_dtoa_r+0x1600>
	{
	  k--;
1000d98c:	e0bfd717 	ldw	r2,-164(fp)
1000d990:	10bfffc4 	addi	r2,r2,-1
1000d994:	e0bfd715 	stw	r2,-164(fp)
	  b = multadd (ptr, b, 10, 0);	/* we botched the k estimate */
1000d998:	000f883a 	mov	r7,zero
1000d99c:	01800284 	movi	r6,10
1000d9a0:	e17fe117 	ldw	r5,-124(fp)
1000d9a4:	e13ff817 	ldw	r4,-32(fp)
1000d9a8:	00103b00 	call	100103b0 <__multadd>
1000d9ac:	e0bfe115 	stw	r2,-124(fp)
	  if (leftright)
1000d9b0:	e0bfd917 	ldw	r2,-156(fp)
1000d9b4:	10000626 	beq	r2,zero,1000d9d0 <_dtoa_r+0x15f8>
	    mhi = multadd (ptr, mhi, 10, 0);
1000d9b8:	000f883a 	mov	r7,zero
1000d9bc:	01800284 	movi	r6,10
1000d9c0:	e17fe317 	ldw	r5,-116(fp)
1000d9c4:	e13ff817 	ldw	r4,-32(fp)
1000d9c8:	00103b00 	call	100103b0 <__multadd>
1000d9cc:	e0bfe315 	stw	r2,-116(fp)
	  ilim = ilim1;
1000d9d0:	e0bfd517 	ldw	r2,-172(fp)
1000d9d4:	e0bfd415 	stw	r2,-176(fp)
	}
    }
  if (ilim <= 0 && mode > 2)
1000d9d8:	e0bfd417 	ldw	r2,-176(fp)
1000d9dc:	00801f16 	blt	zero,r2,1000da5c <_dtoa_r+0x1684>
1000d9e0:	e0bffb17 	ldw	r2,-20(fp)
1000d9e4:	108000d0 	cmplti	r2,r2,3
1000d9e8:	10001c1e 	bne	r2,zero,1000da5c <_dtoa_r+0x1684>
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
1000d9ec:	e0bfd417 	ldw	r2,-176(fp)
1000d9f0:	10000c16 	blt	r2,zero,1000da24 <_dtoa_r+0x164c>
1000d9f4:	000f883a 	mov	r7,zero
1000d9f8:	01800144 	movi	r6,5
1000d9fc:	e17fe417 	ldw	r5,-112(fp)
1000da00:	e13ff817 	ldw	r4,-32(fp)
1000da04:	00103b00 	call	100103b0 <__multadd>
1000da08:	e0bfe415 	stw	r2,-112(fp)
1000da0c:	e17fe417 	ldw	r5,-112(fp)
1000da10:	e13fe117 	ldw	r4,-124(fp)
1000da14:	001101c0 	call	1001101c <__mcmp>
1000da18:	00800716 	blt	zero,r2,1000da38 <_dtoa_r+0x1660>
1000da1c:	00000106 	br	1000da24 <_dtoa_r+0x164c>
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
	  if (d.d < -eps.d)
	    goto no_digits;
1000da20:	0001883a 	nop
    {
      if (ilim < 0 || cmp (b, S = multadd (ptr, S, 5, 0)) <= 0)
	{
	  /* no digits, fcvt style */
	no_digits:
	  k = -1 - ndigits;
1000da24:	e0800217 	ldw	r2,8(fp)
1000da28:	0084303a 	nor	r2,zero,r2
1000da2c:	e0bfd715 	stw	r2,-164(fp)
	  goto ret;
1000da30:	00011d06 	br	1000dea8 <_dtoa_r+0x1ad0>
      if (ilim == 0)
	{
	  S = mhi = 0;
	  d.d -= 5.;
	  if (d.d > eps.d)
	    goto one_digit;
1000da34:	0001883a 	nop
	no_digits:
	  k = -1 - ndigits;
	  goto ret;
	}
    one_digit:
      *s++ = '1';
1000da38:	e0bfe717 	ldw	r2,-100(fp)
1000da3c:	10c00044 	addi	r3,r2,1
1000da40:	e0ffe715 	stw	r3,-100(fp)
1000da44:	00c00c44 	movi	r3,49
1000da48:	10c00005 	stb	r3,0(r2)
      k++;
1000da4c:	e0bfd717 	ldw	r2,-164(fp)
1000da50:	10800044 	addi	r2,r2,1
1000da54:	e0bfd715 	stw	r2,-164(fp)
      goto ret;
1000da58:	00011306 	br	1000dea8 <_dtoa_r+0x1ad0>
    }
  if (leftright)
1000da5c:	e0bfd917 	ldw	r2,-156(fp)
1000da60:	1000ba26 	beq	r2,zero,1000dd4c <_dtoa_r+0x1974>
    {
      if (m2 > 0)
1000da64:	e0bfda17 	ldw	r2,-152(fp)
1000da68:	0080050e 	bge	zero,r2,1000da80 <_dtoa_r+0x16a8>
	mhi = lshift (ptr, mhi, m2);
1000da6c:	e1bfda17 	ldw	r6,-152(fp)
1000da70:	e17fe317 	ldw	r5,-116(fp)
1000da74:	e13ff817 	ldw	r4,-32(fp)
1000da78:	0010e240 	call	10010e24 <__lshift>
1000da7c:	e0bfe315 	stw	r2,-116(fp)

      /* Compute mlo -- check for special case
       * that d is a normalized power of 2.
       */

      mlo = mhi;
1000da80:	e0bfe317 	ldw	r2,-116(fp)
1000da84:	e0bfe215 	stw	r2,-120(fp)
      if (spec_case)
1000da88:	e0bfde17 	ldw	r2,-136(fp)
1000da8c:	10001826 	beq	r2,zero,1000daf0 <_dtoa_r+0x1718>
	{
	  mhi = Balloc (ptr, mhi->_k);
1000da90:	e0bfe317 	ldw	r2,-116(fp)
1000da94:	10800117 	ldw	r2,4(r2)
1000da98:	100b883a 	mov	r5,r2
1000da9c:	e13ff817 	ldw	r4,-32(fp)
1000daa0:	00102040 	call	10010204 <_Balloc>
1000daa4:	e0bfe315 	stw	r2,-116(fp)
	  Bcopy (mhi, mlo);
1000daa8:	e0bfe317 	ldw	r2,-116(fp)
1000daac:	10c00304 	addi	r3,r2,12
1000dab0:	e0bfe217 	ldw	r2,-120(fp)
1000dab4:	11000304 	addi	r4,r2,12
1000dab8:	e0bfe217 	ldw	r2,-120(fp)
1000dabc:	10800417 	ldw	r2,16(r2)
1000dac0:	10800084 	addi	r2,r2,2
1000dac4:	1085883a 	add	r2,r2,r2
1000dac8:	1085883a 	add	r2,r2,r2
1000dacc:	100d883a 	mov	r6,r2
1000dad0:	200b883a 	mov	r5,r4
1000dad4:	1809883a 	mov	r4,r3
1000dad8:	000fe740 	call	1000fe74 <memcpy>
	  mhi = lshift (ptr, mhi, Log2P);
1000dadc:	01800044 	movi	r6,1
1000dae0:	e17fe317 	ldw	r5,-116(fp)
1000dae4:	e13ff817 	ldw	r4,-32(fp)
1000dae8:	0010e240 	call	10010e24 <__lshift>
1000daec:	e0bfe315 	stw	r2,-116(fp)
	}

      for (i = 1;; i++)
1000daf0:	00800044 	movi	r2,1
1000daf4:	e0bfd215 	stw	r2,-184(fp)
	{
	  dig = quorem (b, S) + '0';
1000daf8:	e17fe417 	ldw	r5,-112(fp)
1000dafc:	e13fe117 	ldw	r4,-124(fp)
1000db00:	000c0140 	call	1000c014 <quorem>
1000db04:	10800c04 	addi	r2,r2,48
1000db08:	e0bfd115 	stw	r2,-188(fp)
	  /* Do we yet have the shortest decimal string
	   * that will round to d?
	   */
	  j = cmp (b, mlo);
1000db0c:	e17fe217 	ldw	r5,-120(fp)
1000db10:	e13fe117 	ldw	r4,-124(fp)
1000db14:	001101c0 	call	1001101c <__mcmp>
1000db18:	e0bfd615 	stw	r2,-168(fp)
	  delta = diff (ptr, S, mhi);
1000db1c:	e1bfe317 	ldw	r6,-116(fp)
1000db20:	e17fe417 	ldw	r5,-112(fp)
1000db24:	e13ff817 	ldw	r4,-32(fp)
1000db28:	00111300 	call	10011130 <__mdiff>
1000db2c:	e0bfef15 	stw	r2,-68(fp)
	  j1 = delta->_sign ? 1 : cmp (b, delta);
1000db30:	e0bfef17 	ldw	r2,-68(fp)
1000db34:	10800317 	ldw	r2,12(r2)
1000db38:	1000041e 	bne	r2,zero,1000db4c <_dtoa_r+0x1774>
1000db3c:	e17fef17 	ldw	r5,-68(fp)
1000db40:	e13fe117 	ldw	r4,-124(fp)
1000db44:	001101c0 	call	1001101c <__mcmp>
1000db48:	00000106 	br	1000db50 <_dtoa_r+0x1778>
1000db4c:	00800044 	movi	r2,1
1000db50:	e0bfec15 	stw	r2,-80(fp)
	  Bfree (ptr, delta);
1000db54:	e17fef17 	ldw	r5,-68(fp)
1000db58:	e13ff817 	ldw	r4,-32(fp)
1000db5c:	00103340 	call	10010334 <_Bfree>
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
1000db60:	e0bfec17 	ldw	r2,-80(fp)
1000db64:	1000131e 	bne	r2,zero,1000dbb4 <_dtoa_r+0x17dc>
1000db68:	e0bffb17 	ldw	r2,-20(fp)
1000db6c:	1000111e 	bne	r2,zero,1000dbb4 <_dtoa_r+0x17dc>
1000db70:	e0bff217 	ldw	r2,-56(fp)
1000db74:	1080004c 	andi	r2,r2,1
1000db78:	10000e1e 	bne	r2,zero,1000dbb4 <_dtoa_r+0x17dc>
	    {
	      if (dig == '9')
1000db7c:	e0bfd117 	ldw	r2,-188(fp)
1000db80:	10800e58 	cmpnei	r2,r2,57
1000db84:	10003726 	beq	r2,zero,1000dc64 <_dtoa_r+0x188c>
		goto round_9_up;
	      if (j > 0)
1000db88:	e0bfd617 	ldw	r2,-168(fp)
1000db8c:	0080030e 	bge	zero,r2,1000db9c <_dtoa_r+0x17c4>
		dig++;
1000db90:	e0bfd117 	ldw	r2,-188(fp)
1000db94:	10800044 	addi	r2,r2,1
1000db98:	e0bfd115 	stw	r2,-188(fp)
	      *s++ = dig;
1000db9c:	e0bfe717 	ldw	r2,-100(fp)
1000dba0:	10c00044 	addi	r3,r2,1
1000dba4:	e0ffe715 	stw	r3,-100(fp)
1000dba8:	e0ffd117 	ldw	r3,-188(fp)
1000dbac:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000dbb0:	0000bd06 	br	1000dea8 <_dtoa_r+0x1ad0>
	    }
#endif
         if ((j < 0) || ((j == 0) && !mode
1000dbb4:	e0bfd617 	ldw	r2,-168(fp)
1000dbb8:	10000716 	blt	r2,zero,1000dbd8 <_dtoa_r+0x1800>
1000dbbc:	e0bfd617 	ldw	r2,-168(fp)
1000dbc0:	1000221e 	bne	r2,zero,1000dc4c <_dtoa_r+0x1874>
1000dbc4:	e0bffb17 	ldw	r2,-20(fp)
1000dbc8:	1000201e 	bne	r2,zero,1000dc4c <_dtoa_r+0x1874>
#ifndef ROUND_BIASED
	      && !(word1 (d) & 1)
1000dbcc:	e0bff217 	ldw	r2,-56(fp)
1000dbd0:	1080004c 	andi	r2,r2,1
1000dbd4:	10001d1e 	bne	r2,zero,1000dc4c <_dtoa_r+0x1874>
#endif
           ))
	    {
	      if (j1 > 0)
1000dbd8:	e0bfec17 	ldw	r2,-80(fp)
1000dbdc:	0080150e 	bge	zero,r2,1000dc34 <_dtoa_r+0x185c>
		{
		  b = lshift (ptr, b, 1);
1000dbe0:	01800044 	movi	r6,1
1000dbe4:	e17fe117 	ldw	r5,-124(fp)
1000dbe8:	e13ff817 	ldw	r4,-32(fp)
1000dbec:	0010e240 	call	10010e24 <__lshift>
1000dbf0:	e0bfe115 	stw	r2,-124(fp)
		  j1 = cmp (b, S);
1000dbf4:	e17fe417 	ldw	r5,-112(fp)
1000dbf8:	e13fe117 	ldw	r4,-124(fp)
1000dbfc:	001101c0 	call	1001101c <__mcmp>
1000dc00:	e0bfec15 	stw	r2,-80(fp)
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
1000dc04:	e0bfec17 	ldw	r2,-80(fp)
1000dc08:	00800516 	blt	zero,r2,1000dc20 <_dtoa_r+0x1848>
1000dc0c:	e0bfec17 	ldw	r2,-80(fp)
1000dc10:	1000081e 	bne	r2,zero,1000dc34 <_dtoa_r+0x185c>
1000dc14:	e0bfd117 	ldw	r2,-188(fp)
1000dc18:	1080004c 	andi	r2,r2,1
1000dc1c:	10000526 	beq	r2,zero,1000dc34 <_dtoa_r+0x185c>
		      && dig++ == '9')
1000dc20:	e0bfd117 	ldw	r2,-188(fp)
1000dc24:	10c00044 	addi	r3,r2,1
1000dc28:	e0ffd115 	stw	r3,-188(fp)
1000dc2c:	10800e58 	cmpnei	r2,r2,57
1000dc30:	10000e26 	beq	r2,zero,1000dc6c <_dtoa_r+0x1894>
		    goto round_9_up;
		}
	      *s++ = dig;
1000dc34:	e0bfe717 	ldw	r2,-100(fp)
1000dc38:	10c00044 	addi	r3,r2,1
1000dc3c:	e0ffe715 	stw	r3,-100(fp)
1000dc40:	e0ffd117 	ldw	r3,-188(fp)
1000dc44:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000dc48:	00009706 	br	1000dea8 <_dtoa_r+0x1ad0>
	    }
	  if (j1 > 0)
1000dc4c:	e0bfec17 	ldw	r2,-80(fp)
1000dc50:	0080140e 	bge	zero,r2,1000dca4 <_dtoa_r+0x18cc>
	    {
	      if (dig == '9')
1000dc54:	e0bfd117 	ldw	r2,-188(fp)
1000dc58:	10800e58 	cmpnei	r2,r2,57
1000dc5c:	10000a1e 	bne	r2,zero,1000dc88 <_dtoa_r+0x18b0>
1000dc60:	00000306 	br	1000dc70 <_dtoa_r+0x1898>
	  Bfree (ptr, delta);
#ifndef ROUND_BIASED
	  if (j1 == 0 && !mode && !(word1 (d) & 1))
	    {
	      if (dig == '9')
		goto round_9_up;
1000dc64:	0001883a 	nop
1000dc68:	00000106 	br	1000dc70 <_dtoa_r+0x1898>
		{
		  b = lshift (ptr, b, 1);
		  j1 = cmp (b, S);
                 if (((j1 > 0) || ((j1 == 0) && (dig & 1)))
		      && dig++ == '9')
		    goto round_9_up;
1000dc6c:	0001883a 	nop
	  if (j1 > 0)
	    {
	      if (dig == '9')
		{		/* possible if i == 1 */
		round_9_up:
		  *s++ = '9';
1000dc70:	e0bfe717 	ldw	r2,-100(fp)
1000dc74:	10c00044 	addi	r3,r2,1
1000dc78:	e0ffe715 	stw	r3,-100(fp)
1000dc7c:	00c00e44 	movi	r3,57
1000dc80:	10c00005 	stb	r3,0(r2)
		  goto roundoff;
1000dc84:	00005d06 	br	1000ddfc <_dtoa_r+0x1a24>
		}
	      *s++ = dig + 1;
1000dc88:	e0bfe717 	ldw	r2,-100(fp)
1000dc8c:	10c00044 	addi	r3,r2,1
1000dc90:	e0ffe715 	stw	r3,-100(fp)
1000dc94:	e0ffd117 	ldw	r3,-188(fp)
1000dc98:	18c00044 	addi	r3,r3,1
1000dc9c:	10c00005 	stb	r3,0(r2)
	      goto ret;
1000dca0:	00008106 	br	1000dea8 <_dtoa_r+0x1ad0>
	    }
	  *s++ = dig;
1000dca4:	e0bfe717 	ldw	r2,-100(fp)
1000dca8:	10c00044 	addi	r3,r2,1
1000dcac:	e0ffe715 	stw	r3,-100(fp)
1000dcb0:	e0ffd117 	ldw	r3,-188(fp)
1000dcb4:	10c00005 	stb	r3,0(r2)
	  if (i == ilim)
1000dcb8:	e0ffd217 	ldw	r3,-184(fp)
1000dcbc:	e0bfd417 	ldw	r2,-176(fp)
1000dcc0:	18803b26 	beq	r3,r2,1000ddb0 <_dtoa_r+0x19d8>
	    break;
	  b = multadd (ptr, b, 10, 0);
1000dcc4:	000f883a 	mov	r7,zero
1000dcc8:	01800284 	movi	r6,10
1000dccc:	e17fe117 	ldw	r5,-124(fp)
1000dcd0:	e13ff817 	ldw	r4,-32(fp)
1000dcd4:	00103b00 	call	100103b0 <__multadd>
1000dcd8:	e0bfe115 	stw	r2,-124(fp)
	  if (mlo == mhi)
1000dcdc:	e0ffe217 	ldw	r3,-120(fp)
1000dce0:	e0bfe317 	ldw	r2,-116(fp)
1000dce4:	1880091e 	bne	r3,r2,1000dd0c <_dtoa_r+0x1934>
	    mlo = mhi = multadd (ptr, mhi, 10, 0);
1000dce8:	000f883a 	mov	r7,zero
1000dcec:	01800284 	movi	r6,10
1000dcf0:	e17fe317 	ldw	r5,-116(fp)
1000dcf4:	e13ff817 	ldw	r4,-32(fp)
1000dcf8:	00103b00 	call	100103b0 <__multadd>
1000dcfc:	e0bfe315 	stw	r2,-116(fp)
1000dd00:	e0bfe317 	ldw	r2,-116(fp)
1000dd04:	e0bfe215 	stw	r2,-120(fp)
1000dd08:	00000c06 	br	1000dd3c <_dtoa_r+0x1964>
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
1000dd0c:	000f883a 	mov	r7,zero
1000dd10:	01800284 	movi	r6,10
1000dd14:	e17fe217 	ldw	r5,-120(fp)
1000dd18:	e13ff817 	ldw	r4,-32(fp)
1000dd1c:	00103b00 	call	100103b0 <__multadd>
1000dd20:	e0bfe215 	stw	r2,-120(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
1000dd24:	000f883a 	mov	r7,zero
1000dd28:	01800284 	movi	r6,10
1000dd2c:	e17fe317 	ldw	r5,-116(fp)
1000dd30:	e13ff817 	ldw	r4,-32(fp)
1000dd34:	00103b00 	call	100103b0 <__multadd>
1000dd38:	e0bfe315 	stw	r2,-116(fp)
	  mhi = Balloc (ptr, mhi->_k);
	  Bcopy (mhi, mlo);
	  mhi = lshift (ptr, mhi, Log2P);
	}

      for (i = 1;; i++)
1000dd3c:	e0bfd217 	ldw	r2,-184(fp)
1000dd40:	10800044 	addi	r2,r2,1
1000dd44:	e0bfd215 	stw	r2,-184(fp)
	  else
	    {
	      mlo = multadd (ptr, mlo, 10, 0);
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
1000dd48:	003f6b06 	br	1000daf8 <__alt_data_end+0xf800daf8>
    }
  else
    for (i = 1;; i++)
1000dd4c:	00800044 	movi	r2,1
1000dd50:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
1000dd54:	e43fe717 	ldw	r16,-100(fp)
1000dd58:	80800044 	addi	r2,r16,1
1000dd5c:	e0bfe715 	stw	r2,-100(fp)
1000dd60:	e17fe417 	ldw	r5,-112(fp)
1000dd64:	e13fe117 	ldw	r4,-124(fp)
1000dd68:	000c0140 	call	1000c014 <quorem>
1000dd6c:	10800c04 	addi	r2,r2,48
1000dd70:	e0bfd115 	stw	r2,-188(fp)
1000dd74:	e0bfd117 	ldw	r2,-188(fp)
1000dd78:	80800005 	stb	r2,0(r16)
	if (i >= ilim)
1000dd7c:	e0ffd217 	ldw	r3,-184(fp)
1000dd80:	e0bfd417 	ldw	r2,-176(fp)
1000dd84:	18800c0e 	bge	r3,r2,1000ddb8 <_dtoa_r+0x19e0>
	  break;
	b = multadd (ptr, b, 10, 0);
1000dd88:	000f883a 	mov	r7,zero
1000dd8c:	01800284 	movi	r6,10
1000dd90:	e17fe117 	ldw	r5,-124(fp)
1000dd94:	e13ff817 	ldw	r4,-32(fp)
1000dd98:	00103b00 	call	100103b0 <__multadd>
1000dd9c:	e0bfe115 	stw	r2,-124(fp)
	      mhi = multadd (ptr, mhi, 10, 0);
	    }
	}
    }
  else
    for (i = 1;; i++)
1000dda0:	e0bfd217 	ldw	r2,-184(fp)
1000dda4:	10800044 	addi	r2,r2,1
1000dda8:	e0bfd215 	stw	r2,-184(fp)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
	b = multadd (ptr, b, 10, 0);
      }
1000ddac:	003fe906 	br	1000dd54 <__alt_data_end+0xf800dd54>
	      *s++ = dig + 1;
	      goto ret;
	    }
	  *s++ = dig;
	  if (i == ilim)
	    break;
1000ddb0:	0001883a 	nop
1000ddb4:	00000106 	br	1000ddbc <_dtoa_r+0x19e4>
  else
    for (i = 1;; i++)
      {
	*s++ = dig = quorem (b, S) + '0';
	if (i >= ilim)
	  break;
1000ddb8:	0001883a 	nop
	b = multadd (ptr, b, 10, 0);
      }

  /* Round off last digit */

  b = lshift (ptr, b, 1);
1000ddbc:	01800044 	movi	r6,1
1000ddc0:	e17fe117 	ldw	r5,-124(fp)
1000ddc4:	e13ff817 	ldw	r4,-32(fp)
1000ddc8:	0010e240 	call	10010e24 <__lshift>
1000ddcc:	e0bfe115 	stw	r2,-124(fp)
  j = cmp (b, S);
1000ddd0:	e17fe417 	ldw	r5,-112(fp)
1000ddd4:	e13fe117 	ldw	r4,-124(fp)
1000ddd8:	001101c0 	call	1001101c <__mcmp>
1000dddc:	e0bfd615 	stw	r2,-168(fp)
  if ((j > 0) || ((j == 0) && (dig & 1)))
1000dde0:	e0bfd617 	ldw	r2,-168(fp)
1000dde4:	00801216 	blt	zero,r2,1000de30 <_dtoa_r+0x1a58>
1000dde8:	e0bfd617 	ldw	r2,-168(fp)
1000ddec:	1000211e 	bne	r2,zero,1000de74 <_dtoa_r+0x1a9c>
1000ddf0:	e0bfd117 	ldw	r2,-188(fp)
1000ddf4:	1080004c 	andi	r2,r2,1
1000ddf8:	10001e26 	beq	r2,zero,1000de74 <_dtoa_r+0x1a9c>
    {
    roundoff:
      while (*--s == '9')
1000ddfc:	00000c06 	br	1000de30 <_dtoa_r+0x1a58>
	if (s == s0)
1000de00:	e0ffe717 	ldw	r3,-100(fp)
1000de04:	e0bfe917 	ldw	r2,-92(fp)
1000de08:	1880091e 	bne	r3,r2,1000de30 <_dtoa_r+0x1a58>
	  {
	    k++;
1000de0c:	e0bfd717 	ldw	r2,-164(fp)
1000de10:	10800044 	addi	r2,r2,1
1000de14:	e0bfd715 	stw	r2,-164(fp)
	    *s++ = '1';
1000de18:	e0bfe717 	ldw	r2,-100(fp)
1000de1c:	10c00044 	addi	r3,r2,1
1000de20:	e0ffe715 	stw	r3,-100(fp)
1000de24:	00c00c44 	movi	r3,49
1000de28:	10c00005 	stb	r3,0(r2)
	    goto ret;
1000de2c:	00001e06 	br	1000dea8 <_dtoa_r+0x1ad0>
  b = lshift (ptr, b, 1);
  j = cmp (b, S);
  if ((j > 0) || ((j == 0) && (dig & 1)))
    {
    roundoff:
      while (*--s == '9')
1000de30:	e0bfe717 	ldw	r2,-100(fp)
1000de34:	10bfffc4 	addi	r2,r2,-1
1000de38:	e0bfe715 	stw	r2,-100(fp)
1000de3c:	e0bfe717 	ldw	r2,-100(fp)
1000de40:	10800003 	ldbu	r2,0(r2)
1000de44:	10803fcc 	andi	r2,r2,255
1000de48:	1080201c 	xori	r2,r2,128
1000de4c:	10bfe004 	addi	r2,r2,-128
1000de50:	10800e60 	cmpeqi	r2,r2,57
1000de54:	103fea1e 	bne	r2,zero,1000de00 <__alt_data_end+0xf800de00>
	  {
	    k++;
	    *s++ = '1';
	    goto ret;
	  }
      ++*s++;
1000de58:	e0bfe717 	ldw	r2,-100(fp)
1000de5c:	10c00044 	addi	r3,r2,1
1000de60:	e0ffe715 	stw	r3,-100(fp)
1000de64:	10c00003 	ldbu	r3,0(r2)
1000de68:	18c00044 	addi	r3,r3,1
1000de6c:	10c00005 	stb	r3,0(r2)
1000de70:	00000d06 	br	1000dea8 <_dtoa_r+0x1ad0>
    }
  else
    {
      while (*--s == '0');
1000de74:	e0bfe717 	ldw	r2,-100(fp)
1000de78:	10bfffc4 	addi	r2,r2,-1
1000de7c:	e0bfe715 	stw	r2,-100(fp)
1000de80:	e0bfe717 	ldw	r2,-100(fp)
1000de84:	10800003 	ldbu	r2,0(r2)
1000de88:	10803fcc 	andi	r2,r2,255
1000de8c:	1080201c 	xori	r2,r2,128
1000de90:	10bfe004 	addi	r2,r2,-128
1000de94:	10800c20 	cmpeqi	r2,r2,48
1000de98:	103ff61e 	bne	r2,zero,1000de74 <__alt_data_end+0xf800de74>
      s++;
1000de9c:	e0bfe717 	ldw	r2,-100(fp)
1000dea0:	10800044 	addi	r2,r2,1
1000dea4:	e0bfe715 	stw	r2,-100(fp)
    }
ret:
  Bfree (ptr, S);
1000dea8:	e17fe417 	ldw	r5,-112(fp)
1000deac:	e13ff817 	ldw	r4,-32(fp)
1000deb0:	00103340 	call	10010334 <_Bfree>
  if (mhi)
1000deb4:	e0bfe317 	ldw	r2,-116(fp)
1000deb8:	10000d26 	beq	r2,zero,1000def0 <_dtoa_r+0x1b18>
    {
      if (mlo && mlo != mhi)
1000debc:	e0bfe217 	ldw	r2,-120(fp)
1000dec0:	10000626 	beq	r2,zero,1000dedc <_dtoa_r+0x1b04>
1000dec4:	e0ffe217 	ldw	r3,-120(fp)
1000dec8:	e0bfe317 	ldw	r2,-116(fp)
1000decc:	18800326 	beq	r3,r2,1000dedc <_dtoa_r+0x1b04>
	Bfree (ptr, mlo);
1000ded0:	e17fe217 	ldw	r5,-120(fp)
1000ded4:	e13ff817 	ldw	r4,-32(fp)
1000ded8:	00103340 	call	10010334 <_Bfree>
      Bfree (ptr, mhi);
1000dedc:	e17fe317 	ldw	r5,-116(fp)
1000dee0:	e13ff817 	ldw	r4,-32(fp)
1000dee4:	00103340 	call	10010334 <_Bfree>
1000dee8:	00000106 	br	1000def0 <_dtoa_r+0x1b18>
	    {
	      L = d.d;
	      d.d -= L;
	      *s++ = '0' + (int) L;
	      if (d.d < eps.d)
		goto ret1;
1000deec:	0001883a 	nop
      if (mlo && mlo != mhi)
	Bfree (ptr, mlo);
      Bfree (ptr, mhi);
    }
ret1:
  Bfree (ptr, b);
1000def0:	e17fe117 	ldw	r5,-124(fp)
1000def4:	e13ff817 	ldw	r4,-32(fp)
1000def8:	00103340 	call	10010334 <_Bfree>
  *s = 0;
1000defc:	e0bfe717 	ldw	r2,-100(fp)
1000df00:	10000005 	stb	zero,0(r2)
  *decpt = k + 1;
1000df04:	e0bfd717 	ldw	r2,-164(fp)
1000df08:	10c00044 	addi	r3,r2,1
1000df0c:	e0800317 	ldw	r2,12(fp)
1000df10:	10c00015 	stw	r3,0(r2)
  if (rve)
1000df14:	e0800517 	ldw	r2,20(fp)
1000df18:	10000326 	beq	r2,zero,1000df28 <_dtoa_r+0x1b50>
    *rve = s;
1000df1c:	e0800517 	ldw	r2,20(fp)
1000df20:	e0ffe717 	ldw	r3,-100(fp)
1000df24:	10c00015 	stw	r3,0(r2)
  return s0;
1000df28:	e0bfe917 	ldw	r2,-92(fp)
}
1000df2c:	e6fffc04 	addi	sp,fp,-16
1000df30:	dfc00517 	ldw	ra,20(sp)
1000df34:	df000417 	ldw	fp,16(sp)
1000df38:	dcc00317 	ldw	r19,12(sp)
1000df3c:	dc800217 	ldw	r18,8(sp)
1000df40:	dc400117 	ldw	r17,4(sp)
1000df44:	dc000017 	ldw	r16,0(sp)
1000df48:	dec00604 	addi	sp,sp,24
1000df4c:	f800283a 	ret

1000df50 <__errno>:

#ifndef _REENT_ONLY

int *
__errno ()
{
1000df50:	deffff04 	addi	sp,sp,-4
1000df54:	df000015 	stw	fp,0(sp)
1000df58:	d839883a 	mov	fp,sp
  return &_REENT->_errno;
1000df5c:	008403b4 	movhi	r2,4110
1000df60:	10a4cc04 	addi	r2,r2,-27856
1000df64:	10800017 	ldw	r2,0(r2)
}
1000df68:	e037883a 	mov	sp,fp
1000df6c:	df000017 	ldw	fp,0(sp)
1000df70:	dec00104 	addi	sp,sp,4
1000df74:	f800283a 	ret

1000df78 <__sflush_r>:
   directly from __srefill. */
int
_DEFUN(__sflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000df78:	defff504 	addi	sp,sp,-44
1000df7c:	dfc00a15 	stw	ra,40(sp)
1000df80:	df000915 	stw	fp,36(sp)
1000df84:	dcc00815 	stw	r19,32(sp)
1000df88:	dc800715 	stw	r18,28(sp)
1000df8c:	dc400615 	stw	r17,24(sp)
1000df90:	dc000515 	stw	r16,20(sp)
1000df94:	df000904 	addi	fp,sp,36
1000df98:	e13ffb15 	stw	r4,-20(fp)
1000df9c:	2821883a 	mov	r16,r5
  register unsigned char *p;
  register _READ_WRITE_BUFSIZE_TYPE n;
  register _READ_WRITE_RETURN_TYPE t;
  short flags;

  flags = fp->_flags;
1000dfa0:	8080030b 	ldhu	r2,12(r16)
1000dfa4:	e0bff90d 	sth	r2,-28(fp)
  if ((flags & __SWR) == 0)
1000dfa8:	e0bff90b 	ldhu	r2,-28(fp)
1000dfac:	10bfffcc 	andi	r2,r2,65535
1000dfb0:	1080020c 	andi	r2,r2,8
1000dfb4:	1000831e 	bne	r2,zero,1000e1c4 <__sflush_r+0x24c>
    {
#ifdef _FSEEK_OPTIMIZATION
      /* For a read stream, an fflush causes the next seek to be
         unoptimized (i.e. forces a system-level seek).  This conforms
         to the POSIX and SUSv3 standards.  */
      fp->_flags |= __SNPT;
1000dfb8:	8080030b 	ldhu	r2,12(r16)
1000dfbc:	10820014 	ori	r2,r2,2048
1000dfc0:	8080030d 	sth	r2,12(r16)
         the next byte from the file rather than the buffer.  This conforms
         to the POSIX and SUSv3 standards.  Note that the standards allow
         this seek to be deferred until necessary, but we choose to do it here
         to make the change simpler, more contained, and less likely
         to miss a code scenario.  */
      if ((fp->_r > 0 || fp->_ur > 0) && fp->_seek != NULL)
1000dfc4:	80800117 	ldw	r2,4(r16)
1000dfc8:	00800216 	blt	zero,r2,1000dfd4 <__sflush_r+0x5c>
1000dfcc:	80800f17 	ldw	r2,60(r16)
1000dfd0:	00807a0e 	bge	zero,r2,1000e1bc <__sflush_r+0x244>
1000dfd4:	80800a17 	ldw	r2,40(r16)
1000dfd8:	10007826 	beq	r2,zero,1000e1bc <__sflush_r+0x244>
#endif

	  /* Save last errno and set errno to 0, so we can check if a device
	     returns with a valid position -1.  We restore the last errno if
	     no other error condition has been encountered. */
	  tmp_errno = ptr->_errno;
1000dfdc:	e0bffb17 	ldw	r2,-20(fp)
1000dfe0:	10800017 	ldw	r2,0(r2)
1000dfe4:	e0bffa15 	stw	r2,-24(fp)
	  ptr->_errno = 0;
1000dfe8:	e0bffb17 	ldw	r2,-20(fp)
1000dfec:	10000015 	stw	zero,0(r2)
	  /* Get the physical position we are at in the file.  */
	  if (fp->_flags & __SOFF)
1000dff0:	8080030b 	ldhu	r2,12(r16)
1000dff4:	10bfffcc 	andi	r2,r2,65535
1000dff8:	1084000c 	andi	r2,r2,4096
1000dffc:	10000326 	beq	r2,zero,1000e00c <__sflush_r+0x94>
	    curoff = fp->_offset;
1000e000:	80801417 	ldw	r2,80(r16)
1000e004:	e0bff715 	stw	r2,-36(fp)
1000e008:	00002206 	br	1000e094 <__sflush_r+0x11c>
#ifdef __LARGE64_FILES
	      if (fp->_flags & __SL64)
		curoff = fp->_seek64 (ptr, fp->_cookie, 0, SEEK_CUR);
	      else
#endif
		curoff = fp->_seek (ptr, fp->_cookie, 0, SEEK_CUR);
1000e00c:	80800a17 	ldw	r2,40(r16)
1000e010:	80c00717 	ldw	r3,28(r16)
1000e014:	01c00044 	movi	r7,1
1000e018:	000d883a 	mov	r6,zero
1000e01c:	180b883a 	mov	r5,r3
1000e020:	e13ffb17 	ldw	r4,-20(fp)
1000e024:	103ee83a 	callr	r2
1000e028:	e0bff715 	stw	r2,-36(fp)
	      if (curoff == -1L && ptr->_errno != 0)
1000e02c:	e0bff717 	ldw	r2,-36(fp)
1000e030:	10bfffd8 	cmpnei	r2,r2,-1
1000e034:	1000171e 	bne	r2,zero,1000e094 <__sflush_r+0x11c>
1000e038:	e0bffb17 	ldw	r2,-20(fp)
1000e03c:	10800017 	ldw	r2,0(r2)
1000e040:	10001426 	beq	r2,zero,1000e094 <__sflush_r+0x11c>
		{
		  int result = EOF;
1000e044:	00bfffc4 	movi	r2,-1
1000e048:	e0bff815 	stw	r2,-32(fp)
		  if (ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
1000e04c:	e0bffb17 	ldw	r2,-20(fp)
1000e050:	10800017 	ldw	r2,0(r2)
1000e054:	10800760 	cmpeqi	r2,r2,29
1000e058:	1000041e 	bne	r2,zero,1000e06c <__sflush_r+0xf4>
1000e05c:	e0bffb17 	ldw	r2,-20(fp)
1000e060:	10800017 	ldw	r2,0(r2)
1000e064:	10800598 	cmpnei	r2,r2,22
1000e068:	1000051e 	bne	r2,zero,1000e080 <__sflush_r+0x108>
		    {
		      result = 0;
1000e06c:	e03ff815 	stw	zero,-32(fp)
		      ptr->_errno = tmp_errno;
1000e070:	e0bffb17 	ldw	r2,-20(fp)
1000e074:	e0fffa17 	ldw	r3,-24(fp)
1000e078:	10c00015 	stw	r3,0(r2)
1000e07c:	00000306 	br	1000e08c <__sflush_r+0x114>
		    }
		  else
		    fp->_flags |= __SERR;
1000e080:	8080030b 	ldhu	r2,12(r16)
1000e084:	10801014 	ori	r2,r2,64
1000e088:	8080030d 	sth	r2,12(r16)
		  return result;
1000e08c:	e0bff817 	ldw	r2,-32(fp)
1000e090:	00007106 	br	1000e258 <__sflush_r+0x2e0>
		}
            }
          if (fp->_flags & __SRD)
1000e094:	8080030b 	ldhu	r2,12(r16)
1000e098:	10bfffcc 	andi	r2,r2,65535
1000e09c:	1080010c 	andi	r2,r2,4
1000e0a0:	10000a26 	beq	r2,zero,1000e0cc <__sflush_r+0x154>
            {
              /* Current offset is at end of buffer.  Compensate for
                 characters not yet read.  */
              curoff -= fp->_r;
1000e0a4:	80800117 	ldw	r2,4(r16)
1000e0a8:	e0fff717 	ldw	r3,-36(fp)
1000e0ac:	1885c83a 	sub	r2,r3,r2
1000e0b0:	e0bff715 	stw	r2,-36(fp)
              if (HASUB (fp))
1000e0b4:	80800c17 	ldw	r2,48(r16)
1000e0b8:	10000426 	beq	r2,zero,1000e0cc <__sflush_r+0x154>
                curoff -= fp->_ur;
1000e0bc:	80800f17 	ldw	r2,60(r16)
1000e0c0:	e0fff717 	ldw	r3,-36(fp)
1000e0c4:	1885c83a 	sub	r2,r3,r2
1000e0c8:	e0bff715 	stw	r2,-36(fp)
#ifdef __LARGE64_FILES
	  if (fp->_flags & __SL64)
	    curoff = fp->_seek64 (ptr, fp->_cookie, curoff, SEEK_SET);
	  else
#endif
	    curoff = fp->_seek (ptr, fp->_cookie, curoff, SEEK_SET);
1000e0cc:	80800a17 	ldw	r2,40(r16)
1000e0d0:	80c00717 	ldw	r3,28(r16)
1000e0d4:	000f883a 	mov	r7,zero
1000e0d8:	e1bff717 	ldw	r6,-36(fp)
1000e0dc:	180b883a 	mov	r5,r3
1000e0e0:	e13ffb17 	ldw	r4,-20(fp)
1000e0e4:	103ee83a 	callr	r2
1000e0e8:	e0bff715 	stw	r2,-36(fp)
	  if (curoff != -1 || ptr->_errno == 0
1000e0ec:	e0bff717 	ldw	r2,-36(fp)
1000e0f0:	10bfffd8 	cmpnei	r2,r2,-1
1000e0f4:	10000b1e 	bne	r2,zero,1000e124 <__sflush_r+0x1ac>
1000e0f8:	e0bffb17 	ldw	r2,-20(fp)
1000e0fc:	10800017 	ldw	r2,0(r2)
1000e100:	10000826 	beq	r2,zero,1000e124 <__sflush_r+0x1ac>
	      || ptr->_errno == ESPIPE || ptr->_errno == EINVAL)
1000e104:	e0bffb17 	ldw	r2,-20(fp)
1000e108:	10800017 	ldw	r2,0(r2)
1000e10c:	10800760 	cmpeqi	r2,r2,29
1000e110:	1000041e 	bne	r2,zero,1000e124 <__sflush_r+0x1ac>
1000e114:	e0bffb17 	ldw	r2,-20(fp)
1000e118:	10800017 	ldw	r2,0(r2)
1000e11c:	10800598 	cmpnei	r2,r2,22
1000e120:	1000211e 	bne	r2,zero,1000e1a8 <__sflush_r+0x230>
	    {
	      /* Seek successful or ignorable error condition.
		 We can clear read buffer now.  */
#ifdef _FSEEK_OPTIMIZATION
	      fp->_flags &= ~__SNPT;
1000e124:	80c0030b 	ldhu	r3,12(r16)
1000e128:	00bdffc4 	movi	r2,-2049
1000e12c:	1884703a 	and	r2,r3,r2
1000e130:	8080030d 	sth	r2,12(r16)
#endif
	      fp->_r = 0;
1000e134:	80000115 	stw	zero,4(r16)
	      fp->_p = fp->_bf._base;
1000e138:	80800417 	ldw	r2,16(r16)
1000e13c:	80800015 	stw	r2,0(r16)
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
1000e140:	8080030b 	ldhu	r2,12(r16)
1000e144:	10bfffcc 	andi	r2,r2,65535
1000e148:	1084000c 	andi	r2,r2,4096
1000e14c:	10000826 	beq	r2,zero,1000e170 <__sflush_r+0x1f8>
1000e150:	e0bff717 	ldw	r2,-36(fp)
1000e154:	10bfffd8 	cmpnei	r2,r2,-1
1000e158:	1000031e 	bne	r2,zero,1000e168 <__sflush_r+0x1f0>
1000e15c:	e0bffb17 	ldw	r2,-20(fp)
1000e160:	10800017 	ldw	r2,0(r2)
1000e164:	1000021e 	bne	r2,zero,1000e170 <__sflush_r+0x1f8>
		fp->_offset = curoff;
1000e168:	e0bff717 	ldw	r2,-36(fp)
1000e16c:	80801415 	stw	r2,80(r16)
	      ptr->_errno = tmp_errno;
1000e170:	e0bffb17 	ldw	r2,-20(fp)
1000e174:	e0fffa17 	ldw	r3,-24(fp)
1000e178:	10c00015 	stw	r3,0(r2)
	      if (HASUB (fp))
1000e17c:	80800c17 	ldw	r2,48(r16)
1000e180:	10000e26 	beq	r2,zero,1000e1bc <__sflush_r+0x244>
		FREEUB (ptr, fp);
1000e184:	80c00c17 	ldw	r3,48(r16)
1000e188:	80801004 	addi	r2,r16,64
1000e18c:	18800426 	beq	r3,r2,1000e1a0 <__sflush_r+0x228>
1000e190:	80800c17 	ldw	r2,48(r16)
1000e194:	100b883a 	mov	r5,r2
1000e198:	e13ffb17 	ldw	r4,-20(fp)
1000e19c:	000e9740 	call	1000e974 <_free_r>
1000e1a0:	80000c15 	stw	zero,48(r16)
	      fp->_r = 0;
	      fp->_p = fp->_bf._base;
	      if ((fp->_flags & __SOFF) && (curoff != -1 || ptr->_errno == 0))
		fp->_offset = curoff;
	      ptr->_errno = tmp_errno;
	      if (HASUB (fp))
1000e1a4:	00000506 	br	1000e1bc <__sflush_r+0x244>
		FREEUB (ptr, fp);
	    }
	  else
	    {
	      fp->_flags |= __SERR;
1000e1a8:	8080030b 	ldhu	r2,12(r16)
1000e1ac:	10801014 	ori	r2,r2,64
1000e1b0:	8080030d 	sth	r2,12(r16)
	      return EOF;
1000e1b4:	00bfffc4 	movi	r2,-1
1000e1b8:	00002706 	br	1000e258 <__sflush_r+0x2e0>
	    }
	}
      return 0;
1000e1bc:	0005883a 	mov	r2,zero
1000e1c0:	00002506 	br	1000e258 <__sflush_r+0x2e0>
    }
  if ((p = fp->_bf._base) == NULL)
1000e1c4:	84400417 	ldw	r17,16(r16)
1000e1c8:	8800021e 	bne	r17,zero,1000e1d4 <__sflush_r+0x25c>
    {
      /* Nothing to flush.  */
      return 0;
1000e1cc:	0005883a 	mov	r2,zero
1000e1d0:	00002106 	br	1000e258 <__sflush_r+0x2e0>
    }
  n = fp->_p - p;		/* write this much */
1000e1d4:	80800017 	ldw	r2,0(r16)
1000e1d8:	1007883a 	mov	r3,r2
1000e1dc:	8805883a 	mov	r2,r17
1000e1e0:	18a5c83a 	sub	r18,r3,r2
  /*
   * Set these immediately to avoid problems with longjmp
   * and to allow exchange buffering (via setvbuf) in user
   * write function.
   */
  fp->_p = p;
1000e1e4:	84400015 	stw	r17,0(r16)
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;
1000e1e8:	e0bff90b 	ldhu	r2,-28(fp)
1000e1ec:	10bfffcc 	andi	r2,r2,65535
1000e1f0:	108000cc 	andi	r2,r2,3
1000e1f4:	1000021e 	bne	r2,zero,1000e200 <__sflush_r+0x288>
1000e1f8:	80800517 	ldw	r2,20(r16)
1000e1fc:	00000106 	br	1000e204 <__sflush_r+0x28c>
1000e200:	0005883a 	mov	r2,zero
1000e204:	80800215 	stw	r2,8(r16)

  while (n > 0)
1000e208:	00001106 	br	1000e250 <__sflush_r+0x2d8>
    {
      t = fp->_write (ptr, fp->_cookie, (char *) p, n);
1000e20c:	80800917 	ldw	r2,36(r16)
1000e210:	80c00717 	ldw	r3,28(r16)
1000e214:	900f883a 	mov	r7,r18
1000e218:	880d883a 	mov	r6,r17
1000e21c:	180b883a 	mov	r5,r3
1000e220:	e13ffb17 	ldw	r4,-20(fp)
1000e224:	103ee83a 	callr	r2
1000e228:	1027883a 	mov	r19,r2
      if (t <= 0)
1000e22c:	04c00516 	blt	zero,r19,1000e244 <__sflush_r+0x2cc>
	{
          fp->_flags |= __SERR;
1000e230:	8080030b 	ldhu	r2,12(r16)
1000e234:	10801014 	ori	r2,r2,64
1000e238:	8080030d 	sth	r2,12(r16)
          return EOF;
1000e23c:	00bfffc4 	movi	r2,-1
1000e240:	00000506 	br	1000e258 <__sflush_r+0x2e0>
	}
      p += t;
1000e244:	9805883a 	mov	r2,r19
1000e248:	88a3883a 	add	r17,r17,r2
      n -= t;
1000e24c:	94e5c83a 	sub	r18,r18,r19
   * write function.
   */
  fp->_p = p;
  fp->_w = flags & (__SLBF | __SNBF) ? 0 : fp->_bf._size;

  while (n > 0)
1000e250:	04bfee16 	blt	zero,r18,1000e20c <__alt_data_end+0xf800e20c>
          return EOF;
	}
      p += t;
      n -= t;
    }
  return 0;
1000e254:	0005883a 	mov	r2,zero
}
1000e258:	e6fffc04 	addi	sp,fp,-16
1000e25c:	dfc00517 	ldw	ra,20(sp)
1000e260:	df000417 	ldw	fp,16(sp)
1000e264:	dcc00317 	ldw	r19,12(sp)
1000e268:	dc800217 	ldw	r18,8(sp)
1000e26c:	dc400117 	ldw	r17,4(sp)
1000e270:	dc000017 	ldw	r16,0(sp)
1000e274:	dec00604 	addi	sp,sp,24
1000e278:	f800283a 	ret

1000e27c <_fflush_r>:

int
_DEFUN(_fflush_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE * fp)
{
1000e27c:	defffa04 	addi	sp,sp,-24
1000e280:	dfc00515 	stw	ra,20(sp)
1000e284:	df000415 	stw	fp,16(sp)
1000e288:	dc000315 	stw	r16,12(sp)
1000e28c:	df000404 	addi	fp,sp,16
1000e290:	e13ffe15 	stw	r4,-8(fp)
1000e294:	2821883a 	mov	r16,r5
     2 is implemented here due to its simplicity.  */
  if (fp->_bf._base == NULL)
    return 0;
#endif /* _REENT_SMALL  */

  CHECK_INIT (ptr, fp);
1000e298:	e0bffe17 	ldw	r2,-8(fp)
1000e29c:	e0bffc15 	stw	r2,-16(fp)
1000e2a0:	e0bffc17 	ldw	r2,-16(fp)
1000e2a4:	10000526 	beq	r2,zero,1000e2bc <_fflush_r+0x40>
1000e2a8:	e0bffc17 	ldw	r2,-16(fp)
1000e2ac:	10800e17 	ldw	r2,56(r2)
1000e2b0:	1000021e 	bne	r2,zero,1000e2bc <_fflush_r+0x40>
1000e2b4:	e13ffc17 	ldw	r4,-16(fp)
1000e2b8:	000e7440 	call	1000e744 <__sinit>

  if (!fp->_flags)
1000e2bc:	8080030b 	ldhu	r2,12(r16)
1000e2c0:	10bfffcc 	andi	r2,r2,65535
1000e2c4:	10a0001c 	xori	r2,r2,32768
1000e2c8:	10a00004 	addi	r2,r2,-32768
1000e2cc:	1000021e 	bne	r2,zero,1000e2d8 <_fflush_r+0x5c>
    return 0;
1000e2d0:	0005883a 	mov	r2,zero
1000e2d4:	00000506 	br	1000e2ec <_fflush_r+0x70>

  _newlib_flockfile_start (fp);
  ret = __sflush_r (ptr, fp);
1000e2d8:	800b883a 	mov	r5,r16
1000e2dc:	e13ffe17 	ldw	r4,-8(fp)
1000e2e0:	000df780 	call	1000df78 <__sflush_r>
1000e2e4:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return ret;
1000e2e8:	e0bffd17 	ldw	r2,-12(fp)
}
1000e2ec:	e6ffff04 	addi	sp,fp,-4
1000e2f0:	dfc00217 	ldw	ra,8(sp)
1000e2f4:	df000117 	ldw	fp,4(sp)
1000e2f8:	dc000017 	ldw	r16,0(sp)
1000e2fc:	dec00304 	addi	sp,sp,12
1000e300:	f800283a 	ret

1000e304 <fflush>:
#ifndef _REENT_ONLY

int
_DEFUN(fflush, (fp),
       register FILE * fp)
{
1000e304:	defffe04 	addi	sp,sp,-8
1000e308:	dfc00115 	stw	ra,4(sp)
1000e30c:	df000015 	stw	fp,0(sp)
1000e310:	d839883a 	mov	fp,sp
1000e314:	2007883a 	mov	r3,r4
  if (fp == NULL)
1000e318:	1800081e 	bne	r3,zero,1000e33c <fflush+0x38>
    return _fwalk_reent (_GLOBAL_REENT, _fflush_r);
1000e31c:	008403b4 	movhi	r2,4110
1000e320:	10a4cd04 	addi	r2,r2,-27852
1000e324:	10800017 	ldw	r2,0(r2)
1000e328:	01440074 	movhi	r5,4097
1000e32c:	29789f04 	addi	r5,r5,-7556
1000e330:	1009883a 	mov	r4,r2
1000e334:	000f77c0 	call	1000f77c <_fwalk_reent>
1000e338:	00000606 	br	1000e354 <fflush+0x50>

  return _fflush_r (_REENT, fp);
1000e33c:	008403b4 	movhi	r2,4110
1000e340:	10a4cc04 	addi	r2,r2,-27856
1000e344:	10800017 	ldw	r2,0(r2)
1000e348:	180b883a 	mov	r5,r3
1000e34c:	1009883a 	mov	r4,r2
1000e350:	000e27c0 	call	1000e27c <_fflush_r>
}
1000e354:	e037883a 	mov	sp,fp
1000e358:	dfc00117 	ldw	ra,4(sp)
1000e35c:	df000017 	ldw	fp,0(sp)
1000e360:	dec00204 	addi	sp,sp,8
1000e364:	f800283a 	ret

1000e368 <std>:
_DEFUN(std, (ptr, flags, file, data),
            FILE *ptr _AND
            int flags _AND
            int file  _AND
            struct _reent *data)
{
1000e368:	defffa04 	addi	sp,sp,-24
1000e36c:	dfc00515 	stw	ra,20(sp)
1000e370:	df000415 	stw	fp,16(sp)
1000e374:	df000404 	addi	fp,sp,16
1000e378:	e13ffc15 	stw	r4,-16(fp)
1000e37c:	e17ffd15 	stw	r5,-12(fp)
1000e380:	e1bffe15 	stw	r6,-8(fp)
1000e384:	e1ffff15 	stw	r7,-4(fp)
  ptr->_p = 0;
1000e388:	e0bffc17 	ldw	r2,-16(fp)
1000e38c:	10000015 	stw	zero,0(r2)
  ptr->_r = 0;
1000e390:	e0bffc17 	ldw	r2,-16(fp)
1000e394:	10000115 	stw	zero,4(r2)
  ptr->_w = 0;
1000e398:	e0bffc17 	ldw	r2,-16(fp)
1000e39c:	10000215 	stw	zero,8(r2)
  ptr->_flags = flags;
1000e3a0:	e0bffd17 	ldw	r2,-12(fp)
1000e3a4:	1007883a 	mov	r3,r2
1000e3a8:	e0bffc17 	ldw	r2,-16(fp)
1000e3ac:	10c0030d 	sth	r3,12(r2)
  ptr->_flags2 = 0;
1000e3b0:	e0bffc17 	ldw	r2,-16(fp)
1000e3b4:	10001915 	stw	zero,100(r2)
  ptr->_file = file;
1000e3b8:	e0bffe17 	ldw	r2,-8(fp)
1000e3bc:	1007883a 	mov	r3,r2
1000e3c0:	e0bffc17 	ldw	r2,-16(fp)
1000e3c4:	10c0038d 	sth	r3,14(r2)
  ptr->_bf._base = 0;
1000e3c8:	e0bffc17 	ldw	r2,-16(fp)
1000e3cc:	10000415 	stw	zero,16(r2)
  ptr->_bf._size = 0;
1000e3d0:	e0bffc17 	ldw	r2,-16(fp)
1000e3d4:	10000515 	stw	zero,20(r2)
  ptr->_lbfsize = 0;
1000e3d8:	e0bffc17 	ldw	r2,-16(fp)
1000e3dc:	10000615 	stw	zero,24(r2)
  memset (&ptr->_mbstate, 0, sizeof (_mbstate_t));
1000e3e0:	e0bffc17 	ldw	r2,-16(fp)
1000e3e4:	10801704 	addi	r2,r2,92
1000e3e8:	01800204 	movi	r6,8
1000e3ec:	000b883a 	mov	r5,zero
1000e3f0:	1009883a 	mov	r4,r2
1000e3f4:	0007b540 	call	10007b54 <memset>
  ptr->_cookie = ptr;
1000e3f8:	e0bffc17 	ldw	r2,-16(fp)
1000e3fc:	e0fffc17 	ldw	r3,-16(fp)
1000e400:	10c00715 	stw	r3,28(r2)
  ptr->_read = __sread;
1000e404:	e0fffc17 	ldw	r3,-16(fp)
1000e408:	00840074 	movhi	r2,4097
1000e40c:	1088e104 	addi	r2,r2,9092
1000e410:	18800815 	stw	r2,32(r3)
#ifndef __LARGE64_FILES
  ptr->_write = __swrite;
1000e414:	e0fffc17 	ldw	r3,-16(fp)
1000e418:	00840074 	movhi	r2,4097
1000e41c:	10891404 	addi	r2,r2,9296
1000e420:	18800915 	stw	r2,36(r3)
#else /* __LARGE64_FILES */
  ptr->_write = __swrite64;
  ptr->_seek64 = __sseek64;
  ptr->_flags |= __SL64;
#endif /* __LARGE64_FILES */
  ptr->_seek = __sseek;
1000e424:	e0fffc17 	ldw	r3,-16(fp)
1000e428:	00840074 	movhi	r2,4097
1000e42c:	10894104 	addi	r2,r2,9476
1000e430:	18800a15 	stw	r2,40(r3)
#ifdef _STDIO_CLOSE_PER_REENT_STD_STREAMS
  ptr->_close = __sclose;
1000e434:	e0fffc17 	ldw	r3,-16(fp)
1000e438:	00840074 	movhi	r2,4097
1000e43c:	10896904 	addi	r2,r2,9636
1000e440:	18800b15 	stw	r2,44(r3)

#ifdef __SCLE
  if (__stextmode (ptr->_file))
    ptr->_flags |= __SCLE;
#endif
}
1000e444:	0001883a 	nop
1000e448:	e037883a 	mov	sp,fp
1000e44c:	dfc00117 	ldw	ra,4(sp)
1000e450:	df000017 	ldw	fp,0(sp)
1000e454:	dec00204 	addi	sp,sp,8
1000e458:	f800283a 	ret

1000e45c <__sfmoreglue>:

struct _glue *
_DEFUN(__sfmoreglue, (d, n),
       struct _reent *d _AND
       register int n)
{
1000e45c:	defffa04 	addi	sp,sp,-24
1000e460:	dfc00515 	stw	ra,20(sp)
1000e464:	df000415 	stw	fp,16(sp)
1000e468:	dc400315 	stw	r17,12(sp)
1000e46c:	dc000215 	stw	r16,8(sp)
1000e470:	df000404 	addi	fp,sp,16
1000e474:	e13ffd15 	stw	r4,-12(fp)
1000e478:	2821883a 	mov	r16,r5
  struct glue_with_file *g;

  g = (struct glue_with_file *)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
1000e47c:	80bfffc4 	addi	r2,r16,-1
1000e480:	01401a04 	movi	r5,104
1000e484:	1009883a 	mov	r4,r2
1000e488:	00065d80 	call	100065d8 <__mulsi3>
1000e48c:	10801d04 	addi	r2,r2,116
       struct _reent *d _AND
       register int n)
{
  struct glue_with_file *g;

  g = (struct glue_with_file *)
1000e490:	100b883a 	mov	r5,r2
1000e494:	e13ffd17 	ldw	r4,-12(fp)
1000e498:	0006fd80 	call	10006fd8 <_malloc_r>
1000e49c:	e0bffc15 	stw	r2,-16(fp)
    _malloc_r (d, sizeof (*g) + (n - 1) * sizeof (FILE));
  if (g == NULL)
1000e4a0:	e0bffc17 	ldw	r2,-16(fp)
1000e4a4:	1000021e 	bne	r2,zero,1000e4b0 <__sfmoreglue+0x54>
    return NULL;
1000e4a8:	0005883a 	mov	r2,zero
1000e4ac:	00001306 	br	1000e4fc <__sfmoreglue+0xa0>
  g->glue._next = NULL;
1000e4b0:	e0bffc17 	ldw	r2,-16(fp)
1000e4b4:	10000015 	stw	zero,0(r2)
  g->glue._niobs = n;
1000e4b8:	e0bffc17 	ldw	r2,-16(fp)
1000e4bc:	14000115 	stw	r16,4(r2)
  g->glue._iobs = &g->file;
1000e4c0:	e0bffc17 	ldw	r2,-16(fp)
1000e4c4:	10c00304 	addi	r3,r2,12
1000e4c8:	e0bffc17 	ldw	r2,-16(fp)
1000e4cc:	10c00215 	stw	r3,8(r2)
  memset (&g->file, 0, n * sizeof (FILE));
1000e4d0:	e0bffc17 	ldw	r2,-16(fp)
1000e4d4:	14400304 	addi	r17,r2,12
1000e4d8:	8005883a 	mov	r2,r16
1000e4dc:	01401a04 	movi	r5,104
1000e4e0:	1009883a 	mov	r4,r2
1000e4e4:	00065d80 	call	100065d8 <__mulsi3>
1000e4e8:	100d883a 	mov	r6,r2
1000e4ec:	000b883a 	mov	r5,zero
1000e4f0:	8809883a 	mov	r4,r17
1000e4f4:	0007b540 	call	10007b54 <memset>
  return &g->glue;
1000e4f8:	e0bffc17 	ldw	r2,-16(fp)
}
1000e4fc:	e6fffe04 	addi	sp,fp,-8
1000e500:	dfc00317 	ldw	ra,12(sp)
1000e504:	df000217 	ldw	fp,8(sp)
1000e508:	dc400117 	ldw	r17,4(sp)
1000e50c:	dc000017 	ldw	r16,0(sp)
1000e510:	dec00404 	addi	sp,sp,16
1000e514:	f800283a 	ret

1000e518 <__sfp>:
 */

FILE *
_DEFUN(__sfp, (d),
       struct _reent *d)
{
1000e518:	defffa04 	addi	sp,sp,-24
1000e51c:	dfc00515 	stw	ra,20(sp)
1000e520:	df000415 	stw	fp,16(sp)
1000e524:	df000404 	addi	fp,sp,16
1000e528:	e13fff15 	stw	r4,-4(fp)
  FILE *fp;
  int n;
  struct _glue *g;

  _newlib_sfp_lock_start ();
1000e52c:	000e81c0 	call	1000e81c <__sfp_lock_acquire>

  if (!_GLOBAL_REENT->__sdidinit)
1000e530:	008403b4 	movhi	r2,4110
1000e534:	10a4cd04 	addi	r2,r2,-27852
1000e538:	10800017 	ldw	r2,0(r2)
1000e53c:	10800e17 	ldw	r2,56(r2)
1000e540:	1000051e 	bne	r2,zero,1000e558 <__sfp+0x40>
    __sinit (_GLOBAL_REENT);
1000e544:	008403b4 	movhi	r2,4110
1000e548:	10a4cd04 	addi	r2,r2,-27852
1000e54c:	10800017 	ldw	r2,0(r2)
1000e550:	1009883a 	mov	r4,r2
1000e554:	000e7440 	call	1000e744 <__sinit>
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
1000e558:	008403b4 	movhi	r2,4110
1000e55c:	10a4cd04 	addi	r2,r2,-27852
1000e560:	10800017 	ldw	r2,0(r2)
1000e564:	1080b804 	addi	r2,r2,736
1000e568:	e0bffe15 	stw	r2,-8(fp)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000e56c:	e0bffe17 	ldw	r2,-8(fp)
1000e570:	10800217 	ldw	r2,8(r2)
1000e574:	e0bffc15 	stw	r2,-16(fp)
1000e578:	e0bffe17 	ldw	r2,-8(fp)
1000e57c:	10800117 	ldw	r2,4(r2)
1000e580:	e0bffd15 	stw	r2,-12(fp)
1000e584:	00000906 	br	1000e5ac <__sfp+0x94>
	if (fp->_flags == 0)
1000e588:	e0bffc17 	ldw	r2,-16(fp)
1000e58c:	1080030b 	ldhu	r2,12(r2)
1000e590:	10bfffcc 	andi	r2,r2,65535
1000e594:	10a0001c 	xori	r2,r2,32768
1000e598:	10a00004 	addi	r2,r2,-32768
1000e59c:	10001f26 	beq	r2,zero,1000e61c <__sfp+0x104>

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000e5a0:	e0bffc17 	ldw	r2,-16(fp)
1000e5a4:	10801a04 	addi	r2,r2,104
1000e5a8:	e0bffc15 	stw	r2,-16(fp)
1000e5ac:	e0bffd17 	ldw	r2,-12(fp)
1000e5b0:	10bfffc4 	addi	r2,r2,-1
1000e5b4:	e0bffd15 	stw	r2,-12(fp)
1000e5b8:	e0bffd17 	ldw	r2,-12(fp)
1000e5bc:	103ff20e 	bge	r2,zero,1000e588 <__alt_data_end+0xf800e588>
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
1000e5c0:	e0bffe17 	ldw	r2,-8(fp)
1000e5c4:	10800017 	ldw	r2,0(r2)
1000e5c8:	1000091e 	bne	r2,zero,1000e5f0 <__sfp+0xd8>
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
1000e5cc:	01400104 	movi	r5,4
1000e5d0:	e13fff17 	ldw	r4,-4(fp)
1000e5d4:	000e45c0 	call	1000e45c <__sfmoreglue>
1000e5d8:	1007883a 	mov	r3,r2
1000e5dc:	e0bffe17 	ldw	r2,-8(fp)
1000e5e0:	10c00015 	stw	r3,0(r2)
1000e5e4:	e0bffe17 	ldw	r2,-8(fp)
1000e5e8:	10800017 	ldw	r2,0(r2)
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
1000e5ec:	10000426 	beq	r2,zero,1000e600 <__sfp+0xe8>

  _newlib_sfp_lock_start ();

  if (!_GLOBAL_REENT->__sdidinit)
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
1000e5f0:	e0bffe17 	ldw	r2,-8(fp)
1000e5f4:	10800017 	ldw	r2,0(r2)
1000e5f8:	e0bffe15 	stw	r2,-8(fp)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
    }
1000e5fc:	003fdb06 	br	1000e56c <__alt_data_end+0xf800e56c>
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
      if (g->_next == NULL &&
	  (g->_next = __sfmoreglue (d, NDYNAMIC)) == NULL)
	break;
1000e600:	0001883a 	nop
    }
  _newlib_sfp_lock_exit ();
1000e604:	000e83c0 	call	1000e83c <__sfp_lock_release>
  d->_errno = ENOMEM;
1000e608:	e0bfff17 	ldw	r2,-4(fp)
1000e60c:	00c00304 	movi	r3,12
1000e610:	10c00015 	stw	r3,0(r2)
  return NULL;
1000e614:	0005883a 	mov	r2,zero
1000e618:	00002506 	br	1000e6b0 <__sfp+0x198>
    __sinit (_GLOBAL_REENT);
  for (g = &_GLOBAL_REENT->__sglue;; g = g->_next)
    {
      for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
	if (fp->_flags == 0)
	  goto found;
1000e61c:	0001883a 	nop
  _newlib_sfp_lock_exit ();
  d->_errno = ENOMEM;
  return NULL;

found:
  fp->_file = -1;		/* no file */
1000e620:	e0bffc17 	ldw	r2,-16(fp)
1000e624:	00ffffc4 	movi	r3,-1
1000e628:	10c0038d 	sth	r3,14(r2)
  fp->_flags = 1;		/* reserve this slot; caller sets real flags */
1000e62c:	e0bffc17 	ldw	r2,-16(fp)
1000e630:	00c00044 	movi	r3,1
1000e634:	10c0030d 	sth	r3,12(r2)
  fp->_flags2 = 0;
1000e638:	e0bffc17 	ldw	r2,-16(fp)
1000e63c:	10001915 	stw	zero,100(r2)
#ifndef __SINGLE_THREAD__
  __lock_init_recursive (fp->_lock);
#endif
  _newlib_sfp_lock_end ();
1000e640:	000e83c0 	call	1000e83c <__sfp_lock_release>

  fp->_p = NULL;		/* no current pointer */
1000e644:	e0bffc17 	ldw	r2,-16(fp)
1000e648:	10000015 	stw	zero,0(r2)
  fp->_w = 0;			/* nothing to read or write */
1000e64c:	e0bffc17 	ldw	r2,-16(fp)
1000e650:	10000215 	stw	zero,8(r2)
  fp->_r = 0;
1000e654:	e0bffc17 	ldw	r2,-16(fp)
1000e658:	10000115 	stw	zero,4(r2)
  fp->_bf._base = NULL;		/* no buffer */
1000e65c:	e0bffc17 	ldw	r2,-16(fp)
1000e660:	10000415 	stw	zero,16(r2)
  fp->_bf._size = 0;
1000e664:	e0bffc17 	ldw	r2,-16(fp)
1000e668:	10000515 	stw	zero,20(r2)
  fp->_lbfsize = 0;		/* not line buffered */
1000e66c:	e0bffc17 	ldw	r2,-16(fp)
1000e670:	10000615 	stw	zero,24(r2)
  memset (&fp->_mbstate, 0, sizeof (_mbstate_t));
1000e674:	e0bffc17 	ldw	r2,-16(fp)
1000e678:	10801704 	addi	r2,r2,92
1000e67c:	01800204 	movi	r6,8
1000e680:	000b883a 	mov	r5,zero
1000e684:	1009883a 	mov	r4,r2
1000e688:	0007b540 	call	10007b54 <memset>
  /* fp->_cookie = <any>; */	/* caller sets cookie, _read/_write etc */
  fp->_ub._base = NULL;		/* no ungetc buffer */
1000e68c:	e0bffc17 	ldw	r2,-16(fp)
1000e690:	10000c15 	stw	zero,48(r2)
  fp->_ub._size = 0;
1000e694:	e0bffc17 	ldw	r2,-16(fp)
1000e698:	10000d15 	stw	zero,52(r2)
  fp->_lb._base = NULL;		/* no line buffer */
1000e69c:	e0bffc17 	ldw	r2,-16(fp)
1000e6a0:	10001115 	stw	zero,68(r2)
  fp->_lb._size = 0;
1000e6a4:	e0bffc17 	ldw	r2,-16(fp)
1000e6a8:	10001215 	stw	zero,72(r2)

  return fp;
1000e6ac:	e0bffc17 	ldw	r2,-16(fp)
}
1000e6b0:	e037883a 	mov	sp,fp
1000e6b4:	dfc00117 	ldw	ra,4(sp)
1000e6b8:	df000017 	ldw	fp,0(sp)
1000e6bc:	dec00204 	addi	sp,sp,8
1000e6c0:	f800283a 	ret

1000e6c4 <_cleanup_r>:
 */

_VOID
_DEFUN(_cleanup_r, (ptr),
       struct _reent *ptr)
{
1000e6c4:	defffc04 	addi	sp,sp,-16
1000e6c8:	dfc00315 	stw	ra,12(sp)
1000e6cc:	df000215 	stw	fp,8(sp)
1000e6d0:	df000204 	addi	fp,sp,8
1000e6d4:	e13fff15 	stw	r4,-4(fp)
  /* Otherwise close files and flush read streams, too.
     Note we call flush directly if "--enable-lite-exit" is in effect.  */
#ifdef _LITE_EXIT
  cleanup_func = _fflush_r;
#else
  cleanup_func = _fclose_r;
1000e6d8:	00840074 	movhi	r2,4097
1000e6dc:	108fd204 	addi	r2,r2,16200
1000e6e0:	e0bffe15 	stw	r2,-8(fp)
#endif
#endif
  _CAST_VOID _fwalk_reent (ptr, cleanup_func);
1000e6e4:	e17ffe17 	ldw	r5,-8(fp)
1000e6e8:	e13fff17 	ldw	r4,-4(fp)
1000e6ec:	000f77c0 	call	1000f77c <_fwalk_reent>
}
1000e6f0:	0001883a 	nop
1000e6f4:	e037883a 	mov	sp,fp
1000e6f8:	dfc00117 	ldw	ra,4(sp)
1000e6fc:	df000017 	ldw	fp,0(sp)
1000e700:	dec00204 	addi	sp,sp,8
1000e704:	f800283a 	ret

1000e708 <_cleanup>:

#ifndef _REENT_ONLY
_VOID
_DEFUN_VOID(_cleanup)
{
1000e708:	defffe04 	addi	sp,sp,-8
1000e70c:	dfc00115 	stw	ra,4(sp)
1000e710:	df000015 	stw	fp,0(sp)
1000e714:	d839883a 	mov	fp,sp
  _cleanup_r (_GLOBAL_REENT);
1000e718:	008403b4 	movhi	r2,4110
1000e71c:	10a4cd04 	addi	r2,r2,-27852
1000e720:	10800017 	ldw	r2,0(r2)
1000e724:	1009883a 	mov	r4,r2
1000e728:	000e6c40 	call	1000e6c4 <_cleanup_r>
}
1000e72c:	0001883a 	nop
1000e730:	e037883a 	mov	sp,fp
1000e734:	dfc00117 	ldw	ra,4(sp)
1000e738:	df000017 	ldw	fp,0(sp)
1000e73c:	dec00204 	addi	sp,sp,8
1000e740:	f800283a 	ret

1000e744 <__sinit>:
 */

_VOID
_DEFUN(__sinit, (s),
       struct _reent *s)
{
1000e744:	defffd04 	addi	sp,sp,-12
1000e748:	dfc00215 	stw	ra,8(sp)
1000e74c:	df000115 	stw	fp,4(sp)
1000e750:	df000104 	addi	fp,sp,4
1000e754:	e13fff15 	stw	r4,-4(fp)
  __sinit_lock_acquire ();
1000e758:	000e85c0 	call	1000e85c <__sinit_lock_acquire>

  if (s->__sdidinit)
1000e75c:	e0bfff17 	ldw	r2,-4(fp)
1000e760:	10800e17 	ldw	r2,56(r2)
1000e764:	10000226 	beq	r2,zero,1000e770 <__sinit+0x2c>
    {
      __sinit_lock_release ();
1000e768:	000e87c0 	call	1000e87c <__sinit_lock_release>
      return;
1000e76c:	00002606 	br	1000e808 <__sinit+0xc4>
    }

  /* make sure we clean up on exit */
  s->__cleanup = _cleanup_r;	/* conservative */
1000e770:	e0ffff17 	ldw	r3,-4(fp)
1000e774:	00840074 	movhi	r2,4097
1000e778:	10b9b104 	addi	r2,r2,-6460
1000e77c:	18800f15 	stw	r2,60(r3)

  s->__sglue._next = NULL;
1000e780:	e0bfff17 	ldw	r2,-4(fp)
1000e784:	1000b815 	stw	zero,736(r2)
#ifndef _REENT_SMALL
  s->__sglue._niobs = 3;
1000e788:	e0bfff17 	ldw	r2,-4(fp)
1000e78c:	00c000c4 	movi	r3,3
1000e790:	10c0b915 	stw	r3,740(r2)
  s->__sglue._iobs = &s->__sf[0];
1000e794:	e0bfff17 	ldw	r2,-4(fp)
1000e798:	10c0bb04 	addi	r3,r2,748
1000e79c:	e0bfff17 	ldw	r2,-4(fp)
1000e7a0:	10c0ba15 	stw	r3,744(r2)
  s->_stdin = __sfp(s);
  s->_stdout = __sfp(s);
  s->_stderr = __sfp(s);
#endif

  std (s->_stdin,  __SRD, 0, s);
1000e7a4:	e0bfff17 	ldw	r2,-4(fp)
1000e7a8:	10800117 	ldw	r2,4(r2)
1000e7ac:	e1ffff17 	ldw	r7,-4(fp)
1000e7b0:	000d883a 	mov	r6,zero
1000e7b4:	01400104 	movi	r5,4
1000e7b8:	1009883a 	mov	r4,r2
1000e7bc:	000e3680 	call	1000e368 <std>
#ifdef HAVE_FCNTL
/*std (s->_stdout, __SWR, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
#else
/*std (s->_stdout, __SWR | __SLBF, 1, s); */
  std (s->_stdout, __SWR | __SNBF, 1, s);	/* AlteraSpecific: Change to have no buffering on stdout. */
1000e7c0:	e0bfff17 	ldw	r2,-4(fp)
1000e7c4:	10800217 	ldw	r2,8(r2)
1000e7c8:	e1ffff17 	ldw	r7,-4(fp)
1000e7cc:	01800044 	movi	r6,1
1000e7d0:	01400284 	movi	r5,10
1000e7d4:	1009883a 	mov	r4,r2
1000e7d8:	000e3680 	call	1000e368 <std>
#endif

  /* POSIX requires stderr to be opened for reading and writing, even
     when the underlying fd 2 is write-only.  */
  std (s->_stderr, __SRW | __SNBF, 2, s);
1000e7dc:	e0bfff17 	ldw	r2,-4(fp)
1000e7e0:	10800317 	ldw	r2,12(r2)
1000e7e4:	e1ffff17 	ldw	r7,-4(fp)
1000e7e8:	01800084 	movi	r6,2
1000e7ec:	01400484 	movi	r5,18
1000e7f0:	1009883a 	mov	r4,r2
1000e7f4:	000e3680 	call	1000e368 <std>

  s->__sdidinit = 1;
1000e7f8:	e0bfff17 	ldw	r2,-4(fp)
1000e7fc:	00c00044 	movi	r3,1
1000e800:	10c00e15 	stw	r3,56(r2)

  __sinit_lock_release ();
1000e804:	000e87c0 	call	1000e87c <__sinit_lock_release>
}
1000e808:	e037883a 	mov	sp,fp
1000e80c:	dfc00117 	ldw	ra,4(sp)
1000e810:	df000017 	ldw	fp,0(sp)
1000e814:	dec00204 	addi	sp,sp,8
1000e818:	f800283a 	ret

1000e81c <__sfp_lock_acquire>:
__LOCK_INIT_RECURSIVE(static, __sfp_lock);
__LOCK_INIT_RECURSIVE(static, __sinit_lock);

_VOID
_DEFUN_VOID(__sfp_lock_acquire)
{
1000e81c:	deffff04 	addi	sp,sp,-4
1000e820:	df000015 	stw	fp,0(sp)
1000e824:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sfp_lock);
}
1000e828:	0001883a 	nop
1000e82c:	e037883a 	mov	sp,fp
1000e830:	df000017 	ldw	fp,0(sp)
1000e834:	dec00104 	addi	sp,sp,4
1000e838:	f800283a 	ret

1000e83c <__sfp_lock_release>:

_VOID
_DEFUN_VOID(__sfp_lock_release)
{
1000e83c:	deffff04 	addi	sp,sp,-4
1000e840:	df000015 	stw	fp,0(sp)
1000e844:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sfp_lock);
}
1000e848:	0001883a 	nop
1000e84c:	e037883a 	mov	sp,fp
1000e850:	df000017 	ldw	fp,0(sp)
1000e854:	dec00104 	addi	sp,sp,4
1000e858:	f800283a 	ret

1000e85c <__sinit_lock_acquire>:

_VOID
_DEFUN_VOID(__sinit_lock_acquire)
{
1000e85c:	deffff04 	addi	sp,sp,-4
1000e860:	df000015 	stw	fp,0(sp)
1000e864:	d839883a 	mov	fp,sp
  __lock_acquire_recursive (__sinit_lock);
}
1000e868:	0001883a 	nop
1000e86c:	e037883a 	mov	sp,fp
1000e870:	df000017 	ldw	fp,0(sp)
1000e874:	dec00104 	addi	sp,sp,4
1000e878:	f800283a 	ret

1000e87c <__sinit_lock_release>:

_VOID
_DEFUN_VOID(__sinit_lock_release)
{
1000e87c:	deffff04 	addi	sp,sp,-4
1000e880:	df000015 	stw	fp,0(sp)
1000e884:	d839883a 	mov	fp,sp
  __lock_release_recursive (__sinit_lock);
}
1000e888:	0001883a 	nop
1000e88c:	e037883a 	mov	sp,fp
1000e890:	df000017 	ldw	fp,0(sp)
1000e894:	dec00104 	addi	sp,sp,4
1000e898:	f800283a 	ret

1000e89c <__fp_lock>:

/* Walkable file locking routine.  */
static int
_DEFUN(__fp_lock, (ptr),
       FILE * ptr)
{
1000e89c:	defffe04 	addi	sp,sp,-8
1000e8a0:	df000115 	stw	fp,4(sp)
1000e8a4:	df000104 	addi	fp,sp,4
1000e8a8:	e13fff15 	stw	r4,-4(fp)
  _flockfile (ptr);

  return 0;
1000e8ac:	0005883a 	mov	r2,zero
}
1000e8b0:	e037883a 	mov	sp,fp
1000e8b4:	df000017 	ldw	fp,0(sp)
1000e8b8:	dec00104 	addi	sp,sp,4
1000e8bc:	f800283a 	ret

1000e8c0 <__fp_unlock>:

/* Walkable file unlocking routine.  */
static int
_DEFUN(__fp_unlock, (ptr),
       FILE * ptr)
{
1000e8c0:	defffe04 	addi	sp,sp,-8
1000e8c4:	df000115 	stw	fp,4(sp)
1000e8c8:	df000104 	addi	fp,sp,4
1000e8cc:	e13fff15 	stw	r4,-4(fp)
  _funlockfile (ptr);

  return 0;
1000e8d0:	0005883a 	mov	r2,zero
}
1000e8d4:	e037883a 	mov	sp,fp
1000e8d8:	df000017 	ldw	fp,0(sp)
1000e8dc:	dec00104 	addi	sp,sp,4
1000e8e0:	f800283a 	ret

1000e8e4 <__fp_lock_all>:

_VOID
_DEFUN_VOID(__fp_lock_all)
{
1000e8e4:	defffe04 	addi	sp,sp,-8
1000e8e8:	dfc00115 	stw	ra,4(sp)
1000e8ec:	df000015 	stw	fp,0(sp)
1000e8f0:	d839883a 	mov	fp,sp
  __sfp_lock_acquire ();
1000e8f4:	000e81c0 	call	1000e81c <__sfp_lock_acquire>

  _CAST_VOID _fwalk (_REENT, __fp_lock);
1000e8f8:	008403b4 	movhi	r2,4110
1000e8fc:	10a4cc04 	addi	r2,r2,-27856
1000e900:	10800017 	ldw	r2,0(r2)
1000e904:	01440074 	movhi	r5,4097
1000e908:	297a2704 	addi	r5,r5,-5988
1000e90c:	1009883a 	mov	r4,r2
1000e910:	000f6a40 	call	1000f6a4 <_fwalk>
}
1000e914:	0001883a 	nop
1000e918:	e037883a 	mov	sp,fp
1000e91c:	dfc00117 	ldw	ra,4(sp)
1000e920:	df000017 	ldw	fp,0(sp)
1000e924:	dec00204 	addi	sp,sp,8
1000e928:	f800283a 	ret

1000e92c <__fp_unlock_all>:

_VOID
_DEFUN_VOID(__fp_unlock_all)
{
1000e92c:	defffe04 	addi	sp,sp,-8
1000e930:	dfc00115 	stw	ra,4(sp)
1000e934:	df000015 	stw	fp,0(sp)
1000e938:	d839883a 	mov	fp,sp
  _CAST_VOID _fwalk (_REENT, __fp_unlock);
1000e93c:	008403b4 	movhi	r2,4110
1000e940:	10a4cc04 	addi	r2,r2,-27856
1000e944:	10800017 	ldw	r2,0(r2)
1000e948:	01440074 	movhi	r5,4097
1000e94c:	297a3004 	addi	r5,r5,-5952
1000e950:	1009883a 	mov	r4,r2
1000e954:	000f6a40 	call	1000f6a4 <_fwalk>

  __sfp_lock_release ();
1000e958:	000e83c0 	call	1000e83c <__sfp_lock_release>
}
1000e95c:	0001883a 	nop
1000e960:	e037883a 	mov	sp,fp
1000e964:	dfc00117 	ldw	ra,4(sp)
1000e968:	df000017 	ldw	fp,0(sp)
1000e96c:	dec00204 	addi	sp,sp,8
1000e970:	f800283a 	ret

1000e974 <_free_r>:
#if __STD_C
void fREe(RARG Void_t* mem)
#else
void fREe(RARG mem) RDECL Void_t* mem;
#endif
{
1000e974:	defff204 	addi	sp,sp,-56
1000e978:	dfc00d15 	stw	ra,52(sp)
1000e97c:	df000c15 	stw	fp,48(sp)
1000e980:	df000c04 	addi	fp,sp,48
1000e984:	e13ffe15 	stw	r4,-8(fp)
1000e988:	e17fff15 	stw	r5,-4(fp)
  INTERNAL_SIZE_T prevsz; /* size of previous contiguous chunk */
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
1000e98c:	e0bfff17 	ldw	r2,-4(fp)
1000e990:	10014e26 	beq	r2,zero,1000eecc <_free_r+0x558>
    return;

  MALLOC_LOCK;
1000e994:	e13ffe17 	ldw	r4,-8(fp)
1000e998:	0015f700 	call	10015f70 <__malloc_lock>

  p = mem2chunk(mem);
1000e99c:	e0bfff17 	ldw	r2,-4(fp)
1000e9a0:	10bffe04 	addi	r2,r2,-8
1000e9a4:	e0bff415 	stw	r2,-48(fp)
  hd = p->size;
1000e9a8:	e0bff417 	ldw	r2,-48(fp)
1000e9ac:	10800117 	ldw	r2,4(r2)
1000e9b0:	e0bff915 	stw	r2,-28(fp)
  }
#endif
  
  check_inuse_chunk(p);
  
  sz = hd & ~PREV_INUSE;
1000e9b4:	e0fff917 	ldw	r3,-28(fp)
1000e9b8:	00bfff84 	movi	r2,-2
1000e9bc:	1884703a 	and	r2,r3,r2
1000e9c0:	e0bff515 	stw	r2,-44(fp)
  next = chunk_at_offset(p, sz);
1000e9c4:	e0fff417 	ldw	r3,-48(fp)
1000e9c8:	e0bff517 	ldw	r2,-44(fp)
1000e9cc:	1885883a 	add	r2,r3,r2
1000e9d0:	e0bffa15 	stw	r2,-24(fp)
  nextsz = chunksize(next);
1000e9d4:	e0bffa17 	ldw	r2,-24(fp)
1000e9d8:	10c00117 	ldw	r3,4(r2)
1000e9dc:	00bfff04 	movi	r2,-4
1000e9e0:	1884703a 	and	r2,r3,r2
1000e9e4:	e0bffb15 	stw	r2,-20(fp)
  
  if (next == top)                            /* merge with top */
1000e9e8:	00840374 	movhi	r2,4109
1000e9ec:	109f1e04 	addi	r2,r2,31864
1000e9f0:	10c00217 	ldw	r3,8(r2)
1000e9f4:	e0bffa17 	ldw	r2,-24(fp)
1000e9f8:	1880351e 	bne	r3,r2,1000ead0 <_free_r+0x15c>
  {
    sz += nextsz;
1000e9fc:	e0fff517 	ldw	r3,-44(fp)
1000ea00:	e0bffb17 	ldw	r2,-20(fp)
1000ea04:	1885883a 	add	r2,r3,r2
1000ea08:	e0bff515 	stw	r2,-44(fp)

    if (!(hd & PREV_INUSE))                    /* consolidate backward */
1000ea0c:	e0bff917 	ldw	r2,-28(fp)
1000ea10:	1080004c 	andi	r2,r2,1
1000ea14:	1000181e 	bne	r2,zero,1000ea78 <_free_r+0x104>
    {
      prevsz = p->prev_size;
1000ea18:	e0bff417 	ldw	r2,-48(fp)
1000ea1c:	10800017 	ldw	r2,0(r2)
1000ea20:	e0bffc15 	stw	r2,-16(fp)
      p = chunk_at_offset(p, -prevsz);
1000ea24:	e0bffc17 	ldw	r2,-16(fp)
1000ea28:	0085c83a 	sub	r2,zero,r2
1000ea2c:	e0fff417 	ldw	r3,-48(fp)
1000ea30:	1885883a 	add	r2,r3,r2
1000ea34:	e0bff415 	stw	r2,-48(fp)
      sz += prevsz;
1000ea38:	e0fff517 	ldw	r3,-44(fp)
1000ea3c:	e0bffc17 	ldw	r2,-16(fp)
1000ea40:	1885883a 	add	r2,r3,r2
1000ea44:	e0bff515 	stw	r2,-44(fp)
      unlink(p, bck, fwd);
1000ea48:	e0bff417 	ldw	r2,-48(fp)
1000ea4c:	10800317 	ldw	r2,12(r2)
1000ea50:	e0bff615 	stw	r2,-40(fp)
1000ea54:	e0bff417 	ldw	r2,-48(fp)
1000ea58:	10800217 	ldw	r2,8(r2)
1000ea5c:	e0bff715 	stw	r2,-36(fp)
1000ea60:	e0bff717 	ldw	r2,-36(fp)
1000ea64:	e0fff617 	ldw	r3,-40(fp)
1000ea68:	10c00315 	stw	r3,12(r2)
1000ea6c:	e0bff617 	ldw	r2,-40(fp)
1000ea70:	e0fff717 	ldw	r3,-36(fp)
1000ea74:	10c00215 	stw	r3,8(r2)
    }

    set_head(p, sz | PREV_INUSE);
1000ea78:	e0bff517 	ldw	r2,-44(fp)
1000ea7c:	10c00054 	ori	r3,r2,1
1000ea80:	e0bff417 	ldw	r2,-48(fp)
1000ea84:	10c00115 	stw	r3,4(r2)
    top = p;
1000ea88:	00840374 	movhi	r2,4109
1000ea8c:	109f1e04 	addi	r2,r2,31864
1000ea90:	e0fff417 	ldw	r3,-48(fp)
1000ea94:	10c00215 	stw	r3,8(r2)
    if ((unsigned long)(sz) >= (unsigned long)trim_threshold) 
1000ea98:	008403b4 	movhi	r2,4110
1000ea9c:	10a4ce04 	addi	r2,r2,-27848
1000eaa0:	10800017 	ldw	r2,0(r2)
1000eaa4:	e0fff517 	ldw	r3,-44(fp)
1000eaa8:	18800636 	bltu	r3,r2,1000eac4 <_free_r+0x150>
      malloc_trim(RCALL top_pad); 
1000eaac:	008403b4 	movhi	r2,4110
1000eab0:	108b1c04 	addi	r2,r2,11376
1000eab4:	10800017 	ldw	r2,0(r2)
1000eab8:	100b883a 	mov	r5,r2
1000eabc:	e13ffe17 	ldw	r4,-8(fp)
1000eac0:	000eee40 	call	1000eee4 <_malloc_trim_r>
    MALLOC_UNLOCK;
1000eac4:	e13ffe17 	ldw	r4,-8(fp)
1000eac8:	0015f940 	call	10015f94 <__malloc_unlock>
    return;
1000eacc:	00010006 	br	1000eed0 <_free_r+0x55c>
  }

  set_head(next, nextsz);                    /* clear inuse bit */
1000ead0:	e0bffa17 	ldw	r2,-24(fp)
1000ead4:	e0fffb17 	ldw	r3,-20(fp)
1000ead8:	10c00115 	stw	r3,4(r2)

  islr = 0;
1000eadc:	e03ff815 	stw	zero,-32(fp)

  if (!(hd & PREV_INUSE))                    /* consolidate backward */
1000eae0:	e0bff917 	ldw	r2,-28(fp)
1000eae4:	1080004c 	andi	r2,r2,1
1000eae8:	1000201e 	bne	r2,zero,1000eb6c <_free_r+0x1f8>
  {
    prevsz = p->prev_size;
1000eaec:	e0bff417 	ldw	r2,-48(fp)
1000eaf0:	10800017 	ldw	r2,0(r2)
1000eaf4:	e0bffc15 	stw	r2,-16(fp)
    p = chunk_at_offset(p, -prevsz);
1000eaf8:	e0bffc17 	ldw	r2,-16(fp)
1000eafc:	0085c83a 	sub	r2,zero,r2
1000eb00:	e0fff417 	ldw	r3,-48(fp)
1000eb04:	1885883a 	add	r2,r3,r2
1000eb08:	e0bff415 	stw	r2,-48(fp)
    sz += prevsz;
1000eb0c:	e0fff517 	ldw	r3,-44(fp)
1000eb10:	e0bffc17 	ldw	r2,-16(fp)
1000eb14:	1885883a 	add	r2,r3,r2
1000eb18:	e0bff515 	stw	r2,-44(fp)
    
    if (p->fd == last_remainder)             /* keep as last_remainder */
1000eb1c:	e0bff417 	ldw	r2,-48(fp)
1000eb20:	10c00217 	ldw	r3,8(r2)
1000eb24:	00840374 	movhi	r2,4109
1000eb28:	109f2004 	addi	r2,r2,31872
1000eb2c:	1880031e 	bne	r3,r2,1000eb3c <_free_r+0x1c8>
      islr = 1;
1000eb30:	00800044 	movi	r2,1
1000eb34:	e0bff815 	stw	r2,-32(fp)
1000eb38:	00000c06 	br	1000eb6c <_free_r+0x1f8>
    else
      unlink(p, bck, fwd);
1000eb3c:	e0bff417 	ldw	r2,-48(fp)
1000eb40:	10800317 	ldw	r2,12(r2)
1000eb44:	e0bff615 	stw	r2,-40(fp)
1000eb48:	e0bff417 	ldw	r2,-48(fp)
1000eb4c:	10800217 	ldw	r2,8(r2)
1000eb50:	e0bff715 	stw	r2,-36(fp)
1000eb54:	e0bff717 	ldw	r2,-36(fp)
1000eb58:	e0fff617 	ldw	r3,-40(fp)
1000eb5c:	10c00315 	stw	r3,12(r2)
1000eb60:	e0bff617 	ldw	r2,-40(fp)
1000eb64:	e0fff717 	ldw	r3,-36(fp)
1000eb68:	10c00215 	stw	r3,8(r2)
  }
  
  if (!(inuse_bit_at_offset(next, nextsz)))   /* consolidate forward */
1000eb6c:	e0fffa17 	ldw	r3,-24(fp)
1000eb70:	e0bffb17 	ldw	r2,-20(fp)
1000eb74:	1885883a 	add	r2,r3,r2
1000eb78:	10800117 	ldw	r2,4(r2)
1000eb7c:	1080004c 	andi	r2,r2,1
1000eb80:	10002a1e 	bne	r2,zero,1000ec2c <_free_r+0x2b8>
  {
    sz += nextsz;
1000eb84:	e0fff517 	ldw	r3,-44(fp)
1000eb88:	e0bffb17 	ldw	r2,-20(fp)
1000eb8c:	1885883a 	add	r2,r3,r2
1000eb90:	e0bff515 	stw	r2,-44(fp)
    
    if (!islr && next->fd == last_remainder)  /* re-insert last_remainder */
1000eb94:	e0bff817 	ldw	r2,-32(fp)
1000eb98:	1000181e 	bne	r2,zero,1000ebfc <_free_r+0x288>
1000eb9c:	e0bffa17 	ldw	r2,-24(fp)
1000eba0:	10c00217 	ldw	r3,8(r2)
1000eba4:	00840374 	movhi	r2,4109
1000eba8:	109f2004 	addi	r2,r2,31872
1000ebac:	1880131e 	bne	r3,r2,1000ebfc <_free_r+0x288>
    {
      islr = 1;
1000ebb0:	00800044 	movi	r2,1
1000ebb4:	e0bff815 	stw	r2,-32(fp)
      link_last_remainder(p);   
1000ebb8:	00c40374 	movhi	r3,4109
1000ebbc:	18df2004 	addi	r3,r3,31872
1000ebc0:	00840374 	movhi	r2,4109
1000ebc4:	109f2004 	addi	r2,r2,31872
1000ebc8:	e13ff417 	ldw	r4,-48(fp)
1000ebcc:	11000315 	stw	r4,12(r2)
1000ebd0:	10800317 	ldw	r2,12(r2)
1000ebd4:	18800215 	stw	r2,8(r3)
1000ebd8:	00840374 	movhi	r2,4109
1000ebdc:	109f2004 	addi	r2,r2,31872
1000ebe0:	e0fff417 	ldw	r3,-48(fp)
1000ebe4:	18800315 	stw	r2,12(r3)
1000ebe8:	e0bff417 	ldw	r2,-48(fp)
1000ebec:	10c00317 	ldw	r3,12(r2)
1000ebf0:	e0bff417 	ldw	r2,-48(fp)
1000ebf4:	10c00215 	stw	r3,8(r2)
1000ebf8:	00000c06 	br	1000ec2c <_free_r+0x2b8>
    }
    else
      unlink(next, bck, fwd);
1000ebfc:	e0bffa17 	ldw	r2,-24(fp)
1000ec00:	10800317 	ldw	r2,12(r2)
1000ec04:	e0bff615 	stw	r2,-40(fp)
1000ec08:	e0bffa17 	ldw	r2,-24(fp)
1000ec0c:	10800217 	ldw	r2,8(r2)
1000ec10:	e0bff715 	stw	r2,-36(fp)
1000ec14:	e0bff717 	ldw	r2,-36(fp)
1000ec18:	e0fff617 	ldw	r3,-40(fp)
1000ec1c:	10c00315 	stw	r3,12(r2)
1000ec20:	e0bff617 	ldw	r2,-40(fp)
1000ec24:	e0fff717 	ldw	r3,-36(fp)
1000ec28:	10c00215 	stw	r3,8(r2)
  }


  set_head(p, sz | PREV_INUSE);
1000ec2c:	e0bff517 	ldw	r2,-44(fp)
1000ec30:	10c00054 	ori	r3,r2,1
1000ec34:	e0bff417 	ldw	r2,-48(fp)
1000ec38:	10c00115 	stw	r3,4(r2)
  set_foot(p, sz);
1000ec3c:	e0fff417 	ldw	r3,-48(fp)
1000ec40:	e0bff517 	ldw	r2,-44(fp)
1000ec44:	1885883a 	add	r2,r3,r2
1000ec48:	e0fff517 	ldw	r3,-44(fp)
1000ec4c:	10c00015 	stw	r3,0(r2)
  if (!islr)
1000ec50:	e0bff817 	ldw	r2,-32(fp)
1000ec54:	10009a1e 	bne	r2,zero,1000eec0 <_free_r+0x54c>
    frontlink(p, sz, idx, bck, fwd);  
1000ec58:	e0bff517 	ldw	r2,-44(fp)
1000ec5c:	10808028 	cmpgeui	r2,r2,512
1000ec60:	10002c1e 	bne	r2,zero,1000ed14 <_free_r+0x3a0>
1000ec64:	e0bff517 	ldw	r2,-44(fp)
1000ec68:	1004d0fa 	srli	r2,r2,3
1000ec6c:	e0bffd15 	stw	r2,-12(fp)
1000ec70:	00c40374 	movhi	r3,4109
1000ec74:	18df1e04 	addi	r3,r3,31864
1000ec78:	00840374 	movhi	r2,4109
1000ec7c:	109f1e04 	addi	r2,r2,31864
1000ec80:	11000117 	ldw	r4,4(r2)
1000ec84:	e0bffd17 	ldw	r2,-12(fp)
1000ec88:	1000010e 	bge	r2,zero,1000ec90 <_free_r+0x31c>
1000ec8c:	108000c4 	addi	r2,r2,3
1000ec90:	1005d0ba 	srai	r2,r2,2
1000ec94:	100b883a 	mov	r5,r2
1000ec98:	00800044 	movi	r2,1
1000ec9c:	1144983a 	sll	r2,r2,r5
1000eca0:	2084b03a 	or	r2,r4,r2
1000eca4:	18800115 	stw	r2,4(r3)
1000eca8:	e0bffd17 	ldw	r2,-12(fp)
1000ecac:	10800044 	addi	r2,r2,1
1000ecb0:	1085883a 	add	r2,r2,r2
1000ecb4:	1085883a 	add	r2,r2,r2
1000ecb8:	1087883a 	add	r3,r2,r2
1000ecbc:	00840374 	movhi	r2,4109
1000ecc0:	109f1e04 	addi	r2,r2,31864
1000ecc4:	1885883a 	add	r2,r3,r2
1000ecc8:	10bffe04 	addi	r2,r2,-8
1000eccc:	e0bff615 	stw	r2,-40(fp)
1000ecd0:	e0bff617 	ldw	r2,-40(fp)
1000ecd4:	10800217 	ldw	r2,8(r2)
1000ecd8:	e0bff715 	stw	r2,-36(fp)
1000ecdc:	e0bff417 	ldw	r2,-48(fp)
1000ece0:	e0fff617 	ldw	r3,-40(fp)
1000ece4:	10c00315 	stw	r3,12(r2)
1000ece8:	e0bff417 	ldw	r2,-48(fp)
1000ecec:	e0fff717 	ldw	r3,-36(fp)
1000ecf0:	10c00215 	stw	r3,8(r2)
1000ecf4:	e0bff617 	ldw	r2,-40(fp)
1000ecf8:	e0fff417 	ldw	r3,-48(fp)
1000ecfc:	10c00215 	stw	r3,8(r2)
1000ed00:	e0bff617 	ldw	r2,-40(fp)
1000ed04:	10c00217 	ldw	r3,8(r2)
1000ed08:	e0bff717 	ldw	r2,-36(fp)
1000ed0c:	10c00315 	stw	r3,12(r2)
1000ed10:	00006b06 	br	1000eec0 <_free_r+0x54c>
1000ed14:	e0bff517 	ldw	r2,-44(fp)
1000ed18:	1004d27a 	srli	r2,r2,9
1000ed1c:	1000031e 	bne	r2,zero,1000ed2c <_free_r+0x3b8>
1000ed20:	e0bff517 	ldw	r2,-44(fp)
1000ed24:	1004d0fa 	srli	r2,r2,3
1000ed28:	00002906 	br	1000edd0 <_free_r+0x45c>
1000ed2c:	e0bff517 	ldw	r2,-44(fp)
1000ed30:	1004d27a 	srli	r2,r2,9
1000ed34:	10800168 	cmpgeui	r2,r2,5
1000ed38:	1000041e 	bne	r2,zero,1000ed4c <_free_r+0x3d8>
1000ed3c:	e0bff517 	ldw	r2,-44(fp)
1000ed40:	1004d1ba 	srli	r2,r2,6
1000ed44:	10800e04 	addi	r2,r2,56
1000ed48:	00002106 	br	1000edd0 <_free_r+0x45c>
1000ed4c:	e0bff517 	ldw	r2,-44(fp)
1000ed50:	1004d27a 	srli	r2,r2,9
1000ed54:	10800568 	cmpgeui	r2,r2,21
1000ed58:	1000041e 	bne	r2,zero,1000ed6c <_free_r+0x3f8>
1000ed5c:	e0bff517 	ldw	r2,-44(fp)
1000ed60:	1004d27a 	srli	r2,r2,9
1000ed64:	108016c4 	addi	r2,r2,91
1000ed68:	00001906 	br	1000edd0 <_free_r+0x45c>
1000ed6c:	e0bff517 	ldw	r2,-44(fp)
1000ed70:	1004d27a 	srli	r2,r2,9
1000ed74:	10801568 	cmpgeui	r2,r2,85
1000ed78:	1000041e 	bne	r2,zero,1000ed8c <_free_r+0x418>
1000ed7c:	e0bff517 	ldw	r2,-44(fp)
1000ed80:	1004d33a 	srli	r2,r2,12
1000ed84:	10801b84 	addi	r2,r2,110
1000ed88:	00001106 	br	1000edd0 <_free_r+0x45c>
1000ed8c:	e0bff517 	ldw	r2,-44(fp)
1000ed90:	1004d27a 	srli	r2,r2,9
1000ed94:	10805568 	cmpgeui	r2,r2,341
1000ed98:	1000041e 	bne	r2,zero,1000edac <_free_r+0x438>
1000ed9c:	e0bff517 	ldw	r2,-44(fp)
1000eda0:	1004d3fa 	srli	r2,r2,15
1000eda4:	10801dc4 	addi	r2,r2,119
1000eda8:	00000906 	br	1000edd0 <_free_r+0x45c>
1000edac:	e0bff517 	ldw	r2,-44(fp)
1000edb0:	1004d27a 	srli	r2,r2,9
1000edb4:	10815568 	cmpgeui	r2,r2,1365
1000edb8:	1000041e 	bne	r2,zero,1000edcc <_free_r+0x458>
1000edbc:	e0bff517 	ldw	r2,-44(fp)
1000edc0:	1004d4ba 	srli	r2,r2,18
1000edc4:	10801f04 	addi	r2,r2,124
1000edc8:	00000106 	br	1000edd0 <_free_r+0x45c>
1000edcc:	00801f84 	movi	r2,126
1000edd0:	e0bffd15 	stw	r2,-12(fp)
1000edd4:	e0bffd17 	ldw	r2,-12(fp)
1000edd8:	10800044 	addi	r2,r2,1
1000eddc:	1085883a 	add	r2,r2,r2
1000ede0:	1085883a 	add	r2,r2,r2
1000ede4:	1087883a 	add	r3,r2,r2
1000ede8:	00840374 	movhi	r2,4109
1000edec:	109f1e04 	addi	r2,r2,31864
1000edf0:	1885883a 	add	r2,r3,r2
1000edf4:	10bffe04 	addi	r2,r2,-8
1000edf8:	e0bff615 	stw	r2,-40(fp)
1000edfc:	e0bff617 	ldw	r2,-40(fp)
1000ee00:	10800217 	ldw	r2,8(r2)
1000ee04:	e0bff715 	stw	r2,-36(fp)
1000ee08:	e0fff717 	ldw	r3,-36(fp)
1000ee0c:	e0bff617 	ldw	r2,-40(fp)
1000ee10:	1880121e 	bne	r3,r2,1000ee5c <_free_r+0x4e8>
1000ee14:	00c40374 	movhi	r3,4109
1000ee18:	18df1e04 	addi	r3,r3,31864
1000ee1c:	00840374 	movhi	r2,4109
1000ee20:	109f1e04 	addi	r2,r2,31864
1000ee24:	11000117 	ldw	r4,4(r2)
1000ee28:	e0bffd17 	ldw	r2,-12(fp)
1000ee2c:	1000010e 	bge	r2,zero,1000ee34 <_free_r+0x4c0>
1000ee30:	108000c4 	addi	r2,r2,3
1000ee34:	1005d0ba 	srai	r2,r2,2
1000ee38:	100b883a 	mov	r5,r2
1000ee3c:	00800044 	movi	r2,1
1000ee40:	1144983a 	sll	r2,r2,r5
1000ee44:	2084b03a 	or	r2,r4,r2
1000ee48:	18800115 	stw	r2,4(r3)
1000ee4c:	00000f06 	br	1000ee8c <_free_r+0x518>
1000ee50:	e0bff717 	ldw	r2,-36(fp)
1000ee54:	10800217 	ldw	r2,8(r2)
1000ee58:	e0bff715 	stw	r2,-36(fp)
1000ee5c:	e0fff717 	ldw	r3,-36(fp)
1000ee60:	e0bff617 	ldw	r2,-40(fp)
1000ee64:	18800626 	beq	r3,r2,1000ee80 <_free_r+0x50c>
1000ee68:	e0bff717 	ldw	r2,-36(fp)
1000ee6c:	10c00117 	ldw	r3,4(r2)
1000ee70:	00bfff04 	movi	r2,-4
1000ee74:	1884703a 	and	r2,r3,r2
1000ee78:	e0fff517 	ldw	r3,-44(fp)
1000ee7c:	18bff436 	bltu	r3,r2,1000ee50 <__alt_data_end+0xf800ee50>
1000ee80:	e0bff717 	ldw	r2,-36(fp)
1000ee84:	10800317 	ldw	r2,12(r2)
1000ee88:	e0bff615 	stw	r2,-40(fp)
1000ee8c:	e0bff417 	ldw	r2,-48(fp)
1000ee90:	e0fff617 	ldw	r3,-40(fp)
1000ee94:	10c00315 	stw	r3,12(r2)
1000ee98:	e0bff417 	ldw	r2,-48(fp)
1000ee9c:	e0fff717 	ldw	r3,-36(fp)
1000eea0:	10c00215 	stw	r3,8(r2)
1000eea4:	e0bff617 	ldw	r2,-40(fp)
1000eea8:	e0fff417 	ldw	r3,-48(fp)
1000eeac:	10c00215 	stw	r3,8(r2)
1000eeb0:	e0bff617 	ldw	r2,-40(fp)
1000eeb4:	10c00217 	ldw	r3,8(r2)
1000eeb8:	e0bff717 	ldw	r2,-36(fp)
1000eebc:	10c00315 	stw	r3,12(r2)

  MALLOC_UNLOCK;
1000eec0:	e13ffe17 	ldw	r4,-8(fp)
1000eec4:	0015f940 	call	10015f94 <__malloc_unlock>
1000eec8:	00000106 	br	1000eed0 <_free_r+0x55c>
  mchunkptr bck;       /* misc temp for linking */
  mchunkptr fwd;       /* misc temp for linking */
  int       islr;      /* track whether merging with last_remainder */

  if (mem == 0)                              /* free(0) has no effect */
    return;
1000eecc:	0001883a 	nop
    frontlink(p, sz, idx, bck, fwd);  

  MALLOC_UNLOCK;

#endif /* MALLOC_PROVIDED */
}
1000eed0:	e037883a 	mov	sp,fp
1000eed4:	dfc00117 	ldw	ra,4(sp)
1000eed8:	df000017 	ldw	fp,0(sp)
1000eedc:	dec00204 	addi	sp,sp,8
1000eee0:	f800283a 	ret

1000eee4 <_malloc_trim_r>:
#if __STD_C
int malloc_trim(RARG size_t pad)
#else
int malloc_trim(RARG pad) RDECL size_t pad;
#endif
{
1000eee4:	defff704 	addi	sp,sp,-36
1000eee8:	dfc00815 	stw	ra,32(sp)
1000eeec:	df000715 	stw	fp,28(sp)
1000eef0:	df000704 	addi	fp,sp,28
1000eef4:	e13ffe15 	stw	r4,-8(fp)
1000eef8:	e17fff15 	stw	r5,-4(fp)
  long  top_size;        /* Amount of top-most memory */
  long  extra;           /* Amount to release */
  char* current_brk;     /* address returned by pre-check sbrk call */
  char* new_brk;         /* address returned by negative sbrk call */

  unsigned long pagesz = malloc_getpagesize;
1000eefc:	00840004 	movi	r2,4096
1000ef00:	e0bff915 	stw	r2,-28(fp)

  MALLOC_LOCK;
1000ef04:	e13ffe17 	ldw	r4,-8(fp)
1000ef08:	0015f700 	call	10015f70 <__malloc_lock>

  top_size = chunksize(top);
1000ef0c:	00840374 	movhi	r2,4109
1000ef10:	109f1e04 	addi	r2,r2,31864
1000ef14:	10800217 	ldw	r2,8(r2)
1000ef18:	10800117 	ldw	r2,4(r2)
1000ef1c:	1007883a 	mov	r3,r2
1000ef20:	00bfff04 	movi	r2,-4
1000ef24:	1884703a 	and	r2,r3,r2
1000ef28:	e0bffa15 	stw	r2,-24(fp)
  extra = ((top_size - pad - MINSIZE + (pagesz-1)) / pagesz - 1) * pagesz;
1000ef2c:	e0fffa17 	ldw	r3,-24(fp)
1000ef30:	e0bfff17 	ldw	r2,-4(fp)
1000ef34:	1887c83a 	sub	r3,r3,r2
1000ef38:	e0bff917 	ldw	r2,-28(fp)
1000ef3c:	1885883a 	add	r2,r3,r2
1000ef40:	10bffbc4 	addi	r2,r2,-17
1000ef44:	e17ff917 	ldw	r5,-28(fp)
1000ef48:	1009883a 	mov	r4,r2
1000ef4c:	00026900 	call	10002690 <__udivsi3>
1000ef50:	10bfffc4 	addi	r2,r2,-1
1000ef54:	e17ff917 	ldw	r5,-28(fp)
1000ef58:	1009883a 	mov	r4,r2
1000ef5c:	00065d80 	call	100065d8 <__mulsi3>
1000ef60:	e0bffb15 	stw	r2,-20(fp)

  if (extra < (long)pagesz)  /* Not enough memory to release */
1000ef64:	e0bff917 	ldw	r2,-28(fp)
1000ef68:	e0fffb17 	ldw	r3,-20(fp)
1000ef6c:	1880040e 	bge	r3,r2,1000ef80 <_malloc_trim_r+0x9c>
  {
    MALLOC_UNLOCK;
1000ef70:	e13ffe17 	ldw	r4,-8(fp)
1000ef74:	0015f940 	call	10015f94 <__malloc_unlock>
    return 0;
1000ef78:	0005883a 	mov	r2,zero
1000ef7c:	00004a06 	br	1000f0a8 <_malloc_trim_r+0x1c4>
  }

  else
  {
    /* Test to make sure no one else called sbrk */
    current_brk = (char*)(MORECORE (0));
1000ef80:	000b883a 	mov	r5,zero
1000ef84:	e13ffe17 	ldw	r4,-8(fp)
1000ef88:	00093140 	call	10009314 <_sbrk_r>
1000ef8c:	e0bffc15 	stw	r2,-16(fp)
    if (current_brk != (char*)(top) + top_size)
1000ef90:	00840374 	movhi	r2,4109
1000ef94:	109f1e04 	addi	r2,r2,31864
1000ef98:	10c00217 	ldw	r3,8(r2)
1000ef9c:	e0bffa17 	ldw	r2,-24(fp)
1000efa0:	1887883a 	add	r3,r3,r2
1000efa4:	e0bffc17 	ldw	r2,-16(fp)
1000efa8:	18800426 	beq	r3,r2,1000efbc <_malloc_trim_r+0xd8>
    {
      MALLOC_UNLOCK;
1000efac:	e13ffe17 	ldw	r4,-8(fp)
1000efb0:	0015f940 	call	10015f94 <__malloc_unlock>
      return 0;     /* Apparently we don't own memory; must fail */
1000efb4:	0005883a 	mov	r2,zero
1000efb8:	00003b06 	br	1000f0a8 <_malloc_trim_r+0x1c4>
    }

    else
    {
      new_brk = (char*)(MORECORE (-extra));
1000efbc:	e0bffb17 	ldw	r2,-20(fp)
1000efc0:	0085c83a 	sub	r2,zero,r2
1000efc4:	100b883a 	mov	r5,r2
1000efc8:	e13ffe17 	ldw	r4,-8(fp)
1000efcc:	00093140 	call	10009314 <_sbrk_r>
1000efd0:	e0bffd15 	stw	r2,-12(fp)
      
      if (new_brk == (char*)(MORECORE_FAILURE)) /* sbrk failed? */
1000efd4:	e0bffd17 	ldw	r2,-12(fp)
1000efd8:	10bfffd8 	cmpnei	r2,r2,-1
1000efdc:	10001f1e 	bne	r2,zero,1000f05c <_malloc_trim_r+0x178>
      {
        /* Try to figure out what we have */
        current_brk = (char*)(MORECORE (0));
1000efe0:	000b883a 	mov	r5,zero
1000efe4:	e13ffe17 	ldw	r4,-8(fp)
1000efe8:	00093140 	call	10009314 <_sbrk_r>
1000efec:	e0bffc15 	stw	r2,-16(fp)
        top_size = current_brk - (char*)top;
1000eff0:	e0fffc17 	ldw	r3,-16(fp)
1000eff4:	00840374 	movhi	r2,4109
1000eff8:	109f1e04 	addi	r2,r2,31864
1000effc:	10800217 	ldw	r2,8(r2)
1000f000:	1885c83a 	sub	r2,r3,r2
1000f004:	e0bffa15 	stw	r2,-24(fp)
        if (top_size >= (long)MINSIZE) /* if not, we are very very dead! */
1000f008:	e0bffa17 	ldw	r2,-24(fp)
1000f00c:	10800410 	cmplti	r2,r2,16
1000f010:	10000e1e 	bne	r2,zero,1000f04c <_malloc_trim_r+0x168>
        {
          sbrked_mem = current_brk - sbrk_base;
1000f014:	e0fffc17 	ldw	r3,-16(fp)
1000f018:	008403b4 	movhi	r2,4110
1000f01c:	10a4cf04 	addi	r2,r2,-27844
1000f020:	10800017 	ldw	r2,0(r2)
1000f024:	1887c83a 	sub	r3,r3,r2
1000f028:	008403b4 	movhi	r2,4110
1000f02c:	108b3204 	addi	r2,r2,11464
1000f030:	10c00015 	stw	r3,0(r2)
          set_head(top, top_size | PREV_INUSE);
1000f034:	00840374 	movhi	r2,4109
1000f038:	109f1e04 	addi	r2,r2,31864
1000f03c:	10800217 	ldw	r2,8(r2)
1000f040:	e0fffa17 	ldw	r3,-24(fp)
1000f044:	18c00054 	ori	r3,r3,1
1000f048:	10c00115 	stw	r3,4(r2)
        }
        check_chunk(top);
	MALLOC_UNLOCK;
1000f04c:	e13ffe17 	ldw	r4,-8(fp)
1000f050:	0015f940 	call	10015f94 <__malloc_unlock>
        return 0; 
1000f054:	0005883a 	mov	r2,zero
1000f058:	00001306 	br	1000f0a8 <_malloc_trim_r+0x1c4>
      }

      else
      {
        /* Success. Adjust top accordingly. */
        set_head(top, (top_size - extra) | PREV_INUSE);
1000f05c:	00840374 	movhi	r2,4109
1000f060:	109f1e04 	addi	r2,r2,31864
1000f064:	10800217 	ldw	r2,8(r2)
1000f068:	e13ffa17 	ldw	r4,-24(fp)
1000f06c:	e0fffb17 	ldw	r3,-20(fp)
1000f070:	20c7c83a 	sub	r3,r4,r3
1000f074:	18c00054 	ori	r3,r3,1
1000f078:	10c00115 	stw	r3,4(r2)
        sbrked_mem -= extra;
1000f07c:	008403b4 	movhi	r2,4110
1000f080:	108b3204 	addi	r2,r2,11464
1000f084:	10c00017 	ldw	r3,0(r2)
1000f088:	e0bffb17 	ldw	r2,-20(fp)
1000f08c:	1887c83a 	sub	r3,r3,r2
1000f090:	008403b4 	movhi	r2,4110
1000f094:	108b3204 	addi	r2,r2,11464
1000f098:	10c00015 	stw	r3,0(r2)
        check_chunk(top);
	MALLOC_UNLOCK;
1000f09c:	e13ffe17 	ldw	r4,-8(fp)
1000f0a0:	0015f940 	call	10015f94 <__malloc_unlock>
        return 1;
1000f0a4:	00800044 	movi	r2,1
      }
    }
  }
}
1000f0a8:	e037883a 	mov	sp,fp
1000f0ac:	dfc00117 	ldw	ra,4(sp)
1000f0b0:	df000017 	ldw	fp,0(sp)
1000f0b4:	dec00204 	addi	sp,sp,8
1000f0b8:	f800283a 	ret

1000f0bc <__sfvwrite_r>:
int
_DEFUN(__sfvwrite_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       register FILE *fp _AND
       register struct __suio *uio)
{
1000f0bc:	defff004 	addi	sp,sp,-64
1000f0c0:	dfc00f15 	stw	ra,60(sp)
1000f0c4:	df000e15 	stw	fp,56(sp)
1000f0c8:	dd800d15 	stw	r22,52(sp)
1000f0cc:	dd400c15 	stw	r21,48(sp)
1000f0d0:	dd000b15 	stw	r20,44(sp)
1000f0d4:	dcc00a15 	stw	r19,40(sp)
1000f0d8:	dc800915 	stw	r18,36(sp)
1000f0dc:	dc400815 	stw	r17,32(sp)
1000f0e0:	dc000715 	stw	r16,28(sp)
1000f0e4:	df000e04 	addi	fp,sp,56
1000f0e8:	e13ff815 	stw	r4,-32(fp)
1000f0ec:	2821883a 	mov	r16,r5
1000f0f0:	302b883a 	mov	r21,r6
  register size_t len;
  register _CONST char *p = NULL;
1000f0f4:	0027883a 	mov	r19,zero
  register struct __siov *iov;
  register _READ_WRITE_RETURN_TYPE w, s;
  char *nl;
  int nlknown, nldist;

  if ((len = uio->uio_resid) == 0)
1000f0f8:	ac400217 	ldw	r17,8(r21)
1000f0fc:	8800021e 	bne	r17,zero,1000f108 <__sfvwrite_r+0x4c>
    return 0;
1000f100:	0005883a 	mov	r2,zero
1000f104:	00015b06 	br	1000f674 <__sfvwrite_r+0x5b8>

  /* make sure we can write */
  if (cantwrite (ptr, fp))
1000f108:	8080030b 	ldhu	r2,12(r16)
1000f10c:	10bfffcc 	andi	r2,r2,65535
1000f110:	1080020c 	andi	r2,r2,8
1000f114:	10000226 	beq	r2,zero,1000f120 <__sfvwrite_r+0x64>
1000f118:	80800417 	ldw	r2,16(r16)
1000f11c:	1000061e 	bne	r2,zero,1000f138 <__sfvwrite_r+0x7c>
1000f120:	800b883a 	mov	r5,r16
1000f124:	e13ff817 	ldw	r4,-32(fp)
1000f128:	000be6c0 	call	1000be6c <__swsetup_r>
1000f12c:	10000226 	beq	r2,zero,1000f138 <__sfvwrite_r+0x7c>
    return EOF;
1000f130:	00bfffc4 	movi	r2,-1
1000f134:	00014f06 	br	1000f674 <__sfvwrite_r+0x5b8>

  iov = uio->uio_iov;
1000f138:	ad000017 	ldw	r20,0(r21)
  len = 0;
1000f13c:	0023883a 	mov	r17,zero
      while (uio->uio_resid > 0);
      return 0;
    }
#endif

  if (fp->_flags & __SNBF)
1000f140:	8080030b 	ldhu	r2,12(r16)
1000f144:	10bfffcc 	andi	r2,r2,65535
1000f148:	1080008c 	andi	r2,r2,2
1000f14c:	10001f26 	beq	r2,zero,1000f1cc <__sfvwrite_r+0x110>
       * Unbuffered: Split buffer in the largest multiple of BUFSIZ < INT_MAX
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
1000f150:	00000306 	br	1000f160 <__sfvwrite_r+0xa4>
1000f154:	a4c00017 	ldw	r19,0(r20)
1000f158:	a4400117 	ldw	r17,4(r20)
1000f15c:	a5000204 	addi	r20,r20,8
1000f160:	883ffc26 	beq	r17,zero,1000f154 <__alt_data_end+0xf800f154>
	  w = fp->_write (ptr, fp->_cookie, p,
1000f164:	82000917 	ldw	r8,36(r16)
1000f168:	81000717 	ldw	r4,28(r16)
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
1000f16c:	8805883a 	mov	r2,r17
1000f170:	00e00034 	movhi	r3,32768
1000f174:	18ff0004 	addi	r3,r3,-1024
1000f178:	1880022e 	bgeu	r3,r2,1000f184 <__sfvwrite_r+0xc8>
1000f17c:	00a00034 	movhi	r2,32768
1000f180:	10bf0004 	addi	r2,r2,-1024
       * as some legacy code may expect int instead of size_t.
       */
      do
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
1000f184:	100f883a 	mov	r7,r2
1000f188:	980d883a 	mov	r6,r19
1000f18c:	200b883a 	mov	r5,r4
1000f190:	e13ff817 	ldw	r4,-32(fp)
1000f194:	403ee83a 	callr	r8
1000f198:	1025883a 	mov	r18,r2
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
1000f19c:	04812c0e 	bge	zero,r18,1000f650 <__sfvwrite_r+0x594>
	    goto err;
	  p += w;
1000f1a0:	9005883a 	mov	r2,r18
1000f1a4:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000f1a8:	9005883a 	mov	r2,r18
1000f1ac:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000f1b0:	a8800217 	ldw	r2,8(r21)
1000f1b4:	9007883a 	mov	r3,r18
1000f1b8:	10c5c83a 	sub	r2,r2,r3
1000f1bc:	a8800215 	stw	r2,8(r21)
1000f1c0:	a8800217 	ldw	r2,8(r21)
1000f1c4:	103fe61e 	bne	r2,zero,1000f160 <__alt_data_end+0xf800f160>
1000f1c8:	00011f06 	br	1000f648 <__sfvwrite_r+0x58c>
    }
  else if ((fp->_flags & __SLBF) == 0)
1000f1cc:	8080030b 	ldhu	r2,12(r16)
1000f1d0:	10bfffcc 	andi	r2,r2,65535
1000f1d4:	1080004c 	andi	r2,r2,1
1000f1d8:	1000b81e 	bne	r2,zero,1000f4bc <__sfvwrite_r+0x400>
       * we are dealing with the asprintf routines, we will
       * dynamically increase the buffer size as needed.
       */
      do
	{
	  GETIOV (;);
1000f1dc:	00000306 	br	1000f1ec <__sfvwrite_r+0x130>
1000f1e0:	a4c00017 	ldw	r19,0(r20)
1000f1e4:	a4400117 	ldw	r17,4(r20)
1000f1e8:	a5000204 	addi	r20,r20,8
1000f1ec:	883ffc26 	beq	r17,zero,1000f1e0 <__alt_data_end+0xf800f1e0>
	  w = fp->_w;
1000f1f0:	84800217 	ldw	r18,8(r16)
	  if (fp->_flags & __SSTR)
1000f1f4:	8080030b 	ldhu	r2,12(r16)
1000f1f8:	10bfffcc 	andi	r2,r2,65535
1000f1fc:	1080800c 	andi	r2,r2,512
1000f200:	10006b26 	beq	r2,zero,1000f3b0 <__sfvwrite_r+0x2f4>
	    {
	      if (len >= w && fp->_flags & (__SMBF | __SOPT))
1000f204:	9005883a 	mov	r2,r18
1000f208:	88805736 	bltu	r17,r2,1000f368 <__sfvwrite_r+0x2ac>
1000f20c:	8080030b 	ldhu	r2,12(r16)
1000f210:	10bfffcc 	andi	r2,r2,65535
1000f214:	1081200c 	andi	r2,r2,1152
1000f218:	10005326 	beq	r2,zero,1000f368 <__sfvwrite_r+0x2ac>
		{ /* must be asprintf family */
		  unsigned char *str;
		  int curpos = (fp->_p - fp->_bf._base);
1000f21c:	80800017 	ldw	r2,0(r16)
1000f220:	1007883a 	mov	r3,r2
1000f224:	80800417 	ldw	r2,16(r16)
1000f228:	1885c83a 	sub	r2,r3,r2
1000f22c:	e0bff615 	stw	r2,-40(fp)
		     than (1+sqrt(5))/2 to accomodate malloc
		     overhead. asprintf EXPECTS us to overallocate, so
		     that it can add a trailing \0 without
		     reallocating.  The new allocation should thus be
		     max(prev_size*1.5, curpos+len+1). */
		  int newsize = fp->_bf._size * 3 / 2;
1000f230:	80c00517 	ldw	r3,20(r16)
1000f234:	1805883a 	mov	r2,r3
1000f238:	1085883a 	add	r2,r2,r2
1000f23c:	10c5883a 	add	r2,r2,r3
1000f240:	1006d7fa 	srli	r3,r2,31
1000f244:	1885883a 	add	r2,r3,r2
1000f248:	1005d07a 	srai	r2,r2,1
1000f24c:	e0bff515 	stw	r2,-44(fp)
		  if (newsize < curpos + len + 1)
1000f250:	e0bff617 	ldw	r2,-40(fp)
1000f254:	1445883a 	add	r2,r2,r17
1000f258:	10800044 	addi	r2,r2,1
1000f25c:	e0fff517 	ldw	r3,-44(fp)
1000f260:	1880042e 	bgeu	r3,r2,1000f274 <__sfvwrite_r+0x1b8>
		    newsize = curpos + len + 1;
1000f264:	e0bff617 	ldw	r2,-40(fp)
1000f268:	1445883a 	add	r2,r2,r17
1000f26c:	10800044 	addi	r2,r2,1
1000f270:	e0bff515 	stw	r2,-44(fp)
		  if (fp->_flags & __SOPT)
1000f274:	8080030b 	ldhu	r2,12(r16)
1000f278:	10bfffcc 	andi	r2,r2,65535
1000f27c:	1081000c 	andi	r2,r2,1024
1000f280:	10001726 	beq	r2,zero,1000f2e0 <__sfvwrite_r+0x224>
		    {
		      /* asnprintf leaves original buffer alone.  */
		      str = (unsigned char *)_malloc_r (ptr, newsize);
1000f284:	e0bff517 	ldw	r2,-44(fp)
1000f288:	100b883a 	mov	r5,r2
1000f28c:	e13ff817 	ldw	r4,-32(fp)
1000f290:	0006fd80 	call	10006fd8 <_malloc_r>
1000f294:	e0bff415 	stw	r2,-48(fp)
		      if (!str)
1000f298:	e0bff417 	ldw	r2,-48(fp)
1000f29c:	1000041e 	bne	r2,zero,1000f2b0 <__sfvwrite_r+0x1f4>
			{
			  ptr->_errno = ENOMEM;
1000f2a0:	e0bff817 	ldw	r2,-32(fp)
1000f2a4:	00c00304 	movi	r3,12
1000f2a8:	10c00015 	stw	r3,0(r2)
			  goto err;
1000f2ac:	0000ed06 	br	1000f664 <__sfvwrite_r+0x5a8>
			}
		      memcpy (str, fp->_bf._base, curpos);
1000f2b0:	80800417 	ldw	r2,16(r16)
1000f2b4:	e0fff617 	ldw	r3,-40(fp)
1000f2b8:	180d883a 	mov	r6,r3
1000f2bc:	100b883a 	mov	r5,r2
1000f2c0:	e13ff417 	ldw	r4,-48(fp)
1000f2c4:	000fe740 	call	1000fe74 <memcpy>
		      fp->_flags = (fp->_flags & ~__SOPT) | __SMBF;
1000f2c8:	80c0030b 	ldhu	r3,12(r16)
1000f2cc:	00bedfc4 	movi	r2,-1153
1000f2d0:	1884703a 	and	r2,r3,r2
1000f2d4:	10802014 	ori	r2,r2,128
1000f2d8:	8080030d 	sth	r2,12(r16)
1000f2dc:	00001506 	br	1000f334 <__sfvwrite_r+0x278>
		    }
		  else
		    {
		      str = (unsigned char *)_realloc_r (ptr, fp->_bf._base,
1000f2e0:	80800417 	ldw	r2,16(r16)
1000f2e4:	e0fff517 	ldw	r3,-44(fp)
1000f2e8:	180d883a 	mov	r6,r3
1000f2ec:	100b883a 	mov	r5,r2
1000f2f0:	e13ff817 	ldw	r4,-32(fp)
1000f2f4:	00081e00 	call	100081e0 <_realloc_r>
1000f2f8:	e0bff415 	stw	r2,-48(fp)
							 newsize);
		      if (!str)
1000f2fc:	e0bff417 	ldw	r2,-48(fp)
1000f300:	10000c1e 	bne	r2,zero,1000f334 <__sfvwrite_r+0x278>
			{
			  /* Free buffer which is no longer used and clear
			     __SMBF flag to avoid double free in fclose.  */
			  _free_r (ptr, fp->_bf._base);
1000f304:	80800417 	ldw	r2,16(r16)
1000f308:	100b883a 	mov	r5,r2
1000f30c:	e13ff817 	ldw	r4,-32(fp)
1000f310:	000e9740 	call	1000e974 <_free_r>
			  fp->_flags &=  ~__SMBF;
1000f314:	80c0030b 	ldhu	r3,12(r16)
1000f318:	00bfdfc4 	movi	r2,-129
1000f31c:	1884703a 	and	r2,r3,r2
1000f320:	8080030d 	sth	r2,12(r16)
			  /* Ensure correct errno, even if free changed it.  */
			  ptr->_errno = ENOMEM;
1000f324:	e0bff817 	ldw	r2,-32(fp)
1000f328:	00c00304 	movi	r3,12
1000f32c:	10c00015 	stw	r3,0(r2)
			  goto err;
1000f330:	0000cc06 	br	1000f664 <__sfvwrite_r+0x5a8>
			}
		    }
		  fp->_bf._base = str;
1000f334:	e0bff417 	ldw	r2,-48(fp)
1000f338:	80800415 	stw	r2,16(r16)
		  fp->_p = str + curpos;
1000f33c:	e0bff617 	ldw	r2,-40(fp)
1000f340:	e0fff417 	ldw	r3,-48(fp)
1000f344:	1885883a 	add	r2,r3,r2
1000f348:	80800015 	stw	r2,0(r16)
		  fp->_bf._size = newsize;
1000f34c:	e0bff517 	ldw	r2,-44(fp)
1000f350:	80800515 	stw	r2,20(r16)
		  w = len;
1000f354:	8825883a 	mov	r18,r17
		  fp->_w = newsize - curpos;
1000f358:	e0fff517 	ldw	r3,-44(fp)
1000f35c:	e0bff617 	ldw	r2,-40(fp)
1000f360:	1885c83a 	sub	r2,r3,r2
1000f364:	80800215 	stw	r2,8(r16)
		}
	      if (len < w)
1000f368:	9005883a 	mov	r2,r18
1000f36c:	8880012e 	bgeu	r17,r2,1000f374 <__sfvwrite_r+0x2b8>
		w = len;
1000f370:	8825883a 	mov	r18,r17
	      COPY (w);		/* copy MIN(fp->_w,len), */
1000f374:	80800017 	ldw	r2,0(r16)
1000f378:	9007883a 	mov	r3,r18
1000f37c:	180d883a 	mov	r6,r3
1000f380:	980b883a 	mov	r5,r19
1000f384:	1009883a 	mov	r4,r2
1000f388:	000fffc0 	call	1000fffc <memmove>
	      fp->_w -= w;
1000f38c:	80800217 	ldw	r2,8(r16)
1000f390:	1485c83a 	sub	r2,r2,r18
1000f394:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000f398:	80800017 	ldw	r2,0(r16)
1000f39c:	9007883a 	mov	r3,r18
1000f3a0:	10c5883a 	add	r2,r2,r3
1000f3a4:	80800015 	stw	r2,0(r16)
	      w = len;		/* but pretend copied all */
1000f3a8:	8825883a 	mov	r18,r17
1000f3ac:	00003806 	br	1000f490 <__sfvwrite_r+0x3d4>
	    }
	  else if (fp->_p > fp->_bf._base || len < fp->_bf._size)
1000f3b0:	80800017 	ldw	r2,0(r16)
1000f3b4:	80c00417 	ldw	r3,16(r16)
1000f3b8:	18800236 	bltu	r3,r2,1000f3c4 <__sfvwrite_r+0x308>
1000f3bc:	80800517 	ldw	r2,20(r16)
1000f3c0:	8880182e 	bgeu	r17,r2,1000f424 <__sfvwrite_r+0x368>
	    {
	      /* pass through the buffer */
	      w = MIN (len, w);
1000f3c4:	9005883a 	mov	r2,r18
1000f3c8:	8880012e 	bgeu	r17,r2,1000f3d0 <__sfvwrite_r+0x314>
1000f3cc:	8805883a 	mov	r2,r17
1000f3d0:	1025883a 	mov	r18,r2
	      COPY (w);
1000f3d4:	80800017 	ldw	r2,0(r16)
1000f3d8:	9007883a 	mov	r3,r18
1000f3dc:	180d883a 	mov	r6,r3
1000f3e0:	980b883a 	mov	r5,r19
1000f3e4:	1009883a 	mov	r4,r2
1000f3e8:	000fffc0 	call	1000fffc <memmove>
	      fp->_w -= w;
1000f3ec:	80800217 	ldw	r2,8(r16)
1000f3f0:	1485c83a 	sub	r2,r2,r18
1000f3f4:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000f3f8:	80800017 	ldw	r2,0(r16)
1000f3fc:	9007883a 	mov	r3,r18
1000f400:	10c5883a 	add	r2,r2,r3
1000f404:	80800015 	stw	r2,0(r16)
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
1000f408:	80800217 	ldw	r2,8(r16)
1000f40c:	10001f1e 	bne	r2,zero,1000f48c <__sfvwrite_r+0x3d0>
1000f410:	800b883a 	mov	r5,r16
1000f414:	e13ff817 	ldw	r4,-32(fp)
1000f418:	000e27c0 	call	1000e27c <_fflush_r>
1000f41c:	10001b26 	beq	r2,zero,1000f48c <__sfvwrite_r+0x3d0>
		goto err;
1000f420:	00009006 	br	1000f664 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
1000f424:	8805883a 	mov	r2,r17
1000f428:	00e00034 	movhi	r3,32768
1000f42c:	10c00236 	bltu	r2,r3,1000f438 <__sfvwrite_r+0x37c>
1000f430:	00a00034 	movhi	r2,32768
1000f434:	10bfffc4 	addi	r2,r2,-1
1000f438:	1007883a 	mov	r3,r2
1000f43c:	80800517 	ldw	r2,20(r16)
1000f440:	100b883a 	mov	r5,r2
1000f444:	1809883a 	mov	r4,r3
1000f448:	00025980 	call	10002598 <__divsi3>
1000f44c:	1007883a 	mov	r3,r2
1000f450:	80800517 	ldw	r2,20(r16)
1000f454:	100b883a 	mov	r5,r2
1000f458:	1809883a 	mov	r4,r3
1000f45c:	00065d80 	call	100065d8 <__mulsi3>
1000f460:	1025883a 	mov	r18,r2
	      w = fp->_write (ptr, fp->_cookie, p, w);
1000f464:	80800917 	ldw	r2,36(r16)
1000f468:	80c00717 	ldw	r3,28(r16)
1000f46c:	900f883a 	mov	r7,r18
1000f470:	980d883a 	mov	r6,r19
1000f474:	180b883a 	mov	r5,r3
1000f478:	e13ff817 	ldw	r4,-32(fp)
1000f47c:	103ee83a 	callr	r2
1000f480:	1025883a 	mov	r18,r2
	      if (w <= 0)
1000f484:	0480740e 	bge	zero,r18,1000f658 <__sfvwrite_r+0x59c>
1000f488:	00000106 	br	1000f490 <__sfvwrite_r+0x3d4>
	      /* pass through the buffer */
	      w = MIN (len, w);
	      COPY (w);
	      fp->_w -= w;
	      fp->_p += w;
	      if (fp->_w == 0 && _fflush_r (ptr, fp))
1000f48c:	0001883a 	nop
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
	    }
	  p += w;
1000f490:	9005883a 	mov	r2,r18
1000f494:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000f498:	9005883a 	mov	r2,r18
1000f49c:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000f4a0:	a8800217 	ldw	r2,8(r21)
1000f4a4:	9007883a 	mov	r3,r18
1000f4a8:	10c5c83a 	sub	r2,r2,r3
1000f4ac:	a8800215 	stw	r2,8(r21)
1000f4b0:	a8800217 	ldw	r2,8(r21)
1000f4b4:	103f4d1e 	bne	r2,zero,1000f1ec <__alt_data_end+0xf800f1ec>
1000f4b8:	00006306 	br	1000f648 <__sfvwrite_r+0x58c>
       * must check for newlines.  Compute the distance
       * to the first newline (including the newline),
       * or `infinity' if there is none, then pretend
       * that the amount to write is MIN(len,nldist).
       */
      nlknown = 0;
1000f4bc:	e03ff215 	stw	zero,-56(fp)
      nldist = 0;
1000f4c0:	e03ff315 	stw	zero,-52(fp)
      do
	{
	  GETIOV (nlknown = 0);
1000f4c4:	00000406 	br	1000f4d8 <__sfvwrite_r+0x41c>
1000f4c8:	e03ff215 	stw	zero,-56(fp)
1000f4cc:	a4c00017 	ldw	r19,0(r20)
1000f4d0:	a4400117 	ldw	r17,4(r20)
1000f4d4:	a5000204 	addi	r20,r20,8
1000f4d8:	883ffb26 	beq	r17,zero,1000f4c8 <__alt_data_end+0xf800f4c8>
	  if (!nlknown)
1000f4dc:	e0bff217 	ldw	r2,-56(fp)
1000f4e0:	1000111e 	bne	r2,zero,1000f528 <__sfvwrite_r+0x46c>
	    {
	      nl = memchr ((_PTR) p, '\n', len);
1000f4e4:	880d883a 	mov	r6,r17
1000f4e8:	01400284 	movi	r5,10
1000f4ec:	9809883a 	mov	r4,r19
1000f4f0:	000fcb80 	call	1000fcb8 <memchr>
1000f4f4:	e0bff715 	stw	r2,-36(fp)
	      nldist = nl ? nl + 1 - p : len + 1;
1000f4f8:	e0bff717 	ldw	r2,-36(fp)
1000f4fc:	10000626 	beq	r2,zero,1000f518 <__sfvwrite_r+0x45c>
1000f500:	e0bff717 	ldw	r2,-36(fp)
1000f504:	10800044 	addi	r2,r2,1
1000f508:	1007883a 	mov	r3,r2
1000f50c:	9805883a 	mov	r2,r19
1000f510:	1885c83a 	sub	r2,r3,r2
1000f514:	00000106 	br	1000f51c <__sfvwrite_r+0x460>
1000f518:	88800044 	addi	r2,r17,1
1000f51c:	e0bff315 	stw	r2,-52(fp)
	      nlknown = 1;
1000f520:	00800044 	movi	r2,1
1000f524:	e0bff215 	stw	r2,-56(fp)
	    }
	  s = MIN (len, nldist);
1000f528:	e0bff317 	ldw	r2,-52(fp)
1000f52c:	8880012e 	bgeu	r17,r2,1000f534 <__sfvwrite_r+0x478>
1000f530:	8805883a 	mov	r2,r17
1000f534:	102d883a 	mov	r22,r2
	  w = fp->_w + fp->_bf._size;
1000f538:	80c00217 	ldw	r3,8(r16)
1000f53c:	80800517 	ldw	r2,20(r16)
1000f540:	18a5883a 	add	r18,r3,r2
	  if (fp->_p > fp->_bf._base && s > w)
1000f544:	80800017 	ldw	r2,0(r16)
1000f548:	80c00417 	ldw	r3,16(r16)
1000f54c:	1880102e 	bgeu	r3,r2,1000f590 <__sfvwrite_r+0x4d4>
1000f550:	95800f0e 	bge	r18,r22,1000f590 <__sfvwrite_r+0x4d4>
	    {
	      COPY (w);
1000f554:	80800017 	ldw	r2,0(r16)
1000f558:	9007883a 	mov	r3,r18
1000f55c:	180d883a 	mov	r6,r3
1000f560:	980b883a 	mov	r5,r19
1000f564:	1009883a 	mov	r4,r2
1000f568:	000fffc0 	call	1000fffc <memmove>
	      /* fp->_w -= w; */
	      fp->_p += w;
1000f56c:	80800017 	ldw	r2,0(r16)
1000f570:	9007883a 	mov	r3,r18
1000f574:	10c5883a 	add	r2,r2,r3
1000f578:	80800015 	stw	r2,0(r16)
	      if (_fflush_r (ptr, fp))
1000f57c:	800b883a 	mov	r5,r16
1000f580:	e13ff817 	ldw	r4,-32(fp)
1000f584:	000e27c0 	call	1000e27c <_fflush_r>
1000f588:	10001b26 	beq	r2,zero,1000f5f8 <__sfvwrite_r+0x53c>
		goto err;
1000f58c:	00003506 	br	1000f664 <__sfvwrite_r+0x5a8>
	    }
	  else if (s >= (w = fp->_bf._size))
1000f590:	84800517 	ldw	r18,20(r16)
1000f594:	b4800a16 	blt	r22,r18,1000f5c0 <__sfvwrite_r+0x504>
	    {
	      w = fp->_write (ptr, fp->_cookie, p, w);
1000f598:	80800917 	ldw	r2,36(r16)
1000f59c:	80c00717 	ldw	r3,28(r16)
1000f5a0:	900f883a 	mov	r7,r18
1000f5a4:	980d883a 	mov	r6,r19
1000f5a8:	180b883a 	mov	r5,r3
1000f5ac:	e13ff817 	ldw	r4,-32(fp)
1000f5b0:	103ee83a 	callr	r2
1000f5b4:	1025883a 	mov	r18,r2
	      if (w <= 0)
1000f5b8:	04800f16 	blt	zero,r18,1000f5f8 <__sfvwrite_r+0x53c>
		goto err;
1000f5bc:	00002906 	br	1000f664 <__sfvwrite_r+0x5a8>
	    }
	  else
	    {
	      w = s;
1000f5c0:	b025883a 	mov	r18,r22
	      COPY (w);
1000f5c4:	80800017 	ldw	r2,0(r16)
1000f5c8:	9007883a 	mov	r3,r18
1000f5cc:	180d883a 	mov	r6,r3
1000f5d0:	980b883a 	mov	r5,r19
1000f5d4:	1009883a 	mov	r4,r2
1000f5d8:	000fffc0 	call	1000fffc <memmove>
	      fp->_w -= w;
1000f5dc:	80800217 	ldw	r2,8(r16)
1000f5e0:	1485c83a 	sub	r2,r2,r18
1000f5e4:	80800215 	stw	r2,8(r16)
	      fp->_p += w;
1000f5e8:	80800017 	ldw	r2,0(r16)
1000f5ec:	9007883a 	mov	r3,r18
1000f5f0:	10c5883a 	add	r2,r2,r3
1000f5f4:	80800015 	stw	r2,0(r16)
	    }
	  if ((nldist -= w) == 0)
1000f5f8:	e0bff317 	ldw	r2,-52(fp)
1000f5fc:	1485c83a 	sub	r2,r2,r18
1000f600:	e0bff315 	stw	r2,-52(fp)
1000f604:	e0bff317 	ldw	r2,-52(fp)
1000f608:	1000051e 	bne	r2,zero,1000f620 <__sfvwrite_r+0x564>
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
1000f60c:	800b883a 	mov	r5,r16
1000f610:	e13ff817 	ldw	r4,-32(fp)
1000f614:	000e27c0 	call	1000e27c <_fflush_r>
1000f618:	1000111e 	bne	r2,zero,1000f660 <__sfvwrite_r+0x5a4>
		goto err;
	      nlknown = 0;
1000f61c:	e03ff215 	stw	zero,-56(fp)
	    }
	  p += w;
1000f620:	9005883a 	mov	r2,r18
1000f624:	98a7883a 	add	r19,r19,r2
	  len -= w;
1000f628:	9005883a 	mov	r2,r18
1000f62c:	88a3c83a 	sub	r17,r17,r2
	}
      while ((uio->uio_resid -= w) != 0);
1000f630:	a8800217 	ldw	r2,8(r21)
1000f634:	9007883a 	mov	r3,r18
1000f638:	10c5c83a 	sub	r2,r2,r3
1000f63c:	a8800215 	stw	r2,8(r21)
1000f640:	a8800217 	ldw	r2,8(r21)
1000f644:	103fa41e 	bne	r2,zero,1000f4d8 <__alt_data_end+0xf800f4d8>
    }
  return 0;
1000f648:	0005883a 	mov	r2,zero
1000f64c:	00000906 	br	1000f674 <__sfvwrite_r+0x5b8>
	{
	  GETIOV (;);
	  w = fp->_write (ptr, fp->_cookie, p,
			  MIN (len, INT_MAX - INT_MAX % BUFSIZ));
	  if (w <= 0)
	    goto err;
1000f650:	0001883a 	nop
1000f654:	00000306 	br	1000f664 <__sfvwrite_r+0x5a8>
	    {
	      /* write directly */
	      w = ((int)MIN (len, INT_MAX)) / fp->_bf._size * fp->_bf._size;
	      w = fp->_write (ptr, fp->_cookie, p, w);
	      if (w <= 0)
		goto err;
1000f658:	0001883a 	nop
1000f65c:	00000106 	br	1000f664 <__sfvwrite_r+0x5a8>
	    }
	  if ((nldist -= w) == 0)
	    {
	      /* copied the newline: flush and forget */
	      if (_fflush_r (ptr, fp))
		goto err;
1000f660:	0001883a 	nop
      while ((uio->uio_resid -= w) != 0);
    }
  return 0;

err:
  fp->_flags |= __SERR;
1000f664:	8080030b 	ldhu	r2,12(r16)
1000f668:	10801014 	ori	r2,r2,64
1000f66c:	8080030d 	sth	r2,12(r16)
  return EOF;
1000f670:	00bfffc4 	movi	r2,-1
}
1000f674:	e6fff904 	addi	sp,fp,-28
1000f678:	dfc00817 	ldw	ra,32(sp)
1000f67c:	df000717 	ldw	fp,28(sp)
1000f680:	dd800617 	ldw	r22,24(sp)
1000f684:	dd400517 	ldw	r21,20(sp)
1000f688:	dd000417 	ldw	r20,16(sp)
1000f68c:	dcc00317 	ldw	r19,12(sp)
1000f690:	dc800217 	ldw	r18,8(sp)
1000f694:	dc400117 	ldw	r17,4(sp)
1000f698:	dc000017 	ldw	r16,0(sp)
1000f69c:	dec00904 	addi	sp,sp,36
1000f6a0:	f800283a 	ret

1000f6a4 <_fwalk>:

int
_DEFUN(_fwalk, (ptr, function),
       struct _reent *ptr _AND
       register int (*function) (FILE *))
{
1000f6a4:	defff804 	addi	sp,sp,-32
1000f6a8:	dfc00715 	stw	ra,28(sp)
1000f6ac:	df000615 	stw	fp,24(sp)
1000f6b0:	dd000515 	stw	r20,20(sp)
1000f6b4:	dcc00415 	stw	r19,16(sp)
1000f6b8:	dc800315 	stw	r18,12(sp)
1000f6bc:	dc400215 	stw	r17,8(sp)
1000f6c0:	dc000115 	stw	r16,4(sp)
1000f6c4:	df000604 	addi	fp,sp,24
1000f6c8:	e13ffa15 	stw	r4,-24(fp)
1000f6cc:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
1000f6d0:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000f6d4:	e0bffa17 	ldw	r2,-24(fp)
1000f6d8:	1440b804 	addi	r17,r2,736
1000f6dc:	00001b06 	br	1000f74c <_fwalk+0xa8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000f6e0:	8c000217 	ldw	r16,8(r17)
1000f6e4:	8c800117 	ldw	r18,4(r17)
1000f6e8:	00001506 	br	1000f740 <_fwalk+0x9c>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
1000f6ec:	8080030b 	ldhu	r2,12(r16)
1000f6f0:	10bfffcc 	andi	r2,r2,65535
1000f6f4:	10a0001c 	xori	r2,r2,32768
1000f6f8:	10a00004 	addi	r2,r2,-32768
1000f6fc:	10000f26 	beq	r2,zero,1000f73c <_fwalk+0x98>
1000f700:	8080030b 	ldhu	r2,12(r16)
1000f704:	10bfffcc 	andi	r2,r2,65535
1000f708:	10a0001c 	xori	r2,r2,32768
1000f70c:	10a00004 	addi	r2,r2,-32768
1000f710:	10800060 	cmpeqi	r2,r2,1
1000f714:	1000091e 	bne	r2,zero,1000f73c <_fwalk+0x98>
1000f718:	8080038b 	ldhu	r2,14(r16)
1000f71c:	10bfffcc 	andi	r2,r2,65535
1000f720:	10a0001c 	xori	r2,r2,32768
1000f724:	10a00004 	addi	r2,r2,-32768
1000f728:	10bfffe0 	cmpeqi	r2,r2,-1
1000f72c:	1000031e 	bne	r2,zero,1000f73c <_fwalk+0x98>
	ret |= (*function) (fp);
1000f730:	8009883a 	mov	r4,r16
1000f734:	a03ee83a 	callr	r20
1000f738:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000f73c:	84001a04 	addi	r16,r16,104
1000f740:	94bfffc4 	addi	r18,r18,-1
1000f744:	903fe90e 	bge	r18,zero,1000f6ec <__alt_data_end+0xf800f6ec>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000f748:	8c400017 	ldw	r17,0(r17)
1000f74c:	883fe41e 	bne	r17,zero,1000f6e0 <__alt_data_end+0xf800f6e0>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*function) (fp);

  return ret;
1000f750:	9805883a 	mov	r2,r19
}
1000f754:	e6fffb04 	addi	sp,fp,-20
1000f758:	dfc00617 	ldw	ra,24(sp)
1000f75c:	df000517 	ldw	fp,20(sp)
1000f760:	dd000417 	ldw	r20,16(sp)
1000f764:	dcc00317 	ldw	r19,12(sp)
1000f768:	dc800217 	ldw	r18,8(sp)
1000f76c:	dc400117 	ldw	r17,4(sp)
1000f770:	dc000017 	ldw	r16,0(sp)
1000f774:	dec00704 	addi	sp,sp,28
1000f778:	f800283a 	ret

1000f77c <_fwalk_reent>:
   I/O function (e.g. _fclose_r).  */
int
_DEFUN(_fwalk_reent, (ptr, reent_function),
       struct _reent *ptr _AND
       register int (*reent_function) (struct _reent *, FILE *))
{
1000f77c:	defff804 	addi	sp,sp,-32
1000f780:	dfc00715 	stw	ra,28(sp)
1000f784:	df000615 	stw	fp,24(sp)
1000f788:	dd000515 	stw	r20,20(sp)
1000f78c:	dcc00415 	stw	r19,16(sp)
1000f790:	dc800315 	stw	r18,12(sp)
1000f794:	dc400215 	stw	r17,8(sp)
1000f798:	dc000115 	stw	r16,4(sp)
1000f79c:	df000604 	addi	fp,sp,24
1000f7a0:	e13ffa15 	stw	r4,-24(fp)
1000f7a4:	2829883a 	mov	r20,r5
  register FILE *fp;
  register int n, ret = 0;
1000f7a8:	0027883a 	mov	r19,zero
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000f7ac:	e0bffa17 	ldw	r2,-24(fp)
1000f7b0:	1440b804 	addi	r17,r2,736
1000f7b4:	00001c06 	br	1000f828 <_fwalk_reent+0xac>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000f7b8:	8c000217 	ldw	r16,8(r17)
1000f7bc:	8c800117 	ldw	r18,4(r17)
1000f7c0:	00001606 	br	1000f81c <_fwalk_reent+0xa0>
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
1000f7c4:	8080030b 	ldhu	r2,12(r16)
1000f7c8:	10bfffcc 	andi	r2,r2,65535
1000f7cc:	10a0001c 	xori	r2,r2,32768
1000f7d0:	10a00004 	addi	r2,r2,-32768
1000f7d4:	10001026 	beq	r2,zero,1000f818 <_fwalk_reent+0x9c>
1000f7d8:	8080030b 	ldhu	r2,12(r16)
1000f7dc:	10bfffcc 	andi	r2,r2,65535
1000f7e0:	10a0001c 	xori	r2,r2,32768
1000f7e4:	10a00004 	addi	r2,r2,-32768
1000f7e8:	10800060 	cmpeqi	r2,r2,1
1000f7ec:	10000a1e 	bne	r2,zero,1000f818 <_fwalk_reent+0x9c>
1000f7f0:	8080038b 	ldhu	r2,14(r16)
1000f7f4:	10bfffcc 	andi	r2,r2,65535
1000f7f8:	10a0001c 	xori	r2,r2,32768
1000f7fc:	10a00004 	addi	r2,r2,-32768
1000f800:	10bfffe0 	cmpeqi	r2,r2,-1
1000f804:	1000041e 	bne	r2,zero,1000f818 <_fwalk_reent+0x9c>
	ret |= (*reent_function) (ptr, fp);
1000f808:	800b883a 	mov	r5,r16
1000f80c:	e13ffa17 	ldw	r4,-24(fp)
1000f810:	a03ee83a 	callr	r20
1000f814:	98a6b03a 	or	r19,r19,r2
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
1000f818:	84001a04 	addi	r16,r16,104
1000f81c:	94bfffc4 	addi	r18,r18,-1
1000f820:	903fe80e 	bge	r18,zero,1000f7c4 <__alt_data_end+0xf800f7c4>
   * removed.
   *
   * Avoid locking this list while walking it or else you will
   * introduce a potential deadlock in [at least] refill.c.
   */
  for (g = &ptr->__sglue; g != NULL; g = g->_next)
1000f824:	8c400017 	ldw	r17,0(r17)
1000f828:	883fe31e 	bne	r17,zero,1000f7b8 <__alt_data_end+0xf800f7b8>
    for (fp = g->_iobs, n = g->_niobs; --n >= 0; fp++)
      if (fp->_flags != 0 && fp->_flags != 1 && fp->_file != -1)
	ret |= (*reent_function) (ptr, fp);

  return ret;
1000f82c:	9805883a 	mov	r2,r19
}
1000f830:	e6fffb04 	addi	sp,fp,-20
1000f834:	dfc00617 	ldw	ra,24(sp)
1000f838:	df000517 	ldw	fp,20(sp)
1000f83c:	dd000417 	ldw	r20,16(sp)
1000f840:	dcc00317 	ldw	r19,12(sp)
1000f844:	dc800217 	ldw	r18,8(sp)
1000f848:	dc400117 	ldw	r17,4(sp)
1000f84c:	dc000017 	ldw	r16,0(sp)
1000f850:	dec00704 	addi	sp,sp,28
1000f854:	f800283a 	ret

1000f858 <_gettimeofday_r>:
int
_DEFUN (_gettimeofday_r, (ptr, ptimeval, ptimezone),
     struct _reent *ptr _AND
     struct timeval *ptimeval _AND
     void *ptimezone)
{
1000f858:	defffa04 	addi	sp,sp,-24
1000f85c:	dfc00515 	stw	ra,20(sp)
1000f860:	df000415 	stw	fp,16(sp)
1000f864:	df000404 	addi	fp,sp,16
1000f868:	e13ffd15 	stw	r4,-12(fp)
1000f86c:	e17ffe15 	stw	r5,-8(fp)
1000f870:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
1000f874:	008403b4 	movhi	r2,4110
1000f878:	108b2104 	addi	r2,r2,11396
1000f87c:	10000015 	stw	zero,0(r2)
  if ((ret = _gettimeofday (ptimeval, ptimezone)) == -1 && errno != 0)
1000f880:	e17fff17 	ldw	r5,-4(fp)
1000f884:	e13ffe17 	ldw	r4,-8(fp)
1000f888:	00159dc0 	call	100159dc <gettimeofday>
1000f88c:	e0bffc15 	stw	r2,-16(fp)
1000f890:	e0bffc17 	ldw	r2,-16(fp)
1000f894:	10bfffd8 	cmpnei	r2,r2,-1
1000f898:	1000091e 	bne	r2,zero,1000f8c0 <_gettimeofday_r+0x68>
1000f89c:	008403b4 	movhi	r2,4110
1000f8a0:	108b2104 	addi	r2,r2,11396
1000f8a4:	10800017 	ldw	r2,0(r2)
1000f8a8:	10000526 	beq	r2,zero,1000f8c0 <_gettimeofday_r+0x68>
    ptr->_errno = errno;
1000f8ac:	008403b4 	movhi	r2,4110
1000f8b0:	108b2104 	addi	r2,r2,11396
1000f8b4:	10c00017 	ldw	r3,0(r2)
1000f8b8:	e0bffd17 	ldw	r2,-12(fp)
1000f8bc:	10c00015 	stw	r3,0(r2)
  return ret;
1000f8c0:	e0bffc17 	ldw	r2,-16(fp)
}
1000f8c4:	e037883a 	mov	sp,fp
1000f8c8:	dfc00117 	ldw	ra,4(sp)
1000f8cc:	df000017 	ldw	fp,0(sp)
1000f8d0:	dec00204 	addi	sp,sp,8
1000f8d4:	f800283a 	ret

1000f8d8 <_setlocale_r>:
char *
_DEFUN(_setlocale_r, (p, category, locale),
       struct _reent *p _AND
       int category _AND
       _CONST char *locale)
{
1000f8d8:	defffb04 	addi	sp,sp,-20
1000f8dc:	dfc00415 	stw	ra,16(sp)
1000f8e0:	df000315 	stw	fp,12(sp)
1000f8e4:	df000304 	addi	fp,sp,12
1000f8e8:	e13ffd15 	stw	r4,-12(fp)
1000f8ec:	e17ffe15 	stw	r5,-8(fp)
1000f8f0:	e1bfff15 	stw	r6,-4(fp)
#ifndef _MB_CAPABLE
  if (locale)
1000f8f4:	e0bfff17 	ldw	r2,-4(fp)
1000f8f8:	10001126 	beq	r2,zero,1000f940 <_setlocale_r+0x68>
    { 
      if (strcmp (locale, "POSIX") && strcmp (locale, "C")
1000f8fc:	01440374 	movhi	r5,4109
1000f900:	297e5e04 	addi	r5,r5,-1672
1000f904:	e13fff17 	ldw	r4,-4(fp)
1000f908:	00125f80 	call	100125f8 <strcmp>
1000f90c:	10000c26 	beq	r2,zero,1000f940 <_setlocale_r+0x68>
1000f910:	01440374 	movhi	r5,4109
1000f914:	297e6004 	addi	r5,r5,-1664
1000f918:	e13fff17 	ldw	r4,-4(fp)
1000f91c:	00125f80 	call	100125f8 <strcmp>
1000f920:	10000726 	beq	r2,zero,1000f940 <_setlocale_r+0x68>
	  && strcmp (locale, ""))
1000f924:	01440374 	movhi	r5,4109
1000f928:	297e5d04 	addi	r5,r5,-1676
1000f92c:	e13fff17 	ldw	r4,-4(fp)
1000f930:	00125f80 	call	100125f8 <strcmp>
1000f934:	10000226 	beq	r2,zero,1000f940 <_setlocale_r+0x68>
        return NULL;
1000f938:	0005883a 	mov	r2,zero
1000f93c:	00000206 	br	1000f948 <_setlocale_r+0x70>
    }
  return "C";
1000f940:	00840374 	movhi	r2,4109
1000f944:	10be6004 	addi	r2,r2,-1664
	  return NULL;
	}
    }
  return currentlocale ();
#endif /* !_MB_CAPABLE */
}
1000f948:	e037883a 	mov	sp,fp
1000f94c:	dfc00117 	ldw	ra,4(sp)
1000f950:	df000017 	ldw	fp,0(sp)
1000f954:	dec00204 	addi	sp,sp,8
1000f958:	f800283a 	ret

1000f95c <__locale_charset>:
}
#endif /* _MB_CAPABLE */

char *
_DEFUN_VOID(__locale_charset)
{
1000f95c:	deffff04 	addi	sp,sp,-4
1000f960:	df000015 	stw	fp,0(sp)
1000f964:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->codeset;
#else
  return lc_ctype_charset;
1000f968:	008403b4 	movhi	r2,4110
1000f96c:	10a02e04 	addi	r2,r2,-32584
#endif
}
1000f970:	e037883a 	mov	sp,fp
1000f974:	df000017 	ldw	fp,0(sp)
1000f978:	dec00104 	addi	sp,sp,4
1000f97c:	f800283a 	ret

1000f980 <__locale_mb_cur_max>:

int
_DEFUN_VOID(__locale_mb_cur_max)
{
1000f980:	deffff04 	addi	sp,sp,-4
1000f984:	df000015 	stw	fp,0(sp)
1000f988:	d839883a 	mov	fp,sp
#if 0//def __HAVE_LOCALE_INFO__
  return __get_current_ctype_locale ()->mb_cur_max[0];
#else
  return __mb_cur_max;
1000f98c:	d0a00f17 	ldw	r2,-32708(gp)
#endif
}
1000f990:	e037883a 	mov	sp,fp
1000f994:	df000017 	ldw	fp,0(sp)
1000f998:	dec00104 	addi	sp,sp,4
1000f99c:	f800283a 	ret

1000f9a0 <__locale_msgcharset>:


char *
_DEFUN_VOID(__locale_msgcharset)
{
1000f9a0:	deffff04 	addi	sp,sp,-4
1000f9a4:	df000015 	stw	fp,0(sp)
1000f9a8:	d839883a 	mov	fp,sp
#ifdef __HAVE_LOCALE_INFO__
  return (char *) __get_current_messages_locale ()->codeset;
#else
  return lc_message_charset;
1000f9ac:	008403b4 	movhi	r2,4110
1000f9b0:	10a03604 	addi	r2,r2,-32552
#endif
}
1000f9b4:	e037883a 	mov	sp,fp
1000f9b8:	df000017 	ldw	fp,0(sp)
1000f9bc:	dec00104 	addi	sp,sp,4
1000f9c0:	f800283a 	ret

1000f9c4 <__locale_cjk_lang>:

int
_DEFUN_VOID(__locale_cjk_lang)
{
1000f9c4:	deffff04 	addi	sp,sp,-4
1000f9c8:	df000015 	stw	fp,0(sp)
1000f9cc:	d839883a 	mov	fp,sp
  return lc_ctype_cjk_lang;
1000f9d0:	d0865b17 	ldw	r2,6508(gp)
}
1000f9d4:	e037883a 	mov	sp,fp
1000f9d8:	df000017 	ldw	fp,0(sp)
1000f9dc:	dec00104 	addi	sp,sp,4
1000f9e0:	f800283a 	ret

1000f9e4 <_localeconv_r>:

struct lconv *
_DEFUN(_localeconv_r, (data), 
      struct _reent *data)
{
1000f9e4:	defffe04 	addi	sp,sp,-8
1000f9e8:	df000115 	stw	fp,4(sp)
1000f9ec:	df000104 	addi	fp,sp,4
1000f9f0:	e13fff15 	stw	r4,-4(fp)
      lconv.int_p_sign_posn = m->p_sign_posn[0];
#endif /* !__HAVE_LOCALE_INFO_EXTENDED__ */
      __mlocale_changed = 0;
    }
#endif /* __HAVE_LOCALE_INFO__ */
  return (struct lconv *) &lconv;
1000f9f4:	008403b4 	movhi	r2,4110
1000f9f8:	10a02004 	addi	r2,r2,-32640
}
1000f9fc:	e037883a 	mov	sp,fp
1000fa00:	df000017 	ldw	fp,0(sp)
1000fa04:	dec00104 	addi	sp,sp,4
1000fa08:	f800283a 	ret

1000fa0c <setlocale>:
   initialization work.  It calls _setlocale_r, though. */
char *
_DEFUN(setlocale, (category, locale),
       int category _AND
       _CONST char *locale)
{
1000fa0c:	defffc04 	addi	sp,sp,-16
1000fa10:	dfc00315 	stw	ra,12(sp)
1000fa14:	df000215 	stw	fp,8(sp)
1000fa18:	df000204 	addi	fp,sp,8
1000fa1c:	e13ffe15 	stw	r4,-8(fp)
1000fa20:	e17fff15 	stw	r5,-4(fp)
  return _setlocale_r (_REENT, category, locale);
1000fa24:	008403b4 	movhi	r2,4110
1000fa28:	10a4cc04 	addi	r2,r2,-27856
1000fa2c:	10800017 	ldw	r2,0(r2)
1000fa30:	e1bfff17 	ldw	r6,-4(fp)
1000fa34:	e17ffe17 	ldw	r5,-8(fp)
1000fa38:	1009883a 	mov	r4,r2
1000fa3c:	000f8d80 	call	1000f8d8 <_setlocale_r>
}
1000fa40:	e037883a 	mov	sp,fp
1000fa44:	dfc00117 	ldw	ra,4(sp)
1000fa48:	df000017 	ldw	fp,0(sp)
1000fa4c:	dec00204 	addi	sp,sp,8
1000fa50:	f800283a 	ret

1000fa54 <localeconv>:
#endif /* __CYGWIN__ */

struct lconv *
_DEFUN_VOID(localeconv)
{
1000fa54:	defffe04 	addi	sp,sp,-8
1000fa58:	dfc00115 	stw	ra,4(sp)
1000fa5c:	df000015 	stw	fp,0(sp)
1000fa60:	d839883a 	mov	fp,sp
  return _localeconv_r (_REENT);
1000fa64:	008403b4 	movhi	r2,4110
1000fa68:	10a4cc04 	addi	r2,r2,-27856
1000fa6c:	10800017 	ldw	r2,0(r2)
1000fa70:	1009883a 	mov	r4,r2
1000fa74:	000f9e40 	call	1000f9e4 <_localeconv_r>
}
1000fa78:	e037883a 	mov	sp,fp
1000fa7c:	dfc00117 	ldw	ra,4(sp)
1000fa80:	df000017 	ldw	fp,0(sp)
1000fa84:	dec00204 	addi	sp,sp,8
1000fa88:	f800283a 	ret

1000fa8c <__smakebuf_r>:

_VOID
_DEFUN(__smakebuf_r, (ptr, fp),
       struct _reent *ptr _AND
       register FILE *fp)
{
1000fa8c:	deffea04 	addi	sp,sp,-88
1000fa90:	dfc01515 	stw	ra,84(sp)
1000fa94:	df001415 	stw	fp,80(sp)
1000fa98:	dcc01315 	stw	r19,76(sp)
1000fa9c:	dc801215 	stw	r18,72(sp)
1000faa0:	dc401115 	stw	r17,68(sp)
1000faa4:	dc001015 	stw	r16,64(sp)
1000faa8:	df001404 	addi	fp,sp,80
1000faac:	e13ffb15 	stw	r4,-20(fp)
1000fab0:	2821883a 	mov	r16,r5
  struct stat64 st;
#else
  struct stat st;
#endif

  if (fp->_flags & __SNBF)
1000fab4:	8080030b 	ldhu	r2,12(r16)
1000fab8:	10bfffcc 	andi	r2,r2,65535
1000fabc:	1080008c 	andi	r2,r2,2
1000fac0:	10000726 	beq	r2,zero,1000fae0 <__smakebuf_r+0x54>
    {
      fp->_bf._base = fp->_p = fp->_nbuf;
1000fac4:	808010c4 	addi	r2,r16,67
1000fac8:	80800015 	stw	r2,0(r16)
1000facc:	80800017 	ldw	r2,0(r16)
1000fad0:	80800415 	stw	r2,16(r16)
      fp->_bf._size = 1;
1000fad4:	00800044 	movi	r2,1
1000fad8:	80800515 	stw	r2,20(r16)
1000fadc:	00006d06 	br	1000fc94 <__smakebuf_r+0x208>
      return;
    }
#ifdef __USE_INTERNAL_STAT64
  if (fp->_file < 0 || _fstat64_r (ptr, fp->_file, &st) < 0)
#else
  if (fp->_file < 0 || _fstat_r (ptr, fp->_file, &st) < 0)
1000fae0:	8080038b 	ldhu	r2,14(r16)
1000fae4:	10bfffcc 	andi	r2,r2,65535
1000fae8:	10a0001c 	xori	r2,r2,32768
1000faec:	10a00004 	addi	r2,r2,-32768
1000faf0:	10000916 	blt	r2,zero,1000fb18 <__smakebuf_r+0x8c>
1000faf4:	8080038b 	ldhu	r2,14(r16)
1000faf8:	10bfffcc 	andi	r2,r2,65535
1000fafc:	10a0001c 	xori	r2,r2,32768
1000fb00:	10a00004 	addi	r2,r2,-32768
1000fb04:	e1bfec04 	addi	r6,fp,-80
1000fb08:	100b883a 	mov	r5,r2
1000fb0c:	e13ffb17 	ldw	r4,-20(fp)
1000fb10:	00143a00 	call	100143a0 <_fstat_r>
1000fb14:	10000c0e 	bge	r2,zero,1000fb48 <__smakebuf_r+0xbc>
#endif
    {
      couldbetty = 0;
1000fb18:	0025883a 	mov	r18,zero
      /* Check if we are be called by asprintf family for initial buffer.  */
      if (fp->_flags & __SMBF)
1000fb1c:	8080030b 	ldhu	r2,12(r16)
1000fb20:	10bfffcc 	andi	r2,r2,65535
1000fb24:	1080200c 	andi	r2,r2,128
1000fb28:	10000226 	beq	r2,zero,1000fb34 <__smakebuf_r+0xa8>
        size = _DEFAULT_ASPRINTF_BUFSIZE;
1000fb2c:	04401004 	movi	r17,64
1000fb30:	00000106 	br	1000fb38 <__smakebuf_r+0xac>
      else
        size = BUFSIZ;
1000fb34:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /* do not try to optimise fseek() */
      fp->_flags |= __SNPT;
1000fb38:	8080030b 	ldhu	r2,12(r16)
1000fb3c:	10820014 	ori	r2,r2,2048
1000fb40:	8080030d 	sth	r2,12(r16)
1000fb44:	00001606 	br	1000fba0 <__smakebuf_r+0x114>
#endif
    }
  else
    {
      couldbetty = (st.st_mode & S_IFMT) == S_IFCHR;
1000fb48:	e0bfed17 	ldw	r2,-76(fp)
1000fb4c:	10bc000c 	andi	r2,r2,61440
1000fb50:	10880020 	cmpeqi	r2,r2,8192
1000fb54:	14803fcc 	andi	r18,r2,255
#ifdef HAVE_BLKSIZE
      size = st.st_blksize <= 0 ? BUFSIZ : st.st_blksize;
#else
      size = BUFSIZ;
1000fb58:	04410004 	movi	r17,1024
#ifdef _FSEEK_OPTIMIZATION
      /*
       * Optimize fseek() only if it is a regular file.
       * (The test for __sseek is mainly paranoia.)
       */
      if ((st.st_mode & S_IFMT) == S_IFREG && fp->_seek == __sseek)
1000fb5c:	e0bfed17 	ldw	r2,-76(fp)
1000fb60:	10fc000c 	andi	r3,r2,61440
1000fb64:	00a00014 	movui	r2,32768
1000fb68:	18800a1e 	bne	r3,r2,1000fb94 <__smakebuf_r+0x108>
1000fb6c:	80c00a17 	ldw	r3,40(r16)
1000fb70:	00840074 	movhi	r2,4097
1000fb74:	10894104 	addi	r2,r2,9476
1000fb78:	1880061e 	bne	r3,r2,1000fb94 <__smakebuf_r+0x108>
	{
	  fp->_flags |= __SOPT;
1000fb7c:	8080030b 	ldhu	r2,12(r16)
1000fb80:	10810014 	ori	r2,r2,1024
1000fb84:	8080030d 	sth	r2,12(r16)
#ifdef HAVE_BLKSIZE
	  fp->_blksize = st.st_blksize;
#else
	  fp->_blksize = 1024;
1000fb88:	00810004 	movi	r2,1024
1000fb8c:	80801315 	stw	r2,76(r16)
1000fb90:	00000306 	br	1000fba0 <__smakebuf_r+0x114>
#endif
	}
      else
	fp->_flags |= __SNPT;
1000fb94:	8080030b 	ldhu	r2,12(r16)
1000fb98:	10820014 	ori	r2,r2,2048
1000fb9c:	8080030d 	sth	r2,12(r16)
#endif
    }

  /* Make unbuffered by default: */			/* AlteraSpecific */
  if (couldbetty && _isatty_r (ptr, fp->_file))		/* AlteraSpecific */
1000fba0:	90001126 	beq	r18,zero,1000fbe8 <__smakebuf_r+0x15c>
1000fba4:	8080038b 	ldhu	r2,14(r16)
1000fba8:	10bfffcc 	andi	r2,r2,65535
1000fbac:	10a0001c 	xori	r2,r2,32768
1000fbb0:	10a00004 	addi	r2,r2,-32768
1000fbb4:	100b883a 	mov	r5,r2
1000fbb8:	e13ffb17 	ldw	r4,-20(fp)
1000fbbc:	00144200 	call	10014420 <_isatty_r>
1000fbc0:	10000926 	beq	r2,zero,1000fbe8 <__smakebuf_r+0x15c>
  {							/* AlteraSpecific */
    fp->_flags |= __SLBF;				/* AlteraSpecific __SLBF == "line buffered */
1000fbc4:	8080030b 	ldhu	r2,12(r16)
1000fbc8:	10800054 	ori	r2,r2,1
1000fbcc:	8080030d 	sth	r2,12(r16)
    fp->_bf._base = fp->_p = fp->_nbuf;			/* AlteraSpecific (see newlib/libc/include/stdio.h) */
1000fbd0:	808010c4 	addi	r2,r16,67
1000fbd4:	80800015 	stw	r2,0(r16)
1000fbd8:	80800017 	ldw	r2,0(r16)
1000fbdc:	80800415 	stw	r2,16(r16)
    fp->_bf._size = 1;					/* AlteraSpecific */
1000fbe0:	00800044 	movi	r2,1
1000fbe4:	80800515 	stw	r2,20(r16)
  }							/* AlteraSpecific */

  if ((p = _malloc_r (ptr, size)) == NULL)
1000fbe8:	880b883a 	mov	r5,r17
1000fbec:	e13ffb17 	ldw	r4,-20(fp)
1000fbf0:	0006fd80 	call	10006fd8 <_malloc_r>
1000fbf4:	1027883a 	mov	r19,r2
1000fbf8:	98000e1e 	bne	r19,zero,1000fc34 <__smakebuf_r+0x1a8>
    {
      if (!(fp->_flags & __SSTR))
1000fbfc:	8080030b 	ldhu	r2,12(r16)
1000fc00:	10bfffcc 	andi	r2,r2,65535
1000fc04:	1080800c 	andi	r2,r2,512
1000fc08:	1000221e 	bne	r2,zero,1000fc94 <__smakebuf_r+0x208>
	{
	  fp->_flags |= __SNBF;
1000fc0c:	8080030b 	ldhu	r2,12(r16)
1000fc10:	10800094 	ori	r2,r2,2
1000fc14:	8080030d 	sth	r2,12(r16)
	  fp->_bf._base = fp->_p = fp->_nbuf;
1000fc18:	808010c4 	addi	r2,r16,67
1000fc1c:	80800015 	stw	r2,0(r16)
1000fc20:	80800017 	ldw	r2,0(r16)
1000fc24:	80800415 	stw	r2,16(r16)
	  fp->_bf._size = 1;
1000fc28:	00800044 	movi	r2,1
1000fc2c:	80800515 	stw	r2,20(r16)
1000fc30:	00001806 	br	1000fc94 <__smakebuf_r+0x208>
	}
    }
  else
    {
      ptr->__cleanup = _cleanup_r;
1000fc34:	e0fffb17 	ldw	r3,-20(fp)
1000fc38:	00840074 	movhi	r2,4097
1000fc3c:	10b9b104 	addi	r2,r2,-6460
1000fc40:	18800f15 	stw	r2,60(r3)
      fp->_flags |= __SMBF;
1000fc44:	8080030b 	ldhu	r2,12(r16)
1000fc48:	10802014 	ori	r2,r2,128
1000fc4c:	8080030d 	sth	r2,12(r16)
      fp->_bf._base = fp->_p = (unsigned char *) p;
1000fc50:	84c00015 	stw	r19,0(r16)
1000fc54:	80800017 	ldw	r2,0(r16)
1000fc58:	80800415 	stw	r2,16(r16)
      fp->_bf._size = size;
1000fc5c:	8805883a 	mov	r2,r17
1000fc60:	80800515 	stw	r2,20(r16)
      if (couldbetty && _isatty_r (ptr, fp->_file))
1000fc64:	90000b26 	beq	r18,zero,1000fc94 <__smakebuf_r+0x208>
1000fc68:	8080038b 	ldhu	r2,14(r16)
1000fc6c:	10bfffcc 	andi	r2,r2,65535
1000fc70:	10a0001c 	xori	r2,r2,32768
1000fc74:	10a00004 	addi	r2,r2,-32768
1000fc78:	100b883a 	mov	r5,r2
1000fc7c:	e13ffb17 	ldw	r4,-20(fp)
1000fc80:	00144200 	call	10014420 <_isatty_r>
1000fc84:	10000326 	beq	r2,zero,1000fc94 <__smakebuf_r+0x208>
	fp->_flags |= __SLBF;
1000fc88:	8080030b 	ldhu	r2,12(r16)
1000fc8c:	10800054 	ori	r2,r2,1
1000fc90:	8080030d 	sth	r2,12(r16)
    }
}
1000fc94:	e6fffc04 	addi	sp,fp,-16
1000fc98:	dfc00517 	ldw	ra,20(sp)
1000fc9c:	df000417 	ldw	fp,16(sp)
1000fca0:	dcc00317 	ldw	r19,12(sp)
1000fca4:	dc800217 	ldw	r18,8(sp)
1000fca8:	dc400117 	ldw	r17,4(sp)
1000fcac:	dc000017 	ldw	r16,0(sp)
1000fcb0:	dec00604 	addi	sp,sp,24
1000fcb4:	f800283a 	ret

1000fcb8 <memchr>:
_PTR
_DEFUN (memchr, (src_void, c, length),
	_CONST _PTR src_void _AND
	int c _AND
	size_t length)
{
1000fcb8:	defff704 	addi	sp,sp,-36
1000fcbc:	df000815 	stw	fp,32(sp)
1000fcc0:	df000804 	addi	fp,sp,32
1000fcc4:	e13ffd15 	stw	r4,-12(fp)
1000fcc8:	e17ffe15 	stw	r5,-8(fp)
1000fccc:	e1bfff15 	stw	r6,-4(fp)
  _CONST unsigned char *src = (_CONST unsigned char *) src_void;
1000fcd0:	e0bffd17 	ldw	r2,-12(fp)
1000fcd4:	e0bff815 	stw	r2,-32(fp)
  unsigned char d = c;
1000fcd8:	e0bffe17 	ldw	r2,-8(fp)
1000fcdc:	e0bffc05 	stb	r2,-16(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
1000fce0:	00001006 	br	1000fd24 <memchr+0x6c>
    {
      if (!length--)
1000fce4:	e0bfff17 	ldw	r2,-4(fp)
1000fce8:	10ffffc4 	addi	r3,r2,-1
1000fcec:	e0ffff15 	stw	r3,-4(fp)
1000fcf0:	1000021e 	bne	r2,zero,1000fcfc <memchr+0x44>
        return NULL;
1000fcf4:	0005883a 	mov	r2,zero
1000fcf8:	00005a06 	br	1000fe64 <memchr+0x1ac>
      if (*src == d)
1000fcfc:	e0bff817 	ldw	r2,-32(fp)
1000fd00:	10800003 	ldbu	r2,0(r2)
1000fd04:	10c03fcc 	andi	r3,r2,255
1000fd08:	e0bffc03 	ldbu	r2,-16(fp)
1000fd0c:	1880021e 	bne	r3,r2,1000fd18 <memchr+0x60>
        return (void *) src;
1000fd10:	e0bff817 	ldw	r2,-32(fp)
1000fd14:	00005306 	br	1000fe64 <memchr+0x1ac>
      src++;
1000fd18:	e0bff817 	ldw	r2,-32(fp)
1000fd1c:	10800044 	addi	r2,r2,1
1000fd20:	e0bff815 	stw	r2,-32(fp)
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  unsigned long *asrc;
  unsigned long  mask;
  unsigned int i;

  while (UNALIGNED (src))
1000fd24:	e0bff817 	ldw	r2,-32(fp)
1000fd28:	108000cc 	andi	r2,r2,3
1000fd2c:	103fed1e 	bne	r2,zero,1000fce4 <__alt_data_end+0xf800fce4>
      if (*src == d)
        return (void *) src;
      src++;
    }

  if (!TOO_SMALL (length))
1000fd30:	e0bfff17 	ldw	r2,-4(fp)
1000fd34:	10800130 	cmpltui	r2,r2,4
1000fd38:	1000451e 	bne	r2,zero,1000fe50 <memchr+0x198>
         performs the bytewise search on word-sized segments if they
         contain the search character, which is detected by XORing
         the word-sized segment with a word-sized block of the search
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
1000fd3c:	e0bff817 	ldw	r2,-32(fp)
1000fd40:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
1000fd44:	e0bffc03 	ldbu	r2,-16(fp)
1000fd48:	1006923a 	slli	r3,r2,8
1000fd4c:	e0bffc03 	ldbu	r2,-16(fp)
1000fd50:	1884b03a 	or	r2,r3,r2
1000fd54:	e0bffa15 	stw	r2,-24(fp)
      mask = mask << 16 | mask;
1000fd58:	e0bffa17 	ldw	r2,-24(fp)
1000fd5c:	1004943a 	slli	r2,r2,16
1000fd60:	e0fffa17 	ldw	r3,-24(fp)
1000fd64:	1884b03a 	or	r2,r3,r2
1000fd68:	e0bffa15 	stw	r2,-24(fp)
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000fd6c:	00800804 	movi	r2,32
1000fd70:	e0bffb15 	stw	r2,-20(fp)
1000fd74:	00000906 	br	1000fd9c <memchr+0xe4>
        mask = (mask << i) | mask;
1000fd78:	e0fffa17 	ldw	r3,-24(fp)
1000fd7c:	e0bffb17 	ldw	r2,-20(fp)
1000fd80:	1884983a 	sll	r2,r3,r2
1000fd84:	e0fffa17 	ldw	r3,-24(fp)
1000fd88:	1884b03a 	or	r2,r3,r2
1000fd8c:	e0bffa15 	stw	r2,-24(fp)
         character and then detecting for the presence of NUL in the
         result.  */
      asrc = (unsigned long *) src;
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
1000fd90:	e0bffb17 	ldw	r2,-20(fp)
1000fd94:	1085883a 	add	r2,r2,r2
1000fd98:	e0bffb15 	stw	r2,-20(fp)
1000fd9c:	e0bffb17 	ldw	r2,-20(fp)
1000fda0:	10800830 	cmpltui	r2,r2,32
1000fda4:	103ff41e 	bne	r2,zero,1000fd78 <__alt_data_end+0xf800fd78>
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
1000fda8:	00001706 	br	1000fe08 <memchr+0x150>
        {
          if (DETECTCHAR (*asrc, mask))
1000fdac:	e0bff917 	ldw	r2,-28(fp)
1000fdb0:	10c00017 	ldw	r3,0(r2)
1000fdb4:	e0bffa17 	ldw	r2,-24(fp)
1000fdb8:	1886f03a 	xor	r3,r3,r2
1000fdbc:	00bfbff4 	movhi	r2,65279
1000fdc0:	10bfbfc4 	addi	r2,r2,-257
1000fdc4:	1887883a 	add	r3,r3,r2
1000fdc8:	e0bff917 	ldw	r2,-28(fp)
1000fdcc:	11000017 	ldw	r4,0(r2)
1000fdd0:	e0bffa17 	ldw	r2,-24(fp)
1000fdd4:	2084f03a 	xor	r2,r4,r2
1000fdd8:	0084303a 	nor	r2,zero,r2
1000fddc:	1886703a 	and	r3,r3,r2
1000fde0:	00a02074 	movhi	r2,32897
1000fde4:	10a02004 	addi	r2,r2,-32640
1000fde8:	1884703a 	and	r2,r3,r2
1000fdec:	10000a1e 	bne	r2,zero,1000fe18 <memchr+0x160>
            break;
          length -= LBLOCKSIZE;
1000fdf0:	e0bfff17 	ldw	r2,-4(fp)
1000fdf4:	10bfff04 	addi	r2,r2,-4
1000fdf8:	e0bfff15 	stw	r2,-4(fp)
          asrc++;
1000fdfc:	e0bff917 	ldw	r2,-28(fp)
1000fe00:	10800104 	addi	r2,r2,4
1000fe04:	e0bff915 	stw	r2,-28(fp)
      mask = d << 8 | d;
      mask = mask << 16 | mask;
      for (i = 32; i < LBLOCKSIZE * 8; i <<= 1)
        mask = (mask << i) | mask;

      while (length >= LBLOCKSIZE)
1000fe08:	e0bfff17 	ldw	r2,-4(fp)
1000fe0c:	10800128 	cmpgeui	r2,r2,4
1000fe10:	103fe61e 	bne	r2,zero,1000fdac <__alt_data_end+0xf800fdac>
1000fe14:	00000106 	br	1000fe1c <memchr+0x164>
        {
          if (DETECTCHAR (*asrc, mask))
            break;
1000fe18:	0001883a 	nop
        }

      /* If there are fewer than LBLOCKSIZE characters left,
         then we resort to the bytewise loop.  */

      src = (unsigned char *) asrc;
1000fe1c:	e0bff917 	ldw	r2,-28(fp)
1000fe20:	e0bff815 	stw	r2,-32(fp)
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
1000fe24:	00000a06 	br	1000fe50 <memchr+0x198>
    {
      if (*src == d)
1000fe28:	e0bff817 	ldw	r2,-32(fp)
1000fe2c:	10800003 	ldbu	r2,0(r2)
1000fe30:	10c03fcc 	andi	r3,r2,255
1000fe34:	e0bffc03 	ldbu	r2,-16(fp)
1000fe38:	1880021e 	bne	r3,r2,1000fe44 <memchr+0x18c>
        return (void *) src;
1000fe3c:	e0bff817 	ldw	r2,-32(fp)
1000fe40:	00000806 	br	1000fe64 <memchr+0x1ac>
      src++;
1000fe44:	e0bff817 	ldw	r2,-32(fp)
1000fe48:	10800044 	addi	r2,r2,1
1000fe4c:	e0bff815 	stw	r2,-32(fp)
      src = (unsigned char *) asrc;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (length--)
1000fe50:	e0bfff17 	ldw	r2,-4(fp)
1000fe54:	10ffffc4 	addi	r3,r2,-1
1000fe58:	e0ffff15 	stw	r3,-4(fp)
1000fe5c:	103ff21e 	bne	r2,zero,1000fe28 <__alt_data_end+0xf800fe28>
      if (*src == d)
        return (void *) src;
      src++;
    }

  return NULL;
1000fe60:	0005883a 	mov	r2,zero
}
1000fe64:	e037883a 	mov	sp,fp
1000fe68:	df000017 	ldw	fp,0(sp)
1000fe6c:	dec00104 	addi	sp,sp,4
1000fe70:	f800283a 	ret

1000fe74 <memcpy>:
_PTR
_DEFUN (memcpy, (dst0, src0, len0),
	_PTR __restrict dst0 _AND
	_CONST _PTR __restrict src0 _AND
	size_t len0)
{
1000fe74:	defff804 	addi	sp,sp,-32
1000fe78:	df000715 	stw	fp,28(sp)
1000fe7c:	df000704 	addi	fp,sp,28
1000fe80:	e13ffd15 	stw	r4,-12(fp)
1000fe84:	e17ffe15 	stw	r5,-8(fp)
1000fe88:	e1bfff15 	stw	r6,-4(fp)
      *dst++ = *src++;
    }

  return save;
#else
  char *dst = dst0;
1000fe8c:	e0bffd17 	ldw	r2,-12(fp)
1000fe90:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src0;
1000fe94:	e0bffe17 	ldw	r2,-8(fp)
1000fe98:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  /* If the size is small, or either SRC or DST is unaligned,
     then punt into the byte copy loop.  This should be rare.  */
  if (!TOO_SMALL(len0) && !UNALIGNED (src, dst))
1000fe9c:	e0bfff17 	ldw	r2,-4(fp)
1000fea0:	10800430 	cmpltui	r2,r2,16
1000fea4:	10004c1e 	bne	r2,zero,1000ffd8 <memcpy+0x164>
1000fea8:	e0fffa17 	ldw	r3,-24(fp)
1000feac:	e0bff917 	ldw	r2,-28(fp)
1000feb0:	1884b03a 	or	r2,r3,r2
1000feb4:	108000cc 	andi	r2,r2,3
1000feb8:	1000471e 	bne	r2,zero,1000ffd8 <memcpy+0x164>
    {
      aligned_dst = (long*)dst;
1000febc:	e0bff917 	ldw	r2,-28(fp)
1000fec0:	e0bffb15 	stw	r2,-20(fp)
      aligned_src = (long*)src;
1000fec4:	e0bffa17 	ldw	r2,-24(fp)
1000fec8:	e0bffc15 	stw	r2,-16(fp)

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
1000fecc:	00002306 	br	1000ff5c <memcpy+0xe8>
        {
          *aligned_dst++ = *aligned_src++;
1000fed0:	e0bffb17 	ldw	r2,-20(fp)
1000fed4:	10c00104 	addi	r3,r2,4
1000fed8:	e0fffb15 	stw	r3,-20(fp)
1000fedc:	e0fffc17 	ldw	r3,-16(fp)
1000fee0:	19000104 	addi	r4,r3,4
1000fee4:	e13ffc15 	stw	r4,-16(fp)
1000fee8:	18c00017 	ldw	r3,0(r3)
1000feec:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000fef0:	e0bffb17 	ldw	r2,-20(fp)
1000fef4:	10c00104 	addi	r3,r2,4
1000fef8:	e0fffb15 	stw	r3,-20(fp)
1000fefc:	e0fffc17 	ldw	r3,-16(fp)
1000ff00:	19000104 	addi	r4,r3,4
1000ff04:	e13ffc15 	stw	r4,-16(fp)
1000ff08:	18c00017 	ldw	r3,0(r3)
1000ff0c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000ff10:	e0bffb17 	ldw	r2,-20(fp)
1000ff14:	10c00104 	addi	r3,r2,4
1000ff18:	e0fffb15 	stw	r3,-20(fp)
1000ff1c:	e0fffc17 	ldw	r3,-16(fp)
1000ff20:	19000104 	addi	r4,r3,4
1000ff24:	e13ffc15 	stw	r4,-16(fp)
1000ff28:	18c00017 	ldw	r3,0(r3)
1000ff2c:	10c00015 	stw	r3,0(r2)
          *aligned_dst++ = *aligned_src++;
1000ff30:	e0bffb17 	ldw	r2,-20(fp)
1000ff34:	10c00104 	addi	r3,r2,4
1000ff38:	e0fffb15 	stw	r3,-20(fp)
1000ff3c:	e0fffc17 	ldw	r3,-16(fp)
1000ff40:	19000104 	addi	r4,r3,4
1000ff44:	e13ffc15 	stw	r4,-16(fp)
1000ff48:	18c00017 	ldw	r3,0(r3)
1000ff4c:	10c00015 	stw	r3,0(r2)
          len0 -= BIGBLOCKSIZE;
1000ff50:	e0bfff17 	ldw	r2,-4(fp)
1000ff54:	10bffc04 	addi	r2,r2,-16
1000ff58:	e0bfff15 	stw	r2,-4(fp)
    {
      aligned_dst = (long*)dst;
      aligned_src = (long*)src;

      /* Copy 4X long words at a time if possible.  */
      while (len0 >= BIGBLOCKSIZE)
1000ff5c:	e0bfff17 	ldw	r2,-4(fp)
1000ff60:	10800428 	cmpgeui	r2,r2,16
1000ff64:	103fda1e 	bne	r2,zero,1000fed0 <__alt_data_end+0xf800fed0>
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
1000ff68:	00000b06 	br	1000ff98 <memcpy+0x124>
        {
          *aligned_dst++ = *aligned_src++;
1000ff6c:	e0bffb17 	ldw	r2,-20(fp)
1000ff70:	10c00104 	addi	r3,r2,4
1000ff74:	e0fffb15 	stw	r3,-20(fp)
1000ff78:	e0fffc17 	ldw	r3,-16(fp)
1000ff7c:	19000104 	addi	r4,r3,4
1000ff80:	e13ffc15 	stw	r4,-16(fp)
1000ff84:	18c00017 	ldw	r3,0(r3)
1000ff88:	10c00015 	stw	r3,0(r2)
          len0 -= LITTLEBLOCKSIZE;
1000ff8c:	e0bfff17 	ldw	r2,-4(fp)
1000ff90:	10bfff04 	addi	r2,r2,-4
1000ff94:	e0bfff15 	stw	r2,-4(fp)
          *aligned_dst++ = *aligned_src++;
          len0 -= BIGBLOCKSIZE;
        }

      /* Copy one long word at a time if possible.  */
      while (len0 >= LITTLEBLOCKSIZE)
1000ff98:	e0bfff17 	ldw	r2,-4(fp)
1000ff9c:	10800128 	cmpgeui	r2,r2,4
1000ffa0:	103ff21e 	bne	r2,zero,1000ff6c <__alt_data_end+0xf800ff6c>
          *aligned_dst++ = *aligned_src++;
          len0 -= LITTLEBLOCKSIZE;
        }

       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
1000ffa4:	e0bffb17 	ldw	r2,-20(fp)
1000ffa8:	e0bff915 	stw	r2,-28(fp)
      src = (char*)aligned_src;
1000ffac:	e0bffc17 	ldw	r2,-16(fp)
1000ffb0:	e0bffa15 	stw	r2,-24(fp)
    }

  while (len0--)
1000ffb4:	00000806 	br	1000ffd8 <memcpy+0x164>
    *dst++ = *src++;
1000ffb8:	e0bff917 	ldw	r2,-28(fp)
1000ffbc:	10c00044 	addi	r3,r2,1
1000ffc0:	e0fff915 	stw	r3,-28(fp)
1000ffc4:	e0fffa17 	ldw	r3,-24(fp)
1000ffc8:	19000044 	addi	r4,r3,1
1000ffcc:	e13ffa15 	stw	r4,-24(fp)
1000ffd0:	18c00003 	ldbu	r3,0(r3)
1000ffd4:	10c00005 	stb	r3,0(r2)
       /* Pick up any residual with a byte copier.  */
      dst = (char*)aligned_dst;
      src = (char*)aligned_src;
    }

  while (len0--)
1000ffd8:	e0bfff17 	ldw	r2,-4(fp)
1000ffdc:	10ffffc4 	addi	r3,r2,-1
1000ffe0:	e0ffff15 	stw	r3,-4(fp)
1000ffe4:	103ff41e 	bne	r2,zero,1000ffb8 <__alt_data_end+0xf800ffb8>
    *dst++ = *src++;

  return dst0;
1000ffe8:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1000ffec:	e037883a 	mov	sp,fp
1000fff0:	df000017 	ldw	fp,0(sp)
1000fff4:	dec00104 	addi	sp,sp,4
1000fff8:	f800283a 	ret

1000fffc <memmove>:
__inhibit_loop_to_libcall
_DEFUN (memmove, (dst_void, src_void, length),
	_PTR dst_void _AND
	_CONST _PTR src_void _AND
	size_t length)
{
1000fffc:	defff804 	addi	sp,sp,-32
10010000:	df000715 	stw	fp,28(sp)
10010004:	df000704 	addi	fp,sp,28
10010008:	e13ffd15 	stw	r4,-12(fp)
1001000c:	e17ffe15 	stw	r5,-8(fp)
10010010:	e1bfff15 	stw	r6,-4(fp)
	}
    }

  return dst_void;
#else
  char *dst = dst_void;
10010014:	e0bffd17 	ldw	r2,-12(fp)
10010018:	e0bff915 	stw	r2,-28(fp)
  _CONST char *src = src_void;
1001001c:	e0bffe17 	ldw	r2,-8(fp)
10010020:	e0bffa15 	stw	r2,-24(fp)
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
10010024:	e0fffa17 	ldw	r3,-24(fp)
10010028:	e0bff917 	ldw	r2,-28(fp)
1001002c:	18801d2e 	bgeu	r3,r2,100100a4 <memmove+0xa8>
10010030:	e0fffa17 	ldw	r3,-24(fp)
10010034:	e0bfff17 	ldw	r2,-4(fp)
10010038:	1885883a 	add	r2,r3,r2
1001003c:	e0fff917 	ldw	r3,-28(fp)
10010040:	1880182e 	bgeu	r3,r2,100100a4 <memmove+0xa8>
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
10010044:	e0fffa17 	ldw	r3,-24(fp)
10010048:	e0bfff17 	ldw	r2,-4(fp)
1001004c:	1885883a 	add	r2,r3,r2
10010050:	e0bffa15 	stw	r2,-24(fp)
      dst += length;
10010054:	e0fff917 	ldw	r3,-28(fp)
10010058:	e0bfff17 	ldw	r2,-4(fp)
1001005c:	1885883a 	add	r2,r3,r2
10010060:	e0bff915 	stw	r2,-28(fp)
      while (length--)
10010064:	00000a06 	br	10010090 <memmove+0x94>
	{
	  *--dst = *--src;
10010068:	e0bff917 	ldw	r2,-28(fp)
1001006c:	10bfffc4 	addi	r2,r2,-1
10010070:	e0bff915 	stw	r2,-28(fp)
10010074:	e0bffa17 	ldw	r2,-24(fp)
10010078:	10bfffc4 	addi	r2,r2,-1
1001007c:	e0bffa15 	stw	r2,-24(fp)
10010080:	e0bffa17 	ldw	r2,-24(fp)
10010084:	10c00003 	ldbu	r3,0(r2)
10010088:	e0bff917 	ldw	r2,-28(fp)
1001008c:	10c00005 	stb	r3,0(r2)
  if (src < dst && dst < src + length)
    {
      /* Destructive overlap...have to copy backwards */
      src += length;
      dst += length;
      while (length--)
10010090:	e0bfff17 	ldw	r2,-4(fp)
10010094:	10ffffc4 	addi	r3,r2,-1
10010098:	e0ffff15 	stw	r3,-4(fp)
1001009c:	103ff21e 	bne	r2,zero,10010068 <__alt_data_end+0xf8010068>
  char *dst = dst_void;
  _CONST char *src = src_void;
  long *aligned_dst;
  _CONST long *aligned_src;

  if (src < dst && dst < src + length)
100100a0:	00005306 	br	100101f0 <memmove+0x1f4>
  else
    {
      /* Use optimizing algorithm for a non-destructive copy to closely 
         match memcpy. If the size is small or either SRC or DST is unaligned,
         then punt into the byte copy loop.  This should be rare.  */
      if (!TOO_SMALL(length) && !UNALIGNED (src, dst))
100100a4:	e0bfff17 	ldw	r2,-4(fp)
100100a8:	10800430 	cmpltui	r2,r2,16
100100ac:	10004c1e 	bne	r2,zero,100101e0 <memmove+0x1e4>
100100b0:	e0fffa17 	ldw	r3,-24(fp)
100100b4:	e0bff917 	ldw	r2,-28(fp)
100100b8:	1884b03a 	or	r2,r3,r2
100100bc:	108000cc 	andi	r2,r2,3
100100c0:	1000471e 	bne	r2,zero,100101e0 <memmove+0x1e4>
        {
          aligned_dst = (long*)dst;
100100c4:	e0bff917 	ldw	r2,-28(fp)
100100c8:	e0bffb15 	stw	r2,-20(fp)
          aligned_src = (long*)src;
100100cc:	e0bffa17 	ldw	r2,-24(fp)
100100d0:	e0bffc15 	stw	r2,-16(fp)

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
100100d4:	00002306 	br	10010164 <memmove+0x168>
            {
              *aligned_dst++ = *aligned_src++;
100100d8:	e0bffb17 	ldw	r2,-20(fp)
100100dc:	10c00104 	addi	r3,r2,4
100100e0:	e0fffb15 	stw	r3,-20(fp)
100100e4:	e0fffc17 	ldw	r3,-16(fp)
100100e8:	19000104 	addi	r4,r3,4
100100ec:	e13ffc15 	stw	r4,-16(fp)
100100f0:	18c00017 	ldw	r3,0(r3)
100100f4:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
100100f8:	e0bffb17 	ldw	r2,-20(fp)
100100fc:	10c00104 	addi	r3,r2,4
10010100:	e0fffb15 	stw	r3,-20(fp)
10010104:	e0fffc17 	ldw	r3,-16(fp)
10010108:	19000104 	addi	r4,r3,4
1001010c:	e13ffc15 	stw	r4,-16(fp)
10010110:	18c00017 	ldw	r3,0(r3)
10010114:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
10010118:	e0bffb17 	ldw	r2,-20(fp)
1001011c:	10c00104 	addi	r3,r2,4
10010120:	e0fffb15 	stw	r3,-20(fp)
10010124:	e0fffc17 	ldw	r3,-16(fp)
10010128:	19000104 	addi	r4,r3,4
1001012c:	e13ffc15 	stw	r4,-16(fp)
10010130:	18c00017 	ldw	r3,0(r3)
10010134:	10c00015 	stw	r3,0(r2)
              *aligned_dst++ = *aligned_src++;
10010138:	e0bffb17 	ldw	r2,-20(fp)
1001013c:	10c00104 	addi	r3,r2,4
10010140:	e0fffb15 	stw	r3,-20(fp)
10010144:	e0fffc17 	ldw	r3,-16(fp)
10010148:	19000104 	addi	r4,r3,4
1001014c:	e13ffc15 	stw	r4,-16(fp)
10010150:	18c00017 	ldw	r3,0(r3)
10010154:	10c00015 	stw	r3,0(r2)
              length -= BIGBLOCKSIZE;
10010158:	e0bfff17 	ldw	r2,-4(fp)
1001015c:	10bffc04 	addi	r2,r2,-16
10010160:	e0bfff15 	stw	r2,-4(fp)
        {
          aligned_dst = (long*)dst;
          aligned_src = (long*)src;

          /* Copy 4X long words at a time if possible.  */
          while (length >= BIGBLOCKSIZE)
10010164:	e0bfff17 	ldw	r2,-4(fp)
10010168:	10800428 	cmpgeui	r2,r2,16
1001016c:	103fda1e 	bne	r2,zero,100100d8 <__alt_data_end+0xf80100d8>
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
10010170:	00000b06 	br	100101a0 <memmove+0x1a4>
            {
              *aligned_dst++ = *aligned_src++;
10010174:	e0bffb17 	ldw	r2,-20(fp)
10010178:	10c00104 	addi	r3,r2,4
1001017c:	e0fffb15 	stw	r3,-20(fp)
10010180:	e0fffc17 	ldw	r3,-16(fp)
10010184:	19000104 	addi	r4,r3,4
10010188:	e13ffc15 	stw	r4,-16(fp)
1001018c:	18c00017 	ldw	r3,0(r3)
10010190:	10c00015 	stw	r3,0(r2)
              length -= LITTLEBLOCKSIZE;
10010194:	e0bfff17 	ldw	r2,-4(fp)
10010198:	10bfff04 	addi	r2,r2,-4
1001019c:	e0bfff15 	stw	r2,-4(fp)
              *aligned_dst++ = *aligned_src++;
              length -= BIGBLOCKSIZE;
            }

          /* Copy one long word at a time if possible.  */
          while (length >= LITTLEBLOCKSIZE)
100101a0:	e0bfff17 	ldw	r2,-4(fp)
100101a4:	10800128 	cmpgeui	r2,r2,4
100101a8:	103ff21e 	bne	r2,zero,10010174 <__alt_data_end+0xf8010174>
              *aligned_dst++ = *aligned_src++;
              length -= LITTLEBLOCKSIZE;
            }

          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
100101ac:	e0bffb17 	ldw	r2,-20(fp)
100101b0:	e0bff915 	stw	r2,-28(fp)
          src = (char*)aligned_src;
100101b4:	e0bffc17 	ldw	r2,-16(fp)
100101b8:	e0bffa15 	stw	r2,-24(fp)
        }

      while (length--)
100101bc:	00000806 	br	100101e0 <memmove+0x1e4>
        {
          *dst++ = *src++;
100101c0:	e0bff917 	ldw	r2,-28(fp)
100101c4:	10c00044 	addi	r3,r2,1
100101c8:	e0fff915 	stw	r3,-28(fp)
100101cc:	e0fffa17 	ldw	r3,-24(fp)
100101d0:	19000044 	addi	r4,r3,1
100101d4:	e13ffa15 	stw	r4,-24(fp)
100101d8:	18c00003 	ldbu	r3,0(r3)
100101dc:	10c00005 	stb	r3,0(r2)
          /* Pick up any residual with a byte copier.  */
          dst = (char*)aligned_dst;
          src = (char*)aligned_src;
        }

      while (length--)
100101e0:	e0bfff17 	ldw	r2,-4(fp)
100101e4:	10ffffc4 	addi	r3,r2,-1
100101e8:	e0ffff15 	stw	r3,-4(fp)
100101ec:	103ff41e 	bne	r2,zero,100101c0 <__alt_data_end+0xf80101c0>
        {
          *dst++ = *src++;
        }
    }

  return dst_void;
100101f0:	e0bffd17 	ldw	r2,-12(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
100101f4:	e037883a 	mov	sp,fp
100101f8:	df000017 	ldw	fp,0(sp)
100101fc:	dec00104 	addi	sp,sp,4
10010200:	f800283a 	ret

10010204 <_Balloc>:
#define _Kmax 15
*/

_Bigint *
_DEFUN (Balloc, (ptr, k), struct _reent *ptr _AND int k)
{
10010204:	defffa04 	addi	sp,sp,-24
10010208:	dfc00515 	stw	ra,20(sp)
1001020c:	df000415 	stw	fp,16(sp)
10010210:	df000404 	addi	fp,sp,16
10010214:	e13ffe15 	stw	r4,-8(fp)
10010218:	e17fff15 	stw	r5,-4(fp)
  int x;
  _Bigint *rv ;

  _REENT_CHECK_MP(ptr);
  if (_REENT_MP_FREELIST(ptr) == NULL)
1001021c:	e0bffe17 	ldw	r2,-8(fp)
10010220:	10801317 	ldw	r2,76(r2)
10010224:	10000c1e 	bne	r2,zero,10010258 <_Balloc+0x54>
    {
      /* Allocate a list of pointers to the mprec objects */
      _REENT_MP_FREELIST(ptr) = (struct _Bigint **) _calloc_r (ptr, 
10010228:	01800844 	movi	r6,33
1001022c:	01400104 	movi	r5,4
10010230:	e13ffe17 	ldw	r4,-8(fp)
10010234:	00066c00 	call	100066c0 <_calloc_r>
10010238:	1007883a 	mov	r3,r2
1001023c:	e0bffe17 	ldw	r2,-8(fp)
10010240:	10c01315 	stw	r3,76(r2)
						      sizeof (struct _Bigint *),
						      _Kmax + 1);
      if (_REENT_MP_FREELIST(ptr) == NULL)
10010244:	e0bffe17 	ldw	r2,-8(fp)
10010248:	10801317 	ldw	r2,76(r2)
1001024c:	1000021e 	bne	r2,zero,10010258 <_Balloc+0x54>
	{
	  return NULL;
10010250:	0005883a 	mov	r2,zero
10010254:	00003206 	br	10010320 <_Balloc+0x11c>
	}
    }

  if ((rv = _REENT_MP_FREELIST(ptr)[k]) != 0)
10010258:	e0bffe17 	ldw	r2,-8(fp)
1001025c:	10c01317 	ldw	r3,76(r2)
10010260:	e0bfff17 	ldw	r2,-4(fp)
10010264:	1085883a 	add	r2,r2,r2
10010268:	1085883a 	add	r2,r2,r2
1001026c:	1885883a 	add	r2,r3,r2
10010270:	10800017 	ldw	r2,0(r2)
10010274:	e0bffc15 	stw	r2,-16(fp)
10010278:	e0bffc17 	ldw	r2,-16(fp)
1001027c:	10000a26 	beq	r2,zero,100102a8 <_Balloc+0xa4>
    {
      _REENT_MP_FREELIST(ptr)[k] = rv->_next;
10010280:	e0bffe17 	ldw	r2,-8(fp)
10010284:	10c01317 	ldw	r3,76(r2)
10010288:	e0bfff17 	ldw	r2,-4(fp)
1001028c:	1085883a 	add	r2,r2,r2
10010290:	1085883a 	add	r2,r2,r2
10010294:	1885883a 	add	r2,r3,r2
10010298:	e0fffc17 	ldw	r3,-16(fp)
1001029c:	18c00017 	ldw	r3,0(r3)
100102a0:	10c00015 	stw	r3,0(r2)
100102a4:	00001706 	br	10010304 <_Balloc+0x100>
    }
  else
    {
      x = 1 << k;
100102a8:	00c00044 	movi	r3,1
100102ac:	e0bfff17 	ldw	r2,-4(fp)
100102b0:	1884983a 	sll	r2,r3,r2
100102b4:	e0bffd15 	stw	r2,-12(fp)
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
				  1,
				  sizeof (_Bigint) +
100102b8:	e0bffd17 	ldw	r2,-12(fp)
    }
  else
    {
      x = 1 << k;
      /* Allocate an mprec Bigint and stick in in the freelist */
      rv = (_Bigint *) _calloc_r (ptr,
100102bc:	10800144 	addi	r2,r2,5
100102c0:	1085883a 	add	r2,r2,r2
100102c4:	1085883a 	add	r2,r2,r2
100102c8:	100d883a 	mov	r6,r2
100102cc:	01400044 	movi	r5,1
100102d0:	e13ffe17 	ldw	r4,-8(fp)
100102d4:	00066c00 	call	100066c0 <_calloc_r>
100102d8:	e0bffc15 	stw	r2,-16(fp)
				  1,
				  sizeof (_Bigint) +
				  (x-1) * sizeof(rv->_x));
      if (rv == NULL) return NULL;
100102dc:	e0bffc17 	ldw	r2,-16(fp)
100102e0:	1000021e 	bne	r2,zero,100102ec <_Balloc+0xe8>
100102e4:	0005883a 	mov	r2,zero
100102e8:	00000d06 	br	10010320 <_Balloc+0x11c>
      rv->_k = k;
100102ec:	e0bffc17 	ldw	r2,-16(fp)
100102f0:	e0ffff17 	ldw	r3,-4(fp)
100102f4:	10c00115 	stw	r3,4(r2)
      rv->_maxwds = x;
100102f8:	e0bffc17 	ldw	r2,-16(fp)
100102fc:	e0fffd17 	ldw	r3,-12(fp)
10010300:	10c00215 	stw	r3,8(r2)
    }
  rv->_sign = rv->_wds = 0;
10010304:	e0bffc17 	ldw	r2,-16(fp)
10010308:	10000415 	stw	zero,16(r2)
1001030c:	e0bffc17 	ldw	r2,-16(fp)
10010310:	10c00417 	ldw	r3,16(r2)
10010314:	e0bffc17 	ldw	r2,-16(fp)
10010318:	10c00315 	stw	r3,12(r2)
  return rv;
1001031c:	e0bffc17 	ldw	r2,-16(fp)
}
10010320:	e037883a 	mov	sp,fp
10010324:	dfc00117 	ldw	ra,4(sp)
10010328:	df000017 	ldw	fp,0(sp)
1001032c:	dec00204 	addi	sp,sp,8
10010330:	f800283a 	ret

10010334 <_Bfree>:

void
_DEFUN (Bfree, (ptr, v), struct _reent *ptr _AND _Bigint * v)
{
10010334:	defffd04 	addi	sp,sp,-12
10010338:	df000215 	stw	fp,8(sp)
1001033c:	df000204 	addi	fp,sp,8
10010340:	e13ffe15 	stw	r4,-8(fp)
10010344:	e17fff15 	stw	r5,-4(fp)
  _REENT_CHECK_MP(ptr);
  if (v)
10010348:	e0bfff17 	ldw	r2,-4(fp)
1001034c:	10001326 	beq	r2,zero,1001039c <_Bfree+0x68>
    {
      v->_next = _REENT_MP_FREELIST(ptr)[v->_k];
10010350:	e0bffe17 	ldw	r2,-8(fp)
10010354:	10c01317 	ldw	r3,76(r2)
10010358:	e0bfff17 	ldw	r2,-4(fp)
1001035c:	10800117 	ldw	r2,4(r2)
10010360:	1085883a 	add	r2,r2,r2
10010364:	1085883a 	add	r2,r2,r2
10010368:	1885883a 	add	r2,r3,r2
1001036c:	10c00017 	ldw	r3,0(r2)
10010370:	e0bfff17 	ldw	r2,-4(fp)
10010374:	10c00015 	stw	r3,0(r2)
      _REENT_MP_FREELIST(ptr)[v->_k] = v;
10010378:	e0bffe17 	ldw	r2,-8(fp)
1001037c:	10c01317 	ldw	r3,76(r2)
10010380:	e0bfff17 	ldw	r2,-4(fp)
10010384:	10800117 	ldw	r2,4(r2)
10010388:	1085883a 	add	r2,r2,r2
1001038c:	1085883a 	add	r2,r2,r2
10010390:	1885883a 	add	r2,r3,r2
10010394:	e0ffff17 	ldw	r3,-4(fp)
10010398:	10c00015 	stw	r3,0(r2)
    }
}
1001039c:	0001883a 	nop
100103a0:	e037883a 	mov	sp,fp
100103a4:	df000017 	ldw	fp,0(sp)
100103a8:	dec00104 	addi	sp,sp,4
100103ac:	f800283a 	ret

100103b0 <__multadd>:
_DEFUN (multadd, (ptr, b, m, a),
	struct _reent *ptr _AND
	_Bigint * b _AND
	int m _AND
	int a)
{
100103b0:	defff304 	addi	sp,sp,-52
100103b4:	dfc00c15 	stw	ra,48(sp)
100103b8:	df000b15 	stw	fp,44(sp)
100103bc:	df000b04 	addi	fp,sp,44
100103c0:	e13ffc15 	stw	r4,-16(fp)
100103c4:	e17ffd15 	stw	r5,-12(fp)
100103c8:	e1bffe15 	stw	r6,-8(fp)
100103cc:	e1ffff15 	stw	r7,-4(fp)
#ifdef Pack_32
  __ULong xi, z;
#endif
  _Bigint *b1;

  wds = b->_wds;
100103d0:	e0bffd17 	ldw	r2,-12(fp)
100103d4:	10800417 	ldw	r2,16(r2)
100103d8:	e0bff715 	stw	r2,-36(fp)
  x = b->_x;
100103dc:	e0bffd17 	ldw	r2,-12(fp)
100103e0:	10800504 	addi	r2,r2,20
100103e4:	e0bff615 	stw	r2,-40(fp)
  i = 0;
100103e8:	e03ff515 	stw	zero,-44(fp)
  do
    {
#ifdef Pack_32
      xi = *x;
100103ec:	e0bff617 	ldw	r2,-40(fp)
100103f0:	10800017 	ldw	r2,0(r2)
100103f4:	e0bff815 	stw	r2,-32(fp)
      y = (xi & 0xffff) * m + a;
100103f8:	e0bff817 	ldw	r2,-32(fp)
100103fc:	10bfffcc 	andi	r2,r2,65535
10010400:	e0fffe17 	ldw	r3,-8(fp)
10010404:	180b883a 	mov	r5,r3
10010408:	1009883a 	mov	r4,r2
1001040c:	00065d80 	call	100065d8 <__mulsi3>
10010410:	1007883a 	mov	r3,r2
10010414:	e0bfff17 	ldw	r2,-4(fp)
10010418:	1885883a 	add	r2,r3,r2
1001041c:	e0bff915 	stw	r2,-28(fp)
      z = (xi >> 16) * m + (y >> 16);
10010420:	e0bff817 	ldw	r2,-32(fp)
10010424:	1004d43a 	srli	r2,r2,16
10010428:	e0fffe17 	ldw	r3,-8(fp)
1001042c:	180b883a 	mov	r5,r3
10010430:	1009883a 	mov	r4,r2
10010434:	00065d80 	call	100065d8 <__mulsi3>
10010438:	1007883a 	mov	r3,r2
1001043c:	e0bff917 	ldw	r2,-28(fp)
10010440:	1004d43a 	srli	r2,r2,16
10010444:	1885883a 	add	r2,r3,r2
10010448:	e0bffa15 	stw	r2,-24(fp)
      a = (int) (z >> 16);
1001044c:	e0bffa17 	ldw	r2,-24(fp)
10010450:	1004d43a 	srli	r2,r2,16
10010454:	e0bfff15 	stw	r2,-4(fp)
      *x++ = (z << 16) + (y & 0xffff);
10010458:	e0bff617 	ldw	r2,-40(fp)
1001045c:	10c00104 	addi	r3,r2,4
10010460:	e0fff615 	stw	r3,-40(fp)
10010464:	e0fffa17 	ldw	r3,-24(fp)
10010468:	1808943a 	slli	r4,r3,16
1001046c:	e0fff917 	ldw	r3,-28(fp)
10010470:	18ffffcc 	andi	r3,r3,65535
10010474:	20c7883a 	add	r3,r4,r3
10010478:	10c00015 	stw	r3,0(r2)
      y = *x * m + a;
      a = (int) (y >> 16);
      *x++ = y & 0xffff;
#endif
    }
  while (++i < wds);
1001047c:	e0bff517 	ldw	r2,-44(fp)
10010480:	10800044 	addi	r2,r2,1
10010484:	e0bff515 	stw	r2,-44(fp)
10010488:	e0fff517 	ldw	r3,-44(fp)
1001048c:	e0bff717 	ldw	r2,-36(fp)
10010490:	18bfd616 	blt	r3,r2,100103ec <__alt_data_end+0xf80103ec>
  if (a)
10010494:	e0bfff17 	ldw	r2,-4(fp)
10010498:	10002a26 	beq	r2,zero,10010544 <__multadd+0x194>
    {
      if (wds >= b->_maxwds)
1001049c:	e0bffd17 	ldw	r2,-12(fp)
100104a0:	10800217 	ldw	r2,8(r2)
100104a4:	e0fff717 	ldw	r3,-36(fp)
100104a8:	18801916 	blt	r3,r2,10010510 <__multadd+0x160>
	{
	  b1 = Balloc (ptr, b->_k + 1);
100104ac:	e0bffd17 	ldw	r2,-12(fp)
100104b0:	10800117 	ldw	r2,4(r2)
100104b4:	10800044 	addi	r2,r2,1
100104b8:	100b883a 	mov	r5,r2
100104bc:	e13ffc17 	ldw	r4,-16(fp)
100104c0:	00102040 	call	10010204 <_Balloc>
100104c4:	e0bffb15 	stw	r2,-20(fp)
	  Bcopy (b1, b);
100104c8:	e0bffb17 	ldw	r2,-20(fp)
100104cc:	10c00304 	addi	r3,r2,12
100104d0:	e0bffd17 	ldw	r2,-12(fp)
100104d4:	11000304 	addi	r4,r2,12
100104d8:	e0bffd17 	ldw	r2,-12(fp)
100104dc:	10800417 	ldw	r2,16(r2)
100104e0:	10800084 	addi	r2,r2,2
100104e4:	1085883a 	add	r2,r2,r2
100104e8:	1085883a 	add	r2,r2,r2
100104ec:	100d883a 	mov	r6,r2
100104f0:	200b883a 	mov	r5,r4
100104f4:	1809883a 	mov	r4,r3
100104f8:	000fe740 	call	1000fe74 <memcpy>
	  Bfree (ptr, b);
100104fc:	e17ffd17 	ldw	r5,-12(fp)
10010500:	e13ffc17 	ldw	r4,-16(fp)
10010504:	00103340 	call	10010334 <_Bfree>
	  b = b1;
10010508:	e0bffb17 	ldw	r2,-20(fp)
1001050c:	e0bffd15 	stw	r2,-12(fp)
	}
      b->_x[wds++] = a;
10010510:	e0bff717 	ldw	r2,-36(fp)
10010514:	10c00044 	addi	r3,r2,1
10010518:	e0fff715 	stw	r3,-36(fp)
1001051c:	e0ffff17 	ldw	r3,-4(fp)
10010520:	e13ffd17 	ldw	r4,-12(fp)
10010524:	10800144 	addi	r2,r2,5
10010528:	1085883a 	add	r2,r2,r2
1001052c:	1085883a 	add	r2,r2,r2
10010530:	2085883a 	add	r2,r4,r2
10010534:	10c00015 	stw	r3,0(r2)
      b->_wds = wds;
10010538:	e0bffd17 	ldw	r2,-12(fp)
1001053c:	e0fff717 	ldw	r3,-36(fp)
10010540:	10c00415 	stw	r3,16(r2)
    }
  return b;
10010544:	e0bffd17 	ldw	r2,-12(fp)
}
10010548:	e037883a 	mov	sp,fp
1001054c:	dfc00117 	ldw	ra,4(sp)
10010550:	df000017 	ldw	fp,0(sp)
10010554:	dec00204 	addi	sp,sp,8
10010558:	f800283a 	ret

1001055c <__s2b>:
	struct _reent * ptr _AND
	_CONST char *s _AND
	int nd0 _AND
	int nd _AND
	__ULong y9)
{
1001055c:	defff504 	addi	sp,sp,-44
10010560:	dfc00a15 	stw	ra,40(sp)
10010564:	df000915 	stw	fp,36(sp)
10010568:	df000904 	addi	fp,sp,36
1001056c:	e13ffc15 	stw	r4,-16(fp)
10010570:	e17ffd15 	stw	r5,-12(fp)
10010574:	e1bffe15 	stw	r6,-8(fp)
10010578:	e1ffff15 	stw	r7,-4(fp)
  _Bigint *b;
  int i, k;
  __Long x, y;

  x = (nd + 8) / 9;
1001057c:	e0bfff17 	ldw	r2,-4(fp)
10010580:	10800204 	addi	r2,r2,8
10010584:	01400244 	movi	r5,9
10010588:	1009883a 	mov	r4,r2
1001058c:	00025980 	call	10002598 <__divsi3>
10010590:	e0bffb15 	stw	r2,-20(fp)
  for (k = 0, y = 1; x > y; y <<= 1, k++);
10010594:	e03ff915 	stw	zero,-28(fp)
10010598:	00800044 	movi	r2,1
1001059c:	e0bffa15 	stw	r2,-24(fp)
100105a0:	00000606 	br	100105bc <__s2b+0x60>
100105a4:	e0bffa17 	ldw	r2,-24(fp)
100105a8:	1085883a 	add	r2,r2,r2
100105ac:	e0bffa15 	stw	r2,-24(fp)
100105b0:	e0bff917 	ldw	r2,-28(fp)
100105b4:	10800044 	addi	r2,r2,1
100105b8:	e0bff915 	stw	r2,-28(fp)
100105bc:	e0bffb17 	ldw	r2,-20(fp)
100105c0:	e0fffa17 	ldw	r3,-24(fp)
100105c4:	18bff716 	blt	r3,r2,100105a4 <__alt_data_end+0xf80105a4>
#ifdef Pack_32
  b = Balloc (ptr, k);
100105c8:	e17ff917 	ldw	r5,-28(fp)
100105cc:	e13ffc17 	ldw	r4,-16(fp)
100105d0:	00102040 	call	10010204 <_Balloc>
100105d4:	e0bff715 	stw	r2,-36(fp)
  b->_x[0] = y9;
100105d8:	e0bff717 	ldw	r2,-36(fp)
100105dc:	e0c00217 	ldw	r3,8(fp)
100105e0:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
100105e4:	e0bff717 	ldw	r2,-36(fp)
100105e8:	00c00044 	movi	r3,1
100105ec:	10c00415 	stw	r3,16(r2)
  b = Balloc (ptr, k + 1);
  b->_x[0] = y9 & 0xffff;
  b->_wds = (b->_x[1] = y9 >> 16) ? 2 : 1;
#endif

  i = 9;
100105f0:	00800244 	movi	r2,9
100105f4:	e0bff815 	stw	r2,-32(fp)
  if (9 < nd0)
100105f8:	e0bffe17 	ldw	r2,-8(fp)
100105fc:	10800290 	cmplti	r2,r2,10
10010600:	10001b1e 	bne	r2,zero,10010670 <__s2b+0x114>
    {
      s += 9;
10010604:	e0bffd17 	ldw	r2,-12(fp)
10010608:	10800244 	addi	r2,r2,9
1001060c:	e0bffd15 	stw	r2,-12(fp)
      do
	b = multadd (ptr, b, 10, *s++ - '0');
10010610:	e0bffd17 	ldw	r2,-12(fp)
10010614:	10c00044 	addi	r3,r2,1
10010618:	e0fffd15 	stw	r3,-12(fp)
1001061c:	10800003 	ldbu	r2,0(r2)
10010620:	10803fcc 	andi	r2,r2,255
10010624:	1080201c 	xori	r2,r2,128
10010628:	10bfe004 	addi	r2,r2,-128
1001062c:	10bff404 	addi	r2,r2,-48
10010630:	100f883a 	mov	r7,r2
10010634:	01800284 	movi	r6,10
10010638:	e17ff717 	ldw	r5,-36(fp)
1001063c:	e13ffc17 	ldw	r4,-16(fp)
10010640:	00103b00 	call	100103b0 <__multadd>
10010644:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
10010648:	e0bff817 	ldw	r2,-32(fp)
1001064c:	10800044 	addi	r2,r2,1
10010650:	e0bff815 	stw	r2,-32(fp)
10010654:	e0fff817 	ldw	r3,-32(fp)
10010658:	e0bffe17 	ldw	r2,-8(fp)
1001065c:	18bfec16 	blt	r3,r2,10010610 <__alt_data_end+0xf8010610>
      s++;
10010660:	e0bffd17 	ldw	r2,-12(fp)
10010664:	10800044 	addi	r2,r2,1
10010668:	e0bffd15 	stw	r2,-12(fp)
1001066c:	00001506 	br	100106c4 <__s2b+0x168>
    }
  else
    s += 10;
10010670:	e0bffd17 	ldw	r2,-12(fp)
10010674:	10800284 	addi	r2,r2,10
10010678:	e0bffd15 	stw	r2,-12(fp)
  for (; i < nd; i++)
1001067c:	00001106 	br	100106c4 <__s2b+0x168>
    b = multadd (ptr, b, 10, *s++ - '0');
10010680:	e0bffd17 	ldw	r2,-12(fp)
10010684:	10c00044 	addi	r3,r2,1
10010688:	e0fffd15 	stw	r3,-12(fp)
1001068c:	10800003 	ldbu	r2,0(r2)
10010690:	10803fcc 	andi	r2,r2,255
10010694:	1080201c 	xori	r2,r2,128
10010698:	10bfe004 	addi	r2,r2,-128
1001069c:	10bff404 	addi	r2,r2,-48
100106a0:	100f883a 	mov	r7,r2
100106a4:	01800284 	movi	r6,10
100106a8:	e17ff717 	ldw	r5,-36(fp)
100106ac:	e13ffc17 	ldw	r4,-16(fp)
100106b0:	00103b00 	call	100103b0 <__multadd>
100106b4:	e0bff715 	stw	r2,-36(fp)
      while (++i < nd0);
      s++;
    }
  else
    s += 10;
  for (; i < nd; i++)
100106b8:	e0bff817 	ldw	r2,-32(fp)
100106bc:	10800044 	addi	r2,r2,1
100106c0:	e0bff815 	stw	r2,-32(fp)
100106c4:	e0fff817 	ldw	r3,-32(fp)
100106c8:	e0bfff17 	ldw	r2,-4(fp)
100106cc:	18bfec16 	blt	r3,r2,10010680 <__alt_data_end+0xf8010680>
    b = multadd (ptr, b, 10, *s++ - '0');
  return b;
100106d0:	e0bff717 	ldw	r2,-36(fp)
}
100106d4:	e037883a 	mov	sp,fp
100106d8:	dfc00117 	ldw	ra,4(sp)
100106dc:	df000017 	ldw	fp,0(sp)
100106e0:	dec00204 	addi	sp,sp,8
100106e4:	f800283a 	ret

100106e8 <__hi0bits>:

int
_DEFUN (hi0bits,
	(x), register __ULong x)
{
100106e8:	defffe04 	addi	sp,sp,-8
100106ec:	df000115 	stw	fp,4(sp)
100106f0:	dc000015 	stw	r16,0(sp)
100106f4:	df000104 	addi	fp,sp,4
100106f8:	2005883a 	mov	r2,r4
  register int k = 0;
100106fc:	0021883a 	mov	r16,zero

  if (!(x & 0xffff0000))
10010700:	10ffffec 	andhi	r3,r2,65535
10010704:	1800021e 	bne	r3,zero,10010710 <__hi0bits+0x28>
    {
      k = 16;
10010708:	04000404 	movi	r16,16
      x <<= 16;
1001070c:	1004943a 	slli	r2,r2,16
    }
  if (!(x & 0xff000000))
10010710:	10ffc02c 	andhi	r3,r2,65280
10010714:	1800021e 	bne	r3,zero,10010720 <__hi0bits+0x38>
    {
      k += 8;
10010718:	84000204 	addi	r16,r16,8
      x <<= 8;
1001071c:	1004923a 	slli	r2,r2,8
    }
  if (!(x & 0xf0000000))
10010720:	10fc002c 	andhi	r3,r2,61440
10010724:	1800021e 	bne	r3,zero,10010730 <__hi0bits+0x48>
    {
      k += 4;
10010728:	84000104 	addi	r16,r16,4
      x <<= 4;
1001072c:	1004913a 	slli	r2,r2,4
    }
  if (!(x & 0xc0000000))
10010730:	10f0002c 	andhi	r3,r2,49152
10010734:	1800031e 	bne	r3,zero,10010744 <__hi0bits+0x5c>
    {
      k += 2;
10010738:	84000084 	addi	r16,r16,2
      x <<= 2;
1001073c:	1085883a 	add	r2,r2,r2
10010740:	1085883a 	add	r2,r2,r2
    }
  if (!(x & 0x80000000))
10010744:	1007883a 	mov	r3,r2
10010748:	18000516 	blt	r3,zero,10010760 <__hi0bits+0x78>
    {
      k++;
1001074c:	84000044 	addi	r16,r16,1
      if (!(x & 0x40000000))
10010750:	1090002c 	andhi	r2,r2,16384
10010754:	1000021e 	bne	r2,zero,10010760 <__hi0bits+0x78>
	return 32;
10010758:	00800804 	movi	r2,32
1001075c:	00000106 	br	10010764 <__hi0bits+0x7c>
    }
  return k;
10010760:	8005883a 	mov	r2,r16
}
10010764:	e6ffff04 	addi	sp,fp,-4
10010768:	df000117 	ldw	fp,4(sp)
1001076c:	dc000017 	ldw	r16,0(sp)
10010770:	dec00204 	addi	sp,sp,8
10010774:	f800283a 	ret

10010778 <__lo0bits>:

int
_DEFUN (lo0bits, (y), __ULong *y)
{
10010778:	defffc04 	addi	sp,sp,-16
1001077c:	df000315 	stw	fp,12(sp)
10010780:	dc400215 	stw	r17,8(sp)
10010784:	dc000115 	stw	r16,4(sp)
10010788:	df000304 	addi	fp,sp,12
1001078c:	e13ffd15 	stw	r4,-12(fp)
  register int k;
  register __ULong x = *y;
10010790:	e0bffd17 	ldw	r2,-12(fp)
10010794:	14000017 	ldw	r16,0(r2)

  if (x & 7)
10010798:	808001cc 	andi	r2,r16,7
1001079c:	10001026 	beq	r2,zero,100107e0 <__lo0bits+0x68>
    {
      if (x & 1)
100107a0:	8080004c 	andi	r2,r16,1
100107a4:	10000226 	beq	r2,zero,100107b0 <__lo0bits+0x38>
	return 0;
100107a8:	0005883a 	mov	r2,zero
100107ac:	00002706 	br	1001084c <__lo0bits+0xd4>
      if (x & 2)
100107b0:	8080008c 	andi	r2,r16,2
100107b4:	10000526 	beq	r2,zero,100107cc <__lo0bits+0x54>
	{
	  *y = x >> 1;
100107b8:	8006d07a 	srli	r3,r16,1
100107bc:	e0bffd17 	ldw	r2,-12(fp)
100107c0:	10c00015 	stw	r3,0(r2)
	  return 1;
100107c4:	00800044 	movi	r2,1
100107c8:	00002006 	br	1001084c <__lo0bits+0xd4>
	}
      *y = x >> 2;
100107cc:	8006d0ba 	srli	r3,r16,2
100107d0:	e0bffd17 	ldw	r2,-12(fp)
100107d4:	10c00015 	stw	r3,0(r2)
      return 2;
100107d8:	00800084 	movi	r2,2
100107dc:	00001b06 	br	1001084c <__lo0bits+0xd4>
    }
  k = 0;
100107e0:	0023883a 	mov	r17,zero
  if (!(x & 0xffff))
100107e4:	80bfffcc 	andi	r2,r16,65535
100107e8:	1000021e 	bne	r2,zero,100107f4 <__lo0bits+0x7c>
    {
      k = 16;
100107ec:	04400404 	movi	r17,16
      x >>= 16;
100107f0:	8020d43a 	srli	r16,r16,16
    }
  if (!(x & 0xff))
100107f4:	80803fcc 	andi	r2,r16,255
100107f8:	1000021e 	bne	r2,zero,10010804 <__lo0bits+0x8c>
    {
      k += 8;
100107fc:	8c400204 	addi	r17,r17,8
      x >>= 8;
10010800:	8020d23a 	srli	r16,r16,8
    }
  if (!(x & 0xf))
10010804:	808003cc 	andi	r2,r16,15
10010808:	1000021e 	bne	r2,zero,10010814 <__lo0bits+0x9c>
    {
      k += 4;
1001080c:	8c400104 	addi	r17,r17,4
      x >>= 4;
10010810:	8020d13a 	srli	r16,r16,4
    }
  if (!(x & 0x3))
10010814:	808000cc 	andi	r2,r16,3
10010818:	1000021e 	bne	r2,zero,10010824 <__lo0bits+0xac>
    {
      k += 2;
1001081c:	8c400084 	addi	r17,r17,2
      x >>= 2;
10010820:	8020d0ba 	srli	r16,r16,2
    }
  if (!(x & 1))
10010824:	8080004c 	andi	r2,r16,1
10010828:	1000051e 	bne	r2,zero,10010840 <__lo0bits+0xc8>
    {
      k++;
1001082c:	8c400044 	addi	r17,r17,1
      x >>= 1;
10010830:	8020d07a 	srli	r16,r16,1
      if (!x & 1)
10010834:	8000021e 	bne	r16,zero,10010840 <__lo0bits+0xc8>
	return 32;
10010838:	00800804 	movi	r2,32
1001083c:	00000306 	br	1001084c <__lo0bits+0xd4>
    }
  *y = x;
10010840:	e0bffd17 	ldw	r2,-12(fp)
10010844:	14000015 	stw	r16,0(r2)
  return k;
10010848:	8805883a 	mov	r2,r17
}
1001084c:	e6fffe04 	addi	sp,fp,-8
10010850:	df000217 	ldw	fp,8(sp)
10010854:	dc400117 	ldw	r17,4(sp)
10010858:	dc000017 	ldw	r16,0(sp)
1001085c:	dec00304 	addi	sp,sp,12
10010860:	f800283a 	ret

10010864 <__i2b>:

_Bigint *
_DEFUN (i2b, (ptr, i), struct _reent * ptr _AND int i)
{
10010864:	defffb04 	addi	sp,sp,-20
10010868:	dfc00415 	stw	ra,16(sp)
1001086c:	df000315 	stw	fp,12(sp)
10010870:	df000304 	addi	fp,sp,12
10010874:	e13ffe15 	stw	r4,-8(fp)
10010878:	e17fff15 	stw	r5,-4(fp)
  _Bigint *b;

  b = Balloc (ptr, 1);
1001087c:	01400044 	movi	r5,1
10010880:	e13ffe17 	ldw	r4,-8(fp)
10010884:	00102040 	call	10010204 <_Balloc>
10010888:	e0bffd15 	stw	r2,-12(fp)
  b->_x[0] = i;
1001088c:	e0ffff17 	ldw	r3,-4(fp)
10010890:	e0bffd17 	ldw	r2,-12(fp)
10010894:	10c00515 	stw	r3,20(r2)
  b->_wds = 1;
10010898:	e0bffd17 	ldw	r2,-12(fp)
1001089c:	00c00044 	movi	r3,1
100108a0:	10c00415 	stw	r3,16(r2)
  return b;
100108a4:	e0bffd17 	ldw	r2,-12(fp)
}
100108a8:	e037883a 	mov	sp,fp
100108ac:	dfc00117 	ldw	ra,4(sp)
100108b0:	df000017 	ldw	fp,0(sp)
100108b4:	dec00204 	addi	sp,sp,8
100108b8:	f800283a 	ret

100108bc <__multiply>:

_Bigint *
_DEFUN (mult, (ptr, a, b), struct _reent * ptr _AND _Bigint * a _AND _Bigint * b)
{
100108bc:	deffeb04 	addi	sp,sp,-84
100108c0:	dfc01415 	stw	ra,80(sp)
100108c4:	df001315 	stw	fp,76(sp)
100108c8:	df001304 	addi	fp,sp,76
100108cc:	e13ffd15 	stw	r4,-12(fp)
100108d0:	e17ffe15 	stw	r5,-8(fp)
100108d4:	e1bfff15 	stw	r6,-4(fp)
  __ULong *x, *xa, *xae, *xb, *xbe, *xc, *xc0;
#ifdef Pack_32
  __ULong z2;
#endif

  if (a->_wds < b->_wds)
100108d8:	e0bffe17 	ldw	r2,-8(fp)
100108dc:	10c00417 	ldw	r3,16(r2)
100108e0:	e0bfff17 	ldw	r2,-4(fp)
100108e4:	10800417 	ldw	r2,16(r2)
100108e8:	1880060e 	bge	r3,r2,10010904 <__multiply+0x48>
    {
      c = a;
100108ec:	e0bffe17 	ldw	r2,-8(fp)
100108f0:	e0bff515 	stw	r2,-44(fp)
      a = b;
100108f4:	e0bfff17 	ldw	r2,-4(fp)
100108f8:	e0bffe15 	stw	r2,-8(fp)
      b = c;
100108fc:	e0bff517 	ldw	r2,-44(fp)
10010900:	e0bfff15 	stw	r2,-4(fp)
    }
  k = a->_k;
10010904:	e0bffe17 	ldw	r2,-8(fp)
10010908:	10800117 	ldw	r2,4(r2)
1001090c:	e0bfed15 	stw	r2,-76(fp)
  wa = a->_wds;
10010910:	e0bffe17 	ldw	r2,-8(fp)
10010914:	10800417 	ldw	r2,16(r2)
10010918:	e0bff615 	stw	r2,-40(fp)
  wb = b->_wds;
1001091c:	e0bfff17 	ldw	r2,-4(fp)
10010920:	10800417 	ldw	r2,16(r2)
10010924:	e0bff715 	stw	r2,-36(fp)
  wc = wa + wb;
10010928:	e0fff617 	ldw	r3,-40(fp)
1001092c:	e0bff717 	ldw	r2,-36(fp)
10010930:	1885883a 	add	r2,r3,r2
10010934:	e0bfee15 	stw	r2,-72(fp)
  if (wc > a->_maxwds)
10010938:	e0bffe17 	ldw	r2,-8(fp)
1001093c:	10c00217 	ldw	r3,8(r2)
10010940:	e0bfee17 	ldw	r2,-72(fp)
10010944:	1880030e 	bge	r3,r2,10010954 <__multiply+0x98>
    k++;
10010948:	e0bfed17 	ldw	r2,-76(fp)
1001094c:	10800044 	addi	r2,r2,1
10010950:	e0bfed15 	stw	r2,-76(fp)
  c = Balloc (ptr, k);
10010954:	e17fed17 	ldw	r5,-76(fp)
10010958:	e13ffd17 	ldw	r4,-12(fp)
1001095c:	00102040 	call	10010204 <_Balloc>
10010960:	e0bff515 	stw	r2,-44(fp)
  for (x = c->_x, xa = x + wc; x < xa; x++)
10010964:	e0bff517 	ldw	r2,-44(fp)
10010968:	10800504 	addi	r2,r2,20
1001096c:	e0bff015 	stw	r2,-64(fp)
10010970:	e0bfee17 	ldw	r2,-72(fp)
10010974:	1085883a 	add	r2,r2,r2
10010978:	1085883a 	add	r2,r2,r2
1001097c:	1007883a 	mov	r3,r2
10010980:	e0bff017 	ldw	r2,-64(fp)
10010984:	10c5883a 	add	r2,r2,r3
10010988:	e0bff815 	stw	r2,-32(fp)
1001098c:	00000506 	br	100109a4 <__multiply+0xe8>
    *x = 0;
10010990:	e0bff017 	ldw	r2,-64(fp)
10010994:	10000015 	stw	zero,0(r2)
  wb = b->_wds;
  wc = wa + wb;
  if (wc > a->_maxwds)
    k++;
  c = Balloc (ptr, k);
  for (x = c->_x, xa = x + wc; x < xa; x++)
10010998:	e0bff017 	ldw	r2,-64(fp)
1001099c:	10800104 	addi	r2,r2,4
100109a0:	e0bff015 	stw	r2,-64(fp)
100109a4:	e0fff017 	ldw	r3,-64(fp)
100109a8:	e0bff817 	ldw	r2,-32(fp)
100109ac:	18bff836 	bltu	r3,r2,10010990 <__alt_data_end+0xf8010990>
    *x = 0;
  xa = a->_x;
100109b0:	e0bffe17 	ldw	r2,-8(fp)
100109b4:	10800504 	addi	r2,r2,20
100109b8:	e0bff815 	stw	r2,-32(fp)
  xae = xa + wa;
100109bc:	e0bff617 	ldw	r2,-40(fp)
100109c0:	1085883a 	add	r2,r2,r2
100109c4:	1085883a 	add	r2,r2,r2
100109c8:	1007883a 	mov	r3,r2
100109cc:	e0bff817 	ldw	r2,-32(fp)
100109d0:	10c5883a 	add	r2,r2,r3
100109d4:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
100109d8:	e0bfff17 	ldw	r2,-4(fp)
100109dc:	10800504 	addi	r2,r2,20
100109e0:	e0bff115 	stw	r2,-60(fp)
  xbe = xb + wb;
100109e4:	e0bff717 	ldw	r2,-36(fp)
100109e8:	1085883a 	add	r2,r2,r2
100109ec:	1085883a 	add	r2,r2,r2
100109f0:	1007883a 	mov	r3,r2
100109f4:	e0bff117 	ldw	r2,-60(fp)
100109f8:	10c5883a 	add	r2,r2,r3
100109fc:	e0bffa15 	stw	r2,-24(fp)
  xc0 = c->_x;
10010a00:	e0bff517 	ldw	r2,-44(fp)
10010a04:	10800504 	addi	r2,r2,20
10010a08:	e0bff315 	stw	r2,-52(fp)
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
10010a0c:	00008506 	br	10010c24 <__multiply+0x368>
    {
      if ((y = *xb & 0xffff) != 0)
10010a10:	e0bff117 	ldw	r2,-60(fp)
10010a14:	10800017 	ldw	r2,0(r2)
10010a18:	10bfffcc 	andi	r2,r2,65535
10010a1c:	e0bffb15 	stw	r2,-20(fp)
10010a20:	e0bffb17 	ldw	r2,-20(fp)
10010a24:	10003826 	beq	r2,zero,10010b08 <__multiply+0x24c>
	{
	  x = xa;
10010a28:	e0bff817 	ldw	r2,-32(fp)
10010a2c:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
10010a30:	e0bff317 	ldw	r2,-52(fp)
10010a34:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
10010a38:	e03fef15 	stw	zero,-68(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc & 0xffff) + carry;
10010a3c:	e0bff017 	ldw	r2,-64(fp)
10010a40:	10800017 	ldw	r2,0(r2)
10010a44:	10bfffcc 	andi	r2,r2,65535
10010a48:	e17ffb17 	ldw	r5,-20(fp)
10010a4c:	1009883a 	mov	r4,r2
10010a50:	00065d80 	call	100065d8 <__mulsi3>
10010a54:	1007883a 	mov	r3,r2
10010a58:	e0bff217 	ldw	r2,-56(fp)
10010a5c:	10800017 	ldw	r2,0(r2)
10010a60:	10bfffcc 	andi	r2,r2,65535
10010a64:	1887883a 	add	r3,r3,r2
10010a68:	e0bfef17 	ldw	r2,-68(fp)
10010a6c:	1885883a 	add	r2,r3,r2
10010a70:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
10010a74:	e0bffc17 	ldw	r2,-16(fp)
10010a78:	1004d43a 	srli	r2,r2,16
10010a7c:	e0bfef15 	stw	r2,-68(fp)
	      z2 = (*x++ >> 16) * y + (*xc >> 16) + carry;
10010a80:	e0bff017 	ldw	r2,-64(fp)
10010a84:	10c00104 	addi	r3,r2,4
10010a88:	e0fff015 	stw	r3,-64(fp)
10010a8c:	10800017 	ldw	r2,0(r2)
10010a90:	1004d43a 	srli	r2,r2,16
10010a94:	e17ffb17 	ldw	r5,-20(fp)
10010a98:	1009883a 	mov	r4,r2
10010a9c:	00065d80 	call	100065d8 <__mulsi3>
10010aa0:	1007883a 	mov	r3,r2
10010aa4:	e0bff217 	ldw	r2,-56(fp)
10010aa8:	10800017 	ldw	r2,0(r2)
10010aac:	1004d43a 	srli	r2,r2,16
10010ab0:	1887883a 	add	r3,r3,r2
10010ab4:	e0bfef17 	ldw	r2,-68(fp)
10010ab8:	1885883a 	add	r2,r3,r2
10010abc:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
10010ac0:	e0bff417 	ldw	r2,-48(fp)
10010ac4:	1004d43a 	srli	r2,r2,16
10010ac8:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z2, z);
10010acc:	e0bff217 	ldw	r2,-56(fp)
10010ad0:	10c00104 	addi	r3,r2,4
10010ad4:	e0fff215 	stw	r3,-56(fp)
10010ad8:	e0fff417 	ldw	r3,-48(fp)
10010adc:	1808943a 	slli	r4,r3,16
10010ae0:	e0fffc17 	ldw	r3,-16(fp)
10010ae4:	18ffffcc 	andi	r3,r3,65535
10010ae8:	20c6b03a 	or	r3,r4,r3
10010aec:	10c00015 	stw	r3,0(r2)
	    }
	  while (x < xae);
10010af0:	e0fff017 	ldw	r3,-64(fp)
10010af4:	e0bff917 	ldw	r2,-28(fp)
10010af8:	18bfd036 	bltu	r3,r2,10010a3c <__alt_data_end+0xf8010a3c>
	  *xc = carry;
10010afc:	e0bff217 	ldw	r2,-56(fp)
10010b00:	e0ffef17 	ldw	r3,-68(fp)
10010b04:	10c00015 	stw	r3,0(r2)
	}
      if ((y = *xb >> 16) != 0)
10010b08:	e0bff117 	ldw	r2,-60(fp)
10010b0c:	10800017 	ldw	r2,0(r2)
10010b10:	1004d43a 	srli	r2,r2,16
10010b14:	e0bffb15 	stw	r2,-20(fp)
10010b18:	e0bffb17 	ldw	r2,-20(fp)
10010b1c:	10003b26 	beq	r2,zero,10010c0c <__multiply+0x350>
	{
	  x = xa;
10010b20:	e0bff817 	ldw	r2,-32(fp)
10010b24:	e0bff015 	stw	r2,-64(fp)
	  xc = xc0;
10010b28:	e0bff317 	ldw	r2,-52(fp)
10010b2c:	e0bff215 	stw	r2,-56(fp)
	  carry = 0;
10010b30:	e03fef15 	stw	zero,-68(fp)
	  z2 = *xc;
10010b34:	e0bff217 	ldw	r2,-56(fp)
10010b38:	10800017 	ldw	r2,0(r2)
10010b3c:	e0bff415 	stw	r2,-48(fp)
	  do
	    {
	      z = (*x & 0xffff) * y + (*xc >> 16) + carry;
10010b40:	e0bff017 	ldw	r2,-64(fp)
10010b44:	10800017 	ldw	r2,0(r2)
10010b48:	10bfffcc 	andi	r2,r2,65535
10010b4c:	e17ffb17 	ldw	r5,-20(fp)
10010b50:	1009883a 	mov	r4,r2
10010b54:	00065d80 	call	100065d8 <__mulsi3>
10010b58:	1007883a 	mov	r3,r2
10010b5c:	e0bff217 	ldw	r2,-56(fp)
10010b60:	10800017 	ldw	r2,0(r2)
10010b64:	1004d43a 	srli	r2,r2,16
10010b68:	1887883a 	add	r3,r3,r2
10010b6c:	e0bfef17 	ldw	r2,-68(fp)
10010b70:	1885883a 	add	r2,r3,r2
10010b74:	e0bffc15 	stw	r2,-16(fp)
	      carry = z >> 16;
10010b78:	e0bffc17 	ldw	r2,-16(fp)
10010b7c:	1004d43a 	srli	r2,r2,16
10010b80:	e0bfef15 	stw	r2,-68(fp)
	      Storeinc (xc, z, z2);
10010b84:	e0bff217 	ldw	r2,-56(fp)
10010b88:	10c00104 	addi	r3,r2,4
10010b8c:	e0fff215 	stw	r3,-56(fp)
10010b90:	e0fffc17 	ldw	r3,-16(fp)
10010b94:	1808943a 	slli	r4,r3,16
10010b98:	e0fff417 	ldw	r3,-48(fp)
10010b9c:	18ffffcc 	andi	r3,r3,65535
10010ba0:	20c6b03a 	or	r3,r4,r3
10010ba4:	10c00015 	stw	r3,0(r2)
	      z2 = (*x++ >> 16) * y + (*xc & 0xffff) + carry;
10010ba8:	e0bff017 	ldw	r2,-64(fp)
10010bac:	10c00104 	addi	r3,r2,4
10010bb0:	e0fff015 	stw	r3,-64(fp)
10010bb4:	10800017 	ldw	r2,0(r2)
10010bb8:	1004d43a 	srli	r2,r2,16
10010bbc:	e17ffb17 	ldw	r5,-20(fp)
10010bc0:	1009883a 	mov	r4,r2
10010bc4:	00065d80 	call	100065d8 <__mulsi3>
10010bc8:	1007883a 	mov	r3,r2
10010bcc:	e0bff217 	ldw	r2,-56(fp)
10010bd0:	10800017 	ldw	r2,0(r2)
10010bd4:	10bfffcc 	andi	r2,r2,65535
10010bd8:	1887883a 	add	r3,r3,r2
10010bdc:	e0bfef17 	ldw	r2,-68(fp)
10010be0:	1885883a 	add	r2,r3,r2
10010be4:	e0bff415 	stw	r2,-48(fp)
	      carry = z2 >> 16;
10010be8:	e0bff417 	ldw	r2,-48(fp)
10010bec:	1004d43a 	srli	r2,r2,16
10010bf0:	e0bfef15 	stw	r2,-68(fp)
	    }
	  while (x < xae);
10010bf4:	e0fff017 	ldw	r3,-64(fp)
10010bf8:	e0bff917 	ldw	r2,-28(fp)
10010bfc:	18bfd036 	bltu	r3,r2,10010b40 <__alt_data_end+0xf8010b40>
	  *xc = z2;
10010c00:	e0bff217 	ldw	r2,-56(fp)
10010c04:	e0fff417 	ldw	r3,-48(fp)
10010c08:	10c00015 	stw	r3,0(r2)
  xae = xa + wa;
  xb = b->_x;
  xbe = xb + wb;
  xc0 = c->_x;
#ifdef Pack_32
  for (; xb < xbe; xb++, xc0++)
10010c0c:	e0bff117 	ldw	r2,-60(fp)
10010c10:	10800104 	addi	r2,r2,4
10010c14:	e0bff115 	stw	r2,-60(fp)
10010c18:	e0bff317 	ldw	r2,-52(fp)
10010c1c:	10800104 	addi	r2,r2,4
10010c20:	e0bff315 	stw	r2,-52(fp)
10010c24:	e0fff117 	ldw	r3,-60(fp)
10010c28:	e0bffa17 	ldw	r2,-24(fp)
10010c2c:	18bf7836 	bltu	r3,r2,10010a10 <__alt_data_end+0xf8010a10>
	  while (x < xae);
	  *xc = carry;
	}
    }
#endif
  for (xc0 = c->_x, xc = xc0 + wc; wc > 0 && !*--xc; --wc);
10010c30:	e0bff517 	ldw	r2,-44(fp)
10010c34:	10800504 	addi	r2,r2,20
10010c38:	e0bff315 	stw	r2,-52(fp)
10010c3c:	e0bfee17 	ldw	r2,-72(fp)
10010c40:	1085883a 	add	r2,r2,r2
10010c44:	1085883a 	add	r2,r2,r2
10010c48:	1007883a 	mov	r3,r2
10010c4c:	e0bff317 	ldw	r2,-52(fp)
10010c50:	10c5883a 	add	r2,r2,r3
10010c54:	e0bff215 	stw	r2,-56(fp)
10010c58:	00000306 	br	10010c68 <__multiply+0x3ac>
10010c5c:	e0bfee17 	ldw	r2,-72(fp)
10010c60:	10bfffc4 	addi	r2,r2,-1
10010c64:	e0bfee15 	stw	r2,-72(fp)
10010c68:	e0bfee17 	ldw	r2,-72(fp)
10010c6c:	0080060e 	bge	zero,r2,10010c88 <__multiply+0x3cc>
10010c70:	e0bff217 	ldw	r2,-56(fp)
10010c74:	10bfff04 	addi	r2,r2,-4
10010c78:	e0bff215 	stw	r2,-56(fp)
10010c7c:	e0bff217 	ldw	r2,-56(fp)
10010c80:	10800017 	ldw	r2,0(r2)
10010c84:	103ff526 	beq	r2,zero,10010c5c <__alt_data_end+0xf8010c5c>
  c->_wds = wc;
10010c88:	e0bff517 	ldw	r2,-44(fp)
10010c8c:	e0ffee17 	ldw	r3,-72(fp)
10010c90:	10c00415 	stw	r3,16(r2)
  return c;
10010c94:	e0bff517 	ldw	r2,-44(fp)
}
10010c98:	e037883a 	mov	sp,fp
10010c9c:	dfc00117 	ldw	ra,4(sp)
10010ca0:	df000017 	ldw	fp,0(sp)
10010ca4:	dec00204 	addi	sp,sp,8
10010ca8:	f800283a 	ret

10010cac <__pow5mult>:

_Bigint *
_DEFUN (pow5mult,
	(ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
10010cac:	defff704 	addi	sp,sp,-36
10010cb0:	dfc00815 	stw	ra,32(sp)
10010cb4:	df000715 	stw	fp,28(sp)
10010cb8:	df000704 	addi	fp,sp,28
10010cbc:	e13ffd15 	stw	r4,-12(fp)
10010cc0:	e17ffe15 	stw	r5,-8(fp)
10010cc4:	e1bfff15 	stw	r6,-4(fp)
  _Bigint *b1, *p5, *p51;
  int i;
  static _CONST int p05[3] = {5, 25, 125};

  if ((i = k & 3) != 0)
10010cc8:	e0bfff17 	ldw	r2,-4(fp)
10010ccc:	108000cc 	andi	r2,r2,3
10010cd0:	e0bffb15 	stw	r2,-20(fp)
10010cd4:	e0bffb17 	ldw	r2,-20(fp)
10010cd8:	10000e26 	beq	r2,zero,10010d14 <__pow5mult+0x68>
    b = multadd (ptr, b, p05[i - 1], 0);
10010cdc:	e0bffb17 	ldw	r2,-20(fp)
10010ce0:	10ffffc4 	addi	r3,r2,-1
10010ce4:	00840374 	movhi	r2,4109
10010ce8:	10bea704 	addi	r2,r2,-1380
10010cec:	18c7883a 	add	r3,r3,r3
10010cf0:	18c7883a 	add	r3,r3,r3
10010cf4:	10c5883a 	add	r2,r2,r3
10010cf8:	10800017 	ldw	r2,0(r2)
10010cfc:	000f883a 	mov	r7,zero
10010d00:	100d883a 	mov	r6,r2
10010d04:	e17ffe17 	ldw	r5,-8(fp)
10010d08:	e13ffd17 	ldw	r4,-12(fp)
10010d0c:	00103b00 	call	100103b0 <__multadd>
10010d10:	e0bffe15 	stw	r2,-8(fp)

  if (!(k >>= 2))
10010d14:	e0bfff17 	ldw	r2,-4(fp)
10010d18:	1005d0ba 	srai	r2,r2,2
10010d1c:	e0bfff15 	stw	r2,-4(fp)
10010d20:	e0bfff17 	ldw	r2,-4(fp)
10010d24:	1000021e 	bne	r2,zero,10010d30 <__pow5mult+0x84>
    return b;
10010d28:	e0bffe17 	ldw	r2,-8(fp)
10010d2c:	00003806 	br	10010e10 <__pow5mult+0x164>
  _REENT_CHECK_MP(ptr);
  if (!(p5 = _REENT_MP_P5S(ptr)))
10010d30:	e0bffd17 	ldw	r2,-12(fp)
10010d34:	10801217 	ldw	r2,72(r2)
10010d38:	e0bff915 	stw	r2,-28(fp)
10010d3c:	e0bff917 	ldw	r2,-28(fp)
10010d40:	10000b1e 	bne	r2,zero,10010d70 <__pow5mult+0xc4>
    {
      /* first time */
      p5 = _REENT_MP_P5S(ptr) = i2b (ptr, 625);
10010d44:	01409c44 	movi	r5,625
10010d48:	e13ffd17 	ldw	r4,-12(fp)
10010d4c:	00108640 	call	10010864 <__i2b>
10010d50:	1007883a 	mov	r3,r2
10010d54:	e0bffd17 	ldw	r2,-12(fp)
10010d58:	10c01215 	stw	r3,72(r2)
10010d5c:	e0bffd17 	ldw	r2,-12(fp)
10010d60:	10801217 	ldw	r2,72(r2)
10010d64:	e0bff915 	stw	r2,-28(fp)
      p5->_next = 0;
10010d68:	e0bff917 	ldw	r2,-28(fp)
10010d6c:	10000015 	stw	zero,0(r2)
    }
  for (;;)
    {
      if (k & 1)
10010d70:	e0bfff17 	ldw	r2,-4(fp)
10010d74:	1080004c 	andi	r2,r2,1
10010d78:	10000a26 	beq	r2,zero,10010da4 <__pow5mult+0xf8>
	{
	  b1 = mult (ptr, b, p5);
10010d7c:	e1bff917 	ldw	r6,-28(fp)
10010d80:	e17ffe17 	ldw	r5,-8(fp)
10010d84:	e13ffd17 	ldw	r4,-12(fp)
10010d88:	00108bc0 	call	100108bc <__multiply>
10010d8c:	e0bffc15 	stw	r2,-16(fp)
	  Bfree (ptr, b);
10010d90:	e17ffe17 	ldw	r5,-8(fp)
10010d94:	e13ffd17 	ldw	r4,-12(fp)
10010d98:	00103340 	call	10010334 <_Bfree>
	  b = b1;
10010d9c:	e0bffc17 	ldw	r2,-16(fp)
10010da0:	e0bffe15 	stw	r2,-8(fp)
	}
      if (!(k >>= 1))
10010da4:	e0bfff17 	ldw	r2,-4(fp)
10010da8:	1005d07a 	srai	r2,r2,1
10010dac:	e0bfff15 	stw	r2,-4(fp)
10010db0:	e0bfff17 	ldw	r2,-4(fp)
10010db4:	10001426 	beq	r2,zero,10010e08 <__pow5mult+0x15c>
	break;
      if (!(p51 = p5->_next))
10010db8:	e0bff917 	ldw	r2,-28(fp)
10010dbc:	10800017 	ldw	r2,0(r2)
10010dc0:	e0bffa15 	stw	r2,-24(fp)
10010dc4:	e0bffa17 	ldw	r2,-24(fp)
10010dc8:	10000c1e 	bne	r2,zero,10010dfc <__pow5mult+0x150>
	{
	  p51 = p5->_next = mult (ptr, p5, p5);
10010dcc:	e1bff917 	ldw	r6,-28(fp)
10010dd0:	e17ff917 	ldw	r5,-28(fp)
10010dd4:	e13ffd17 	ldw	r4,-12(fp)
10010dd8:	00108bc0 	call	100108bc <__multiply>
10010ddc:	1007883a 	mov	r3,r2
10010de0:	e0bff917 	ldw	r2,-28(fp)
10010de4:	10c00015 	stw	r3,0(r2)
10010de8:	e0bff917 	ldw	r2,-28(fp)
10010dec:	10800017 	ldw	r2,0(r2)
10010df0:	e0bffa15 	stw	r2,-24(fp)
	  p51->_next = 0;
10010df4:	e0bffa17 	ldw	r2,-24(fp)
10010df8:	10000015 	stw	zero,0(r2)
	}
      p5 = p51;
10010dfc:	e0bffa17 	ldw	r2,-24(fp)
10010e00:	e0bff915 	stw	r2,-28(fp)
    }
10010e04:	003fda06 	br	10010d70 <__alt_data_end+0xf8010d70>
	  b1 = mult (ptr, b, p5);
	  Bfree (ptr, b);
	  b = b1;
	}
      if (!(k >>= 1))
	break;
10010e08:	0001883a 	nop
	  p51 = p5->_next = mult (ptr, p5, p5);
	  p51->_next = 0;
	}
      p5 = p51;
    }
  return b;
10010e0c:	e0bffe17 	ldw	r2,-8(fp)
}
10010e10:	e037883a 	mov	sp,fp
10010e14:	dfc00117 	ldw	ra,4(sp)
10010e18:	df000017 	ldw	fp,0(sp)
10010e1c:	dec00204 	addi	sp,sp,8
10010e20:	f800283a 	ret

10010e24 <__lshift>:

_Bigint *
_DEFUN (lshift, (ptr, b, k), struct _reent * ptr _AND _Bigint * b _AND int k)
{
10010e24:	defff204 	addi	sp,sp,-56
10010e28:	dfc00d15 	stw	ra,52(sp)
10010e2c:	df000c15 	stw	fp,48(sp)
10010e30:	df000c04 	addi	fp,sp,48
10010e34:	e13ffd15 	stw	r4,-12(fp)
10010e38:	e17ffe15 	stw	r5,-8(fp)
10010e3c:	e1bfff15 	stw	r6,-4(fp)
  int i, k1, n, n1;
  _Bigint *b1;
  __ULong *x, *x1, *xe, z;

#ifdef Pack_32
  n = k >> 5;
10010e40:	e0bfff17 	ldw	r2,-4(fp)
10010e44:	1005d17a 	srai	r2,r2,5
10010e48:	e0bffa15 	stw	r2,-24(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
10010e4c:	e0bffe17 	ldw	r2,-8(fp)
10010e50:	10800117 	ldw	r2,4(r2)
10010e54:	e0bff515 	stw	r2,-44(fp)
  n1 = n + b->_wds + 1;
10010e58:	e0bffe17 	ldw	r2,-8(fp)
10010e5c:	10c00417 	ldw	r3,16(r2)
10010e60:	e0bffa17 	ldw	r2,-24(fp)
10010e64:	1885883a 	add	r2,r3,r2
10010e68:	10800044 	addi	r2,r2,1
10010e6c:	e0bff615 	stw	r2,-40(fp)
  for (i = b->_maxwds; n1 > i; i <<= 1)
10010e70:	e0bffe17 	ldw	r2,-8(fp)
10010e74:	10800217 	ldw	r2,8(r2)
10010e78:	e0bff415 	stw	r2,-48(fp)
10010e7c:	00000606 	br	10010e98 <__lshift+0x74>
    k1++;
10010e80:	e0bff517 	ldw	r2,-44(fp)
10010e84:	10800044 	addi	r2,r2,1
10010e88:	e0bff515 	stw	r2,-44(fp)
#else
  n = k >> 4;
#endif
  k1 = b->_k;
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
10010e8c:	e0bff417 	ldw	r2,-48(fp)
10010e90:	1085883a 	add	r2,r2,r2
10010e94:	e0bff415 	stw	r2,-48(fp)
10010e98:	e0bff617 	ldw	r2,-40(fp)
10010e9c:	e0fff417 	ldw	r3,-48(fp)
10010ea0:	18bff716 	blt	r3,r2,10010e80 <__alt_data_end+0xf8010e80>
    k1++;
  b1 = Balloc (ptr, k1);
10010ea4:	e17ff517 	ldw	r5,-44(fp)
10010ea8:	e13ffd17 	ldw	r4,-12(fp)
10010eac:	00102040 	call	10010204 <_Balloc>
10010eb0:	e0bffb15 	stw	r2,-20(fp)
  x1 = b1->_x;
10010eb4:	e0bffb17 	ldw	r2,-20(fp)
10010eb8:	10800504 	addi	r2,r2,20
10010ebc:	e0bff815 	stw	r2,-32(fp)
  for (i = 0; i < n; i++)
10010ec0:	e03ff415 	stw	zero,-48(fp)
10010ec4:	00000706 	br	10010ee4 <__lshift+0xc0>
    *x1++ = 0;
10010ec8:	e0bff817 	ldw	r2,-32(fp)
10010ecc:	10c00104 	addi	r3,r2,4
10010ed0:	e0fff815 	stw	r3,-32(fp)
10010ed4:	10000015 	stw	zero,0(r2)
  n1 = n + b->_wds + 1;
  for (i = b->_maxwds; n1 > i; i <<= 1)
    k1++;
  b1 = Balloc (ptr, k1);
  x1 = b1->_x;
  for (i = 0; i < n; i++)
10010ed8:	e0bff417 	ldw	r2,-48(fp)
10010edc:	10800044 	addi	r2,r2,1
10010ee0:	e0bff415 	stw	r2,-48(fp)
10010ee4:	e0fff417 	ldw	r3,-48(fp)
10010ee8:	e0bffa17 	ldw	r2,-24(fp)
10010eec:	18bff616 	blt	r3,r2,10010ec8 <__alt_data_end+0xf8010ec8>
    *x1++ = 0;
  x = b->_x;
10010ef0:	e0bffe17 	ldw	r2,-8(fp)
10010ef4:	10800504 	addi	r2,r2,20
10010ef8:	e0bff715 	stw	r2,-36(fp)
  xe = x + b->_wds;
10010efc:	e0bffe17 	ldw	r2,-8(fp)
10010f00:	10800417 	ldw	r2,16(r2)
10010f04:	1085883a 	add	r2,r2,r2
10010f08:	1085883a 	add	r2,r2,r2
10010f0c:	1007883a 	mov	r3,r2
10010f10:	e0bff717 	ldw	r2,-36(fp)
10010f14:	10c5883a 	add	r2,r2,r3
10010f18:	e0bffc15 	stw	r2,-16(fp)
#ifdef Pack_32
  if (k &= 0x1f)
10010f1c:	e0bfff17 	ldw	r2,-4(fp)
10010f20:	108007cc 	andi	r2,r2,31
10010f24:	e0bfff15 	stw	r2,-4(fp)
10010f28:	e0bfff17 	ldw	r2,-4(fp)
10010f2c:	10002326 	beq	r2,zero,10010fbc <__lshift+0x198>
    {
      k1 = 32 - k;
10010f30:	00c00804 	movi	r3,32
10010f34:	e0bfff17 	ldw	r2,-4(fp)
10010f38:	1885c83a 	sub	r2,r3,r2
10010f3c:	e0bff515 	stw	r2,-44(fp)
      z = 0;
10010f40:	e03ff915 	stw	zero,-28(fp)
      do
	{
	  *x1++ = *x << k | z;
10010f44:	e0bff817 	ldw	r2,-32(fp)
10010f48:	10c00104 	addi	r3,r2,4
10010f4c:	e0fff815 	stw	r3,-32(fp)
10010f50:	e0fff717 	ldw	r3,-36(fp)
10010f54:	19000017 	ldw	r4,0(r3)
10010f58:	e0ffff17 	ldw	r3,-4(fp)
10010f5c:	20c8983a 	sll	r4,r4,r3
10010f60:	e0fff917 	ldw	r3,-28(fp)
10010f64:	20c6b03a 	or	r3,r4,r3
10010f68:	10c00015 	stw	r3,0(r2)
	  z = *x++ >> k1;
10010f6c:	e0bff717 	ldw	r2,-36(fp)
10010f70:	10c00104 	addi	r3,r2,4
10010f74:	e0fff715 	stw	r3,-36(fp)
10010f78:	10c00017 	ldw	r3,0(r2)
10010f7c:	e0bff517 	ldw	r2,-44(fp)
10010f80:	1884d83a 	srl	r2,r3,r2
10010f84:	e0bff915 	stw	r2,-28(fp)
	}
      while (x < xe);
10010f88:	e0fff717 	ldw	r3,-36(fp)
10010f8c:	e0bffc17 	ldw	r2,-16(fp)
10010f90:	18bfec36 	bltu	r3,r2,10010f44 <__alt_data_end+0xf8010f44>
      if ((*x1 = z) != 0)
10010f94:	e0bff817 	ldw	r2,-32(fp)
10010f98:	e0fff917 	ldw	r3,-28(fp)
10010f9c:	10c00015 	stw	r3,0(r2)
10010fa0:	e0bff817 	ldw	r2,-32(fp)
10010fa4:	10800017 	ldw	r2,0(r2)
10010fa8:	10000f26 	beq	r2,zero,10010fe8 <__lshift+0x1c4>
	++n1;
10010fac:	e0bff617 	ldw	r2,-40(fp)
10010fb0:	10800044 	addi	r2,r2,1
10010fb4:	e0bff615 	stw	r2,-40(fp)
10010fb8:	00000b06 	br	10010fe8 <__lshift+0x1c4>
	++n1;
    }
#endif
  else
    do
      *x1++ = *x++;
10010fbc:	e0bff817 	ldw	r2,-32(fp)
10010fc0:	10c00104 	addi	r3,r2,4
10010fc4:	e0fff815 	stw	r3,-32(fp)
10010fc8:	e0fff717 	ldw	r3,-36(fp)
10010fcc:	19000104 	addi	r4,r3,4
10010fd0:	e13ff715 	stw	r4,-36(fp)
10010fd4:	18c00017 	ldw	r3,0(r3)
10010fd8:	10c00015 	stw	r3,0(r2)
    while (x < xe);
10010fdc:	e0fff717 	ldw	r3,-36(fp)
10010fe0:	e0bffc17 	ldw	r2,-16(fp)
10010fe4:	18bff536 	bltu	r3,r2,10010fbc <__alt_data_end+0xf8010fbc>
  b1->_wds = n1 - 1;
10010fe8:	e0bff617 	ldw	r2,-40(fp)
10010fec:	10ffffc4 	addi	r3,r2,-1
10010ff0:	e0bffb17 	ldw	r2,-20(fp)
10010ff4:	10c00415 	stw	r3,16(r2)
  Bfree (ptr, b);
10010ff8:	e17ffe17 	ldw	r5,-8(fp)
10010ffc:	e13ffd17 	ldw	r4,-12(fp)
10011000:	00103340 	call	10010334 <_Bfree>
  return b1;
10011004:	e0bffb17 	ldw	r2,-20(fp)
}
10011008:	e037883a 	mov	sp,fp
1001100c:	dfc00117 	ldw	ra,4(sp)
10011010:	df000017 	ldw	fp,0(sp)
10011014:	dec00204 	addi	sp,sp,8
10011018:	f800283a 	ret

1001101c <__mcmp>:

int
_DEFUN (cmp, (a, b), _Bigint * a _AND _Bigint * b)
{
1001101c:	defff704 	addi	sp,sp,-36
10011020:	df000815 	stw	fp,32(sp)
10011024:	df000804 	addi	fp,sp,32
10011028:	e13ffe15 	stw	r4,-8(fp)
1001102c:	e17fff15 	stw	r5,-4(fp)
  __ULong *xa, *xa0, *xb, *xb0;
  int i, j;

  i = a->_wds;
10011030:	e0bffe17 	ldw	r2,-8(fp)
10011034:	10800417 	ldw	r2,16(r2)
10011038:	e0bffa15 	stw	r2,-24(fp)
  j = b->_wds;
1001103c:	e0bfff17 	ldw	r2,-4(fp)
10011040:	10800417 	ldw	r2,16(r2)
10011044:	e0bffb15 	stw	r2,-20(fp)
  if (i > 1 && !a->_x[i - 1])
    Bug ("cmp called with a->_x[a->_wds-1] == 0");
  if (j > 1 && !b->_x[j - 1])
    Bug ("cmp called with b->_x[b->_wds-1] == 0");
#endif
  if (i -= j)
10011048:	e0fffa17 	ldw	r3,-24(fp)
1001104c:	e0bffb17 	ldw	r2,-20(fp)
10011050:	1885c83a 	sub	r2,r3,r2
10011054:	e0bffa15 	stw	r2,-24(fp)
10011058:	e0bffa17 	ldw	r2,-24(fp)
1001105c:	10000226 	beq	r2,zero,10011068 <__mcmp+0x4c>
    return i;
10011060:	e0bffa17 	ldw	r2,-24(fp)
10011064:	00002e06 	br	10011120 <__mcmp+0x104>
  xa0 = a->_x;
10011068:	e0bffe17 	ldw	r2,-8(fp)
1001106c:	10800504 	addi	r2,r2,20
10011070:	e0bffc15 	stw	r2,-16(fp)
  xa = xa0 + j;
10011074:	e0bffb17 	ldw	r2,-20(fp)
10011078:	1085883a 	add	r2,r2,r2
1001107c:	1085883a 	add	r2,r2,r2
10011080:	1007883a 	mov	r3,r2
10011084:	e0bffc17 	ldw	r2,-16(fp)
10011088:	10c5883a 	add	r2,r2,r3
1001108c:	e0bff815 	stw	r2,-32(fp)
  xb0 = b->_x;
10011090:	e0bfff17 	ldw	r2,-4(fp)
10011094:	10800504 	addi	r2,r2,20
10011098:	e0bffd15 	stw	r2,-12(fp)
  xb = xb0 + j;
1001109c:	e0bffb17 	ldw	r2,-20(fp)
100110a0:	1085883a 	add	r2,r2,r2
100110a4:	1085883a 	add	r2,r2,r2
100110a8:	1007883a 	mov	r3,r2
100110ac:	e0bffd17 	ldw	r2,-12(fp)
100110b0:	10c5883a 	add	r2,r2,r3
100110b4:	e0bff915 	stw	r2,-28(fp)
  for (;;)
    {
      if (*--xa != *--xb)
100110b8:	e0bff817 	ldw	r2,-32(fp)
100110bc:	10bfff04 	addi	r2,r2,-4
100110c0:	e0bff815 	stw	r2,-32(fp)
100110c4:	e0bff817 	ldw	r2,-32(fp)
100110c8:	10c00017 	ldw	r3,0(r2)
100110cc:	e0bff917 	ldw	r2,-28(fp)
100110d0:	10bfff04 	addi	r2,r2,-4
100110d4:	e0bff915 	stw	r2,-28(fp)
100110d8:	e0bff917 	ldw	r2,-28(fp)
100110dc:	10800017 	ldw	r2,0(r2)
100110e0:	18800926 	beq	r3,r2,10011108 <__mcmp+0xec>
	return *xa < *xb ? -1 : 1;
100110e4:	e0bff817 	ldw	r2,-32(fp)
100110e8:	10c00017 	ldw	r3,0(r2)
100110ec:	e0bff917 	ldw	r2,-28(fp)
100110f0:	10800017 	ldw	r2,0(r2)
100110f4:	1880022e 	bgeu	r3,r2,10011100 <__mcmp+0xe4>
100110f8:	00bfffc4 	movi	r2,-1
100110fc:	00000806 	br	10011120 <__mcmp+0x104>
10011100:	00800044 	movi	r2,1
10011104:	00000606 	br	10011120 <__mcmp+0x104>
      if (xa <= xa0)
10011108:	e0bff817 	ldw	r2,-32(fp)
1001110c:	e0fffc17 	ldw	r3,-16(fp)
10011110:	1880012e 	bgeu	r3,r2,10011118 <__mcmp+0xfc>
	break;
    }
10011114:	003fe806 	br	100110b8 <__alt_data_end+0xf80110b8>
  for (;;)
    {
      if (*--xa != *--xb)
	return *xa < *xb ? -1 : 1;
      if (xa <= xa0)
	break;
10011118:	0001883a 	nop
    }
  return 0;
1001111c:	0005883a 	mov	r2,zero
}
10011120:	e037883a 	mov	sp,fp
10011124:	df000017 	ldw	fp,0(sp)
10011128:	dec00104 	addi	sp,sp,4
1001112c:	f800283a 	ret

10011130 <__mdiff>:

_Bigint *
_DEFUN (diff, (ptr, a, b), struct _reent * ptr _AND
	_Bigint * a _AND _Bigint * b)
{
10011130:	deffef04 	addi	sp,sp,-68
10011134:	dfc01015 	stw	ra,64(sp)
10011138:	df000f15 	stw	fp,60(sp)
1001113c:	df000f04 	addi	fp,sp,60
10011140:	e13ffd15 	stw	r4,-12(fp)
10011144:	e17ffe15 	stw	r5,-8(fp)
10011148:	e1bfff15 	stw	r6,-4(fp)
  __ULong *xa, *xae, *xb, *xbe, *xc;
#ifdef Pack_32
  __Long z;
#endif

  i = cmp (a, b);
1001114c:	e17fff17 	ldw	r5,-4(fp)
10011150:	e13ffe17 	ldw	r4,-8(fp)
10011154:	001101c0 	call	1001101c <__mcmp>
10011158:	e0bff115 	stw	r2,-60(fp)
  if (!i)
1001115c:	e0bff117 	ldw	r2,-60(fp)
10011160:	10000b1e 	bne	r2,zero,10011190 <__mdiff+0x60>
    {
      c = Balloc (ptr, 0);
10011164:	000b883a 	mov	r5,zero
10011168:	e13ffd17 	ldw	r4,-12(fp)
1001116c:	00102040 	call	10010204 <_Balloc>
10011170:	e0bff715 	stw	r2,-36(fp)
      c->_wds = 1;
10011174:	e0bff717 	ldw	r2,-36(fp)
10011178:	00c00044 	movi	r3,1
1001117c:	10c00415 	stw	r3,16(r2)
      c->_x[0] = 0;
10011180:	e0bff717 	ldw	r2,-36(fp)
10011184:	10000515 	stw	zero,20(r2)
      return c;
10011188:	e0bff717 	ldw	r2,-36(fp)
1001118c:	00008c06 	br	100113c0 <__mdiff+0x290>
    }
  if (i < 0)
10011190:	e0bff117 	ldw	r2,-60(fp)
10011194:	1000090e 	bge	r2,zero,100111bc <__mdiff+0x8c>
    {
      c = a;
10011198:	e0bffe17 	ldw	r2,-8(fp)
1001119c:	e0bff715 	stw	r2,-36(fp)
      a = b;
100111a0:	e0bfff17 	ldw	r2,-4(fp)
100111a4:	e0bffe15 	stw	r2,-8(fp)
      b = c;
100111a8:	e0bff717 	ldw	r2,-36(fp)
100111ac:	e0bfff15 	stw	r2,-4(fp)
      i = 1;
100111b0:	00800044 	movi	r2,1
100111b4:	e0bff115 	stw	r2,-60(fp)
100111b8:	00000106 	br	100111c0 <__mdiff+0x90>
    }
  else
    i = 0;
100111bc:	e03ff115 	stw	zero,-60(fp)
  c = Balloc (ptr, a->_k);
100111c0:	e0bffe17 	ldw	r2,-8(fp)
100111c4:	10800117 	ldw	r2,4(r2)
100111c8:	100b883a 	mov	r5,r2
100111cc:	e13ffd17 	ldw	r4,-12(fp)
100111d0:	00102040 	call	10010204 <_Balloc>
100111d4:	e0bff715 	stw	r2,-36(fp)
  c->_sign = i;
100111d8:	e0bff717 	ldw	r2,-36(fp)
100111dc:	e0fff117 	ldw	r3,-60(fp)
100111e0:	10c00315 	stw	r3,12(r2)
  wa = a->_wds;
100111e4:	e0bffe17 	ldw	r2,-8(fp)
100111e8:	10800417 	ldw	r2,16(r2)
100111ec:	e0bff215 	stw	r2,-56(fp)
  xa = a->_x;
100111f0:	e0bffe17 	ldw	r2,-8(fp)
100111f4:	10800504 	addi	r2,r2,20
100111f8:	e0bff415 	stw	r2,-48(fp)
  xae = xa + wa;
100111fc:	e0bff217 	ldw	r2,-56(fp)
10011200:	1085883a 	add	r2,r2,r2
10011204:	1085883a 	add	r2,r2,r2
10011208:	1007883a 	mov	r3,r2
1001120c:	e0bff417 	ldw	r2,-48(fp)
10011210:	10c5883a 	add	r2,r2,r3
10011214:	e0bff815 	stw	r2,-32(fp)
  wb = b->_wds;
10011218:	e0bfff17 	ldw	r2,-4(fp)
1001121c:	10800417 	ldw	r2,16(r2)
10011220:	e0bff915 	stw	r2,-28(fp)
  xb = b->_x;
10011224:	e0bfff17 	ldw	r2,-4(fp)
10011228:	10800504 	addi	r2,r2,20
1001122c:	e0bff515 	stw	r2,-44(fp)
  xbe = xb + wb;
10011230:	e0bff917 	ldw	r2,-28(fp)
10011234:	1085883a 	add	r2,r2,r2
10011238:	1085883a 	add	r2,r2,r2
1001123c:	1007883a 	mov	r3,r2
10011240:	e0bff517 	ldw	r2,-44(fp)
10011244:	10c5883a 	add	r2,r2,r3
10011248:	e0bffa15 	stw	r2,-24(fp)
  xc = c->_x;
1001124c:	e0bff717 	ldw	r2,-36(fp)
10011250:	10800504 	addi	r2,r2,20
10011254:	e0bff615 	stw	r2,-40(fp)
  borrow = 0;
10011258:	e03ff315 	stw	zero,-52(fp)
#ifdef Pack_32
  do
    {
      y = (*xa & 0xffff) - (*xb & 0xffff) + borrow;
1001125c:	e0bff417 	ldw	r2,-48(fp)
10011260:	10800017 	ldw	r2,0(r2)
10011264:	10ffffcc 	andi	r3,r2,65535
10011268:	e0bff517 	ldw	r2,-44(fp)
1001126c:	10800017 	ldw	r2,0(r2)
10011270:	10bfffcc 	andi	r2,r2,65535
10011274:	1887c83a 	sub	r3,r3,r2
10011278:	e0bff317 	ldw	r2,-52(fp)
1001127c:	1885883a 	add	r2,r3,r2
10011280:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
10011284:	e0bffb17 	ldw	r2,-20(fp)
10011288:	1005d43a 	srai	r2,r2,16
1001128c:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) - (*xb++ >> 16) + borrow;
10011290:	e0bff417 	ldw	r2,-48(fp)
10011294:	10c00104 	addi	r3,r2,4
10011298:	e0fff415 	stw	r3,-48(fp)
1001129c:	10800017 	ldw	r2,0(r2)
100112a0:	1006d43a 	srli	r3,r2,16
100112a4:	e0bff517 	ldw	r2,-44(fp)
100112a8:	11000104 	addi	r4,r2,4
100112ac:	e13ff515 	stw	r4,-44(fp)
100112b0:	10800017 	ldw	r2,0(r2)
100112b4:	1004d43a 	srli	r2,r2,16
100112b8:	1887c83a 	sub	r3,r3,r2
100112bc:	e0bff317 	ldw	r2,-52(fp)
100112c0:	1885883a 	add	r2,r3,r2
100112c4:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
100112c8:	e0bffc17 	ldw	r2,-16(fp)
100112cc:	1005d43a 	srai	r2,r2,16
100112d0:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
100112d4:	e0bff617 	ldw	r2,-40(fp)
100112d8:	10c00104 	addi	r3,r2,4
100112dc:	e0fff615 	stw	r3,-40(fp)
100112e0:	e0fffc17 	ldw	r3,-16(fp)
100112e4:	1808943a 	slli	r4,r3,16
100112e8:	e0fffb17 	ldw	r3,-20(fp)
100112ec:	18ffffcc 	andi	r3,r3,65535
100112f0:	20c6b03a 	or	r3,r4,r3
100112f4:	10c00015 	stw	r3,0(r2)
    }
  while (xb < xbe);
100112f8:	e0fff517 	ldw	r3,-44(fp)
100112fc:	e0bffa17 	ldw	r2,-24(fp)
10011300:	18bfd636 	bltu	r3,r2,1001125c <__alt_data_end+0xf801125c>
  while (xa < xae)
10011304:	00001d06 	br	1001137c <__mdiff+0x24c>
    {
      y = (*xa & 0xffff) + borrow;
10011308:	e0bff417 	ldw	r2,-48(fp)
1001130c:	10800017 	ldw	r2,0(r2)
10011310:	10ffffcc 	andi	r3,r2,65535
10011314:	e0bff317 	ldw	r2,-52(fp)
10011318:	1885883a 	add	r2,r3,r2
1001131c:	e0bffb15 	stw	r2,-20(fp)
      borrow = y >> 16;
10011320:	e0bffb17 	ldw	r2,-20(fp)
10011324:	1005d43a 	srai	r2,r2,16
10011328:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, y);
      z = (*xa++ >> 16) + borrow;
1001132c:	e0bff417 	ldw	r2,-48(fp)
10011330:	10c00104 	addi	r3,r2,4
10011334:	e0fff415 	stw	r3,-48(fp)
10011338:	10800017 	ldw	r2,0(r2)
1001133c:	1006d43a 	srli	r3,r2,16
10011340:	e0bff317 	ldw	r2,-52(fp)
10011344:	1885883a 	add	r2,r3,r2
10011348:	e0bffc15 	stw	r2,-16(fp)
      borrow = z >> 16;
1001134c:	e0bffc17 	ldw	r2,-16(fp)
10011350:	1005d43a 	srai	r2,r2,16
10011354:	e0bff315 	stw	r2,-52(fp)
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
10011358:	e0bff617 	ldw	r2,-40(fp)
1001135c:	10c00104 	addi	r3,r2,4
10011360:	e0fff615 	stw	r3,-40(fp)
10011364:	e0fffc17 	ldw	r3,-16(fp)
10011368:	1808943a 	slli	r4,r3,16
1001136c:	e0fffb17 	ldw	r3,-20(fp)
10011370:	18ffffcc 	andi	r3,r3,65535
10011374:	20c6b03a 	or	r3,r4,r3
10011378:	10c00015 	stw	r3,0(r2)
      borrow = z >> 16;
      Sign_Extend (borrow, z);
      Storeinc (xc, z, y);
    }
  while (xb < xbe);
  while (xa < xae)
1001137c:	e0fff417 	ldw	r3,-48(fp)
10011380:	e0bff817 	ldw	r2,-32(fp)
10011384:	18bfe036 	bltu	r3,r2,10011308 <__alt_data_end+0xf8011308>
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
10011388:	00000306 	br	10011398 <__mdiff+0x268>
    wa--;
1001138c:	e0bff217 	ldw	r2,-56(fp)
10011390:	10bfffc4 	addi	r2,r2,-1
10011394:	e0bff215 	stw	r2,-56(fp)
      borrow = y >> 16;
      Sign_Extend (borrow, y);
      *xc++ = y & 0xffff;
    }
#endif
  while (!*--xc)
10011398:	e0bff617 	ldw	r2,-40(fp)
1001139c:	10bfff04 	addi	r2,r2,-4
100113a0:	e0bff615 	stw	r2,-40(fp)
100113a4:	e0bff617 	ldw	r2,-40(fp)
100113a8:	10800017 	ldw	r2,0(r2)
100113ac:	103ff726 	beq	r2,zero,1001138c <__alt_data_end+0xf801138c>
    wa--;
  c->_wds = wa;
100113b0:	e0bff717 	ldw	r2,-36(fp)
100113b4:	e0fff217 	ldw	r3,-56(fp)
100113b8:	10c00415 	stw	r3,16(r2)
  return c;
100113bc:	e0bff717 	ldw	r2,-36(fp)
}
100113c0:	e037883a 	mov	sp,fp
100113c4:	dfc00117 	ldw	ra,4(sp)
100113c8:	df000017 	ldw	fp,0(sp)
100113cc:	dec00204 	addi	sp,sp,8
100113d0:	f800283a 	ret

100113d4 <__ulp>:

double
_DEFUN (ulp, (_x), double _x)
{
100113d4:	defff804 	addi	sp,sp,-32
100113d8:	df000715 	stw	fp,28(sp)
100113dc:	dc000615 	stw	r16,24(sp)
100113e0:	df000704 	addi	fp,sp,28
100113e4:	e13ffd15 	stw	r4,-12(fp)
100113e8:	e17ffe15 	stw	r5,-8(fp)
  union double_union x, a;
  register __Long L;

  x.d = _x;
100113ec:	e0bffd17 	ldw	r2,-12(fp)
100113f0:	e0bff915 	stw	r2,-28(fp)
100113f4:	e0bffe17 	ldw	r2,-8(fp)
100113f8:	e0bffa15 	stw	r2,-24(fp)

  L = (word0 (x) & Exp_mask) - (P - 1) * Exp_msk1;
100113fc:	e0bffa17 	ldw	r2,-24(fp)
10011400:	10dffc2c 	andhi	r3,r2,32752
10011404:	00bf3034 	movhi	r2,64704
10011408:	1885883a 	add	r2,r3,r2
1001140c:	1021883a 	mov	r16,r2
#ifndef Sudden_Underflow
  if (L > 0)
10011410:	0400040e 	bge	zero,r16,10011424 <__ulp+0x50>
    {
#endif
#ifdef IBM
      L |= Exp_msk1 >> 4;
#endif
      word0 (a) = L;
10011414:	8005883a 	mov	r2,r16
10011418:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
      word1 (a) = 0;
1001141c:	e03ffb15 	stw	zero,-20(fp)
10011420:	00001406 	br	10011474 <__ulp+0xa0>

#ifndef Sudden_Underflow
    }
  else
    {
      L = -L >> Exp_shift;
10011424:	0405c83a 	sub	r2,zero,r16
10011428:	1021d53a 	srai	r16,r2,20
      if (L < Exp_shift)
1001142c:	80800508 	cmpgei	r2,r16,20
10011430:	1000051e 	bne	r2,zero,10011448 <__ulp+0x74>
	{
	  word0 (a) = 0x80000 >> L;
10011434:	00800234 	movhi	r2,8
10011438:	1405d83a 	sra	r2,r2,r16
1001143c:	e0bffc15 	stw	r2,-16(fp)
#ifndef _DOUBLE_IS_32BITS
	  word1 (a) = 0;
10011440:	e03ffb15 	stw	zero,-20(fp)
10011444:	00000b06 	br	10011474 <__ulp+0xa0>
#endif
	}
      else
	{
	  word0 (a) = 0;
10011448:	e03ffc15 	stw	zero,-16(fp)
	  L -= Exp_shift;
1001144c:	843ffb04 	addi	r16,r16,-20
#ifndef _DOUBLE_IS_32BITS
         word1 (a) = L >= 31 ? 1 : 1 << (31 - L);
10011450:	808007c8 	cmpgei	r2,r16,31
10011454:	1000051e 	bne	r2,zero,1001146c <__ulp+0x98>
10011458:	008007c4 	movi	r2,31
1001145c:	1405c83a 	sub	r2,r2,r16
10011460:	00c00044 	movi	r3,1
10011464:	1884983a 	sll	r2,r3,r2
10011468:	00000106 	br	10011470 <__ulp+0x9c>
1001146c:	00800044 	movi	r2,1
10011470:	e0bffb15 	stw	r2,-20(fp)
#endif
	}
    }
#endif
  return a.d;
10011474:	e0bffb17 	ldw	r2,-20(fp)
10011478:	e0fffc17 	ldw	r3,-16(fp)
1001147c:	1009883a 	mov	r4,r2
10011480:	180b883a 	mov	r5,r3
}
10011484:	2005883a 	mov	r2,r4
10011488:	2807883a 	mov	r3,r5
1001148c:	e6ffff04 	addi	sp,fp,-4
10011490:	df000117 	ldw	fp,4(sp)
10011494:	dc000017 	ldw	r16,0(sp)
10011498:	dec00204 	addi	sp,sp,8
1001149c:	f800283a 	ret

100114a0 <__b2d>:

double
_DEFUN (b2d, (a, e),
	_Bigint * a _AND int *e)
{
100114a0:	defff404 	addi	sp,sp,-48
100114a4:	dfc00b15 	stw	ra,44(sp)
100114a8:	df000a15 	stw	fp,40(sp)
100114ac:	df000a04 	addi	fp,sp,40
100114b0:	e13ffe15 	stw	r4,-8(fp)
100114b4:	e17fff15 	stw	r5,-4(fp)
#else
#define d0 word0(d)
#define d1 word1(d)
#endif

  xa0 = a->_x;
100114b8:	e0bffe17 	ldw	r2,-8(fp)
100114bc:	10800504 	addi	r2,r2,20
100114c0:	e0bff715 	stw	r2,-36(fp)
  xa = xa0 + a->_wds;
100114c4:	e0bffe17 	ldw	r2,-8(fp)
100114c8:	10800417 	ldw	r2,16(r2)
100114cc:	1085883a 	add	r2,r2,r2
100114d0:	1085883a 	add	r2,r2,r2
100114d4:	1007883a 	mov	r3,r2
100114d8:	e0bff717 	ldw	r2,-36(fp)
100114dc:	10c5883a 	add	r2,r2,r3
100114e0:	e0bff615 	stw	r2,-40(fp)
  y = *--xa;
100114e4:	e0bff617 	ldw	r2,-40(fp)
100114e8:	10bfff04 	addi	r2,r2,-4
100114ec:	e0bff615 	stw	r2,-40(fp)
100114f0:	e0bff617 	ldw	r2,-40(fp)
100114f4:	10800017 	ldw	r2,0(r2)
100114f8:	e0bff815 	stw	r2,-32(fp)
#ifdef DEBUG
  if (!y)
    Bug ("zero y in b2d");
#endif
  k = hi0bits (y);
100114fc:	e13ff817 	ldw	r4,-32(fp)
10011500:	00106e80 	call	100106e8 <__hi0bits>
10011504:	e0bff915 	stw	r2,-28(fp)
  *e = 32 - k;
10011508:	00c00804 	movi	r3,32
1001150c:	e0bff917 	ldw	r2,-28(fp)
10011510:	1887c83a 	sub	r3,r3,r2
10011514:	e0bfff17 	ldw	r2,-4(fp)
10011518:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
  if (k < Ebits)
1001151c:	e0bff917 	ldw	r2,-28(fp)
10011520:	108002c8 	cmpgei	r2,r2,11
10011524:	10001e1e 	bne	r2,zero,100115a0 <__b2d+0x100>
    {
      d0 = Exp_1 | y >> (Ebits - k);
10011528:	00c002c4 	movi	r3,11
1001152c:	e0bff917 	ldw	r2,-28(fp)
10011530:	1885c83a 	sub	r2,r3,r2
10011534:	e0fff817 	ldw	r3,-32(fp)
10011538:	1884d83a 	srl	r2,r3,r2
1001153c:	108ffc34 	orhi	r2,r2,16368
10011540:	e0bffd15 	stw	r2,-12(fp)
      w = xa > xa0 ? *--xa : 0;
10011544:	e0bff617 	ldw	r2,-40(fp)
10011548:	e0fff717 	ldw	r3,-36(fp)
1001154c:	1880062e 	bgeu	r3,r2,10011568 <__b2d+0xc8>
10011550:	e0bff617 	ldw	r2,-40(fp)
10011554:	10bfff04 	addi	r2,r2,-4
10011558:	e0bff615 	stw	r2,-40(fp)
1001155c:	e0bff617 	ldw	r2,-40(fp)
10011560:	10800017 	ldw	r2,0(r2)
10011564:	00000106 	br	1001156c <__b2d+0xcc>
10011568:	0005883a 	mov	r2,zero
1001156c:	e0bffa15 	stw	r2,-24(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = y << ((32 - Ebits) + k) | w >> (Ebits - k);
10011570:	e0bff917 	ldw	r2,-28(fp)
10011574:	10800544 	addi	r2,r2,21
10011578:	e0fff817 	ldw	r3,-32(fp)
1001157c:	1886983a 	sll	r3,r3,r2
10011580:	010002c4 	movi	r4,11
10011584:	e0bff917 	ldw	r2,-28(fp)
10011588:	2085c83a 	sub	r2,r4,r2
1001158c:	e13ffa17 	ldw	r4,-24(fp)
10011590:	2084d83a 	srl	r2,r4,r2
10011594:	1884b03a 	or	r2,r3,r2
10011598:	e0bffc15 	stw	r2,-16(fp)
#endif
      goto ret_d;
1001159c:	00003606 	br	10011678 <__b2d+0x1d8>
    }
  z = xa > xa0 ? *--xa : 0;
100115a0:	e0bff617 	ldw	r2,-40(fp)
100115a4:	e0fff717 	ldw	r3,-36(fp)
100115a8:	1880062e 	bgeu	r3,r2,100115c4 <__b2d+0x124>
100115ac:	e0bff617 	ldw	r2,-40(fp)
100115b0:	10bfff04 	addi	r2,r2,-4
100115b4:	e0bff615 	stw	r2,-40(fp)
100115b8:	e0bff617 	ldw	r2,-40(fp)
100115bc:	10800017 	ldw	r2,0(r2)
100115c0:	00000106 	br	100115c8 <__b2d+0x128>
100115c4:	0005883a 	mov	r2,zero
100115c8:	e0bffb15 	stw	r2,-20(fp)
  if (k -= Ebits)
100115cc:	e0bff917 	ldw	r2,-28(fp)
100115d0:	10bffd44 	addi	r2,r2,-11
100115d4:	e0bff915 	stw	r2,-28(fp)
100115d8:	e0bff917 	ldw	r2,-28(fp)
100115dc:	10002126 	beq	r2,zero,10011664 <__b2d+0x1c4>
    {
      d0 = Exp_1 | y << k | z >> (32 - k);
100115e0:	e0fff817 	ldw	r3,-32(fp)
100115e4:	e0bff917 	ldw	r2,-28(fp)
100115e8:	1886983a 	sll	r3,r3,r2
100115ec:	01000804 	movi	r4,32
100115f0:	e0bff917 	ldw	r2,-28(fp)
100115f4:	2085c83a 	sub	r2,r4,r2
100115f8:	e13ffb17 	ldw	r4,-20(fp)
100115fc:	2084d83a 	srl	r2,r4,r2
10011600:	1884b03a 	or	r2,r3,r2
10011604:	108ffc34 	orhi	r2,r2,16368
10011608:	e0bffd15 	stw	r2,-12(fp)
      y = xa > xa0 ? *--xa : 0;
1001160c:	e0bff617 	ldw	r2,-40(fp)
10011610:	e0fff717 	ldw	r3,-36(fp)
10011614:	1880062e 	bgeu	r3,r2,10011630 <__b2d+0x190>
10011618:	e0bff617 	ldw	r2,-40(fp)
1001161c:	10bfff04 	addi	r2,r2,-4
10011620:	e0bff615 	stw	r2,-40(fp)
10011624:	e0bff617 	ldw	r2,-40(fp)
10011628:	10800017 	ldw	r2,0(r2)
1001162c:	00000106 	br	10011634 <__b2d+0x194>
10011630:	0005883a 	mov	r2,zero
10011634:	e0bff815 	stw	r2,-32(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z << k | y >> (32 - k);
10011638:	e0fffb17 	ldw	r3,-20(fp)
1001163c:	e0bff917 	ldw	r2,-28(fp)
10011640:	1886983a 	sll	r3,r3,r2
10011644:	01000804 	movi	r4,32
10011648:	e0bff917 	ldw	r2,-28(fp)
1001164c:	2085c83a 	sub	r2,r4,r2
10011650:	e13ff817 	ldw	r4,-32(fp)
10011654:	2084d83a 	srl	r2,r4,r2
10011658:	1884b03a 	or	r2,r3,r2
1001165c:	e0bffc15 	stw	r2,-16(fp)
10011660:	00000506 	br	10011678 <__b2d+0x1d8>
#endif
    }
  else
    {
      d0 = Exp_1 | y;
10011664:	e0bff817 	ldw	r2,-32(fp)
10011668:	108ffc34 	orhi	r2,r2,16368
1001166c:	e0bffd15 	stw	r2,-12(fp)
#ifndef _DOUBLE_IS_32BITS
      d1 = z;
10011670:	e0bffb17 	ldw	r2,-20(fp)
10011674:	e0bffc15 	stw	r2,-16(fp)
  word1 (d) = d1 >> 16 | d1 << 16;
#else
#undef d0
#undef d1
#endif
  return d.d;
10011678:	e0bffc17 	ldw	r2,-16(fp)
1001167c:	e0fffd17 	ldw	r3,-12(fp)
10011680:	1009883a 	mov	r4,r2
10011684:	180b883a 	mov	r5,r3
}
10011688:	2005883a 	mov	r2,r4
1001168c:	2807883a 	mov	r3,r5
10011690:	e037883a 	mov	sp,fp
10011694:	dfc00117 	ldw	ra,4(sp)
10011698:	df000017 	ldw	fp,0(sp)
1001169c:	dec00204 	addi	sp,sp,8
100116a0:	f800283a 	ret

100116a4 <__d2b>:
	struct _reent * ptr _AND
	double _d _AND
	int *e _AND
	int *bits)

{
100116a4:	defff004 	addi	sp,sp,-64
100116a8:	dfc00f15 	stw	ra,60(sp)
100116ac:	df000e15 	stw	fp,56(sp)
100116b0:	dc000d15 	stw	r16,52(sp)
100116b4:	df000e04 	addi	fp,sp,56
100116b8:	e13ffb15 	stw	r4,-20(fp)
100116bc:	e17ffc15 	stw	r5,-16(fp)
100116c0:	e1bffd15 	stw	r6,-12(fp)
100116c4:	e1fffe15 	stw	r7,-8(fp)
  int de, i, k;
  __ULong *x, y, z;
#ifdef VAX
  __ULong d0, d1;
#endif
  d.d = _d;
100116c8:	e0bffc17 	ldw	r2,-16(fp)
100116cc:	e0bff715 	stw	r2,-36(fp)
100116d0:	e0bffd17 	ldw	r2,-12(fp)
100116d4:	e0bff815 	stw	r2,-32(fp)
  d0 = word0 (d) >> 16 | word0 (d) << 16;
  d1 = word1 (d) >> 16 | word1 (d) << 16;
#else
#define d0 word0(d)
#define d1 word1(d)
  d.d = _d;
100116d8:	e0bffc17 	ldw	r2,-16(fp)
100116dc:	e0bff715 	stw	r2,-36(fp)
100116e0:	e0bffd17 	ldw	r2,-12(fp)
100116e4:	e0bff815 	stw	r2,-32(fp)
#endif

#ifdef Pack_32
  b = Balloc (ptr, 1);
100116e8:	01400044 	movi	r5,1
100116ec:	e13ffb17 	ldw	r4,-20(fp)
100116f0:	00102040 	call	10010204 <_Balloc>
100116f4:	e0bff415 	stw	r2,-48(fp)
#else
  b = Balloc (ptr, 2);
#endif
  x = b->_x;
100116f8:	e0bff417 	ldw	r2,-48(fp)
100116fc:	10800504 	addi	r2,r2,20
10011700:	e0bff515 	stw	r2,-44(fp)

  z = d0 & Frac_mask;
10011704:	e0fff817 	ldw	r3,-32(fp)
10011708:	00800434 	movhi	r2,16
1001170c:	10bfffc4 	addi	r2,r2,-1
10011710:	1884703a 	and	r2,r3,r2
10011714:	e0bffa15 	stw	r2,-24(fp)
  d0 &= 0x7fffffff;		/* clear sign bit, which we ignore */
10011718:	e0fff817 	ldw	r3,-32(fp)
1001171c:	00a00034 	movhi	r2,32768
10011720:	10bfffc4 	addi	r2,r2,-1
10011724:	1884703a 	and	r2,r3,r2
10011728:	e0bff815 	stw	r2,-32(fp)
  de = (int) (d0 >> Exp_shift);
#ifndef IBM
  z |= Exp_msk11;
#endif
#else
  if ((de = (int) (d0 >> Exp_shift)) != 0)
1001172c:	e0bff817 	ldw	r2,-32(fp)
10011730:	1004d53a 	srli	r2,r2,20
10011734:	e0bff615 	stw	r2,-40(fp)
10011738:	e0bff617 	ldw	r2,-40(fp)
1001173c:	10000326 	beq	r2,zero,1001174c <__d2b+0xa8>
    z |= Exp_msk1;
10011740:	e0bffa17 	ldw	r2,-24(fp)
10011744:	10800434 	orhi	r2,r2,16
10011748:	e0bffa15 	stw	r2,-24(fp)
#endif
#ifdef Pack_32
#ifndef _DOUBLE_IS_32BITS
  if (d1)
1001174c:	e0bff717 	ldw	r2,-36(fp)
10011750:	10002826 	beq	r2,zero,100117f4 <__d2b+0x150>
    {
      y = d1;
10011754:	e0bff717 	ldw	r2,-36(fp)
10011758:	e0bff915 	stw	r2,-28(fp)
      k = lo0bits (&y);
1001175c:	e0bff904 	addi	r2,fp,-28
10011760:	1009883a 	mov	r4,r2
10011764:	00107780 	call	10010778 <__lo0bits>
10011768:	e0bff315 	stw	r2,-52(fp)
      if (k)
1001176c:	e0bff317 	ldw	r2,-52(fp)
10011770:	10000e26 	beq	r2,zero,100117ac <__d2b+0x108>
	{
         x[0] = y | z << (32 - k);
10011774:	e0fffa17 	ldw	r3,-24(fp)
10011778:	01000804 	movi	r4,32
1001177c:	e0bff317 	ldw	r2,-52(fp)
10011780:	2085c83a 	sub	r2,r4,r2
10011784:	1886983a 	sll	r3,r3,r2
10011788:	e0bff917 	ldw	r2,-28(fp)
1001178c:	1886b03a 	or	r3,r3,r2
10011790:	e0bff517 	ldw	r2,-44(fp)
10011794:	10c00015 	stw	r3,0(r2)
	  z >>= k;
10011798:	e0fffa17 	ldw	r3,-24(fp)
1001179c:	e0bff317 	ldw	r2,-52(fp)
100117a0:	1884d83a 	srl	r2,r3,r2
100117a4:	e0bffa15 	stw	r2,-24(fp)
100117a8:	00000306 	br	100117b8 <__d2b+0x114>
	}
      else
	x[0] = y;
100117ac:	e0fff917 	ldw	r3,-28(fp)
100117b0:	e0bff517 	ldw	r2,-44(fp)
100117b4:	10c00015 	stw	r3,0(r2)
      i = b->_wds = (x[1] = z) ? 2 : 1;
100117b8:	e0bff517 	ldw	r2,-44(fp)
100117bc:	10800104 	addi	r2,r2,4
100117c0:	e0fffa17 	ldw	r3,-24(fp)
100117c4:	10c00015 	stw	r3,0(r2)
100117c8:	10800017 	ldw	r2,0(r2)
100117cc:	10000226 	beq	r2,zero,100117d8 <__d2b+0x134>
100117d0:	00800084 	movi	r2,2
100117d4:	00000106 	br	100117dc <__d2b+0x138>
100117d8:	00800044 	movi	r2,1
100117dc:	e0fff417 	ldw	r3,-48(fp)
100117e0:	18800415 	stw	r2,16(r3)
100117e4:	e0bff417 	ldw	r2,-48(fp)
100117e8:	10800417 	ldw	r2,16(r2)
100117ec:	e0bff215 	stw	r2,-56(fp)
100117f0:	00001006 	br	10011834 <__d2b+0x190>
    {
#ifdef DEBUG
      if (!z)
	Bug ("Zero passed to d2b");
#endif
      k = lo0bits (&z);
100117f4:	e0bffa04 	addi	r2,fp,-24
100117f8:	1009883a 	mov	r4,r2
100117fc:	00107780 	call	10010778 <__lo0bits>
10011800:	e0bff315 	stw	r2,-52(fp)
      x[0] = z;
10011804:	e0fffa17 	ldw	r3,-24(fp)
10011808:	e0bff517 	ldw	r2,-44(fp)
1001180c:	10c00015 	stw	r3,0(r2)
      i = b->_wds = 1;
10011810:	e0bff417 	ldw	r2,-48(fp)
10011814:	00c00044 	movi	r3,1
10011818:	10c00415 	stw	r3,16(r2)
1001181c:	e0bff417 	ldw	r2,-48(fp)
10011820:	10800417 	ldw	r2,16(r2)
10011824:	e0bff215 	stw	r2,-56(fp)
#ifndef _DOUBLE_IS_32BITS
      k += 32;
10011828:	e0bff317 	ldw	r2,-52(fp)
1001182c:	10800804 	addi	r2,r2,32
10011830:	e0bff315 	stw	r2,-52(fp)
  while (!x[i])
    --i;
  b->_wds = i + 1;
#endif
#ifndef Sudden_Underflow
  if (de)
10011834:	e0bff617 	ldw	r2,-40(fp)
10011838:	10000c26 	beq	r2,zero,1001186c <__d2b+0x1c8>
#endif
#ifdef IBM
      *e = (de - Bias - (P - 1) << 2) + k;
      *bits = 4 * P + 8 - k - hi0bits (word0 (d) & Frac_mask);
#else
      *e = de - Bias - (P - 1) + k;
1001183c:	e0bff617 	ldw	r2,-40(fp)
10011840:	10fef344 	addi	r3,r2,-1075
10011844:	e0bff317 	ldw	r2,-52(fp)
10011848:	1887883a 	add	r3,r3,r2
1001184c:	e0bffe17 	ldw	r2,-8(fp)
10011850:	10c00015 	stw	r3,0(r2)
      *bits = P - k;
10011854:	00c00d44 	movi	r3,53
10011858:	e0bff317 	ldw	r2,-52(fp)
1001185c:	1887c83a 	sub	r3,r3,r2
10011860:	e0800217 	ldw	r2,8(fp)
10011864:	10c00015 	stw	r3,0(r2)
10011868:	00001706 	br	100118c8 <__d2b+0x224>
#endif
#ifndef Sudden_Underflow
    }
  else
    {
      *e = de - Bias - (P - 1) + 1 + k;
1001186c:	e0bff617 	ldw	r2,-40(fp)
10011870:	10fef384 	addi	r3,r2,-1074
10011874:	e0bff317 	ldw	r2,-52(fp)
10011878:	1887883a 	add	r3,r3,r2
1001187c:	e0bffe17 	ldw	r2,-8(fp)
10011880:	10c00015 	stw	r3,0(r2)
#ifdef Pack_32
      *bits = 32 * i - hi0bits (x[i - 1]);
10011884:	e0bff217 	ldw	r2,-56(fp)
10011888:	1020917a 	slli	r16,r2,5
1001188c:	e0fff217 	ldw	r3,-56(fp)
10011890:	00900034 	movhi	r2,16384
10011894:	10bfffc4 	addi	r2,r2,-1
10011898:	1885883a 	add	r2,r3,r2
1001189c:	1085883a 	add	r2,r2,r2
100118a0:	1085883a 	add	r2,r2,r2
100118a4:	1007883a 	mov	r3,r2
100118a8:	e0bff517 	ldw	r2,-44(fp)
100118ac:	10c5883a 	add	r2,r2,r3
100118b0:	10800017 	ldw	r2,0(r2)
100118b4:	1009883a 	mov	r4,r2
100118b8:	00106e80 	call	100106e8 <__hi0bits>
100118bc:	8087c83a 	sub	r3,r16,r2
100118c0:	e0800217 	ldw	r2,8(fp)
100118c4:	10c00015 	stw	r3,0(r2)
#else
      *bits = (i + 2) * 16 - hi0bits (x[i]);
#endif
    }
#endif
  return b;
100118c8:	e0bff417 	ldw	r2,-48(fp)
}
100118cc:	e6ffff04 	addi	sp,fp,-4
100118d0:	dfc00217 	ldw	ra,8(sp)
100118d4:	df000117 	ldw	fp,4(sp)
100118d8:	dc000017 	ldw	r16,0(sp)
100118dc:	dec00304 	addi	sp,sp,12
100118e0:	f800283a 	ret

100118e4 <__ratio>:
#undef d1

double
_DEFUN (ratio, (a, b), _Bigint * a _AND _Bigint * b)

{
100118e4:	defff504 	addi	sp,sp,-44
100118e8:	dfc00a15 	stw	ra,40(sp)
100118ec:	df000915 	stw	fp,36(sp)
100118f0:	df000904 	addi	fp,sp,36
100118f4:	e13ffe15 	stw	r4,-8(fp)
100118f8:	e17fff15 	stw	r5,-4(fp)
  union double_union da, db;
  int k, ka, kb;

  da.d = b2d (a, &ka);
100118fc:	e0bffc04 	addi	r2,fp,-16
10011900:	100b883a 	mov	r5,r2
10011904:	e13ffe17 	ldw	r4,-8(fp)
10011908:	00114a00 	call	100114a0 <__b2d>
1001190c:	1009883a 	mov	r4,r2
10011910:	180b883a 	mov	r5,r3
10011914:	e13ff815 	stw	r4,-32(fp)
10011918:	e17ff915 	stw	r5,-28(fp)
  db.d = b2d (b, &kb);
1001191c:	e0bffd04 	addi	r2,fp,-12
10011920:	100b883a 	mov	r5,r2
10011924:	e13fff17 	ldw	r4,-4(fp)
10011928:	00114a00 	call	100114a0 <__b2d>
1001192c:	1009883a 	mov	r4,r2
10011930:	180b883a 	mov	r5,r3
10011934:	e13ffa15 	stw	r4,-24(fp)
10011938:	e17ffb15 	stw	r5,-20(fp)
#ifdef Pack_32
  k = ka - kb + 32 * (a->_wds - b->_wds);
1001193c:	e0fffc17 	ldw	r3,-16(fp)
10011940:	e0bffd17 	ldw	r2,-12(fp)
10011944:	1887c83a 	sub	r3,r3,r2
10011948:	e0bffe17 	ldw	r2,-8(fp)
1001194c:	11000417 	ldw	r4,16(r2)
10011950:	e0bfff17 	ldw	r2,-4(fp)
10011954:	10800417 	ldw	r2,16(r2)
10011958:	2085c83a 	sub	r2,r4,r2
1001195c:	1004917a 	slli	r2,r2,5
10011960:	1885883a 	add	r2,r3,r2
10011964:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += (k >> 2) * Exp_msk1;
      if (k &= 3)
	db.d *= 1 << k;
    }
#else
  if (k > 0)
10011968:	e0bff717 	ldw	r2,-36(fp)
1001196c:	0080060e 	bge	zero,r2,10011988 <__ratio+0xa4>
    word0 (da) += k * Exp_msk1;
10011970:	e0fff917 	ldw	r3,-28(fp)
10011974:	e0bff717 	ldw	r2,-36(fp)
10011978:	1004953a 	slli	r2,r2,20
1001197c:	1885883a 	add	r2,r3,r2
10011980:	e0bff915 	stw	r2,-28(fp)
10011984:	00000806 	br	100119a8 <__ratio+0xc4>
  else
    {
      k = -k;
10011988:	e0bff717 	ldw	r2,-36(fp)
1001198c:	0085c83a 	sub	r2,zero,r2
10011990:	e0bff715 	stw	r2,-36(fp)
      word0 (db) += k * Exp_msk1;
10011994:	e0fffb17 	ldw	r3,-20(fp)
10011998:	e0bff717 	ldw	r2,-36(fp)
1001199c:	1004953a 	slli	r2,r2,20
100119a0:	1885883a 	add	r2,r3,r2
100119a4:	e0bffb15 	stw	r2,-20(fp)
    }
#endif
  return da.d / db.d;
100119a8:	e0bff817 	ldw	r2,-32(fp)
100119ac:	e0fff917 	ldw	r3,-28(fp)
100119b0:	e13ffa17 	ldw	r4,-24(fp)
100119b4:	e17ffb17 	ldw	r5,-20(fp)
100119b8:	200d883a 	mov	r6,r4
100119bc:	280f883a 	mov	r7,r5
100119c0:	1009883a 	mov	r4,r2
100119c4:	180b883a 	mov	r5,r3
100119c8:	00046940 	call	10004694 <__divdf3>
100119cc:	100f883a 	mov	r7,r2
100119d0:	1811883a 	mov	r8,r3
100119d4:	380b883a 	mov	r5,r7
100119d8:	400d883a 	mov	r6,r8
100119dc:	2807883a 	mov	r3,r5
100119e0:	3009883a 	mov	r4,r6
}
100119e4:	1805883a 	mov	r2,r3
100119e8:	2007883a 	mov	r3,r4
100119ec:	e037883a 	mov	sp,fp
100119f0:	dfc00117 	ldw	ra,4(sp)
100119f4:	df000017 	ldw	fp,0(sp)
100119f8:	dec00204 	addi	sp,sp,8
100119fc:	f800283a 	ret

10011a00 <_mprec_log10>:


double
_DEFUN (_mprec_log10, (dig),
	int dig)
{
10011a00:	defffb04 	addi	sp,sp,-20
10011a04:	dfc00415 	stw	ra,16(sp)
10011a08:	df000315 	stw	fp,12(sp)
10011a0c:	df000304 	addi	fp,sp,12
10011a10:	e13fff15 	stw	r4,-4(fp)
  double v = 1.0;
10011a14:	e03ffd15 	stw	zero,-12(fp)
10011a18:	008ffc34 	movhi	r2,16368
10011a1c:	e0bffe15 	stw	r2,-8(fp)
  if (dig < 24)
10011a20:	e0bfff17 	ldw	r2,-4(fp)
10011a24:	10800608 	cmpgei	r2,r2,24
10011a28:	1000141e 	bne	r2,zero,10011a7c <_mprec_log10+0x7c>
    return tens[dig];
10011a2c:	00840374 	movhi	r2,4109
10011a30:	10be6104 	addi	r2,r2,-1660
10011a34:	e0ffff17 	ldw	r3,-4(fp)
10011a38:	180690fa 	slli	r3,r3,3
10011a3c:	10c9883a 	add	r4,r2,r3
10011a40:	20800017 	ldw	r2,0(r4)
10011a44:	20c00117 	ldw	r3,4(r4)
10011a48:	00001006 	br	10011a8c <_mprec_log10+0x8c>
  while (dig > 0)
    {
      v *= 10;
10011a4c:	000d883a 	mov	r6,zero
10011a50:	01d00934 	movhi	r7,16420
10011a54:	e13ffd17 	ldw	r4,-12(fp)
10011a58:	e17ffe17 	ldw	r5,-8(fp)
10011a5c:	00051580 	call	10005158 <__muldf3>
10011a60:	1009883a 	mov	r4,r2
10011a64:	180b883a 	mov	r5,r3
10011a68:	e13ffd15 	stw	r4,-12(fp)
10011a6c:	e17ffe15 	stw	r5,-8(fp)
      dig--;
10011a70:	e0bfff17 	ldw	r2,-4(fp)
10011a74:	10bfffc4 	addi	r2,r2,-1
10011a78:	e0bfff15 	stw	r2,-4(fp)
	int dig)
{
  double v = 1.0;
  if (dig < 24)
    return tens[dig];
  while (dig > 0)
10011a7c:	e0bfff17 	ldw	r2,-4(fp)
10011a80:	00bff216 	blt	zero,r2,10011a4c <__alt_data_end+0xf8011a4c>
    {
      v *= 10;
      dig--;
    }
  return v;
10011a84:	e0bffd17 	ldw	r2,-12(fp)
10011a88:	e0fffe17 	ldw	r3,-8(fp)
10011a8c:	1009883a 	mov	r4,r2
10011a90:	180b883a 	mov	r5,r3
}
10011a94:	2005883a 	mov	r2,r4
10011a98:	2807883a 	mov	r3,r5
10011a9c:	e037883a 	mov	sp,fp
10011aa0:	dfc00117 	ldw	ra,4(sp)
10011aa4:	df000017 	ldw	fp,0(sp)
10011aa8:	dec00204 	addi	sp,sp,8
10011aac:	f800283a 	ret

10011ab0 <__copybits>:
void
_DEFUN (copybits, (c, n, b),
	__ULong *c _AND
	int n _AND
	_Bigint *b)
{
10011ab0:	defff904 	addi	sp,sp,-28
10011ab4:	df000615 	stw	fp,24(sp)
10011ab8:	df000604 	addi	fp,sp,24
10011abc:	e13ffd15 	stw	r4,-12(fp)
10011ac0:	e17ffe15 	stw	r5,-8(fp)
10011ac4:	e1bfff15 	stw	r6,-4(fp)
	__ULong *ce, *x, *xe;
#ifdef Pack_16
	int nw, nw1;
#endif

	ce = c + ((n-1) >> kshift) + 1;
10011ac8:	e0bffe17 	ldw	r2,-8(fp)
10011acc:	10bfffc4 	addi	r2,r2,-1
10011ad0:	1005d17a 	srai	r2,r2,5
10011ad4:	10800044 	addi	r2,r2,1
10011ad8:	1085883a 	add	r2,r2,r2
10011adc:	1085883a 	add	r2,r2,r2
10011ae0:	1007883a 	mov	r3,r2
10011ae4:	e0bffd17 	ldw	r2,-12(fp)
10011ae8:	10c5883a 	add	r2,r2,r3
10011aec:	e0bffb15 	stw	r2,-20(fp)
	x = b->_x;
10011af0:	e0bfff17 	ldw	r2,-4(fp)
10011af4:	10800504 	addi	r2,r2,20
10011af8:	e0bffa15 	stw	r2,-24(fp)
#ifdef Pack_32
	xe = x + b->_wds;
10011afc:	e0bfff17 	ldw	r2,-4(fp)
10011b00:	10800417 	ldw	r2,16(r2)
10011b04:	1085883a 	add	r2,r2,r2
10011b08:	1085883a 	add	r2,r2,r2
10011b0c:	1007883a 	mov	r3,r2
10011b10:	e0bffa17 	ldw	r2,-24(fp)
10011b14:	10c5883a 	add	r2,r2,r3
10011b18:	e0bffc15 	stw	r2,-16(fp)
	while(x < xe)
10011b1c:	00000806 	br	10011b40 <__copybits+0x90>
		*c++ = *x++;
10011b20:	e0bffd17 	ldw	r2,-12(fp)
10011b24:	10c00104 	addi	r3,r2,4
10011b28:	e0fffd15 	stw	r3,-12(fp)
10011b2c:	e0fffa17 	ldw	r3,-24(fp)
10011b30:	19000104 	addi	r4,r3,4
10011b34:	e13ffa15 	stw	r4,-24(fp)
10011b38:	18c00017 	ldw	r3,0(r3)
10011b3c:	10c00015 	stw	r3,0(r2)

	ce = c + ((n-1) >> kshift) + 1;
	x = b->_x;
#ifdef Pack_32
	xe = x + b->_wds;
	while(x < xe)
10011b40:	e0fffa17 	ldw	r3,-24(fp)
10011b44:	e0bffc17 	ldw	r2,-16(fp)
10011b48:	18bff536 	bltu	r3,r2,10011b20 <__alt_data_end+0xf8011b20>
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
10011b4c:	00000406 	br	10011b60 <__copybits+0xb0>
		*c++ = 0;
10011b50:	e0bffd17 	ldw	r2,-12(fp)
10011b54:	10c00104 	addi	r3,r2,4
10011b58:	e0fffd15 	stw	r3,-12(fp)
10011b5c:	10000015 	stw	zero,0(r2)
	for(xe = x + (nw - nw1); x < xe; x += 2)
		Storeinc(c, x[1], x[0]);
	if (nw1)
		*c++ = *x;
#endif
	while(c < ce)
10011b60:	e0fffd17 	ldw	r3,-12(fp)
10011b64:	e0bffb17 	ldw	r2,-20(fp)
10011b68:	18bff936 	bltu	r3,r2,10011b50 <__alt_data_end+0xf8011b50>
		*c++ = 0;
}
10011b6c:	0001883a 	nop
10011b70:	e037883a 	mov	sp,fp
10011b74:	df000017 	ldw	fp,0(sp)
10011b78:	dec00104 	addi	sp,sp,4
10011b7c:	f800283a 	ret

10011b80 <__any_on>:

__ULong
_DEFUN (any_on, (b, k),
	_Bigint *b _AND
	int k)
{
10011b80:	defff704 	addi	sp,sp,-36
10011b84:	df000815 	stw	fp,32(sp)
10011b88:	df000804 	addi	fp,sp,32
10011b8c:	e13ffe15 	stw	r4,-8(fp)
10011b90:	e17fff15 	stw	r5,-4(fp)
	int n, nwds;
	__ULong *x, *x0, x1, x2;

	x = b->_x;
10011b94:	e0bffe17 	ldw	r2,-8(fp)
10011b98:	10800504 	addi	r2,r2,20
10011b9c:	e0bff915 	stw	r2,-28(fp)
	nwds = b->_wds;
10011ba0:	e0bffe17 	ldw	r2,-8(fp)
10011ba4:	10800417 	ldw	r2,16(r2)
10011ba8:	e0bffa15 	stw	r2,-24(fp)
	n = k >> kshift;
10011bac:	e0bfff17 	ldw	r2,-4(fp)
10011bb0:	1005d17a 	srai	r2,r2,5
10011bb4:	e0bff815 	stw	r2,-32(fp)
	if (n > nwds)
10011bb8:	e0bff817 	ldw	r2,-32(fp)
10011bbc:	e0fffa17 	ldw	r3,-24(fp)
10011bc0:	1880030e 	bge	r3,r2,10011bd0 <__any_on+0x50>
		n = nwds;
10011bc4:	e0bffa17 	ldw	r2,-24(fp)
10011bc8:	e0bff815 	stw	r2,-32(fp)
10011bcc:	00001f06 	br	10011c4c <__any_on+0xcc>
	else if (n < nwds && (k &= kmask)) {
10011bd0:	e0fff817 	ldw	r3,-32(fp)
10011bd4:	e0bffa17 	ldw	r2,-24(fp)
10011bd8:	18801c0e 	bge	r3,r2,10011c4c <__any_on+0xcc>
10011bdc:	e0bfff17 	ldw	r2,-4(fp)
10011be0:	108007cc 	andi	r2,r2,31
10011be4:	e0bfff15 	stw	r2,-4(fp)
10011be8:	e0bfff17 	ldw	r2,-4(fp)
10011bec:	10001726 	beq	r2,zero,10011c4c <__any_on+0xcc>
		x1 = x2 = x[n];
10011bf0:	e0bff817 	ldw	r2,-32(fp)
10011bf4:	1085883a 	add	r2,r2,r2
10011bf8:	1085883a 	add	r2,r2,r2
10011bfc:	1007883a 	mov	r3,r2
10011c00:	e0bff917 	ldw	r2,-28(fp)
10011c04:	10c5883a 	add	r2,r2,r3
10011c08:	10800017 	ldw	r2,0(r2)
10011c0c:	e0bffb15 	stw	r2,-20(fp)
10011c10:	e0bffb17 	ldw	r2,-20(fp)
10011c14:	e0bffc15 	stw	r2,-16(fp)
		x1 >>= k;
10011c18:	e0fffc17 	ldw	r3,-16(fp)
10011c1c:	e0bfff17 	ldw	r2,-4(fp)
10011c20:	1884d83a 	srl	r2,r3,r2
10011c24:	e0bffc15 	stw	r2,-16(fp)
		x1 <<= k;
10011c28:	e0fffc17 	ldw	r3,-16(fp)
10011c2c:	e0bfff17 	ldw	r2,-4(fp)
10011c30:	1884983a 	sll	r2,r3,r2
10011c34:	e0bffc15 	stw	r2,-16(fp)
		if (x1 != x2)
10011c38:	e0fffc17 	ldw	r3,-16(fp)
10011c3c:	e0bffb17 	ldw	r2,-20(fp)
10011c40:	18800226 	beq	r3,r2,10011c4c <__any_on+0xcc>
			return 1;
10011c44:	00800044 	movi	r2,1
10011c48:	00001606 	br	10011ca4 <__any_on+0x124>
		}
	x0 = x;
10011c4c:	e0bff917 	ldw	r2,-28(fp)
10011c50:	e0bffd15 	stw	r2,-12(fp)
	x += n;
10011c54:	e0bff817 	ldw	r2,-32(fp)
10011c58:	1085883a 	add	r2,r2,r2
10011c5c:	1085883a 	add	r2,r2,r2
10011c60:	1007883a 	mov	r3,r2
10011c64:	e0bff917 	ldw	r2,-28(fp)
10011c68:	10c5883a 	add	r2,r2,r3
10011c6c:	e0bff915 	stw	r2,-28(fp)
	while(x > x0)
10011c70:	00000806 	br	10011c94 <__any_on+0x114>
		if (*--x)
10011c74:	e0bff917 	ldw	r2,-28(fp)
10011c78:	10bfff04 	addi	r2,r2,-4
10011c7c:	e0bff915 	stw	r2,-28(fp)
10011c80:	e0bff917 	ldw	r2,-28(fp)
10011c84:	10800017 	ldw	r2,0(r2)
10011c88:	10000226 	beq	r2,zero,10011c94 <__any_on+0x114>
			return 1;
10011c8c:	00800044 	movi	r2,1
10011c90:	00000406 	br	10011ca4 <__any_on+0x124>
		if (x1 != x2)
			return 1;
		}
	x0 = x;
	x += n;
	while(x > x0)
10011c94:	e0bff917 	ldw	r2,-28(fp)
10011c98:	e0fffd17 	ldw	r3,-12(fp)
10011c9c:	18bff536 	bltu	r3,r2,10011c74 <__alt_data_end+0xf8011c74>
		if (*--x)
			return 1;
	return 0;
10011ca0:	0005883a 	mov	r2,zero
}
10011ca4:	e037883a 	mov	sp,fp
10011ca8:	df000017 	ldw	fp,0(sp)
10011cac:	dec00104 	addi	sp,sp,4
10011cb0:	f800283a 	ret

10011cb4 <_putc_r>:
int
_DEFUN(_putc_r, (ptr, c, fp),
       struct _reent *ptr _AND
       int c _AND
       register FILE *fp)
{
10011cb4:	defff904 	addi	sp,sp,-28
10011cb8:	dfc00615 	stw	ra,24(sp)
10011cbc:	df000515 	stw	fp,20(sp)
10011cc0:	dc000415 	stw	r16,16(sp)
10011cc4:	df000504 	addi	fp,sp,20
10011cc8:	e13ffd15 	stw	r4,-12(fp)
10011ccc:	e17ffe15 	stw	r5,-8(fp)
10011cd0:	3021883a 	mov	r16,r6
  int result;
  CHECK_INIT (ptr, fp);
10011cd4:	e0bffd17 	ldw	r2,-12(fp)
10011cd8:	e0bffb15 	stw	r2,-20(fp)
10011cdc:	e0bffb17 	ldw	r2,-20(fp)
10011ce0:	10000526 	beq	r2,zero,10011cf8 <_putc_r+0x44>
10011ce4:	e0bffb17 	ldw	r2,-20(fp)
10011ce8:	10800e17 	ldw	r2,56(r2)
10011cec:	1000021e 	bne	r2,zero,10011cf8 <_putc_r+0x44>
10011cf0:	e13ffb17 	ldw	r4,-20(fp)
10011cf4:	000e7440 	call	1000e744 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (ptr, c, fp);
10011cf8:	80800217 	ldw	r2,8(r16)
10011cfc:	10bfffc4 	addi	r2,r2,-1
10011d00:	80800215 	stw	r2,8(r16)
10011d04:	80800217 	ldw	r2,8(r16)
10011d08:	10001b0e 	bge	r2,zero,10011d78 <_putc_r+0xc4>
10011d0c:	80c00217 	ldw	r3,8(r16)
10011d10:	80800617 	ldw	r2,24(r16)
10011d14:	18801316 	blt	r3,r2,10011d64 <_putc_r+0xb0>
10011d18:	80800017 	ldw	r2,0(r16)
10011d1c:	e0fffe17 	ldw	r3,-8(fp)
10011d20:	10c00005 	stb	r3,0(r2)
10011d24:	80800017 	ldw	r2,0(r16)
10011d28:	10800003 	ldbu	r2,0(r2)
10011d2c:	10803fcc 	andi	r2,r2,255
10011d30:	108002a0 	cmpeqi	r2,r2,10
10011d34:	1000061e 	bne	r2,zero,10011d50 <_putc_r+0x9c>
10011d38:	80800017 	ldw	r2,0(r16)
10011d3c:	10c00044 	addi	r3,r2,1
10011d40:	80c00015 	stw	r3,0(r16)
10011d44:	10800003 	ldbu	r2,0(r2)
10011d48:	10803fcc 	andi	r2,r2,255
10011d4c:	00001206 	br	10011d98 <_putc_r+0xe4>
10011d50:	800d883a 	mov	r6,r16
10011d54:	01400284 	movi	r5,10
10011d58:	e13ffd17 	ldw	r4,-12(fp)
10011d5c:	0013c980 	call	10013c98 <__swbuf_r>
10011d60:	00000d06 	br	10011d98 <_putc_r+0xe4>
10011d64:	800d883a 	mov	r6,r16
10011d68:	e17ffe17 	ldw	r5,-8(fp)
10011d6c:	e13ffd17 	ldw	r4,-12(fp)
10011d70:	0013c980 	call	10013c98 <__swbuf_r>
10011d74:	00000806 	br	10011d98 <_putc_r+0xe4>
10011d78:	80800017 	ldw	r2,0(r16)
10011d7c:	e0fffe17 	ldw	r3,-8(fp)
10011d80:	10c00005 	stb	r3,0(r2)
10011d84:	80800017 	ldw	r2,0(r16)
10011d88:	10c00044 	addi	r3,r2,1
10011d8c:	80c00015 	stw	r3,0(r16)
10011d90:	10800003 	ldbu	r2,0(r2)
10011d94:	10803fcc 	andi	r2,r2,255
10011d98:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return result;
10011d9c:	e0bffc17 	ldw	r2,-16(fp)
}
10011da0:	e6ffff04 	addi	sp,fp,-4
10011da4:	dfc00217 	ldw	ra,8(sp)
10011da8:	df000117 	ldw	fp,4(sp)
10011dac:	dc000017 	ldw	r16,0(sp)
10011db0:	dec00304 	addi	sp,sp,12
10011db4:	f800283a 	ret

10011db8 <putc>:
#ifndef _REENT_ONLY
int
_DEFUN(putc, (c, fp),
       int c _AND
       register FILE *fp)
{
10011db8:	defff904 	addi	sp,sp,-28
10011dbc:	dfc00615 	stw	ra,24(sp)
10011dc0:	df000515 	stw	fp,20(sp)
10011dc4:	dc000415 	stw	r16,16(sp)
10011dc8:	df000504 	addi	fp,sp,20
10011dcc:	e13ffe15 	stw	r4,-8(fp)
10011dd0:	2821883a 	mov	r16,r5
#if !defined(PREFER_SIZE_OVER_SPEED) && !defined(__OPTIMIZE_SIZE__)
  int result;
  struct _reent *reent = _REENT;
10011dd4:	008403b4 	movhi	r2,4110
10011dd8:	10a4cc04 	addi	r2,r2,-27856
10011ddc:	10800017 	ldw	r2,0(r2)
10011de0:	e0bffb15 	stw	r2,-20(fp)

  CHECK_INIT (reent, fp);
10011de4:	e0bffb17 	ldw	r2,-20(fp)
10011de8:	e0bffc15 	stw	r2,-16(fp)
10011dec:	e0bffc17 	ldw	r2,-16(fp)
10011df0:	10000526 	beq	r2,zero,10011e08 <putc+0x50>
10011df4:	e0bffc17 	ldw	r2,-16(fp)
10011df8:	10800e17 	ldw	r2,56(r2)
10011dfc:	1000021e 	bne	r2,zero,10011e08 <putc+0x50>
10011e00:	e13ffc17 	ldw	r4,-16(fp)
10011e04:	000e7440 	call	1000e744 <__sinit>
  _newlib_flockfile_start (fp);
  result = __sputc_r (reent, c, fp);
10011e08:	80800217 	ldw	r2,8(r16)
10011e0c:	10bfffc4 	addi	r2,r2,-1
10011e10:	80800215 	stw	r2,8(r16)
10011e14:	80800217 	ldw	r2,8(r16)
10011e18:	10001b0e 	bge	r2,zero,10011e88 <putc+0xd0>
10011e1c:	80c00217 	ldw	r3,8(r16)
10011e20:	80800617 	ldw	r2,24(r16)
10011e24:	18801316 	blt	r3,r2,10011e74 <putc+0xbc>
10011e28:	80800017 	ldw	r2,0(r16)
10011e2c:	e0fffe17 	ldw	r3,-8(fp)
10011e30:	10c00005 	stb	r3,0(r2)
10011e34:	80800017 	ldw	r2,0(r16)
10011e38:	10800003 	ldbu	r2,0(r2)
10011e3c:	10803fcc 	andi	r2,r2,255
10011e40:	108002a0 	cmpeqi	r2,r2,10
10011e44:	1000061e 	bne	r2,zero,10011e60 <putc+0xa8>
10011e48:	80800017 	ldw	r2,0(r16)
10011e4c:	10c00044 	addi	r3,r2,1
10011e50:	80c00015 	stw	r3,0(r16)
10011e54:	10800003 	ldbu	r2,0(r2)
10011e58:	10803fcc 	andi	r2,r2,255
10011e5c:	00001206 	br	10011ea8 <putc+0xf0>
10011e60:	800d883a 	mov	r6,r16
10011e64:	01400284 	movi	r5,10
10011e68:	e13ffb17 	ldw	r4,-20(fp)
10011e6c:	0013c980 	call	10013c98 <__swbuf_r>
10011e70:	00000d06 	br	10011ea8 <putc+0xf0>
10011e74:	800d883a 	mov	r6,r16
10011e78:	e17ffe17 	ldw	r5,-8(fp)
10011e7c:	e13ffb17 	ldw	r4,-20(fp)
10011e80:	0013c980 	call	10013c98 <__swbuf_r>
10011e84:	00000806 	br	10011ea8 <putc+0xf0>
10011e88:	80800017 	ldw	r2,0(r16)
10011e8c:	e0fffe17 	ldw	r3,-8(fp)
10011e90:	10c00005 	stb	r3,0(r2)
10011e94:	80800017 	ldw	r2,0(r16)
10011e98:	10c00044 	addi	r3,r2,1
10011e9c:	80c00015 	stw	r3,0(r16)
10011ea0:	10800003 	ldbu	r2,0(r2)
10011ea4:	10803fcc 	andi	r2,r2,255
10011ea8:	e0bffd15 	stw	r2,-12(fp)
  _newlib_flockfile_end (fp);
  return result;
10011eac:	e0bffd17 	ldw	r2,-12(fp)
#else
  return _putc_r (_REENT, c, fp);
#endif
}
10011eb0:	e6ffff04 	addi	sp,fp,-4
10011eb4:	dfc00217 	ldw	ra,8(sp)
10011eb8:	df000117 	ldw	fp,4(sp)
10011ebc:	dc000017 	ldw	r16,0(sp)
10011ec0:	dec00304 	addi	sp,sp,12
10011ec4:	f800283a 	ret

10011ec8 <lflush>:
#include "local.h"

static int
_DEFUN(lflush, (fp),
       FILE *fp)
{
10011ec8:	defffd04 	addi	sp,sp,-12
10011ecc:	dfc00215 	stw	ra,8(sp)
10011ed0:	df000115 	stw	fp,4(sp)
10011ed4:	df000104 	addi	fp,sp,4
10011ed8:	e13fff15 	stw	r4,-4(fp)
  if ((fp->_flags & (__SLBF | __SWR)) == (__SLBF | __SWR))
10011edc:	e0bfff17 	ldw	r2,-4(fp)
10011ee0:	1080030b 	ldhu	r2,12(r2)
10011ee4:	10bfffcc 	andi	r2,r2,65535
10011ee8:	1080024c 	andi	r2,r2,9
10011eec:	10800258 	cmpnei	r2,r2,9
10011ef0:	1000031e 	bne	r2,zero,10011f00 <lflush+0x38>
    return fflush (fp);
10011ef4:	e13fff17 	ldw	r4,-4(fp)
10011ef8:	000e3040 	call	1000e304 <fflush>
10011efc:	00000106 	br	10011f04 <lflush+0x3c>
  return 0;
10011f00:	0005883a 	mov	r2,zero
}
10011f04:	e037883a 	mov	sp,fp
10011f08:	dfc00117 	ldw	ra,4(sp)
10011f0c:	df000017 	ldw	fp,0(sp)
10011f10:	dec00204 	addi	sp,sp,8
10011f14:	f800283a 	ret

10011f18 <__srefill_r>:

int
_DEFUN(__srefill_r, (ptr, fp),
       struct _reent * ptr _AND
       register FILE * fp)
{
10011f18:	defffa04 	addi	sp,sp,-24
10011f1c:	dfc00515 	stw	ra,20(sp)
10011f20:	df000415 	stw	fp,16(sp)
10011f24:	dc000315 	stw	r16,12(sp)
10011f28:	df000404 	addi	fp,sp,16
10011f2c:	e13ffe15 	stw	r4,-8(fp)
10011f30:	2821883a 	mov	r16,r5
  /* make sure stdio is set up */

  CHECK_INIT (ptr, fp);
10011f34:	e0bffe17 	ldw	r2,-8(fp)
10011f38:	e0bffc15 	stw	r2,-16(fp)
10011f3c:	e0bffc17 	ldw	r2,-16(fp)
10011f40:	10000526 	beq	r2,zero,10011f58 <__srefill_r+0x40>
10011f44:	e0bffc17 	ldw	r2,-16(fp)
10011f48:	10800e17 	ldw	r2,56(r2)
10011f4c:	1000021e 	bne	r2,zero,10011f58 <__srefill_r+0x40>
10011f50:	e13ffc17 	ldw	r4,-16(fp)
10011f54:	000e7440 	call	1000e744 <__sinit>

  ORIENT (fp, -1);
10011f58:	8080030b 	ldhu	r2,12(r16)
10011f5c:	10bfffcc 	andi	r2,r2,65535
10011f60:	1088000c 	andi	r2,r2,8192
10011f64:	1000071e 	bne	r2,zero,10011f84 <__srefill_r+0x6c>
10011f68:	8080030b 	ldhu	r2,12(r16)
10011f6c:	10880014 	ori	r2,r2,8192
10011f70:	8080030d 	sth	r2,12(r16)
10011f74:	80c01917 	ldw	r3,100(r16)
10011f78:	00b7ffc4 	movi	r2,-8193
10011f7c:	1884703a 	and	r2,r3,r2
10011f80:	80801915 	stw	r2,100(r16)

  fp->_r = 0;			/* largely a convenience for callers */
10011f84:	80000115 	stw	zero,4(r16)

#ifndef __CYGWIN__
  /* SysV does not make this test; take it out for compatibility */
  if (fp->_flags & __SEOF)
10011f88:	8080030b 	ldhu	r2,12(r16)
10011f8c:	10bfffcc 	andi	r2,r2,65535
10011f90:	1080080c 	andi	r2,r2,32
10011f94:	10000226 	beq	r2,zero,10011fa0 <__srefill_r+0x88>
    return EOF;
10011f98:	00bfffc4 	movi	r2,-1
10011f9c:	00006f06 	br	1001215c <__srefill_r+0x244>
#endif

  /* if not already reading, have to be reading and writing */
  if ((fp->_flags & __SRD) == 0)
10011fa0:	8080030b 	ldhu	r2,12(r16)
10011fa4:	10bfffcc 	andi	r2,r2,65535
10011fa8:	1080010c 	andi	r2,r2,4
10011fac:	1000201e 	bne	r2,zero,10012030 <__srefill_r+0x118>
    {
      if ((fp->_flags & __SRW) == 0)
10011fb0:	8080030b 	ldhu	r2,12(r16)
10011fb4:	10bfffcc 	andi	r2,r2,65535
10011fb8:	1080040c 	andi	r2,r2,16
10011fbc:	1000081e 	bne	r2,zero,10011fe0 <__srefill_r+0xc8>
	{
	  ptr->_errno = EBADF;
10011fc0:	e0bffe17 	ldw	r2,-8(fp)
10011fc4:	00c00244 	movi	r3,9
10011fc8:	10c00015 	stw	r3,0(r2)
	  fp->_flags |= __SERR;
10011fcc:	8080030b 	ldhu	r2,12(r16)
10011fd0:	10801014 	ori	r2,r2,64
10011fd4:	8080030d 	sth	r2,12(r16)
	  return EOF;
10011fd8:	00bfffc4 	movi	r2,-1
10011fdc:	00005f06 	br	1001215c <__srefill_r+0x244>
	}
      /* switch to reading */
      if (fp->_flags & __SWR)
10011fe0:	8080030b 	ldhu	r2,12(r16)
10011fe4:	10bfffcc 	andi	r2,r2,65535
10011fe8:	1080020c 	andi	r2,r2,8
10011fec:	10000c26 	beq	r2,zero,10012020 <__srefill_r+0x108>
	{
	  if (_fflush_r (ptr, fp))
10011ff0:	800b883a 	mov	r5,r16
10011ff4:	e13ffe17 	ldw	r4,-8(fp)
10011ff8:	000e27c0 	call	1000e27c <_fflush_r>
10011ffc:	10000226 	beq	r2,zero,10012008 <__srefill_r+0xf0>
	    return EOF;
10012000:	00bfffc4 	movi	r2,-1
10012004:	00005506 	br	1001215c <__srefill_r+0x244>
	  fp->_flags &= ~__SWR;
10012008:	80c0030b 	ldhu	r3,12(r16)
1001200c:	00bffdc4 	movi	r2,-9
10012010:	1884703a 	and	r2,r3,r2
10012014:	8080030d 	sth	r2,12(r16)
	  fp->_w = 0;
10012018:	80000215 	stw	zero,8(r16)
	  fp->_lbfsize = 0;
1001201c:	80000615 	stw	zero,24(r16)
	}
      fp->_flags |= __SRD;
10012020:	8080030b 	ldhu	r2,12(r16)
10012024:	10800114 	ori	r2,r2,4
10012028:	8080030d 	sth	r2,12(r16)
1001202c:	00001206 	br	10012078 <__srefill_r+0x160>
       * We were reading.  If there is an ungetc buffer,
       * we must have been reading from that.  Drop it,
       * restoring the previous buffer (if any).  If there
       * is anything in that buffer, return.
       */
      if (HASUB (fp))
10012030:	80800c17 	ldw	r2,48(r16)
10012034:	10001026 	beq	r2,zero,10012078 <__srefill_r+0x160>
	{
	  FREEUB (ptr, fp);
10012038:	80c00c17 	ldw	r3,48(r16)
1001203c:	80801004 	addi	r2,r16,64
10012040:	18800426 	beq	r3,r2,10012054 <__srefill_r+0x13c>
10012044:	80800c17 	ldw	r2,48(r16)
10012048:	100b883a 	mov	r5,r2
1001204c:	e13ffe17 	ldw	r4,-8(fp)
10012050:	000e9740 	call	1000e974 <_free_r>
10012054:	80000c15 	stw	zero,48(r16)
	  if ((fp->_r = fp->_ur) != 0)
10012058:	80800f17 	ldw	r2,60(r16)
1001205c:	80800115 	stw	r2,4(r16)
10012060:	80800117 	ldw	r2,4(r16)
10012064:	10000426 	beq	r2,zero,10012078 <__srefill_r+0x160>
	    {
	      fp->_p = fp->_up;
10012068:	80800e17 	ldw	r2,56(r16)
1001206c:	80800015 	stw	r2,0(r16)
	      return 0;
10012070:	0005883a 	mov	r2,zero
10012074:	00003906 	br	1001215c <__srefill_r+0x244>
	    }
	}
    }

  if (fp->_bf._base == NULL)
10012078:	80800417 	ldw	r2,16(r16)
1001207c:	1000031e 	bne	r2,zero,1001208c <__srefill_r+0x174>
    __smakebuf_r (ptr, fp);
10012080:	800b883a 	mov	r5,r16
10012084:	e13ffe17 	ldw	r4,-8(fp)
10012088:	000fa8c0 	call	1000fa8c <__smakebuf_r>
  /*
   * Before reading from a line buffered or unbuffered file,
   * flush all line buffered output files, per the ANSI C
   * standard.
   */
  if (fp->_flags & (__SLBF | __SNBF))
1001208c:	8080030b 	ldhu	r2,12(r16)
10012090:	10bfffcc 	andi	r2,r2,65535
10012094:	108000cc 	andi	r2,r2,3
10012098:	10001526 	beq	r2,zero,100120f0 <__srefill_r+0x1d8>
    {
      /* Ignore this file in _fwalk to avoid potential deadlock. */
      short orig_flags = fp->_flags;
1001209c:	8080030b 	ldhu	r2,12(r16)
100120a0:	e0bffd0d 	sth	r2,-12(fp)
      fp->_flags = 1;
100120a4:	00800044 	movi	r2,1
100120a8:	8080030d 	sth	r2,12(r16)
      _CAST_VOID _fwalk (_GLOBAL_REENT, lflush);
100120ac:	008403b4 	movhi	r2,4110
100120b0:	10a4cd04 	addi	r2,r2,-27852
100120b4:	10800017 	ldw	r2,0(r2)
100120b8:	01440074 	movhi	r5,4097
100120bc:	2947b204 	addi	r5,r5,7880
100120c0:	1009883a 	mov	r4,r2
100120c4:	000f6a40 	call	1000f6a4 <_fwalk>
      fp->_flags = orig_flags;
100120c8:	e0bffd0b 	ldhu	r2,-12(fp)
100120cc:	8080030d 	sth	r2,12(r16)

      /* Now flush this file without locking it. */
      if ((fp->_flags & (__SLBF|__SWR)) == (__SLBF|__SWR))
100120d0:	8080030b 	ldhu	r2,12(r16)
100120d4:	10bfffcc 	andi	r2,r2,65535
100120d8:	1080024c 	andi	r2,r2,9
100120dc:	10800258 	cmpnei	r2,r2,9
100120e0:	1000031e 	bne	r2,zero,100120f0 <__srefill_r+0x1d8>
	__sflush_r (ptr, fp);
100120e4:	800b883a 	mov	r5,r16
100120e8:	e13ffe17 	ldw	r4,-8(fp)
100120ec:	000df780 	call	1000df78 <__sflush_r>
    }

  fp->_p = fp->_bf._base;
100120f0:	80800417 	ldw	r2,16(r16)
100120f4:	80800015 	stw	r2,0(r16)
  fp->_r = fp->_read (ptr, fp->_cookie, (char *) fp->_p, fp->_bf._size);
100120f8:	80800817 	ldw	r2,32(r16)
100120fc:	80c00717 	ldw	r3,28(r16)
10012100:	81000017 	ldw	r4,0(r16)
10012104:	81400517 	ldw	r5,20(r16)
10012108:	280f883a 	mov	r7,r5
1001210c:	200d883a 	mov	r6,r4
10012110:	180b883a 	mov	r5,r3
10012114:	e13ffe17 	ldw	r4,-8(fp)
10012118:	103ee83a 	callr	r2
1001211c:	80800115 	stw	r2,4(r16)
#ifndef __CYGWIN__
  if (fp->_r <= 0)
10012120:	80800117 	ldw	r2,4(r16)
10012124:	00800c16 	blt	zero,r2,10012158 <__srefill_r+0x240>
  if (fp->_r > 0)
    fp->_flags &= ~__SEOF;
  else
#endif
    {
      if (fp->_r == 0)
10012128:	80800117 	ldw	r2,4(r16)
1001212c:	1000041e 	bne	r2,zero,10012140 <__srefill_r+0x228>
	fp->_flags |= __SEOF;
10012130:	8080030b 	ldhu	r2,12(r16)
10012134:	10800814 	ori	r2,r2,32
10012138:	8080030d 	sth	r2,12(r16)
1001213c:	00000406 	br	10012150 <__srefill_r+0x238>
      else
	{
	  fp->_r = 0;
10012140:	80000115 	stw	zero,4(r16)
	  fp->_flags |= __SERR;
10012144:	8080030b 	ldhu	r2,12(r16)
10012148:	10801014 	ori	r2,r2,64
1001214c:	8080030d 	sth	r2,12(r16)
	}
      return EOF;
10012150:	00bfffc4 	movi	r2,-1
10012154:	00000106 	br	1001215c <__srefill_r+0x244>
    }
  return 0;
10012158:	0005883a 	mov	r2,zero
}
1001215c:	e6ffff04 	addi	sp,fp,-4
10012160:	dfc00217 	ldw	ra,8(sp)
10012164:	df000117 	ldw	fp,4(sp)
10012168:	dc000017 	ldw	r16,0(sp)
1001216c:	dec00304 	addi	sp,sp,12
10012170:	f800283a 	ret

10012174 <copysign>:
	double copysign(double x, double y)
#else
	double copysign(x,y)
	double x,y;
#endif
{
10012174:	defff304 	addi	sp,sp,-52
10012178:	df000c15 	stw	fp,48(sp)
1001217c:	df000c04 	addi	fp,sp,48
10012180:	e13ffc15 	stw	r4,-16(fp)
10012184:	e17ffd15 	stw	r5,-12(fp)
10012188:	e1bffe15 	stw	r6,-8(fp)
1001218c:	e1ffff15 	stw	r7,-4(fp)
	__uint32_t hx,hy;
	GET_HIGH_WORD(hx,x);
10012190:	e0bffc17 	ldw	r2,-16(fp)
10012194:	e0bff615 	stw	r2,-40(fp)
10012198:	e0bffd17 	ldw	r2,-12(fp)
1001219c:	e0bff715 	stw	r2,-36(fp)
100121a0:	e0bff717 	ldw	r2,-36(fp)
100121a4:	e0bff415 	stw	r2,-48(fp)
	GET_HIGH_WORD(hy,y);
100121a8:	e0bffe17 	ldw	r2,-8(fp)
100121ac:	e0bff815 	stw	r2,-32(fp)
100121b0:	e0bfff17 	ldw	r2,-4(fp)
100121b4:	e0bff915 	stw	r2,-28(fp)
100121b8:	e0bff917 	ldw	r2,-28(fp)
100121bc:	e0bff515 	stw	r2,-44(fp)
	SET_HIGH_WORD(x,(hx&0x7fffffff)|(hy&0x80000000));
100121c0:	e0bffc17 	ldw	r2,-16(fp)
100121c4:	e0bffa15 	stw	r2,-24(fp)
100121c8:	e0bffd17 	ldw	r2,-12(fp)
100121cc:	e0bffb15 	stw	r2,-20(fp)
100121d0:	e0fff417 	ldw	r3,-48(fp)
100121d4:	00a00034 	movhi	r2,32768
100121d8:	10bfffc4 	addi	r2,r2,-1
100121dc:	1886703a 	and	r3,r3,r2
100121e0:	e0bff517 	ldw	r2,-44(fp)
100121e4:	10a0002c 	andhi	r2,r2,32768
100121e8:	1884b03a 	or	r2,r3,r2
100121ec:	e0bffb15 	stw	r2,-20(fp)
100121f0:	e0bffa17 	ldw	r2,-24(fp)
100121f4:	e0bffc15 	stw	r2,-16(fp)
100121f8:	e0bffb17 	ldw	r2,-20(fp)
100121fc:	e0bffd15 	stw	r2,-12(fp)
        return x;
10012200:	e0bffc17 	ldw	r2,-16(fp)
10012204:	e0fffd17 	ldw	r3,-12(fp)
10012208:	1009883a 	mov	r4,r2
1001220c:	180b883a 	mov	r5,r3
}
10012210:	2005883a 	mov	r2,r4
10012214:	2807883a 	mov	r3,r5
10012218:	e037883a 	mov	sp,fp
1001221c:	df000017 	ldw	fp,0(sp)
10012220:	dec00104 	addi	sp,sp,4
10012224:	f800283a 	ret

10012228 <finite>:
	int finite(double x)
#else
	int finite(x)
	double x;
#endif
{
10012228:	defffa04 	addi	sp,sp,-24
1001222c:	df000515 	stw	fp,20(sp)
10012230:	df000504 	addi	fp,sp,20
10012234:	e13ffe15 	stw	r4,-8(fp)
10012238:	e17fff15 	stw	r5,-4(fp)
	__int32_t hx;
	GET_HIGH_WORD(hx,x);
1001223c:	e0bffe17 	ldw	r2,-8(fp)
10012240:	e0bffc15 	stw	r2,-16(fp)
10012244:	e0bfff17 	ldw	r2,-4(fp)
10012248:	e0bffd15 	stw	r2,-12(fp)
1001224c:	e0bffd17 	ldw	r2,-12(fp)
10012250:	e0bffb15 	stw	r2,-20(fp)
	return  (int)((__uint32_t)((hx&0x7fffffff)-0x7ff00000)>>31);
10012254:	e0fffb17 	ldw	r3,-20(fp)
10012258:	00a00034 	movhi	r2,32768
1001225c:	10bfffc4 	addi	r2,r2,-1
10012260:	1886703a 	and	r3,r3,r2
10012264:	00a00434 	movhi	r2,32784
10012268:	1885883a 	add	r2,r3,r2
1001226c:	1004d7fa 	srli	r2,r2,31
}
10012270:	e037883a 	mov	sp,fp
10012274:	df000017 	ldw	fp,0(sp)
10012278:	dec00104 	addi	sp,sp,4
1001227c:	f800283a 	ret

10012280 <__fpclassifyd>:

#include "fdlibm.h"

int
__fpclassifyd (double x)
{
10012280:	defff904 	addi	sp,sp,-28
10012284:	df000615 	stw	fp,24(sp)
10012288:	df000604 	addi	fp,sp,24
1001228c:	e13ffe15 	stw	r4,-8(fp)
10012290:	e17fff15 	stw	r5,-4(fp)
  __uint32_t msw, lsw;

  EXTRACT_WORDS(msw,lsw,x);
10012294:	e0bffe17 	ldw	r2,-8(fp)
10012298:	e0bffc15 	stw	r2,-16(fp)
1001229c:	e0bfff17 	ldw	r2,-4(fp)
100122a0:	e0bffd15 	stw	r2,-12(fp)
100122a4:	e0bffd17 	ldw	r2,-12(fp)
100122a8:	e0bffa15 	stw	r2,-24(fp)
100122ac:	e0bffc17 	ldw	r2,-16(fp)
100122b0:	e0bffb15 	stw	r2,-20(fp)

  if ((msw == 0x00000000 && lsw == 0x00000000) ||
100122b4:	e0bffa17 	ldw	r2,-24(fp)
100122b8:	1000021e 	bne	r2,zero,100122c4 <__fpclassifyd+0x44>
100122bc:	e0bffb17 	ldw	r2,-20(fp)
100122c0:	10000526 	beq	r2,zero,100122d8 <__fpclassifyd+0x58>
100122c4:	e0fffa17 	ldw	r3,-24(fp)
100122c8:	00a00034 	movhi	r2,32768
100122cc:	1880041e 	bne	r3,r2,100122e0 <__fpclassifyd+0x60>
      (msw == 0x80000000 && lsw == 0x00000000))
100122d0:	e0bffb17 	ldw	r2,-20(fp)
100122d4:	1000021e 	bne	r2,zero,100122e0 <__fpclassifyd+0x60>
    return FP_ZERO;
100122d8:	00800084 	movi	r2,2
100122dc:	00002506 	br	10012374 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
100122e0:	e0fffa17 	ldw	r3,-24(fp)
100122e4:	00800434 	movhi	r2,16
100122e8:	18800336 	bltu	r3,r2,100122f8 <__fpclassifyd+0x78>
100122ec:	e0fffa17 	ldw	r3,-24(fp)
100122f0:	009ffc34 	movhi	r2,32752
100122f4:	18800636 	bltu	r3,r2,10012310 <__fpclassifyd+0x90>
100122f8:	e0fffa17 	ldw	r3,-24(fp)
100122fc:	00a00434 	movhi	r2,32784
10012300:	18800536 	bltu	r3,r2,10012318 <__fpclassifyd+0x98>
           (msw >= 0x80100000 && msw <= 0xffefffff))
10012304:	e0fffa17 	ldw	r3,-24(fp)
10012308:	00bffc34 	movhi	r2,65520
1001230c:	1880022e 	bgeu	r3,r2,10012318 <__fpclassifyd+0x98>
    return FP_NORMAL;
10012310:	00800104 	movi	r2,4
10012314:	00001706 	br	10012374 <__fpclassifyd+0xf4>
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
10012318:	e0fffa17 	ldw	r3,-24(fp)
1001231c:	00800434 	movhi	r2,16
10012320:	18800536 	bltu	r3,r2,10012338 <__fpclassifyd+0xb8>
           (msw >= 0x80000000 && msw <= 0x800fffff))
10012324:	e0bffa17 	ldw	r2,-24(fp)
      (msw == 0x80000000 && lsw == 0x00000000))
    return FP_ZERO;
  else if ((msw >= 0x00100000 && msw <= 0x7fefffff) ||
           (msw >= 0x80100000 && msw <= 0xffefffff))
    return FP_NORMAL;
  else if ((msw >= 0x00000000 && msw <= 0x000fffff) ||
10012328:	1000050e 	bge	r2,zero,10012340 <__fpclassifyd+0xc0>
           (msw >= 0x80000000 && msw <= 0x800fffff))
1001232c:	e0fffa17 	ldw	r3,-24(fp)
10012330:	00a00434 	movhi	r2,32784
10012334:	1880022e 	bgeu	r3,r2,10012340 <__fpclassifyd+0xc0>
    /* zero is already handled above */
    return FP_SUBNORMAL;
10012338:	008000c4 	movi	r2,3
1001233c:	00000d06 	br	10012374 <__fpclassifyd+0xf4>
  else if ((msw == 0x7ff00000 && lsw == 0x00000000) ||
10012340:	e0fffa17 	ldw	r3,-24(fp)
10012344:	009ffc34 	movhi	r2,32752
10012348:	1880021e 	bne	r3,r2,10012354 <__fpclassifyd+0xd4>
1001234c:	e0bffb17 	ldw	r2,-20(fp)
10012350:	10000526 	beq	r2,zero,10012368 <__fpclassifyd+0xe8>
10012354:	e0fffa17 	ldw	r3,-24(fp)
10012358:	00bffc34 	movhi	r2,65520
1001235c:	1880041e 	bne	r3,r2,10012370 <__fpclassifyd+0xf0>
           (msw == 0xfff00000 && lsw == 0x00000000))
10012360:	e0bffb17 	ldw	r2,-20(fp)
10012364:	1000021e 	bne	r2,zero,10012370 <__fpclassifyd+0xf0>
    return FP_INFINITE;
10012368:	00800044 	movi	r2,1
1001236c:	00000106 	br	10012374 <__fpclassifyd+0xf4>
  else
    return FP_NAN;
10012370:	0005883a 	mov	r2,zero
}
10012374:	e037883a 	mov	sp,fp
10012378:	df000017 	ldw	fp,0(sp)
1001237c:	dec00104 	addi	sp,sp,4
10012380:	f800283a 	ret

10012384 <__sread>:
_DEFUN(__sread, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
10012384:	defff804 	addi	sp,sp,-32
10012388:	dfc00715 	stw	ra,28(sp)
1001238c:	df000615 	stw	fp,24(sp)
10012390:	dc400515 	stw	r17,20(sp)
10012394:	dc000415 	stw	r16,16(sp)
10012398:	df000604 	addi	fp,sp,24
1001239c:	e13ffa15 	stw	r4,-24(fp)
100123a0:	e17ffb15 	stw	r5,-20(fp)
100123a4:	e1bffc15 	stw	r6,-16(fp)
100123a8:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
100123ac:	e43ffb17 	ldw	r16,-20(fp)
  int oldmode = 0;
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  ret = _read_r (ptr, fp->_file, buf, n);
100123b0:	8080038b 	ldhu	r2,14(r16)
100123b4:	10bfffcc 	andi	r2,r2,65535
100123b8:	10a0001c 	xori	r2,r2,32768
100123bc:	10a00004 	addi	r2,r2,-32768
100123c0:	e0fffd17 	ldw	r3,-12(fp)
100123c4:	180f883a 	mov	r7,r3
100123c8:	e1bffc17 	ldw	r6,-16(fp)
100123cc:	100b883a 	mov	r5,r2
100123d0:	e13ffa17 	ldw	r4,-24(fp)
100123d4:	00145200 	call	10014520 <_read_r>
100123d8:	1023883a 	mov	r17,r2
    setmode (fp->_file, oldmode);
#endif

  /* If the read succeeded, update the current offset.  */

  if (ret >= 0)
100123dc:	88000416 	blt	r17,zero,100123f0 <__sread+0x6c>
    fp->_offset += ret;
100123e0:	80801417 	ldw	r2,80(r16)
100123e4:	1445883a 	add	r2,r2,r17
100123e8:	80801415 	stw	r2,80(r16)
100123ec:	00000406 	br	10012400 <__sread+0x7c>
  else
    fp->_flags &= ~__SOFF;	/* paranoia */
100123f0:	80c0030b 	ldhu	r3,12(r16)
100123f4:	00bbffc4 	movi	r2,-4097
100123f8:	1884703a 	and	r2,r3,r2
100123fc:	8080030d 	sth	r2,12(r16)
  return ret;
10012400:	8805883a 	mov	r2,r17
}
10012404:	e6fffe04 	addi	sp,fp,-8
10012408:	dfc00317 	ldw	ra,12(sp)
1001240c:	df000217 	ldw	fp,8(sp)
10012410:	dc400117 	ldw	r17,4(sp)
10012414:	dc000017 	ldw	r16,0(sp)
10012418:	dec00404 	addi	sp,sp,16
1001241c:	f800283a 	ret

10012420 <__seofread>:
_DEFUN(__seofread, (ptr, cookie, buf, len),
       struct _reent *_ptr _AND
       _PTR cookie _AND
       char *buf   _AND
       _READ_WRITE_BUFSIZE_TYPE len)
{
10012420:	defffb04 	addi	sp,sp,-20
10012424:	df000415 	stw	fp,16(sp)
10012428:	df000404 	addi	fp,sp,16
1001242c:	e13ffc15 	stw	r4,-16(fp)
10012430:	e17ffd15 	stw	r5,-12(fp)
10012434:	e1bffe15 	stw	r6,-8(fp)
10012438:	e1ffff15 	stw	r7,-4(fp)
  return 0;
1001243c:	0005883a 	mov	r2,zero
}
10012440:	e037883a 	mov	sp,fp
10012444:	df000017 	ldw	fp,0(sp)
10012448:	dec00104 	addi	sp,sp,4
1001244c:	f800283a 	ret

10012450 <__swrite>:
_DEFUN(__swrite, (ptr, cookie, buf, n),
       struct _reent *ptr _AND
       void *cookie _AND
       char const *buf _AND
       _READ_WRITE_BUFSIZE_TYPE n)
{
10012450:	defff804 	addi	sp,sp,-32
10012454:	dfc00715 	stw	ra,28(sp)
10012458:	df000615 	stw	fp,24(sp)
1001245c:	dc000515 	stw	r16,20(sp)
10012460:	df000604 	addi	fp,sp,24
10012464:	e13ffb15 	stw	r4,-20(fp)
10012468:	e17ffc15 	stw	r5,-16(fp)
1001246c:	e1bffd15 	stw	r6,-12(fp)
10012470:	e1fffe15 	stw	r7,-8(fp)
  register FILE *fp = (FILE *) cookie;
10012474:	e43ffc17 	ldw	r16,-16(fp)
  ssize_t w;
#ifdef __SCLE
  int oldmode=0;
#endif

  if (fp->_flags & __SAPP)
10012478:	8080030b 	ldhu	r2,12(r16)
1001247c:	10bfffcc 	andi	r2,r2,65535
10012480:	1080400c 	andi	r2,r2,256
10012484:	10000926 	beq	r2,zero,100124ac <__swrite+0x5c>
    _lseek_r (ptr, fp->_file, (_off_t) 0, SEEK_END);
10012488:	8080038b 	ldhu	r2,14(r16)
1001248c:	10bfffcc 	andi	r2,r2,65535
10012490:	10a0001c 	xori	r2,r2,32768
10012494:	10a00004 	addi	r2,r2,-32768
10012498:	01c00084 	movi	r7,2
1001249c:	000d883a 	mov	r6,zero
100124a0:	100b883a 	mov	r5,r2
100124a4:	e13ffb17 	ldw	r4,-20(fp)
100124a8:	00144980 	call	10014498 <_lseek_r>
  fp->_flags &= ~__SOFF;	/* in case O_APPEND mode is set */
100124ac:	80c0030b 	ldhu	r3,12(r16)
100124b0:	00bbffc4 	movi	r2,-4097
100124b4:	1884703a 	and	r2,r3,r2
100124b8:	8080030d 	sth	r2,12(r16)
#ifdef __SCLE
  if (fp->_flags & __SCLE)
    oldmode = setmode (fp->_file, O_BINARY);
#endif

  w = _write_r (ptr, fp->_file, buf, n);
100124bc:	8080038b 	ldhu	r2,14(r16)
100124c0:	10bfffcc 	andi	r2,r2,65535
100124c4:	10a0001c 	xori	r2,r2,32768
100124c8:	10a00004 	addi	r2,r2,-32768
100124cc:	e0fffe17 	ldw	r3,-8(fp)
100124d0:	180f883a 	mov	r7,r3
100124d4:	e1bffd17 	ldw	r6,-12(fp)
100124d8:	100b883a 	mov	r5,r2
100124dc:	e13ffb17 	ldw	r4,-20(fp)
100124e0:	0013e480 	call	10013e48 <_write_r>
100124e4:	e0bffa15 	stw	r2,-24(fp)
#ifdef __SCLE
  if (oldmode)
    setmode (fp->_file, oldmode);
#endif

  return w;
100124e8:	e0bffa17 	ldw	r2,-24(fp)
}
100124ec:	e6ffff04 	addi	sp,fp,-4
100124f0:	dfc00217 	ldw	ra,8(sp)
100124f4:	df000117 	ldw	fp,4(sp)
100124f8:	dc000017 	ldw	r16,0(sp)
100124fc:	dec00304 	addi	sp,sp,12
10012500:	f800283a 	ret

10012504 <__sseek>:
_DEFUN(__sseek, (ptr, cookie, offset, whence),
       struct _reent *ptr _AND
       void *cookie _AND
       _fpos_t offset _AND
       int whence)
{
10012504:	defff804 	addi	sp,sp,-32
10012508:	dfc00715 	stw	ra,28(sp)
1001250c:	df000615 	stw	fp,24(sp)
10012510:	dc400515 	stw	r17,20(sp)
10012514:	dc000415 	stw	r16,16(sp)
10012518:	df000604 	addi	fp,sp,24
1001251c:	e13ffa15 	stw	r4,-24(fp)
10012520:	e17ffb15 	stw	r5,-20(fp)
10012524:	e1bffc15 	stw	r6,-16(fp)
10012528:	e1fffd15 	stw	r7,-12(fp)
  register FILE *fp = (FILE *) cookie;
1001252c:	e43ffb17 	ldw	r16,-20(fp)
  register _off_t ret;

  ret = _lseek_r (ptr, fp->_file, (_off_t) offset, whence);
10012530:	8080038b 	ldhu	r2,14(r16)
10012534:	10bfffcc 	andi	r2,r2,65535
10012538:	10a0001c 	xori	r2,r2,32768
1001253c:	10a00004 	addi	r2,r2,-32768
10012540:	e1fffd17 	ldw	r7,-12(fp)
10012544:	e1bffc17 	ldw	r6,-16(fp)
10012548:	100b883a 	mov	r5,r2
1001254c:	e13ffa17 	ldw	r4,-24(fp)
10012550:	00144980 	call	10014498 <_lseek_r>
10012554:	1023883a 	mov	r17,r2
  if (ret == -1L)
10012558:	88bfffd8 	cmpnei	r2,r17,-1
1001255c:	1000051e 	bne	r2,zero,10012574 <__sseek+0x70>
    fp->_flags &= ~__SOFF;
10012560:	80c0030b 	ldhu	r3,12(r16)
10012564:	00bbffc4 	movi	r2,-4097
10012568:	1884703a 	and	r2,r3,r2
1001256c:	8080030d 	sth	r2,12(r16)
10012570:	00000406 	br	10012584 <__sseek+0x80>
  else
    {
      fp->_flags |= __SOFF;
10012574:	8080030b 	ldhu	r2,12(r16)
10012578:	10840014 	ori	r2,r2,4096
1001257c:	8080030d 	sth	r2,12(r16)
      fp->_offset = ret;
10012580:	84401415 	stw	r17,80(r16)
    }
  return ret;
10012584:	8805883a 	mov	r2,r17
}
10012588:	e6fffe04 	addi	sp,fp,-8
1001258c:	dfc00317 	ldw	ra,12(sp)
10012590:	df000217 	ldw	fp,8(sp)
10012594:	dc400117 	ldw	r17,4(sp)
10012598:	dc000017 	ldw	r16,0(sp)
1001259c:	dec00404 	addi	sp,sp,16
100125a0:	f800283a 	ret

100125a4 <__sclose>:

int
_DEFUN(__sclose, (ptr, cookie),
       struct _reent *ptr _AND
       void *cookie)
{
100125a4:	defffb04 	addi	sp,sp,-20
100125a8:	dfc00415 	stw	ra,16(sp)
100125ac:	df000315 	stw	fp,12(sp)
100125b0:	df000304 	addi	fp,sp,12
100125b4:	e13ffe15 	stw	r4,-8(fp)
100125b8:	e17fff15 	stw	r5,-4(fp)
  FILE *fp = (FILE *) cookie;
100125bc:	e0bfff17 	ldw	r2,-4(fp)
100125c0:	e0bffd15 	stw	r2,-12(fp)

  return _close_r (ptr, fp->_file);
100125c4:	e0bffd17 	ldw	r2,-12(fp)
100125c8:	1080038b 	ldhu	r2,14(r2)
100125cc:	10bfffcc 	andi	r2,r2,65535
100125d0:	10a0001c 	xori	r2,r2,32768
100125d4:	10a00004 	addi	r2,r2,-32768
100125d8:	100b883a 	mov	r5,r2
100125dc:	e13ffe17 	ldw	r4,-8(fp)
100125e0:	0013ed00 	call	10013ed0 <_close_r>
}
100125e4:	e037883a 	mov	sp,fp
100125e8:	dfc00117 	ldw	ra,4(sp)
100125ec:	df000017 	ldw	fp,0(sp)
100125f0:	dec00204 	addi	sp,sp,8
100125f4:	f800283a 	ret

100125f8 <strcmp>:

int
_DEFUN (strcmp, (s1, s2),
	_CONST char *s1 _AND
	_CONST char *s2)
{ 
100125f8:	defffb04 	addi	sp,sp,-20
100125fc:	df000415 	stw	fp,16(sp)
10012600:	df000404 	addi	fp,sp,16
10012604:	e13ffe15 	stw	r4,-8(fp)
10012608:	e17fff15 	stw	r5,-4(fp)
#else
  unsigned long *a1;
  unsigned long *a2;

  /* If s1 or s2 are unaligned, then compare bytes. */
  if (!UNALIGNED (s1, s2))
1001260c:	e0fffe17 	ldw	r3,-8(fp)
10012610:	e0bfff17 	ldw	r2,-4(fp)
10012614:	1884b03a 	or	r2,r3,r2
10012618:	108000cc 	andi	r2,r2,3
1001261c:	10002a1e 	bne	r2,zero,100126c8 <strcmp+0xd0>
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
10012620:	e0bffe17 	ldw	r2,-8(fp)
10012624:	e0bffc15 	stw	r2,-16(fp)
      a2 = (unsigned long*)s2;
10012628:	e0bfff17 	ldw	r2,-4(fp)
1001262c:	e0bffd15 	stw	r2,-12(fp)
      while (*a1 == *a2)
10012630:	00001506 	br	10012688 <strcmp+0x90>
        {
          /* To get here, *a1 == *a2, thus if we find a null in *a1,
	     then the strings must be equal, so return zero.  */
          if (DETECTNULL (*a1))
10012634:	e0bffc17 	ldw	r2,-16(fp)
10012638:	10c00017 	ldw	r3,0(r2)
1001263c:	00bfbff4 	movhi	r2,65279
10012640:	10bfbfc4 	addi	r2,r2,-257
10012644:	1887883a 	add	r3,r3,r2
10012648:	e0bffc17 	ldw	r2,-16(fp)
1001264c:	10800017 	ldw	r2,0(r2)
10012650:	0084303a 	nor	r2,zero,r2
10012654:	1886703a 	and	r3,r3,r2
10012658:	00a02074 	movhi	r2,32897
1001265c:	10a02004 	addi	r2,r2,-32640
10012660:	1884703a 	and	r2,r3,r2
10012664:	10000226 	beq	r2,zero,10012670 <strcmp+0x78>
	    return 0;
10012668:	0005883a 	mov	r2,zero
1001266c:	00002e06 	br	10012728 <strcmp+0x130>

          a1++;
10012670:	e0bffc17 	ldw	r2,-16(fp)
10012674:	10800104 	addi	r2,r2,4
10012678:	e0bffc15 	stw	r2,-16(fp)
          a2++;
1001267c:	e0bffd17 	ldw	r2,-12(fp)
10012680:	10800104 	addi	r2,r2,4
10012684:	e0bffd15 	stw	r2,-12(fp)
  if (!UNALIGNED (s1, s2))
    {  
      /* If s1 and s2 are word-aligned, compare them a word at a time. */
      a1 = (unsigned long*)s1;
      a2 = (unsigned long*)s2;
      while (*a1 == *a2)
10012688:	e0bffc17 	ldw	r2,-16(fp)
1001268c:	10c00017 	ldw	r3,0(r2)
10012690:	e0bffd17 	ldw	r2,-12(fp)
10012694:	10800017 	ldw	r2,0(r2)
10012698:	18bfe626 	beq	r3,r2,10012634 <__alt_data_end+0xf8012634>
          a1++;
          a2++;
        }

      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
1001269c:	e0bffc17 	ldw	r2,-16(fp)
100126a0:	e0bffe15 	stw	r2,-8(fp)
      s2 = (char*)a2;
100126a4:	e0bffd17 	ldw	r2,-12(fp)
100126a8:	e0bfff15 	stw	r2,-4(fp)
    }

  while (*s1 != '\0' && *s1 == *s2)
100126ac:	00000606 	br	100126c8 <strcmp+0xd0>
    {
      s1++;
100126b0:	e0bffe17 	ldw	r2,-8(fp)
100126b4:	10800044 	addi	r2,r2,1
100126b8:	e0bffe15 	stw	r2,-8(fp)
      s2++;
100126bc:	e0bfff17 	ldw	r2,-4(fp)
100126c0:	10800044 	addi	r2,r2,1
100126c4:	e0bfff15 	stw	r2,-4(fp)
      /* A difference was detected in last few bytes of s1, so search bytewise */
      s1 = (char*)a1;
      s2 = (char*)a2;
    }

  while (*s1 != '\0' && *s1 == *s2)
100126c8:	e0bffe17 	ldw	r2,-8(fp)
100126cc:	10800003 	ldbu	r2,0(r2)
100126d0:	10803fcc 	andi	r2,r2,255
100126d4:	1080201c 	xori	r2,r2,128
100126d8:	10bfe004 	addi	r2,r2,-128
100126dc:	10000b26 	beq	r2,zero,1001270c <strcmp+0x114>
100126e0:	e0bffe17 	ldw	r2,-8(fp)
100126e4:	10c00003 	ldbu	r3,0(r2)
100126e8:	e0bfff17 	ldw	r2,-4(fp)
100126ec:	10800003 	ldbu	r2,0(r2)
100126f0:	18c03fcc 	andi	r3,r3,255
100126f4:	18c0201c 	xori	r3,r3,128
100126f8:	18ffe004 	addi	r3,r3,-128
100126fc:	10803fcc 	andi	r2,r2,255
10012700:	1080201c 	xori	r2,r2,128
10012704:	10bfe004 	addi	r2,r2,-128
10012708:	18bfe926 	beq	r3,r2,100126b0 <__alt_data_end+0xf80126b0>
    {
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
1001270c:	e0bffe17 	ldw	r2,-8(fp)
10012710:	10800003 	ldbu	r2,0(r2)
10012714:	10c03fcc 	andi	r3,r2,255
10012718:	e0bfff17 	ldw	r2,-4(fp)
1001271c:	10800003 	ldbu	r2,0(r2)
10012720:	10803fcc 	andi	r2,r2,255
10012724:	1885c83a 	sub	r2,r3,r2
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10012728:	e037883a 	mov	sp,fp
1001272c:	df000017 	ldw	fp,0(sp)
10012730:	dec00104 	addi	sp,sp,4
10012734:	f800283a 	ret

10012738 <__sprint_r>:
int
_DEFUN(__sprint_r, (ptr, fp, uio),
       struct _reent *ptr _AND
       FILE *fp _AND
       register struct __suio *uio)
{
10012738:	defff604 	addi	sp,sp,-40
1001273c:	dfc00915 	stw	ra,36(sp)
10012740:	df000815 	stw	fp,32(sp)
10012744:	dc400715 	stw	r17,28(sp)
10012748:	dc000615 	stw	r16,24(sp)
1001274c:	df000804 	addi	fp,sp,32
10012750:	e13ffc15 	stw	r4,-16(fp)
10012754:	e17ffd15 	stw	r5,-12(fp)
10012758:	3021883a 	mov	r16,r6
	register int err = 0;
1001275c:	0023883a 	mov	r17,zero

	if (uio->uio_resid == 0) {
10012760:	80800217 	ldw	r2,8(r16)
10012764:	1000031e 	bne	r2,zero,10012774 <__sprint_r+0x3c>
		uio->uio_iovcnt = 0;
10012768:	80000115 	stw	zero,4(r16)
		return (0);
1001276c:	0005883a 	mov	r2,zero
10012770:	00003906 	br	10012858 <__sprint_r+0x120>
	}
#ifdef _WIDE_ORIENT
	if (fp->_flags2 & __SWID) {
10012774:	e0bffd17 	ldw	r2,-12(fp)
10012778:	10801917 	ldw	r2,100(r2)
1001277c:	1088000c 	andi	r2,r2,8192
10012780:	10002d26 	beq	r2,zero,10012838 <__sprint_r+0x100>
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
10012784:	80800017 	ldw	r2,0(r16)
10012788:	e0bff815 	stw	r2,-32(fp)
		for (; uio->uio_resid != 0;
1001278c:	00002706 	br	1001282c <__sprint_r+0xf4>
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
10012790:	e0bff817 	ldw	r2,-32(fp)
10012794:	10800017 	ldw	r2,0(r2)
10012798:	e0bffa15 	stw	r2,-24(fp)
			len = iov->iov_len / sizeof (wchar_t);
1001279c:	e0bff817 	ldw	r2,-32(fp)
100127a0:	10800117 	ldw	r2,4(r2)
100127a4:	1004d0ba 	srli	r2,r2,2
100127a8:	e0bffb15 	stw	r2,-20(fp)
			for (i = 0; i < len; i++) {
100127ac:	e03ff915 	stw	zero,-28(fp)
100127b0:	00001206 	br	100127fc <__sprint_r+0xc4>
				if (_fputwc_r (ptr, p[i], fp) == WEOF) {
100127b4:	e0bff917 	ldw	r2,-28(fp)
100127b8:	1085883a 	add	r2,r2,r2
100127bc:	1085883a 	add	r2,r2,r2
100127c0:	1007883a 	mov	r3,r2
100127c4:	e0bffa17 	ldw	r2,-24(fp)
100127c8:	10c5883a 	add	r2,r2,r3
100127cc:	10800017 	ldw	r2,0(r2)
100127d0:	e1bffd17 	ldw	r6,-12(fp)
100127d4:	100b883a 	mov	r5,r2
100127d8:	e13ffc17 	ldw	r4,-16(fp)
100127dc:	00142a80 	call	100142a8 <_fputwc_r>
100127e0:	10bfffd8 	cmpnei	r2,r2,-1
100127e4:	1000021e 	bne	r2,zero,100127f0 <__sprint_r+0xb8>
					err = -1;
100127e8:	047fffc4 	movi	r17,-1
					goto out;
100127ec:	00001706 	br	1001284c <__sprint_r+0x114>
		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
			p = (wchar_t *) iov->iov_base;
			len = iov->iov_len / sizeof (wchar_t);
			for (i = 0; i < len; i++) {
100127f0:	e0bff917 	ldw	r2,-28(fp)
100127f4:	10800044 	addi	r2,r2,1
100127f8:	e0bff915 	stw	r2,-28(fp)
100127fc:	e0fff917 	ldw	r3,-28(fp)
10012800:	e0bffb17 	ldw	r2,-20(fp)
10012804:	18bfeb16 	blt	r3,r2,100127b4 <__alt_data_end+0xf80127b4>
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
		     uio->uio_resid -= len * sizeof (wchar_t), iov++) {
10012808:	80c00217 	ldw	r3,8(r16)
1001280c:	e0bffb17 	ldw	r2,-20(fp)
10012810:	1085883a 	add	r2,r2,r2
10012814:	1085883a 	add	r2,r2,r2
10012818:	1885c83a 	sub	r2,r3,r2
1001281c:	80800215 	stw	r2,8(r16)
10012820:	e0bff817 	ldw	r2,-32(fp)
10012824:	10800204 	addi	r2,r2,8
10012828:	e0bff815 	stw	r2,-32(fp)
		struct __siov *iov;
		wchar_t *p;
		int i, len;

		iov = uio->uio_iov;
		for (; uio->uio_resid != 0;
1001282c:	80800217 	ldw	r2,8(r16)
10012830:	103fd71e 	bne	r2,zero,10012790 <__alt_data_end+0xf8012790>
10012834:	00000506 	br	1001284c <__sprint_r+0x114>
				}
			}
		}
	} else
#endif
		err = __sfvwrite_r(ptr, fp, uio);
10012838:	800d883a 	mov	r6,r16
1001283c:	e17ffd17 	ldw	r5,-12(fp)
10012840:	e13ffc17 	ldw	r4,-16(fp)
10012844:	000f0bc0 	call	1000f0bc <__sfvwrite_r>
10012848:	1023883a 	mov	r17,r2
out:
	uio->uio_resid = 0;
1001284c:	80000215 	stw	zero,8(r16)
	uio->uio_iovcnt = 0;
10012850:	80000115 	stw	zero,4(r16)
	return (err);
10012854:	8805883a 	mov	r2,r17
}
10012858:	e6fffe04 	addi	sp,fp,-8
1001285c:	dfc00317 	ldw	ra,12(sp)
10012860:	df000217 	ldw	fp,8(sp)
10012864:	dc400117 	ldw	r17,4(sp)
10012868:	dc000017 	ldw	r16,0(sp)
1001286c:	dec00404 	addi	sp,sp,16
10012870:	f800283a 	ret

10012874 <__sbprintf>:
_DEFUN(__sbprintf, (rptr, fp, fmt, ap),
       struct _reent *rptr _AND
       register FILE *fp   _AND
       _CONST char *fmt  _AND
       va_list ap)
{
10012874:	defedf04 	addi	sp,sp,-1156
10012878:	dfc12015 	stw	ra,1152(sp)
1001287c:	df011f15 	stw	fp,1148(sp)
10012880:	dc011e15 	stw	r16,1144(sp)
10012884:	df011f04 	addi	fp,sp,1148
10012888:	e13ffc15 	stw	r4,-16(fp)
1001288c:	2821883a 	mov	r16,r5
10012890:	e1bffd15 	stw	r6,-12(fp)
10012894:	e1fffe15 	stw	r7,-8(fp)
	int ret;
	FILE fake;
	unsigned char buf[BUFSIZ];

	/* copy the important variables */
	fake._flags = fp->_flags & ~__SNBF;
10012898:	80c0030b 	ldhu	r3,12(r16)
1001289c:	00bfff44 	movi	r2,-3
100128a0:	1884703a 	and	r2,r3,r2
100128a4:	e0bee50d 	sth	r2,-1132(fp)
	fake._flags2 = fp->_flags2;
100128a8:	80801917 	ldw	r2,100(r16)
100128ac:	e0befb15 	stw	r2,-1044(fp)
	fake._file = fp->_file;
100128b0:	8080038b 	ldhu	r2,14(r16)
100128b4:	e0bee58d 	sth	r2,-1130(fp)
	fake._cookie = fp->_cookie;
100128b8:	80800717 	ldw	r2,28(r16)
100128bc:	e0bee915 	stw	r2,-1116(fp)
	fake._write = fp->_write;
100128c0:	80800917 	ldw	r2,36(r16)
100128c4:	e0beeb15 	stw	r2,-1108(fp)

	/* set up the buffer */
	fake._bf._base = fake._p = buf;
100128c8:	e0befc04 	addi	r2,fp,-1040
100128cc:	e0bee215 	stw	r2,-1144(fp)
100128d0:	e0bee217 	ldw	r2,-1144(fp)
100128d4:	e0bee615 	stw	r2,-1128(fp)
	fake._bf._size = fake._w = sizeof (buf);
100128d8:	00810004 	movi	r2,1024
100128dc:	e0bee415 	stw	r2,-1136(fp)
100128e0:	e0bee417 	ldw	r2,-1136(fp)
100128e4:	e0bee715 	stw	r2,-1124(fp)
	fake._lbfsize = 0;	/* not actually used, but Just In Case */
100128e8:	e03ee815 	stw	zero,-1120(fp)
#ifndef __SINGLE_THREAD__
	__lock_init_recursive (fake._lock);
#endif

	/* do the work, then copy any error status */
	ret = _VFPRINTF_R (rptr, &fake, fmt, ap);
100128ec:	e0bee204 	addi	r2,fp,-1144
100128f0:	e1fffe17 	ldw	r7,-8(fp)
100128f4:	e1bffd17 	ldw	r6,-12(fp)
100128f8:	100b883a 	mov	r5,r2
100128fc:	e13ffc17 	ldw	r4,-16(fp)
10012900:	00129bc0 	call	100129bc <___vfiprintf_internal_r>
10012904:	e0bee115 	stw	r2,-1148(fp)
	if (ret >= 0 && _fflush_r (rptr, &fake))
10012908:	e0bee117 	ldw	r2,-1148(fp)
1001290c:	10000716 	blt	r2,zero,1001292c <__sbprintf+0xb8>
10012910:	e0bee204 	addi	r2,fp,-1144
10012914:	100b883a 	mov	r5,r2
10012918:	e13ffc17 	ldw	r4,-16(fp)
1001291c:	000e27c0 	call	1000e27c <_fflush_r>
10012920:	10000226 	beq	r2,zero,1001292c <__sbprintf+0xb8>
		ret = EOF;
10012924:	00bfffc4 	movi	r2,-1
10012928:	e0bee115 	stw	r2,-1148(fp)
	if (fake._flags & __SERR)
1001292c:	e0bee50b 	ldhu	r2,-1132(fp)
10012930:	10bfffcc 	andi	r2,r2,65535
10012934:	1080100c 	andi	r2,r2,64
10012938:	10000326 	beq	r2,zero,10012948 <__sbprintf+0xd4>
		fp->_flags |= __SERR;
1001293c:	8080030b 	ldhu	r2,12(r16)
10012940:	10801014 	ori	r2,r2,64
10012944:	8080030d 	sth	r2,12(r16)

#ifndef __SINGLE_THREAD__
	__lock_close_recursive (fake._lock);
#endif
	return (ret);
10012948:	e0bee117 	ldw	r2,-1148(fp)
}
1001294c:	e6ffff04 	addi	sp,fp,-4
10012950:	dfc00217 	ldw	ra,8(sp)
10012954:	df000117 	ldw	fp,4(sp)
10012958:	dc000017 	ldw	r16,0(sp)
1001295c:	dec00304 	addi	sp,sp,12
10012960:	f800283a 	ret

10012964 <__vfiprintf_internal>:
int
_DEFUN(VFPRINTF, (fp, fmt0, ap),
       FILE * fp         _AND
       _CONST char *fmt0 _AND
       va_list ap)
{
10012964:	defffa04 	addi	sp,sp,-24
10012968:	dfc00515 	stw	ra,20(sp)
1001296c:	df000415 	stw	fp,16(sp)
10012970:	df000404 	addi	fp,sp,16
10012974:	e13ffd15 	stw	r4,-12(fp)
10012978:	e17ffe15 	stw	r5,-8(fp)
1001297c:	e1bfff15 	stw	r6,-4(fp)
  int result;
  result = _VFPRINTF_R (_REENT, fp, fmt0, ap);
10012980:	008403b4 	movhi	r2,4110
10012984:	10a4cc04 	addi	r2,r2,-27856
10012988:	10800017 	ldw	r2,0(r2)
1001298c:	e1ffff17 	ldw	r7,-4(fp)
10012990:	e1bffe17 	ldw	r6,-8(fp)
10012994:	e17ffd17 	ldw	r5,-12(fp)
10012998:	1009883a 	mov	r4,r2
1001299c:	00129bc0 	call	100129bc <___vfiprintf_internal_r>
100129a0:	e0bffc15 	stw	r2,-16(fp)
  return result;
100129a4:	e0bffc17 	ldw	r2,-16(fp)
}
100129a8:	e037883a 	mov	sp,fp
100129ac:	dfc00117 	ldw	ra,4(sp)
100129b0:	df000017 	ldw	fp,0(sp)
100129b4:	dec00204 	addi	sp,sp,8
100129b8:	f800283a 	ret

100129bc <___vfiprintf_internal_r>:
_DEFUN(_VFPRINTF_R, (data, fp, fmt0, ap),
       struct _reent *data _AND
       FILE * fp           _AND
       _CONST char *fmt0   _AND
       va_list ap)
{
100129bc:	deffb704 	addi	sp,sp,-292
100129c0:	dfc04815 	stw	ra,288(sp)
100129c4:	df004715 	stw	fp,284(sp)
100129c8:	ddc04615 	stw	r23,280(sp)
100129cc:	dd804515 	stw	r22,276(sp)
100129d0:	dd404415 	stw	r21,272(sp)
100129d4:	dd004315 	stw	r20,268(sp)
100129d8:	dcc04215 	stw	r19,264(sp)
100129dc:	dc804115 	stw	r18,260(sp)
100129e0:	dc404015 	stw	r17,256(sp)
100129e4:	dc003f15 	stw	r16,252(sp)
100129e8:	df004704 	addi	fp,sp,284
100129ec:	e13fe615 	stw	r4,-104(fp)
100129f0:	e17fe715 	stw	r5,-100(fp)
100129f4:	e1bfe815 	stw	r6,-96(fp)
100129f8:	e1ffe915 	stw	r7,-92(fp)
	u_quad_t _uquad;	/* integer arguments %[diouxX] */
	enum { OCT, DEC, HEX } base;/* base for [diouxX] conversion */
	int dprec;		/* a copy of prec if [diouxX], 0 otherwise */
	int realsz;		/* field size expanded by dprec */
	int size;		/* size of converted field or string */
	char *xdigs = NULL;	/* digits for [xX] conversion */
100129fc:	e03fc215 	stw	zero,-248(fp)
	char ox[2];		/* space for 0x hex-prefix */
#ifdef _MB_CAPABLE
	wchar_t wc;
	mbstate_t state;        /* mbtowc calls from library must not change state */
#endif
	char *malloc_buf = NULL;/* handy pointer for malloced buffers */
10012a00:	e03fc315 	stw	zero,-244(fp)
	    (u_long)GET_ARG (N, ap, u_int))
#endif

#ifndef STRING_ONLY
	/* Initialize std streams if not dealing with sprintf family.  */
	CHECK_INIT (data, fp);
10012a04:	e0bfe617 	ldw	r2,-104(fp)
10012a08:	e0bfc415 	stw	r2,-240(fp)
10012a0c:	e0bfc417 	ldw	r2,-240(fp)
10012a10:	10000526 	beq	r2,zero,10012a28 <___vfiprintf_internal_r+0x6c>
10012a14:	e0bfc417 	ldw	r2,-240(fp)
10012a18:	10800e17 	ldw	r2,56(r2)
10012a1c:	1000021e 	bne	r2,zero,10012a28 <___vfiprintf_internal_r+0x6c>
10012a20:	e13fc417 	ldw	r4,-240(fp)
10012a24:	000e7440 	call	1000e744 <__sinit>
	_newlib_flockfile_start (fp);

	ORIENT(fp, -1);
10012a28:	e0bfe717 	ldw	r2,-100(fp)
10012a2c:	1080030b 	ldhu	r2,12(r2)
10012a30:	10bfffcc 	andi	r2,r2,65535
10012a34:	1088000c 	andi	r2,r2,8192
10012a38:	10000c1e 	bne	r2,zero,10012a6c <___vfiprintf_internal_r+0xb0>
10012a3c:	e0bfe717 	ldw	r2,-100(fp)
10012a40:	1080030b 	ldhu	r2,12(r2)
10012a44:	10880014 	ori	r2,r2,8192
10012a48:	1007883a 	mov	r3,r2
10012a4c:	e0bfe717 	ldw	r2,-100(fp)
10012a50:	10c0030d 	sth	r3,12(r2)
10012a54:	e0bfe717 	ldw	r2,-100(fp)
10012a58:	10c01917 	ldw	r3,100(r2)
10012a5c:	00b7ffc4 	movi	r2,-8193
10012a60:	1886703a 	and	r3,r3,r2
10012a64:	e0bfe717 	ldw	r2,-100(fp)
10012a68:	10c01915 	stw	r3,100(r2)

	/* sorry, fprintf(read_only_file, "") returns EOF, not 0 */
	if (cantwrite (data, fp)) {
10012a6c:	e0bfe717 	ldw	r2,-100(fp)
10012a70:	1080030b 	ldhu	r2,12(r2)
10012a74:	10bfffcc 	andi	r2,r2,65535
10012a78:	1080020c 	andi	r2,r2,8
10012a7c:	10000326 	beq	r2,zero,10012a8c <___vfiprintf_internal_r+0xd0>
10012a80:	e0bfe717 	ldw	r2,-100(fp)
10012a84:	10800417 	ldw	r2,16(r2)
10012a88:	1000061e 	bne	r2,zero,10012aa4 <___vfiprintf_internal_r+0xe8>
10012a8c:	e17fe717 	ldw	r5,-100(fp)
10012a90:	e13fe617 	ldw	r4,-104(fp)
10012a94:	000be6c0 	call	1000be6c <__swsetup_r>
10012a98:	10000226 	beq	r2,zero,10012aa4 <___vfiprintf_internal_r+0xe8>
		_newlib_flockfile_exit (fp);
		return (EOF);
10012a9c:	00bfffc4 	movi	r2,-1
10012aa0:	00047006 	br	10013c64 <___vfiprintf_internal_r+0x12a8>
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10012aa4:	e0bfe717 	ldw	r2,-100(fp)
10012aa8:	1080030b 	ldhu	r2,12(r2)
10012aac:	10bfffcc 	andi	r2,r2,65535
10012ab0:	1080068c 	andi	r2,r2,26
10012ab4:	10800298 	cmpnei	r2,r2,10
10012ab8:	10000c1e 	bne	r2,zero,10012aec <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
10012abc:	e0bfe717 	ldw	r2,-100(fp)
10012ac0:	1080038b 	ldhu	r2,14(r2)
		return (EOF);
	}

#ifdef _UNBUF_STREAM_OPT
	/* optimise fprintf(stderr) (and other unbuffered Unix files) */
	if ((fp->_flags & (__SNBF|__SWR|__SRW)) == (__SNBF|__SWR) &&
10012ac4:	10bfffcc 	andi	r2,r2,65535
10012ac8:	10a0001c 	xori	r2,r2,32768
10012acc:	10a00004 	addi	r2,r2,-32768
10012ad0:	10000616 	blt	r2,zero,10012aec <___vfiprintf_internal_r+0x130>
	    fp->_file >= 0) {
		_newlib_flockfile_exit (fp);
		return (__sbprintf (data, fp, fmt0, ap));
10012ad4:	e1ffe917 	ldw	r7,-92(fp)
10012ad8:	e1bfe817 	ldw	r6,-96(fp)
10012adc:	e17fe717 	ldw	r5,-100(fp)
10012ae0:	e13fe617 	ldw	r4,-104(fp)
10012ae4:	00128740 	call	10012874 <__sbprintf>
10012ae8:	00045e06 	br	10013c64 <___vfiprintf_internal_r+0x12a8>
		}
		fp->_bf._size = 64;
        }
#endif /* STRING_ONLY */

	fmt = (char *)fmt0;
10012aec:	e57fe817 	ldw	r21,-96(fp)
#ifdef _FVWRITE_IN_STREAMIO
	uio.uio_iov = iovp = iov;
10012af0:	e4bfcb04 	addi	r18,fp,-212
10012af4:	e4bfc815 	stw	r18,-224(fp)
	uio.uio_resid = 0;
10012af8:	e03fca15 	stw	zero,-216(fp)
	uio.uio_iovcnt = 0;
10012afc:	e03fc915 	stw	zero,-220(fp)
#endif
	ret = 0;
10012b00:	e03fb915 	stw	zero,-284(fp)

	/*
	 * Scan the format for conversions (`%' character).
	 */
	for (;;) {
	        cp = fmt;
10012b04:	a829883a 	mov	r20,r21
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10012b08:	00000106 	br	10012b10 <___vfiprintf_internal_r+0x154>
                    fmt += 1;
10012b0c:	ad400044 	addi	r21,r21,1
                    else if (wc == '%')
                        break;
                    fmt += n;
		}
#else
                while (*fmt != '\0' && *fmt != '%')
10012b10:	a8800003 	ldbu	r2,0(r21)
10012b14:	10803fcc 	andi	r2,r2,255
10012b18:	1080201c 	xori	r2,r2,128
10012b1c:	10bfe004 	addi	r2,r2,-128
10012b20:	10000626 	beq	r2,zero,10012b3c <___vfiprintf_internal_r+0x180>
10012b24:	a8800003 	ldbu	r2,0(r21)
10012b28:	10803fcc 	andi	r2,r2,255
10012b2c:	1080201c 	xori	r2,r2,128
10012b30:	10bfe004 	addi	r2,r2,-128
10012b34:	10800958 	cmpnei	r2,r2,37
10012b38:	103ff41e 	bne	r2,zero,10012b0c <__alt_data_end+0xf8012b0c>
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
10012b3c:	a807883a 	mov	r3,r21
10012b40:	a005883a 	mov	r2,r20
10012b44:	18a1c83a 	sub	r16,r3,r2
10012b48:	80001826 	beq	r16,zero,10012bac <___vfiprintf_internal_r+0x1f0>
			PRINT (cp, m);
10012b4c:	95000015 	stw	r20,0(r18)
10012b50:	8005883a 	mov	r2,r16
10012b54:	90800115 	stw	r2,4(r18)
10012b58:	e0bfca17 	ldw	r2,-216(fp)
10012b5c:	8007883a 	mov	r3,r16
10012b60:	10c5883a 	add	r2,r2,r3
10012b64:	e0bfca15 	stw	r2,-216(fp)
10012b68:	94800204 	addi	r18,r18,8
10012b6c:	e0bfc917 	ldw	r2,-220(fp)
10012b70:	10800044 	addi	r2,r2,1
10012b74:	e0bfc915 	stw	r2,-220(fp)
10012b78:	e0bfc917 	ldw	r2,-220(fp)
10012b7c:	10800210 	cmplti	r2,r2,8
10012b80:	1000071e 	bne	r2,zero,10012ba0 <___vfiprintf_internal_r+0x1e4>
10012b84:	e0bfc804 	addi	r2,fp,-224
10012b88:	100d883a 	mov	r6,r2
10012b8c:	e17fe717 	ldw	r5,-100(fp)
10012b90:	e13fe617 	ldw	r4,-104(fp)
10012b94:	00127380 	call	10012738 <__sprint_r>
10012b98:	1004091e 	bne	r2,zero,10013bc0 <___vfiprintf_internal_r+0x1204>
10012b9c:	e4bfcb04 	addi	r18,fp,-212
			ret += m;
10012ba0:	e0bfb917 	ldw	r2,-284(fp)
10012ba4:	1405883a 	add	r2,r2,r16
10012ba8:	e0bfb915 	stw	r2,-284(fp)
		}
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
10012bac:	a8800003 	ldbu	r2,0(r21)
10012bb0:	10803fcc 	andi	r2,r2,255
10012bb4:	1080201c 	xori	r2,r2,128
10012bb8:	10bfe004 	addi	r2,r2,-128
10012bbc:	1003f226 	beq	r2,zero,10013b88 <___vfiprintf_internal_r+0x11cc>
                    goto done;
#endif
		fmt_anchor = fmt;
10012bc0:	e57fc515 	stw	r21,-236(fp)
		fmt++;		/* skip over '%' */
10012bc4:	ad400044 	addi	r21,r21,1

		flags = 0;
10012bc8:	0027883a 	mov	r19,zero
		dprec = 0;
10012bcc:	e03fbf15 	stw	zero,-260(fp)
		width = 0;
10012bd0:	e03fba15 	stw	zero,-280(fp)
		prec = -1;
10012bd4:	00bfffc4 	movi	r2,-1
10012bd8:	e0bfbb15 	stw	r2,-276(fp)
		sign = '\0';
10012bdc:	e03fc705 	stb	zero,-228(fp)
#ifndef _NO_POS_ARGS
		N = arg_index;
		is_pos_arg = 0;
#endif

rflag:		ch = *fmt++;
10012be0:	a805883a 	mov	r2,r21
10012be4:	15400044 	addi	r21,r2,1
10012be8:	10800003 	ldbu	r2,0(r2)
10012bec:	14403fcc 	andi	r17,r2,255
10012bf0:	8c40201c 	xori	r17,r17,128
10012bf4:	8c7fe004 	addi	r17,r17,-128
reswitch:	switch (ch) {
10012bf8:	88bff804 	addi	r2,r17,-32
10012bfc:	10c01668 	cmpgeui	r3,r2,89
10012c00:	18028e1e 	bne	r3,zero,1001363c <___vfiprintf_internal_r+0xc80>
10012c04:	100690ba 	slli	r3,r2,2
10012c08:	00840074 	movhi	r2,4097
10012c0c:	108b0704 	addi	r2,r2,11292
10012c10:	1885883a 	add	r2,r3,r2
10012c14:	10800017 	ldw	r2,0(r2)
10012c18:	1000683a 	jmp	r2
10012c1c:	10012d80 	call	110012d8 <__alt_heap_start+0xf1e484>
10012c20:	1001363c 	xorhi	zero,r2,1240
10012c24:	1001363c 	xorhi	zero,r2,1240
10012c28:	10012da0 	cmpeqi	zero,r2,1206
10012c2c:	1001363c 	xorhi	zero,r2,1240
10012c30:	1001363c 	xorhi	zero,r2,1240
10012c34:	1001363c 	xorhi	zero,r2,1240
10012c38:	1001363c 	xorhi	zero,r2,1240
10012c3c:	1001363c 	xorhi	zero,r2,1240
10012c40:	1001363c 	xorhi	zero,r2,1240
10012c44:	10012da8 	cmpgeui	zero,r2,1206
10012c48:	10012ddc 	xori	zero,r2,1207
10012c4c:	1001363c 	xorhi	zero,r2,1240
10012c50:	10012dd4 	ori	zero,r2,1207
10012c54:	10012de8 	cmpgeui	zero,r2,1207
10012c58:	1001363c 	xorhi	zero,r2,1240
10012c5c:	10012e88 	cmpgei	zero,r2,1210
10012c60:	10012e90 	cmplti	zero,r2,1210
10012c64:	10012e90 	cmplti	zero,r2,1210
10012c68:	10012e90 	cmplti	zero,r2,1210
10012c6c:	10012e90 	cmplti	zero,r2,1210
10012c70:	10012e90 	cmplti	zero,r2,1210
10012c74:	10012e90 	cmplti	zero,r2,1210
10012c78:	10012e90 	cmplti	zero,r2,1210
10012c7c:	10012e90 	cmplti	zero,r2,1210
10012c80:	10012e90 	cmplti	zero,r2,1210
10012c84:	1001363c 	xorhi	zero,r2,1240
10012c88:	1001363c 	xorhi	zero,r2,1240
10012c8c:	1001363c 	xorhi	zero,r2,1240
10012c90:	1001363c 	xorhi	zero,r2,1240
10012c94:	1001363c 	xorhi	zero,r2,1240
10012c98:	1001363c 	xorhi	zero,r2,1240
10012c9c:	1001363c 	xorhi	zero,r2,1240
10012ca0:	1001363c 	xorhi	zero,r2,1240
10012ca4:	1001363c 	xorhi	zero,r2,1240
10012ca8:	1001363c 	xorhi	zero,r2,1240
10012cac:	10012f3c 	xorhi	zero,r2,1212
10012cb0:	1001363c 	xorhi	zero,r2,1240
10012cb4:	1001363c 	xorhi	zero,r2,1240
10012cb8:	1001363c 	xorhi	zero,r2,1240
10012cbc:	1001363c 	xorhi	zero,r2,1240
10012cc0:	1001363c 	xorhi	zero,r2,1240
10012cc4:	1001363c 	xorhi	zero,r2,1240
10012cc8:	1001363c 	xorhi	zero,r2,1240
10012ccc:	1001363c 	xorhi	zero,r2,1240
10012cd0:	1001363c 	xorhi	zero,r2,1240
10012cd4:	1001363c 	xorhi	zero,r2,1240
10012cd8:	100130dc 	xori	zero,r2,1219
10012cdc:	1001363c 	xorhi	zero,r2,1240
10012ce0:	1001363c 	xorhi	zero,r2,1240
10012ce4:	1001363c 	xorhi	zero,r2,1240
10012ce8:	1001363c 	xorhi	zero,r2,1240
10012cec:	1001363c 	xorhi	zero,r2,1240
10012cf0:	10013258 	cmpnei	zero,r2,1225
10012cf4:	1001363c 	xorhi	zero,r2,1240
10012cf8:	1001363c 	xorhi	zero,r2,1240
10012cfc:	10013318 	cmpnei	zero,r2,1228
10012d00:	1001363c 	xorhi	zero,r2,1240
10012d04:	1001363c 	xorhi	zero,r2,1240
10012d08:	1001363c 	xorhi	zero,r2,1240
10012d0c:	1001363c 	xorhi	zero,r2,1240
10012d10:	1001363c 	xorhi	zero,r2,1240
10012d14:	1001363c 	xorhi	zero,r2,1240
10012d18:	1001363c 	xorhi	zero,r2,1240
10012d1c:	1001363c 	xorhi	zero,r2,1240
10012d20:	1001363c 	xorhi	zero,r2,1240
10012d24:	1001363c 	xorhi	zero,r2,1240
10012d28:	10012f14 	ori	zero,r2,1212
10012d2c:	10012f40 	call	110012f4 <__alt_heap_start+0xf1e4a0>
10012d30:	1001363c 	xorhi	zero,r2,1240
10012d34:	1001363c 	xorhi	zero,r2,1240
10012d38:	1001363c 	xorhi	zero,r2,1240
10012d3c:	10012ed8 	cmpnei	zero,r2,1211
10012d40:	10012f40 	call	110012f4 <__alt_heap_start+0xf1e4a0>
10012d44:	1001363c 	xorhi	zero,r2,1240
10012d48:	1001363c 	xorhi	zero,r2,1240
10012d4c:	10012ee0 	cmpeqi	zero,r2,1211
10012d50:	1001363c 	xorhi	zero,r2,1240
10012d54:	1001303c 	xorhi	zero,r2,1216
10012d58:	100130e0 	cmpeqi	zero,r2,1219
10012d5c:	10013180 	call	11001318 <__alt_heap_start+0xf1e4c4>
10012d60:	10012f0c 	andi	zero,r2,1212
10012d64:	1001363c 	xorhi	zero,r2,1240
10012d68:	100131c8 	cmpgei	zero,r2,1223
10012d6c:	1001363c 	xorhi	zero,r2,1240
10012d70:	1001325c 	xori	zero,r2,1225
10012d74:	1001363c 	xorhi	zero,r2,1240
10012d78:	1001363c 	xorhi	zero,r2,1240
10012d7c:	10013328 	cmpgeui	zero,r2,1228
			/*
			 * ``If the space and + flags both appear, the space
			 * flag will be ignored.''
			 *	-- ANSI X3J11
			 */
			if (!sign)
10012d80:	e0bfc703 	ldbu	r2,-228(fp)
10012d84:	10803fcc 	andi	r2,r2,255
10012d88:	1080201c 	xori	r2,r2,128
10012d8c:	10bfe004 	addi	r2,r2,-128
10012d90:	103f931e 	bne	r2,zero,10012be0 <__alt_data_end+0xf8012be0>
				sign = ' ';
10012d94:	00800804 	movi	r2,32
10012d98:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
10012d9c:	003f9006 	br	10012be0 <__alt_data_end+0xf8012be0>
		case '#':
			flags |= ALT;
10012da0:	9cc00054 	ori	r19,r19,1
			goto rflag;
10012da4:	003f8e06 	br	10012be0 <__alt_data_end+0xf8012be0>
			 * ``A negative field width argument is taken as a
			 * - flag followed by a positive field width.''
			 *	-- ANSI X3J11
			 * They don't exclude field widths read from args.
			 */
			width = GET_ARG (n, ap, int);
10012da8:	e0bfe917 	ldw	r2,-92(fp)
10012dac:	10c00104 	addi	r3,r2,4
10012db0:	e0ffe915 	stw	r3,-92(fp)
10012db4:	10800017 	ldw	r2,0(r2)
10012db8:	e0bfba15 	stw	r2,-280(fp)
#ifndef _NO_POS_ARGS
			is_pos_arg = old_is_pos_arg;
#endif
			if (width >= 0)
10012dbc:	e0bfba17 	ldw	r2,-280(fp)
10012dc0:	10000116 	blt	r2,zero,10012dc8 <___vfiprintf_internal_r+0x40c>
				goto rflag;
10012dc4:	003f8606 	br	10012be0 <__alt_data_end+0xf8012be0>
			width = -width;
10012dc8:	e0bfba17 	ldw	r2,-280(fp)
10012dcc:	0085c83a 	sub	r2,zero,r2
10012dd0:	e0bfba15 	stw	r2,-280(fp)
			/* FALLTHROUGH */
		case '-':
			flags |= LADJUST;
10012dd4:	9cc00114 	ori	r19,r19,4
			goto rflag;
10012dd8:	003f8106 	br	10012be0 <__alt_data_end+0xf8012be0>
		case '+':
			sign = '+';
10012ddc:	00800ac4 	movi	r2,43
10012de0:	e0bfc705 	stb	r2,-228(fp)
			goto rflag;
10012de4:	003f7e06 	br	10012be0 <__alt_data_end+0xf8012be0>
		case '.':
			if ((ch = *fmt++) == '*') {
10012de8:	a805883a 	mov	r2,r21
10012dec:	15400044 	addi	r21,r2,1
10012df0:	10800003 	ldbu	r2,0(r2)
10012df4:	14403fcc 	andi	r17,r2,255
10012df8:	8c40201c 	xori	r17,r17,128
10012dfc:	8c7fe004 	addi	r17,r17,-128
10012e00:	88800a98 	cmpnei	r2,r17,42
10012e04:	10000a1e 	bne	r2,zero,10012e30 <___vfiprintf_internal_r+0x474>
						fmt = old_fmt;
						goto rflag;
					}
				}
#endif /* !_NO_POS_ARGS */
				prec = GET_ARG (n, ap, int);
10012e08:	e0bfe917 	ldw	r2,-92(fp)
10012e0c:	10c00104 	addi	r3,r2,4
10012e10:	e0ffe915 	stw	r3,-92(fp)
10012e14:	10800017 	ldw	r2,0(r2)
10012e18:	e0bfbb15 	stw	r2,-276(fp)
#ifndef _NO_POS_ARGS
				is_pos_arg = old_is_pos_arg;
#endif
				if (prec < 0)
10012e1c:	e0bfbb17 	ldw	r2,-276(fp)
10012e20:	103f6f0e 	bge	r2,zero,10012be0 <__alt_data_end+0xf8012be0>
					prec = -1;
10012e24:	00bfffc4 	movi	r2,-1
10012e28:	e0bfbb15 	stw	r2,-276(fp)
				goto rflag;
10012e2c:	003f6c06 	br	10012be0 <__alt_data_end+0xf8012be0>
			}
			n = 0;
10012e30:	0021883a 	mov	r16,zero
			while (is_digit (ch)) {
10012e34:	00000c06 	br	10012e68 <___vfiprintf_internal_r+0x4ac>
				n = 10 * n + to_digit (ch);
10012e38:	01400284 	movi	r5,10
10012e3c:	8009883a 	mov	r4,r16
10012e40:	00065d80 	call	100065d8 <__mulsi3>
10012e44:	1007883a 	mov	r3,r2
10012e48:	88bff404 	addi	r2,r17,-48
10012e4c:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10012e50:	a805883a 	mov	r2,r21
10012e54:	15400044 	addi	r21,r2,1
10012e58:	10800003 	ldbu	r2,0(r2)
10012e5c:	14403fcc 	andi	r17,r2,255
10012e60:	8c40201c 	xori	r17,r17,128
10012e64:	8c7fe004 	addi	r17,r17,-128
				if (prec < 0)
					prec = -1;
				goto rflag;
			}
			n = 0;
			while (is_digit (ch)) {
10012e68:	88bff404 	addi	r2,r17,-48
10012e6c:	108002b0 	cmpltui	r2,r2,10
10012e70:	103ff11e 	bne	r2,zero,10012e38 <__alt_data_end+0xf8012e38>
				n = 10 * n + to_digit (ch);
				ch = *fmt++;
			}
			prec = n < 0 ? -1 : n;
10012e74:	8005883a 	mov	r2,r16
10012e78:	1000010e 	bge	r2,zero,10012e80 <___vfiprintf_internal_r+0x4c4>
10012e7c:	00bfffc4 	movi	r2,-1
10012e80:	e0bfbb15 	stw	r2,-276(fp)
			goto reswitch;
10012e84:	003f5c06 	br	10012bf8 <__alt_data_end+0xf8012bf8>
			/*
			 * ``Note that 0 is taken as a flag, not as the
			 * beginning of a field width.''
			 *	-- ANSI X3J11
			 */
			flags |= ZEROPAD;
10012e88:	9cc02014 	ori	r19,r19,128
			goto rflag;
10012e8c:	003f5406 	br	10012be0 <__alt_data_end+0xf8012be0>
		case '1': case '2': case '3': case '4':
		case '5': case '6': case '7': case '8': case '9':
			n = 0;
10012e90:	0021883a 	mov	r16,zero
			do {
				n = 10 * n + to_digit (ch);
10012e94:	01400284 	movi	r5,10
10012e98:	8009883a 	mov	r4,r16
10012e9c:	00065d80 	call	100065d8 <__mulsi3>
10012ea0:	1007883a 	mov	r3,r2
10012ea4:	88bff404 	addi	r2,r17,-48
10012ea8:	18a1883a 	add	r16,r3,r2
				ch = *fmt++;
10012eac:	a805883a 	mov	r2,r21
10012eb0:	15400044 	addi	r21,r2,1
10012eb4:	10800003 	ldbu	r2,0(r2)
10012eb8:	14403fcc 	andi	r17,r2,255
10012ebc:	8c40201c 	xori	r17,r17,128
10012ec0:	8c7fe004 	addi	r17,r17,-128
			} while (is_digit (ch));
10012ec4:	88bff404 	addi	r2,r17,-48
10012ec8:	108002b0 	cmpltui	r2,r2,10
10012ecc:	103ff11e 	bne	r2,zero,10012e94 <__alt_data_end+0xf8012e94>
				}
				else
					goto error;
			}
#endif /* !_NO_POS_ARGS */
			width = n;
10012ed0:	e43fba15 	stw	r16,-280(fp)
			goto reswitch;
10012ed4:	003f4806 	br	10012bf8 <__alt_data_end+0xf8012bf8>
			if (*fmt == 'h') {
				fmt++;
				flags |= CHARINT;
			} else
#endif
				flags |= SHORTINT;
10012ed8:	9cc01014 	ori	r19,r19,64
			goto rflag;
10012edc:	003f4006 	br	10012be0 <__alt_data_end+0xf8012be0>
		case 'l':
#if defined _WANT_IO_C99_FORMATS || !defined _NO_LONGLONG
			if (*fmt == 'l') {
10012ee0:	a8800003 	ldbu	r2,0(r21)
10012ee4:	10803fcc 	andi	r2,r2,255
10012ee8:	1080201c 	xori	r2,r2,128
10012eec:	10bfe004 	addi	r2,r2,-128
10012ef0:	10801b18 	cmpnei	r2,r2,108
10012ef4:	1000031e 	bne	r2,zero,10012f04 <___vfiprintf_internal_r+0x548>
				fmt++;
10012ef8:	ad400044 	addi	r21,r21,1
				flags |= QUADINT;
10012efc:	9cc00814 	ori	r19,r19,32
10012f00:	003f3706 	br	10012be0 <__alt_data_end+0xf8012be0>
			} else
#endif
				flags |= LONGINT;
10012f04:	9cc00414 	ori	r19,r19,16
			goto rflag;
10012f08:	003f3506 	br	10012be0 <__alt_data_end+0xf8012be0>
		case 'q': /* extension */
			flags |= QUADINT;
10012f0c:	9cc00814 	ori	r19,r19,32
			goto rflag;
10012f10:	003f3306 	br	10012be0 <__alt_data_end+0xf8012be0>
		    flags |= QUADINT;
		  goto rflag;
		case 'C':
#endif /* _WANT_IO_C99_FORMATS */
		case 'c':
			cp = buf;
10012f14:	e53fdb04 	addi	r20,fp,-148
				}
			}
			else
#endif /* _MB_CAPABLE */
			{
				*cp = GET_ARG (N, ap, int);
10012f18:	e0bfe917 	ldw	r2,-92(fp)
10012f1c:	10c00104 	addi	r3,r2,4
10012f20:	e0ffe915 	stw	r3,-92(fp)
10012f24:	10800017 	ldw	r2,0(r2)
10012f28:	a0800005 	stb	r2,0(r20)
				size = 1;
10012f2c:	00800044 	movi	r2,1
10012f30:	e0bfc115 	stw	r2,-252(fp)
			}
			sign = '\0';
10012f34:	e03fc705 	stb	zero,-228(fp)
			break;
10012f38:	0001c806 	br	1001365c <___vfiprintf_internal_r+0xca0>
		case 'D':  /* extension */
			flags |= LONGINT;
10012f3c:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'd':
		case 'i':
			_uquad = SARG ();
10012f40:	9880080c 	andi	r2,r19,32
10012f44:	10000826 	beq	r2,zero,10012f68 <___vfiprintf_internal_r+0x5ac>
10012f48:	e13fe917 	ldw	r4,-92(fp)
10012f4c:	20800204 	addi	r2,r4,8
10012f50:	e0bfe915 	stw	r2,-92(fp)
10012f54:	20800017 	ldw	r2,0(r4)
10012f58:	20c00117 	ldw	r3,4(r4)
10012f5c:	e0bfea15 	stw	r2,-88(fp)
10012f60:	e0ffeb15 	stw	r3,-84(fp)
10012f64:	00001e06 	br	10012fe0 <___vfiprintf_internal_r+0x624>
10012f68:	9880040c 	andi	r2,r19,16
10012f6c:	10000826 	beq	r2,zero,10012f90 <___vfiprintf_internal_r+0x5d4>
10012f70:	e0bfe917 	ldw	r2,-92(fp)
10012f74:	10c00104 	addi	r3,r2,4
10012f78:	e0ffe915 	stw	r3,-92(fp)
10012f7c:	10800017 	ldw	r2,0(r2)
10012f80:	e0bfea15 	stw	r2,-88(fp)
10012f84:	1005d7fa 	srai	r2,r2,31
10012f88:	e0bfeb15 	stw	r2,-84(fp)
10012f8c:	00001406 	br	10012fe0 <___vfiprintf_internal_r+0x624>
10012f90:	9880100c 	andi	r2,r19,64
10012f94:	10000b26 	beq	r2,zero,10012fc4 <___vfiprintf_internal_r+0x608>
10012f98:	e0bfe917 	ldw	r2,-92(fp)
10012f9c:	10c00104 	addi	r3,r2,4
10012fa0:	e0ffe915 	stw	r3,-92(fp)
10012fa4:	10800017 	ldw	r2,0(r2)
10012fa8:	10bfffcc 	andi	r2,r2,65535
10012fac:	10a0001c 	xori	r2,r2,32768
10012fb0:	10a00004 	addi	r2,r2,-32768
10012fb4:	e0bfea15 	stw	r2,-88(fp)
10012fb8:	1005d7fa 	srai	r2,r2,31
10012fbc:	e0bfeb15 	stw	r2,-84(fp)
10012fc0:	00000706 	br	10012fe0 <___vfiprintf_internal_r+0x624>
10012fc4:	e0bfe917 	ldw	r2,-92(fp)
10012fc8:	10c00104 	addi	r3,r2,4
10012fcc:	e0ffe915 	stw	r3,-92(fp)
10012fd0:	10800017 	ldw	r2,0(r2)
10012fd4:	e0bfea15 	stw	r2,-88(fp)
10012fd8:	1005d7fa 	srai	r2,r2,31
10012fdc:	e0bfeb15 	stw	r2,-84(fp)
10012fe0:	e0bfea17 	ldw	r2,-88(fp)
10012fe4:	e0bfbc15 	stw	r2,-272(fp)
10012fe8:	e0ffeb17 	ldw	r3,-84(fp)
10012fec:	e0ffbd15 	stw	r3,-268(fp)
#ifndef _NO_LONGLONG
			if ((quad_t)_uquad < 0)
10012ff0:	e0bfbc17 	ldw	r2,-272(fp)
10012ff4:	e0ffbd17 	ldw	r3,-268(fp)
10012ff8:	18000d0e 	bge	r3,zero,10013030 <___vfiprintf_internal_r+0x674>
#else
			if ((long) _uquad < 0)
#endif
			{

				_uquad = -_uquad;
10012ffc:	000d883a 	mov	r6,zero
10013000:	000f883a 	mov	r7,zero
10013004:	e13fbc17 	ldw	r4,-272(fp)
10013008:	e17fbd17 	ldw	r5,-268(fp)
1001300c:	3105c83a 	sub	r2,r6,r4
10013010:	3091803a 	cmpltu	r8,r6,r2
10013014:	3947c83a 	sub	r3,r7,r5
10013018:	1a09c83a 	sub	r4,r3,r8
1001301c:	2007883a 	mov	r3,r4
10013020:	e0bfbc15 	stw	r2,-272(fp)
10013024:	e0ffbd15 	stw	r3,-268(fp)
				sign = '-';
10013028:	00800b44 	movi	r2,45
1001302c:	e0bfc705 	stb	r2,-228(fp)
			}
			base = DEC;
10013030:	00800044 	movi	r2,1
10013034:	e0bfbe05 	stb	r2,-264(fp)
			goto number;
10013038:	0000f806 	br	1001341c <___vfiprintf_internal_r+0xa60>
			flags &= ~LONGINT;
			goto string;
#endif
		case 'n':
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
1001303c:	9880080c 	andi	r2,r19,32
10013040:	10000d26 	beq	r2,zero,10013078 <___vfiprintf_internal_r+0x6bc>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
10013044:	e0bfe917 	ldw	r2,-92(fp)
10013048:	10c00104 	addi	r3,r2,4
1001304c:	e0ffe915 	stw	r3,-92(fp)
10013050:	10800017 	ldw	r2,0(r2)
10013054:	e0ffb917 	ldw	r3,-284(fp)
10013058:	e0fff015 	stw	r3,-64(fp)
1001305c:	1807d7fa 	srai	r3,r3,31
10013060:	e0fff115 	stw	r3,-60(fp)
10013064:	e0fff017 	ldw	r3,-64(fp)
10013068:	10c00015 	stw	r3,0(r2)
1001306c:	e0fff117 	ldw	r3,-60(fp)
10013070:	10c00115 	stw	r3,4(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10013074:	0002c306 	br	10013b84 <___vfiprintf_internal_r+0x11c8>
#ifndef _NO_LONGLONG
			if (flags & QUADINT)
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
10013078:	9880040c 	andi	r2,r19,16
1001307c:	10000726 	beq	r2,zero,1001309c <___vfiprintf_internal_r+0x6e0>
				*GET_ARG (N, ap, long_ptr_t) = ret;
10013080:	e0bfe917 	ldw	r2,-92(fp)
10013084:	10c00104 	addi	r3,r2,4
10013088:	e0ffe915 	stw	r3,-92(fp)
1001308c:	10800017 	ldw	r2,0(r2)
10013090:	e0ffb917 	ldw	r3,-284(fp)
10013094:	10c00015 	stw	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
10013098:	0002ba06 	br	10013b84 <___vfiprintf_internal_r+0x11c8>
				*GET_ARG (N, ap, quad_ptr_t) = ret;
			else
#endif
			if (flags & LONGINT)
				*GET_ARG (N, ap, long_ptr_t) = ret;
			else if (flags & SHORTINT)
1001309c:	9880100c 	andi	r2,r19,64
100130a0:	10000726 	beq	r2,zero,100130c0 <___vfiprintf_internal_r+0x704>
				*GET_ARG (N, ap, short_ptr_t) = ret;
100130a4:	e0bfe917 	ldw	r2,-92(fp)
100130a8:	10c00104 	addi	r3,r2,4
100130ac:	e0ffe915 	stw	r3,-92(fp)
100130b0:	10800017 	ldw	r2,0(r2)
100130b4:	e0ffb917 	ldw	r3,-284(fp)
100130b8:	10c0000d 	sth	r3,0(r2)
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
			continue;	/* no output */
100130bc:	0002b106 	br	10013b84 <___vfiprintf_internal_r+0x11c8>
#ifdef _WANT_IO_C99_FORMATS
			else if (flags & CHARINT)
				*GET_ARG (N, ap, char_ptr_t) = ret;
#endif
			else
				*GET_ARG (N, ap, int_ptr_t) = ret;
100130c0:	e0bfe917 	ldw	r2,-92(fp)
100130c4:	10c00104 	addi	r3,r2,4
100130c8:	e0ffe915 	stw	r3,-92(fp)
100130cc:	10800017 	ldw	r2,0(r2)
100130d0:	e0ffb917 	ldw	r3,-284(fp)
100130d4:	10c00015 	stw	r3,0(r2)
			continue;	/* no output */
100130d8:	0002aa06 	br	10013b84 <___vfiprintf_internal_r+0x11c8>
		case 'O': /* extension */
			flags |= LONGINT;
100130dc:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'o':
			_uquad = UARG ();
100130e0:	9880080c 	andi	r2,r19,32
100130e4:	10000626 	beq	r2,zero,10013100 <___vfiprintf_internal_r+0x744>
100130e8:	e0bfe917 	ldw	r2,-92(fp)
100130ec:	10c00204 	addi	r3,r2,8
100130f0:	e0ffe915 	stw	r3,-92(fp)
100130f4:	15800017 	ldw	r22,0(r2)
100130f8:	15c00117 	ldw	r23,4(r2)
100130fc:	00001c06 	br	10013170 <___vfiprintf_internal_r+0x7b4>
10013100:	9880040c 	andi	r2,r19,16
10013104:	10000726 	beq	r2,zero,10013124 <___vfiprintf_internal_r+0x768>
10013108:	e0bfe917 	ldw	r2,-92(fp)
1001310c:	10c00104 	addi	r3,r2,4
10013110:	e0ffe915 	stw	r3,-92(fp)
10013114:	10800017 	ldw	r2,0(r2)
10013118:	102d883a 	mov	r22,r2
1001311c:	002f883a 	mov	r23,zero
10013120:	00001306 	br	10013170 <___vfiprintf_internal_r+0x7b4>
10013124:	9880100c 	andi	r2,r19,64
10013128:	10000b26 	beq	r2,zero,10013158 <___vfiprintf_internal_r+0x79c>
1001312c:	e0bfe917 	ldw	r2,-92(fp)
10013130:	10c00104 	addi	r3,r2,4
10013134:	e0ffe915 	stw	r3,-92(fp)
10013138:	10800017 	ldw	r2,0(r2)
1001313c:	e0bff215 	stw	r2,-56(fp)
10013140:	e03ff315 	stw	zero,-52(fp)
10013144:	e0bff217 	ldw	r2,-56(fp)
10013148:	15bfffcc 	andi	r22,r2,65535
1001314c:	e0fff317 	ldw	r3,-52(fp)
10013150:	182e703a 	and	r23,r3,zero
10013154:	00000606 	br	10013170 <___vfiprintf_internal_r+0x7b4>
10013158:	e0bfe917 	ldw	r2,-92(fp)
1001315c:	10c00104 	addi	r3,r2,4
10013160:	e0ffe915 	stw	r3,-92(fp)
10013164:	10800017 	ldw	r2,0(r2)
10013168:	102d883a 	mov	r22,r2
1001316c:	002f883a 	mov	r23,zero
10013170:	e5bfbc15 	stw	r22,-272(fp)
10013174:	e5ffbd15 	stw	r23,-268(fp)
			base = OCT;
10013178:	e03fbe05 	stb	zero,-264(fp)
#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			goto nosign;
1001317c:	0000a606 	br	10013418 <___vfiprintf_internal_r+0xa5c>
			 * of printable characters, in an implementation-
			 * defined manner.''
			 *	-- ANSI X3J11
			 */
			/* NOSTRICT */
			_uquad = (uintptr_t) GET_ARG (N, ap, void_ptr_t);
10013180:	e0bfe917 	ldw	r2,-92(fp)
10013184:	10c00104 	addi	r3,r2,4
10013188:	e0ffe915 	stw	r3,-92(fp)
1001318c:	10800017 	ldw	r2,0(r2)
10013190:	e0bfbc15 	stw	r2,-272(fp)
10013194:	e03fbd15 	stw	zero,-268(fp)
			base = HEX;
10013198:	00800084 	movi	r2,2
1001319c:	e0bfbe05 	stb	r2,-264(fp)
			xdigs = "0123456789abcdef";
100131a0:	00840374 	movhi	r2,4109
100131a4:	10beaa04 	addi	r2,r2,-1368
100131a8:	e0bfc215 	stw	r2,-248(fp)
			flags |= HEXPREFIX;
100131ac:	9cc00094 	ori	r19,r19,2
			ox[0] = '0';
100131b0:	00800c04 	movi	r2,48
100131b4:	e0bfe505 	stb	r2,-108(fp)
			ox[1] = ch = 'x';
100131b8:	04401e04 	movi	r17,120
100131bc:	00801e04 	movi	r2,120
100131c0:	e0bfe545 	stb	r2,-107(fp)
			goto nosign;
100131c4:	00009406 	br	10013418 <___vfiprintf_internal_r+0xa5c>
		case 's':
#ifdef _WANT_IO_C99_FORMATS
		case 'S':
#endif
			cp = GET_ARG (N, ap, char_ptr_t);
100131c8:	e0bfe917 	ldw	r2,-92(fp)
100131cc:	10c00104 	addi	r3,r2,4
100131d0:	e0ffe915 	stw	r3,-92(fp)
100131d4:	15000017 	ldw	r20,0(r2)
#ifdef _GLIBC_EXTENSION
string:
#endif
			sign = '\0';
100131d8:	e03fc705 	stb	zero,-228(fp)
#ifndef __OPTIMIZE_SIZE__
			/* Behavior is undefined if the user passed a
			   NULL string when precision is not 0.
			   However, if we are not optimizing for size,
			   we might as well mirror glibc behavior.  */
			if (cp == NULL) {
100131dc:	a000081e 	bne	r20,zero,10013200 <___vfiprintf_internal_r+0x844>
				cp = "(null)";
100131e0:	05040374 	movhi	r20,4109
100131e4:	a53eaf04 	addi	r20,r20,-1348
				size = ((unsigned) prec > 6U) ? 6 : prec;
100131e8:	e0bfbb17 	ldw	r2,-276(fp)
100131ec:	10c001f0 	cmpltui	r3,r2,7
100131f0:	1800011e 	bne	r3,zero,100131f8 <___vfiprintf_internal_r+0x83c>
100131f4:	00800184 	movi	r2,6
100131f8:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
100131fc:	00011706 	br	1001365c <___vfiprintf_internal_r+0xca0>
				}
				cp[size] = '\0';
			}
			else
#endif /* _MB_CAPABLE */
			if (prec >= 0) {
10013200:	e0bfbb17 	ldw	r2,-276(fp)
10013204:	10001016 	blt	r2,zero,10013248 <___vfiprintf_internal_r+0x88c>
				/*
				 * can't use strlen; can only look for the
				 * NUL in the first `prec' characters, and
				 * strlen () will go further.
				 */
				char *p = memchr (cp, 0, prec);
10013208:	e0bfbb17 	ldw	r2,-276(fp)
1001320c:	100d883a 	mov	r6,r2
10013210:	000b883a 	mov	r5,zero
10013214:	a009883a 	mov	r4,r20
10013218:	000fcb80 	call	1000fcb8 <memchr>
1001321c:	e0bfc615 	stw	r2,-232(fp)

				if (p != NULL)
10013220:	e0bfc617 	ldw	r2,-232(fp)
10013224:	10000526 	beq	r2,zero,1001323c <___vfiprintf_internal_r+0x880>
					size = p - cp;
10013228:	e0bfc617 	ldw	r2,-232(fp)
1001322c:	a007883a 	mov	r3,r20
10013230:	10c5c83a 	sub	r2,r2,r3
10013234:	e0bfc115 	stw	r2,-252(fp)
				else
					size = prec;
			} else
				size = strlen (cp);

			break;
10013238:	00010806 	br	1001365c <___vfiprintf_internal_r+0xca0>
				char *p = memchr (cp, 0, prec);

				if (p != NULL)
					size = p - cp;
				else
					size = prec;
1001323c:	e0bfbb17 	ldw	r2,-276(fp)
10013240:	e0bfc115 	stw	r2,-252(fp)
			} else
				size = strlen (cp);

			break;
10013244:	00010506 	br	1001365c <___vfiprintf_internal_r+0xca0>
				if (p != NULL)
					size = p - cp;
				else
					size = prec;
			} else
				size = strlen (cp);
10013248:	a009883a 	mov	r4,r20
1001324c:	00094580 	call	10009458 <strlen>
10013250:	e0bfc115 	stw	r2,-252(fp)

			break;
10013254:	00010106 	br	1001365c <___vfiprintf_internal_r+0xca0>
		case 'U': /* extension */
			flags |= LONGINT;
10013258:	9cc00414 	ori	r19,r19,16
			/*FALLTHROUGH*/
		case 'u':
			_uquad = UARG ();
1001325c:	9880080c 	andi	r2,r19,32
10013260:	10000826 	beq	r2,zero,10013284 <___vfiprintf_internal_r+0x8c8>
10013264:	e0bfe917 	ldw	r2,-92(fp)
10013268:	10c00204 	addi	r3,r2,8
1001326c:	e0ffe915 	stw	r3,-92(fp)
10013270:	10c00017 	ldw	r3,0(r2)
10013274:	e0ffec15 	stw	r3,-80(fp)
10013278:	10c00117 	ldw	r3,4(r2)
1001327c:	e0ffed15 	stw	r3,-76(fp)
10013280:	00001e06 	br	100132fc <___vfiprintf_internal_r+0x940>
10013284:	9880040c 	andi	r2,r19,16
10013288:	10000726 	beq	r2,zero,100132a8 <___vfiprintf_internal_r+0x8ec>
1001328c:	e0bfe917 	ldw	r2,-92(fp)
10013290:	10c00104 	addi	r3,r2,4
10013294:	e0ffe915 	stw	r3,-92(fp)
10013298:	10800017 	ldw	r2,0(r2)
1001329c:	e0bfec15 	stw	r2,-80(fp)
100132a0:	e03fed15 	stw	zero,-76(fp)
100132a4:	00001506 	br	100132fc <___vfiprintf_internal_r+0x940>
100132a8:	9880100c 	andi	r2,r19,64
100132ac:	10000d26 	beq	r2,zero,100132e4 <___vfiprintf_internal_r+0x928>
100132b0:	e0bfe917 	ldw	r2,-92(fp)
100132b4:	10c00104 	addi	r3,r2,4
100132b8:	e0ffe915 	stw	r3,-92(fp)
100132bc:	10800017 	ldw	r2,0(r2)
100132c0:	e0bff415 	stw	r2,-48(fp)
100132c4:	e03ff515 	stw	zero,-44(fp)
100132c8:	e0bff417 	ldw	r2,-48(fp)
100132cc:	10bfffcc 	andi	r2,r2,65535
100132d0:	e0bfec15 	stw	r2,-80(fp)
100132d4:	e0fff517 	ldw	r3,-44(fp)
100132d8:	1806703a 	and	r3,r3,zero
100132dc:	e0ffed15 	stw	r3,-76(fp)
100132e0:	00000606 	br	100132fc <___vfiprintf_internal_r+0x940>
100132e4:	e0bfe917 	ldw	r2,-92(fp)
100132e8:	10c00104 	addi	r3,r2,4
100132ec:	e0ffe915 	stw	r3,-92(fp)
100132f0:	10800017 	ldw	r2,0(r2)
100132f4:	e0bfec15 	stw	r2,-80(fp)
100132f8:	e03fed15 	stw	zero,-76(fp)
100132fc:	e0bfec17 	ldw	r2,-80(fp)
10013300:	e0bfbc15 	stw	r2,-272(fp)
10013304:	e0ffed17 	ldw	r3,-76(fp)
10013308:	e0ffbd15 	stw	r3,-268(fp)
			base = DEC;
1001330c:	00800044 	movi	r2,1
10013310:	e0bfbe05 	stb	r2,-264(fp)
			goto nosign;
10013314:	00004006 	br	10013418 <___vfiprintf_internal_r+0xa5c>
		case 'X':
			xdigs = "0123456789ABCDEF";
10013318:	00840374 	movhi	r2,4109
1001331c:	10beb104 	addi	r2,r2,-1340
10013320:	e0bfc215 	stw	r2,-248(fp)
			goto hex;
10013324:	00000306 	br	10013334 <___vfiprintf_internal_r+0x978>
		case 'x':
			xdigs = "0123456789abcdef";
10013328:	00840374 	movhi	r2,4109
1001332c:	10beaa04 	addi	r2,r2,-1368
10013330:	e0bfc215 	stw	r2,-248(fp)
hex:			_uquad = UARG ();
10013334:	9880080c 	andi	r2,r19,32
10013338:	10000826 	beq	r2,zero,1001335c <___vfiprintf_internal_r+0x9a0>
1001333c:	e0bfe917 	ldw	r2,-92(fp)
10013340:	10c00204 	addi	r3,r2,8
10013344:	e0ffe915 	stw	r3,-92(fp)
10013348:	10c00017 	ldw	r3,0(r2)
1001334c:	e0ffee15 	stw	r3,-72(fp)
10013350:	10c00117 	ldw	r3,4(r2)
10013354:	e0ffef15 	stw	r3,-68(fp)
10013358:	00001e06 	br	100133d4 <___vfiprintf_internal_r+0xa18>
1001335c:	9880040c 	andi	r2,r19,16
10013360:	10000726 	beq	r2,zero,10013380 <___vfiprintf_internal_r+0x9c4>
10013364:	e0bfe917 	ldw	r2,-92(fp)
10013368:	10c00104 	addi	r3,r2,4
1001336c:	e0ffe915 	stw	r3,-92(fp)
10013370:	10800017 	ldw	r2,0(r2)
10013374:	e0bfee15 	stw	r2,-72(fp)
10013378:	e03fef15 	stw	zero,-68(fp)
1001337c:	00001506 	br	100133d4 <___vfiprintf_internal_r+0xa18>
10013380:	9880100c 	andi	r2,r19,64
10013384:	10000d26 	beq	r2,zero,100133bc <___vfiprintf_internal_r+0xa00>
10013388:	e0bfe917 	ldw	r2,-92(fp)
1001338c:	10c00104 	addi	r3,r2,4
10013390:	e0ffe915 	stw	r3,-92(fp)
10013394:	10800017 	ldw	r2,0(r2)
10013398:	e0bff615 	stw	r2,-40(fp)
1001339c:	e03ff715 	stw	zero,-36(fp)
100133a0:	e0bff617 	ldw	r2,-40(fp)
100133a4:	10bfffcc 	andi	r2,r2,65535
100133a8:	e0bfee15 	stw	r2,-72(fp)
100133ac:	e0fff717 	ldw	r3,-36(fp)
100133b0:	1806703a 	and	r3,r3,zero
100133b4:	e0ffef15 	stw	r3,-68(fp)
100133b8:	00000606 	br	100133d4 <___vfiprintf_internal_r+0xa18>
100133bc:	e0bfe917 	ldw	r2,-92(fp)
100133c0:	10c00104 	addi	r3,r2,4
100133c4:	e0ffe915 	stw	r3,-92(fp)
100133c8:	10800017 	ldw	r2,0(r2)
100133cc:	e0bfee15 	stw	r2,-72(fp)
100133d0:	e03fef15 	stw	zero,-68(fp)
100133d4:	e0bfee17 	ldw	r2,-72(fp)
100133d8:	e0bfbc15 	stw	r2,-272(fp)
100133dc:	e0ffef17 	ldw	r3,-68(fp)
100133e0:	e0ffbd15 	stw	r3,-268(fp)
			base = HEX;
100133e4:	00800084 	movi	r2,2
100133e8:	e0bfbe05 	stb	r2,-264(fp)
			/* leading 0x/X only if non-zero */
			if (flags & ALT && _uquad != 0) {
100133ec:	9880004c 	andi	r2,r19,1
100133f0:	10000926 	beq	r2,zero,10013418 <___vfiprintf_internal_r+0xa5c>
100133f4:	e0bfbc17 	ldw	r2,-272(fp)
100133f8:	e0ffbd17 	ldw	r3,-268(fp)
100133fc:	10c4b03a 	or	r2,r2,r3
10013400:	10000526 	beq	r2,zero,10013418 <___vfiprintf_internal_r+0xa5c>
				ox[0] = '0';
10013404:	00800c04 	movi	r2,48
10013408:	e0bfe505 	stb	r2,-108(fp)
				ox[1] = ch;
1001340c:	8805883a 	mov	r2,r17
10013410:	e0bfe545 	stb	r2,-107(fp)
				flags |= HEXPREFIX;
10013414:	9cc00094 	ori	r19,r19,2

#ifdef _WANT_IO_C99_FORMATS
			flags &= ~GROUPING;
#endif
			/* unsigned conversions */
nosign:			sign = '\0';
10013418:	e03fc705 	stb	zero,-228(fp)
			/*
			 * ``... diouXx conversions ... if a precision is
			 * specified, the 0 flag will be ignored.''
			 *	-- ANSI X3J11
			 */
number:			if ((dprec = prec) >= 0)
1001341c:	e0bfbb17 	ldw	r2,-276(fp)
10013420:	e0bfbf15 	stw	r2,-260(fp)
10013424:	e0bfbf17 	ldw	r2,-260(fp)
10013428:	10000216 	blt	r2,zero,10013434 <___vfiprintf_internal_r+0xa78>
				flags &= ~ZEROPAD;
1001342c:	00bfdfc4 	movi	r2,-129
10013430:	98a6703a 	and	r19,r19,r2
			/*
			 * ``The result of converting a zero value with an
			 * explicit precision of zero is no characters.''
			 *	-- ANSI X3J11
			 */
			cp = buf + BUF;
10013434:	e53fdb04 	addi	r20,fp,-148
10013438:	a5000a04 	addi	r20,r20,40
			if (_uquad != 0 || prec != 0) {
1001343c:	e0bfbc17 	ldw	r2,-272(fp)
10013440:	e0ffbd17 	ldw	r3,-268(fp)
10013444:	10c4b03a 	or	r2,r2,r3
10013448:	1000021e 	bne	r2,zero,10013454 <___vfiprintf_internal_r+0xa98>
1001344c:	e0bfbb17 	ldw	r2,-276(fp)
10013450:	10006c26 	beq	r2,zero,10013604 <___vfiprintf_internal_r+0xc48>
				/*
				 * Unsigned mod is hard, and unsigned mod
				 * by a constant is easier than that by
				 * a variable; hence this switch.
				 */
				switch (base) {
10013454:	e0bfbe03 	ldbu	r2,-264(fp)
10013458:	10c00060 	cmpeqi	r3,r2,1
1001345c:	1800211e 	bne	r3,zero,100134e4 <___vfiprintf_internal_r+0xb28>
10013460:	10c000a0 	cmpeqi	r3,r2,2
10013464:	1800491e 	bne	r3,zero,1001358c <___vfiprintf_internal_r+0xbd0>
10013468:	10005d1e 	bne	r2,zero,100135e0 <___vfiprintf_internal_r+0xc24>
				case OCT:
					do {
						*--cp = to_char (_uquad & 7);
1001346c:	a53fffc4 	addi	r20,r20,-1
10013470:	e0bfbc17 	ldw	r2,-272(fp)
10013474:	108001cc 	andi	r2,r2,7
10013478:	10800c04 	addi	r2,r2,48
1001347c:	a0800005 	stb	r2,0(r20)
						_uquad >>= 3;
10013480:	e0bfbd17 	ldw	r2,-268(fp)
10013484:	1004977a 	slli	r2,r2,29
10013488:	e0ffbc17 	ldw	r3,-272(fp)
1001348c:	1806d0fa 	srli	r3,r3,3
10013490:	1884b03a 	or	r2,r3,r2
10013494:	e0bfbc15 	stw	r2,-272(fp)
10013498:	e0bfbd17 	ldw	r2,-268(fp)
1001349c:	1004d0fa 	srli	r2,r2,3
100134a0:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
100134a4:	e0bfbc17 	ldw	r2,-272(fp)
100134a8:	e0ffbd17 	ldw	r3,-268(fp)
100134ac:	10c4b03a 	or	r2,r2,r3
100134b0:	103fee1e 	bne	r2,zero,1001346c <__alt_data_end+0xf801346c>
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
100134b4:	9880004c 	andi	r2,r19,1
100134b8:	10005026 	beq	r2,zero,100135fc <___vfiprintf_internal_r+0xc40>
100134bc:	a0800003 	ldbu	r2,0(r20)
100134c0:	10803fcc 	andi	r2,r2,255
100134c4:	1080201c 	xori	r2,r2,128
100134c8:	10bfe004 	addi	r2,r2,-128
100134cc:	10800c20 	cmpeqi	r2,r2,48
100134d0:	10004a1e 	bne	r2,zero,100135fc <___vfiprintf_internal_r+0xc40>
						*--cp = '0';
100134d4:	a53fffc4 	addi	r20,r20,-1
100134d8:	00800c04 	movi	r2,48
100134dc:	a0800005 	stb	r2,0(r20)
					break;
100134e0:	00004606 	br	100135fc <___vfiprintf_internal_r+0xc40>

				case DEC:
					/* many numbers are 1 digit */
					if (_uquad < 10) {
100134e4:	e0bfbd17 	ldw	r2,-268(fp)
100134e8:	10000a1e 	bne	r2,zero,10013514 <___vfiprintf_internal_r+0xb58>
100134ec:	e0bfbd17 	ldw	r2,-268(fp)
100134f0:	1000031e 	bne	r2,zero,10013500 <___vfiprintf_internal_r+0xb44>
100134f4:	e0bfbc17 	ldw	r2,-272(fp)
100134f8:	108002a8 	cmpgeui	r2,r2,10
100134fc:	1000051e 	bne	r2,zero,10013514 <___vfiprintf_internal_r+0xb58>
						*--cp = to_char(_uquad);
10013500:	a53fffc4 	addi	r20,r20,-1
10013504:	e0bfbc17 	ldw	r2,-272(fp)
10013508:	10800c04 	addi	r2,r2,48
1001350c:	a0800005 	stb	r2,0(r20)
						break;
10013510:	00003b06 	br	10013600 <___vfiprintf_internal_r+0xc44>
					}
#ifdef _WANT_IO_C99_FORMATS
					ndig = 0;
#endif
					do {
					  *--cp = to_char (_uquad % 10);
10013514:	a53fffc4 	addi	r20,r20,-1
10013518:	e0bfbc17 	ldw	r2,-272(fp)
1001351c:	e0ffbd17 	ldw	r3,-268(fp)
10013520:	01800284 	movi	r6,10
10013524:	000f883a 	mov	r7,zero
10013528:	1009883a 	mov	r4,r2
1001352c:	180b883a 	mov	r5,r3
10013530:	0014e540 	call	10014e54 <__umoddi3>
10013534:	1009883a 	mov	r4,r2
10013538:	180b883a 	mov	r5,r3
1001353c:	2005883a 	mov	r2,r4
10013540:	2807883a 	mov	r3,r5
10013544:	10800c04 	addi	r2,r2,48
10013548:	a0800005 	stb	r2,0(r20)
					       next cases. */
					    if (grouping[1] != '\0')
					      grouping++;
					  }
#endif
					  _uquad /= 10;
1001354c:	e0bfbc17 	ldw	r2,-272(fp)
10013550:	e0ffbd17 	ldw	r3,-268(fp)
10013554:	01800284 	movi	r6,10
10013558:	000f883a 	mov	r7,zero
1001355c:	1009883a 	mov	r4,r2
10013560:	180b883a 	mov	r5,r3
10013564:	00148580 	call	10014858 <__udivdi3>
10013568:	1009883a 	mov	r4,r2
1001356c:	180b883a 	mov	r5,r3
10013570:	e13fbc15 	stw	r4,-272(fp)
10013574:	e17fbd15 	stw	r5,-268(fp)
					} while (_uquad != 0);
10013578:	e0bfbc17 	ldw	r2,-272(fp)
1001357c:	e0ffbd17 	ldw	r3,-268(fp)
10013580:	10c4b03a 	or	r2,r2,r3
10013584:	103fe31e 	bne	r2,zero,10013514 <__alt_data_end+0xf8013514>
					break;
10013588:	00001d06 	br	10013600 <___vfiprintf_internal_r+0xc44>

				case HEX:
					do {
						*--cp = xdigs[_uquad & 15];
1001358c:	a53fffc4 	addi	r20,r20,-1
10013590:	e0bfbc17 	ldw	r2,-272(fp)
10013594:	108003cc 	andi	r2,r2,15
10013598:	e0ffc217 	ldw	r3,-248(fp)
1001359c:	1885883a 	add	r2,r3,r2
100135a0:	10800003 	ldbu	r2,0(r2)
100135a4:	a0800005 	stb	r2,0(r20)
						_uquad >>= 4;
100135a8:	e0bfbd17 	ldw	r2,-268(fp)
100135ac:	1004973a 	slli	r2,r2,28
100135b0:	e0ffbc17 	ldw	r3,-272(fp)
100135b4:	1806d13a 	srli	r3,r3,4
100135b8:	1884b03a 	or	r2,r3,r2
100135bc:	e0bfbc15 	stw	r2,-272(fp)
100135c0:	e0bfbd17 	ldw	r2,-268(fp)
100135c4:	1004d13a 	srli	r2,r2,4
100135c8:	e0bfbd15 	stw	r2,-268(fp)
					} while (_uquad);
100135cc:	e0bfbc17 	ldw	r2,-272(fp)
100135d0:	e0ffbd17 	ldw	r3,-268(fp)
100135d4:	10c4b03a 	or	r2,r2,r3
100135d8:	103fec1e 	bne	r2,zero,1001358c <__alt_data_end+0xf801358c>
					break;
100135dc:	00000806 	br	10013600 <___vfiprintf_internal_r+0xc44>

				default:
					cp = "bug in vfprintf: bad base";
100135e0:	05040374 	movhi	r20,4109
100135e4:	a53eb604 	addi	r20,r20,-1320
					size = strlen (cp);
100135e8:	a009883a 	mov	r4,r20
100135ec:	00094580 	call	10009458 <strlen>
100135f0:	e0bfc115 	stw	r2,-252(fp)
					goto skipsize;
100135f4:	0001883a 	nop
                       else if (base == OCT && (flags & ALT))
                         *--cp = '0';

			size = buf + BUF - cp;
		skipsize:
			break;
100135f8:	00001806 	br	1001365c <___vfiprintf_internal_r+0xca0>
						_uquad >>= 3;
					} while (_uquad);
					/* handle octal leading 0 */
					if (flags & ALT && *cp != '0')
						*--cp = '0';
					break;
100135fc:	0001883a 	nop
				default:
					cp = "bug in vfprintf: bad base";
					size = strlen (cp);
					goto skipsize;
				}
			}
10013600:	00000706 	br	10013620 <___vfiprintf_internal_r+0xc64>
			*     -- ANSI X3J11
			*
			* To demonstrate this case, compile and run:
                        *    printf ("%#.0o",0);
			*/
                       else if (base == OCT && (flags & ALT))
10013604:	e0bfbe03 	ldbu	r2,-264(fp)
10013608:	1000051e 	bne	r2,zero,10013620 <___vfiprintf_internal_r+0xc64>
1001360c:	9880004c 	andi	r2,r19,1
10013610:	10000326 	beq	r2,zero,10013620 <___vfiprintf_internal_r+0xc64>
                         *--cp = '0';
10013614:	a53fffc4 	addi	r20,r20,-1
10013618:	00800c04 	movi	r2,48
1001361c:	a0800005 	stb	r2,0(r20)

			size = buf + BUF - cp;
10013620:	e0bfdb04 	addi	r2,fp,-148
10013624:	10800a04 	addi	r2,r2,40
10013628:	1007883a 	mov	r3,r2
1001362c:	a005883a 	mov	r2,r20
10013630:	1885c83a 	sub	r2,r3,r2
10013634:	e0bfc115 	stw	r2,-252(fp)
		skipsize:
			break;
10013638:	00000806 	br	1001365c <___vfiprintf_internal_r+0xca0>
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
1001363c:	88015426 	beq	r17,zero,10013b90 <___vfiprintf_internal_r+0x11d4>
				goto done;
			/* pretend it was %c with argument ch */
			cp = buf;
10013640:	e53fdb04 	addi	r20,fp,-148
			*cp = ch;
10013644:	8805883a 	mov	r2,r17
10013648:	a0800005 	stb	r2,0(r20)
			size = 1;
1001364c:	00800044 	movi	r2,1
10013650:	e0bfc115 	stw	r2,-252(fp)
			sign = '\0';
10013654:	e03fc705 	stb	zero,-228(fp)
			break;
10013658:	0001883a 	nop
		 * If flags&FPT, ch must be in [aAeEfg].
		 *
		 * Compute actual size, so we know how much to pad.
		 * size excludes decimal prec; realsz includes it.
		 */
		realsz = dprec > size ? dprec : size;
1001365c:	e0ffbf17 	ldw	r3,-260(fp)
10013660:	e0bfc117 	ldw	r2,-252(fp)
10013664:	10c0010e 	bge	r2,r3,1001366c <___vfiprintf_internal_r+0xcb0>
10013668:	1805883a 	mov	r2,r3
1001366c:	e0bfc015 	stw	r2,-256(fp)
		if (sign)
10013670:	e0bfc703 	ldbu	r2,-228(fp)
10013674:	10803fcc 	andi	r2,r2,255
10013678:	1080201c 	xori	r2,r2,128
1001367c:	10bfe004 	addi	r2,r2,-128
10013680:	10000326 	beq	r2,zero,10013690 <___vfiprintf_internal_r+0xcd4>
			realsz++;
10013684:	e0bfc017 	ldw	r2,-256(fp)
10013688:	10800044 	addi	r2,r2,1
1001368c:	e0bfc015 	stw	r2,-256(fp)
		if (flags & HEXPREFIX)
10013690:	9880008c 	andi	r2,r19,2
10013694:	10000326 	beq	r2,zero,100136a4 <___vfiprintf_internal_r+0xce8>
			realsz+= 2;
10013698:	e0bfc017 	ldw	r2,-256(fp)
1001369c:	10800084 	addi	r2,r2,2
100136a0:	e0bfc015 	stw	r2,-256(fp)

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
100136a4:	9880210c 	andi	r2,r19,132
100136a8:	1000351e 	bne	r2,zero,10013780 <___vfiprintf_internal_r+0xdc4>
			PAD (width - realsz, blanks);
100136ac:	e0ffba17 	ldw	r3,-280(fp)
100136b0:	e0bfc017 	ldw	r2,-256(fp)
100136b4:	18a1c83a 	sub	r16,r3,r2
100136b8:	0400310e 	bge	zero,r16,10013780 <___vfiprintf_internal_r+0xdc4>
100136bc:	00001706 	br	1001371c <___vfiprintf_internal_r+0xd60>
100136c0:	00840374 	movhi	r2,4109
100136c4:	10bebc84 	addi	r2,r2,-1294
100136c8:	90800015 	stw	r2,0(r18)
100136cc:	00800404 	movi	r2,16
100136d0:	90800115 	stw	r2,4(r18)
100136d4:	e0bfca17 	ldw	r2,-216(fp)
100136d8:	10800404 	addi	r2,r2,16
100136dc:	e0bfca15 	stw	r2,-216(fp)
100136e0:	94800204 	addi	r18,r18,8
100136e4:	e0bfc917 	ldw	r2,-220(fp)
100136e8:	10800044 	addi	r2,r2,1
100136ec:	e0bfc915 	stw	r2,-220(fp)
100136f0:	e0bfc917 	ldw	r2,-220(fp)
100136f4:	10800210 	cmplti	r2,r2,8
100136f8:	1000071e 	bne	r2,zero,10013718 <___vfiprintf_internal_r+0xd5c>
100136fc:	e0bfc804 	addi	r2,fp,-224
10013700:	100d883a 	mov	r6,r2
10013704:	e17fe717 	ldw	r5,-100(fp)
10013708:	e13fe617 	ldw	r4,-104(fp)
1001370c:	00127380 	call	10012738 <__sprint_r>
10013710:	10012d1e 	bne	r2,zero,10013bc8 <___vfiprintf_internal_r+0x120c>
10013714:	e4bfcb04 	addi	r18,fp,-212
10013718:	843ffc04 	addi	r16,r16,-16
1001371c:	80800448 	cmpgei	r2,r16,17
10013720:	103fe71e 	bne	r2,zero,100136c0 <__alt_data_end+0xf80136c0>
10013724:	00840374 	movhi	r2,4109
10013728:	10bebc84 	addi	r2,r2,-1294
1001372c:	90800015 	stw	r2,0(r18)
10013730:	8005883a 	mov	r2,r16
10013734:	90800115 	stw	r2,4(r18)
10013738:	e0bfca17 	ldw	r2,-216(fp)
1001373c:	8007883a 	mov	r3,r16
10013740:	10c5883a 	add	r2,r2,r3
10013744:	e0bfca15 	stw	r2,-216(fp)
10013748:	94800204 	addi	r18,r18,8
1001374c:	e0bfc917 	ldw	r2,-220(fp)
10013750:	10800044 	addi	r2,r2,1
10013754:	e0bfc915 	stw	r2,-220(fp)
10013758:	e0bfc917 	ldw	r2,-220(fp)
1001375c:	10800210 	cmplti	r2,r2,8
10013760:	1000071e 	bne	r2,zero,10013780 <___vfiprintf_internal_r+0xdc4>
10013764:	e0bfc804 	addi	r2,fp,-224
10013768:	100d883a 	mov	r6,r2
1001376c:	e17fe717 	ldw	r5,-100(fp)
10013770:	e13fe617 	ldw	r4,-104(fp)
10013774:	00127380 	call	10012738 <__sprint_r>
10013778:	1001151e 	bne	r2,zero,10013bd0 <___vfiprintf_internal_r+0x1214>
1001377c:	e4bfcb04 	addi	r18,fp,-212

		/* prefix */
		if (sign)
10013780:	e0bfc703 	ldbu	r2,-228(fp)
10013784:	10803fcc 	andi	r2,r2,255
10013788:	1080201c 	xori	r2,r2,128
1001378c:	10bfe004 	addi	r2,r2,-128
10013790:	10001526 	beq	r2,zero,100137e8 <___vfiprintf_internal_r+0xe2c>
			PRINT (&sign, 1);
10013794:	e0bfc704 	addi	r2,fp,-228
10013798:	90800015 	stw	r2,0(r18)
1001379c:	00800044 	movi	r2,1
100137a0:	90800115 	stw	r2,4(r18)
100137a4:	e0bfca17 	ldw	r2,-216(fp)
100137a8:	10800044 	addi	r2,r2,1
100137ac:	e0bfca15 	stw	r2,-216(fp)
100137b0:	94800204 	addi	r18,r18,8
100137b4:	e0bfc917 	ldw	r2,-220(fp)
100137b8:	10800044 	addi	r2,r2,1
100137bc:	e0bfc915 	stw	r2,-220(fp)
100137c0:	e0bfc917 	ldw	r2,-220(fp)
100137c4:	10800210 	cmplti	r2,r2,8
100137c8:	1000071e 	bne	r2,zero,100137e8 <___vfiprintf_internal_r+0xe2c>
100137cc:	e0bfc804 	addi	r2,fp,-224
100137d0:	100d883a 	mov	r6,r2
100137d4:	e17fe717 	ldw	r5,-100(fp)
100137d8:	e13fe617 	ldw	r4,-104(fp)
100137dc:	00127380 	call	10012738 <__sprint_r>
100137e0:	1000fd1e 	bne	r2,zero,10013bd8 <___vfiprintf_internal_r+0x121c>
100137e4:	e4bfcb04 	addi	r18,fp,-212
		if (flags & HEXPREFIX)
100137e8:	9880008c 	andi	r2,r19,2
100137ec:	10001526 	beq	r2,zero,10013844 <___vfiprintf_internal_r+0xe88>
			PRINT (ox, 2);
100137f0:	e0bfe504 	addi	r2,fp,-108
100137f4:	90800015 	stw	r2,0(r18)
100137f8:	00800084 	movi	r2,2
100137fc:	90800115 	stw	r2,4(r18)
10013800:	e0bfca17 	ldw	r2,-216(fp)
10013804:	10800084 	addi	r2,r2,2
10013808:	e0bfca15 	stw	r2,-216(fp)
1001380c:	94800204 	addi	r18,r18,8
10013810:	e0bfc917 	ldw	r2,-220(fp)
10013814:	10800044 	addi	r2,r2,1
10013818:	e0bfc915 	stw	r2,-220(fp)
1001381c:	e0bfc917 	ldw	r2,-220(fp)
10013820:	10800210 	cmplti	r2,r2,8
10013824:	1000071e 	bne	r2,zero,10013844 <___vfiprintf_internal_r+0xe88>
10013828:	e0bfc804 	addi	r2,fp,-224
1001382c:	100d883a 	mov	r6,r2
10013830:	e17fe717 	ldw	r5,-100(fp)
10013834:	e13fe617 	ldw	r4,-104(fp)
10013838:	00127380 	call	10012738 <__sprint_r>
1001383c:	1000e81e 	bne	r2,zero,10013be0 <___vfiprintf_internal_r+0x1224>
10013840:	e4bfcb04 	addi	r18,fp,-212

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
10013844:	9880210c 	andi	r2,r19,132
10013848:	10802018 	cmpnei	r2,r2,128
1001384c:	1000351e 	bne	r2,zero,10013924 <___vfiprintf_internal_r+0xf68>
			PAD (width - realsz, zeroes);
10013850:	e0ffba17 	ldw	r3,-280(fp)
10013854:	e0bfc017 	ldw	r2,-256(fp)
10013858:	18a1c83a 	sub	r16,r3,r2
1001385c:	0400310e 	bge	zero,r16,10013924 <___vfiprintf_internal_r+0xf68>
10013860:	00001706 	br	100138c0 <___vfiprintf_internal_r+0xf04>
10013864:	00840374 	movhi	r2,4109
10013868:	10bec084 	addi	r2,r2,-1278
1001386c:	90800015 	stw	r2,0(r18)
10013870:	00800404 	movi	r2,16
10013874:	90800115 	stw	r2,4(r18)
10013878:	e0bfca17 	ldw	r2,-216(fp)
1001387c:	10800404 	addi	r2,r2,16
10013880:	e0bfca15 	stw	r2,-216(fp)
10013884:	94800204 	addi	r18,r18,8
10013888:	e0bfc917 	ldw	r2,-220(fp)
1001388c:	10800044 	addi	r2,r2,1
10013890:	e0bfc915 	stw	r2,-220(fp)
10013894:	e0bfc917 	ldw	r2,-220(fp)
10013898:	10800210 	cmplti	r2,r2,8
1001389c:	1000071e 	bne	r2,zero,100138bc <___vfiprintf_internal_r+0xf00>
100138a0:	e0bfc804 	addi	r2,fp,-224
100138a4:	100d883a 	mov	r6,r2
100138a8:	e17fe717 	ldw	r5,-100(fp)
100138ac:	e13fe617 	ldw	r4,-104(fp)
100138b0:	00127380 	call	10012738 <__sprint_r>
100138b4:	1000cc1e 	bne	r2,zero,10013be8 <___vfiprintf_internal_r+0x122c>
100138b8:	e4bfcb04 	addi	r18,fp,-212
100138bc:	843ffc04 	addi	r16,r16,-16
100138c0:	80800448 	cmpgei	r2,r16,17
100138c4:	103fe71e 	bne	r2,zero,10013864 <__alt_data_end+0xf8013864>
100138c8:	00840374 	movhi	r2,4109
100138cc:	10bec084 	addi	r2,r2,-1278
100138d0:	90800015 	stw	r2,0(r18)
100138d4:	8005883a 	mov	r2,r16
100138d8:	90800115 	stw	r2,4(r18)
100138dc:	e0bfca17 	ldw	r2,-216(fp)
100138e0:	8007883a 	mov	r3,r16
100138e4:	10c5883a 	add	r2,r2,r3
100138e8:	e0bfca15 	stw	r2,-216(fp)
100138ec:	94800204 	addi	r18,r18,8
100138f0:	e0bfc917 	ldw	r2,-220(fp)
100138f4:	10800044 	addi	r2,r2,1
100138f8:	e0bfc915 	stw	r2,-220(fp)
100138fc:	e0bfc917 	ldw	r2,-220(fp)
10013900:	10800210 	cmplti	r2,r2,8
10013904:	1000071e 	bne	r2,zero,10013924 <___vfiprintf_internal_r+0xf68>
10013908:	e0bfc804 	addi	r2,fp,-224
1001390c:	100d883a 	mov	r6,r2
10013910:	e17fe717 	ldw	r5,-100(fp)
10013914:	e13fe617 	ldw	r4,-104(fp)
10013918:	00127380 	call	10012738 <__sprint_r>
1001391c:	1000b41e 	bne	r2,zero,10013bf0 <___vfiprintf_internal_r+0x1234>
10013920:	e4bfcb04 	addi	r18,fp,-212

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
10013924:	e0ffbf17 	ldw	r3,-260(fp)
10013928:	e0bfc117 	ldw	r2,-252(fp)
1001392c:	18a1c83a 	sub	r16,r3,r2
10013930:	0400310e 	bge	zero,r16,100139f8 <___vfiprintf_internal_r+0x103c>
10013934:	00001706 	br	10013994 <___vfiprintf_internal_r+0xfd8>
10013938:	00840374 	movhi	r2,4109
1001393c:	10bec084 	addi	r2,r2,-1278
10013940:	90800015 	stw	r2,0(r18)
10013944:	00800404 	movi	r2,16
10013948:	90800115 	stw	r2,4(r18)
1001394c:	e0bfca17 	ldw	r2,-216(fp)
10013950:	10800404 	addi	r2,r2,16
10013954:	e0bfca15 	stw	r2,-216(fp)
10013958:	94800204 	addi	r18,r18,8
1001395c:	e0bfc917 	ldw	r2,-220(fp)
10013960:	10800044 	addi	r2,r2,1
10013964:	e0bfc915 	stw	r2,-220(fp)
10013968:	e0bfc917 	ldw	r2,-220(fp)
1001396c:	10800210 	cmplti	r2,r2,8
10013970:	1000071e 	bne	r2,zero,10013990 <___vfiprintf_internal_r+0xfd4>
10013974:	e0bfc804 	addi	r2,fp,-224
10013978:	100d883a 	mov	r6,r2
1001397c:	e17fe717 	ldw	r5,-100(fp)
10013980:	e13fe617 	ldw	r4,-104(fp)
10013984:	00127380 	call	10012738 <__sprint_r>
10013988:	10009b1e 	bne	r2,zero,10013bf8 <___vfiprintf_internal_r+0x123c>
1001398c:	e4bfcb04 	addi	r18,fp,-212
10013990:	843ffc04 	addi	r16,r16,-16
10013994:	80800448 	cmpgei	r2,r16,17
10013998:	103fe71e 	bne	r2,zero,10013938 <__alt_data_end+0xf8013938>
1001399c:	00840374 	movhi	r2,4109
100139a0:	10bec084 	addi	r2,r2,-1278
100139a4:	90800015 	stw	r2,0(r18)
100139a8:	8005883a 	mov	r2,r16
100139ac:	90800115 	stw	r2,4(r18)
100139b0:	e0bfca17 	ldw	r2,-216(fp)
100139b4:	8007883a 	mov	r3,r16
100139b8:	10c5883a 	add	r2,r2,r3
100139bc:	e0bfca15 	stw	r2,-216(fp)
100139c0:	94800204 	addi	r18,r18,8
100139c4:	e0bfc917 	ldw	r2,-220(fp)
100139c8:	10800044 	addi	r2,r2,1
100139cc:	e0bfc915 	stw	r2,-220(fp)
100139d0:	e0bfc917 	ldw	r2,-220(fp)
100139d4:	10800210 	cmplti	r2,r2,8
100139d8:	1000071e 	bne	r2,zero,100139f8 <___vfiprintf_internal_r+0x103c>
100139dc:	e0bfc804 	addi	r2,fp,-224
100139e0:	100d883a 	mov	r6,r2
100139e4:	e17fe717 	ldw	r5,-100(fp)
100139e8:	e13fe617 	ldw	r4,-104(fp)
100139ec:	00127380 	call	10012738 <__sprint_r>
100139f0:	1000831e 	bne	r2,zero,10013c00 <___vfiprintf_internal_r+0x1244>
100139f4:	e4bfcb04 	addi	r18,fp,-212
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
100139f8:	95000015 	stw	r20,0(r18)
100139fc:	e0bfc117 	ldw	r2,-252(fp)
10013a00:	90800115 	stw	r2,4(r18)
10013a04:	e0ffca17 	ldw	r3,-216(fp)
10013a08:	e0bfc117 	ldw	r2,-252(fp)
10013a0c:	1885883a 	add	r2,r3,r2
10013a10:	e0bfca15 	stw	r2,-216(fp)
10013a14:	94800204 	addi	r18,r18,8
10013a18:	e0bfc917 	ldw	r2,-220(fp)
10013a1c:	10800044 	addi	r2,r2,1
10013a20:	e0bfc915 	stw	r2,-220(fp)
10013a24:	e0bfc917 	ldw	r2,-220(fp)
10013a28:	10800210 	cmplti	r2,r2,8
10013a2c:	1000071e 	bne	r2,zero,10013a4c <___vfiprintf_internal_r+0x1090>
10013a30:	e0bfc804 	addi	r2,fp,-224
10013a34:	100d883a 	mov	r6,r2
10013a38:	e17fe717 	ldw	r5,-100(fp)
10013a3c:	e13fe617 	ldw	r4,-104(fp)
10013a40:	00127380 	call	10012738 <__sprint_r>
10013a44:	1000701e 	bne	r2,zero,10013c08 <___vfiprintf_internal_r+0x124c>
10013a48:	e4bfcb04 	addi	r18,fp,-212
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
10013a4c:	9880010c 	andi	r2,r19,4
10013a50:	10003526 	beq	r2,zero,10013b28 <___vfiprintf_internal_r+0x116c>
			PAD (width - realsz, blanks);
10013a54:	e0ffba17 	ldw	r3,-280(fp)
10013a58:	e0bfc017 	ldw	r2,-256(fp)
10013a5c:	18a1c83a 	sub	r16,r3,r2
10013a60:	0400310e 	bge	zero,r16,10013b28 <___vfiprintf_internal_r+0x116c>
10013a64:	00001706 	br	10013ac4 <___vfiprintf_internal_r+0x1108>
10013a68:	00840374 	movhi	r2,4109
10013a6c:	10bebc84 	addi	r2,r2,-1294
10013a70:	90800015 	stw	r2,0(r18)
10013a74:	00800404 	movi	r2,16
10013a78:	90800115 	stw	r2,4(r18)
10013a7c:	e0bfca17 	ldw	r2,-216(fp)
10013a80:	10800404 	addi	r2,r2,16
10013a84:	e0bfca15 	stw	r2,-216(fp)
10013a88:	94800204 	addi	r18,r18,8
10013a8c:	e0bfc917 	ldw	r2,-220(fp)
10013a90:	10800044 	addi	r2,r2,1
10013a94:	e0bfc915 	stw	r2,-220(fp)
10013a98:	e0bfc917 	ldw	r2,-220(fp)
10013a9c:	10800210 	cmplti	r2,r2,8
10013aa0:	1000071e 	bne	r2,zero,10013ac0 <___vfiprintf_internal_r+0x1104>
10013aa4:	e0bfc804 	addi	r2,fp,-224
10013aa8:	100d883a 	mov	r6,r2
10013aac:	e17fe717 	ldw	r5,-100(fp)
10013ab0:	e13fe617 	ldw	r4,-104(fp)
10013ab4:	00127380 	call	10012738 <__sprint_r>
10013ab8:	1000551e 	bne	r2,zero,10013c10 <___vfiprintf_internal_r+0x1254>
10013abc:	e4bfcb04 	addi	r18,fp,-212
10013ac0:	843ffc04 	addi	r16,r16,-16
10013ac4:	80800448 	cmpgei	r2,r16,17
10013ac8:	103fe71e 	bne	r2,zero,10013a68 <__alt_data_end+0xf8013a68>
10013acc:	00840374 	movhi	r2,4109
10013ad0:	10bebc84 	addi	r2,r2,-1294
10013ad4:	90800015 	stw	r2,0(r18)
10013ad8:	8005883a 	mov	r2,r16
10013adc:	90800115 	stw	r2,4(r18)
10013ae0:	e0bfca17 	ldw	r2,-216(fp)
10013ae4:	8007883a 	mov	r3,r16
10013ae8:	10c5883a 	add	r2,r2,r3
10013aec:	e0bfca15 	stw	r2,-216(fp)
10013af0:	94800204 	addi	r18,r18,8
10013af4:	e0bfc917 	ldw	r2,-220(fp)
10013af8:	10800044 	addi	r2,r2,1
10013afc:	e0bfc915 	stw	r2,-220(fp)
10013b00:	e0bfc917 	ldw	r2,-220(fp)
10013b04:	10800210 	cmplti	r2,r2,8
10013b08:	1000071e 	bne	r2,zero,10013b28 <___vfiprintf_internal_r+0x116c>
10013b0c:	e0bfc804 	addi	r2,fp,-224
10013b10:	100d883a 	mov	r6,r2
10013b14:	e17fe717 	ldw	r5,-100(fp)
10013b18:	e13fe617 	ldw	r4,-104(fp)
10013b1c:	00127380 	call	10012738 <__sprint_r>
10013b20:	10003d1e 	bne	r2,zero,10013c18 <___vfiprintf_internal_r+0x125c>
10013b24:	e4bfcb04 	addi	r18,fp,-212

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;
10013b28:	e0ffba17 	ldw	r3,-280(fp)
10013b2c:	e0bfc017 	ldw	r2,-256(fp)
10013b30:	10c0010e 	bge	r2,r3,10013b38 <___vfiprintf_internal_r+0x117c>
10013b34:	1805883a 	mov	r2,r3
10013b38:	e0ffb917 	ldw	r3,-284(fp)
10013b3c:	1885883a 	add	r2,r3,r2
10013b40:	e0bfb915 	stw	r2,-284(fp)

		FLUSH ();	/* copy out the I/O vectors */
10013b44:	e0bfca17 	ldw	r2,-216(fp)
10013b48:	10000626 	beq	r2,zero,10013b64 <___vfiprintf_internal_r+0x11a8>
10013b4c:	e0bfc804 	addi	r2,fp,-224
10013b50:	100d883a 	mov	r6,r2
10013b54:	e17fe717 	ldw	r5,-100(fp)
10013b58:	e13fe617 	ldw	r4,-104(fp)
10013b5c:	00127380 	call	10012738 <__sprint_r>
10013b60:	10002f1e 	bne	r2,zero,10013c20 <___vfiprintf_internal_r+0x1264>
10013b64:	e03fc915 	stw	zero,-220(fp)
10013b68:	e4bfcb04 	addi	r18,fp,-212

                if (malloc_buf != NULL) {
10013b6c:	e0bfc317 	ldw	r2,-244(fp)
10013b70:	103be426 	beq	r2,zero,10012b04 <__alt_data_end+0xf8012b04>
			_free_r (data, malloc_buf);
10013b74:	e17fc317 	ldw	r5,-244(fp)
10013b78:	e13fe617 	ldw	r4,-104(fp)
10013b7c:	000e9740 	call	1000e974 <_free_r>
			malloc_buf = NULL;
10013b80:	e03fc315 	stw	zero,-244(fp)
		}
	}
10013b84:	003bdf06 	br	10012b04 <__alt_data_end+0xf8012b04>
#ifdef _MB_CAPABLE
		if (n <= 0)
                    goto done;
#else
                if (*fmt == '\0')
                    goto done;
10013b88:	0001883a 	nop
10013b8c:	00000106 	br	10013b94 <___vfiprintf_internal_r+0x11d8>
			size = buf + BUF - cp;
		skipsize:
			break;
		default:	/* "%?" prints ?, unless ? is NUL */
			if (ch == '\0')
				goto done;
10013b90:	0001883a 	nop
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
10013b94:	e0bfca17 	ldw	r2,-216(fp)
10013b98:	10000626 	beq	r2,zero,10013bb4 <___vfiprintf_internal_r+0x11f8>
10013b9c:	e0bfc804 	addi	r2,fp,-224
10013ba0:	100d883a 	mov	r6,r2
10013ba4:	e17fe717 	ldw	r5,-100(fp)
10013ba8:	e13fe617 	ldw	r4,-104(fp)
10013bac:	00127380 	call	10012738 <__sprint_r>
10013bb0:	10001d1e 	bne	r2,zero,10013c28 <___vfiprintf_internal_r+0x126c>
10013bb4:	e03fc915 	stw	zero,-220(fp)
10013bb8:	e4bfcb04 	addi	r18,fp,-212
10013bbc:	00001b06 	br	10013c2c <___vfiprintf_internal_r+0x1270>
#else
                while (*fmt != '\0' && *fmt != '%')
                    fmt += 1;
#endif
		if ((m = fmt - cp) != 0) {
			PRINT (cp, m);
10013bc0:	0001883a 	nop
10013bc4:	00001906 	br	10013c2c <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			realsz+= 2;

		/* right-adjusting blank padding */
		if ((flags & (LADJUST|ZEROPAD)) == 0)
			PAD (width - realsz, blanks);
10013bc8:	0001883a 	nop
10013bcc:	00001706 	br	10013c2c <___vfiprintf_internal_r+0x1270>
10013bd0:	0001883a 	nop
10013bd4:	00001506 	br	10013c2c <___vfiprintf_internal_r+0x1270>

		/* prefix */
		if (sign)
			PRINT (&sign, 1);
10013bd8:	0001883a 	nop
10013bdc:	00001306 	br	10013c2c <___vfiprintf_internal_r+0x1270>
		if (flags & HEXPREFIX)
			PRINT (ox, 2);
10013be0:	0001883a 	nop
10013be4:	00001106 	br	10013c2c <___vfiprintf_internal_r+0x1270>

		/* right-adjusting zero padding */
		if ((flags & (LADJUST|ZEROPAD)) == ZEROPAD)
			PAD (width - realsz, zeroes);
10013be8:	0001883a 	nop
10013bec:	00000f06 	br	10013c2c <___vfiprintf_internal_r+0x1270>
10013bf0:	0001883a 	nop
10013bf4:	00000d06 	br	10013c2c <___vfiprintf_internal_r+0x1270>

		/* leading zeroes from decimal precision */
		PAD (dprec - size, zeroes);
10013bf8:	0001883a 	nop
10013bfc:	00000b06 	br	10013c2c <___vfiprintf_internal_r+0x1270>
10013c00:	0001883a 	nop
10013c04:	00000906 	br	10013c2c <___vfiprintf_internal_r+0x1270>
					PRINT (cp, 1);
				PRINT (expstr, expsize);
			}
		}
#else /* !FLOATING_POINT */
		PRINT (cp, size);
10013c08:	0001883a 	nop
10013c0c:	00000706 	br	10013c2c <___vfiprintf_internal_r+0x1270>
#endif
		/* left-adjusting padding (always blank) */
		if (flags & LADJUST)
			PAD (width - realsz, blanks);
10013c10:	0001883a 	nop
10013c14:	00000506 	br	10013c2c <___vfiprintf_internal_r+0x1270>
10013c18:	0001883a 	nop
10013c1c:	00000306 	br	10013c2c <___vfiprintf_internal_r+0x1270>

		/* finally, adjust ret */
		ret += width > realsz ? width : realsz;

		FLUSH ();	/* copy out the I/O vectors */
10013c20:	0001883a 	nop
10013c24:	00000106 	br	10013c2c <___vfiprintf_internal_r+0x1270>
			_free_r (data, malloc_buf);
			malloc_buf = NULL;
		}
	}
done:
	FLUSH ();
10013c28:	0001883a 	nop
error:
	if (malloc_buf != NULL)
10013c2c:	e0bfc317 	ldw	r2,-244(fp)
10013c30:	10000326 	beq	r2,zero,10013c40 <___vfiprintf_internal_r+0x1284>
		_free_r (data, malloc_buf);
10013c34:	e17fc317 	ldw	r5,-244(fp)
10013c38:	e13fe617 	ldw	r4,-104(fp)
10013c3c:	000e9740 	call	1000e974 <_free_r>
#ifndef STRING_ONLY
	_newlib_flockfile_end (fp);
#endif
	return (__sferror (fp) ? EOF : ret);
10013c40:	e0bfe717 	ldw	r2,-100(fp)
10013c44:	1080030b 	ldhu	r2,12(r2)
10013c48:	10bfffcc 	andi	r2,r2,65535
10013c4c:	1080100c 	andi	r2,r2,64
10013c50:	1000021e 	bne	r2,zero,10013c5c <___vfiprintf_internal_r+0x12a0>
10013c54:	e0bfb917 	ldw	r2,-284(fp)
10013c58:	00000206 	br	10013c64 <___vfiprintf_internal_r+0x12a8>
10013c5c:	00bfffc4 	movi	r2,-1
10013c60:	0001883a 	nop
	/* NOTREACHED */
}
10013c64:	e6fff804 	addi	sp,fp,-32
10013c68:	dfc00917 	ldw	ra,36(sp)
10013c6c:	df000817 	ldw	fp,32(sp)
10013c70:	ddc00717 	ldw	r23,28(sp)
10013c74:	dd800617 	ldw	r22,24(sp)
10013c78:	dd400517 	ldw	r21,20(sp)
10013c7c:	dd000417 	ldw	r20,16(sp)
10013c80:	dcc00317 	ldw	r19,12(sp)
10013c84:	dc800217 	ldw	r18,8(sp)
10013c88:	dc400117 	ldw	r17,4(sp)
10013c8c:	dc000017 	ldw	r16,0(sp)
10013c90:	dec00a04 	addi	sp,sp,40
10013c94:	f800283a 	ret

10013c98 <__swbuf_r>:
int
_DEFUN(__swbuf_r, (ptr, c, fp),
       struct _reent *ptr _AND
       register int c _AND
       register FILE *fp)
{
10013c98:	defff904 	addi	sp,sp,-28
10013c9c:	dfc00615 	stw	ra,24(sp)
10013ca0:	df000515 	stw	fp,20(sp)
10013ca4:	dc800415 	stw	r18,16(sp)
10013ca8:	dc400315 	stw	r17,12(sp)
10013cac:	dc000215 	stw	r16,8(sp)
10013cb0:	df000504 	addi	fp,sp,20
10013cb4:	e13ffc15 	stw	r4,-16(fp)
10013cb8:	2825883a 	mov	r18,r5
10013cbc:	3021883a 	mov	r16,r6
  register int n;

  /* Ensure stdio has been initialized.  */

  CHECK_INIT (ptr, fp);
10013cc0:	e0bffc17 	ldw	r2,-16(fp)
10013cc4:	e0bffb15 	stw	r2,-20(fp)
10013cc8:	e0bffb17 	ldw	r2,-20(fp)
10013ccc:	10000526 	beq	r2,zero,10013ce4 <__swbuf_r+0x4c>
10013cd0:	e0bffb17 	ldw	r2,-20(fp)
10013cd4:	10800e17 	ldw	r2,56(r2)
10013cd8:	1000021e 	bne	r2,zero,10013ce4 <__swbuf_r+0x4c>
10013cdc:	e13ffb17 	ldw	r4,-20(fp)
10013ce0:	000e7440 	call	1000e744 <__sinit>
   * (if line buffered) so that we will get called again.
   * If we did not do this, a sufficient number of putc()
   * calls might wrap _w from negative to positive.
   */

  fp->_w = fp->_lbfsize;
10013ce4:	80800617 	ldw	r2,24(r16)
10013ce8:	80800215 	stw	r2,8(r16)
  if (cantwrite (ptr, fp))
10013cec:	8080030b 	ldhu	r2,12(r16)
10013cf0:	10bfffcc 	andi	r2,r2,65535
10013cf4:	1080020c 	andi	r2,r2,8
10013cf8:	10000226 	beq	r2,zero,10013d04 <__swbuf_r+0x6c>
10013cfc:	80800417 	ldw	r2,16(r16)
10013d00:	1000061e 	bne	r2,zero,10013d1c <__swbuf_r+0x84>
10013d04:	800b883a 	mov	r5,r16
10013d08:	e13ffc17 	ldw	r4,-16(fp)
10013d0c:	000be6c0 	call	1000be6c <__swsetup_r>
10013d10:	10000226 	beq	r2,zero,10013d1c <__swbuf_r+0x84>
    return EOF;
10013d14:	00bfffc4 	movi	r2,-1
10013d18:	00003106 	br	10013de0 <__swbuf_r+0x148>
  c = (unsigned char) c;
10013d1c:	94803fcc 	andi	r18,r18,255

  ORIENT (fp, -1);
10013d20:	8080030b 	ldhu	r2,12(r16)
10013d24:	10bfffcc 	andi	r2,r2,65535
10013d28:	1088000c 	andi	r2,r2,8192
10013d2c:	1000071e 	bne	r2,zero,10013d4c <__swbuf_r+0xb4>
10013d30:	8080030b 	ldhu	r2,12(r16)
10013d34:	10880014 	ori	r2,r2,8192
10013d38:	8080030d 	sth	r2,12(r16)
10013d3c:	80c01917 	ldw	r3,100(r16)
10013d40:	00b7ffc4 	movi	r2,-8193
10013d44:	1884703a 	and	r2,r3,r2
10013d48:	80801915 	stw	r2,100(r16)
   * happen on unbuffered streams, where _bf._size==1; fflush()
   * guarantees that putc() will always call wbuf() by setting _w
   * to 0, so we need not do anything else.
   */

  n = fp->_p - fp->_bf._base;
10013d4c:	80800017 	ldw	r2,0(r16)
10013d50:	1007883a 	mov	r3,r2
10013d54:	80800417 	ldw	r2,16(r16)
10013d58:	18a3c83a 	sub	r17,r3,r2
  if (n >= fp->_bf._size)
10013d5c:	80800517 	ldw	r2,20(r16)
10013d60:	88800716 	blt	r17,r2,10013d80 <__swbuf_r+0xe8>
    {
      if (_fflush_r (ptr, fp))
10013d64:	800b883a 	mov	r5,r16
10013d68:	e13ffc17 	ldw	r4,-16(fp)
10013d6c:	000e27c0 	call	1000e27c <_fflush_r>
10013d70:	10000226 	beq	r2,zero,10013d7c <__swbuf_r+0xe4>
	return EOF;
10013d74:	00bfffc4 	movi	r2,-1
10013d78:	00001906 	br	10013de0 <__swbuf_r+0x148>
      n = 0;
10013d7c:	0023883a 	mov	r17,zero
    }
  fp->_w--;
10013d80:	80800217 	ldw	r2,8(r16)
10013d84:	10bfffc4 	addi	r2,r2,-1
10013d88:	80800215 	stw	r2,8(r16)
  *fp->_p++ = c;
10013d8c:	80800017 	ldw	r2,0(r16)
10013d90:	10c00044 	addi	r3,r2,1
10013d94:	80c00015 	stw	r3,0(r16)
10013d98:	9007883a 	mov	r3,r18
10013d9c:	10c00005 	stb	r3,0(r2)
  if (++n == fp->_bf._size || (fp->_flags & __SLBF && c == '\n'))
10013da0:	8c400044 	addi	r17,r17,1
10013da4:	80800517 	ldw	r2,20(r16)
10013da8:	88800626 	beq	r17,r2,10013dc4 <__swbuf_r+0x12c>
10013dac:	8080030b 	ldhu	r2,12(r16)
10013db0:	10bfffcc 	andi	r2,r2,65535
10013db4:	1080004c 	andi	r2,r2,1
10013db8:	10000826 	beq	r2,zero,10013ddc <__swbuf_r+0x144>
10013dbc:	90800298 	cmpnei	r2,r18,10
10013dc0:	1000061e 	bne	r2,zero,10013ddc <__swbuf_r+0x144>
    if (_fflush_r (ptr, fp))
10013dc4:	800b883a 	mov	r5,r16
10013dc8:	e13ffc17 	ldw	r4,-16(fp)
10013dcc:	000e27c0 	call	1000e27c <_fflush_r>
10013dd0:	10000226 	beq	r2,zero,10013ddc <__swbuf_r+0x144>
      return EOF;
10013dd4:	00bfffc4 	movi	r2,-1
10013dd8:	00000106 	br	10013de0 <__swbuf_r+0x148>
  return c;
10013ddc:	9005883a 	mov	r2,r18
}
10013de0:	e6fffd04 	addi	sp,fp,-12
10013de4:	dfc00417 	ldw	ra,16(sp)
10013de8:	df000317 	ldw	fp,12(sp)
10013dec:	dc800217 	ldw	r18,8(sp)
10013df0:	dc400117 	ldw	r17,4(sp)
10013df4:	dc000017 	ldw	r16,0(sp)
10013df8:	dec00504 	addi	sp,sp,20
10013dfc:	f800283a 	ret

10013e00 <__swbuf>:
   earlier dynamically built newlib libraries. */
int
_DEFUN(__swbuf, (c, fp),
       register int c _AND
       register FILE *fp)
{
10013e00:	defffe04 	addi	sp,sp,-8
10013e04:	dfc00115 	stw	ra,4(sp)
10013e08:	df000015 	stw	fp,0(sp)
10013e0c:	d839883a 	mov	fp,sp
10013e10:	2007883a 	mov	r3,r4
10013e14:	2809883a 	mov	r4,r5
  return __swbuf_r (_REENT, c, fp);
10013e18:	008403b4 	movhi	r2,4110
10013e1c:	10a4cc04 	addi	r2,r2,-27856
10013e20:	10800017 	ldw	r2,0(r2)
10013e24:	200d883a 	mov	r6,r4
10013e28:	180b883a 	mov	r5,r3
10013e2c:	1009883a 	mov	r4,r2
10013e30:	0013c980 	call	10013c98 <__swbuf_r>
}
10013e34:	e037883a 	mov	sp,fp
10013e38:	dfc00117 	ldw	ra,4(sp)
10013e3c:	df000017 	ldw	fp,0(sp)
10013e40:	dec00204 	addi	sp,sp,8
10013e44:	f800283a 	ret

10013e48 <_write_r>:
_DEFUN (_write_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _CONST _PTR buf _AND
     size_t cnt)
{
10013e48:	defff904 	addi	sp,sp,-28
10013e4c:	dfc00615 	stw	ra,24(sp)
10013e50:	df000515 	stw	fp,20(sp)
10013e54:	df000504 	addi	fp,sp,20
10013e58:	e13ffc15 	stw	r4,-16(fp)
10013e5c:	e17ffd15 	stw	r5,-12(fp)
10013e60:	e1bffe15 	stw	r6,-8(fp)
10013e64:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
10013e68:	008403b4 	movhi	r2,4110
10013e6c:	108b2104 	addi	r2,r2,11396
10013e70:	10000015 	stw	zero,0(r2)
  if ((ret = (_ssize_t)_write (fd, buf, cnt)) == -1 && errno != 0)
10013e74:	e1bfff17 	ldw	r6,-4(fp)
10013e78:	e17ffe17 	ldw	r5,-8(fp)
10013e7c:	e13ffd17 	ldw	r4,-12(fp)
10013e80:	00164340 	call	10016434 <write>
10013e84:	e0bffb15 	stw	r2,-20(fp)
10013e88:	e0bffb17 	ldw	r2,-20(fp)
10013e8c:	10bfffd8 	cmpnei	r2,r2,-1
10013e90:	1000091e 	bne	r2,zero,10013eb8 <_write_r+0x70>
10013e94:	008403b4 	movhi	r2,4110
10013e98:	108b2104 	addi	r2,r2,11396
10013e9c:	10800017 	ldw	r2,0(r2)
10013ea0:	10000526 	beq	r2,zero,10013eb8 <_write_r+0x70>
    ptr->_errno = errno;
10013ea4:	008403b4 	movhi	r2,4110
10013ea8:	108b2104 	addi	r2,r2,11396
10013eac:	10c00017 	ldw	r3,0(r2)
10013eb0:	e0bffc17 	ldw	r2,-16(fp)
10013eb4:	10c00015 	stw	r3,0(r2)
  return ret;
10013eb8:	e0bffb17 	ldw	r2,-20(fp)
}
10013ebc:	e037883a 	mov	sp,fp
10013ec0:	dfc00117 	ldw	ra,4(sp)
10013ec4:	df000017 	ldw	fp,0(sp)
10013ec8:	dec00204 	addi	sp,sp,8
10013ecc:	f800283a 	ret

10013ed0 <_close_r>:

int
_close_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
10013ed0:	defffb04 	addi	sp,sp,-20
10013ed4:	dfc00415 	stw	ra,16(sp)
10013ed8:	df000315 	stw	fp,12(sp)
10013edc:	df000304 	addi	fp,sp,12
10013ee0:	e13ffe15 	stw	r4,-8(fp)
10013ee4:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
10013ee8:	008403b4 	movhi	r2,4110
10013eec:	108b2104 	addi	r2,r2,11396
10013ef0:	10000015 	stw	zero,0(r2)
  if ((ret = _close (fd)) == -1 && errno != 0)
10013ef4:	e13fff17 	ldw	r4,-4(fp)
10013ef8:	00157d00 	call	100157d0 <close>
10013efc:	e0bffd15 	stw	r2,-12(fp)
10013f00:	e0bffd17 	ldw	r2,-12(fp)
10013f04:	10bfffd8 	cmpnei	r2,r2,-1
10013f08:	1000091e 	bne	r2,zero,10013f30 <_close_r+0x60>
10013f0c:	008403b4 	movhi	r2,4110
10013f10:	108b2104 	addi	r2,r2,11396
10013f14:	10800017 	ldw	r2,0(r2)
10013f18:	10000526 	beq	r2,zero,10013f30 <_close_r+0x60>
    ptr->_errno = errno;
10013f1c:	008403b4 	movhi	r2,4110
10013f20:	108b2104 	addi	r2,r2,11396
10013f24:	10c00017 	ldw	r3,0(r2)
10013f28:	e0bffe17 	ldw	r2,-8(fp)
10013f2c:	10c00015 	stw	r3,0(r2)
  return ret;
10013f30:	e0bffd17 	ldw	r2,-12(fp)
}
10013f34:	e037883a 	mov	sp,fp
10013f38:	dfc00117 	ldw	ra,4(sp)
10013f3c:	df000017 	ldw	fp,0(sp)
10013f40:	dec00204 	addi	sp,sp,8
10013f44:	f800283a 	ret

10013f48 <_fclose_r>:

int
_DEFUN(_fclose_r, (rptr, fp),
      struct _reent *rptr _AND
      register FILE * fp)
{
10013f48:	defffa04 	addi	sp,sp,-24
10013f4c:	dfc00515 	stw	ra,20(sp)
10013f50:	df000415 	stw	fp,16(sp)
10013f54:	dc000315 	stw	r16,12(sp)
10013f58:	df000404 	addi	fp,sp,16
10013f5c:	e13ffe15 	stw	r4,-8(fp)
10013f60:	2821883a 	mov	r16,r5
  int r;

  if (fp == NULL)
10013f64:	8000021e 	bne	r16,zero,10013f70 <_fclose_r+0x28>
    return (0);			/* on NULL */
10013f68:	0005883a 	mov	r2,zero
10013f6c:	00003b06 	br	1001405c <_fclose_r+0x114>

  CHECK_INIT (rptr, fp);
10013f70:	e0bffe17 	ldw	r2,-8(fp)
10013f74:	e0bffd15 	stw	r2,-12(fp)
10013f78:	e0bffd17 	ldw	r2,-12(fp)
10013f7c:	10000526 	beq	r2,zero,10013f94 <_fclose_r+0x4c>
10013f80:	e0bffd17 	ldw	r2,-12(fp)
10013f84:	10800e17 	ldw	r2,56(r2)
10013f88:	1000021e 	bne	r2,zero,10013f94 <_fclose_r+0x4c>
10013f8c:	e13ffd17 	ldw	r4,-12(fp)
10013f90:	000e7440 	call	1000e744 <__sinit>
  int __oldcancel;
  pthread_setcancelstate (PTHREAD_CANCEL_DISABLE, &__oldcancel);
#endif
  _flockfile (fp);

  if (fp->_flags == 0)		/* not open! */
10013f94:	8080030b 	ldhu	r2,12(r16)
10013f98:	10bfffcc 	andi	r2,r2,65535
10013f9c:	10a0001c 	xori	r2,r2,32768
10013fa0:	10a00004 	addi	r2,r2,-32768
10013fa4:	1000021e 	bne	r2,zero,10013fb0 <_fclose_r+0x68>
    {
      _funlockfile (fp);
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
      pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif
      return (0);
10013fa8:	0005883a 	mov	r2,zero
10013fac:	00002b06 	br	1001405c <_fclose_r+0x114>
  r = (fp->_flags & __SWR) ? __sflush_r (rptr, fp) : 0;
#else
  /* Follow POSIX semantics exactly.  Unconditionally flush to allow
     special handling for seekable read files to reposition file to last
     byte processed as opposed to last byte read ahead into the buffer. */
  r = __sflush_r (rptr, fp);
10013fb0:	800b883a 	mov	r5,r16
10013fb4:	e13ffe17 	ldw	r4,-8(fp)
10013fb8:	000df780 	call	1000df78 <__sflush_r>
10013fbc:	e0bffc15 	stw	r2,-16(fp)
#endif
  if (fp->_close != NULL && fp->_close (rptr, fp->_cookie) < 0)
10013fc0:	80800b17 	ldw	r2,44(r16)
10013fc4:	10000826 	beq	r2,zero,10013fe8 <_fclose_r+0xa0>
10013fc8:	80800b17 	ldw	r2,44(r16)
10013fcc:	80c00717 	ldw	r3,28(r16)
10013fd0:	180b883a 	mov	r5,r3
10013fd4:	e13ffe17 	ldw	r4,-8(fp)
10013fd8:	103ee83a 	callr	r2
10013fdc:	1000020e 	bge	r2,zero,10013fe8 <_fclose_r+0xa0>
    r = EOF;
10013fe0:	00bfffc4 	movi	r2,-1
10013fe4:	e0bffc15 	stw	r2,-16(fp)
  if (fp->_flags & __SMBF)
10013fe8:	8080030b 	ldhu	r2,12(r16)
10013fec:	10bfffcc 	andi	r2,r2,65535
10013ff0:	1080200c 	andi	r2,r2,128
10013ff4:	10000426 	beq	r2,zero,10014008 <_fclose_r+0xc0>
    _free_r (rptr, (char *) fp->_bf._base);
10013ff8:	80800417 	ldw	r2,16(r16)
10013ffc:	100b883a 	mov	r5,r2
10014000:	e13ffe17 	ldw	r4,-8(fp)
10014004:	000e9740 	call	1000e974 <_free_r>
  if (HASUB (fp))
10014008:	80800c17 	ldw	r2,48(r16)
1001400c:	10000826 	beq	r2,zero,10014030 <_fclose_r+0xe8>
    FREEUB (rptr, fp);
10014010:	80c00c17 	ldw	r3,48(r16)
10014014:	80801004 	addi	r2,r16,64
10014018:	18800426 	beq	r3,r2,1001402c <_fclose_r+0xe4>
1001401c:	80800c17 	ldw	r2,48(r16)
10014020:	100b883a 	mov	r5,r2
10014024:	e13ffe17 	ldw	r4,-8(fp)
10014028:	000e9740 	call	1000e974 <_free_r>
1001402c:	80000c15 	stw	zero,48(r16)
  if (HASLB (fp))
10014030:	80801117 	ldw	r2,68(r16)
10014034:	10000526 	beq	r2,zero,1001404c <_fclose_r+0x104>
    FREELB (rptr, fp);
10014038:	80801117 	ldw	r2,68(r16)
1001403c:	100b883a 	mov	r5,r2
10014040:	e13ffe17 	ldw	r4,-8(fp)
10014044:	000e9740 	call	1000e974 <_free_r>
10014048:	80001115 	stw	zero,68(r16)
  __sfp_lock_acquire ();
1001404c:	000e81c0 	call	1000e81c <__sfp_lock_acquire>
  fp->_flags = 0;		/* release this FILE for reuse */
10014050:	8000030d 	sth	zero,12(r16)
  _funlockfile (fp);
#ifndef __SINGLE_THREAD__
  __lock_close_recursive (fp->_lock);
#endif

  __sfp_lock_release ();
10014054:	000e83c0 	call	1000e83c <__sfp_lock_release>
#ifdef _STDIO_WITH_THREAD_CANCELLATION_SUPPORT
  pthread_setcancelstate (__oldcancel, &__oldcancel);
#endif

  return (r);
10014058:	e0bffc17 	ldw	r2,-16(fp)
}
1001405c:	e6ffff04 	addi	sp,fp,-4
10014060:	dfc00217 	ldw	ra,8(sp)
10014064:	df000117 	ldw	fp,4(sp)
10014068:	dc000017 	ldw	r16,0(sp)
1001406c:	dec00304 	addi	sp,sp,12
10014070:	f800283a 	ret

10014074 <fclose>:
#ifndef _REENT_ONLY

int
_DEFUN(fclose, (fp),
       register FILE * fp)
{
10014074:	defffe04 	addi	sp,sp,-8
10014078:	dfc00115 	stw	ra,4(sp)
1001407c:	df000015 	stw	fp,0(sp)
10014080:	d839883a 	mov	fp,sp
10014084:	2007883a 	mov	r3,r4
  return _fclose_r(_REENT, fp);
10014088:	008403b4 	movhi	r2,4110
1001408c:	10a4cc04 	addi	r2,r2,-27856
10014090:	10800017 	ldw	r2,0(r2)
10014094:	180b883a 	mov	r5,r3
10014098:	1009883a 	mov	r4,r2
1001409c:	0013f480 	call	10013f48 <_fclose_r>
}
100140a0:	e037883a 	mov	sp,fp
100140a4:	dfc00117 	ldw	ra,4(sp)
100140a8:	df000017 	ldw	fp,0(sp)
100140ac:	dec00204 	addi	sp,sp,8
100140b0:	f800283a 	ret

100140b4 <__fputwc>:
wint_t
_DEFUN(__fputwc, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
100140b4:	defff804 	addi	sp,sp,-32
100140b8:	dfc00715 	stw	ra,28(sp)
100140bc:	df000615 	stw	fp,24(sp)
100140c0:	df000604 	addi	fp,sp,24
100140c4:	e13ffd15 	stw	r4,-12(fp)
100140c8:	e17ffe15 	stw	r5,-8(fp)
100140cc:	e1bfff15 	stw	r6,-4(fp)
  char buf[MB_LEN_MAX];
  size_t i, len;

  if (MB_CUR_MAX == 1 && wc > 0 && wc <= UCHAR_MAX)
100140d0:	000f9800 	call	1000f980 <__locale_mb_cur_max>
100140d4:	10800058 	cmpnei	r2,r2,1
100140d8:	10000a1e 	bne	r2,zero,10014104 <__fputwc+0x50>
100140dc:	e0bffe17 	ldw	r2,-8(fp)
100140e0:	0080080e 	bge	zero,r2,10014104 <__fputwc+0x50>
100140e4:	e0bffe17 	ldw	r2,-8(fp)
100140e8:	10804008 	cmpgei	r2,r2,256
100140ec:	1000051e 	bne	r2,zero,10014104 <__fputwc+0x50>
      /*
       * Assume single-byte locale with no special encoding.
       * A more careful test would be to check
       * _CurrentRuneLocale->encoding.
       */
      *buf = (unsigned char)wc;
100140f0:	e0bffe17 	ldw	r2,-8(fp)
100140f4:	e0bffc05 	stb	r2,-16(fp)
      len = 1;
100140f8:	00800044 	movi	r2,1
100140fc:	e0bffb15 	stw	r2,-20(fp)
10014100:	00001406 	br	10014154 <__fputwc+0xa0>
    }
  else
    {
      if ((len = _wcrtomb_r (ptr, buf, wc, &fp->_mbstate)) == (size_t) -1)
10014104:	e0bfff17 	ldw	r2,-4(fp)
10014108:	10c01704 	addi	r3,r2,92
1001410c:	e0bffc04 	addi	r2,fp,-16
10014110:	180f883a 	mov	r7,r3
10014114:	e1bffe17 	ldw	r6,-8(fp)
10014118:	100b883a 	mov	r5,r2
1001411c:	e13ffd17 	ldw	r4,-12(fp)
10014120:	00145a80 	call	100145a8 <_wcrtomb_r>
10014124:	e0bffb15 	stw	r2,-20(fp)
10014128:	e0bffb17 	ldw	r2,-20(fp)
1001412c:	10bfffd8 	cmpnei	r2,r2,-1
10014130:	1000081e 	bne	r2,zero,10014154 <__fputwc+0xa0>
	{
	  fp->_flags |= __SERR;
10014134:	e0bfff17 	ldw	r2,-4(fp)
10014138:	1080030b 	ldhu	r2,12(r2)
1001413c:	10801014 	ori	r2,r2,64
10014140:	1007883a 	mov	r3,r2
10014144:	e0bfff17 	ldw	r2,-4(fp)
10014148:	10c0030d 	sth	r3,12(r2)
	  return WEOF;
1001414c:	00bfffc4 	movi	r2,-1
10014150:	00005006 	br	10014294 <__fputwc+0x1e0>
	}
    }

  for (i = 0; i < len; i++)
10014154:	e03ffa15 	stw	zero,-24(fp)
10014158:	00004a06 	br	10014284 <__fputwc+0x1d0>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
1001415c:	e0bfff17 	ldw	r2,-4(fp)
10014160:	10800217 	ldw	r2,8(r2)
10014164:	10ffffc4 	addi	r3,r2,-1
10014168:	e0bfff17 	ldw	r2,-4(fp)
1001416c:	10c00215 	stw	r3,8(r2)
10014170:	e0bfff17 	ldw	r2,-4(fp)
10014174:	10800217 	ldw	r2,8(r2)
10014178:	10002c0e 	bge	r2,zero,1001422c <__fputwc+0x178>
1001417c:	e0bfff17 	ldw	r2,-4(fp)
10014180:	10c00217 	ldw	r3,8(r2)
10014184:	e0bfff17 	ldw	r2,-4(fp)
10014188:	10800617 	ldw	r2,24(r2)
1001418c:	18801c16 	blt	r3,r2,10014200 <__fputwc+0x14c>
10014190:	e0bfff17 	ldw	r2,-4(fp)
10014194:	10800017 	ldw	r2,0(r2)
10014198:	e13ffc04 	addi	r4,fp,-16
1001419c:	e0fffa17 	ldw	r3,-24(fp)
100141a0:	20c7883a 	add	r3,r4,r3
100141a4:	18c00003 	ldbu	r3,0(r3)
100141a8:	10c00005 	stb	r3,0(r2)
100141ac:	e0bfff17 	ldw	r2,-4(fp)
100141b0:	10800017 	ldw	r2,0(r2)
100141b4:	10800003 	ldbu	r2,0(r2)
100141b8:	10803fcc 	andi	r2,r2,255
100141bc:	108002a0 	cmpeqi	r2,r2,10
100141c0:	1000091e 	bne	r2,zero,100141e8 <__fputwc+0x134>
100141c4:	e0bfff17 	ldw	r2,-4(fp)
100141c8:	10800017 	ldw	r2,0(r2)
100141cc:	11000044 	addi	r4,r2,1
100141d0:	e0ffff17 	ldw	r3,-4(fp)
100141d4:	19000015 	stw	r4,0(r3)
100141d8:	10800003 	ldbu	r2,0(r2)
100141dc:	10803fcc 	andi	r2,r2,255
100141e0:	10bfffe0 	cmpeqi	r2,r2,-1
100141e4:	00002006 	br	10014268 <__fputwc+0x1b4>
100141e8:	e1bfff17 	ldw	r6,-4(fp)
100141ec:	01400284 	movi	r5,10
100141f0:	e13ffd17 	ldw	r4,-12(fp)
100141f4:	0013c980 	call	10013c98 <__swbuf_r>
100141f8:	10bfffe0 	cmpeqi	r2,r2,-1
100141fc:	00001a06 	br	10014268 <__fputwc+0x1b4>
10014200:	e0fffc04 	addi	r3,fp,-16
10014204:	e0bffa17 	ldw	r2,-24(fp)
10014208:	1885883a 	add	r2,r3,r2
1001420c:	10800003 	ldbu	r2,0(r2)
10014210:	10803fcc 	andi	r2,r2,255
10014214:	e1bfff17 	ldw	r6,-4(fp)
10014218:	100b883a 	mov	r5,r2
1001421c:	e13ffd17 	ldw	r4,-12(fp)
10014220:	0013c980 	call	10013c98 <__swbuf_r>
10014224:	10bfffe0 	cmpeqi	r2,r2,-1
10014228:	00000f06 	br	10014268 <__fputwc+0x1b4>
1001422c:	e0bfff17 	ldw	r2,-4(fp)
10014230:	10800017 	ldw	r2,0(r2)
10014234:	e13ffc04 	addi	r4,fp,-16
10014238:	e0fffa17 	ldw	r3,-24(fp)
1001423c:	20c7883a 	add	r3,r4,r3
10014240:	18c00003 	ldbu	r3,0(r3)
10014244:	10c00005 	stb	r3,0(r2)
10014248:	e0bfff17 	ldw	r2,-4(fp)
1001424c:	10800017 	ldw	r2,0(r2)
10014250:	11000044 	addi	r4,r2,1
10014254:	e0ffff17 	ldw	r3,-4(fp)
10014258:	19000015 	stw	r4,0(r3)
1001425c:	10800003 	ldbu	r2,0(r2)
10014260:	10803fcc 	andi	r2,r2,255
10014264:	10bfffe0 	cmpeqi	r2,r2,-1
10014268:	10803fcc 	andi	r2,r2,255
1001426c:	10000226 	beq	r2,zero,10014278 <__fputwc+0x1c4>
      return WEOF;
10014270:	00bfffc4 	movi	r2,-1
10014274:	00000706 	br	10014294 <__fputwc+0x1e0>
	  fp->_flags |= __SERR;
	  return WEOF;
	}
    }

  for (i = 0; i < len; i++)
10014278:	e0bffa17 	ldw	r2,-24(fp)
1001427c:	10800044 	addi	r2,r2,1
10014280:	e0bffa15 	stw	r2,-24(fp)
10014284:	e0fffa17 	ldw	r3,-24(fp)
10014288:	e0bffb17 	ldw	r2,-20(fp)
1001428c:	18bfb336 	bltu	r3,r2,1001415c <__alt_data_end+0xf801415c>
    if (__sputc_r (ptr, (unsigned char) buf[i], fp) == EOF)
      return WEOF;

  return (wint_t) wc;
10014290:	e0bffe17 	ldw	r2,-8(fp)
}
10014294:	e037883a 	mov	sp,fp
10014298:	dfc00117 	ldw	ra,4(sp)
1001429c:	df000017 	ldw	fp,0(sp)
100142a0:	dec00204 	addi	sp,sp,8
100142a4:	f800283a 	ret

100142a8 <_fputwc_r>:
wint_t
_DEFUN(_fputwc_r, (ptr, wc, fp),
	struct _reent *ptr _AND
	wchar_t wc _AND
	FILE *fp)
{
100142a8:	defffa04 	addi	sp,sp,-24
100142ac:	dfc00515 	stw	ra,20(sp)
100142b0:	df000415 	stw	fp,16(sp)
100142b4:	df000404 	addi	fp,sp,16
100142b8:	e13ffd15 	stw	r4,-12(fp)
100142bc:	e17ffe15 	stw	r5,-8(fp)
100142c0:	e1bfff15 	stw	r6,-4(fp)
  wint_t r;

  _newlib_flockfile_start (fp);
  ORIENT(fp, 1);
100142c4:	e0bfff17 	ldw	r2,-4(fp)
100142c8:	1080030b 	ldhu	r2,12(r2)
100142cc:	10bfffcc 	andi	r2,r2,65535
100142d0:	1088000c 	andi	r2,r2,8192
100142d4:	10000b1e 	bne	r2,zero,10014304 <_fputwc_r+0x5c>
100142d8:	e0bfff17 	ldw	r2,-4(fp)
100142dc:	1080030b 	ldhu	r2,12(r2)
100142e0:	10880014 	ori	r2,r2,8192
100142e4:	1007883a 	mov	r3,r2
100142e8:	e0bfff17 	ldw	r2,-4(fp)
100142ec:	10c0030d 	sth	r3,12(r2)
100142f0:	e0bfff17 	ldw	r2,-4(fp)
100142f4:	10801917 	ldw	r2,100(r2)
100142f8:	10c80014 	ori	r3,r2,8192
100142fc:	e0bfff17 	ldw	r2,-4(fp)
10014300:	10c01915 	stw	r3,100(r2)
  r = __fputwc(ptr, wc, fp);
10014304:	e1bfff17 	ldw	r6,-4(fp)
10014308:	e17ffe17 	ldw	r5,-8(fp)
1001430c:	e13ffd17 	ldw	r4,-12(fp)
10014310:	00140b40 	call	100140b4 <__fputwc>
10014314:	e0bffc15 	stw	r2,-16(fp)
  _newlib_flockfile_end (fp);
  return r;
10014318:	e0bffc17 	ldw	r2,-16(fp)
}
1001431c:	e037883a 	mov	sp,fp
10014320:	dfc00117 	ldw	ra,4(sp)
10014324:	df000017 	ldw	fp,0(sp)
10014328:	dec00204 	addi	sp,sp,8
1001432c:	f800283a 	ret

10014330 <fputwc>:

wint_t
_DEFUN(fputwc, (wc, fp),
	wchar_t wc _AND
	FILE *fp)
{
10014330:	defffa04 	addi	sp,sp,-24
10014334:	dfc00515 	stw	ra,20(sp)
10014338:	df000415 	stw	fp,16(sp)
1001433c:	df000404 	addi	fp,sp,16
10014340:	e13ffe15 	stw	r4,-8(fp)
10014344:	e17fff15 	stw	r5,-4(fp)
  struct _reent *reent = _REENT;
10014348:	008403b4 	movhi	r2,4110
1001434c:	10a4cc04 	addi	r2,r2,-27856
10014350:	10800017 	ldw	r2,0(r2)
10014354:	e0bffc15 	stw	r2,-16(fp)

  CHECK_INIT(reent, fp);
10014358:	e0bffc17 	ldw	r2,-16(fp)
1001435c:	e0bffd15 	stw	r2,-12(fp)
10014360:	e0bffd17 	ldw	r2,-12(fp)
10014364:	10000526 	beq	r2,zero,1001437c <fputwc+0x4c>
10014368:	e0bffd17 	ldw	r2,-12(fp)
1001436c:	10800e17 	ldw	r2,56(r2)
10014370:	1000021e 	bne	r2,zero,1001437c <fputwc+0x4c>
10014374:	e13ffd17 	ldw	r4,-12(fp)
10014378:	000e7440 	call	1000e744 <__sinit>
  return _fputwc_r (reent, wc, fp);
1001437c:	e1bfff17 	ldw	r6,-4(fp)
10014380:	e17ffe17 	ldw	r5,-8(fp)
10014384:	e13ffc17 	ldw	r4,-16(fp)
10014388:	00142a80 	call	100142a8 <_fputwc_r>
}
1001438c:	e037883a 	mov	sp,fp
10014390:	dfc00117 	ldw	ra,4(sp)
10014394:	df000017 	ldw	fp,0(sp)
10014398:	dec00204 	addi	sp,sp,8
1001439c:	f800283a 	ret

100143a0 <_fstat_r>:
int
_fstat_r (ptr, fd, pstat)
     struct _reent *ptr;
     int fd;
     struct stat *pstat;
{
100143a0:	defffa04 	addi	sp,sp,-24
100143a4:	dfc00515 	stw	ra,20(sp)
100143a8:	df000415 	stw	fp,16(sp)
100143ac:	df000404 	addi	fp,sp,16
100143b0:	e13ffd15 	stw	r4,-12(fp)
100143b4:	e17ffe15 	stw	r5,-8(fp)
100143b8:	e1bfff15 	stw	r6,-4(fp)
  int ret;

  errno = 0;
100143bc:	008403b4 	movhi	r2,4110
100143c0:	108b2104 	addi	r2,r2,11396
100143c4:	10000015 	stw	zero,0(r2)
  if ((ret = _fstat (fd, pstat)) == -1 && errno != 0)
100143c8:	e17fff17 	ldw	r5,-4(fp)
100143cc:	e13ffe17 	ldw	r4,-8(fp)
100143d0:	00159240 	call	10015924 <fstat>
100143d4:	e0bffc15 	stw	r2,-16(fp)
100143d8:	e0bffc17 	ldw	r2,-16(fp)
100143dc:	10bfffd8 	cmpnei	r2,r2,-1
100143e0:	1000091e 	bne	r2,zero,10014408 <_fstat_r+0x68>
100143e4:	008403b4 	movhi	r2,4110
100143e8:	108b2104 	addi	r2,r2,11396
100143ec:	10800017 	ldw	r2,0(r2)
100143f0:	10000526 	beq	r2,zero,10014408 <_fstat_r+0x68>
    ptr->_errno = errno;
100143f4:	008403b4 	movhi	r2,4110
100143f8:	108b2104 	addi	r2,r2,11396
100143fc:	10c00017 	ldw	r3,0(r2)
10014400:	e0bffd17 	ldw	r2,-12(fp)
10014404:	10c00015 	stw	r3,0(r2)
  return ret;
10014408:	e0bffc17 	ldw	r2,-16(fp)
}
1001440c:	e037883a 	mov	sp,fp
10014410:	dfc00117 	ldw	ra,4(sp)
10014414:	df000017 	ldw	fp,0(sp)
10014418:	dec00204 	addi	sp,sp,8
1001441c:	f800283a 	ret

10014420 <_isatty_r>:

int
_isatty_r (ptr, fd)
     struct _reent *ptr;
     int fd;
{
10014420:	defffb04 	addi	sp,sp,-20
10014424:	dfc00415 	stw	ra,16(sp)
10014428:	df000315 	stw	fp,12(sp)
1001442c:	df000304 	addi	fp,sp,12
10014430:	e13ffe15 	stw	r4,-8(fp)
10014434:	e17fff15 	stw	r5,-4(fp)
  int ret;

  errno = 0;
10014438:	008403b4 	movhi	r2,4110
1001443c:	108b2104 	addi	r2,r2,11396
10014440:	10000015 	stw	zero,0(r2)
  if ((ret = _isatty (fd)) == -1 && errno != 0)
10014444:	e13fff17 	ldw	r4,-4(fp)
10014448:	0015c300 	call	10015c30 <isatty>
1001444c:	e0bffd15 	stw	r2,-12(fp)
10014450:	e0bffd17 	ldw	r2,-12(fp)
10014454:	10bfffd8 	cmpnei	r2,r2,-1
10014458:	1000091e 	bne	r2,zero,10014480 <_isatty_r+0x60>
1001445c:	008403b4 	movhi	r2,4110
10014460:	108b2104 	addi	r2,r2,11396
10014464:	10800017 	ldw	r2,0(r2)
10014468:	10000526 	beq	r2,zero,10014480 <_isatty_r+0x60>
    ptr->_errno = errno;
1001446c:	008403b4 	movhi	r2,4110
10014470:	108b2104 	addi	r2,r2,11396
10014474:	10c00017 	ldw	r3,0(r2)
10014478:	e0bffe17 	ldw	r2,-8(fp)
1001447c:	10c00015 	stw	r3,0(r2)
  return ret;
10014480:	e0bffd17 	ldw	r2,-12(fp)
}
10014484:	e037883a 	mov	sp,fp
10014488:	dfc00117 	ldw	ra,4(sp)
1001448c:	df000017 	ldw	fp,0(sp)
10014490:	dec00204 	addi	sp,sp,8
10014494:	f800283a 	ret

10014498 <_lseek_r>:
_DEFUN (_lseek_r, (ptr, fd, pos, whence),
     struct _reent *ptr _AND
     int fd _AND
     _off_t pos _AND
     int whence)
{
10014498:	defff904 	addi	sp,sp,-28
1001449c:	dfc00615 	stw	ra,24(sp)
100144a0:	df000515 	stw	fp,20(sp)
100144a4:	df000504 	addi	fp,sp,20
100144a8:	e13ffc15 	stw	r4,-16(fp)
100144ac:	e17ffd15 	stw	r5,-12(fp)
100144b0:	e1bffe15 	stw	r6,-8(fp)
100144b4:	e1ffff15 	stw	r7,-4(fp)
  _off_t ret;

  errno = 0;
100144b8:	008403b4 	movhi	r2,4110
100144bc:	108b2104 	addi	r2,r2,11396
100144c0:	10000015 	stw	zero,0(r2)
  if ((ret = _lseek (fd, pos, whence)) == (_off_t) -1 && errno != 0)
100144c4:	e1bfff17 	ldw	r6,-4(fp)
100144c8:	e17ffe17 	ldw	r5,-8(fp)
100144cc:	e13ffd17 	ldw	r4,-12(fp)
100144d0:	0015e180 	call	10015e18 <lseek>
100144d4:	e0bffb15 	stw	r2,-20(fp)
100144d8:	e0bffb17 	ldw	r2,-20(fp)
100144dc:	10bfffd8 	cmpnei	r2,r2,-1
100144e0:	1000091e 	bne	r2,zero,10014508 <_lseek_r+0x70>
100144e4:	008403b4 	movhi	r2,4110
100144e8:	108b2104 	addi	r2,r2,11396
100144ec:	10800017 	ldw	r2,0(r2)
100144f0:	10000526 	beq	r2,zero,10014508 <_lseek_r+0x70>
    ptr->_errno = errno;
100144f4:	008403b4 	movhi	r2,4110
100144f8:	108b2104 	addi	r2,r2,11396
100144fc:	10c00017 	ldw	r3,0(r2)
10014500:	e0bffc17 	ldw	r2,-16(fp)
10014504:	10c00015 	stw	r3,0(r2)
  return ret;
10014508:	e0bffb17 	ldw	r2,-20(fp)
}
1001450c:	e037883a 	mov	sp,fp
10014510:	dfc00117 	ldw	ra,4(sp)
10014514:	df000017 	ldw	fp,0(sp)
10014518:	dec00204 	addi	sp,sp,8
1001451c:	f800283a 	ret

10014520 <_read_r>:
_DEFUN (_read_r, (ptr, fd, buf, cnt),
     struct _reent *ptr _AND
     int fd _AND
     _PTR buf _AND
     size_t cnt)
{
10014520:	defff904 	addi	sp,sp,-28
10014524:	dfc00615 	stw	ra,24(sp)
10014528:	df000515 	stw	fp,20(sp)
1001452c:	df000504 	addi	fp,sp,20
10014530:	e13ffc15 	stw	r4,-16(fp)
10014534:	e17ffd15 	stw	r5,-12(fp)
10014538:	e1bffe15 	stw	r6,-8(fp)
1001453c:	e1ffff15 	stw	r7,-4(fp)
  _ssize_t ret;

  errno = 0;
10014540:	008403b4 	movhi	r2,4110
10014544:	108b2104 	addi	r2,r2,11396
10014548:	10000015 	stw	zero,0(r2)
  if ((ret = (_ssize_t)_read (fd, buf, cnt)) == -1 && errno != 0)
1001454c:	e1bfff17 	ldw	r6,-4(fp)
10014550:	e17ffe17 	ldw	r5,-8(fp)
10014554:	e13ffd17 	ldw	r4,-12(fp)
10014558:	00160080 	call	10016008 <read>
1001455c:	e0bffb15 	stw	r2,-20(fp)
10014560:	e0bffb17 	ldw	r2,-20(fp)
10014564:	10bfffd8 	cmpnei	r2,r2,-1
10014568:	1000091e 	bne	r2,zero,10014590 <_read_r+0x70>
1001456c:	008403b4 	movhi	r2,4110
10014570:	108b2104 	addi	r2,r2,11396
10014574:	10800017 	ldw	r2,0(r2)
10014578:	10000526 	beq	r2,zero,10014590 <_read_r+0x70>
    ptr->_errno = errno;
1001457c:	008403b4 	movhi	r2,4110
10014580:	108b2104 	addi	r2,r2,11396
10014584:	10c00017 	ldw	r3,0(r2)
10014588:	e0bffc17 	ldw	r2,-16(fp)
1001458c:	10c00015 	stw	r3,0(r2)
  return ret;
10014590:	e0bffb17 	ldw	r2,-20(fp)
}
10014594:	e037883a 	mov	sp,fp
10014598:	dfc00117 	ldw	ra,4(sp)
1001459c:	df000017 	ldw	fp,0(sp)
100145a0:	dec00204 	addi	sp,sp,8
100145a4:	f800283a 	ret

100145a8 <_wcrtomb_r>:
_DEFUN (_wcrtomb_r, (ptr, s, wc, ps),
	struct _reent *ptr _AND
	char *s _AND
	wchar_t wc _AND
	mbstate_t *ps)
{
100145a8:	defff404 	addi	sp,sp,-48
100145ac:	dfc00b15 	stw	ra,44(sp)
100145b0:	df000a15 	stw	fp,40(sp)
100145b4:	dc000915 	stw	r16,36(sp)
100145b8:	df000a04 	addi	fp,sp,40
100145bc:	e13ffb15 	stw	r4,-20(fp)
100145c0:	e17ffc15 	stw	r5,-16(fp)
100145c4:	e1bffd15 	stw	r6,-12(fp)
100145c8:	e1fffe15 	stw	r7,-8(fp)
  int retval = 0;
100145cc:	e03ff715 	stw	zero,-36(fp)
      _REENT_CHECK_MISC(ptr);
      ps = &(_REENT_WCRTOMB_STATE(ptr));
    }
#endif

  if (s == NULL)
100145d0:	e0bffc17 	ldw	r2,-16(fp)
100145d4:	10000f1e 	bne	r2,zero,10014614 <_wcrtomb_r+0x6c>
    retval = __wctomb (ptr, buf, L'\0', __locale_charset (), ps);
100145d8:	008403b4 	movhi	r2,4110
100145dc:	10a4da04 	addi	r2,r2,-27800
100145e0:	14000017 	ldw	r16,0(r2)
100145e4:	000f95c0 	call	1000f95c <__locale_charset>
100145e8:	1009883a 	mov	r4,r2
100145ec:	e0fff804 	addi	r3,fp,-32
100145f0:	e0bffe17 	ldw	r2,-8(fp)
100145f4:	d8800015 	stw	r2,0(sp)
100145f8:	200f883a 	mov	r7,r4
100145fc:	000d883a 	mov	r6,zero
10014600:	180b883a 	mov	r5,r3
10014604:	e13ffb17 	ldw	r4,-20(fp)
10014608:	803ee83a 	callr	r16
1001460c:	e0bff715 	stw	r2,-36(fp)
10014610:	00000d06 	br	10014648 <_wcrtomb_r+0xa0>
  else
    retval = __wctomb (ptr, s, wc, __locale_charset (), ps);
10014614:	008403b4 	movhi	r2,4110
10014618:	10a4da04 	addi	r2,r2,-27800
1001461c:	14000017 	ldw	r16,0(r2)
10014620:	000f95c0 	call	1000f95c <__locale_charset>
10014624:	1007883a 	mov	r3,r2
10014628:	e0bffe17 	ldw	r2,-8(fp)
1001462c:	d8800015 	stw	r2,0(sp)
10014630:	180f883a 	mov	r7,r3
10014634:	e1bffd17 	ldw	r6,-12(fp)
10014638:	e17ffc17 	ldw	r5,-16(fp)
1001463c:	e13ffb17 	ldw	r4,-20(fp)
10014640:	803ee83a 	callr	r16
10014644:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
10014648:	e0bff717 	ldw	r2,-36(fp)
1001464c:	10bfffd8 	cmpnei	r2,r2,-1
10014650:	1000071e 	bne	r2,zero,10014670 <_wcrtomb_r+0xc8>
    {
      ps->__count = 0;
10014654:	e0bffe17 	ldw	r2,-8(fp)
10014658:	10000015 	stw	zero,0(r2)
      ptr->_errno = EILSEQ;
1001465c:	e0bffb17 	ldw	r2,-20(fp)
10014660:	00c02284 	movi	r3,138
10014664:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
10014668:	00bfffc4 	movi	r2,-1
1001466c:	00000106 	br	10014674 <_wcrtomb_r+0xcc>
    }
  else
    return (size_t)retval;
10014670:	e0bff717 	ldw	r2,-36(fp)
}
10014674:	e6ffff04 	addi	sp,fp,-4
10014678:	dfc00217 	ldw	ra,8(sp)
1001467c:	df000117 	ldw	fp,4(sp)
10014680:	dc000017 	ldw	r16,0(sp)
10014684:	dec00304 	addi	sp,sp,12
10014688:	f800283a 	ret

1001468c <wcrtomb>:
size_t
_DEFUN (wcrtomb, (s, wc, ps),
	char *__restrict s _AND
	wchar_t wc _AND
	mbstate_t *__restrict ps)
{
1001468c:	defff404 	addi	sp,sp,-48
10014690:	dfc00b15 	stw	ra,44(sp)
10014694:	df000a15 	stw	fp,40(sp)
10014698:	dc000915 	stw	r16,36(sp)
1001469c:	df000a04 	addi	fp,sp,40
100146a0:	e13ffc15 	stw	r4,-16(fp)
100146a4:	e17ffd15 	stw	r5,-12(fp)
100146a8:	e1bffe15 	stw	r6,-8(fp)
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  return _wcrtomb_r (_REENT, s, wc, ps);
#else
  int retval = 0;
100146ac:	e03ff715 	stw	zero,-36(fp)
  struct _reent *reent = _REENT;
100146b0:	008403b4 	movhi	r2,4110
100146b4:	10a4cc04 	addi	r2,r2,-27856
100146b8:	10800017 	ldw	r2,0(r2)
100146bc:	e0bff815 	stw	r2,-32(fp)
      _REENT_CHECK_MISC(reent);
      ps = &(_REENT_WCRTOMB_STATE(reent));
    }
#endif

  if (s == NULL)
100146c0:	e0bffc17 	ldw	r2,-16(fp)
100146c4:	10000f1e 	bne	r2,zero,10014704 <wcrtomb+0x78>
    retval = __wctomb (reent, buf, L'\0', __locale_charset (), ps);
100146c8:	008403b4 	movhi	r2,4110
100146cc:	10a4da04 	addi	r2,r2,-27800
100146d0:	14000017 	ldw	r16,0(r2)
100146d4:	000f95c0 	call	1000f95c <__locale_charset>
100146d8:	1009883a 	mov	r4,r2
100146dc:	e0fff904 	addi	r3,fp,-28
100146e0:	e0bffe17 	ldw	r2,-8(fp)
100146e4:	d8800015 	stw	r2,0(sp)
100146e8:	200f883a 	mov	r7,r4
100146ec:	000d883a 	mov	r6,zero
100146f0:	180b883a 	mov	r5,r3
100146f4:	e13ff817 	ldw	r4,-32(fp)
100146f8:	803ee83a 	callr	r16
100146fc:	e0bff715 	stw	r2,-36(fp)
10014700:	00000d06 	br	10014738 <wcrtomb+0xac>
  else
    retval = __wctomb (reent, s, wc, __locale_charset (), ps);
10014704:	008403b4 	movhi	r2,4110
10014708:	10a4da04 	addi	r2,r2,-27800
1001470c:	14000017 	ldw	r16,0(r2)
10014710:	000f95c0 	call	1000f95c <__locale_charset>
10014714:	1007883a 	mov	r3,r2
10014718:	e0bffe17 	ldw	r2,-8(fp)
1001471c:	d8800015 	stw	r2,0(sp)
10014720:	180f883a 	mov	r7,r3
10014724:	e1bffd17 	ldw	r6,-12(fp)
10014728:	e17ffc17 	ldw	r5,-16(fp)
1001472c:	e13ff817 	ldw	r4,-32(fp)
10014730:	803ee83a 	callr	r16
10014734:	e0bff715 	stw	r2,-36(fp)

  if (retval == -1)
10014738:	e0bff717 	ldw	r2,-36(fp)
1001473c:	10bfffd8 	cmpnei	r2,r2,-1
10014740:	1000071e 	bne	r2,zero,10014760 <wcrtomb+0xd4>
    {
      ps->__count = 0;
10014744:	e0bffe17 	ldw	r2,-8(fp)
10014748:	10000015 	stw	zero,0(r2)
      reent->_errno = EILSEQ;
1001474c:	e0bff817 	ldw	r2,-32(fp)
10014750:	00c02284 	movi	r3,138
10014754:	10c00015 	stw	r3,0(r2)
      return (size_t)(-1);
10014758:	00bfffc4 	movi	r2,-1
1001475c:	00000106 	br	10014764 <wcrtomb+0xd8>
    }
  else
    return (size_t)retval;
10014760:	e0bff717 	ldw	r2,-36(fp)
#endif /* not PREFER_SIZE_OVER_SPEED */
}
10014764:	e6ffff04 	addi	sp,fp,-4
10014768:	dfc00217 	ldw	ra,8(sp)
1001476c:	df000117 	ldw	fp,4(sp)
10014770:	dc000017 	ldw	r16,0(sp)
10014774:	dec00304 	addi	sp,sp,12
10014778:	f800283a 	ret

1001477c <_wctomb_r>:
_DEFUN (_wctomb_r, (r, s, wchar, state),
        struct _reent *r     _AND 
        char          *s     _AND
        wchar_t        _wchar _AND
        mbstate_t     *state)
{
1001477c:	defff804 	addi	sp,sp,-32
10014780:	dfc00715 	stw	ra,28(sp)
10014784:	df000615 	stw	fp,24(sp)
10014788:	dc000515 	stw	r16,20(sp)
1001478c:	df000604 	addi	fp,sp,24
10014790:	e13ffb15 	stw	r4,-20(fp)
10014794:	e17ffc15 	stw	r5,-16(fp)
10014798:	e1bffd15 	stw	r6,-12(fp)
1001479c:	e1fffe15 	stw	r7,-8(fp)
  return __wctomb (r, s, _wchar, __locale_charset (), state);
100147a0:	d4201017 	ldw	r16,-32704(gp)
100147a4:	000f95c0 	call	1000f95c <__locale_charset>
100147a8:	1007883a 	mov	r3,r2
100147ac:	e0bffe17 	ldw	r2,-8(fp)
100147b0:	d8800015 	stw	r2,0(sp)
100147b4:	180f883a 	mov	r7,r3
100147b8:	e1bffd17 	ldw	r6,-12(fp)
100147bc:	e17ffc17 	ldw	r5,-16(fp)
100147c0:	e13ffb17 	ldw	r4,-20(fp)
100147c4:	803ee83a 	callr	r16
}
100147c8:	e6ffff04 	addi	sp,fp,-4
100147cc:	dfc00217 	ldw	ra,8(sp)
100147d0:	df000117 	ldw	fp,4(sp)
100147d4:	dc000017 	ldw	r16,0(sp)
100147d8:	dec00304 	addi	sp,sp,12
100147dc:	f800283a 	ret

100147e0 <__ascii_wctomb>:
        struct _reent *r       _AND 
        char          *s       _AND
        wchar_t        _wchar  _AND
	const char    *charset _AND
        mbstate_t     *state)
{
100147e0:	defffa04 	addi	sp,sp,-24
100147e4:	df000515 	stw	fp,20(sp)
100147e8:	df000504 	addi	fp,sp,20
100147ec:	e13ffc15 	stw	r4,-16(fp)
100147f0:	e17ffd15 	stw	r5,-12(fp)
100147f4:	e1bffe15 	stw	r6,-8(fp)
100147f8:	e1ffff15 	stw	r7,-4(fp)
  /* Avoids compiler warnings about comparisons that are always false
     due to limited range when sizeof(wchar_t) is 2 but sizeof(wint_t)
     is 4, as is the case on cygwin.  */
  wint_t wchar = _wchar;
100147fc:	e0bffe17 	ldw	r2,-8(fp)
10014800:	e0bffb15 	stw	r2,-20(fp)

  if (s == NULL)
10014804:	e0bffd17 	ldw	r2,-12(fp)
10014808:	1000021e 	bne	r2,zero,10014814 <__ascii_wctomb+0x34>
    return 0;
1001480c:	0005883a 	mov	r2,zero
10014810:	00000d06 	br	10014848 <__ascii_wctomb+0x68>
 
#ifdef __CYGWIN__
  if ((size_t)wchar >= 0x80)
#else
  if ((size_t)wchar >= 0x100)
10014814:	e0bffb17 	ldw	r2,-20(fp)
10014818:	10804030 	cmpltui	r2,r2,256
1001481c:	1000051e 	bne	r2,zero,10014834 <__ascii_wctomb+0x54>
#endif
    {
      r->_errno = EILSEQ;
10014820:	e0bffc17 	ldw	r2,-16(fp)
10014824:	00c02284 	movi	r3,138
10014828:	10c00015 	stw	r3,0(r2)
      return -1;
1001482c:	00bfffc4 	movi	r2,-1
10014830:	00000506 	br	10014848 <__ascii_wctomb+0x68>
    }

  *s = (char) wchar;
10014834:	e0bffb17 	ldw	r2,-20(fp)
10014838:	1007883a 	mov	r3,r2
1001483c:	e0bffd17 	ldw	r2,-12(fp)
10014840:	10c00005 	stb	r3,0(r2)
  return 1;
10014844:	00800044 	movi	r2,1
}
10014848:	e037883a 	mov	sp,fp
1001484c:	df000017 	ldw	fp,0(sp)
10014850:	dec00104 	addi	sp,sp,4
10014854:	f800283a 	ret

10014858 <__udivdi3>:
10014858:	defff404 	addi	sp,sp,-48
1001485c:	dcc00515 	stw	r19,20(sp)
10014860:	dc000215 	stw	r16,8(sp)
10014864:	dfc00b15 	stw	ra,44(sp)
10014868:	df000a15 	stw	fp,40(sp)
1001486c:	ddc00915 	stw	r23,36(sp)
10014870:	dd800815 	stw	r22,32(sp)
10014874:	dd400715 	stw	r21,28(sp)
10014878:	dd000615 	stw	r20,24(sp)
1001487c:	dc800415 	stw	r18,16(sp)
10014880:	dc400315 	stw	r17,12(sp)
10014884:	2027883a 	mov	r19,r4
10014888:	2821883a 	mov	r16,r5
1001488c:	3800461e 	bne	r7,zero,100149a8 <__udivdi3+0x150>
10014890:	3023883a 	mov	r17,r6
10014894:	2025883a 	mov	r18,r4
10014898:	2980572e 	bgeu	r5,r6,100149f8 <__udivdi3+0x1a0>
1001489c:	00bfffd4 	movui	r2,65535
100148a0:	282d883a 	mov	r22,r5
100148a4:	1180b236 	bltu	r2,r6,10014b70 <__udivdi3+0x318>
100148a8:	00803fc4 	movi	r2,255
100148ac:	1185803a 	cmpltu	r2,r2,r6
100148b0:	100490fa 	slli	r2,r2,3
100148b4:	3086d83a 	srl	r3,r6,r2
100148b8:	01040374 	movhi	r4,4109
100148bc:	213d5504 	addi	r4,r4,-2732
100148c0:	20c7883a 	add	r3,r4,r3
100148c4:	18c00003 	ldbu	r3,0(r3)
100148c8:	1885883a 	add	r2,r3,r2
100148cc:	00c00804 	movi	r3,32
100148d0:	1887c83a 	sub	r3,r3,r2
100148d4:	18000526 	beq	r3,zero,100148ec <__udivdi3+0x94>
100148d8:	80e0983a 	sll	r16,r16,r3
100148dc:	9884d83a 	srl	r2,r19,r2
100148e0:	30e2983a 	sll	r17,r6,r3
100148e4:	98e4983a 	sll	r18,r19,r3
100148e8:	142cb03a 	or	r22,r2,r16
100148ec:	882ad43a 	srli	r21,r17,16
100148f0:	b009883a 	mov	r4,r22
100148f4:	8d3fffcc 	andi	r20,r17,65535
100148f8:	a80b883a 	mov	r5,r21
100148fc:	00026f40 	call	100026f4 <__umodsi3>
10014900:	b009883a 	mov	r4,r22
10014904:	a80b883a 	mov	r5,r21
10014908:	1027883a 	mov	r19,r2
1001490c:	00026900 	call	10002690 <__udivsi3>
10014910:	100b883a 	mov	r5,r2
10014914:	a009883a 	mov	r4,r20
10014918:	102d883a 	mov	r22,r2
1001491c:	00065d80 	call	100065d8 <__mulsi3>
10014920:	9826943a 	slli	r19,r19,16
10014924:	9006d43a 	srli	r3,r18,16
10014928:	1cc6b03a 	or	r3,r3,r19
1001492c:	1880052e 	bgeu	r3,r2,10014944 <__udivdi3+0xec>
10014930:	1c47883a 	add	r3,r3,r17
10014934:	b13fffc4 	addi	r4,r22,-1
10014938:	1c400136 	bltu	r3,r17,10014940 <__udivdi3+0xe8>
1001493c:	18814236 	bltu	r3,r2,10014e48 <__udivdi3+0x5f0>
10014940:	202d883a 	mov	r22,r4
10014944:	18a1c83a 	sub	r16,r3,r2
10014948:	8009883a 	mov	r4,r16
1001494c:	a80b883a 	mov	r5,r21
10014950:	00026f40 	call	100026f4 <__umodsi3>
10014954:	1027883a 	mov	r19,r2
10014958:	8009883a 	mov	r4,r16
1001495c:	a80b883a 	mov	r5,r21
10014960:	9826943a 	slli	r19,r19,16
10014964:	00026900 	call	10002690 <__udivsi3>
10014968:	100b883a 	mov	r5,r2
1001496c:	a009883a 	mov	r4,r20
10014970:	94bfffcc 	andi	r18,r18,65535
10014974:	1021883a 	mov	r16,r2
10014978:	94e4b03a 	or	r18,r18,r19
1001497c:	00065d80 	call	100065d8 <__mulsi3>
10014980:	9080052e 	bgeu	r18,r2,10014998 <__udivdi3+0x140>
10014984:	8ca5883a 	add	r18,r17,r18
10014988:	80ffffc4 	addi	r3,r16,-1
1001498c:	94410c36 	bltu	r18,r17,10014dc0 <__udivdi3+0x568>
10014990:	90810b2e 	bgeu	r18,r2,10014dc0 <__udivdi3+0x568>
10014994:	843fff84 	addi	r16,r16,-2
10014998:	b004943a 	slli	r2,r22,16
1001499c:	0007883a 	mov	r3,zero
100149a0:	1404b03a 	or	r2,r2,r16
100149a4:	00005e06 	br	10014b20 <__udivdi3+0x2c8>
100149a8:	29c05b36 	bltu	r5,r7,10014b18 <__udivdi3+0x2c0>
100149ac:	00bfffd4 	movui	r2,65535
100149b0:	11c0672e 	bgeu	r2,r7,10014b50 <__udivdi3+0x2f8>
100149b4:	00804034 	movhi	r2,256
100149b8:	10bfffc4 	addi	r2,r2,-1
100149bc:	11c10a36 	bltu	r2,r7,10014de8 <__udivdi3+0x590>
100149c0:	00800404 	movi	r2,16
100149c4:	3886d83a 	srl	r3,r7,r2
100149c8:	01040374 	movhi	r4,4109
100149cc:	213d5504 	addi	r4,r4,-2732
100149d0:	20c7883a 	add	r3,r4,r3
100149d4:	18c00003 	ldbu	r3,0(r3)
100149d8:	05c00804 	movi	r23,32
100149dc:	1885883a 	add	r2,r3,r2
100149e0:	b8afc83a 	sub	r23,r23,r2
100149e4:	b800671e 	bne	r23,zero,10014b84 <__udivdi3+0x32c>
100149e8:	3c010536 	bltu	r7,r16,10014e00 <__udivdi3+0x5a8>
100149ec:	9985403a 	cmpgeu	r2,r19,r6
100149f0:	0007883a 	mov	r3,zero
100149f4:	00004a06 	br	10014b20 <__udivdi3+0x2c8>
100149f8:	3000041e 	bne	r6,zero,10014a0c <__udivdi3+0x1b4>
100149fc:	000b883a 	mov	r5,zero
10014a00:	01000044 	movi	r4,1
10014a04:	00026900 	call	10002690 <__udivsi3>
10014a08:	1023883a 	mov	r17,r2
10014a0c:	00bfffd4 	movui	r2,65535
10014a10:	1440532e 	bgeu	r2,r17,10014b60 <__udivdi3+0x308>
10014a14:	00804034 	movhi	r2,256
10014a18:	10bfffc4 	addi	r2,r2,-1
10014a1c:	1440f436 	bltu	r2,r17,10014df0 <__udivdi3+0x598>
10014a20:	00800404 	movi	r2,16
10014a24:	8886d83a 	srl	r3,r17,r2
10014a28:	01040374 	movhi	r4,4109
10014a2c:	213d5504 	addi	r4,r4,-2732
10014a30:	20c7883a 	add	r3,r4,r3
10014a34:	18c00003 	ldbu	r3,0(r3)
10014a38:	1885883a 	add	r2,r3,r2
10014a3c:	00c00804 	movi	r3,32
10014a40:	1887c83a 	sub	r3,r3,r2
10014a44:	1800a51e 	bne	r3,zero,10014cdc <__udivdi3+0x484>
10014a48:	882ad43a 	srli	r21,r17,16
10014a4c:	8461c83a 	sub	r16,r16,r17
10014a50:	8d3fffcc 	andi	r20,r17,65535
10014a54:	00c00044 	movi	r3,1
10014a58:	a80b883a 	mov	r5,r21
10014a5c:	8009883a 	mov	r4,r16
10014a60:	d8c00115 	stw	r3,4(sp)
10014a64:	00026f40 	call	100026f4 <__umodsi3>
10014a68:	a80b883a 	mov	r5,r21
10014a6c:	8009883a 	mov	r4,r16
10014a70:	1027883a 	mov	r19,r2
10014a74:	00026900 	call	10002690 <__udivsi3>
10014a78:	a00b883a 	mov	r5,r20
10014a7c:	1009883a 	mov	r4,r2
10014a80:	102d883a 	mov	r22,r2
10014a84:	00065d80 	call	100065d8 <__mulsi3>
10014a88:	9826943a 	slli	r19,r19,16
10014a8c:	900ed43a 	srli	r7,r18,16
10014a90:	d8c00117 	ldw	r3,4(sp)
10014a94:	3cceb03a 	or	r7,r7,r19
10014a98:	3880052e 	bgeu	r7,r2,10014ab0 <__udivdi3+0x258>
10014a9c:	3c4f883a 	add	r7,r7,r17
10014aa0:	b13fffc4 	addi	r4,r22,-1
10014aa4:	3c400136 	bltu	r7,r17,10014aac <__udivdi3+0x254>
10014aa8:	3880e436 	bltu	r7,r2,10014e3c <__udivdi3+0x5e4>
10014aac:	202d883a 	mov	r22,r4
10014ab0:	38a1c83a 	sub	r16,r7,r2
10014ab4:	8009883a 	mov	r4,r16
10014ab8:	a80b883a 	mov	r5,r21
10014abc:	d8c00115 	stw	r3,4(sp)
10014ac0:	00026f40 	call	100026f4 <__umodsi3>
10014ac4:	1027883a 	mov	r19,r2
10014ac8:	8009883a 	mov	r4,r16
10014acc:	a80b883a 	mov	r5,r21
10014ad0:	9826943a 	slli	r19,r19,16
10014ad4:	00026900 	call	10002690 <__udivsi3>
10014ad8:	a00b883a 	mov	r5,r20
10014adc:	1009883a 	mov	r4,r2
10014ae0:	94bfffcc 	andi	r18,r18,65535
10014ae4:	1021883a 	mov	r16,r2
10014ae8:	94e4b03a 	or	r18,r18,r19
10014aec:	00065d80 	call	100065d8 <__mulsi3>
10014af0:	d8c00117 	ldw	r3,4(sp)
10014af4:	9080052e 	bgeu	r18,r2,10014b0c <__udivdi3+0x2b4>
10014af8:	8ca5883a 	add	r18,r17,r18
10014afc:	813fffc4 	addi	r4,r16,-1
10014b00:	9440ad36 	bltu	r18,r17,10014db8 <__udivdi3+0x560>
10014b04:	9080ac2e 	bgeu	r18,r2,10014db8 <__udivdi3+0x560>
10014b08:	843fff84 	addi	r16,r16,-2
10014b0c:	b004943a 	slli	r2,r22,16
10014b10:	1404b03a 	or	r2,r2,r16
10014b14:	00000206 	br	10014b20 <__udivdi3+0x2c8>
10014b18:	0007883a 	mov	r3,zero
10014b1c:	0005883a 	mov	r2,zero
10014b20:	dfc00b17 	ldw	ra,44(sp)
10014b24:	df000a17 	ldw	fp,40(sp)
10014b28:	ddc00917 	ldw	r23,36(sp)
10014b2c:	dd800817 	ldw	r22,32(sp)
10014b30:	dd400717 	ldw	r21,28(sp)
10014b34:	dd000617 	ldw	r20,24(sp)
10014b38:	dcc00517 	ldw	r19,20(sp)
10014b3c:	dc800417 	ldw	r18,16(sp)
10014b40:	dc400317 	ldw	r17,12(sp)
10014b44:	dc000217 	ldw	r16,8(sp)
10014b48:	dec00c04 	addi	sp,sp,48
10014b4c:	f800283a 	ret
10014b50:	00803fc4 	movi	r2,255
10014b54:	11c5803a 	cmpltu	r2,r2,r7
10014b58:	100490fa 	slli	r2,r2,3
10014b5c:	003f9906 	br	100149c4 <__alt_data_end+0xf80149c4>
10014b60:	00803fc4 	movi	r2,255
10014b64:	1445803a 	cmpltu	r2,r2,r17
10014b68:	100490fa 	slli	r2,r2,3
10014b6c:	003fad06 	br	10014a24 <__alt_data_end+0xf8014a24>
10014b70:	00804034 	movhi	r2,256
10014b74:	10bfffc4 	addi	r2,r2,-1
10014b78:	11809f36 	bltu	r2,r6,10014df8 <__udivdi3+0x5a0>
10014b7c:	00800404 	movi	r2,16
10014b80:	003f4c06 	br	100148b4 <__alt_data_end+0xf80148b4>
10014b84:	3dce983a 	sll	r7,r7,r23
10014b88:	30b8d83a 	srl	fp,r6,r2
10014b8c:	80a2d83a 	srl	r17,r16,r2
10014b90:	35cc983a 	sll	r6,r6,r23
10014b94:	3f38b03a 	or	fp,r7,fp
10014b98:	e024d43a 	srli	r18,fp,16
10014b9c:	9884d83a 	srl	r2,r19,r2
10014ba0:	85e0983a 	sll	r16,r16,r23
10014ba4:	8809883a 	mov	r4,r17
10014ba8:	900b883a 	mov	r5,r18
10014bac:	d9800015 	stw	r6,0(sp)
10014bb0:	1420b03a 	or	r16,r2,r16
10014bb4:	00026f40 	call	100026f4 <__umodsi3>
10014bb8:	900b883a 	mov	r5,r18
10014bbc:	8809883a 	mov	r4,r17
10014bc0:	1029883a 	mov	r20,r2
10014bc4:	e5bfffcc 	andi	r22,fp,65535
10014bc8:	00026900 	call	10002690 <__udivsi3>
10014bcc:	100b883a 	mov	r5,r2
10014bd0:	b009883a 	mov	r4,r22
10014bd4:	102b883a 	mov	r21,r2
10014bd8:	00065d80 	call	100065d8 <__mulsi3>
10014bdc:	a028943a 	slli	r20,r20,16
10014be0:	8006d43a 	srli	r3,r16,16
10014be4:	1d06b03a 	or	r3,r3,r20
10014be8:	1880042e 	bgeu	r3,r2,10014bfc <__udivdi3+0x3a4>
10014bec:	1f07883a 	add	r3,r3,fp
10014bf0:	a93fffc4 	addi	r4,r21,-1
10014bf4:	1f00892e 	bgeu	r3,fp,10014e1c <__udivdi3+0x5c4>
10014bf8:	202b883a 	mov	r21,r4
10014bfc:	18a3c83a 	sub	r17,r3,r2
10014c00:	8809883a 	mov	r4,r17
10014c04:	900b883a 	mov	r5,r18
10014c08:	00026f40 	call	100026f4 <__umodsi3>
10014c0c:	1029883a 	mov	r20,r2
10014c10:	8809883a 	mov	r4,r17
10014c14:	900b883a 	mov	r5,r18
10014c18:	a028943a 	slli	r20,r20,16
10014c1c:	00026900 	call	10002690 <__udivsi3>
10014c20:	100b883a 	mov	r5,r2
10014c24:	b009883a 	mov	r4,r22
10014c28:	843fffcc 	andi	r16,r16,65535
10014c2c:	1023883a 	mov	r17,r2
10014c30:	8520b03a 	or	r16,r16,r20
10014c34:	00065d80 	call	100065d8 <__mulsi3>
10014c38:	8080042e 	bgeu	r16,r2,10014c4c <__udivdi3+0x3f4>
10014c3c:	8721883a 	add	r16,r16,fp
10014c40:	88ffffc4 	addi	r3,r17,-1
10014c44:	8700712e 	bgeu	r16,fp,10014e0c <__udivdi3+0x5b4>
10014c48:	1823883a 	mov	r17,r3
10014c4c:	a80e943a 	slli	r7,r21,16
10014c50:	d8c00017 	ldw	r3,0(sp)
10014c54:	80a1c83a 	sub	r16,r16,r2
10014c58:	3c64b03a 	or	r18,r7,r17
10014c5c:	1d3fffcc 	andi	r20,r3,65535
10014c60:	9022d43a 	srli	r17,r18,16
10014c64:	95bfffcc 	andi	r22,r18,65535
10014c68:	a00b883a 	mov	r5,r20
10014c6c:	b009883a 	mov	r4,r22
10014c70:	182ad43a 	srli	r21,r3,16
10014c74:	00065d80 	call	100065d8 <__mulsi3>
10014c78:	a00b883a 	mov	r5,r20
10014c7c:	8809883a 	mov	r4,r17
10014c80:	1039883a 	mov	fp,r2
10014c84:	00065d80 	call	100065d8 <__mulsi3>
10014c88:	8809883a 	mov	r4,r17
10014c8c:	a80b883a 	mov	r5,r21
10014c90:	1029883a 	mov	r20,r2
10014c94:	00065d80 	call	100065d8 <__mulsi3>
10014c98:	a80b883a 	mov	r5,r21
10014c9c:	b009883a 	mov	r4,r22
10014ca0:	1023883a 	mov	r17,r2
10014ca4:	00065d80 	call	100065d8 <__mulsi3>
10014ca8:	e006d43a 	srli	r3,fp,16
10014cac:	1505883a 	add	r2,r2,r20
10014cb0:	1887883a 	add	r3,r3,r2
10014cb4:	1d00022e 	bgeu	r3,r20,10014cc0 <__udivdi3+0x468>
10014cb8:	00800074 	movhi	r2,1
10014cbc:	88a3883a 	add	r17,r17,r2
10014cc0:	1804d43a 	srli	r2,r3,16
10014cc4:	1463883a 	add	r17,r2,r17
10014cc8:	84404436 	bltu	r16,r17,10014ddc <__udivdi3+0x584>
10014ccc:	84403e26 	beq	r16,r17,10014dc8 <__udivdi3+0x570>
10014cd0:	9005883a 	mov	r2,r18
10014cd4:	0007883a 	mov	r3,zero
10014cd8:	003f9106 	br	10014b20 <__alt_data_end+0xf8014b20>
10014cdc:	88e2983a 	sll	r17,r17,r3
10014ce0:	80aed83a 	srl	r23,r16,r2
10014ce4:	80e0983a 	sll	r16,r16,r3
10014ce8:	882ad43a 	srli	r21,r17,16
10014cec:	9884d83a 	srl	r2,r19,r2
10014cf0:	b809883a 	mov	r4,r23
10014cf4:	a80b883a 	mov	r5,r21
10014cf8:	98e4983a 	sll	r18,r19,r3
10014cfc:	142cb03a 	or	r22,r2,r16
10014d00:	00026f40 	call	100026f4 <__umodsi3>
10014d04:	b809883a 	mov	r4,r23
10014d08:	a80b883a 	mov	r5,r21
10014d0c:	1027883a 	mov	r19,r2
10014d10:	8d3fffcc 	andi	r20,r17,65535
10014d14:	00026900 	call	10002690 <__udivsi3>
10014d18:	a009883a 	mov	r4,r20
10014d1c:	100b883a 	mov	r5,r2
10014d20:	102f883a 	mov	r23,r2
10014d24:	00065d80 	call	100065d8 <__mulsi3>
10014d28:	9826943a 	slli	r19,r19,16
10014d2c:	b008d43a 	srli	r4,r22,16
10014d30:	24c8b03a 	or	r4,r4,r19
10014d34:	2080062e 	bgeu	r4,r2,10014d50 <__udivdi3+0x4f8>
10014d38:	2449883a 	add	r4,r4,r17
10014d3c:	b8ffffc4 	addi	r3,r23,-1
10014d40:	24403c36 	bltu	r4,r17,10014e34 <__udivdi3+0x5dc>
10014d44:	20803b2e 	bgeu	r4,r2,10014e34 <__udivdi3+0x5dc>
10014d48:	bdffff84 	addi	r23,r23,-2
10014d4c:	2449883a 	add	r4,r4,r17
10014d50:	20a1c83a 	sub	r16,r4,r2
10014d54:	a80b883a 	mov	r5,r21
10014d58:	8009883a 	mov	r4,r16
10014d5c:	00026f40 	call	100026f4 <__umodsi3>
10014d60:	a80b883a 	mov	r5,r21
10014d64:	8009883a 	mov	r4,r16
10014d68:	1027883a 	mov	r19,r2
10014d6c:	00026900 	call	10002690 <__udivsi3>
10014d70:	a009883a 	mov	r4,r20
10014d74:	100b883a 	mov	r5,r2
10014d78:	9826943a 	slli	r19,r19,16
10014d7c:	1039883a 	mov	fp,r2
10014d80:	00065d80 	call	100065d8 <__mulsi3>
10014d84:	b13fffcc 	andi	r4,r22,65535
10014d88:	24c8b03a 	or	r4,r4,r19
10014d8c:	2080062e 	bgeu	r4,r2,10014da8 <__udivdi3+0x550>
10014d90:	2449883a 	add	r4,r4,r17
10014d94:	e0ffffc4 	addi	r3,fp,-1
10014d98:	24402436 	bltu	r4,r17,10014e2c <__udivdi3+0x5d4>
10014d9c:	2080232e 	bgeu	r4,r2,10014e2c <__udivdi3+0x5d4>
10014da0:	e73fff84 	addi	fp,fp,-2
10014da4:	2449883a 	add	r4,r4,r17
10014da8:	b82e943a 	slli	r23,r23,16
10014dac:	20a1c83a 	sub	r16,r4,r2
10014db0:	bf06b03a 	or	r3,r23,fp
10014db4:	003f2806 	br	10014a58 <__alt_data_end+0xf8014a58>
10014db8:	2021883a 	mov	r16,r4
10014dbc:	003f5306 	br	10014b0c <__alt_data_end+0xf8014b0c>
10014dc0:	1821883a 	mov	r16,r3
10014dc4:	003ef406 	br	10014998 <__alt_data_end+0xf8014998>
10014dc8:	1806943a 	slli	r3,r3,16
10014dcc:	9de6983a 	sll	r19,r19,r23
10014dd0:	e73fffcc 	andi	fp,fp,65535
10014dd4:	1f07883a 	add	r3,r3,fp
10014dd8:	98ffbd2e 	bgeu	r19,r3,10014cd0 <__alt_data_end+0xf8014cd0>
10014ddc:	90bfffc4 	addi	r2,r18,-1
10014de0:	0007883a 	mov	r3,zero
10014de4:	003f4e06 	br	10014b20 <__alt_data_end+0xf8014b20>
10014de8:	00800604 	movi	r2,24
10014dec:	003ef506 	br	100149c4 <__alt_data_end+0xf80149c4>
10014df0:	00800604 	movi	r2,24
10014df4:	003f0b06 	br	10014a24 <__alt_data_end+0xf8014a24>
10014df8:	00800604 	movi	r2,24
10014dfc:	003ead06 	br	100148b4 <__alt_data_end+0xf80148b4>
10014e00:	0007883a 	mov	r3,zero
10014e04:	00800044 	movi	r2,1
10014e08:	003f4506 	br	10014b20 <__alt_data_end+0xf8014b20>
10014e0c:	80bf8e2e 	bgeu	r16,r2,10014c48 <__alt_data_end+0xf8014c48>
10014e10:	8c7fff84 	addi	r17,r17,-2
10014e14:	8721883a 	add	r16,r16,fp
10014e18:	003f8c06 	br	10014c4c <__alt_data_end+0xf8014c4c>
10014e1c:	18bf762e 	bgeu	r3,r2,10014bf8 <__alt_data_end+0xf8014bf8>
10014e20:	ad7fff84 	addi	r21,r21,-2
10014e24:	1f07883a 	add	r3,r3,fp
10014e28:	003f7406 	br	10014bfc <__alt_data_end+0xf8014bfc>
10014e2c:	1839883a 	mov	fp,r3
10014e30:	003fdd06 	br	10014da8 <__alt_data_end+0xf8014da8>
10014e34:	182f883a 	mov	r23,r3
10014e38:	003fc506 	br	10014d50 <__alt_data_end+0xf8014d50>
10014e3c:	b5bfff84 	addi	r22,r22,-2
10014e40:	3c4f883a 	add	r7,r7,r17
10014e44:	003f1a06 	br	10014ab0 <__alt_data_end+0xf8014ab0>
10014e48:	b5bfff84 	addi	r22,r22,-2
10014e4c:	1c47883a 	add	r3,r3,r17
10014e50:	003ebc06 	br	10014944 <__alt_data_end+0xf8014944>

10014e54 <__umoddi3>:
10014e54:	defff304 	addi	sp,sp,-52
10014e58:	df000b15 	stw	fp,44(sp)
10014e5c:	dc400415 	stw	r17,16(sp)
10014e60:	dc000315 	stw	r16,12(sp)
10014e64:	dfc00c15 	stw	ra,48(sp)
10014e68:	ddc00a15 	stw	r23,40(sp)
10014e6c:	dd800915 	stw	r22,36(sp)
10014e70:	dd400815 	stw	r21,32(sp)
10014e74:	dd000715 	stw	r20,28(sp)
10014e78:	dcc00615 	stw	r19,24(sp)
10014e7c:	dc800515 	stw	r18,20(sp)
10014e80:	2021883a 	mov	r16,r4
10014e84:	2823883a 	mov	r17,r5
10014e88:	2839883a 	mov	fp,r5
10014e8c:	3800401e 	bne	r7,zero,10014f90 <__umoddi3+0x13c>
10014e90:	3027883a 	mov	r19,r6
10014e94:	2029883a 	mov	r20,r4
10014e98:	2980552e 	bgeu	r5,r6,10014ff0 <__umoddi3+0x19c>
10014e9c:	00bfffd4 	movui	r2,65535
10014ea0:	1180a236 	bltu	r2,r6,1001512c <__umoddi3+0x2d8>
10014ea4:	01003fc4 	movi	r4,255
10014ea8:	2189803a 	cmpltu	r4,r4,r6
10014eac:	200890fa 	slli	r4,r4,3
10014eb0:	3104d83a 	srl	r2,r6,r4
10014eb4:	00c40374 	movhi	r3,4109
10014eb8:	18fd5504 	addi	r3,r3,-2732
10014ebc:	1885883a 	add	r2,r3,r2
10014ec0:	10c00003 	ldbu	r3,0(r2)
10014ec4:	00800804 	movi	r2,32
10014ec8:	1909883a 	add	r4,r3,r4
10014ecc:	1125c83a 	sub	r18,r2,r4
10014ed0:	90000526 	beq	r18,zero,10014ee8 <__umoddi3+0x94>
10014ed4:	8ca2983a 	sll	r17,r17,r18
10014ed8:	8108d83a 	srl	r4,r16,r4
10014edc:	34a6983a 	sll	r19,r6,r18
10014ee0:	84a8983a 	sll	r20,r16,r18
10014ee4:	2478b03a 	or	fp,r4,r17
10014ee8:	982cd43a 	srli	r22,r19,16
10014eec:	e009883a 	mov	r4,fp
10014ef0:	9dffffcc 	andi	r23,r19,65535
10014ef4:	b00b883a 	mov	r5,r22
10014ef8:	00026f40 	call	100026f4 <__umodsi3>
10014efc:	b00b883a 	mov	r5,r22
10014f00:	e009883a 	mov	r4,fp
10014f04:	102b883a 	mov	r21,r2
10014f08:	00026900 	call	10002690 <__udivsi3>
10014f0c:	100b883a 	mov	r5,r2
10014f10:	b809883a 	mov	r4,r23
10014f14:	00065d80 	call	100065d8 <__mulsi3>
10014f18:	a82a943a 	slli	r21,r21,16
10014f1c:	a006d43a 	srli	r3,r20,16
10014f20:	1d46b03a 	or	r3,r3,r21
10014f24:	1880032e 	bgeu	r3,r2,10014f34 <__umoddi3+0xe0>
10014f28:	1cc7883a 	add	r3,r3,r19
10014f2c:	1cc00136 	bltu	r3,r19,10014f34 <__umoddi3+0xe0>
10014f30:	18813136 	bltu	r3,r2,100153f8 <__umoddi3+0x5a4>
10014f34:	18a1c83a 	sub	r16,r3,r2
10014f38:	b00b883a 	mov	r5,r22
10014f3c:	8009883a 	mov	r4,r16
10014f40:	00026f40 	call	100026f4 <__umodsi3>
10014f44:	b00b883a 	mov	r5,r22
10014f48:	8009883a 	mov	r4,r16
10014f4c:	1023883a 	mov	r17,r2
10014f50:	00026900 	call	10002690 <__udivsi3>
10014f54:	100b883a 	mov	r5,r2
10014f58:	b809883a 	mov	r4,r23
10014f5c:	8822943a 	slli	r17,r17,16
10014f60:	00065d80 	call	100065d8 <__mulsi3>
10014f64:	a0ffffcc 	andi	r3,r20,65535
10014f68:	1c46b03a 	or	r3,r3,r17
10014f6c:	1880042e 	bgeu	r3,r2,10014f80 <__umoddi3+0x12c>
10014f70:	1cc7883a 	add	r3,r3,r19
10014f74:	1cc00236 	bltu	r3,r19,10014f80 <__umoddi3+0x12c>
10014f78:	1880012e 	bgeu	r3,r2,10014f80 <__umoddi3+0x12c>
10014f7c:	1cc7883a 	add	r3,r3,r19
10014f80:	1885c83a 	sub	r2,r3,r2
10014f84:	1484d83a 	srl	r2,r2,r18
10014f88:	0007883a 	mov	r3,zero
10014f8c:	00005306 	br	100150dc <__umoddi3+0x288>
10014f90:	29c05036 	bltu	r5,r7,100150d4 <__umoddi3+0x280>
10014f94:	00bfffd4 	movui	r2,65535
10014f98:	11c05c2e 	bgeu	r2,r7,1001510c <__umoddi3+0x2b8>
10014f9c:	00804034 	movhi	r2,256
10014fa0:	10bfffc4 	addi	r2,r2,-1
10014fa4:	11c10636 	bltu	r2,r7,100153c0 <__umoddi3+0x56c>
10014fa8:	01000404 	movi	r4,16
10014fac:	3904d83a 	srl	r2,r7,r4
10014fb0:	00c40374 	movhi	r3,4109
10014fb4:	18fd5504 	addi	r3,r3,-2732
10014fb8:	1885883a 	add	r2,r3,r2
10014fbc:	14c00003 	ldbu	r19,0(r2)
10014fc0:	00c00804 	movi	r3,32
10014fc4:	9927883a 	add	r19,r19,r4
10014fc8:	1ce9c83a 	sub	r20,r3,r19
10014fcc:	a0005c1e 	bne	r20,zero,10015140 <__umoddi3+0x2ec>
10014fd0:	3c400136 	bltu	r7,r17,10014fd8 <__umoddi3+0x184>
10014fd4:	81810a36 	bltu	r16,r6,10015400 <__umoddi3+0x5ac>
10014fd8:	8185c83a 	sub	r2,r16,r6
10014fdc:	89e3c83a 	sub	r17,r17,r7
10014fe0:	8089803a 	cmpltu	r4,r16,r2
10014fe4:	8939c83a 	sub	fp,r17,r4
10014fe8:	e007883a 	mov	r3,fp
10014fec:	00003b06 	br	100150dc <__umoddi3+0x288>
10014ff0:	3000041e 	bne	r6,zero,10015004 <__umoddi3+0x1b0>
10014ff4:	000b883a 	mov	r5,zero
10014ff8:	01000044 	movi	r4,1
10014ffc:	00026900 	call	10002690 <__udivsi3>
10015000:	1027883a 	mov	r19,r2
10015004:	00bfffd4 	movui	r2,65535
10015008:	14c0442e 	bgeu	r2,r19,1001511c <__umoddi3+0x2c8>
1001500c:	00804034 	movhi	r2,256
10015010:	10bfffc4 	addi	r2,r2,-1
10015014:	14c0ec36 	bltu	r2,r19,100153c8 <__umoddi3+0x574>
10015018:	00800404 	movi	r2,16
1001501c:	9886d83a 	srl	r3,r19,r2
10015020:	01040374 	movhi	r4,4109
10015024:	213d5504 	addi	r4,r4,-2732
10015028:	20c7883a 	add	r3,r4,r3
1001502c:	18c00003 	ldbu	r3,0(r3)
10015030:	1887883a 	add	r3,r3,r2
10015034:	00800804 	movi	r2,32
10015038:	10e5c83a 	sub	r18,r2,r3
1001503c:	9000ab1e 	bne	r18,zero,100152ec <__umoddi3+0x498>
10015040:	982cd43a 	srli	r22,r19,16
10015044:	8ce3c83a 	sub	r17,r17,r19
10015048:	9dffffcc 	andi	r23,r19,65535
1001504c:	b00b883a 	mov	r5,r22
10015050:	8809883a 	mov	r4,r17
10015054:	00026f40 	call	100026f4 <__umodsi3>
10015058:	b00b883a 	mov	r5,r22
1001505c:	8809883a 	mov	r4,r17
10015060:	102b883a 	mov	r21,r2
10015064:	00026900 	call	10002690 <__udivsi3>
10015068:	b80b883a 	mov	r5,r23
1001506c:	1009883a 	mov	r4,r2
10015070:	00065d80 	call	100065d8 <__mulsi3>
10015074:	a82a943a 	slli	r21,r21,16
10015078:	a006d43a 	srli	r3,r20,16
1001507c:	1d46b03a 	or	r3,r3,r21
10015080:	1880042e 	bgeu	r3,r2,10015094 <__umoddi3+0x240>
10015084:	1cc7883a 	add	r3,r3,r19
10015088:	1cc00236 	bltu	r3,r19,10015094 <__umoddi3+0x240>
1001508c:	1880012e 	bgeu	r3,r2,10015094 <__umoddi3+0x240>
10015090:	1cc7883a 	add	r3,r3,r19
10015094:	18a1c83a 	sub	r16,r3,r2
10015098:	b00b883a 	mov	r5,r22
1001509c:	8009883a 	mov	r4,r16
100150a0:	00026f40 	call	100026f4 <__umodsi3>
100150a4:	1023883a 	mov	r17,r2
100150a8:	b00b883a 	mov	r5,r22
100150ac:	8009883a 	mov	r4,r16
100150b0:	00026900 	call	10002690 <__udivsi3>
100150b4:	8822943a 	slli	r17,r17,16
100150b8:	b80b883a 	mov	r5,r23
100150bc:	1009883a 	mov	r4,r2
100150c0:	00065d80 	call	100065d8 <__mulsi3>
100150c4:	a53fffcc 	andi	r20,r20,65535
100150c8:	a446b03a 	or	r3,r20,r17
100150cc:	18bfac2e 	bgeu	r3,r2,10014f80 <__alt_data_end+0xf8014f80>
100150d0:	003fa706 	br	10014f70 <__alt_data_end+0xf8014f70>
100150d4:	2005883a 	mov	r2,r4
100150d8:	2807883a 	mov	r3,r5
100150dc:	dfc00c17 	ldw	ra,48(sp)
100150e0:	df000b17 	ldw	fp,44(sp)
100150e4:	ddc00a17 	ldw	r23,40(sp)
100150e8:	dd800917 	ldw	r22,36(sp)
100150ec:	dd400817 	ldw	r21,32(sp)
100150f0:	dd000717 	ldw	r20,28(sp)
100150f4:	dcc00617 	ldw	r19,24(sp)
100150f8:	dc800517 	ldw	r18,20(sp)
100150fc:	dc400417 	ldw	r17,16(sp)
10015100:	dc000317 	ldw	r16,12(sp)
10015104:	dec00d04 	addi	sp,sp,52
10015108:	f800283a 	ret
1001510c:	04c03fc4 	movi	r19,255
10015110:	99c9803a 	cmpltu	r4,r19,r7
10015114:	200890fa 	slli	r4,r4,3
10015118:	003fa406 	br	10014fac <__alt_data_end+0xf8014fac>
1001511c:	00803fc4 	movi	r2,255
10015120:	14c5803a 	cmpltu	r2,r2,r19
10015124:	100490fa 	slli	r2,r2,3
10015128:	003fbc06 	br	1001501c <__alt_data_end+0xf801501c>
1001512c:	00804034 	movhi	r2,256
10015130:	10bfffc4 	addi	r2,r2,-1
10015134:	1180a636 	bltu	r2,r6,100153d0 <__umoddi3+0x57c>
10015138:	01000404 	movi	r4,16
1001513c:	003f5c06 	br	10014eb0 <__alt_data_end+0xf8014eb0>
10015140:	3d0e983a 	sll	r7,r7,r20
10015144:	34ead83a 	srl	r21,r6,r19
10015148:	8cc6d83a 	srl	r3,r17,r19
1001514c:	8d10983a 	sll	r8,r17,r20
10015150:	3d6ab03a 	or	r21,r7,r21
10015154:	a82cd43a 	srli	r22,r21,16
10015158:	84e2d83a 	srl	r17,r16,r19
1001515c:	1809883a 	mov	r4,r3
10015160:	b00b883a 	mov	r5,r22
10015164:	8a22b03a 	or	r17,r17,r8
10015168:	3524983a 	sll	r18,r6,r20
1001516c:	dc400015 	stw	r17,0(sp)
10015170:	d8c00115 	stw	r3,4(sp)
10015174:	00026f40 	call	100026f4 <__umodsi3>
10015178:	d8c00117 	ldw	r3,4(sp)
1001517c:	b00b883a 	mov	r5,r22
10015180:	1039883a 	mov	fp,r2
10015184:	1809883a 	mov	r4,r3
10015188:	00026900 	call	10002690 <__udivsi3>
1001518c:	adffffcc 	andi	r23,r21,65535
10015190:	100b883a 	mov	r5,r2
10015194:	b809883a 	mov	r4,r23
10015198:	1023883a 	mov	r17,r2
1001519c:	00065d80 	call	100065d8 <__mulsi3>
100151a0:	d9400017 	ldw	r5,0(sp)
100151a4:	e008943a 	slli	r4,fp,16
100151a8:	8520983a 	sll	r16,r16,r20
100151ac:	2806d43a 	srli	r3,r5,16
100151b0:	1906b03a 	or	r3,r3,r4
100151b4:	1880042e 	bgeu	r3,r2,100151c8 <__umoddi3+0x374>
100151b8:	1d47883a 	add	r3,r3,r21
100151bc:	893fffc4 	addi	r4,r17,-1
100151c0:	1d40892e 	bgeu	r3,r21,100153e8 <__umoddi3+0x594>
100151c4:	2023883a 	mov	r17,r4
100151c8:	18b9c83a 	sub	fp,r3,r2
100151cc:	b00b883a 	mov	r5,r22
100151d0:	e009883a 	mov	r4,fp
100151d4:	00026f40 	call	100026f4 <__umodsi3>
100151d8:	b00b883a 	mov	r5,r22
100151dc:	e009883a 	mov	r4,fp
100151e0:	d8800215 	stw	r2,8(sp)
100151e4:	00026900 	call	10002690 <__udivsi3>
100151e8:	100b883a 	mov	r5,r2
100151ec:	b809883a 	mov	r4,r23
100151f0:	102d883a 	mov	r22,r2
100151f4:	00065d80 	call	100065d8 <__mulsi3>
100151f8:	d9800217 	ldw	r6,8(sp)
100151fc:	d8c00017 	ldw	r3,0(sp)
10015200:	300c943a 	slli	r6,r6,16
10015204:	1a3fffcc 	andi	r8,r3,65535
10015208:	4190b03a 	or	r8,r8,r6
1001520c:	4080042e 	bgeu	r8,r2,10015220 <__umoddi3+0x3cc>
10015210:	4551883a 	add	r8,r8,r21
10015214:	b0ffffc4 	addi	r3,r22,-1
10015218:	45406f2e 	bgeu	r8,r21,100153d8 <__umoddi3+0x584>
1001521c:	182d883a 	mov	r22,r3
10015220:	880e943a 	slli	r7,r17,16
10015224:	9006d43a 	srli	r3,r18,16
10015228:	91bfffcc 	andi	r6,r18,65535
1001522c:	3dacb03a 	or	r22,r7,r22
10015230:	b02ed43a 	srli	r23,r22,16
10015234:	b5bfffcc 	andi	r22,r22,65535
10015238:	300b883a 	mov	r5,r6
1001523c:	b009883a 	mov	r4,r22
10015240:	40a3c83a 	sub	r17,r8,r2
10015244:	d8c00115 	stw	r3,4(sp)
10015248:	d9800215 	stw	r6,8(sp)
1001524c:	00065d80 	call	100065d8 <__mulsi3>
10015250:	d9800217 	ldw	r6,8(sp)
10015254:	b809883a 	mov	r4,r23
10015258:	1039883a 	mov	fp,r2
1001525c:	300b883a 	mov	r5,r6
10015260:	00065d80 	call	100065d8 <__mulsi3>
10015264:	d8c00117 	ldw	r3,4(sp)
10015268:	b809883a 	mov	r4,r23
1001526c:	d8800215 	stw	r2,8(sp)
10015270:	180b883a 	mov	r5,r3
10015274:	00065d80 	call	100065d8 <__mulsi3>
10015278:	d8c00117 	ldw	r3,4(sp)
1001527c:	b009883a 	mov	r4,r22
10015280:	102f883a 	mov	r23,r2
10015284:	180b883a 	mov	r5,r3
10015288:	00065d80 	call	100065d8 <__mulsi3>
1001528c:	d9800217 	ldw	r6,8(sp)
10015290:	e006d43a 	srli	r3,fp,16
10015294:	1185883a 	add	r2,r2,r6
10015298:	1885883a 	add	r2,r3,r2
1001529c:	1180022e 	bgeu	r2,r6,100152a8 <__umoddi3+0x454>
100152a0:	00c00074 	movhi	r3,1
100152a4:	b8ef883a 	add	r23,r23,r3
100152a8:	1006d43a 	srli	r3,r2,16
100152ac:	1004943a 	slli	r2,r2,16
100152b0:	e73fffcc 	andi	fp,fp,65535
100152b4:	1dc7883a 	add	r3,r3,r23
100152b8:	1739883a 	add	fp,r2,fp
100152bc:	88c03a36 	bltu	r17,r3,100153a8 <__umoddi3+0x554>
100152c0:	88c05126 	beq	r17,r3,10015408 <__umoddi3+0x5b4>
100152c4:	88c9c83a 	sub	r4,r17,r3
100152c8:	e00f883a 	mov	r7,fp
100152cc:	81cfc83a 	sub	r7,r16,r7
100152d0:	81c7803a 	cmpltu	r3,r16,r7
100152d4:	20c7c83a 	sub	r3,r4,r3
100152d8:	1cc4983a 	sll	r2,r3,r19
100152dc:	3d0ed83a 	srl	r7,r7,r20
100152e0:	1d06d83a 	srl	r3,r3,r20
100152e4:	11c4b03a 	or	r2,r2,r7
100152e8:	003f7c06 	br	100150dc <__alt_data_end+0xf80150dc>
100152ec:	9ca6983a 	sll	r19,r19,r18
100152f0:	88f8d83a 	srl	fp,r17,r3
100152f4:	80c4d83a 	srl	r2,r16,r3
100152f8:	982cd43a 	srli	r22,r19,16
100152fc:	8ca2983a 	sll	r17,r17,r18
10015300:	e009883a 	mov	r4,fp
10015304:	b00b883a 	mov	r5,r22
10015308:	146ab03a 	or	r21,r2,r17
1001530c:	00026f40 	call	100026f4 <__umodsi3>
10015310:	b00b883a 	mov	r5,r22
10015314:	e009883a 	mov	r4,fp
10015318:	1029883a 	mov	r20,r2
1001531c:	9dffffcc 	andi	r23,r19,65535
10015320:	00026900 	call	10002690 <__udivsi3>
10015324:	b809883a 	mov	r4,r23
10015328:	100b883a 	mov	r5,r2
1001532c:	00065d80 	call	100065d8 <__mulsi3>
10015330:	a008943a 	slli	r4,r20,16
10015334:	a806d43a 	srli	r3,r21,16
10015338:	84a8983a 	sll	r20,r16,r18
1001533c:	1906b03a 	or	r3,r3,r4
10015340:	1880042e 	bgeu	r3,r2,10015354 <__umoddi3+0x500>
10015344:	1cc7883a 	add	r3,r3,r19
10015348:	1cc00236 	bltu	r3,r19,10015354 <__umoddi3+0x500>
1001534c:	1880012e 	bgeu	r3,r2,10015354 <__umoddi3+0x500>
10015350:	1cc7883a 	add	r3,r3,r19
10015354:	18a3c83a 	sub	r17,r3,r2
10015358:	b00b883a 	mov	r5,r22
1001535c:	8809883a 	mov	r4,r17
10015360:	00026f40 	call	100026f4 <__umodsi3>
10015364:	b00b883a 	mov	r5,r22
10015368:	8809883a 	mov	r4,r17
1001536c:	1021883a 	mov	r16,r2
10015370:	00026900 	call	10002690 <__udivsi3>
10015374:	100b883a 	mov	r5,r2
10015378:	b809883a 	mov	r4,r23
1001537c:	8020943a 	slli	r16,r16,16
10015380:	00065d80 	call	100065d8 <__mulsi3>
10015384:	a8ffffcc 	andi	r3,r21,65535
10015388:	1c06b03a 	or	r3,r3,r16
1001538c:	1880042e 	bgeu	r3,r2,100153a0 <__umoddi3+0x54c>
10015390:	1cc7883a 	add	r3,r3,r19
10015394:	1cc00236 	bltu	r3,r19,100153a0 <__umoddi3+0x54c>
10015398:	1880012e 	bgeu	r3,r2,100153a0 <__umoddi3+0x54c>
1001539c:	1cc7883a 	add	r3,r3,r19
100153a0:	18a3c83a 	sub	r17,r3,r2
100153a4:	003f2906 	br	1001504c <__alt_data_end+0xf801504c>
100153a8:	e48fc83a 	sub	r7,fp,r18
100153ac:	1d49c83a 	sub	r4,r3,r21
100153b0:	e1f9803a 	cmpltu	fp,fp,r7
100153b4:	2739c83a 	sub	fp,r4,fp
100153b8:	8f09c83a 	sub	r4,r17,fp
100153bc:	003fc306 	br	100152cc <__alt_data_end+0xf80152cc>
100153c0:	01000604 	movi	r4,24
100153c4:	003ef906 	br	10014fac <__alt_data_end+0xf8014fac>
100153c8:	00800604 	movi	r2,24
100153cc:	003f1306 	br	1001501c <__alt_data_end+0xf801501c>
100153d0:	01000604 	movi	r4,24
100153d4:	003eb606 	br	10014eb0 <__alt_data_end+0xf8014eb0>
100153d8:	40bf902e 	bgeu	r8,r2,1001521c <__alt_data_end+0xf801521c>
100153dc:	b5bfff84 	addi	r22,r22,-2
100153e0:	4551883a 	add	r8,r8,r21
100153e4:	003f8e06 	br	10015220 <__alt_data_end+0xf8015220>
100153e8:	18bf762e 	bgeu	r3,r2,100151c4 <__alt_data_end+0xf80151c4>
100153ec:	8c7fff84 	addi	r17,r17,-2
100153f0:	1d47883a 	add	r3,r3,r21
100153f4:	003f7406 	br	100151c8 <__alt_data_end+0xf80151c8>
100153f8:	1cc7883a 	add	r3,r3,r19
100153fc:	003ecd06 	br	10014f34 <__alt_data_end+0xf8014f34>
10015400:	8005883a 	mov	r2,r16
10015404:	003ef806 	br	10014fe8 <__alt_data_end+0xf8014fe8>
10015408:	873fe736 	bltu	r16,fp,100153a8 <__alt_data_end+0xf80153a8>
1001540c:	e00f883a 	mov	r7,fp
10015410:	0009883a 	mov	r4,zero
10015414:	003fad06 	br	100152cc <__alt_data_end+0xf80152cc>

10015418 <__eqdf2>:
10015418:	2804d53a 	srli	r2,r5,20
1001541c:	3806d53a 	srli	r3,r7,20
10015420:	02000434 	movhi	r8,16
10015424:	423fffc4 	addi	r8,r8,-1
10015428:	1081ffcc 	andi	r2,r2,2047
1001542c:	0281ffc4 	movi	r10,2047
10015430:	2a12703a 	and	r9,r5,r8
10015434:	18c1ffcc 	andi	r3,r3,2047
10015438:	3a10703a 	and	r8,r7,r8
1001543c:	280ad7fa 	srli	r5,r5,31
10015440:	380ed7fa 	srli	r7,r7,31
10015444:	12801026 	beq	r2,r10,10015488 <__eqdf2+0x70>
10015448:	0281ffc4 	movi	r10,2047
1001544c:	1a800a26 	beq	r3,r10,10015478 <__eqdf2+0x60>
10015450:	10c00226 	beq	r2,r3,1001545c <__eqdf2+0x44>
10015454:	00800044 	movi	r2,1
10015458:	f800283a 	ret
1001545c:	4a3ffd1e 	bne	r9,r8,10015454 <__alt_data_end+0xf8015454>
10015460:	21bffc1e 	bne	r4,r6,10015454 <__alt_data_end+0xf8015454>
10015464:	29c00c26 	beq	r5,r7,10015498 <__eqdf2+0x80>
10015468:	103ffa1e 	bne	r2,zero,10015454 <__alt_data_end+0xf8015454>
1001546c:	2244b03a 	or	r2,r4,r9
10015470:	1004c03a 	cmpne	r2,r2,zero
10015474:	f800283a 	ret
10015478:	3214b03a 	or	r10,r6,r8
1001547c:	503ff426 	beq	r10,zero,10015450 <__alt_data_end+0xf8015450>
10015480:	00800044 	movi	r2,1
10015484:	f800283a 	ret
10015488:	2254b03a 	or	r10,r4,r9
1001548c:	503fee26 	beq	r10,zero,10015448 <__alt_data_end+0xf8015448>
10015490:	00800044 	movi	r2,1
10015494:	f800283a 	ret
10015498:	0005883a 	mov	r2,zero
1001549c:	f800283a 	ret

100154a0 <__gedf2>:
100154a0:	2804d53a 	srli	r2,r5,20
100154a4:	3806d53a 	srli	r3,r7,20
100154a8:	02000434 	movhi	r8,16
100154ac:	423fffc4 	addi	r8,r8,-1
100154b0:	1081ffcc 	andi	r2,r2,2047
100154b4:	0241ffc4 	movi	r9,2047
100154b8:	2a14703a 	and	r10,r5,r8
100154bc:	18c1ffcc 	andi	r3,r3,2047
100154c0:	3a10703a 	and	r8,r7,r8
100154c4:	280ad7fa 	srli	r5,r5,31
100154c8:	380ed7fa 	srli	r7,r7,31
100154cc:	12401d26 	beq	r2,r9,10015544 <__gedf2+0xa4>
100154d0:	0241ffc4 	movi	r9,2047
100154d4:	1a401226 	beq	r3,r9,10015520 <__gedf2+0x80>
100154d8:	1000081e 	bne	r2,zero,100154fc <__gedf2+0x5c>
100154dc:	2296b03a 	or	r11,r4,r10
100154e0:	5813003a 	cmpeq	r9,r11,zero
100154e4:	1800091e 	bne	r3,zero,1001550c <__gedf2+0x6c>
100154e8:	3218b03a 	or	r12,r6,r8
100154ec:	6000071e 	bne	r12,zero,1001550c <__gedf2+0x6c>
100154f0:	0005883a 	mov	r2,zero
100154f4:	5800101e 	bne	r11,zero,10015538 <__gedf2+0x98>
100154f8:	f800283a 	ret
100154fc:	18000c1e 	bne	r3,zero,10015530 <__gedf2+0x90>
10015500:	3212b03a 	or	r9,r6,r8
10015504:	48000c26 	beq	r9,zero,10015538 <__gedf2+0x98>
10015508:	0013883a 	mov	r9,zero
1001550c:	39c03fcc 	andi	r7,r7,255
10015510:	48000826 	beq	r9,zero,10015534 <__gedf2+0x94>
10015514:	38000926 	beq	r7,zero,1001553c <__gedf2+0x9c>
10015518:	00800044 	movi	r2,1
1001551c:	f800283a 	ret
10015520:	3212b03a 	or	r9,r6,r8
10015524:	483fec26 	beq	r9,zero,100154d8 <__alt_data_end+0xf80154d8>
10015528:	00bfff84 	movi	r2,-2
1001552c:	f800283a 	ret
10015530:	39c03fcc 	andi	r7,r7,255
10015534:	29c00626 	beq	r5,r7,10015550 <__gedf2+0xb0>
10015538:	283ff726 	beq	r5,zero,10015518 <__alt_data_end+0xf8015518>
1001553c:	00bfffc4 	movi	r2,-1
10015540:	f800283a 	ret
10015544:	2292b03a 	or	r9,r4,r10
10015548:	483fe126 	beq	r9,zero,100154d0 <__alt_data_end+0xf80154d0>
1001554c:	003ff606 	br	10015528 <__alt_data_end+0xf8015528>
10015550:	18bff916 	blt	r3,r2,10015538 <__alt_data_end+0xf8015538>
10015554:	10c00316 	blt	r2,r3,10015564 <__gedf2+0xc4>
10015558:	42bff736 	bltu	r8,r10,10015538 <__alt_data_end+0xf8015538>
1001555c:	52000326 	beq	r10,r8,1001556c <__gedf2+0xcc>
10015560:	5200042e 	bgeu	r10,r8,10015574 <__gedf2+0xd4>
10015564:	283fec1e 	bne	r5,zero,10015518 <__alt_data_end+0xf8015518>
10015568:	003ff406 	br	1001553c <__alt_data_end+0xf801553c>
1001556c:	313ff236 	bltu	r6,r4,10015538 <__alt_data_end+0xf8015538>
10015570:	21bffc36 	bltu	r4,r6,10015564 <__alt_data_end+0xf8015564>
10015574:	0005883a 	mov	r2,zero
10015578:	f800283a 	ret

1001557c <__fixdfsi>:
1001557c:	280cd53a 	srli	r6,r5,20
10015580:	00c00434 	movhi	r3,16
10015584:	18ffffc4 	addi	r3,r3,-1
10015588:	3181ffcc 	andi	r6,r6,2047
1001558c:	01c0ff84 	movi	r7,1022
10015590:	28c6703a 	and	r3,r5,r3
10015594:	280ad7fa 	srli	r5,r5,31
10015598:	3980120e 	bge	r7,r6,100155e4 <__fixdfsi+0x68>
1001559c:	00810744 	movi	r2,1053
100155a0:	11800c16 	blt	r2,r6,100155d4 <__fixdfsi+0x58>
100155a4:	00810cc4 	movi	r2,1075
100155a8:	1185c83a 	sub	r2,r2,r6
100155ac:	01c007c4 	movi	r7,31
100155b0:	18c00434 	orhi	r3,r3,16
100155b4:	38800d16 	blt	r7,r2,100155ec <__fixdfsi+0x70>
100155b8:	31befb44 	addi	r6,r6,-1043
100155bc:	2084d83a 	srl	r2,r4,r2
100155c0:	1986983a 	sll	r3,r3,r6
100155c4:	1884b03a 	or	r2,r3,r2
100155c8:	28000726 	beq	r5,zero,100155e8 <__fixdfsi+0x6c>
100155cc:	0085c83a 	sub	r2,zero,r2
100155d0:	f800283a 	ret
100155d4:	00a00034 	movhi	r2,32768
100155d8:	10bfffc4 	addi	r2,r2,-1
100155dc:	2885883a 	add	r2,r5,r2
100155e0:	f800283a 	ret
100155e4:	0005883a 	mov	r2,zero
100155e8:	f800283a 	ret
100155ec:	008104c4 	movi	r2,1043
100155f0:	1185c83a 	sub	r2,r2,r6
100155f4:	1884d83a 	srl	r2,r3,r2
100155f8:	003ff306 	br	100155c8 <__alt_data_end+0xf80155c8>

100155fc <__floatsidf>:
100155fc:	defffd04 	addi	sp,sp,-12
10015600:	dfc00215 	stw	ra,8(sp)
10015604:	dc400115 	stw	r17,4(sp)
10015608:	dc000015 	stw	r16,0(sp)
1001560c:	20002b26 	beq	r4,zero,100156bc <__floatsidf+0xc0>
10015610:	2023883a 	mov	r17,r4
10015614:	2020d7fa 	srli	r16,r4,31
10015618:	20002d16 	blt	r4,zero,100156d0 <__floatsidf+0xd4>
1001561c:	8809883a 	mov	r4,r17
10015620:	00065740 	call	10006574 <__clzsi2>
10015624:	01410784 	movi	r5,1054
10015628:	288bc83a 	sub	r5,r5,r2
1001562c:	01010cc4 	movi	r4,1075
10015630:	2149c83a 	sub	r4,r4,r5
10015634:	00c007c4 	movi	r3,31
10015638:	1900160e 	bge	r3,r4,10015694 <__floatsidf+0x98>
1001563c:	00c104c4 	movi	r3,1043
10015640:	1947c83a 	sub	r3,r3,r5
10015644:	88c6983a 	sll	r3,r17,r3
10015648:	00800434 	movhi	r2,16
1001564c:	10bfffc4 	addi	r2,r2,-1
10015650:	1886703a 	and	r3,r3,r2
10015654:	2941ffcc 	andi	r5,r5,2047
10015658:	800d883a 	mov	r6,r16
1001565c:	0005883a 	mov	r2,zero
10015660:	280a953a 	slli	r5,r5,20
10015664:	31803fcc 	andi	r6,r6,255
10015668:	01000434 	movhi	r4,16
1001566c:	300c97fa 	slli	r6,r6,31
10015670:	213fffc4 	addi	r4,r4,-1
10015674:	1906703a 	and	r3,r3,r4
10015678:	1946b03a 	or	r3,r3,r5
1001567c:	1986b03a 	or	r3,r3,r6
10015680:	dfc00217 	ldw	ra,8(sp)
10015684:	dc400117 	ldw	r17,4(sp)
10015688:	dc000017 	ldw	r16,0(sp)
1001568c:	dec00304 	addi	sp,sp,12
10015690:	f800283a 	ret
10015694:	00c002c4 	movi	r3,11
10015698:	1887c83a 	sub	r3,r3,r2
1001569c:	88c6d83a 	srl	r3,r17,r3
100156a0:	8904983a 	sll	r2,r17,r4
100156a4:	01000434 	movhi	r4,16
100156a8:	213fffc4 	addi	r4,r4,-1
100156ac:	2941ffcc 	andi	r5,r5,2047
100156b0:	1906703a 	and	r3,r3,r4
100156b4:	800d883a 	mov	r6,r16
100156b8:	003fe906 	br	10015660 <__alt_data_end+0xf8015660>
100156bc:	000d883a 	mov	r6,zero
100156c0:	000b883a 	mov	r5,zero
100156c4:	0007883a 	mov	r3,zero
100156c8:	0005883a 	mov	r2,zero
100156cc:	003fe406 	br	10015660 <__alt_data_end+0xf8015660>
100156d0:	0123c83a 	sub	r17,zero,r4
100156d4:	003fd106 	br	1001561c <__alt_data_end+0xf801561c>

100156d8 <__floatunsidf>:
100156d8:	defffe04 	addi	sp,sp,-8
100156dc:	dc000015 	stw	r16,0(sp)
100156e0:	dfc00115 	stw	ra,4(sp)
100156e4:	2021883a 	mov	r16,r4
100156e8:	20002226 	beq	r4,zero,10015774 <__floatunsidf+0x9c>
100156ec:	00065740 	call	10006574 <__clzsi2>
100156f0:	01010784 	movi	r4,1054
100156f4:	2089c83a 	sub	r4,r4,r2
100156f8:	01810cc4 	movi	r6,1075
100156fc:	310dc83a 	sub	r6,r6,r4
10015700:	00c007c4 	movi	r3,31
10015704:	1980120e 	bge	r3,r6,10015750 <__floatunsidf+0x78>
10015708:	00c104c4 	movi	r3,1043
1001570c:	1907c83a 	sub	r3,r3,r4
10015710:	80ca983a 	sll	r5,r16,r3
10015714:	00800434 	movhi	r2,16
10015718:	10bfffc4 	addi	r2,r2,-1
1001571c:	2101ffcc 	andi	r4,r4,2047
10015720:	0021883a 	mov	r16,zero
10015724:	288a703a 	and	r5,r5,r2
10015728:	2008953a 	slli	r4,r4,20
1001572c:	00c00434 	movhi	r3,16
10015730:	18ffffc4 	addi	r3,r3,-1
10015734:	28c6703a 	and	r3,r5,r3
10015738:	8005883a 	mov	r2,r16
1001573c:	1906b03a 	or	r3,r3,r4
10015740:	dfc00117 	ldw	ra,4(sp)
10015744:	dc000017 	ldw	r16,0(sp)
10015748:	dec00204 	addi	sp,sp,8
1001574c:	f800283a 	ret
10015750:	00c002c4 	movi	r3,11
10015754:	188bc83a 	sub	r5,r3,r2
10015758:	814ad83a 	srl	r5,r16,r5
1001575c:	00c00434 	movhi	r3,16
10015760:	18ffffc4 	addi	r3,r3,-1
10015764:	81a0983a 	sll	r16,r16,r6
10015768:	2101ffcc 	andi	r4,r4,2047
1001576c:	28ca703a 	and	r5,r5,r3
10015770:	003fed06 	br	10015728 <__alt_data_end+0xf8015728>
10015774:	0009883a 	mov	r4,zero
10015778:	000b883a 	mov	r5,zero
1001577c:	003fea06 	br	10015728 <__alt_data_end+0xf8015728>

10015780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015780:	defffe04 	addi	sp,sp,-8
10015784:	dfc00115 	stw	ra,4(sp)
10015788:	df000015 	stw	fp,0(sp)
1001578c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015790:	008403b4 	movhi	r2,4110
10015794:	10a4e004 	addi	r2,r2,-27776
10015798:	10800017 	ldw	r2,0(r2)
1001579c:	10000526 	beq	r2,zero,100157b4 <alt_get_errno+0x34>
100157a0:	008403b4 	movhi	r2,4110
100157a4:	10a4e004 	addi	r2,r2,-27776
100157a8:	10800017 	ldw	r2,0(r2)
100157ac:	103ee83a 	callr	r2
100157b0:	00000206 	br	100157bc <alt_get_errno+0x3c>
100157b4:	008403b4 	movhi	r2,4110
100157b8:	108b2104 	addi	r2,r2,11396
}
100157bc:	e037883a 	mov	sp,fp
100157c0:	dfc00117 	ldw	ra,4(sp)
100157c4:	df000017 	ldw	fp,0(sp)
100157c8:	dec00204 	addi	sp,sp,8
100157cc:	f800283a 	ret

100157d0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100157d0:	defffb04 	addi	sp,sp,-20
100157d4:	dfc00415 	stw	ra,16(sp)
100157d8:	df000315 	stw	fp,12(sp)
100157dc:	df000304 	addi	fp,sp,12
100157e0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
100157e4:	e0bfff17 	ldw	r2,-4(fp)
100157e8:	10000816 	blt	r2,zero,1001580c <close+0x3c>
100157ec:	01400304 	movi	r5,12
100157f0:	e13fff17 	ldw	r4,-4(fp)
100157f4:	00065d80 	call	100065d8 <__mulsi3>
100157f8:	1007883a 	mov	r3,r2
100157fc:	008403b4 	movhi	r2,4110
10015800:	10a04804 	addi	r2,r2,-32480
10015804:	1885883a 	add	r2,r3,r2
10015808:	00000106 	br	10015810 <close+0x40>
1001580c:	0005883a 	mov	r2,zero
10015810:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10015814:	e0bffd17 	ldw	r2,-12(fp)
10015818:	10001926 	beq	r2,zero,10015880 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1001581c:	e0bffd17 	ldw	r2,-12(fp)
10015820:	10800017 	ldw	r2,0(r2)
10015824:	10800417 	ldw	r2,16(r2)
10015828:	10000626 	beq	r2,zero,10015844 <close+0x74>
1001582c:	e0bffd17 	ldw	r2,-12(fp)
10015830:	10800017 	ldw	r2,0(r2)
10015834:	10800417 	ldw	r2,16(r2)
10015838:	e13ffd17 	ldw	r4,-12(fp)
1001583c:	103ee83a 	callr	r2
10015840:	00000106 	br	10015848 <close+0x78>
10015844:	0005883a 	mov	r2,zero
10015848:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1001584c:	e13fff17 	ldw	r4,-4(fp)
10015850:	001610c0 	call	1001610c <alt_release_fd>
    if (rval < 0)
10015854:	e0bffe17 	ldw	r2,-8(fp)
10015858:	1000070e 	bge	r2,zero,10015878 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1001585c:	00157800 	call	10015780 <alt_get_errno>
10015860:	1007883a 	mov	r3,r2
10015864:	e0bffe17 	ldw	r2,-8(fp)
10015868:	0085c83a 	sub	r2,zero,r2
1001586c:	18800015 	stw	r2,0(r3)
      return -1;
10015870:	00bfffc4 	movi	r2,-1
10015874:	00000706 	br	10015894 <close+0xc4>
    }
    return 0;
10015878:	0005883a 	mov	r2,zero
1001587c:	00000506 	br	10015894 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015880:	00157800 	call	10015780 <alt_get_errno>
10015884:	1007883a 	mov	r3,r2
10015888:	00801444 	movi	r2,81
1001588c:	18800015 	stw	r2,0(r3)
    return -1;
10015890:	00bfffc4 	movi	r2,-1
  }
}
10015894:	e037883a 	mov	sp,fp
10015898:	dfc00117 	ldw	ra,4(sp)
1001589c:	df000017 	ldw	fp,0(sp)
100158a0:	dec00204 	addi	sp,sp,8
100158a4:	f800283a 	ret

100158a8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100158a8:	defffc04 	addi	sp,sp,-16
100158ac:	df000315 	stw	fp,12(sp)
100158b0:	df000304 	addi	fp,sp,12
100158b4:	e13ffd15 	stw	r4,-12(fp)
100158b8:	e17ffe15 	stw	r5,-8(fp)
100158bc:	e1bfff15 	stw	r6,-4(fp)
  return len;
100158c0:	e0bfff17 	ldw	r2,-4(fp)
}
100158c4:	e037883a 	mov	sp,fp
100158c8:	df000017 	ldw	fp,0(sp)
100158cc:	dec00104 	addi	sp,sp,4
100158d0:	f800283a 	ret

100158d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100158d4:	defffe04 	addi	sp,sp,-8
100158d8:	dfc00115 	stw	ra,4(sp)
100158dc:	df000015 	stw	fp,0(sp)
100158e0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100158e4:	008403b4 	movhi	r2,4110
100158e8:	10a4e004 	addi	r2,r2,-27776
100158ec:	10800017 	ldw	r2,0(r2)
100158f0:	10000526 	beq	r2,zero,10015908 <alt_get_errno+0x34>
100158f4:	008403b4 	movhi	r2,4110
100158f8:	10a4e004 	addi	r2,r2,-27776
100158fc:	10800017 	ldw	r2,0(r2)
10015900:	103ee83a 	callr	r2
10015904:	00000206 	br	10015910 <alt_get_errno+0x3c>
10015908:	008403b4 	movhi	r2,4110
1001590c:	108b2104 	addi	r2,r2,11396
}
10015910:	e037883a 	mov	sp,fp
10015914:	dfc00117 	ldw	ra,4(sp)
10015918:	df000017 	ldw	fp,0(sp)
1001591c:	dec00204 	addi	sp,sp,8
10015920:	f800283a 	ret

10015924 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
10015924:	defffb04 	addi	sp,sp,-20
10015928:	dfc00415 	stw	ra,16(sp)
1001592c:	df000315 	stw	fp,12(sp)
10015930:	df000304 	addi	fp,sp,12
10015934:	e13ffe15 	stw	r4,-8(fp)
10015938:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1001593c:	e0bffe17 	ldw	r2,-8(fp)
10015940:	10000816 	blt	r2,zero,10015964 <fstat+0x40>
10015944:	01400304 	movi	r5,12
10015948:	e13ffe17 	ldw	r4,-8(fp)
1001594c:	00065d80 	call	100065d8 <__mulsi3>
10015950:	1007883a 	mov	r3,r2
10015954:	008403b4 	movhi	r2,4110
10015958:	10a04804 	addi	r2,r2,-32480
1001595c:	1885883a 	add	r2,r3,r2
10015960:	00000106 	br	10015968 <fstat+0x44>
10015964:	0005883a 	mov	r2,zero
10015968:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1001596c:	e0bffd17 	ldw	r2,-12(fp)
10015970:	10001026 	beq	r2,zero,100159b4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
10015974:	e0bffd17 	ldw	r2,-12(fp)
10015978:	10800017 	ldw	r2,0(r2)
1001597c:	10800817 	ldw	r2,32(r2)
10015980:	10000726 	beq	r2,zero,100159a0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
10015984:	e0bffd17 	ldw	r2,-12(fp)
10015988:	10800017 	ldw	r2,0(r2)
1001598c:	10800817 	ldw	r2,32(r2)
10015990:	e17fff17 	ldw	r5,-4(fp)
10015994:	e13ffd17 	ldw	r4,-12(fp)
10015998:	103ee83a 	callr	r2
1001599c:	00000a06 	br	100159c8 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
100159a0:	e0bfff17 	ldw	r2,-4(fp)
100159a4:	00c80004 	movi	r3,8192
100159a8:	10c00115 	stw	r3,4(r2)
      return 0;
100159ac:	0005883a 	mov	r2,zero
100159b0:	00000506 	br	100159c8 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
100159b4:	00158d40 	call	100158d4 <alt_get_errno>
100159b8:	1007883a 	mov	r3,r2
100159bc:	00801444 	movi	r2,81
100159c0:	18800015 	stw	r2,0(r3)
    return -1;
100159c4:	00bfffc4 	movi	r2,-1
  }
}
100159c8:	e037883a 	mov	sp,fp
100159cc:	dfc00117 	ldw	ra,4(sp)
100159d0:	df000017 	ldw	fp,0(sp)
100159d4:	dec00204 	addi	sp,sp,8
100159d8:	f800283a 	ret

100159dc <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
100159dc:	defff404 	addi	sp,sp,-48
100159e0:	dfc00b15 	stw	ra,44(sp)
100159e4:	df000a15 	stw	fp,40(sp)
100159e8:	dd000915 	stw	r20,36(sp)
100159ec:	dcc00815 	stw	r19,32(sp)
100159f0:	dc800715 	stw	r18,28(sp)
100159f4:	dc400615 	stw	r17,24(sp)
100159f8:	dc000515 	stw	r16,20(sp)
100159fc:	df000a04 	addi	fp,sp,40
10015a00:	e13ff915 	stw	r4,-28(fp)
10015a04:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
10015a08:	e0bffa17 	ldw	r2,-24(fp)
10015a0c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10015a10:	008403b4 	movhi	r2,4110
10015a14:	108b2e04 	addi	r2,r2,11448
10015a18:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
10015a1c:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10015a20:	008403b4 	movhi	r2,4110
10015a24:	108b2d04 	addi	r2,r2,11444
10015a28:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
10015a2c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
10015a30:	e0bff817 	ldw	r2,-32(fp)
10015a34:	10005f26 	beq	r2,zero,10015bb4 <gettimeofday+0x1d8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
10015a38:	d0865e17 	ldw	r2,6520(gp)
10015a3c:	1029883a 	mov	r20,r2
10015a40:	e17ff817 	ldw	r5,-32(fp)
10015a44:	e13ff717 	ldw	r4,-36(fp)
10015a48:	00026900 	call	10002690 <__udivsi3>
10015a4c:	a085883a 	add	r2,r20,r2
10015a50:	1007883a 	mov	r3,r2
10015a54:	e0bff917 	ldw	r2,-28(fp)
10015a58:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
10015a5c:	d0865f17 	ldw	r2,6524(gp)
10015a60:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
10015a64:	e0bff717 	ldw	r2,-36(fp)
10015a68:	1021883a 	mov	r16,r2
10015a6c:	0023883a 	mov	r17,zero
10015a70:	e17ff817 	ldw	r5,-32(fp)
10015a74:	010003f4 	movhi	r4,15
10015a78:	21109004 	addi	r4,r4,16960
10015a7c:	00026900 	call	10002690 <__udivsi3>
10015a80:	1025883a 	mov	r18,r2
10015a84:	0027883a 	mov	r19,zero
10015a88:	900d883a 	mov	r6,r18
10015a8c:	980f883a 	mov	r7,r19
10015a90:	8009883a 	mov	r4,r16
10015a94:	880b883a 	mov	r5,r17
10015a98:	00188200 	call	10018820 <__muldi3>
10015a9c:	1009883a 	mov	r4,r2
10015aa0:	180b883a 	mov	r5,r3
10015aa4:	2005883a 	mov	r2,r4
10015aa8:	2807883a 	mov	r3,r5
10015aac:	018003f4 	movhi	r6,15
10015ab0:	31909004 	addi	r6,r6,16960
10015ab4:	000f883a 	mov	r7,zero
10015ab8:	1009883a 	mov	r4,r2
10015abc:	180b883a 	mov	r5,r3
10015ac0:	0014e540 	call	10014e54 <__umoddi3>
10015ac4:	1009883a 	mov	r4,r2
10015ac8:	180b883a 	mov	r5,r3
10015acc:	2005883a 	mov	r2,r4
10015ad0:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
10015ad4:	a085883a 	add	r2,r20,r2
10015ad8:	1007883a 	mov	r3,r2
10015adc:	e0bff917 	ldw	r2,-28(fp)
10015ae0:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10015ae4:	00001406 	br	10015b38 <gettimeofday+0x15c>
      if (ptimeval->tv_sec <= 0)
10015ae8:	e0bff917 	ldw	r2,-28(fp)
10015aec:	10800017 	ldw	r2,0(r2)
10015af0:	00800516 	blt	zero,r2,10015b08 <gettimeofday+0x12c>
      {
          ptimeval->tv_sec = 0;
10015af4:	e0bff917 	ldw	r2,-28(fp)
10015af8:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
10015afc:	e0bff917 	ldw	r2,-28(fp)
10015b00:	10000115 	stw	zero,4(r2)
          break;
10015b04:	00000f06 	br	10015b44 <gettimeofday+0x168>
      }
      else
      {
          ptimeval->tv_sec--;
10015b08:	e0bff917 	ldw	r2,-28(fp)
10015b0c:	10800017 	ldw	r2,0(r2)
10015b10:	10ffffc4 	addi	r3,r2,-1
10015b14:	e0bff917 	ldw	r2,-28(fp)
10015b18:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
10015b1c:	e0bff917 	ldw	r2,-28(fp)
10015b20:	10c00117 	ldw	r3,4(r2)
10015b24:	008003f4 	movhi	r2,15
10015b28:	10909004 	addi	r2,r2,16960
10015b2c:	1887883a 	add	r3,r3,r2
10015b30:	e0bff917 	ldw	r2,-28(fp)
10015b34:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
10015b38:	e0bff917 	ldw	r2,-28(fp)
10015b3c:	10800117 	ldw	r2,4(r2)
10015b40:	103fe916 	blt	r2,zero,10015ae8 <__alt_data_end+0xf8015ae8>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10015b44:	00000c06 	br	10015b78 <gettimeofday+0x19c>
      ptimeval->tv_sec++;
10015b48:	e0bff917 	ldw	r2,-28(fp)
10015b4c:	10800017 	ldw	r2,0(r2)
10015b50:	10c00044 	addi	r3,r2,1
10015b54:	e0bff917 	ldw	r2,-28(fp)
10015b58:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
10015b5c:	e0bff917 	ldw	r2,-28(fp)
10015b60:	10c00117 	ldw	r3,4(r2)
10015b64:	00bffc74 	movhi	r2,65521
10015b68:	10af7004 	addi	r2,r2,-16960
10015b6c:	1887883a 	add	r3,r3,r2
10015b70:	e0bff917 	ldw	r2,-28(fp)
10015b74:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
10015b78:	e0bff917 	ldw	r2,-28(fp)
10015b7c:	10c00117 	ldw	r3,4(r2)
10015b80:	008003f4 	movhi	r2,15
10015b84:	10908fc4 	addi	r2,r2,16959
10015b88:	10ffef16 	blt	r2,r3,10015b48 <__alt_data_end+0xf8015b48>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
10015b8c:	e0bff617 	ldw	r2,-40(fp)
10015b90:	10000626 	beq	r2,zero,10015bac <gettimeofday+0x1d0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
10015b94:	d0c65c17 	ldw	r3,6512(gp)
10015b98:	e0bff617 	ldw	r2,-40(fp)
10015b9c:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
10015ba0:	d0c65d17 	ldw	r3,6516(gp)
10015ba4:	e0bff617 	ldw	r2,-40(fp)
10015ba8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
10015bac:	0005883a 	mov	r2,zero
10015bb0:	00000106 	br	10015bb8 <gettimeofday+0x1dc>
  }

  return -ENOTSUP;
10015bb4:	00bfde84 	movi	r2,-134
}
10015bb8:	e6fffb04 	addi	sp,fp,-20
10015bbc:	dfc00617 	ldw	ra,24(sp)
10015bc0:	df000517 	ldw	fp,20(sp)
10015bc4:	dd000417 	ldw	r20,16(sp)
10015bc8:	dcc00317 	ldw	r19,12(sp)
10015bcc:	dc800217 	ldw	r18,8(sp)
10015bd0:	dc400117 	ldw	r17,4(sp)
10015bd4:	dc000017 	ldw	r16,0(sp)
10015bd8:	dec00704 	addi	sp,sp,28
10015bdc:	f800283a 	ret

10015be0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015be0:	defffe04 	addi	sp,sp,-8
10015be4:	dfc00115 	stw	ra,4(sp)
10015be8:	df000015 	stw	fp,0(sp)
10015bec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015bf0:	008403b4 	movhi	r2,4110
10015bf4:	10a4e004 	addi	r2,r2,-27776
10015bf8:	10800017 	ldw	r2,0(r2)
10015bfc:	10000526 	beq	r2,zero,10015c14 <alt_get_errno+0x34>
10015c00:	008403b4 	movhi	r2,4110
10015c04:	10a4e004 	addi	r2,r2,-27776
10015c08:	10800017 	ldw	r2,0(r2)
10015c0c:	103ee83a 	callr	r2
10015c10:	00000206 	br	10015c1c <alt_get_errno+0x3c>
10015c14:	008403b4 	movhi	r2,4110
10015c18:	108b2104 	addi	r2,r2,11396
}
10015c1c:	e037883a 	mov	sp,fp
10015c20:	dfc00117 	ldw	ra,4(sp)
10015c24:	df000017 	ldw	fp,0(sp)
10015c28:	dec00204 	addi	sp,sp,8
10015c2c:	f800283a 	ret

10015c30 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
10015c30:	deffed04 	addi	sp,sp,-76
10015c34:	dfc01215 	stw	ra,72(sp)
10015c38:	df001115 	stw	fp,68(sp)
10015c3c:	df001104 	addi	fp,sp,68
10015c40:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015c44:	e0bfff17 	ldw	r2,-4(fp)
10015c48:	10000816 	blt	r2,zero,10015c6c <isatty+0x3c>
10015c4c:	01400304 	movi	r5,12
10015c50:	e13fff17 	ldw	r4,-4(fp)
10015c54:	00065d80 	call	100065d8 <__mulsi3>
10015c58:	1007883a 	mov	r3,r2
10015c5c:	008403b4 	movhi	r2,4110
10015c60:	10a04804 	addi	r2,r2,-32480
10015c64:	1885883a 	add	r2,r3,r2
10015c68:	00000106 	br	10015c70 <isatty+0x40>
10015c6c:	0005883a 	mov	r2,zero
10015c70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
10015c74:	e0bfef17 	ldw	r2,-68(fp)
10015c78:	10000e26 	beq	r2,zero,10015cb4 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
10015c7c:	e0bfef17 	ldw	r2,-68(fp)
10015c80:	10800017 	ldw	r2,0(r2)
10015c84:	10800817 	ldw	r2,32(r2)
10015c88:	1000021e 	bne	r2,zero,10015c94 <isatty+0x64>
    {
      return 1;
10015c8c:	00800044 	movi	r2,1
10015c90:	00000d06 	br	10015cc8 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
10015c94:	e0bff004 	addi	r2,fp,-64
10015c98:	100b883a 	mov	r5,r2
10015c9c:	e13fff17 	ldw	r4,-4(fp)
10015ca0:	00159240 	call	10015924 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
10015ca4:	e0bff117 	ldw	r2,-60(fp)
10015ca8:	10880020 	cmpeqi	r2,r2,8192
10015cac:	10803fcc 	andi	r2,r2,255
10015cb0:	00000506 	br	10015cc8 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
10015cb4:	0015be00 	call	10015be0 <alt_get_errno>
10015cb8:	1007883a 	mov	r3,r2
10015cbc:	00801444 	movi	r2,81
10015cc0:	18800015 	stw	r2,0(r3)
    return 0;
10015cc4:	0005883a 	mov	r2,zero
  }
}
10015cc8:	e037883a 	mov	sp,fp
10015ccc:	dfc00117 	ldw	ra,4(sp)
10015cd0:	df000017 	ldw	fp,0(sp)
10015cd4:	dec00204 	addi	sp,sp,8
10015cd8:	f800283a 	ret

10015cdc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10015cdc:	defffc04 	addi	sp,sp,-16
10015ce0:	df000315 	stw	fp,12(sp)
10015ce4:	df000304 	addi	fp,sp,12
10015ce8:	e13ffd15 	stw	r4,-12(fp)
10015cec:	e17ffe15 	stw	r5,-8(fp)
10015cf0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10015cf4:	e0fffe17 	ldw	r3,-8(fp)
10015cf8:	e0bffd17 	ldw	r2,-12(fp)
10015cfc:	18800c26 	beq	r3,r2,10015d30 <alt_load_section+0x54>
  {
    while( to != end )
10015d00:	00000806 	br	10015d24 <alt_load_section+0x48>
    {
      *to++ = *from++;
10015d04:	e0bffe17 	ldw	r2,-8(fp)
10015d08:	10c00104 	addi	r3,r2,4
10015d0c:	e0fffe15 	stw	r3,-8(fp)
10015d10:	e0fffd17 	ldw	r3,-12(fp)
10015d14:	19000104 	addi	r4,r3,4
10015d18:	e13ffd15 	stw	r4,-12(fp)
10015d1c:	18c00017 	ldw	r3,0(r3)
10015d20:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10015d24:	e0fffe17 	ldw	r3,-8(fp)
10015d28:	e0bfff17 	ldw	r2,-4(fp)
10015d2c:	18bff51e 	bne	r3,r2,10015d04 <__alt_data_end+0xf8015d04>
    {
      *to++ = *from++;
    }
  }
}
10015d30:	0001883a 	nop
10015d34:	e037883a 	mov	sp,fp
10015d38:	df000017 	ldw	fp,0(sp)
10015d3c:	dec00104 	addi	sp,sp,4
10015d40:	f800283a 	ret

10015d44 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10015d44:	defffe04 	addi	sp,sp,-8
10015d48:	dfc00115 	stw	ra,4(sp)
10015d4c:	df000015 	stw	fp,0(sp)
10015d50:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10015d54:	018403b4 	movhi	r6,4110
10015d58:	31a4f704 	addi	r6,r6,-27684
10015d5c:	01440374 	movhi	r5,4109
10015d60:	297ed504 	addi	r5,r5,-1196
10015d64:	010403b4 	movhi	r4,4110
10015d68:	2124f704 	addi	r4,r4,-27684
10015d6c:	0015cdc0 	call	10015cdc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10015d70:	01840034 	movhi	r6,4096
10015d74:	31808c04 	addi	r6,r6,560
10015d78:	01440034 	movhi	r5,4096
10015d7c:	29400804 	addi	r5,r5,32
10015d80:	01040034 	movhi	r4,4096
10015d84:	21000804 	addi	r4,r4,32
10015d88:	0015cdc0 	call	10015cdc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10015d8c:	01840374 	movhi	r6,4109
10015d90:	31bed504 	addi	r6,r6,-1196
10015d94:	014400b4 	movhi	r5,4098
10015d98:	29625804 	addi	r5,r5,-30368
10015d9c:	010400b4 	movhi	r4,4098
10015da0:	21225804 	addi	r4,r4,-30368
10015da4:	0015cdc0 	call	10015cdc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10015da8:	00176380 	call	10017638 <alt_dcache_flush_all>
  alt_icache_flush_all();
10015dac:	00178900 	call	10017890 <alt_icache_flush_all>
}
10015db0:	0001883a 	nop
10015db4:	e037883a 	mov	sp,fp
10015db8:	dfc00117 	ldw	ra,4(sp)
10015dbc:	df000017 	ldw	fp,0(sp)
10015dc0:	dec00204 	addi	sp,sp,8
10015dc4:	f800283a 	ret

10015dc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015dc8:	defffe04 	addi	sp,sp,-8
10015dcc:	dfc00115 	stw	ra,4(sp)
10015dd0:	df000015 	stw	fp,0(sp)
10015dd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015dd8:	008403b4 	movhi	r2,4110
10015ddc:	10a4e004 	addi	r2,r2,-27776
10015de0:	10800017 	ldw	r2,0(r2)
10015de4:	10000526 	beq	r2,zero,10015dfc <alt_get_errno+0x34>
10015de8:	008403b4 	movhi	r2,4110
10015dec:	10a4e004 	addi	r2,r2,-27776
10015df0:	10800017 	ldw	r2,0(r2)
10015df4:	103ee83a 	callr	r2
10015df8:	00000206 	br	10015e04 <alt_get_errno+0x3c>
10015dfc:	008403b4 	movhi	r2,4110
10015e00:	108b2104 	addi	r2,r2,11396
}
10015e04:	e037883a 	mov	sp,fp
10015e08:	dfc00117 	ldw	ra,4(sp)
10015e0c:	df000017 	ldw	fp,0(sp)
10015e10:	dec00204 	addi	sp,sp,8
10015e14:	f800283a 	ret

10015e18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
10015e18:	defff904 	addi	sp,sp,-28
10015e1c:	dfc00615 	stw	ra,24(sp)
10015e20:	df000515 	stw	fp,20(sp)
10015e24:	df000504 	addi	fp,sp,20
10015e28:	e13ffd15 	stw	r4,-12(fp)
10015e2c:	e17ffe15 	stw	r5,-8(fp)
10015e30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
10015e34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10015e38:	e0bffd17 	ldw	r2,-12(fp)
10015e3c:	10000816 	blt	r2,zero,10015e60 <lseek+0x48>
10015e40:	01400304 	movi	r5,12
10015e44:	e13ffd17 	ldw	r4,-12(fp)
10015e48:	00065d80 	call	100065d8 <__mulsi3>
10015e4c:	1007883a 	mov	r3,r2
10015e50:	008403b4 	movhi	r2,4110
10015e54:	10a04804 	addi	r2,r2,-32480
10015e58:	1885883a 	add	r2,r3,r2
10015e5c:	00000106 	br	10015e64 <lseek+0x4c>
10015e60:	0005883a 	mov	r2,zero
10015e64:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
10015e68:	e0bffc17 	ldw	r2,-16(fp)
10015e6c:	10001026 	beq	r2,zero,10015eb0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
10015e70:	e0bffc17 	ldw	r2,-16(fp)
10015e74:	10800017 	ldw	r2,0(r2)
10015e78:	10800717 	ldw	r2,28(r2)
10015e7c:	10000926 	beq	r2,zero,10015ea4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
10015e80:	e0bffc17 	ldw	r2,-16(fp)
10015e84:	10800017 	ldw	r2,0(r2)
10015e88:	10800717 	ldw	r2,28(r2)
10015e8c:	e1bfff17 	ldw	r6,-4(fp)
10015e90:	e17ffe17 	ldw	r5,-8(fp)
10015e94:	e13ffc17 	ldw	r4,-16(fp)
10015e98:	103ee83a 	callr	r2
10015e9c:	e0bffb15 	stw	r2,-20(fp)
10015ea0:	00000506 	br	10015eb8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
10015ea4:	00bfde84 	movi	r2,-134
10015ea8:	e0bffb15 	stw	r2,-20(fp)
10015eac:	00000206 	br	10015eb8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
10015eb0:	00bfebc4 	movi	r2,-81
10015eb4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
10015eb8:	e0bffb17 	ldw	r2,-20(fp)
10015ebc:	1000070e 	bge	r2,zero,10015edc <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
10015ec0:	0015dc80 	call	10015dc8 <alt_get_errno>
10015ec4:	1007883a 	mov	r3,r2
10015ec8:	e0bffb17 	ldw	r2,-20(fp)
10015ecc:	0085c83a 	sub	r2,zero,r2
10015ed0:	18800015 	stw	r2,0(r3)
    rc = -1;
10015ed4:	00bfffc4 	movi	r2,-1
10015ed8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
10015edc:	e0bffb17 	ldw	r2,-20(fp)
}
10015ee0:	e037883a 	mov	sp,fp
10015ee4:	dfc00117 	ldw	ra,4(sp)
10015ee8:	df000017 	ldw	fp,0(sp)
10015eec:	dec00204 	addi	sp,sp,8
10015ef0:	f800283a 	ret

10015ef4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10015ef4:	defffd04 	addi	sp,sp,-12
10015ef8:	dfc00215 	stw	ra,8(sp)
10015efc:	df000115 	stw	fp,4(sp)
10015f00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10015f04:	0009883a 	mov	r4,zero
10015f08:	001656c0 	call	1001656c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10015f0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10015f10:	00165a40 	call	100165a4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10015f14:	01840374 	movhi	r6,4109
10015f18:	31bec804 	addi	r6,r6,-1248
10015f1c:	01440374 	movhi	r5,4109
10015f20:	297ec804 	addi	r5,r5,-1248
10015f24:	01040374 	movhi	r4,4109
10015f28:	213ec804 	addi	r4,r4,-1248
10015f2c:	0017c640 	call	10017c64 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10015f30:	001774c0 	call	1001774c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10015f34:	01040074 	movhi	r4,4097
10015f38:	211deb04 	addi	r4,r4,30636
10015f3c:	00182bc0 	call	100182bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10015f40:	d0866017 	ldw	r2,6528(gp)
10015f44:	d0c66117 	ldw	r3,6532(gp)
10015f48:	d1066217 	ldw	r4,6536(gp)
10015f4c:	200d883a 	mov	r6,r4
10015f50:	180b883a 	mov	r5,r3
10015f54:	1009883a 	mov	r4,r2
10015f58:	00009800 	call	10000980 <main>
10015f5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10015f60:	01000044 	movi	r4,1
10015f64:	00157d00 	call	100157d0 <close>
  exit (result);
10015f68:	e13fff17 	ldw	r4,-4(fp)
10015f6c:	00182f80 	call	100182f8 <exit>

10015f70 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
10015f70:	defffe04 	addi	sp,sp,-8
10015f74:	df000115 	stw	fp,4(sp)
10015f78:	df000104 	addi	fp,sp,4
10015f7c:	e13fff15 	stw	r4,-4(fp)
}
10015f80:	0001883a 	nop
10015f84:	e037883a 	mov	sp,fp
10015f88:	df000017 	ldw	fp,0(sp)
10015f8c:	dec00104 	addi	sp,sp,4
10015f90:	f800283a 	ret

10015f94 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
10015f94:	defffe04 	addi	sp,sp,-8
10015f98:	df000115 	stw	fp,4(sp)
10015f9c:	df000104 	addi	fp,sp,4
10015fa0:	e13fff15 	stw	r4,-4(fp)
}
10015fa4:	0001883a 	nop
10015fa8:	e037883a 	mov	sp,fp
10015fac:	df000017 	ldw	fp,0(sp)
10015fb0:	dec00104 	addi	sp,sp,4
10015fb4:	f800283a 	ret

10015fb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10015fb8:	defffe04 	addi	sp,sp,-8
10015fbc:	dfc00115 	stw	ra,4(sp)
10015fc0:	df000015 	stw	fp,0(sp)
10015fc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10015fc8:	008403b4 	movhi	r2,4110
10015fcc:	10a4e004 	addi	r2,r2,-27776
10015fd0:	10800017 	ldw	r2,0(r2)
10015fd4:	10000526 	beq	r2,zero,10015fec <alt_get_errno+0x34>
10015fd8:	008403b4 	movhi	r2,4110
10015fdc:	10a4e004 	addi	r2,r2,-27776
10015fe0:	10800017 	ldw	r2,0(r2)
10015fe4:	103ee83a 	callr	r2
10015fe8:	00000206 	br	10015ff4 <alt_get_errno+0x3c>
10015fec:	008403b4 	movhi	r2,4110
10015ff0:	108b2104 	addi	r2,r2,11396
}
10015ff4:	e037883a 	mov	sp,fp
10015ff8:	dfc00117 	ldw	ra,4(sp)
10015ffc:	df000017 	ldw	fp,0(sp)
10016000:	dec00204 	addi	sp,sp,8
10016004:	f800283a 	ret

10016008 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
10016008:	defff904 	addi	sp,sp,-28
1001600c:	dfc00615 	stw	ra,24(sp)
10016010:	df000515 	stw	fp,20(sp)
10016014:	df000504 	addi	fp,sp,20
10016018:	e13ffd15 	stw	r4,-12(fp)
1001601c:	e17ffe15 	stw	r5,-8(fp)
10016020:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016024:	e0bffd17 	ldw	r2,-12(fp)
10016028:	10000816 	blt	r2,zero,1001604c <read+0x44>
1001602c:	01400304 	movi	r5,12
10016030:	e13ffd17 	ldw	r4,-12(fp)
10016034:	00065d80 	call	100065d8 <__mulsi3>
10016038:	1007883a 	mov	r3,r2
1001603c:	008403b4 	movhi	r2,4110
10016040:	10a04804 	addi	r2,r2,-32480
10016044:	1885883a 	add	r2,r3,r2
10016048:	00000106 	br	10016050 <read+0x48>
1001604c:	0005883a 	mov	r2,zero
10016050:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10016054:	e0bffb17 	ldw	r2,-20(fp)
10016058:	10002226 	beq	r2,zero,100160e4 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001605c:	e0bffb17 	ldw	r2,-20(fp)
10016060:	10800217 	ldw	r2,8(r2)
10016064:	108000cc 	andi	r2,r2,3
10016068:	10800060 	cmpeqi	r2,r2,1
1001606c:	1000181e 	bne	r2,zero,100160d0 <read+0xc8>
        (fd->dev->read))
10016070:	e0bffb17 	ldw	r2,-20(fp)
10016074:	10800017 	ldw	r2,0(r2)
10016078:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1001607c:	10001426 	beq	r2,zero,100160d0 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
10016080:	e0bffb17 	ldw	r2,-20(fp)
10016084:	10800017 	ldw	r2,0(r2)
10016088:	10800517 	ldw	r2,20(r2)
1001608c:	e0ffff17 	ldw	r3,-4(fp)
10016090:	180d883a 	mov	r6,r3
10016094:	e17ffe17 	ldw	r5,-8(fp)
10016098:	e13ffb17 	ldw	r4,-20(fp)
1001609c:	103ee83a 	callr	r2
100160a0:	e0bffc15 	stw	r2,-16(fp)
100160a4:	e0bffc17 	ldw	r2,-16(fp)
100160a8:	1000070e 	bge	r2,zero,100160c8 <read+0xc0>
        {
          ALT_ERRNO = -rval;
100160ac:	0015fb80 	call	10015fb8 <alt_get_errno>
100160b0:	1007883a 	mov	r3,r2
100160b4:	e0bffc17 	ldw	r2,-16(fp)
100160b8:	0085c83a 	sub	r2,zero,r2
100160bc:	18800015 	stw	r2,0(r3)
          return -1;
100160c0:	00bfffc4 	movi	r2,-1
100160c4:	00000c06 	br	100160f8 <read+0xf0>
        }
        return rval;
100160c8:	e0bffc17 	ldw	r2,-16(fp)
100160cc:	00000a06 	br	100160f8 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
100160d0:	0015fb80 	call	10015fb8 <alt_get_errno>
100160d4:	1007883a 	mov	r3,r2
100160d8:	00800344 	movi	r2,13
100160dc:	18800015 	stw	r2,0(r3)
100160e0:	00000406 	br	100160f4 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
100160e4:	0015fb80 	call	10015fb8 <alt_get_errno>
100160e8:	1007883a 	mov	r3,r2
100160ec:	00801444 	movi	r2,81
100160f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
100160f4:	00bfffc4 	movi	r2,-1
}
100160f8:	e037883a 	mov	sp,fp
100160fc:	dfc00117 	ldw	ra,4(sp)
10016100:	df000017 	ldw	fp,0(sp)
10016104:	dec00204 	addi	sp,sp,8
10016108:	f800283a 	ret

1001610c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1001610c:	defffc04 	addi	sp,sp,-16
10016110:	dfc00315 	stw	ra,12(sp)
10016114:	df000215 	stw	fp,8(sp)
10016118:	dc000115 	stw	r16,4(sp)
1001611c:	df000204 	addi	fp,sp,8
10016120:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10016124:	e0bffe17 	ldw	r2,-8(fp)
10016128:	108000d0 	cmplti	r2,r2,3
1001612c:	1000111e 	bne	r2,zero,10016174 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10016130:	040403b4 	movhi	r16,4110
10016134:	84204804 	addi	r16,r16,-32480
10016138:	e0bffe17 	ldw	r2,-8(fp)
1001613c:	01400304 	movi	r5,12
10016140:	1009883a 	mov	r4,r2
10016144:	00065d80 	call	100065d8 <__mulsi3>
10016148:	8085883a 	add	r2,r16,r2
1001614c:	10800204 	addi	r2,r2,8
10016150:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10016154:	040403b4 	movhi	r16,4110
10016158:	84204804 	addi	r16,r16,-32480
1001615c:	e0bffe17 	ldw	r2,-8(fp)
10016160:	01400304 	movi	r5,12
10016164:	1009883a 	mov	r4,r2
10016168:	00065d80 	call	100065d8 <__mulsi3>
1001616c:	8085883a 	add	r2,r16,r2
10016170:	10000015 	stw	zero,0(r2)
  }
}
10016174:	0001883a 	nop
10016178:	e6ffff04 	addi	sp,fp,-4
1001617c:	dfc00217 	ldw	ra,8(sp)
10016180:	df000117 	ldw	fp,4(sp)
10016184:	dc000017 	ldw	r16,0(sp)
10016188:	dec00304 	addi	sp,sp,12
1001618c:	f800283a 	ret

10016190 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
10016190:	defff904 	addi	sp,sp,-28
10016194:	df000615 	stw	fp,24(sp)
10016198:	df000604 	addi	fp,sp,24
1001619c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100161a0:	0005303a 	rdctl	r2,status
100161a4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100161a8:	e0fffe17 	ldw	r3,-8(fp)
100161ac:	00bfff84 	movi	r2,-2
100161b0:	1884703a 	and	r2,r3,r2
100161b4:	1001703a 	wrctl	status,r2
  
  return context;
100161b8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
100161bc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
100161c0:	d0a01717 	ldw	r2,-32676(gp)
100161c4:	10c000c4 	addi	r3,r2,3
100161c8:	00bfff04 	movi	r2,-4
100161cc:	1884703a 	and	r2,r3,r2
100161d0:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
100161d4:	d0e01717 	ldw	r3,-32676(gp)
100161d8:	e0bfff17 	ldw	r2,-4(fp)
100161dc:	1887883a 	add	r3,r3,r2
100161e0:	00860034 	movhi	r2,6144
100161e4:	10800004 	addi	r2,r2,0
100161e8:	10c0062e 	bgeu	r2,r3,10016204 <sbrk+0x74>
100161ec:	e0bffb17 	ldw	r2,-20(fp)
100161f0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100161f4:	e0bffa17 	ldw	r2,-24(fp)
100161f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
100161fc:	00bfffc4 	movi	r2,-1
10016200:	00000b06 	br	10016230 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
10016204:	d0a01717 	ldw	r2,-32676(gp)
10016208:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
1001620c:	d0e01717 	ldw	r3,-32676(gp)
10016210:	e0bfff17 	ldw	r2,-4(fp)
10016214:	1885883a 	add	r2,r3,r2
10016218:	d0a01715 	stw	r2,-32676(gp)
1001621c:	e0bffb17 	ldw	r2,-20(fp)
10016220:	e0bffc15 	stw	r2,-16(fp)
10016224:	e0bffc17 	ldw	r2,-16(fp)
10016228:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1001622c:	e0bffd17 	ldw	r2,-12(fp)
} 
10016230:	e037883a 	mov	sp,fp
10016234:	df000017 	ldw	fp,0(sp)
10016238:	dec00104 	addi	sp,sp,4
1001623c:	f800283a 	ret

10016240 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10016240:	defffa04 	addi	sp,sp,-24
10016244:	df000515 	stw	fp,20(sp)
10016248:	df000504 	addi	fp,sp,20
1001624c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016250:	0005303a 	rdctl	r2,status
10016254:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016258:	e0fffc17 	ldw	r3,-16(fp)
1001625c:	00bfff84 	movi	r2,-2
10016260:	1884703a 	and	r2,r3,r2
10016264:	1001703a 	wrctl	status,r2
  
  return context;
10016268:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
1001626c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10016270:	e0bfff17 	ldw	r2,-4(fp)
10016274:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10016278:	e0bffd17 	ldw	r2,-12(fp)
1001627c:	10800017 	ldw	r2,0(r2)
10016280:	e0fffd17 	ldw	r3,-12(fp)
10016284:	18c00117 	ldw	r3,4(r3)
10016288:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
1001628c:	e0bffd17 	ldw	r2,-12(fp)
10016290:	10800117 	ldw	r2,4(r2)
10016294:	e0fffd17 	ldw	r3,-12(fp)
10016298:	18c00017 	ldw	r3,0(r3)
1001629c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100162a0:	e0bffd17 	ldw	r2,-12(fp)
100162a4:	e0fffd17 	ldw	r3,-12(fp)
100162a8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100162ac:	e0bffd17 	ldw	r2,-12(fp)
100162b0:	e0fffd17 	ldw	r3,-12(fp)
100162b4:	10c00015 	stw	r3,0(r2)
100162b8:	e0bffb17 	ldw	r2,-20(fp)
100162bc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100162c0:	e0bffe17 	ldw	r2,-8(fp)
100162c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
100162c8:	0001883a 	nop
100162cc:	e037883a 	mov	sp,fp
100162d0:	df000017 	ldw	fp,0(sp)
100162d4:	dec00104 	addi	sp,sp,4
100162d8:	f800283a 	ret

100162dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
100162dc:	defffb04 	addi	sp,sp,-20
100162e0:	dfc00415 	stw	ra,16(sp)
100162e4:	df000315 	stw	fp,12(sp)
100162e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
100162ec:	d0a01817 	ldw	r2,-32672(gp)
100162f0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
100162f4:	d0866417 	ldw	r2,6544(gp)
100162f8:	10800044 	addi	r2,r2,1
100162fc:	d0866415 	stw	r2,6544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10016300:	00002e06 	br	100163bc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10016304:	e0bffd17 	ldw	r2,-12(fp)
10016308:	10800017 	ldw	r2,0(r2)
1001630c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10016310:	e0bffd17 	ldw	r2,-12(fp)
10016314:	10800403 	ldbu	r2,16(r2)
10016318:	10803fcc 	andi	r2,r2,255
1001631c:	10000426 	beq	r2,zero,10016330 <alt_tick+0x54>
10016320:	d0866417 	ldw	r2,6544(gp)
10016324:	1000021e 	bne	r2,zero,10016330 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10016328:	e0bffd17 	ldw	r2,-12(fp)
1001632c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10016330:	e0bffd17 	ldw	r2,-12(fp)
10016334:	10800217 	ldw	r2,8(r2)
10016338:	d0c66417 	ldw	r3,6544(gp)
1001633c:	18801d36 	bltu	r3,r2,100163b4 <alt_tick+0xd8>
10016340:	e0bffd17 	ldw	r2,-12(fp)
10016344:	10800403 	ldbu	r2,16(r2)
10016348:	10803fcc 	andi	r2,r2,255
1001634c:	1000191e 	bne	r2,zero,100163b4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10016350:	e0bffd17 	ldw	r2,-12(fp)
10016354:	10800317 	ldw	r2,12(r2)
10016358:	e0fffd17 	ldw	r3,-12(fp)
1001635c:	18c00517 	ldw	r3,20(r3)
10016360:	1809883a 	mov	r4,r3
10016364:	103ee83a 	callr	r2
10016368:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
1001636c:	e0bfff17 	ldw	r2,-4(fp)
10016370:	1000031e 	bne	r2,zero,10016380 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10016374:	e13ffd17 	ldw	r4,-12(fp)
10016378:	00162400 	call	10016240 <alt_alarm_stop>
1001637c:	00000d06 	br	100163b4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10016380:	e0bffd17 	ldw	r2,-12(fp)
10016384:	10c00217 	ldw	r3,8(r2)
10016388:	e0bfff17 	ldw	r2,-4(fp)
1001638c:	1887883a 	add	r3,r3,r2
10016390:	e0bffd17 	ldw	r2,-12(fp)
10016394:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10016398:	e0bffd17 	ldw	r2,-12(fp)
1001639c:	10c00217 	ldw	r3,8(r2)
100163a0:	d0866417 	ldw	r2,6544(gp)
100163a4:	1880032e 	bgeu	r3,r2,100163b4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100163a8:	e0bffd17 	ldw	r2,-12(fp)
100163ac:	00c00044 	movi	r3,1
100163b0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100163b4:	e0bffe17 	ldw	r2,-8(fp)
100163b8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100163bc:	e0fffd17 	ldw	r3,-12(fp)
100163c0:	d0a01804 	addi	r2,gp,-32672
100163c4:	18bfcf1e 	bne	r3,r2,10016304 <__alt_data_end+0xf8016304>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
100163c8:	0001883a 	nop
}
100163cc:	0001883a 	nop
100163d0:	e037883a 	mov	sp,fp
100163d4:	dfc00117 	ldw	ra,4(sp)
100163d8:	df000017 	ldw	fp,0(sp)
100163dc:	dec00204 	addi	sp,sp,8
100163e0:	f800283a 	ret

100163e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100163e4:	defffe04 	addi	sp,sp,-8
100163e8:	dfc00115 	stw	ra,4(sp)
100163ec:	df000015 	stw	fp,0(sp)
100163f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100163f4:	008403b4 	movhi	r2,4110
100163f8:	10a4e004 	addi	r2,r2,-27776
100163fc:	10800017 	ldw	r2,0(r2)
10016400:	10000526 	beq	r2,zero,10016418 <alt_get_errno+0x34>
10016404:	008403b4 	movhi	r2,4110
10016408:	10a4e004 	addi	r2,r2,-27776
1001640c:	10800017 	ldw	r2,0(r2)
10016410:	103ee83a 	callr	r2
10016414:	00000206 	br	10016420 <alt_get_errno+0x3c>
10016418:	008403b4 	movhi	r2,4110
1001641c:	108b2104 	addi	r2,r2,11396
}
10016420:	e037883a 	mov	sp,fp
10016424:	dfc00117 	ldw	ra,4(sp)
10016428:	df000017 	ldw	fp,0(sp)
1001642c:	dec00204 	addi	sp,sp,8
10016430:	f800283a 	ret

10016434 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10016434:	defff904 	addi	sp,sp,-28
10016438:	dfc00615 	stw	ra,24(sp)
1001643c:	df000515 	stw	fp,20(sp)
10016440:	df000504 	addi	fp,sp,20
10016444:	e13ffd15 	stw	r4,-12(fp)
10016448:	e17ffe15 	stw	r5,-8(fp)
1001644c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10016450:	e0bffd17 	ldw	r2,-12(fp)
10016454:	10000816 	blt	r2,zero,10016478 <write+0x44>
10016458:	01400304 	movi	r5,12
1001645c:	e13ffd17 	ldw	r4,-12(fp)
10016460:	00065d80 	call	100065d8 <__mulsi3>
10016464:	1007883a 	mov	r3,r2
10016468:	008403b4 	movhi	r2,4110
1001646c:	10a04804 	addi	r2,r2,-32480
10016470:	1885883a 	add	r2,r3,r2
10016474:	00000106 	br	1001647c <write+0x48>
10016478:	0005883a 	mov	r2,zero
1001647c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10016480:	e0bffb17 	ldw	r2,-20(fp)
10016484:	10002126 	beq	r2,zero,1001650c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10016488:	e0bffb17 	ldw	r2,-20(fp)
1001648c:	10800217 	ldw	r2,8(r2)
10016490:	108000cc 	andi	r2,r2,3
10016494:	10001826 	beq	r2,zero,100164f8 <write+0xc4>
10016498:	e0bffb17 	ldw	r2,-20(fp)
1001649c:	10800017 	ldw	r2,0(r2)
100164a0:	10800617 	ldw	r2,24(r2)
100164a4:	10001426 	beq	r2,zero,100164f8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
100164a8:	e0bffb17 	ldw	r2,-20(fp)
100164ac:	10800017 	ldw	r2,0(r2)
100164b0:	10800617 	ldw	r2,24(r2)
100164b4:	e0ffff17 	ldw	r3,-4(fp)
100164b8:	180d883a 	mov	r6,r3
100164bc:	e17ffe17 	ldw	r5,-8(fp)
100164c0:	e13ffb17 	ldw	r4,-20(fp)
100164c4:	103ee83a 	callr	r2
100164c8:	e0bffc15 	stw	r2,-16(fp)
100164cc:	e0bffc17 	ldw	r2,-16(fp)
100164d0:	1000070e 	bge	r2,zero,100164f0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
100164d4:	00163e40 	call	100163e4 <alt_get_errno>
100164d8:	1007883a 	mov	r3,r2
100164dc:	e0bffc17 	ldw	r2,-16(fp)
100164e0:	0085c83a 	sub	r2,zero,r2
100164e4:	18800015 	stw	r2,0(r3)
        return -1;
100164e8:	00bfffc4 	movi	r2,-1
100164ec:	00000c06 	br	10016520 <write+0xec>
      }
      return rval;
100164f0:	e0bffc17 	ldw	r2,-16(fp)
100164f4:	00000a06 	br	10016520 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
100164f8:	00163e40 	call	100163e4 <alt_get_errno>
100164fc:	1007883a 	mov	r3,r2
10016500:	00800344 	movi	r2,13
10016504:	18800015 	stw	r2,0(r3)
10016508:	00000406 	br	1001651c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1001650c:	00163e40 	call	100163e4 <alt_get_errno>
10016510:	1007883a 	mov	r3,r2
10016514:	00801444 	movi	r2,81
10016518:	18800015 	stw	r2,0(r3)
  }
  return -1;
1001651c:	00bfffc4 	movi	r2,-1
}
10016520:	e037883a 	mov	sp,fp
10016524:	dfc00117 	ldw	ra,4(sp)
10016528:	df000017 	ldw	fp,0(sp)
1001652c:	dec00204 	addi	sp,sp,8
10016530:	f800283a 	ret

10016534 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10016534:	defffd04 	addi	sp,sp,-12
10016538:	dfc00215 	stw	ra,8(sp)
1001653c:	df000115 	stw	fp,4(sp)
10016540:	df000104 	addi	fp,sp,4
10016544:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10016548:	014403b4 	movhi	r5,4110
1001654c:	2964dd04 	addi	r5,r5,-27788
10016550:	e13fff17 	ldw	r4,-4(fp)
10016554:	00176a80 	call	100176a8 <alt_dev_llist_insert>
}
10016558:	e037883a 	mov	sp,fp
1001655c:	dfc00117 	ldw	ra,4(sp)
10016560:	df000017 	ldw	fp,0(sp)
10016564:	dec00204 	addi	sp,sp,8
10016568:	f800283a 	ret

1001656c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1001656c:	defffd04 	addi	sp,sp,-12
10016570:	dfc00215 	stw	ra,8(sp)
10016574:	df000115 	stw	fp,4(sp)
10016578:	df000104 	addi	fp,sp,4
1001657c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10016580:	0017f840 	call	10017f84 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10016584:	00800044 	movi	r2,1
10016588:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1001658c:	0001883a 	nop
10016590:	e037883a 	mov	sp,fp
10016594:	dfc00117 	ldw	ra,4(sp)
10016598:	df000017 	ldw	fp,0(sp)
1001659c:	dec00204 	addi	sp,sp,8
100165a0:	f800283a 	ret

100165a4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
100165a4:	defffe04 	addi	sp,sp,-8
100165a8:	dfc00115 	stw	ra,4(sp)
100165ac:	df000015 	stw	fp,0(sp)
100165b0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
100165b4:	01800144 	movi	r6,5
100165b8:	000b883a 	mov	r5,zero
100165bc:	010403b4 	movhi	r4,4110
100165c0:	2120b204 	addi	r4,r4,-32056
100165c4:	00167600 	call	10016760 <altera_avalon_jtag_uart_init>
100165c8:	010403b4 	movhi	r4,4110
100165cc:	2120a804 	addi	r4,r4,-32096
100165d0:	00165340 	call	10016534 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
100165d4:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
100165d8:	010403b4 	movhi	r4,4110
100165dc:	2124c004 	addi	r4,r4,-27904
100165e0:	001780c0 	call	1001780c <alt_fs_reg>
}
100165e4:	0001883a 	nop
100165e8:	e037883a 	mov	sp,fp
100165ec:	dfc00117 	ldw	ra,4(sp)
100165f0:	df000017 	ldw	fp,0(sp)
100165f4:	dec00204 	addi	sp,sp,8
100165f8:	f800283a 	ret

100165fc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
100165fc:	defffa04 	addi	sp,sp,-24
10016600:	dfc00515 	stw	ra,20(sp)
10016604:	df000415 	stw	fp,16(sp)
10016608:	df000404 	addi	fp,sp,16
1001660c:	e13ffd15 	stw	r4,-12(fp)
10016610:	e17ffe15 	stw	r5,-8(fp)
10016614:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016618:	e0bffd17 	ldw	r2,-12(fp)
1001661c:	10800017 	ldw	r2,0(r2)
10016620:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10016624:	e0bffc17 	ldw	r2,-16(fp)
10016628:	10c00a04 	addi	r3,r2,40
1001662c:	e0bffd17 	ldw	r2,-12(fp)
10016630:	10800217 	ldw	r2,8(r2)
10016634:	100f883a 	mov	r7,r2
10016638:	e1bfff17 	ldw	r6,-4(fp)
1001663c:	e17ffe17 	ldw	r5,-8(fp)
10016640:	1809883a 	mov	r4,r3
10016644:	0016c340 	call	10016c34 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
10016648:	e037883a 	mov	sp,fp
1001664c:	dfc00117 	ldw	ra,4(sp)
10016650:	df000017 	ldw	fp,0(sp)
10016654:	dec00204 	addi	sp,sp,8
10016658:	f800283a 	ret

1001665c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1001665c:	defffa04 	addi	sp,sp,-24
10016660:	dfc00515 	stw	ra,20(sp)
10016664:	df000415 	stw	fp,16(sp)
10016668:	df000404 	addi	fp,sp,16
1001666c:	e13ffd15 	stw	r4,-12(fp)
10016670:	e17ffe15 	stw	r5,-8(fp)
10016674:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10016678:	e0bffd17 	ldw	r2,-12(fp)
1001667c:	10800017 	ldw	r2,0(r2)
10016680:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
10016684:	e0bffc17 	ldw	r2,-16(fp)
10016688:	10c00a04 	addi	r3,r2,40
1001668c:	e0bffd17 	ldw	r2,-12(fp)
10016690:	10800217 	ldw	r2,8(r2)
10016694:	100f883a 	mov	r7,r2
10016698:	e1bfff17 	ldw	r6,-4(fp)
1001669c:	e17ffe17 	ldw	r5,-8(fp)
100166a0:	1809883a 	mov	r4,r3
100166a4:	0016e500 	call	10016e50 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
100166a8:	e037883a 	mov	sp,fp
100166ac:	dfc00117 	ldw	ra,4(sp)
100166b0:	df000017 	ldw	fp,0(sp)
100166b4:	dec00204 	addi	sp,sp,8
100166b8:	f800283a 	ret

100166bc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
100166bc:	defffc04 	addi	sp,sp,-16
100166c0:	dfc00315 	stw	ra,12(sp)
100166c4:	df000215 	stw	fp,8(sp)
100166c8:	df000204 	addi	fp,sp,8
100166cc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100166d0:	e0bfff17 	ldw	r2,-4(fp)
100166d4:	10800017 	ldw	r2,0(r2)
100166d8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
100166dc:	e0bffe17 	ldw	r2,-8(fp)
100166e0:	10c00a04 	addi	r3,r2,40
100166e4:	e0bfff17 	ldw	r2,-4(fp)
100166e8:	10800217 	ldw	r2,8(r2)
100166ec:	100b883a 	mov	r5,r2
100166f0:	1809883a 	mov	r4,r3
100166f4:	0016adc0 	call	10016adc <altera_avalon_jtag_uart_close>
}
100166f8:	e037883a 	mov	sp,fp
100166fc:	dfc00117 	ldw	ra,4(sp)
10016700:	df000017 	ldw	fp,0(sp)
10016704:	dec00204 	addi	sp,sp,8
10016708:	f800283a 	ret

1001670c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1001670c:	defffa04 	addi	sp,sp,-24
10016710:	dfc00515 	stw	ra,20(sp)
10016714:	df000415 	stw	fp,16(sp)
10016718:	df000404 	addi	fp,sp,16
1001671c:	e13ffd15 	stw	r4,-12(fp)
10016720:	e17ffe15 	stw	r5,-8(fp)
10016724:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10016728:	e0bffd17 	ldw	r2,-12(fp)
1001672c:	10800017 	ldw	r2,0(r2)
10016730:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
10016734:	e0bffc17 	ldw	r2,-16(fp)
10016738:	10800a04 	addi	r2,r2,40
1001673c:	e1bfff17 	ldw	r6,-4(fp)
10016740:	e17ffe17 	ldw	r5,-8(fp)
10016744:	1009883a 	mov	r4,r2
10016748:	0016b440 	call	10016b44 <altera_avalon_jtag_uart_ioctl>
}
1001674c:	e037883a 	mov	sp,fp
10016750:	dfc00117 	ldw	ra,4(sp)
10016754:	df000017 	ldw	fp,0(sp)
10016758:	dec00204 	addi	sp,sp,8
1001675c:	f800283a 	ret

10016760 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
10016760:	defffa04 	addi	sp,sp,-24
10016764:	dfc00515 	stw	ra,20(sp)
10016768:	df000415 	stw	fp,16(sp)
1001676c:	df000404 	addi	fp,sp,16
10016770:	e13ffd15 	stw	r4,-12(fp)
10016774:	e17ffe15 	stw	r5,-8(fp)
10016778:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001677c:	e0bffd17 	ldw	r2,-12(fp)
10016780:	00c00044 	movi	r3,1
10016784:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
10016788:	e0bffd17 	ldw	r2,-12(fp)
1001678c:	10800017 	ldw	r2,0(r2)
10016790:	10800104 	addi	r2,r2,4
10016794:	1007883a 	mov	r3,r2
10016798:	e0bffd17 	ldw	r2,-12(fp)
1001679c:	10800817 	ldw	r2,32(r2)
100167a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
100167a4:	e0bffe17 	ldw	r2,-8(fp)
100167a8:	e0ffff17 	ldw	r3,-4(fp)
100167ac:	d8000015 	stw	zero,0(sp)
100167b0:	e1fffd17 	ldw	r7,-12(fp)
100167b4:	01840074 	movhi	r6,4097
100167b8:	319a0a04 	addi	r6,r6,26664
100167bc:	180b883a 	mov	r5,r3
100167c0:	1009883a 	mov	r4,r2
100167c4:	00178b00 	call	100178b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
100167c8:	e0bffd17 	ldw	r2,-12(fp)
100167cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
100167d0:	e0bffd17 	ldw	r2,-12(fp)
100167d4:	10c00204 	addi	r3,r2,8
100167d8:	008403b4 	movhi	r2,4110
100167dc:	108b2d04 	addi	r2,r2,11444
100167e0:	10800017 	ldw	r2,0(r2)
100167e4:	e1fffd17 	ldw	r7,-12(fp)
100167e8:	01840074 	movhi	r6,4097
100167ec:	319a8d04 	addi	r6,r6,27188
100167f0:	100b883a 	mov	r5,r2
100167f4:	1809883a 	mov	r4,r3
100167f8:	00174f80 	call	100174f8 <alt_alarm_start>
100167fc:	1000040e 	bge	r2,zero,10016810 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10016800:	e0fffd17 	ldw	r3,-12(fp)
10016804:	00a00034 	movhi	r2,32768
10016808:	10bfffc4 	addi	r2,r2,-1
1001680c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10016810:	0001883a 	nop
10016814:	e037883a 	mov	sp,fp
10016818:	dfc00117 	ldw	ra,4(sp)
1001681c:	df000017 	ldw	fp,0(sp)
10016820:	dec00204 	addi	sp,sp,8
10016824:	f800283a 	ret

10016828 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10016828:	defff804 	addi	sp,sp,-32
1001682c:	df000715 	stw	fp,28(sp)
10016830:	df000704 	addi	fp,sp,28
10016834:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
10016838:	e0bfff17 	ldw	r2,-4(fp)
1001683c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
10016840:	e0bffb17 	ldw	r2,-20(fp)
10016844:	10800017 	ldw	r2,0(r2)
10016848:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001684c:	e0bffc17 	ldw	r2,-16(fp)
10016850:	10800104 	addi	r2,r2,4
10016854:	10800037 	ldwio	r2,0(r2)
10016858:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1001685c:	e0bffd17 	ldw	r2,-12(fp)
10016860:	1080c00c 	andi	r2,r2,768
10016864:	10006d26 	beq	r2,zero,10016a1c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
10016868:	e0bffd17 	ldw	r2,-12(fp)
1001686c:	1080400c 	andi	r2,r2,256
10016870:	10003526 	beq	r2,zero,10016948 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
10016874:	00800074 	movhi	r2,1
10016878:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1001687c:	e0bffb17 	ldw	r2,-20(fp)
10016880:	10800a17 	ldw	r2,40(r2)
10016884:	10800044 	addi	r2,r2,1
10016888:	1081ffcc 	andi	r2,r2,2047
1001688c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
10016890:	e0bffb17 	ldw	r2,-20(fp)
10016894:	10c00b17 	ldw	r3,44(r2)
10016898:	e0bffe17 	ldw	r2,-8(fp)
1001689c:	18801526 	beq	r3,r2,100168f4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
100168a0:	e0bffc17 	ldw	r2,-16(fp)
100168a4:	10800037 	ldwio	r2,0(r2)
100168a8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
100168ac:	e0bff917 	ldw	r2,-28(fp)
100168b0:	10a0000c 	andi	r2,r2,32768
100168b4:	10001126 	beq	r2,zero,100168fc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
100168b8:	e0bffb17 	ldw	r2,-20(fp)
100168bc:	10800a17 	ldw	r2,40(r2)
100168c0:	e0fff917 	ldw	r3,-28(fp)
100168c4:	1809883a 	mov	r4,r3
100168c8:	e0fffb17 	ldw	r3,-20(fp)
100168cc:	1885883a 	add	r2,r3,r2
100168d0:	10800e04 	addi	r2,r2,56
100168d4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100168d8:	e0bffb17 	ldw	r2,-20(fp)
100168dc:	10800a17 	ldw	r2,40(r2)
100168e0:	10800044 	addi	r2,r2,1
100168e4:	10c1ffcc 	andi	r3,r2,2047
100168e8:	e0bffb17 	ldw	r2,-20(fp)
100168ec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
100168f0:	003fe206 	br	1001687c <__alt_data_end+0xf801687c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
100168f4:	0001883a 	nop
100168f8:	00000106 	br	10016900 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
100168fc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10016900:	e0bff917 	ldw	r2,-28(fp)
10016904:	10bfffec 	andhi	r2,r2,65535
10016908:	10000f26 	beq	r2,zero,10016948 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1001690c:	e0bffb17 	ldw	r2,-20(fp)
10016910:	10c00817 	ldw	r3,32(r2)
10016914:	00bfff84 	movi	r2,-2
10016918:	1886703a 	and	r3,r3,r2
1001691c:	e0bffb17 	ldw	r2,-20(fp)
10016920:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
10016924:	e0bffc17 	ldw	r2,-16(fp)
10016928:	10800104 	addi	r2,r2,4
1001692c:	1007883a 	mov	r3,r2
10016930:	e0bffb17 	ldw	r2,-20(fp)
10016934:	10800817 	ldw	r2,32(r2)
10016938:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1001693c:	e0bffc17 	ldw	r2,-16(fp)
10016940:	10800104 	addi	r2,r2,4
10016944:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
10016948:	e0bffd17 	ldw	r2,-12(fp)
1001694c:	1080800c 	andi	r2,r2,512
10016950:	103fbe26 	beq	r2,zero,1001684c <__alt_data_end+0xf801684c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
10016954:	e0bffd17 	ldw	r2,-12(fp)
10016958:	1004d43a 	srli	r2,r2,16
1001695c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
10016960:	00001406 	br	100169b4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
10016964:	e0bffc17 	ldw	r2,-16(fp)
10016968:	e0fffb17 	ldw	r3,-20(fp)
1001696c:	18c00d17 	ldw	r3,52(r3)
10016970:	e13ffb17 	ldw	r4,-20(fp)
10016974:	20c7883a 	add	r3,r4,r3
10016978:	18c20e04 	addi	r3,r3,2104
1001697c:	18c00003 	ldbu	r3,0(r3)
10016980:	18c03fcc 	andi	r3,r3,255
10016984:	18c0201c 	xori	r3,r3,128
10016988:	18ffe004 	addi	r3,r3,-128
1001698c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016990:	e0bffb17 	ldw	r2,-20(fp)
10016994:	10800d17 	ldw	r2,52(r2)
10016998:	10800044 	addi	r2,r2,1
1001699c:	10c1ffcc 	andi	r3,r2,2047
100169a0:	e0bffb17 	ldw	r2,-20(fp)
100169a4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
100169a8:	e0bffa17 	ldw	r2,-24(fp)
100169ac:	10bfffc4 	addi	r2,r2,-1
100169b0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
100169b4:	e0bffa17 	ldw	r2,-24(fp)
100169b8:	10000526 	beq	r2,zero,100169d0 <altera_avalon_jtag_uart_irq+0x1a8>
100169bc:	e0bffb17 	ldw	r2,-20(fp)
100169c0:	10c00d17 	ldw	r3,52(r2)
100169c4:	e0bffb17 	ldw	r2,-20(fp)
100169c8:	10800c17 	ldw	r2,48(r2)
100169cc:	18bfe51e 	bne	r3,r2,10016964 <__alt_data_end+0xf8016964>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
100169d0:	e0bffa17 	ldw	r2,-24(fp)
100169d4:	103f9d26 	beq	r2,zero,1001684c <__alt_data_end+0xf801684c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100169d8:	e0bffb17 	ldw	r2,-20(fp)
100169dc:	10c00817 	ldw	r3,32(r2)
100169e0:	00bfff44 	movi	r2,-3
100169e4:	1886703a 	and	r3,r3,r2
100169e8:	e0bffb17 	ldw	r2,-20(fp)
100169ec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
100169f0:	e0bffb17 	ldw	r2,-20(fp)
100169f4:	10800017 	ldw	r2,0(r2)
100169f8:	10800104 	addi	r2,r2,4
100169fc:	1007883a 	mov	r3,r2
10016a00:	e0bffb17 	ldw	r2,-20(fp)
10016a04:	10800817 	ldw	r2,32(r2)
10016a08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10016a0c:	e0bffc17 	ldw	r2,-16(fp)
10016a10:	10800104 	addi	r2,r2,4
10016a14:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10016a18:	003f8c06 	br	1001684c <__alt_data_end+0xf801684c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10016a1c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10016a20:	0001883a 	nop
10016a24:	e037883a 	mov	sp,fp
10016a28:	df000017 	ldw	fp,0(sp)
10016a2c:	dec00104 	addi	sp,sp,4
10016a30:	f800283a 	ret

10016a34 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
10016a34:	defff804 	addi	sp,sp,-32
10016a38:	df000715 	stw	fp,28(sp)
10016a3c:	df000704 	addi	fp,sp,28
10016a40:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
10016a44:	e0bffb17 	ldw	r2,-20(fp)
10016a48:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
10016a4c:	e0bff917 	ldw	r2,-28(fp)
10016a50:	10800017 	ldw	r2,0(r2)
10016a54:	10800104 	addi	r2,r2,4
10016a58:	10800037 	ldwio	r2,0(r2)
10016a5c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
10016a60:	e0bffa17 	ldw	r2,-24(fp)
10016a64:	1081000c 	andi	r2,r2,1024
10016a68:	10000b26 	beq	r2,zero,10016a98 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
10016a6c:	e0bff917 	ldw	r2,-28(fp)
10016a70:	10800017 	ldw	r2,0(r2)
10016a74:	10800104 	addi	r2,r2,4
10016a78:	1007883a 	mov	r3,r2
10016a7c:	e0bff917 	ldw	r2,-28(fp)
10016a80:	10800817 	ldw	r2,32(r2)
10016a84:	10810014 	ori	r2,r2,1024
10016a88:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
10016a8c:	e0bff917 	ldw	r2,-28(fp)
10016a90:	10000915 	stw	zero,36(r2)
10016a94:	00000a06 	br	10016ac0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10016a98:	e0bff917 	ldw	r2,-28(fp)
10016a9c:	10c00917 	ldw	r3,36(r2)
10016aa0:	00a00034 	movhi	r2,32768
10016aa4:	10bfff04 	addi	r2,r2,-4
10016aa8:	10c00536 	bltu	r2,r3,10016ac0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10016aac:	e0bff917 	ldw	r2,-28(fp)
10016ab0:	10800917 	ldw	r2,36(r2)
10016ab4:	10c00044 	addi	r3,r2,1
10016ab8:	e0bff917 	ldw	r2,-28(fp)
10016abc:	10c00915 	stw	r3,36(r2)
10016ac0:	008403b4 	movhi	r2,4110
10016ac4:	108b2d04 	addi	r2,r2,11444
10016ac8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
10016acc:	e037883a 	mov	sp,fp
10016ad0:	df000017 	ldw	fp,0(sp)
10016ad4:	dec00104 	addi	sp,sp,4
10016ad8:	f800283a 	ret

10016adc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
10016adc:	defffd04 	addi	sp,sp,-12
10016ae0:	df000215 	stw	fp,8(sp)
10016ae4:	df000204 	addi	fp,sp,8
10016ae8:	e13ffe15 	stw	r4,-8(fp)
10016aec:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10016af0:	00000506 	br	10016b08 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10016af4:	e0bfff17 	ldw	r2,-4(fp)
10016af8:	1090000c 	andi	r2,r2,16384
10016afc:	10000226 	beq	r2,zero,10016b08 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10016b00:	00bffd44 	movi	r2,-11
10016b04:	00000b06 	br	10016b34 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10016b08:	e0bffe17 	ldw	r2,-8(fp)
10016b0c:	10c00d17 	ldw	r3,52(r2)
10016b10:	e0bffe17 	ldw	r2,-8(fp)
10016b14:	10800c17 	ldw	r2,48(r2)
10016b18:	18800526 	beq	r3,r2,10016b30 <altera_avalon_jtag_uart_close+0x54>
10016b1c:	e0bffe17 	ldw	r2,-8(fp)
10016b20:	10c00917 	ldw	r3,36(r2)
10016b24:	e0bffe17 	ldw	r2,-8(fp)
10016b28:	10800117 	ldw	r2,4(r2)
10016b2c:	18bff136 	bltu	r3,r2,10016af4 <__alt_data_end+0xf8016af4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10016b30:	0005883a 	mov	r2,zero
}
10016b34:	e037883a 	mov	sp,fp
10016b38:	df000017 	ldw	fp,0(sp)
10016b3c:	dec00104 	addi	sp,sp,4
10016b40:	f800283a 	ret

10016b44 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
10016b44:	defffa04 	addi	sp,sp,-24
10016b48:	df000515 	stw	fp,20(sp)
10016b4c:	df000504 	addi	fp,sp,20
10016b50:	e13ffd15 	stw	r4,-12(fp)
10016b54:	e17ffe15 	stw	r5,-8(fp)
10016b58:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
10016b5c:	00bff9c4 	movi	r2,-25
10016b60:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
10016b64:	e0bffe17 	ldw	r2,-8(fp)
10016b68:	10da8060 	cmpeqi	r3,r2,27137
10016b6c:	1800031e 	bne	r3,zero,10016b7c <altera_avalon_jtag_uart_ioctl+0x38>
10016b70:	109a80a0 	cmpeqi	r2,r2,27138
10016b74:	1000181e 	bne	r2,zero,10016bd8 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
10016b78:	00002906 	br	10016c20 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
10016b7c:	e0bffd17 	ldw	r2,-12(fp)
10016b80:	10c00117 	ldw	r3,4(r2)
10016b84:	00a00034 	movhi	r2,32768
10016b88:	10bfffc4 	addi	r2,r2,-1
10016b8c:	18802126 	beq	r3,r2,10016c14 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
10016b90:	e0bfff17 	ldw	r2,-4(fp)
10016b94:	10800017 	ldw	r2,0(r2)
10016b98:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
10016b9c:	e0bffc17 	ldw	r2,-16(fp)
10016ba0:	10800090 	cmplti	r2,r2,2
10016ba4:	1000061e 	bne	r2,zero,10016bc0 <altera_avalon_jtag_uart_ioctl+0x7c>
10016ba8:	e0fffc17 	ldw	r3,-16(fp)
10016bac:	00a00034 	movhi	r2,32768
10016bb0:	10bfffc4 	addi	r2,r2,-1
10016bb4:	18800226 	beq	r3,r2,10016bc0 <altera_avalon_jtag_uart_ioctl+0x7c>
10016bb8:	e0bffc17 	ldw	r2,-16(fp)
10016bbc:	00000206 	br	10016bc8 <altera_avalon_jtag_uart_ioctl+0x84>
10016bc0:	00a00034 	movhi	r2,32768
10016bc4:	10bfff84 	addi	r2,r2,-2
10016bc8:	e0fffd17 	ldw	r3,-12(fp)
10016bcc:	18800115 	stw	r2,4(r3)
      rc = 0;
10016bd0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10016bd4:	00000f06 	br	10016c14 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10016bd8:	e0bffd17 	ldw	r2,-12(fp)
10016bdc:	10c00117 	ldw	r3,4(r2)
10016be0:	00a00034 	movhi	r2,32768
10016be4:	10bfffc4 	addi	r2,r2,-1
10016be8:	18800c26 	beq	r3,r2,10016c1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
10016bec:	e0bffd17 	ldw	r2,-12(fp)
10016bf0:	10c00917 	ldw	r3,36(r2)
10016bf4:	e0bffd17 	ldw	r2,-12(fp)
10016bf8:	10800117 	ldw	r2,4(r2)
10016bfc:	1885803a 	cmpltu	r2,r3,r2
10016c00:	10c03fcc 	andi	r3,r2,255
10016c04:	e0bfff17 	ldw	r2,-4(fp)
10016c08:	10c00015 	stw	r3,0(r2)
      rc = 0;
10016c0c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10016c10:	00000206 	br	10016c1c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10016c14:	0001883a 	nop
10016c18:	00000106 	br	10016c20 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
10016c1c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10016c20:	e0bffb17 	ldw	r2,-20(fp)
}
10016c24:	e037883a 	mov	sp,fp
10016c28:	df000017 	ldw	fp,0(sp)
10016c2c:	dec00104 	addi	sp,sp,4
10016c30:	f800283a 	ret

10016c34 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10016c34:	defff304 	addi	sp,sp,-52
10016c38:	dfc00c15 	stw	ra,48(sp)
10016c3c:	df000b15 	stw	fp,44(sp)
10016c40:	df000b04 	addi	fp,sp,44
10016c44:	e13ffc15 	stw	r4,-16(fp)
10016c48:	e17ffd15 	stw	r5,-12(fp)
10016c4c:	e1bffe15 	stw	r6,-8(fp)
10016c50:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
10016c54:	e0bffd17 	ldw	r2,-12(fp)
10016c58:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10016c5c:	00004706 	br	10016d7c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
10016c60:	e0bffc17 	ldw	r2,-16(fp)
10016c64:	10800a17 	ldw	r2,40(r2)
10016c68:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
10016c6c:	e0bffc17 	ldw	r2,-16(fp)
10016c70:	10800b17 	ldw	r2,44(r2)
10016c74:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
10016c78:	e0fff717 	ldw	r3,-36(fp)
10016c7c:	e0bff817 	ldw	r2,-32(fp)
10016c80:	18800536 	bltu	r3,r2,10016c98 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
10016c84:	e0fff717 	ldw	r3,-36(fp)
10016c88:	e0bff817 	ldw	r2,-32(fp)
10016c8c:	1885c83a 	sub	r2,r3,r2
10016c90:	e0bff615 	stw	r2,-40(fp)
10016c94:	00000406 	br	10016ca8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
10016c98:	00c20004 	movi	r3,2048
10016c9c:	e0bff817 	ldw	r2,-32(fp)
10016ca0:	1885c83a 	sub	r2,r3,r2
10016ca4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016ca8:	e0bff617 	ldw	r2,-40(fp)
10016cac:	10001e26 	beq	r2,zero,10016d28 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10016cb0:	e0fffe17 	ldw	r3,-8(fp)
10016cb4:	e0bff617 	ldw	r2,-40(fp)
10016cb8:	1880022e 	bgeu	r3,r2,10016cc4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
10016cbc:	e0bffe17 	ldw	r2,-8(fp)
10016cc0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10016cc4:	e0bffc17 	ldw	r2,-16(fp)
10016cc8:	10c00e04 	addi	r3,r2,56
10016ccc:	e0bff817 	ldw	r2,-32(fp)
10016cd0:	1885883a 	add	r2,r3,r2
10016cd4:	e1bff617 	ldw	r6,-40(fp)
10016cd8:	100b883a 	mov	r5,r2
10016cdc:	e13ff517 	ldw	r4,-44(fp)
10016ce0:	000fe740 	call	1000fe74 <memcpy>
      ptr   += n;
10016ce4:	e0fff517 	ldw	r3,-44(fp)
10016ce8:	e0bff617 	ldw	r2,-40(fp)
10016cec:	1885883a 	add	r2,r3,r2
10016cf0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10016cf4:	e0fffe17 	ldw	r3,-8(fp)
10016cf8:	e0bff617 	ldw	r2,-40(fp)
10016cfc:	1885c83a 	sub	r2,r3,r2
10016d00:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016d04:	e0fff817 	ldw	r3,-32(fp)
10016d08:	e0bff617 	ldw	r2,-40(fp)
10016d0c:	1885883a 	add	r2,r3,r2
10016d10:	10c1ffcc 	andi	r3,r2,2047
10016d14:	e0bffc17 	ldw	r2,-16(fp)
10016d18:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
10016d1c:	e0bffe17 	ldw	r2,-8(fp)
10016d20:	00bfcf16 	blt	zero,r2,10016c60 <__alt_data_end+0xf8016c60>
10016d24:	00000106 	br	10016d2c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10016d28:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
10016d2c:	e0fff517 	ldw	r3,-44(fp)
10016d30:	e0bffd17 	ldw	r2,-12(fp)
10016d34:	1880141e 	bne	r3,r2,10016d88 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10016d38:	e0bfff17 	ldw	r2,-4(fp)
10016d3c:	1090000c 	andi	r2,r2,16384
10016d40:	1000131e 	bne	r2,zero,10016d90 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
10016d44:	0001883a 	nop
10016d48:	e0bffc17 	ldw	r2,-16(fp)
10016d4c:	10c00a17 	ldw	r3,40(r2)
10016d50:	e0bff717 	ldw	r2,-36(fp)
10016d54:	1880051e 	bne	r3,r2,10016d6c <altera_avalon_jtag_uart_read+0x138>
10016d58:	e0bffc17 	ldw	r2,-16(fp)
10016d5c:	10c00917 	ldw	r3,36(r2)
10016d60:	e0bffc17 	ldw	r2,-16(fp)
10016d64:	10800117 	ldw	r2,4(r2)
10016d68:	18bff736 	bltu	r3,r2,10016d48 <__alt_data_end+0xf8016d48>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
10016d6c:	e0bffc17 	ldw	r2,-16(fp)
10016d70:	10c00a17 	ldw	r3,40(r2)
10016d74:	e0bff717 	ldw	r2,-36(fp)
10016d78:	18800726 	beq	r3,r2,10016d98 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
10016d7c:	e0bffe17 	ldw	r2,-8(fp)
10016d80:	00bfb716 	blt	zero,r2,10016c60 <__alt_data_end+0xf8016c60>
10016d84:	00000506 	br	10016d9c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
10016d88:	0001883a 	nop
10016d8c:	00000306 	br	10016d9c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
10016d90:	0001883a 	nop
10016d94:	00000106 	br	10016d9c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
10016d98:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
10016d9c:	e0fff517 	ldw	r3,-44(fp)
10016da0:	e0bffd17 	ldw	r2,-12(fp)
10016da4:	18801826 	beq	r3,r2,10016e08 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016da8:	0005303a 	rdctl	r2,status
10016dac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016db0:	e0fffb17 	ldw	r3,-20(fp)
10016db4:	00bfff84 	movi	r2,-2
10016db8:	1884703a 	and	r2,r3,r2
10016dbc:	1001703a 	wrctl	status,r2
  
  return context;
10016dc0:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10016dc4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10016dc8:	e0bffc17 	ldw	r2,-16(fp)
10016dcc:	10800817 	ldw	r2,32(r2)
10016dd0:	10c00054 	ori	r3,r2,1
10016dd4:	e0bffc17 	ldw	r2,-16(fp)
10016dd8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016ddc:	e0bffc17 	ldw	r2,-16(fp)
10016de0:	10800017 	ldw	r2,0(r2)
10016de4:	10800104 	addi	r2,r2,4
10016de8:	1007883a 	mov	r3,r2
10016dec:	e0bffc17 	ldw	r2,-16(fp)
10016df0:	10800817 	ldw	r2,32(r2)
10016df4:	18800035 	stwio	r2,0(r3)
10016df8:	e0bffa17 	ldw	r2,-24(fp)
10016dfc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016e00:	e0bff917 	ldw	r2,-28(fp)
10016e04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10016e08:	e0fff517 	ldw	r3,-44(fp)
10016e0c:	e0bffd17 	ldw	r2,-12(fp)
10016e10:	18800426 	beq	r3,r2,10016e24 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10016e14:	e0fff517 	ldw	r3,-44(fp)
10016e18:	e0bffd17 	ldw	r2,-12(fp)
10016e1c:	1885c83a 	sub	r2,r3,r2
10016e20:	00000606 	br	10016e3c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10016e24:	e0bfff17 	ldw	r2,-4(fp)
10016e28:	1090000c 	andi	r2,r2,16384
10016e2c:	10000226 	beq	r2,zero,10016e38 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10016e30:	00bffd44 	movi	r2,-11
10016e34:	00000106 	br	10016e3c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10016e38:	00bffec4 	movi	r2,-5
}
10016e3c:	e037883a 	mov	sp,fp
10016e40:	dfc00117 	ldw	ra,4(sp)
10016e44:	df000017 	ldw	fp,0(sp)
10016e48:	dec00204 	addi	sp,sp,8
10016e4c:	f800283a 	ret

10016e50 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
10016e50:	defff304 	addi	sp,sp,-52
10016e54:	dfc00c15 	stw	ra,48(sp)
10016e58:	df000b15 	stw	fp,44(sp)
10016e5c:	df000b04 	addi	fp,sp,44
10016e60:	e13ffc15 	stw	r4,-16(fp)
10016e64:	e17ffd15 	stw	r5,-12(fp)
10016e68:	e1bffe15 	stw	r6,-8(fp)
10016e6c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
10016e70:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
10016e74:	e0bffd17 	ldw	r2,-12(fp)
10016e78:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10016e7c:	00003706 	br	10016f5c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
10016e80:	e0bffc17 	ldw	r2,-16(fp)
10016e84:	10800c17 	ldw	r2,48(r2)
10016e88:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
10016e8c:	e0bffc17 	ldw	r2,-16(fp)
10016e90:	10800d17 	ldw	r2,52(r2)
10016e94:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
10016e98:	e0fff917 	ldw	r3,-28(fp)
10016e9c:	e0bff517 	ldw	r2,-44(fp)
10016ea0:	1880062e 	bgeu	r3,r2,10016ebc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10016ea4:	e0fff517 	ldw	r3,-44(fp)
10016ea8:	e0bff917 	ldw	r2,-28(fp)
10016eac:	1885c83a 	sub	r2,r3,r2
10016eb0:	10bfffc4 	addi	r2,r2,-1
10016eb4:	e0bff615 	stw	r2,-40(fp)
10016eb8:	00000b06 	br	10016ee8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
10016ebc:	e0bff517 	ldw	r2,-44(fp)
10016ec0:	10000526 	beq	r2,zero,10016ed8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10016ec4:	00c20004 	movi	r3,2048
10016ec8:	e0bff917 	ldw	r2,-28(fp)
10016ecc:	1885c83a 	sub	r2,r3,r2
10016ed0:	e0bff615 	stw	r2,-40(fp)
10016ed4:	00000406 	br	10016ee8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10016ed8:	00c1ffc4 	movi	r3,2047
10016edc:	e0bff917 	ldw	r2,-28(fp)
10016ee0:	1885c83a 	sub	r2,r3,r2
10016ee4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10016ee8:	e0bff617 	ldw	r2,-40(fp)
10016eec:	10001e26 	beq	r2,zero,10016f68 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10016ef0:	e0fffe17 	ldw	r3,-8(fp)
10016ef4:	e0bff617 	ldw	r2,-40(fp)
10016ef8:	1880022e 	bgeu	r3,r2,10016f04 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
10016efc:	e0bffe17 	ldw	r2,-8(fp)
10016f00:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10016f04:	e0bffc17 	ldw	r2,-16(fp)
10016f08:	10c20e04 	addi	r3,r2,2104
10016f0c:	e0bff917 	ldw	r2,-28(fp)
10016f10:	1885883a 	add	r2,r3,r2
10016f14:	e1bff617 	ldw	r6,-40(fp)
10016f18:	e17ffd17 	ldw	r5,-12(fp)
10016f1c:	1009883a 	mov	r4,r2
10016f20:	000fe740 	call	1000fe74 <memcpy>
      ptr   += n;
10016f24:	e0fffd17 	ldw	r3,-12(fp)
10016f28:	e0bff617 	ldw	r2,-40(fp)
10016f2c:	1885883a 	add	r2,r3,r2
10016f30:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10016f34:	e0fffe17 	ldw	r3,-8(fp)
10016f38:	e0bff617 	ldw	r2,-40(fp)
10016f3c:	1885c83a 	sub	r2,r3,r2
10016f40:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10016f44:	e0fff917 	ldw	r3,-28(fp)
10016f48:	e0bff617 	ldw	r2,-40(fp)
10016f4c:	1885883a 	add	r2,r3,r2
10016f50:	10c1ffcc 	andi	r3,r2,2047
10016f54:	e0bffc17 	ldw	r2,-16(fp)
10016f58:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
10016f5c:	e0bffe17 	ldw	r2,-8(fp)
10016f60:	00bfc716 	blt	zero,r2,10016e80 <__alt_data_end+0xf8016e80>
10016f64:	00000106 	br	10016f6c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
10016f68:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10016f6c:	0005303a 	rdctl	r2,status
10016f70:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10016f74:	e0fffb17 	ldw	r3,-20(fp)
10016f78:	00bfff84 	movi	r2,-2
10016f7c:	1884703a 	and	r2,r3,r2
10016f80:	1001703a 	wrctl	status,r2
  
  return context;
10016f84:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
10016f88:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10016f8c:	e0bffc17 	ldw	r2,-16(fp)
10016f90:	10800817 	ldw	r2,32(r2)
10016f94:	10c00094 	ori	r3,r2,2
10016f98:	e0bffc17 	ldw	r2,-16(fp)
10016f9c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10016fa0:	e0bffc17 	ldw	r2,-16(fp)
10016fa4:	10800017 	ldw	r2,0(r2)
10016fa8:	10800104 	addi	r2,r2,4
10016fac:	1007883a 	mov	r3,r2
10016fb0:	e0bffc17 	ldw	r2,-16(fp)
10016fb4:	10800817 	ldw	r2,32(r2)
10016fb8:	18800035 	stwio	r2,0(r3)
10016fbc:	e0bffa17 	ldw	r2,-24(fp)
10016fc0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10016fc4:	e0bff817 	ldw	r2,-32(fp)
10016fc8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10016fcc:	e0bffe17 	ldw	r2,-8(fp)
10016fd0:	0080100e 	bge	zero,r2,10017014 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10016fd4:	e0bfff17 	ldw	r2,-4(fp)
10016fd8:	1090000c 	andi	r2,r2,16384
10016fdc:	1000101e 	bne	r2,zero,10017020 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10016fe0:	0001883a 	nop
10016fe4:	e0bffc17 	ldw	r2,-16(fp)
10016fe8:	10c00d17 	ldw	r3,52(r2)
10016fec:	e0bff517 	ldw	r2,-44(fp)
10016ff0:	1880051e 	bne	r3,r2,10017008 <altera_avalon_jtag_uart_write+0x1b8>
10016ff4:	e0bffc17 	ldw	r2,-16(fp)
10016ff8:	10c00917 	ldw	r3,36(r2)
10016ffc:	e0bffc17 	ldw	r2,-16(fp)
10017000:	10800117 	ldw	r2,4(r2)
10017004:	18bff736 	bltu	r3,r2,10016fe4 <__alt_data_end+0xf8016fe4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10017008:	e0bffc17 	ldw	r2,-16(fp)
1001700c:	10800917 	ldw	r2,36(r2)
10017010:	1000051e 	bne	r2,zero,10017028 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10017014:	e0bffe17 	ldw	r2,-8(fp)
10017018:	00bfd016 	blt	zero,r2,10016f5c <__alt_data_end+0xf8016f5c>
1001701c:	00000306 	br	1001702c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10017020:	0001883a 	nop
10017024:	00000106 	br	1001702c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10017028:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
1001702c:	e0fffd17 	ldw	r3,-12(fp)
10017030:	e0bff717 	ldw	r2,-36(fp)
10017034:	18800426 	beq	r3,r2,10017048 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10017038:	e0fffd17 	ldw	r3,-12(fp)
1001703c:	e0bff717 	ldw	r2,-36(fp)
10017040:	1885c83a 	sub	r2,r3,r2
10017044:	00000606 	br	10017060 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10017048:	e0bfff17 	ldw	r2,-4(fp)
1001704c:	1090000c 	andi	r2,r2,16384
10017050:	10000226 	beq	r2,zero,1001705c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10017054:	00bffd44 	movi	r2,-11
10017058:	00000106 	br	10017060 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
1001705c:	00bffec4 	movi	r2,-5
}
10017060:	e037883a 	mov	sp,fp
10017064:	dfc00117 	ldw	ra,4(sp)
10017068:	df000017 	ldw	fp,0(sp)
1001706c:	dec00204 	addi	sp,sp,8
10017070:	f800283a 	ret

10017074 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
10017074:	defff404 	addi	sp,sp,-48
10017078:	df000b15 	stw	fp,44(sp)
1001707c:	df000b04 	addi	fp,sp,44
10017080:	e13ffc15 	stw	r4,-16(fp)
10017084:	e17ffd15 	stw	r5,-12(fp)
10017088:	e1bffe15 	stw	r6,-8(fp)
1001708c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
10017090:	e0bffc17 	ldw	r2,-16(fp)
10017094:	10800017 	ldw	r2,0(r2)
10017098:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
1001709c:	e0bff517 	ldw	r2,-44(fp)
100170a0:	10800217 	ldw	r2,8(r2)
100170a4:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
100170a8:	e0bff617 	ldw	r2,-40(fp)
100170ac:	10bfffc4 	addi	r2,r2,-1
100170b0:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
100170b4:	e0bffb17 	ldw	r2,-20(fp)
100170b8:	10800044 	addi	r2,r2,1
100170bc:	e0bffb15 	stw	r2,-20(fp)
100170c0:	e0bffb17 	ldw	r2,-20(fp)
100170c4:	10800003 	ldbu	r2,0(r2)
100170c8:	10803fcc 	andi	r2,r2,255
100170cc:	1080201c 	xori	r2,r2,128
100170d0:	10bfe004 	addi	r2,r2,-128
100170d4:	103ff71e 	bne	r2,zero,100170b4 <__alt_data_end+0xf80170b4>
    ;

  return ptr - string;
100170d8:	e0fffb17 	ldw	r3,-20(fp)
100170dc:	e0bff617 	ldw	r2,-40(fp)
100170e0:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
100170e4:	10800044 	addi	r2,r2,1
100170e8:	1007883a 	mov	r3,r2
100170ec:	e0bffd17 	ldw	r2,-12(fp)
100170f0:	10c5883a 	add	r2,r2,r3
100170f4:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
100170f8:	d0a01a04 	addi	r2,gp,-32664
100170fc:	1007883a 	mov	r3,r2
  r4 = (int)name;
10017100:	e0bffd17 	ldw	r2,-12(fp)
10017104:	1009883a 	mov	r4,r2
  r5 = flags;
10017108:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
1001710c:	e1bfff17 	ldw	r6,-4(fp)
10017110:	e0bffd17 	ldw	r2,-12(fp)
10017114:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
10017118:	e0bff917 	ldw	r2,-28(fp)
1001711c:	10bfffc4 	addi	r2,r2,-1
10017120:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
10017124:	e0bffa17 	ldw	r2,-24(fp)
10017128:	10800044 	addi	r2,r2,1
1001712c:	e0bffa15 	stw	r2,-24(fp)
10017130:	e0bffa17 	ldw	r2,-24(fp)
10017134:	10800003 	ldbu	r2,0(r2)
10017138:	10803fcc 	andi	r2,r2,255
1001713c:	1080201c 	xori	r2,r2,128
10017140:	10bfe004 	addi	r2,r2,-128
10017144:	103ff71e 	bne	r2,zero,10017124 <__alt_data_end+0xf8017124>
    ;

  return ptr - string;
10017148:	e1fffa17 	ldw	r7,-24(fp)
1001714c:	e0bff917 	ldw	r2,-28(fp)
10017150:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
10017154:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
10017158:	003da07a 	break	1

  handle = (void *)r2;
1001715c:	e0bff715 	stw	r2,-36(fp)
  error = r3;
10017160:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
10017164:	e0bff817 	ldw	r2,-32(fp)
10017168:	1000031e 	bne	r2,zero,10017178 <alt_hostfs_open+0x104>
    fd->priv = handle;
1001716c:	e0bffc17 	ldw	r2,-16(fp)
10017170:	e0fff717 	ldw	r3,-36(fp)
10017174:	10c00115 	stw	r3,4(r2)

  return -error;
10017178:	e0bff817 	ldw	r2,-32(fp)
1001717c:	0085c83a 	sub	r2,zero,r2
}
10017180:	e037883a 	mov	sp,fp
10017184:	df000017 	ldw	fp,0(sp)
10017188:	dec00104 	addi	sp,sp,4
1001718c:	f800283a 	ret

10017190 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
10017190:	defffd04 	addi	sp,sp,-12
10017194:	df000215 	stw	fp,8(sp)
10017198:	df000204 	addi	fp,sp,8
1001719c:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
100171a0:	d0a01d04 	addi	r2,gp,-32652
100171a4:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100171a8:	e0bfff17 	ldw	r2,-4(fp)
100171ac:	10800117 	ldw	r2,4(r2)
100171b0:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
100171b4:	003da07a 	break	1

  error = r3;
100171b8:	e0fffe15 	stw	r3,-8(fp)

  return -error;
100171bc:	e0bffe17 	ldw	r2,-8(fp)
100171c0:	0085c83a 	sub	r2,zero,r2
}
100171c4:	e037883a 	mov	sp,fp
100171c8:	df000017 	ldw	fp,0(sp)
100171cc:	dec00104 	addi	sp,sp,4
100171d0:	f800283a 	ret

100171d4 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
100171d4:	defffa04 	addi	sp,sp,-24
100171d8:	df000515 	stw	fp,20(sp)
100171dc:	df000504 	addi	fp,sp,20
100171e0:	e13ffd15 	stw	r4,-12(fp)
100171e4:	e17ffe15 	stw	r5,-8(fp)
100171e8:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
100171ec:	d0a02004 	addi	r2,gp,-32640
100171f0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100171f4:	e0bffd17 	ldw	r2,-12(fp)
100171f8:	10800117 	ldw	r2,4(r2)
100171fc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
10017200:	e0bffe17 	ldw	r2,-8(fp)
10017204:	100b883a 	mov	r5,r2
  r6 = len;
10017208:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
1001720c:	003da07a 	break	1

  rc = r2;
10017210:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10017214:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10017218:	e0bffc17 	ldw	r2,-16(fp)
1001721c:	10000326 	beq	r2,zero,1001722c <alt_hostfs_read+0x58>
10017220:	e0bffc17 	ldw	r2,-16(fp)
10017224:	0085c83a 	sub	r2,zero,r2
10017228:	00000106 	br	10017230 <alt_hostfs_read+0x5c>
1001722c:	e0bffb17 	ldw	r2,-20(fp)
}
10017230:	e037883a 	mov	sp,fp
10017234:	df000017 	ldw	fp,0(sp)
10017238:	dec00104 	addi	sp,sp,4
1001723c:	f800283a 	ret

10017240 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
10017240:	defffa04 	addi	sp,sp,-24
10017244:	df000515 	stw	fp,20(sp)
10017248:	df000504 	addi	fp,sp,20
1001724c:	e13ffd15 	stw	r4,-12(fp)
10017250:	e17ffe15 	stw	r5,-8(fp)
10017254:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
10017258:	d0a02304 	addi	r2,gp,-32628
1001725c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10017260:	e0bffd17 	ldw	r2,-12(fp)
10017264:	10800117 	ldw	r2,4(r2)
10017268:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
1001726c:	e0bffe17 	ldw	r2,-8(fp)
10017270:	100b883a 	mov	r5,r2
  r6 = len;
10017274:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
10017278:	003da07a 	break	1

  rc = r2;
1001727c:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
10017280:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
10017284:	e0bffc17 	ldw	r2,-16(fp)
10017288:	10000326 	beq	r2,zero,10017298 <alt_hostfs_write+0x58>
1001728c:	e0bffc17 	ldw	r2,-16(fp)
10017290:	0085c83a 	sub	r2,zero,r2
10017294:	00000106 	br	1001729c <alt_hostfs_write+0x5c>
10017298:	e0bffb17 	ldw	r2,-20(fp)
}
1001729c:	e037883a 	mov	sp,fp
100172a0:	df000017 	ldw	fp,0(sp)
100172a4:	dec00104 	addi	sp,sp,4
100172a8:	f800283a 	ret

100172ac <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
100172ac:	defffa04 	addi	sp,sp,-24
100172b0:	df000515 	stw	fp,20(sp)
100172b4:	df000504 	addi	fp,sp,20
100172b8:	e13ffd15 	stw	r4,-12(fp)
100172bc:	e17ffe15 	stw	r5,-8(fp)
100172c0:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
100172c4:	d0a02604 	addi	r2,gp,-32616
100172c8:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
100172cc:	e0bffd17 	ldw	r2,-12(fp)
100172d0:	10800117 	ldw	r2,4(r2)
100172d4:	1009883a 	mov	r4,r2
  r5 = ptr;
100172d8:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
100172dc:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
100172e0:	003da07a 	break	1

  rc = r2;
100172e4:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
100172e8:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
100172ec:	e0bffc17 	ldw	r2,-16(fp)
100172f0:	10000326 	beq	r2,zero,10017300 <alt_hostfs_seek+0x54>
100172f4:	e0bffc17 	ldw	r2,-16(fp)
100172f8:	0085c83a 	sub	r2,zero,r2
100172fc:	00000106 	br	10017304 <alt_hostfs_seek+0x58>
10017300:	e0bffb17 	ldw	r2,-20(fp)
}
10017304:	e037883a 	mov	sp,fp
10017308:	df000017 	ldw	fp,0(sp)
1001730c:	dec00104 	addi	sp,sp,4
10017310:	f800283a 	ret

10017314 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
10017314:	deffe904 	addi	sp,sp,-92
10017318:	df001615 	stw	fp,88(sp)
1001731c:	df001604 	addi	fp,sp,88
10017320:	e13ffe15 	stw	r4,-8(fp)
10017324:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
10017328:	d0a02904 	addi	r2,gp,-32604
1001732c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
10017330:	e0bffe17 	ldw	r2,-8(fp)
10017334:	10800117 	ldw	r2,4(r2)
10017338:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
1001733c:	e0bfee04 	addi	r2,fp,-72
10017340:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
10017344:	003da07a 	break	1

  rc = r2;
10017348:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
1001734c:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
10017350:	e0bfec17 	ldw	r2,-80(fp)
10017354:	1000621e 	bne	r2,zero,100174e0 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
10017358:	e0bfee04 	addi	r2,fp,-72
1001735c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
10017360:	e0bfea17 	ldw	r2,-88(fp)
10017364:	10801004 	addi	r2,r2,64
10017368:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
1001736c:	00001606 	br	100173c8 <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
10017370:	e0bfea17 	ldw	r2,-88(fp)
10017374:	10800017 	ldw	r2,0(r2)
10017378:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
1001737c:	e0bfea17 	ldw	r2,-88(fp)
10017380:	10800017 	ldw	r2,0(r2)
10017384:	10803fec 	andhi	r2,r2,255
10017388:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
1001738c:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
10017390:	e0bfea17 	ldw	r2,-88(fp)
10017394:	10800017 	ldw	r2,0(r2)
10017398:	10bfc00c 	andi	r2,r2,65280
1001739c:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
100173a0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
100173a4:	e0bfea17 	ldw	r2,-88(fp)
100173a8:	10800017 	ldw	r2,0(r2)
100173ac:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
100173b0:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
100173b4:	e0bfea17 	ldw	r2,-88(fp)
100173b8:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
100173bc:	e0bfea17 	ldw	r2,-88(fp)
100173c0:	10800104 	addi	r2,r2,4
100173c4:	e0bfea15 	stw	r2,-88(fp)
100173c8:	e0ffea17 	ldw	r3,-88(fp)
100173cc:	e0bfed17 	ldw	r2,-76(fp)
100173d0:	18bfe736 	bltu	r3,r2,10017370 <__alt_data_end+0xf8017370>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
100173d4:	e0bfff17 	ldw	r2,-4(fp)
100173d8:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
100173dc:	e0bfea17 	ldw	r2,-88(fp)
100173e0:	10800f04 	addi	r2,r2,60
100173e4:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
100173e8:	00000506 	br	10017400 <alt_hostfs_fstat+0xec>
      *ptr = 0;
100173ec:	e0bfea17 	ldw	r2,-88(fp)
100173f0:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
100173f4:	e0bfea17 	ldw	r2,-88(fp)
100173f8:	10800104 	addi	r2,r2,4
100173fc:	e0bfea15 	stw	r2,-88(fp)
10017400:	e0ffea17 	ldw	r3,-88(fp)
10017404:	e0bfed17 	ldw	r2,-76(fp)
10017408:	18bff836 	bltu	r3,r2,100173ec <__alt_data_end+0xf80173ec>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
1001740c:	e0bfee17 	ldw	r2,-72(fp)
10017410:	1007883a 	mov	r3,r2
10017414:	e0bfff17 	ldw	r2,-4(fp)
10017418:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
1001741c:	e0bfef17 	ldw	r2,-68(fp)
10017420:	1007883a 	mov	r3,r2
10017424:	e0bfff17 	ldw	r2,-4(fp)
10017428:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
1001742c:	e0fff017 	ldw	r3,-64(fp)
10017430:	e0bfff17 	ldw	r2,-4(fp)
10017434:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
10017438:	e0bff117 	ldw	r2,-60(fp)
1001743c:	1007883a 	mov	r3,r2
10017440:	e0bfff17 	ldw	r2,-4(fp)
10017444:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
10017448:	e0bff217 	ldw	r2,-56(fp)
1001744c:	1007883a 	mov	r3,r2
10017450:	e0bfff17 	ldw	r2,-4(fp)
10017454:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
10017458:	e0bff317 	ldw	r2,-52(fp)
1001745c:	1007883a 	mov	r3,r2
10017460:	e0bfff17 	ldw	r2,-4(fp)
10017464:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
10017468:	e0bff417 	ldw	r2,-48(fp)
1001746c:	1007883a 	mov	r3,r2
10017470:	e0bfff17 	ldw	r2,-4(fp)
10017474:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
10017478:	e0bff617 	ldw	r2,-40(fp)
1001747c:	1007883a 	mov	r3,r2
10017480:	e0bfff17 	ldw	r2,-4(fp)
10017484:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
10017488:	e0bffb17 	ldw	r2,-20(fp)
1001748c:	1007883a 	mov	r3,r2
10017490:	e0bfff17 	ldw	r2,-4(fp)
10017494:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
10017498:	e0bffc17 	ldw	r2,-16(fp)
1001749c:	1007883a 	mov	r3,r2
100174a0:	e0bfff17 	ldw	r2,-4(fp)
100174a4:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
100174a8:	e0bffd17 	ldw	r2,-12(fp)
100174ac:	1007883a 	mov	r3,r2
100174b0:	e0bfff17 	ldw	r2,-4(fp)
100174b4:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
100174b8:	e0bff817 	ldw	r2,-32(fp)
100174bc:	1007883a 	mov	r3,r2
100174c0:	e0bfff17 	ldw	r2,-4(fp)
100174c4:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
100174c8:	e0bffa17 	ldw	r2,-24(fp)
100174cc:	1007883a 	mov	r3,r2
100174d0:	e0bfff17 	ldw	r2,-4(fp)
100174d4:	10c00c15 	stw	r3,48(r2)

    return rc;
100174d8:	e0bfeb17 	ldw	r2,-84(fp)
100174dc:	00000206 	br	100174e8 <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
100174e0:	e0bfec17 	ldw	r2,-80(fp)
100174e4:	0085c83a 	sub	r2,zero,r2
}
100174e8:	e037883a 	mov	sp,fp
100174ec:	df000017 	ldw	fp,0(sp)
100174f0:	dec00104 	addi	sp,sp,4
100174f4:	f800283a 	ret

100174f8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100174f8:	defff504 	addi	sp,sp,-44
100174fc:	df000a15 	stw	fp,40(sp)
10017500:	df000a04 	addi	fp,sp,40
10017504:	e13ffc15 	stw	r4,-16(fp)
10017508:	e17ffd15 	stw	r5,-12(fp)
1001750c:	e1bffe15 	stw	r6,-8(fp)
10017510:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10017514:	e03ff615 	stw	zero,-40(fp)
10017518:	008403b4 	movhi	r2,4110
1001751c:	108b2d04 	addi	r2,r2,11444
10017520:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
10017524:	10003f26 	beq	r2,zero,10017624 <alt_alarm_start+0x12c>
  {
    if (alarm)
10017528:	e0bffc17 	ldw	r2,-16(fp)
1001752c:	10003b26 	beq	r2,zero,1001761c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
10017530:	e0bffc17 	ldw	r2,-16(fp)
10017534:	e0fffe17 	ldw	r3,-8(fp)
10017538:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
1001753c:	e0bffc17 	ldw	r2,-16(fp)
10017540:	e0ffff17 	ldw	r3,-4(fp)
10017544:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017548:	0005303a 	rdctl	r2,status
1001754c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017550:	e0fff917 	ldw	r3,-28(fp)
10017554:	00bfff84 	movi	r2,-2
10017558:	1884703a 	and	r2,r3,r2
1001755c:	1001703a 	wrctl	status,r2
  
  return context;
10017560:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10017564:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10017568:	008403b4 	movhi	r2,4110
1001756c:	108b2e04 	addi	r2,r2,11448
10017570:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
10017574:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10017578:	e0fffd17 	ldw	r3,-12(fp)
1001757c:	e0bff617 	ldw	r2,-40(fp)
10017580:	1885883a 	add	r2,r3,r2
10017584:	10c00044 	addi	r3,r2,1
10017588:	e0bffc17 	ldw	r2,-16(fp)
1001758c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10017590:	e0bffc17 	ldw	r2,-16(fp)
10017594:	10c00217 	ldw	r3,8(r2)
10017598:	e0bff617 	ldw	r2,-40(fp)
1001759c:	1880042e 	bgeu	r3,r2,100175b0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
100175a0:	e0bffc17 	ldw	r2,-16(fp)
100175a4:	00c00044 	movi	r3,1
100175a8:	10c00405 	stb	r3,16(r2)
100175ac:	00000206 	br	100175b8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
100175b0:	e0bffc17 	ldw	r2,-16(fp)
100175b4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
100175b8:	e0fffc17 	ldw	r3,-16(fp)
100175bc:	008403b4 	movhi	r2,4110
100175c0:	10a4e204 	addi	r2,r2,-27768
100175c4:	e0bffa15 	stw	r2,-24(fp)
100175c8:	e0fffb15 	stw	r3,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100175cc:	e0bffb17 	ldw	r2,-20(fp)
100175d0:	e0fffa17 	ldw	r3,-24(fp)
100175d4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100175d8:	e0bffa17 	ldw	r2,-24(fp)
100175dc:	10c00017 	ldw	r3,0(r2)
100175e0:	e0bffb17 	ldw	r2,-20(fp)
100175e4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100175e8:	e0bffa17 	ldw	r2,-24(fp)
100175ec:	10800017 	ldw	r2,0(r2)
100175f0:	e0fffb17 	ldw	r3,-20(fp)
100175f4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100175f8:	e0bffa17 	ldw	r2,-24(fp)
100175fc:	e0fffb17 	ldw	r3,-20(fp)
10017600:	10c00015 	stw	r3,0(r2)
10017604:	e0bff817 	ldw	r2,-32(fp)
10017608:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001760c:	e0bff717 	ldw	r2,-36(fp)
10017610:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10017614:	0005883a 	mov	r2,zero
10017618:	00000306 	br	10017628 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
1001761c:	00bffa84 	movi	r2,-22
10017620:	00000106 	br	10017628 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
10017624:	00bfde84 	movi	r2,-134
  }
}
10017628:	e037883a 	mov	sp,fp
1001762c:	df000017 	ldw	fp,0(sp)
10017630:	dec00104 	addi	sp,sp,4
10017634:	f800283a 	ret

10017638 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10017638:	deffff04 	addi	sp,sp,-4
1001763c:	df000015 	stw	fp,0(sp)
10017640:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10017644:	0001883a 	nop
10017648:	e037883a 	mov	sp,fp
1001764c:	df000017 	ldw	fp,0(sp)
10017650:	dec00104 	addi	sp,sp,4
10017654:	f800283a 	ret

10017658 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017658:	defffe04 	addi	sp,sp,-8
1001765c:	dfc00115 	stw	ra,4(sp)
10017660:	df000015 	stw	fp,0(sp)
10017664:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017668:	008403b4 	movhi	r2,4110
1001766c:	10a4e004 	addi	r2,r2,-27776
10017670:	10800017 	ldw	r2,0(r2)
10017674:	10000526 	beq	r2,zero,1001768c <alt_get_errno+0x34>
10017678:	008403b4 	movhi	r2,4110
1001767c:	10a4e004 	addi	r2,r2,-27776
10017680:	10800017 	ldw	r2,0(r2)
10017684:	103ee83a 	callr	r2
10017688:	00000206 	br	10017694 <alt_get_errno+0x3c>
1001768c:	008403b4 	movhi	r2,4110
10017690:	108b2104 	addi	r2,r2,11396
}
10017694:	e037883a 	mov	sp,fp
10017698:	dfc00117 	ldw	ra,4(sp)
1001769c:	df000017 	ldw	fp,0(sp)
100176a0:	dec00204 	addi	sp,sp,8
100176a4:	f800283a 	ret

100176a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100176a8:	defffa04 	addi	sp,sp,-24
100176ac:	dfc00515 	stw	ra,20(sp)
100176b0:	df000415 	stw	fp,16(sp)
100176b4:	df000404 	addi	fp,sp,16
100176b8:	e13ffe15 	stw	r4,-8(fp)
100176bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100176c0:	e0bffe17 	ldw	r2,-8(fp)
100176c4:	10000326 	beq	r2,zero,100176d4 <alt_dev_llist_insert+0x2c>
100176c8:	e0bffe17 	ldw	r2,-8(fp)
100176cc:	10800217 	ldw	r2,8(r2)
100176d0:	1000061e 	bne	r2,zero,100176ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100176d4:	00176580 	call	10017658 <alt_get_errno>
100176d8:	1007883a 	mov	r3,r2
100176dc:	00800584 	movi	r2,22
100176e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
100176e4:	00bffa84 	movi	r2,-22
100176e8:	00001306 	br	10017738 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
100176ec:	e0bffe17 	ldw	r2,-8(fp)
100176f0:	e0ffff17 	ldw	r3,-4(fp)
100176f4:	e0fffc15 	stw	r3,-16(fp)
100176f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
100176fc:	e0bffd17 	ldw	r2,-12(fp)
10017700:	e0fffc17 	ldw	r3,-16(fp)
10017704:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10017708:	e0bffc17 	ldw	r2,-16(fp)
1001770c:	10c00017 	ldw	r3,0(r2)
10017710:	e0bffd17 	ldw	r2,-12(fp)
10017714:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10017718:	e0bffc17 	ldw	r2,-16(fp)
1001771c:	10800017 	ldw	r2,0(r2)
10017720:	e0fffd17 	ldw	r3,-12(fp)
10017724:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10017728:	e0bffc17 	ldw	r2,-16(fp)
1001772c:	e0fffd17 	ldw	r3,-12(fp)
10017730:	10c00015 	stw	r3,0(r2)

  return 0;  
10017734:	0005883a 	mov	r2,zero
}
10017738:	e037883a 	mov	sp,fp
1001773c:	dfc00117 	ldw	ra,4(sp)
10017740:	df000017 	ldw	fp,0(sp)
10017744:	dec00204 	addi	sp,sp,8
10017748:	f800283a 	ret

1001774c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
1001774c:	defffd04 	addi	sp,sp,-12
10017750:	dfc00215 	stw	ra,8(sp)
10017754:	df000115 	stw	fp,4(sp)
10017758:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
1001775c:	008400b4 	movhi	r2,4098
10017760:	10a25704 	addi	r2,r2,-30372
10017764:	e0bfff15 	stw	r2,-4(fp)
10017768:	00000606 	br	10017784 <_do_ctors+0x38>
        (*ctor) (); 
1001776c:	e0bfff17 	ldw	r2,-4(fp)
10017770:	10800017 	ldw	r2,0(r2)
10017774:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10017778:	e0bfff17 	ldw	r2,-4(fp)
1001777c:	10bfff04 	addi	r2,r2,-4
10017780:	e0bfff15 	stw	r2,-4(fp)
10017784:	e0ffff17 	ldw	r3,-4(fp)
10017788:	008400b4 	movhi	r2,4098
1001778c:	10a25804 	addi	r2,r2,-30368
10017790:	18bff62e 	bgeu	r3,r2,1001776c <__alt_data_end+0xf801776c>
        (*ctor) (); 
}
10017794:	0001883a 	nop
10017798:	e037883a 	mov	sp,fp
1001779c:	dfc00117 	ldw	ra,4(sp)
100177a0:	df000017 	ldw	fp,0(sp)
100177a4:	dec00204 	addi	sp,sp,8
100177a8:	f800283a 	ret

100177ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100177ac:	defffd04 	addi	sp,sp,-12
100177b0:	dfc00215 	stw	ra,8(sp)
100177b4:	df000115 	stw	fp,4(sp)
100177b8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100177bc:	008400b4 	movhi	r2,4098
100177c0:	10a25704 	addi	r2,r2,-30372
100177c4:	e0bfff15 	stw	r2,-4(fp)
100177c8:	00000606 	br	100177e4 <_do_dtors+0x38>
        (*dtor) (); 
100177cc:	e0bfff17 	ldw	r2,-4(fp)
100177d0:	10800017 	ldw	r2,0(r2)
100177d4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100177d8:	e0bfff17 	ldw	r2,-4(fp)
100177dc:	10bfff04 	addi	r2,r2,-4
100177e0:	e0bfff15 	stw	r2,-4(fp)
100177e4:	e0ffff17 	ldw	r3,-4(fp)
100177e8:	008400b4 	movhi	r2,4098
100177ec:	10a25804 	addi	r2,r2,-30368
100177f0:	18bff62e 	bgeu	r3,r2,100177cc <__alt_data_end+0xf80177cc>
        (*dtor) (); 
}
100177f4:	0001883a 	nop
100177f8:	e037883a 	mov	sp,fp
100177fc:	dfc00117 	ldw	ra,4(sp)
10017800:	df000017 	ldw	fp,0(sp)
10017804:	dec00204 	addi	sp,sp,8
10017808:	f800283a 	ret

1001780c <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
1001780c:	defffc04 	addi	sp,sp,-16
10017810:	df000315 	stw	fp,12(sp)
10017814:	df000304 	addi	fp,sp,12
10017818:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
1001781c:	e0bfff17 	ldw	r2,-4(fp)
10017820:	10800217 	ldw	r2,8(r2)
10017824:	1000021e 	bne	r2,zero,10017830 <alt_fs_reg+0x24>
  {
    return -ENODEV;
10017828:	00bffb44 	movi	r2,-19
1001782c:	00001406 	br	10017880 <alt_fs_reg+0x74>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
10017830:	e0ffff17 	ldw	r3,-4(fp)
10017834:	008403b4 	movhi	r2,4110
10017838:	10a4db04 	addi	r2,r2,-27796
1001783c:	e0bffd15 	stw	r2,-12(fp)
10017840:	e0fffe15 	stw	r3,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10017844:	e0bffe17 	ldw	r2,-8(fp)
10017848:	e0fffd17 	ldw	r3,-12(fp)
1001784c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10017850:	e0bffd17 	ldw	r2,-12(fp)
10017854:	10c00017 	ldw	r3,0(r2)
10017858:	e0bffe17 	ldw	r2,-8(fp)
1001785c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10017860:	e0bffd17 	ldw	r2,-12(fp)
10017864:	10800017 	ldw	r2,0(r2)
10017868:	e0fffe17 	ldw	r3,-8(fp)
1001786c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10017870:	e0bffd17 	ldw	r2,-12(fp)
10017874:	e0fffe17 	ldw	r3,-8(fp)
10017878:	10c00015 	stw	r3,0(r2)

  return 0;
1001787c:	0005883a 	mov	r2,zero
} 
10017880:	e037883a 	mov	sp,fp
10017884:	df000017 	ldw	fp,0(sp)
10017888:	dec00104 	addi	sp,sp,4
1001788c:	f800283a 	ret

10017890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10017890:	deffff04 	addi	sp,sp,-4
10017894:	df000015 	stw	fp,0(sp)
10017898:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001789c:	0001883a 	nop
100178a0:	e037883a 	mov	sp,fp
100178a4:	df000017 	ldw	fp,0(sp)
100178a8:	dec00104 	addi	sp,sp,4
100178ac:	f800283a 	ret

100178b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
100178b0:	defff904 	addi	sp,sp,-28
100178b4:	dfc00615 	stw	ra,24(sp)
100178b8:	df000515 	stw	fp,20(sp)
100178bc:	df000504 	addi	fp,sp,20
100178c0:	e13ffc15 	stw	r4,-16(fp)
100178c4:	e17ffd15 	stw	r5,-12(fp)
100178c8:	e1bffe15 	stw	r6,-8(fp)
100178cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
100178d0:	e0800217 	ldw	r2,8(fp)
100178d4:	d8800015 	stw	r2,0(sp)
100178d8:	e1ffff17 	ldw	r7,-4(fp)
100178dc:	e1bffe17 	ldw	r6,-8(fp)
100178e0:	e17ffd17 	ldw	r5,-12(fp)
100178e4:	e13ffc17 	ldw	r4,-16(fp)
100178e8:	0017a900 	call	10017a90 <alt_iic_isr_register>
}  
100178ec:	e037883a 	mov	sp,fp
100178f0:	dfc00117 	ldw	ra,4(sp)
100178f4:	df000017 	ldw	fp,0(sp)
100178f8:	dec00204 	addi	sp,sp,8
100178fc:	f800283a 	ret

10017900 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
10017900:	defff904 	addi	sp,sp,-28
10017904:	df000615 	stw	fp,24(sp)
10017908:	df000604 	addi	fp,sp,24
1001790c:	e13ffe15 	stw	r4,-8(fp)
10017910:	e17fff15 	stw	r5,-4(fp)
10017914:	e0bfff17 	ldw	r2,-4(fp)
10017918:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1001791c:	0005303a 	rdctl	r2,status
10017920:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017924:	e0fffb17 	ldw	r3,-20(fp)
10017928:	00bfff84 	movi	r2,-2
1001792c:	1884703a 	and	r2,r3,r2
10017930:	1001703a 	wrctl	status,r2
  
  return context;
10017934:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10017938:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
1001793c:	00c00044 	movi	r3,1
10017940:	e0bffa17 	ldw	r2,-24(fp)
10017944:	1884983a 	sll	r2,r3,r2
10017948:	1007883a 	mov	r3,r2
1001794c:	008403b4 	movhi	r2,4110
10017950:	108b2f04 	addi	r2,r2,11452
10017954:	10800017 	ldw	r2,0(r2)
10017958:	1886b03a 	or	r3,r3,r2
1001795c:	008403b4 	movhi	r2,4110
10017960:	108b2f04 	addi	r2,r2,11452
10017964:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10017968:	008403b4 	movhi	r2,4110
1001796c:	108b2f04 	addi	r2,r2,11452
10017970:	10800017 	ldw	r2,0(r2)
10017974:	100170fa 	wrctl	ienable,r2
10017978:	e0bffc17 	ldw	r2,-16(fp)
1001797c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017980:	e0bffd17 	ldw	r2,-12(fp)
10017984:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10017988:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1001798c:	0001883a 	nop
}
10017990:	e037883a 	mov	sp,fp
10017994:	df000017 	ldw	fp,0(sp)
10017998:	dec00104 	addi	sp,sp,4
1001799c:	f800283a 	ret

100179a0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
100179a0:	defff904 	addi	sp,sp,-28
100179a4:	df000615 	stw	fp,24(sp)
100179a8:	df000604 	addi	fp,sp,24
100179ac:	e13ffe15 	stw	r4,-8(fp)
100179b0:	e17fff15 	stw	r5,-4(fp)
100179b4:	e0bfff17 	ldw	r2,-4(fp)
100179b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100179bc:	0005303a 	rdctl	r2,status
100179c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100179c4:	e0fffb17 	ldw	r3,-20(fp)
100179c8:	00bfff84 	movi	r2,-2
100179cc:	1884703a 	and	r2,r3,r2
100179d0:	1001703a 	wrctl	status,r2
  
  return context;
100179d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100179d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
100179dc:	00c00044 	movi	r3,1
100179e0:	e0bffa17 	ldw	r2,-24(fp)
100179e4:	1884983a 	sll	r2,r3,r2
100179e8:	0084303a 	nor	r2,zero,r2
100179ec:	1007883a 	mov	r3,r2
100179f0:	008403b4 	movhi	r2,4110
100179f4:	108b2f04 	addi	r2,r2,11452
100179f8:	10800017 	ldw	r2,0(r2)
100179fc:	1886703a 	and	r3,r3,r2
10017a00:	008403b4 	movhi	r2,4110
10017a04:	108b2f04 	addi	r2,r2,11452
10017a08:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10017a0c:	008403b4 	movhi	r2,4110
10017a10:	108b2f04 	addi	r2,r2,11452
10017a14:	10800017 	ldw	r2,0(r2)
10017a18:	100170fa 	wrctl	ienable,r2
10017a1c:	e0bffc17 	ldw	r2,-16(fp)
10017a20:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017a24:	e0bffd17 	ldw	r2,-12(fp)
10017a28:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10017a2c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
10017a30:	0001883a 	nop
}
10017a34:	e037883a 	mov	sp,fp
10017a38:	df000017 	ldw	fp,0(sp)
10017a3c:	dec00104 	addi	sp,sp,4
10017a40:	f800283a 	ret

10017a44 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
10017a44:	defffc04 	addi	sp,sp,-16
10017a48:	df000315 	stw	fp,12(sp)
10017a4c:	df000304 	addi	fp,sp,12
10017a50:	e13ffe15 	stw	r4,-8(fp)
10017a54:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
10017a58:	000530fa 	rdctl	r2,ienable
10017a5c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
10017a60:	00c00044 	movi	r3,1
10017a64:	e0bfff17 	ldw	r2,-4(fp)
10017a68:	1884983a 	sll	r2,r3,r2
10017a6c:	1007883a 	mov	r3,r2
10017a70:	e0bffd17 	ldw	r2,-12(fp)
10017a74:	1884703a 	and	r2,r3,r2
10017a78:	1004c03a 	cmpne	r2,r2,zero
10017a7c:	10803fcc 	andi	r2,r2,255
}
10017a80:	e037883a 	mov	sp,fp
10017a84:	df000017 	ldw	fp,0(sp)
10017a88:	dec00104 	addi	sp,sp,4
10017a8c:	f800283a 	ret

10017a90 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10017a90:	defff504 	addi	sp,sp,-44
10017a94:	dfc00a15 	stw	ra,40(sp)
10017a98:	df000915 	stw	fp,36(sp)
10017a9c:	df000904 	addi	fp,sp,36
10017aa0:	e13ffc15 	stw	r4,-16(fp)
10017aa4:	e17ffd15 	stw	r5,-12(fp)
10017aa8:	e1bffe15 	stw	r6,-8(fp)
10017aac:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10017ab0:	00bffa84 	movi	r2,-22
10017ab4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10017ab8:	e0bffd17 	ldw	r2,-12(fp)
10017abc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10017ac0:	e0bff817 	ldw	r2,-32(fp)
10017ac4:	10800808 	cmpgei	r2,r2,32
10017ac8:	1000271e 	bne	r2,zero,10017b68 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10017acc:	0005303a 	rdctl	r2,status
10017ad0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10017ad4:	e0fffb17 	ldw	r3,-20(fp)
10017ad8:	00bfff84 	movi	r2,-2
10017adc:	1884703a 	and	r2,r3,r2
10017ae0:	1001703a 	wrctl	status,r2
  
  return context;
10017ae4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10017ae8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10017aec:	008403b4 	movhi	r2,4110
10017af0:	108b5504 	addi	r2,r2,11604
10017af4:	e0fff817 	ldw	r3,-32(fp)
10017af8:	180690fa 	slli	r3,r3,3
10017afc:	10c5883a 	add	r2,r2,r3
10017b00:	e0fffe17 	ldw	r3,-8(fp)
10017b04:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10017b08:	008403b4 	movhi	r2,4110
10017b0c:	108b5504 	addi	r2,r2,11604
10017b10:	e0fff817 	ldw	r3,-32(fp)
10017b14:	180690fa 	slli	r3,r3,3
10017b18:	10c5883a 	add	r2,r2,r3
10017b1c:	10800104 	addi	r2,r2,4
10017b20:	e0ffff17 	ldw	r3,-4(fp)
10017b24:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
10017b28:	e0bffe17 	ldw	r2,-8(fp)
10017b2c:	10000526 	beq	r2,zero,10017b44 <alt_iic_isr_register+0xb4>
10017b30:	e0bff817 	ldw	r2,-32(fp)
10017b34:	100b883a 	mov	r5,r2
10017b38:	e13ffc17 	ldw	r4,-16(fp)
10017b3c:	00179000 	call	10017900 <alt_ic_irq_enable>
10017b40:	00000406 	br	10017b54 <alt_iic_isr_register+0xc4>
10017b44:	e0bff817 	ldw	r2,-32(fp)
10017b48:	100b883a 	mov	r5,r2
10017b4c:	e13ffc17 	ldw	r4,-16(fp)
10017b50:	00179a00 	call	100179a0 <alt_ic_irq_disable>
10017b54:	e0bff715 	stw	r2,-36(fp)
10017b58:	e0bffa17 	ldw	r2,-24(fp)
10017b5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10017b60:	e0bff917 	ldw	r2,-28(fp)
10017b64:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10017b68:	e0bff717 	ldw	r2,-36(fp)
}
10017b6c:	e037883a 	mov	sp,fp
10017b70:	dfc00117 	ldw	ra,4(sp)
10017b74:	df000017 	ldw	fp,0(sp)
10017b78:	dec00204 	addi	sp,sp,8
10017b7c:	f800283a 	ret

10017b80 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10017b80:	defff804 	addi	sp,sp,-32
10017b84:	dfc00715 	stw	ra,28(sp)
10017b88:	df000615 	stw	fp,24(sp)
10017b8c:	dc000515 	stw	r16,20(sp)
10017b90:	df000604 	addi	fp,sp,24
10017b94:	e13ffb15 	stw	r4,-20(fp)
10017b98:	e17ffc15 	stw	r5,-16(fp)
10017b9c:	e1bffd15 	stw	r6,-12(fp)
10017ba0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10017ba4:	e1bffe17 	ldw	r6,-8(fp)
10017ba8:	e17ffd17 	ldw	r5,-12(fp)
10017bac:	e13ffc17 	ldw	r4,-16(fp)
10017bb0:	0017e240 	call	10017e24 <open>
10017bb4:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10017bb8:	e0bffa17 	ldw	r2,-24(fp)
10017bbc:	10002216 	blt	r2,zero,10017c48 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10017bc0:	040403b4 	movhi	r16,4110
10017bc4:	84204804 	addi	r16,r16,-32480
10017bc8:	e0bffa17 	ldw	r2,-24(fp)
10017bcc:	01400304 	movi	r5,12
10017bd0:	1009883a 	mov	r4,r2
10017bd4:	00065d80 	call	100065d8 <__mulsi3>
10017bd8:	8085883a 	add	r2,r16,r2
10017bdc:	10c00017 	ldw	r3,0(r2)
10017be0:	e0bffb17 	ldw	r2,-20(fp)
10017be4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10017be8:	040403b4 	movhi	r16,4110
10017bec:	84204804 	addi	r16,r16,-32480
10017bf0:	e0bffa17 	ldw	r2,-24(fp)
10017bf4:	01400304 	movi	r5,12
10017bf8:	1009883a 	mov	r4,r2
10017bfc:	00065d80 	call	100065d8 <__mulsi3>
10017c00:	8085883a 	add	r2,r16,r2
10017c04:	10800104 	addi	r2,r2,4
10017c08:	10c00017 	ldw	r3,0(r2)
10017c0c:	e0bffb17 	ldw	r2,-20(fp)
10017c10:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
10017c14:	040403b4 	movhi	r16,4110
10017c18:	84204804 	addi	r16,r16,-32480
10017c1c:	e0bffa17 	ldw	r2,-24(fp)
10017c20:	01400304 	movi	r5,12
10017c24:	1009883a 	mov	r4,r2
10017c28:	00065d80 	call	100065d8 <__mulsi3>
10017c2c:	8085883a 	add	r2,r16,r2
10017c30:	10800204 	addi	r2,r2,8
10017c34:	10c00017 	ldw	r3,0(r2)
10017c38:	e0bffb17 	ldw	r2,-20(fp)
10017c3c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
10017c40:	e13ffa17 	ldw	r4,-24(fp)
10017c44:	001610c0 	call	1001610c <alt_release_fd>
  }
} 
10017c48:	0001883a 	nop
10017c4c:	e6ffff04 	addi	sp,fp,-4
10017c50:	dfc00217 	ldw	ra,8(sp)
10017c54:	df000117 	ldw	fp,4(sp)
10017c58:	dc000017 	ldw	r16,0(sp)
10017c5c:	dec00304 	addi	sp,sp,12
10017c60:	f800283a 	ret

10017c64 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
10017c64:	defffb04 	addi	sp,sp,-20
10017c68:	dfc00415 	stw	ra,16(sp)
10017c6c:	df000315 	stw	fp,12(sp)
10017c70:	df000304 	addi	fp,sp,12
10017c74:	e13ffd15 	stw	r4,-12(fp)
10017c78:	e17ffe15 	stw	r5,-8(fp)
10017c7c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10017c80:	01c07fc4 	movi	r7,511
10017c84:	01800044 	movi	r6,1
10017c88:	e17ffd17 	ldw	r5,-12(fp)
10017c8c:	010403b4 	movhi	r4,4110
10017c90:	21204b04 	addi	r4,r4,-32468
10017c94:	0017b800 	call	10017b80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10017c98:	01c07fc4 	movi	r7,511
10017c9c:	000d883a 	mov	r6,zero
10017ca0:	e17ffe17 	ldw	r5,-8(fp)
10017ca4:	010403b4 	movhi	r4,4110
10017ca8:	21204804 	addi	r4,r4,-32480
10017cac:	0017b800 	call	10017b80 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10017cb0:	01c07fc4 	movi	r7,511
10017cb4:	01800044 	movi	r6,1
10017cb8:	e17fff17 	ldw	r5,-4(fp)
10017cbc:	010403b4 	movhi	r4,4110
10017cc0:	21204e04 	addi	r4,r4,-32456
10017cc4:	0017b800 	call	10017b80 <alt_open_fd>
}  
10017cc8:	0001883a 	nop
10017ccc:	e037883a 	mov	sp,fp
10017cd0:	dfc00117 	ldw	ra,4(sp)
10017cd4:	df000017 	ldw	fp,0(sp)
10017cd8:	dec00204 	addi	sp,sp,8
10017cdc:	f800283a 	ret

10017ce0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10017ce0:	defffe04 	addi	sp,sp,-8
10017ce4:	dfc00115 	stw	ra,4(sp)
10017ce8:	df000015 	stw	fp,0(sp)
10017cec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10017cf0:	008403b4 	movhi	r2,4110
10017cf4:	10a4e004 	addi	r2,r2,-27776
10017cf8:	10800017 	ldw	r2,0(r2)
10017cfc:	10000526 	beq	r2,zero,10017d14 <alt_get_errno+0x34>
10017d00:	008403b4 	movhi	r2,4110
10017d04:	10a4e004 	addi	r2,r2,-27776
10017d08:	10800017 	ldw	r2,0(r2)
10017d0c:	103ee83a 	callr	r2
10017d10:	00000206 	br	10017d1c <alt_get_errno+0x3c>
10017d14:	008403b4 	movhi	r2,4110
10017d18:	108b2104 	addi	r2,r2,11396
}
10017d1c:	e037883a 	mov	sp,fp
10017d20:	dfc00117 	ldw	ra,4(sp)
10017d24:	df000017 	ldw	fp,0(sp)
10017d28:	dec00204 	addi	sp,sp,8
10017d2c:	f800283a 	ret

10017d30 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
10017d30:	defffb04 	addi	sp,sp,-20
10017d34:	dfc00415 	stw	ra,16(sp)
10017d38:	df000315 	stw	fp,12(sp)
10017d3c:	dc000215 	stw	r16,8(sp)
10017d40:	df000304 	addi	fp,sp,12
10017d44:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
10017d48:	e0bffe17 	ldw	r2,-8(fp)
10017d4c:	10800217 	ldw	r2,8(r2)
10017d50:	10d00034 	orhi	r3,r2,16384
10017d54:	e0bffe17 	ldw	r2,-8(fp)
10017d58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017d5c:	e03ffd15 	stw	zero,-12(fp)
10017d60:	00002306 	br	10017df0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017d64:	040403b4 	movhi	r16,4110
10017d68:	84204804 	addi	r16,r16,-32480
10017d6c:	e0bffd17 	ldw	r2,-12(fp)
10017d70:	01400304 	movi	r5,12
10017d74:	1009883a 	mov	r4,r2
10017d78:	00065d80 	call	100065d8 <__mulsi3>
10017d7c:	8085883a 	add	r2,r16,r2
10017d80:	10c00017 	ldw	r3,0(r2)
10017d84:	e0bffe17 	ldw	r2,-8(fp)
10017d88:	10800017 	ldw	r2,0(r2)
10017d8c:	1880151e 	bne	r3,r2,10017de4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017d90:	040403b4 	movhi	r16,4110
10017d94:	84204804 	addi	r16,r16,-32480
10017d98:	e0bffd17 	ldw	r2,-12(fp)
10017d9c:	01400304 	movi	r5,12
10017da0:	1009883a 	mov	r4,r2
10017da4:	00065d80 	call	100065d8 <__mulsi3>
10017da8:	8085883a 	add	r2,r16,r2
10017dac:	10800204 	addi	r2,r2,8
10017db0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10017db4:	10000b0e 	bge	r2,zero,10017de4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10017db8:	01400304 	movi	r5,12
10017dbc:	e13ffd17 	ldw	r4,-12(fp)
10017dc0:	00065d80 	call	100065d8 <__mulsi3>
10017dc4:	1007883a 	mov	r3,r2
10017dc8:	008403b4 	movhi	r2,4110
10017dcc:	10a04804 	addi	r2,r2,-32480
10017dd0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10017dd4:	e0bffe17 	ldw	r2,-8(fp)
10017dd8:	18800226 	beq	r3,r2,10017de4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10017ddc:	00bffcc4 	movi	r2,-13
10017de0:	00000a06 	br	10017e0c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10017de4:	e0bffd17 	ldw	r2,-12(fp)
10017de8:	10800044 	addi	r2,r2,1
10017dec:	e0bffd15 	stw	r2,-12(fp)
10017df0:	008403b4 	movhi	r2,4110
10017df4:	10a4df04 	addi	r2,r2,-27780
10017df8:	10800017 	ldw	r2,0(r2)
10017dfc:	1007883a 	mov	r3,r2
10017e00:	e0bffd17 	ldw	r2,-12(fp)
10017e04:	18bfd72e 	bgeu	r3,r2,10017d64 <__alt_data_end+0xf8017d64>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10017e08:	0005883a 	mov	r2,zero
}
10017e0c:	e6ffff04 	addi	sp,fp,-4
10017e10:	dfc00217 	ldw	ra,8(sp)
10017e14:	df000117 	ldw	fp,4(sp)
10017e18:	dc000017 	ldw	r16,0(sp)
10017e1c:	dec00304 	addi	sp,sp,12
10017e20:	f800283a 	ret

10017e24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10017e24:	defff604 	addi	sp,sp,-40
10017e28:	dfc00915 	stw	ra,36(sp)
10017e2c:	df000815 	stw	fp,32(sp)
10017e30:	df000804 	addi	fp,sp,32
10017e34:	e13ffd15 	stw	r4,-12(fp)
10017e38:	e17ffe15 	stw	r5,-8(fp)
10017e3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10017e40:	00bfffc4 	movi	r2,-1
10017e44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10017e48:	00bffb44 	movi	r2,-19
10017e4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10017e50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10017e54:	014403b4 	movhi	r5,4110
10017e58:	2964dd04 	addi	r5,r5,-27788
10017e5c:	e13ffd17 	ldw	r4,-12(fp)
10017e60:	0017fa80 	call	10017fa8 <alt_find_dev>
10017e64:	e0bff815 	stw	r2,-32(fp)
10017e68:	e0bff817 	ldw	r2,-32(fp)
10017e6c:	1000051e 	bne	r2,zero,10017e84 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10017e70:	e13ffd17 	ldw	r4,-12(fp)
10017e74:	00180380 	call	10018038 <alt_find_file>
10017e78:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10017e7c:	00800044 	movi	r2,1
10017e80:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10017e84:	e0bff817 	ldw	r2,-32(fp)
10017e88:	10002b26 	beq	r2,zero,10017f38 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10017e8c:	e13ff817 	ldw	r4,-32(fp)
10017e90:	001814c0 	call	1001814c <alt_get_fd>
10017e94:	e0bff915 	stw	r2,-28(fp)
10017e98:	e0bff917 	ldw	r2,-28(fp)
10017e9c:	1000030e 	bge	r2,zero,10017eac <open+0x88>
    {
      status = index;
10017ea0:	e0bff917 	ldw	r2,-28(fp)
10017ea4:	e0bffa15 	stw	r2,-24(fp)
10017ea8:	00002506 	br	10017f40 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10017eac:	01400304 	movi	r5,12
10017eb0:	e13ff917 	ldw	r4,-28(fp)
10017eb4:	00065d80 	call	100065d8 <__mulsi3>
10017eb8:	1007883a 	mov	r3,r2
10017ebc:	008403b4 	movhi	r2,4110
10017ec0:	10a04804 	addi	r2,r2,-32480
10017ec4:	1885883a 	add	r2,r3,r2
10017ec8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10017ecc:	e0fffe17 	ldw	r3,-8(fp)
10017ed0:	00900034 	movhi	r2,16384
10017ed4:	10bfffc4 	addi	r2,r2,-1
10017ed8:	1886703a 	and	r3,r3,r2
10017edc:	e0bffc17 	ldw	r2,-16(fp)
10017ee0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10017ee4:	e0bffb17 	ldw	r2,-20(fp)
10017ee8:	1000051e 	bne	r2,zero,10017f00 <open+0xdc>
10017eec:	e13ffc17 	ldw	r4,-16(fp)
10017ef0:	0017d300 	call	10017d30 <alt_file_locked>
10017ef4:	e0bffa15 	stw	r2,-24(fp)
10017ef8:	e0bffa17 	ldw	r2,-24(fp)
10017efc:	10001016 	blt	r2,zero,10017f40 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10017f00:	e0bff817 	ldw	r2,-32(fp)
10017f04:	10800317 	ldw	r2,12(r2)
10017f08:	10000826 	beq	r2,zero,10017f2c <open+0x108>
10017f0c:	e0bff817 	ldw	r2,-32(fp)
10017f10:	10800317 	ldw	r2,12(r2)
10017f14:	e1ffff17 	ldw	r7,-4(fp)
10017f18:	e1bffe17 	ldw	r6,-8(fp)
10017f1c:	e17ffd17 	ldw	r5,-12(fp)
10017f20:	e13ffc17 	ldw	r4,-16(fp)
10017f24:	103ee83a 	callr	r2
10017f28:	00000106 	br	10017f30 <open+0x10c>
10017f2c:	0005883a 	mov	r2,zero
10017f30:	e0bffa15 	stw	r2,-24(fp)
10017f34:	00000206 	br	10017f40 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10017f38:	00bffb44 	movi	r2,-19
10017f3c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10017f40:	e0bffa17 	ldw	r2,-24(fp)
10017f44:	1000090e 	bge	r2,zero,10017f6c <open+0x148>
  {
    alt_release_fd (index);  
10017f48:	e13ff917 	ldw	r4,-28(fp)
10017f4c:	001610c0 	call	1001610c <alt_release_fd>
    ALT_ERRNO = -status;
10017f50:	0017ce00 	call	10017ce0 <alt_get_errno>
10017f54:	1007883a 	mov	r3,r2
10017f58:	e0bffa17 	ldw	r2,-24(fp)
10017f5c:	0085c83a 	sub	r2,zero,r2
10017f60:	18800015 	stw	r2,0(r3)
    return -1;
10017f64:	00bfffc4 	movi	r2,-1
10017f68:	00000106 	br	10017f70 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10017f6c:	e0bff917 	ldw	r2,-28(fp)
}
10017f70:	e037883a 	mov	sp,fp
10017f74:	dfc00117 	ldw	ra,4(sp)
10017f78:	df000017 	ldw	fp,0(sp)
10017f7c:	dec00204 	addi	sp,sp,8
10017f80:	f800283a 	ret

10017f84 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10017f84:	deffff04 	addi	sp,sp,-4
10017f88:	df000015 	stw	fp,0(sp)
10017f8c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10017f90:	000170fa 	wrctl	ienable,zero
}
10017f94:	0001883a 	nop
10017f98:	e037883a 	mov	sp,fp
10017f9c:	df000017 	ldw	fp,0(sp)
10017fa0:	dec00104 	addi	sp,sp,4
10017fa4:	f800283a 	ret

10017fa8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10017fa8:	defffa04 	addi	sp,sp,-24
10017fac:	dfc00515 	stw	ra,20(sp)
10017fb0:	df000415 	stw	fp,16(sp)
10017fb4:	df000404 	addi	fp,sp,16
10017fb8:	e13ffe15 	stw	r4,-8(fp)
10017fbc:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10017fc0:	e0bfff17 	ldw	r2,-4(fp)
10017fc4:	10800017 	ldw	r2,0(r2)
10017fc8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10017fcc:	e13ffe17 	ldw	r4,-8(fp)
10017fd0:	00094580 	call	10009458 <strlen>
10017fd4:	10800044 	addi	r2,r2,1
10017fd8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10017fdc:	00000d06 	br	10018014 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10017fe0:	e0bffc17 	ldw	r2,-16(fp)
10017fe4:	10800217 	ldw	r2,8(r2)
10017fe8:	e0fffd17 	ldw	r3,-12(fp)
10017fec:	180d883a 	mov	r6,r3
10017ff0:	e17ffe17 	ldw	r5,-8(fp)
10017ff4:	1009883a 	mov	r4,r2
10017ff8:	00183580 	call	10018358 <memcmp>
10017ffc:	1000021e 	bne	r2,zero,10018008 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10018000:	e0bffc17 	ldw	r2,-16(fp)
10018004:	00000706 	br	10018024 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10018008:	e0bffc17 	ldw	r2,-16(fp)
1001800c:	10800017 	ldw	r2,0(r2)
10018010:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10018014:	e0fffc17 	ldw	r3,-16(fp)
10018018:	e0bfff17 	ldw	r2,-4(fp)
1001801c:	18bff01e 	bne	r3,r2,10017fe0 <__alt_data_end+0xf8017fe0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10018020:	0005883a 	mov	r2,zero
}
10018024:	e037883a 	mov	sp,fp
10018028:	dfc00117 	ldw	ra,4(sp)
1001802c:	df000017 	ldw	fp,0(sp)
10018030:	dec00204 	addi	sp,sp,8
10018034:	f800283a 	ret

10018038 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10018038:	defffb04 	addi	sp,sp,-20
1001803c:	dfc00415 	stw	ra,16(sp)
10018040:	df000315 	stw	fp,12(sp)
10018044:	df000304 	addi	fp,sp,12
10018048:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
1001804c:	008403b4 	movhi	r2,4110
10018050:	10a4db04 	addi	r2,r2,-27796
10018054:	10800017 	ldw	r2,0(r2)
10018058:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
1001805c:	00003106 	br	10018124 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10018060:	e0bffd17 	ldw	r2,-12(fp)
10018064:	10800217 	ldw	r2,8(r2)
10018068:	1009883a 	mov	r4,r2
1001806c:	00094580 	call	10009458 <strlen>
10018070:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10018074:	e0bffd17 	ldw	r2,-12(fp)
10018078:	10c00217 	ldw	r3,8(r2)
1001807c:	e0bffe17 	ldw	r2,-8(fp)
10018080:	10bfffc4 	addi	r2,r2,-1
10018084:	1885883a 	add	r2,r3,r2
10018088:	10800003 	ldbu	r2,0(r2)
1001808c:	10803fcc 	andi	r2,r2,255
10018090:	1080201c 	xori	r2,r2,128
10018094:	10bfe004 	addi	r2,r2,-128
10018098:	10800bd8 	cmpnei	r2,r2,47
1001809c:	1000031e 	bne	r2,zero,100180ac <alt_find_file+0x74>
    {
      len -= 1;
100180a0:	e0bffe17 	ldw	r2,-8(fp)
100180a4:	10bfffc4 	addi	r2,r2,-1
100180a8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
100180ac:	e0bffe17 	ldw	r2,-8(fp)
100180b0:	e0ffff17 	ldw	r3,-4(fp)
100180b4:	1885883a 	add	r2,r3,r2
100180b8:	10800003 	ldbu	r2,0(r2)
100180bc:	10803fcc 	andi	r2,r2,255
100180c0:	1080201c 	xori	r2,r2,128
100180c4:	10bfe004 	addi	r2,r2,-128
100180c8:	10800be0 	cmpeqi	r2,r2,47
100180cc:	1000081e 	bne	r2,zero,100180f0 <alt_find_file+0xb8>
100180d0:	e0bffe17 	ldw	r2,-8(fp)
100180d4:	e0ffff17 	ldw	r3,-4(fp)
100180d8:	1885883a 	add	r2,r3,r2
100180dc:	10800003 	ldbu	r2,0(r2)
100180e0:	10803fcc 	andi	r2,r2,255
100180e4:	1080201c 	xori	r2,r2,128
100180e8:	10bfe004 	addi	r2,r2,-128
100180ec:	10000a1e 	bne	r2,zero,10018118 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
100180f0:	e0bffd17 	ldw	r2,-12(fp)
100180f4:	10800217 	ldw	r2,8(r2)
100180f8:	e0fffe17 	ldw	r3,-8(fp)
100180fc:	180d883a 	mov	r6,r3
10018100:	e17fff17 	ldw	r5,-4(fp)
10018104:	1009883a 	mov	r4,r2
10018108:	00183580 	call	10018358 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
1001810c:	1000021e 	bne	r2,zero,10018118 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10018110:	e0bffd17 	ldw	r2,-12(fp)
10018114:	00000806 	br	10018138 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10018118:	e0bffd17 	ldw	r2,-12(fp)
1001811c:	10800017 	ldw	r2,0(r2)
10018120:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10018124:	e0fffd17 	ldw	r3,-12(fp)
10018128:	008403b4 	movhi	r2,4110
1001812c:	10a4db04 	addi	r2,r2,-27796
10018130:	18bfcb1e 	bne	r3,r2,10018060 <__alt_data_end+0xf8018060>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10018134:	0005883a 	mov	r2,zero
}
10018138:	e037883a 	mov	sp,fp
1001813c:	dfc00117 	ldw	ra,4(sp)
10018140:	df000017 	ldw	fp,0(sp)
10018144:	dec00204 	addi	sp,sp,8
10018148:	f800283a 	ret

1001814c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
1001814c:	defffa04 	addi	sp,sp,-24
10018150:	dfc00515 	stw	ra,20(sp)
10018154:	df000415 	stw	fp,16(sp)
10018158:	dc000315 	stw	r16,12(sp)
1001815c:	df000404 	addi	fp,sp,16
10018160:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10018164:	00bffa04 	movi	r2,-24
10018168:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
1001816c:	e03ffc15 	stw	zero,-16(fp)
10018170:	00002106 	br	100181f8 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10018174:	040403b4 	movhi	r16,4110
10018178:	84204804 	addi	r16,r16,-32480
1001817c:	e0bffc17 	ldw	r2,-16(fp)
10018180:	01400304 	movi	r5,12
10018184:	1009883a 	mov	r4,r2
10018188:	00065d80 	call	100065d8 <__mulsi3>
1001818c:	8085883a 	add	r2,r16,r2
10018190:	10800017 	ldw	r2,0(r2)
10018194:	1000151e 	bne	r2,zero,100181ec <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10018198:	040403b4 	movhi	r16,4110
1001819c:	84204804 	addi	r16,r16,-32480
100181a0:	e0bffc17 	ldw	r2,-16(fp)
100181a4:	01400304 	movi	r5,12
100181a8:	1009883a 	mov	r4,r2
100181ac:	00065d80 	call	100065d8 <__mulsi3>
100181b0:	8085883a 	add	r2,r16,r2
100181b4:	e0fffe17 	ldw	r3,-8(fp)
100181b8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
100181bc:	008403b4 	movhi	r2,4110
100181c0:	10a4df04 	addi	r2,r2,-27780
100181c4:	10c00017 	ldw	r3,0(r2)
100181c8:	e0bffc17 	ldw	r2,-16(fp)
100181cc:	1880040e 	bge	r3,r2,100181e0 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
100181d0:	008403b4 	movhi	r2,4110
100181d4:	10a4df04 	addi	r2,r2,-27780
100181d8:	e0fffc17 	ldw	r3,-16(fp)
100181dc:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
100181e0:	e0bffc17 	ldw	r2,-16(fp)
100181e4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
100181e8:	00000606 	br	10018204 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
100181ec:	e0bffc17 	ldw	r2,-16(fp)
100181f0:	10800044 	addi	r2,r2,1
100181f4:	e0bffc15 	stw	r2,-16(fp)
100181f8:	e0bffc17 	ldw	r2,-16(fp)
100181fc:	10800810 	cmplti	r2,r2,32
10018200:	103fdc1e 	bne	r2,zero,10018174 <__alt_data_end+0xf8018174>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10018204:	e0bffd17 	ldw	r2,-12(fp)
}
10018208:	e6ffff04 	addi	sp,fp,-4
1001820c:	dfc00217 	ldw	ra,8(sp)
10018210:	df000117 	ldw	fp,4(sp)
10018214:	dc000017 	ldw	r16,0(sp)
10018218:	dec00304 	addi	sp,sp,12
1001821c:	f800283a 	ret

10018220 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10018220:	defffe04 	addi	sp,sp,-8
10018224:	df000115 	stw	fp,4(sp)
10018228:	df000104 	addi	fp,sp,4
1001822c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10018230:	e0bfff17 	ldw	r2,-4(fp)
10018234:	10bffe84 	addi	r2,r2,-6
10018238:	10c00428 	cmpgeui	r3,r2,16
1001823c:	18001a1e 	bne	r3,zero,100182a8 <alt_exception_cause_generated_bad_addr+0x88>
10018240:	100690ba 	slli	r3,r2,2
10018244:	008400b4 	movhi	r2,4098
10018248:	10a09604 	addi	r2,r2,-32168
1001824c:	1885883a 	add	r2,r3,r2
10018250:	10800017 	ldw	r2,0(r2)
10018254:	1000683a 	jmp	r2
10018258:	10018298 	cmpnei	zero,r2,1546
1001825c:	10018298 	cmpnei	zero,r2,1546
10018260:	100182a8 	cmpgeui	zero,r2,1546
10018264:	100182a8 	cmpgeui	zero,r2,1546
10018268:	100182a8 	cmpgeui	zero,r2,1546
1001826c:	10018298 	cmpnei	zero,r2,1546
10018270:	100182a0 	cmpeqi	zero,r2,1546
10018274:	100182a8 	cmpgeui	zero,r2,1546
10018278:	10018298 	cmpnei	zero,r2,1546
1001827c:	10018298 	cmpnei	zero,r2,1546
10018280:	100182a8 	cmpgeui	zero,r2,1546
10018284:	10018298 	cmpnei	zero,r2,1546
10018288:	100182a0 	cmpeqi	zero,r2,1546
1001828c:	100182a8 	cmpgeui	zero,r2,1546
10018290:	100182a8 	cmpgeui	zero,r2,1546
10018294:	10018298 	cmpnei	zero,r2,1546
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10018298:	00800044 	movi	r2,1
1001829c:	00000306 	br	100182ac <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100182a0:	0005883a 	mov	r2,zero
100182a4:	00000106 	br	100182ac <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100182a8:	0005883a 	mov	r2,zero
  }
}
100182ac:	e037883a 	mov	sp,fp
100182b0:	df000017 	ldw	fp,0(sp)
100182b4:	dec00104 	addi	sp,sp,4
100182b8:	f800283a 	ret

100182bc <atexit>:

int
_DEFUN (atexit,
	(fn),
	_VOID _EXFNPTR(fn, (_VOID)))
{
100182bc:	defffd04 	addi	sp,sp,-12
100182c0:	dfc00215 	stw	ra,8(sp)
100182c4:	df000115 	stw	fp,4(sp)
100182c8:	df000104 	addi	fp,sp,4
100182cc:	e13fff15 	stw	r4,-4(fp)
  return __register_exitproc (__et_atexit, fn, NULL, NULL);
100182d0:	000f883a 	mov	r7,zero
100182d4:	000d883a 	mov	r6,zero
100182d8:	e17fff17 	ldw	r5,-4(fp)
100182dc:	0009883a 	mov	r4,zero
100182e0:	001848c0 	call	1001848c <__register_exitproc>
}
100182e4:	e037883a 	mov	sp,fp
100182e8:	dfc00117 	ldw	ra,4(sp)
100182ec:	df000017 	ldw	fp,0(sp)
100182f0:	dec00204 	addi	sp,sp,8
100182f4:	f800283a 	ret

100182f8 <exit>:
 */

void
_DEFUN (exit, (code),
	int code)
{
100182f8:	defffd04 	addi	sp,sp,-12
100182fc:	dfc00215 	stw	ra,8(sp)
10018300:	df000115 	stw	fp,4(sp)
10018304:	df000104 	addi	fp,sp,4
10018308:	e13fff15 	stw	r4,-4(fp)
#ifdef _LITE_EXIT
  /* Refer to comments in __atexit.c for more details of lite exit.  */
  void __call_exitprocs _PARAMS ((int, _PTR)) __attribute__((weak));
  if (__call_exitprocs)
#endif
    __call_exitprocs (code, NULL);
1001830c:	000b883a 	mov	r5,zero
10018310:	e13fff17 	ldw	r4,-4(fp)
10018314:	00186240 	call	10018624 <__call_exitprocs>

#ifndef WANT_SMALL_STDIO				/* AlteraSpecific */
  if (_GLOBAL_REENT->__cleanup)
10018318:	008403b4 	movhi	r2,4110
1001831c:	10a4cd04 	addi	r2,r2,-27852
10018320:	10800017 	ldw	r2,0(r2)
10018324:	10800f17 	ldw	r2,60(r2)
10018328:	10000926 	beq	r2,zero,10018350 <exit+0x58>
    (*_GLOBAL_REENT->__cleanup) (_GLOBAL_REENT);
1001832c:	008403b4 	movhi	r2,4110
10018330:	10a4cd04 	addi	r2,r2,-27852
10018334:	10800017 	ldw	r2,0(r2)
10018338:	10c00f17 	ldw	r3,60(r2)
1001833c:	008403b4 	movhi	r2,4110
10018340:	10a4cd04 	addi	r2,r2,-27852
10018344:	10800017 	ldw	r2,0(r2)
10018348:	1009883a 	mov	r4,r2
1001834c:	183ee83a 	callr	r3
#endif							/* AlteraSpecific */
  _exit (code);
10018350:	e13fff17 	ldw	r4,-4(fp)
10018354:	001892c0 	call	1001892c <_exit>

10018358 <memcmp>:
int
_DEFUN (memcmp, (m1, m2, n),
	_CONST _PTR m1 _AND
	_CONST _PTR m2 _AND
	size_t n)
{
10018358:	defff804 	addi	sp,sp,-32
1001835c:	df000715 	stw	fp,28(sp)
10018360:	df000704 	addi	fp,sp,28
10018364:	e13ffd15 	stw	r4,-12(fp)
10018368:	e17ffe15 	stw	r5,-8(fp)
1001836c:	e1bfff15 	stw	r6,-4(fp)
      s1++;
      s2++;
    }
  return 0;
#else  
  unsigned char *s1 = (unsigned char *) m1;
10018370:	e0bffd17 	ldw	r2,-12(fp)
10018374:	e0bff915 	stw	r2,-28(fp)
  unsigned char *s2 = (unsigned char *) m2;
10018378:	e0bffe17 	ldw	r2,-8(fp)
1001837c:	e0bffa15 	stw	r2,-24(fp)
  unsigned long *a2;

  /* If the size is too small, or either pointer is unaligned,
     then we punt to the byte compare loop.  Hopefully this will
     not turn up in inner loops.  */
  if (!TOO_SMALL(n) && !UNALIGNED(s1,s2))
10018380:	e0bfff17 	ldw	r2,-4(fp)
10018384:	10800130 	cmpltui	r2,r2,4
10018388:	1000371e 	bne	r2,zero,10018468 <memcmp+0x110>
1001838c:	e0fff917 	ldw	r3,-28(fp)
10018390:	e0bffa17 	ldw	r2,-24(fp)
10018394:	1884b03a 	or	r2,r3,r2
10018398:	108000cc 	andi	r2,r2,3
1001839c:	1000321e 	bne	r2,zero,10018468 <memcmp+0x110>
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
100183a0:	e0bff917 	ldw	r2,-28(fp)
100183a4:	e0bffb15 	stw	r2,-20(fp)
      a2 = (unsigned long*) s2;
100183a8:	e0bffa17 	ldw	r2,-24(fp)
100183ac:	e0bffc15 	stw	r2,-16(fp)
      while (n >= LBLOCKSIZE)
100183b0:	00000e06 	br	100183ec <memcmp+0x94>
        {
          if (*a1 != *a2) 
100183b4:	e0bffb17 	ldw	r2,-20(fp)
100183b8:	10c00017 	ldw	r3,0(r2)
100183bc:	e0bffc17 	ldw	r2,-16(fp)
100183c0:	10800017 	ldw	r2,0(r2)
100183c4:	18800d1e 	bne	r3,r2,100183fc <memcmp+0xa4>
   	    break;
          a1++;
100183c8:	e0bffb17 	ldw	r2,-20(fp)
100183cc:	10800104 	addi	r2,r2,4
100183d0:	e0bffb15 	stw	r2,-20(fp)
          a2++;
100183d4:	e0bffc17 	ldw	r2,-16(fp)
100183d8:	10800104 	addi	r2,r2,4
100183dc:	e0bffc15 	stw	r2,-16(fp)
          n -= LBLOCKSIZE;
100183e0:	e0bfff17 	ldw	r2,-4(fp)
100183e4:	10bfff04 	addi	r2,r2,-4
100183e8:	e0bfff15 	stw	r2,-4(fp)
    {
      /* Otherwise, load and compare the blocks of memory one 
         word at a time.  */
      a1 = (unsigned long*) s1;
      a2 = (unsigned long*) s2;
      while (n >= LBLOCKSIZE)
100183ec:	e0bfff17 	ldw	r2,-4(fp)
100183f0:	10800128 	cmpgeui	r2,r2,4
100183f4:	103fef1e 	bne	r2,zero,100183b4 <__alt_data_end+0xf80183b4>
100183f8:	00000106 	br	10018400 <memcmp+0xa8>
        {
          if (*a1 != *a2) 
   	    break;
100183fc:	0001883a 	nop
          n -= LBLOCKSIZE;
        }

      /* check m mod LBLOCKSIZE remaining characters */

      s1 = (unsigned char*)a1;
10018400:	e0bffb17 	ldw	r2,-20(fp)
10018404:	e0bff915 	stw	r2,-28(fp)
      s2 = (unsigned char*)a2;
10018408:	e0bffc17 	ldw	r2,-16(fp)
1001840c:	e0bffa15 	stw	r2,-24(fp)
    }

  while (n--)
10018410:	00001506 	br	10018468 <memcmp+0x110>
    {
      if (*s1 != *s2)
10018414:	e0bff917 	ldw	r2,-28(fp)
10018418:	10c00003 	ldbu	r3,0(r2)
1001841c:	e0bffa17 	ldw	r2,-24(fp)
10018420:	10800003 	ldbu	r2,0(r2)
10018424:	18c03fcc 	andi	r3,r3,255
10018428:	10803fcc 	andi	r2,r2,255
1001842c:	18800826 	beq	r3,r2,10018450 <memcmp+0xf8>
	return *s1 - *s2;
10018430:	e0bff917 	ldw	r2,-28(fp)
10018434:	10800003 	ldbu	r2,0(r2)
10018438:	10c03fcc 	andi	r3,r2,255
1001843c:	e0bffa17 	ldw	r2,-24(fp)
10018440:	10800003 	ldbu	r2,0(r2)
10018444:	10803fcc 	andi	r2,r2,255
10018448:	1885c83a 	sub	r2,r3,r2
1001844c:	00000b06 	br	1001847c <memcmp+0x124>
      s1++;
10018450:	e0bff917 	ldw	r2,-28(fp)
10018454:	10800044 	addi	r2,r2,1
10018458:	e0bff915 	stw	r2,-28(fp)
      s2++;
1001845c:	e0bffa17 	ldw	r2,-24(fp)
10018460:	10800044 	addi	r2,r2,1
10018464:	e0bffa15 	stw	r2,-24(fp)

      s1 = (unsigned char*)a1;
      s2 = (unsigned char*)a2;
    }

  while (n--)
10018468:	e0bfff17 	ldw	r2,-4(fp)
1001846c:	10ffffc4 	addi	r3,r2,-1
10018470:	e0ffff15 	stw	r3,-4(fp)
10018474:	103fe71e 	bne	r2,zero,10018414 <__alt_data_end+0xf8018414>
	return *s1 - *s2;
      s1++;
      s2++;
    }

  return 0;
10018478:	0005883a 	mov	r2,zero
#endif /* not PREFER_SIZE_OVER_SPEED */
}
1001847c:	e037883a 	mov	sp,fp
10018480:	df000017 	ldw	fp,0(sp)
10018484:	dec00104 	addi	sp,sp,4
10018488:	f800283a 	ret

1001848c <__register_exitproc>:
	(type, fn, arg, d),
	int type _AND
	void (*fn) (void) _AND
	void *arg _AND
	void *d)
{
1001848c:	defff804 	addi	sp,sp,-32
10018490:	dfc00715 	stw	ra,28(sp)
10018494:	df000615 	stw	fp,24(sp)
10018498:	dc000515 	stw	r16,20(sp)
1001849c:	df000604 	addi	fp,sp,24
100184a0:	e13ffb15 	stw	r4,-20(fp)
100184a4:	e17ffc15 	stw	r5,-16(fp)
100184a8:	e1bffd15 	stw	r6,-12(fp)
100184ac:	e1fffe15 	stw	r7,-8(fp)

#ifndef __SINGLE_THREAD__
  __lock_acquire_recursive(__atexit_lock);
#endif

  p = _GLOBAL_ATEXIT;
100184b0:	008403b4 	movhi	r2,4110
100184b4:	10a4cd04 	addi	r2,r2,-27852
100184b8:	10800017 	ldw	r2,0(r2)
100184bc:	14005217 	ldw	r16,328(r2)
  if (p == NULL)
100184c0:	8000081e 	bne	r16,zero,100184e4 <__register_exitproc+0x58>
    _GLOBAL_ATEXIT = p = _GLOBAL_ATEXIT0;
100184c4:	008403b4 	movhi	r2,4110
100184c8:	10a4cd04 	addi	r2,r2,-27852
100184cc:	10c00017 	ldw	r3,0(r2)
100184d0:	008403b4 	movhi	r2,4110
100184d4:	10a4cd04 	addi	r2,r2,-27852
100184d8:	10800017 	ldw	r2,0(r2)
100184dc:	14005304 	addi	r16,r2,332
100184e0:	1c005215 	stw	r16,328(r3)
  if (p->_ind >= _ATEXIT_SIZE)
100184e4:	80800117 	ldw	r2,4(r16)
100184e8:	10800810 	cmplti	r2,r2,32
100184ec:	1000171e 	bne	r2,zero,1001854c <__register_exitproc+0xc0>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      return -1;
#else
      /* Don't dynamically allocate the atexit array if malloc is not
	 available.  */
      if (!malloc)
100184f0:	00840034 	movhi	r2,4096
100184f4:	109ae804 	addi	r2,r2,27552
100184f8:	1000021e 	bne	r2,zero,10018504 <__register_exitproc+0x78>
	return -1;
100184fc:	00bfffc4 	movi	r2,-1
10018500:	00004206 	br	1001860c <__register_exitproc+0x180>

      p = (struct _atexit *) malloc (sizeof *p);
10018504:	01006404 	movi	r4,400
10018508:	0006ba00 	call	10006ba0 <malloc>
1001850c:	1021883a 	mov	r16,r2
      if (p == NULL)
10018510:	8000021e 	bne	r16,zero,1001851c <__register_exitproc+0x90>
	{
#ifndef __SINGLE_THREAD__
	  __lock_release_recursive(__atexit_lock);
#endif
	  return -1;
10018514:	00bfffc4 	movi	r2,-1
10018518:	00003c06 	br	1001860c <__register_exitproc+0x180>
	}
      p->_ind = 0;
1001851c:	80000115 	stw	zero,4(r16)
      p->_next = _GLOBAL_ATEXIT;
10018520:	008403b4 	movhi	r2,4110
10018524:	10a4cd04 	addi	r2,r2,-27852
10018528:	10800017 	ldw	r2,0(r2)
1001852c:	10805217 	ldw	r2,328(r2)
10018530:	80800015 	stw	r2,0(r16)
      _GLOBAL_ATEXIT = p;
10018534:	008403b4 	movhi	r2,4110
10018538:	10a4cd04 	addi	r2,r2,-27852
1001853c:	10800017 	ldw	r2,0(r2)
10018540:	14005215 	stw	r16,328(r2)
#ifndef _REENT_SMALL
      p->_on_exit_args._fntypes = 0;
10018544:	80006215 	stw	zero,392(r16)
      p->_on_exit_args._is_cxa = 0;
10018548:	80006315 	stw	zero,396(r16)
      p->_on_exit_args_ptr = NULL;
#endif
#endif
    }

  if (type != __et_atexit)
1001854c:	e0bffb17 	ldw	r2,-20(fp)
10018550:	10002426 	beq	r2,zero,100185e4 <__register_exitproc+0x158>
	  args->_fntypes = 0;
	  args->_is_cxa = 0;
	  p->_on_exit_args_ptr = args;
	}
#else
      args = &p->_on_exit_args;
10018554:	80802204 	addi	r2,r16,136
10018558:	e0bffa15 	stw	r2,-24(fp)
#endif
      args->_fnargs[p->_ind] = arg;
1001855c:	80800117 	ldw	r2,4(r16)
10018560:	e0fffa17 	ldw	r3,-24(fp)
10018564:	1085883a 	add	r2,r2,r2
10018568:	1085883a 	add	r2,r2,r2
1001856c:	1885883a 	add	r2,r3,r2
10018570:	e0fffd17 	ldw	r3,-12(fp)
10018574:	10c00015 	stw	r3,0(r2)
      args->_fntypes |= (1 << p->_ind);
10018578:	e0bffa17 	ldw	r2,-24(fp)
1001857c:	10804017 	ldw	r2,256(r2)
10018580:	80c00117 	ldw	r3,4(r16)
10018584:	01000044 	movi	r4,1
10018588:	20c6983a 	sll	r3,r4,r3
1001858c:	10c6b03a 	or	r3,r2,r3
10018590:	e0bffa17 	ldw	r2,-24(fp)
10018594:	10c04015 	stw	r3,256(r2)
      args->_dso_handle[p->_ind] = d;
10018598:	80800117 	ldw	r2,4(r16)
1001859c:	e0fffa17 	ldw	r3,-24(fp)
100185a0:	10800804 	addi	r2,r2,32
100185a4:	1085883a 	add	r2,r2,r2
100185a8:	1085883a 	add	r2,r2,r2
100185ac:	1885883a 	add	r2,r3,r2
100185b0:	e0fffe17 	ldw	r3,-8(fp)
100185b4:	10c00015 	stw	r3,0(r2)
      if (type == __et_cxa)
100185b8:	e0bffb17 	ldw	r2,-20(fp)
100185bc:	10800098 	cmpnei	r2,r2,2
100185c0:	1000081e 	bne	r2,zero,100185e4 <__register_exitproc+0x158>
	args->_is_cxa |= (1 << p->_ind);
100185c4:	e0bffa17 	ldw	r2,-24(fp)
100185c8:	10804117 	ldw	r2,260(r2)
100185cc:	80c00117 	ldw	r3,4(r16)
100185d0:	01000044 	movi	r4,1
100185d4:	20c6983a 	sll	r3,r4,r3
100185d8:	10c6b03a 	or	r3,r2,r3
100185dc:	e0bffa17 	ldw	r2,-24(fp)
100185e0:	10c04115 	stw	r3,260(r2)
    }
  p->_fns[p->_ind++] = fn;
100185e4:	80800117 	ldw	r2,4(r16)
100185e8:	10c00044 	addi	r3,r2,1
100185ec:	80c00115 	stw	r3,4(r16)
100185f0:	10800084 	addi	r2,r2,2
100185f4:	1085883a 	add	r2,r2,r2
100185f8:	1085883a 	add	r2,r2,r2
100185fc:	8085883a 	add	r2,r16,r2
10018600:	e0fffc17 	ldw	r3,-16(fp)
10018604:	10c00015 	stw	r3,0(r2)
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif
  return 0;
10018608:	0005883a 	mov	r2,zero
}
1001860c:	e6ffff04 	addi	sp,fp,-4
10018610:	dfc00217 	ldw	ra,8(sp)
10018614:	df000117 	ldw	fp,4(sp)
10018618:	dc000017 	ldw	r16,0(sp)
1001861c:	dec00304 	addi	sp,sp,12
10018620:	f800283a 	ret

10018624 <__call_exitprocs>:
 */

void 
_DEFUN (__call_exitprocs, (code, d),
	int code _AND _PTR d)
{
10018624:	defff504 	addi	sp,sp,-44
10018628:	dfc00a15 	stw	ra,40(sp)
1001862c:	df000915 	stw	fp,36(sp)
10018630:	dc800815 	stw	r18,32(sp)
10018634:	dc400715 	stw	r17,28(sp)
10018638:	dc000615 	stw	r16,24(sp)
1001863c:	df000904 	addi	fp,sp,36
10018640:	e13ffb15 	stw	r4,-20(fp)
10018644:	e17ffc15 	stw	r5,-16(fp)
  __lock_acquire_recursive(__atexit_lock);
#endif

 restart:

  p = _GLOBAL_ATEXIT;
10018648:	008403b4 	movhi	r2,4110
1001864c:	10a4cd04 	addi	r2,r2,-27852
10018650:	10800017 	ldw	r2,0(r2)
10018654:	14005217 	ldw	r16,328(r2)
  lastp = &_GLOBAL_ATEXIT;
10018658:	008403b4 	movhi	r2,4110
1001865c:	10a4cd04 	addi	r2,r2,-27852
10018660:	10800017 	ldw	r2,0(r2)
10018664:	10805204 	addi	r2,r2,328
10018668:	e0bff715 	stw	r2,-36(fp)
  while (p)
1001866c:	00006006 	br	100187f0 <__call_exitprocs+0x1cc>
    {
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
10018670:	84802204 	addi	r18,r16,136
#endif
      for (n = p->_ind - 1; n >= 0; n--)
10018674:	80800117 	ldw	r2,4(r16)
10018678:	147fffc4 	addi	r17,r2,-1
1001867c:	00004a06 	br	100187a8 <__call_exitprocs+0x184>
	{
	  int ind;

	  i = 1 << n;
10018680:	00800044 	movi	r2,1
10018684:	1444983a 	sll	r2,r2,r17
10018688:	e0bff815 	stw	r2,-32(fp)

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
1001868c:	e0bffc17 	ldw	r2,-16(fp)
10018690:	10000826 	beq	r2,zero,100186b4 <__call_exitprocs+0x90>
10018694:	90004026 	beq	r18,zero,10018798 <__call_exitprocs+0x174>
10018698:	88800804 	addi	r2,r17,32
1001869c:	1085883a 	add	r2,r2,r2
100186a0:	1085883a 	add	r2,r2,r2
100186a4:	9085883a 	add	r2,r18,r2
100186a8:	10c00017 	ldw	r3,0(r2)
100186ac:	e0bffc17 	ldw	r2,-16(fp)
100186b0:	1880391e 	bne	r3,r2,10018798 <__call_exitprocs+0x174>
	    continue;

	  /* Remove the function now to protect against the
	     function calling exit recursively.  */
	  fn = p->_fns[n];
100186b4:	88800084 	addi	r2,r17,2
100186b8:	1085883a 	add	r2,r2,r2
100186bc:	1085883a 	add	r2,r2,r2
100186c0:	8085883a 	add	r2,r16,r2
100186c4:	10800017 	ldw	r2,0(r2)
100186c8:	e0bff915 	stw	r2,-28(fp)
	  if (n == p->_ind - 1)
100186cc:	80800117 	ldw	r2,4(r16)
100186d0:	10bfffc4 	addi	r2,r2,-1
100186d4:	1440041e 	bne	r2,r17,100186e8 <__call_exitprocs+0xc4>
	    p->_ind--;
100186d8:	80800117 	ldw	r2,4(r16)
100186dc:	10bfffc4 	addi	r2,r2,-1
100186e0:	80800115 	stw	r2,4(r16)
100186e4:	00000506 	br	100186fc <__call_exitprocs+0xd8>
	  else
	    p->_fns[n] = NULL;
100186e8:	88800084 	addi	r2,r17,2
100186ec:	1085883a 	add	r2,r2,r2
100186f0:	1085883a 	add	r2,r2,r2
100186f4:	8085883a 	add	r2,r16,r2
100186f8:	10000015 	stw	zero,0(r2)

	  /* Skip functions that have already been called.  */
	  if (!fn)
100186fc:	e0bff917 	ldw	r2,-28(fp)
10018700:	10002726 	beq	r2,zero,100187a0 <__call_exitprocs+0x17c>
	    continue;

	  ind = p->_ind;
10018704:	80800117 	ldw	r2,4(r16)
10018708:	e0bffa15 	stw	r2,-24(fp)

	  /* Call the function.  */
	  if (!args || (args->_fntypes & i) == 0)
1001870c:	90000426 	beq	r18,zero,10018720 <__call_exitprocs+0xfc>
10018710:	90c04017 	ldw	r3,256(r18)
10018714:	e0bff817 	ldw	r2,-32(fp)
10018718:	1884703a 	and	r2,r3,r2
1001871c:	1000031e 	bne	r2,zero,1001872c <__call_exitprocs+0x108>
	    fn ();
10018720:	e0bff917 	ldw	r2,-28(fp)
10018724:	103ee83a 	callr	r2
10018728:	00001406 	br	1001877c <__call_exitprocs+0x158>
	  else if ((args->_is_cxa & i) == 0)
1001872c:	90c04117 	ldw	r3,260(r18)
10018730:	e0bff817 	ldw	r2,-32(fp)
10018734:	1884703a 	and	r2,r3,r2
10018738:	1000091e 	bne	r2,zero,10018760 <__call_exitprocs+0x13c>
	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
1001873c:	8c45883a 	add	r2,r17,r17
10018740:	1085883a 	add	r2,r2,r2
10018744:	9085883a 	add	r2,r18,r2
10018748:	10c00017 	ldw	r3,0(r2)
1001874c:	e0bff917 	ldw	r2,-28(fp)
10018750:	180b883a 	mov	r5,r3
10018754:	e13ffb17 	ldw	r4,-20(fp)
10018758:	103ee83a 	callr	r2
1001875c:	00000706 	br	1001877c <__call_exitprocs+0x158>
	  else
	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
10018760:	8c45883a 	add	r2,r17,r17
10018764:	1085883a 	add	r2,r2,r2
10018768:	9085883a 	add	r2,r18,r2
1001876c:	10c00017 	ldw	r3,0(r2)
10018770:	e0bff917 	ldw	r2,-28(fp)
10018774:	1809883a 	mov	r4,r3
10018778:	103ee83a 	callr	r2

	  /* The function we called call atexit and registered another
	     function (or functions).  Call these new functions before
	     continuing with the already registered functions.  */
	  if (ind != p->_ind || *lastp != p)
1001877c:	80c00117 	ldw	r3,4(r16)
10018780:	e0bffa17 	ldw	r2,-24(fp)
10018784:	18bfb01e 	bne	r3,r2,10018648 <__alt_data_end+0xf8018648>
10018788:	e0bff717 	ldw	r2,-36(fp)
1001878c:	10800017 	ldw	r2,0(r2)
10018790:	143fad1e 	bne	r2,r16,10018648 <__alt_data_end+0xf8018648>
10018794:	00000306 	br	100187a4 <__call_exitprocs+0x180>

	  i = 1 << n;

	  /* Skip functions not from this dso.  */
	  if (d && (!args || args->_dso_handle[n] != d))
	    continue;
10018798:	0001883a 	nop
1001879c:	00000106 	br	100187a4 <__call_exitprocs+0x180>
	  else
	    p->_fns[n] = NULL;

	  /* Skip functions that have already been called.  */
	  if (!fn)
	    continue;
100187a0:	0001883a 	nop
#ifdef _REENT_SMALL
      args = p->_on_exit_args_ptr;
#else
      args = &p->_on_exit_args;
#endif
      for (n = p->_ind - 1; n >= 0; n--)
100187a4:	8c7fffc4 	addi	r17,r17,-1
100187a8:	883fb50e 	bge	r17,zero,10018680 <__alt_data_end+0xf8018680>
#ifndef _ATEXIT_DYNAMIC_ALLOC
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
100187ac:	00840034 	movhi	r2,4096
100187b0:	109af804 	addi	r2,r2,27616
100187b4:	10001026 	beq	r2,zero,100187f8 <__call_exitprocs+0x1d4>
	break;

      /* Move to the next block.  Free empty blocks except the last one,
	 which is part of _GLOBAL_REENT.  */
      if (p->_ind == 0 && p->_next)
100187b8:	80800117 	ldw	r2,4(r16)
100187bc:	10000a1e 	bne	r2,zero,100187e8 <__call_exitprocs+0x1c4>
100187c0:	80800017 	ldw	r2,0(r16)
100187c4:	10000826 	beq	r2,zero,100187e8 <__call_exitprocs+0x1c4>
	{
	  /* Remove empty block from the list.  */
	  *lastp = p->_next;
100187c8:	80c00017 	ldw	r3,0(r16)
100187cc:	e0bff717 	ldw	r2,-36(fp)
100187d0:	10c00015 	stw	r3,0(r2)
#ifdef _REENT_SMALL
	  if (args)
	    free (args);
#endif
	  free (p);
100187d4:	8009883a 	mov	r4,r16
100187d8:	0006be00 	call	10006be0 <free>
	  p = *lastp;
100187dc:	e0bff717 	ldw	r2,-36(fp)
100187e0:	14000017 	ldw	r16,0(r2)
100187e4:	00000206 	br	100187f0 <__call_exitprocs+0x1cc>
	}
      else
	{
	  lastp = &p->_next;
100187e8:	e43ff715 	stw	r16,-36(fp)
	  p = p->_next;
100187ec:	84000017 	ldw	r16,0(r16)

 restart:

  p = _GLOBAL_ATEXIT;
  lastp = &_GLOBAL_ATEXIT;
  while (p)
100187f0:	803f9f1e 	bne	r16,zero,10018670 <__alt_data_end+0xf8018670>
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
100187f4:	00000106 	br	100187fc <__call_exitprocs+0x1d8>
      break;
#else
      /* Don't dynamically free the atexit array if free is not
	 available.  */
      if (!free)
	break;
100187f8:	0001883a 	nop
    }
#ifndef __SINGLE_THREAD__
  __lock_release_recursive(__atexit_lock);
#endif

}
100187fc:	0001883a 	nop
10018800:	e6fffd04 	addi	sp,fp,-12
10018804:	dfc00417 	ldw	ra,16(sp)
10018808:	df000317 	ldw	fp,12(sp)
1001880c:	dc800217 	ldw	r18,8(sp)
10018810:	dc400117 	ldw	r17,4(sp)
10018814:	dc000017 	ldw	r16,0(sp)
10018818:	dec00504 	addi	sp,sp,20
1001881c:	f800283a 	ret

10018820 <__muldi3>:
10018820:	defff604 	addi	sp,sp,-40
10018824:	dd800615 	stw	r22,24(sp)
10018828:	dd400515 	stw	r21,20(sp)
1001882c:	dc400115 	stw	r17,4(sp)
10018830:	357fffcc 	andi	r21,r6,65535
10018834:	2022d43a 	srli	r17,r4,16
10018838:	25bfffcc 	andi	r22,r4,65535
1001883c:	dcc00315 	stw	r19,12(sp)
10018840:	dc800215 	stw	r18,8(sp)
10018844:	2027883a 	mov	r19,r4
10018848:	2825883a 	mov	r18,r5
1001884c:	b009883a 	mov	r4,r22
10018850:	a80b883a 	mov	r5,r21
10018854:	dfc00915 	stw	ra,36(sp)
10018858:	df000815 	stw	fp,32(sp)
1001885c:	ddc00715 	stw	r23,28(sp)
10018860:	3839883a 	mov	fp,r7
10018864:	302ed43a 	srli	r23,r6,16
10018868:	dd000415 	stw	r20,16(sp)
1001886c:	dc000015 	stw	r16,0(sp)
10018870:	3029883a 	mov	r20,r6
10018874:	00065d80 	call	100065d8 <__mulsi3>
10018878:	a80b883a 	mov	r5,r21
1001887c:	8809883a 	mov	r4,r17
10018880:	1021883a 	mov	r16,r2
10018884:	00065d80 	call	100065d8 <__mulsi3>
10018888:	8809883a 	mov	r4,r17
1001888c:	b80b883a 	mov	r5,r23
10018890:	102b883a 	mov	r21,r2
10018894:	00065d80 	call	100065d8 <__mulsi3>
10018898:	b80b883a 	mov	r5,r23
1001889c:	b009883a 	mov	r4,r22
100188a0:	1023883a 	mov	r17,r2
100188a4:	00065d80 	call	100065d8 <__mulsi3>
100188a8:	8006d43a 	srli	r3,r16,16
100188ac:	1545883a 	add	r2,r2,r21
100188b0:	1885883a 	add	r2,r3,r2
100188b4:	1540022e 	bgeu	r2,r21,100188c0 <__muldi3+0xa0>
100188b8:	00c00074 	movhi	r3,1
100188bc:	88e3883a 	add	r17,r17,r3
100188c0:	1006d43a 	srli	r3,r2,16
100188c4:	1004943a 	slli	r2,r2,16
100188c8:	e00b883a 	mov	r5,fp
100188cc:	9809883a 	mov	r4,r19
100188d0:	843fffcc 	andi	r16,r16,65535
100188d4:	1c63883a 	add	r17,r3,r17
100188d8:	1421883a 	add	r16,r2,r16
100188dc:	00065d80 	call	100065d8 <__mulsi3>
100188e0:	900b883a 	mov	r5,r18
100188e4:	a009883a 	mov	r4,r20
100188e8:	1027883a 	mov	r19,r2
100188ec:	00065d80 	call	100065d8 <__mulsi3>
100188f0:	9885883a 	add	r2,r19,r2
100188f4:	1447883a 	add	r3,r2,r17
100188f8:	8005883a 	mov	r2,r16
100188fc:	dfc00917 	ldw	ra,36(sp)
10018900:	df000817 	ldw	fp,32(sp)
10018904:	ddc00717 	ldw	r23,28(sp)
10018908:	dd800617 	ldw	r22,24(sp)
1001890c:	dd400517 	ldw	r21,20(sp)
10018910:	dd000417 	ldw	r20,16(sp)
10018914:	dcc00317 	ldw	r19,12(sp)
10018918:	dc800217 	ldw	r18,8(sp)
1001891c:	dc400117 	ldw	r17,4(sp)
10018920:	dc000017 	ldw	r16,0(sp)
10018924:	dec00a04 	addi	sp,sp,40
10018928:	f800283a 	ret

1001892c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
1001892c:	defffd04 	addi	sp,sp,-12
10018930:	df000215 	stw	fp,8(sp)
10018934:	df000204 	addi	fp,sp,8
10018938:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
1001893c:	0001883a 	nop
10018940:	e0bfff17 	ldw	r2,-4(fp)
10018944:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10018948:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
1001894c:	10000226 	beq	r2,zero,10018958 <_exit+0x2c>
    ALT_SIM_FAIL();
10018950:	002af070 	cmpltui	zero,zero,43969
10018954:	00000106 	br	1001895c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10018958:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
1001895c:	003fff06 	br	1001895c <__alt_data_end+0xf801895c>
